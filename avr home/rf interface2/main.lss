
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000430  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  000004a4  2**0
                  ALLOC
  2 .stab         00001080  00000000  00000000  000004a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000084e  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f7 01 	call	0x3ee	; 0x3ee <main>
  74:	0c 94 16 02 	jmp	0x42c	; 0x42c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <spi_master_init>:
 Wait(1);	
}

void spi_master_init(void)//******************************************************************4
{
  DDRD|=0x02;				//spi slave select pin configure as output
  7c:	89 9a       	sbi	0x11, 1	; 17
  DDRB|=0x2C;				//spi pins (mosi, sck, ss) configure as output  important ss must shod be configured  even if it is not in use
  7e:	87 b3       	in	r24, 0x17	; 23
  80:	8c 62       	ori	r24, 0x2C	; 44
  82:	87 bb       	out	0x17, r24	; 23
  SPCR = 0x50;				//spe=1(spi enable),DDRD=1(MSB first),mstr=1(master)
  84:	80 e5       	ldi	r24, 0x50	; 80
  86:	8d b9       	out	0x0d, r24	; 13
}
  88:	08 95       	ret

0000008a <cc_reset>:

void cc_reset(void)//*************************************************************************5
{
	csn1; 
  8a:	91 9a       	sbi	0x12, 1	; 18
	...
    Wait(1); 
    csn0; 
  94:	91 98       	cbi	0x12, 1	; 18
	...
    Wait(1); 
    csn1; 
  9e:	91 9a       	sbi	0x12, 1	; 18
  a0:	89 e2       	ldi	r24, 0x29	; 41
	...
    do {
        asm("nop");
        asm("nop");
        asm("nop");
        asm("nop");
	} while (--timeout);
  aa:	81 50       	subi	r24, 0x01	; 1
  ac:	d1 f7       	brne	.-12     	; 0xa2 <cc_reset+0x18>
    Wait(1); 
    csn0; 
    Wait(1); 
    csn1; 
    Wait(41);
	csn0;
  ae:	91 98       	cbi	0x12, 1	; 18
    while (miso);//((PINB&0x08)); 
  b0:	b4 99       	sbic	0x16, 4	; 22
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <cc_reset+0x26>
    SPDR = 0x30; 
  b4:	80 e3       	ldi	r24, 0x30	; 48
  b6:	8f b9       	out	0x0f, r24	; 15
    while((SPSR&0x80)==0);			 //SPI_WAIT(); 
  b8:	77 9b       	sbis	0x0e, 7	; 14
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <cc_reset+0x2e>
	while (miso);//((PINB&0x08)); 
  bc:	b4 99       	sbic	0x16, 4	; 22
  be:	fe cf       	rjmp	.-4      	; 0xbc <cc_reset+0x32>
    csn1; 
  c0:	91 9a       	sbi	0x12, 1	; 18
}
  c2:	08 95       	ret

000000c4 <cc_readreg>:
 
}

void cc_readreg(char add)//*******************************************************************7
{
  csn0;
  c4:	91 98       	cbi	0x12, 1	; 18
  while(miso);
  c6:	b4 99       	sbic	0x16, 4	; 22
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <cc_readreg+0x2>
  SPDR=(add|0x80);
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	8f b9       	out	0x0f, r24	; 15
	...
  Wait(1);	
  while((SPSR&0x80)==0);			//pull the ss line to down to activate slave 
  d6:	77 9b       	sbis	0x0e, 7	; 14
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <cc_readreg+0x12>
  SPDR=0;							//place data on spi resistor
  da:	1f b8       	out	0x0f, r1	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
  dc:	77 9b       	sbis	0x0e, 7	; 14
  de:	fe cf       	rjmp	.-4      	; 0xdc <cc_readreg+0x18>
  csn1;								//pull the ss line to up to deactivate the slave
  e0:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
  e2:	8f b1       	in	r24, 0x0f	; 15
  e4:	80 93 62 00 	sts	0x0062, r24
}
  e8:	08 95       	ret

000000ea <rf_receive>:
 sei();
}

void rf_receive() //**************************************************************************3
{
 cc_readreg(0x3F);
  ea:	8f e3       	ldi	r24, 0x3F	; 63
  ec:	0e 94 62 00 	call	0xc4	; 0xc4 <cc_readreg>
 cc_data=retval;
  f0:	80 91 62 00 	lds	r24, 0x0062
  f4:	80 93 60 00 	sts	0x0060, r24
 if(retval==5)
  f8:	85 30       	cpi	r24, 0x05	; 5
  fa:	19 f4       	brne	.+6      	; 0x102 <rf_receive+0x18>
 PORTA=0xAA;
  fc:	8a ea       	ldi	r24, 0xAA	; 170
  fe:	8b bb       	out	0x1b, r24	; 27
 100:	01 c0       	rjmp	.+2      	; 0x104 <rf_receive+0x1a>
 else
 PORTA=0x00;
 102:	1b ba       	out	0x1b, r1	; 27
 104:	85 e0       	ldi	r24, 0x05	; 5
	...
    do {
        asm("nop");
        asm("nop");
        asm("nop");
        asm("nop");
	} while (--timeout);
 10e:	81 50       	subi	r24, 0x01	; 1
 110:	d1 f7       	brne	.-12     	; 0x106 <rf_receive+0x1c>
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 112:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 114:	b4 99       	sbic	0x16, 4	; 22
 116:	fe cf       	rjmp	.-4      	; 0x114 <rf_receive+0x2a>
  SPDR=data;						//place data on spi resistor
 118:	8a e3       	ldi	r24, 0x3A	; 58
 11a:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 11c:	77 9b       	sbis	0x0e, 7	; 14
 11e:	fe cf       	rjmp	.-4      	; 0x11c <rf_receive+0x32>
  csn1;								//pull the ss line to up to deactivate the slave
 120:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 122:	8f b1       	in	r24, 0x0f	; 15
	...
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 12c:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 12e:	b4 99       	sbic	0x16, 4	; 22
 130:	fe cf       	rjmp	.-4      	; 0x12e <rf_receive+0x44>
  SPDR=data;						//place data on spi resistor
 132:	86 e3       	ldi	r24, 0x36	; 54
 134:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 136:	77 9b       	sbis	0x0e, 7	; 14
 138:	fe cf       	rjmp	.-4      	; 0x136 <rf_receive+0x4c>
  csn1;								//pull the ss line to up to deactivate the slave
 13a:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 13c:	8f b1       	in	r24, 0x0f	; 15
	...
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 146:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 148:	b4 99       	sbic	0x16, 4	; 22
 14a:	fe cf       	rjmp	.-4      	; 0x148 <rf_receive+0x5e>
  SPDR=data;						//place data on spi resistor
 14c:	84 e3       	ldi	r24, 0x34	; 52
 14e:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 150:	77 9b       	sbis	0x0e, 7	; 14
 152:	fe cf       	rjmp	.-4      	; 0x150 <rf_receive+0x66>
  csn1;								//pull the ss line to up to deactivate the slave
 154:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 156:	8f b1       	in	r24, 0x0f	; 15
 158:	80 93 62 00 	sts	0x0062, r24
	...
 Wait(1);
 cc_strobe(0x36); //ideale mode 
 Wait(1);
 cc_strobe(0x34);	//receive mode
 Wait(1);	
}
 164:	08 95       	ret

00000166 <__vector_1>:


unsigned char retval,flag,cc_data;

ISR (INT0_vect) //****************************************************************************0
{ 
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	2f 93       	push	r18
 172:	3f 93       	push	r19
 174:	4f 93       	push	r20
 176:	5f 93       	push	r21
 178:	6f 93       	push	r22
 17a:	7f 93       	push	r23
 17c:	8f 93       	push	r24
 17e:	9f 93       	push	r25
 180:	af 93       	push	r26
 182:	bf 93       	push	r27
 184:	ef 93       	push	r30
 186:	ff 93       	push	r31
  if(flag==0)
 188:	80 91 61 00 	lds	r24, 0x0061
 18c:	88 23       	and	r24, r24
 18e:	19 f4       	brne	.+6      	; 0x196 <__vector_1+0x30>
   {
    // LCD_gotoXY(4,3);
    // LCD_writeString_F ("inter ");
    // LCD_showvalue(count);
     rf_receive();
 190:	0e 94 75 00 	call	0xea	; 0xea <rf_receive>
 194:	02 c0       	rjmp	.+4      	; 0x19a <__vector_1+0x34>
   }
  else
   {
     flag=0;
 196:	10 92 61 00 	sts	0x0061, r1
   }
   
}
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	bf 91       	pop	r27
 1a0:	af 91       	pop	r26
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	7f 91       	pop	r23
 1a8:	6f 91       	pop	r22
 1aa:	5f 91       	pop	r21
 1ac:	4f 91       	pop	r20
 1ae:	3f 91       	pop	r19
 1b0:	2f 91       	pop	r18
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <cc_writereg>:
  retval = SPDR;
}

void cc_writereg(char add,char data)//********************************************************8
{
  csn0;
 1bc:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 1be:	b4 99       	sbic	0x16, 4	; 22
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <cc_writereg+0x2>
  SPDR=add;
 1c2:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//pull the ss line to down to activate slave 
 1c4:	77 9b       	sbis	0x0e, 7	; 14
 1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <cc_writereg+0x8>
  SPDR=data;				//place data on spi resistor
 1c8:	6f b9       	out	0x0f, r22	; 15
  while((SPSR&0x80)==0);	//wait foe the spi transmittion complit
 1ca:	77 9b       	sbis	0x0e, 7	; 14
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <cc_writereg+0xe>
  csn1;
 1ce:	91 9a       	sbi	0x12, 1	; 18
	...
  Wait(1);
}
 1d8:	08 95       	ret

000001da <cc_config>:
    csn1; 
}

void cc_config(void) //***********************************************************************6
{
 cc_writereg(0X0B,0x07);
 1da:	8b e0       	ldi	r24, 0x0B	; 11
 1dc:	67 e0       	ldi	r22, 0x07	; 7
 1de:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x0c,0x00);
 1e2:	8c e0       	ldi	r24, 0x0C	; 12
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x0D,0x5D);
 1ea:	8d e0       	ldi	r24, 0x0D	; 13
 1ec:	6d e5       	ldi	r22, 0x5D	; 93
 1ee:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x0E,0x93);
 1f2:	8e e0       	ldi	r24, 0x0E	; 14
 1f4:	63 e9       	ldi	r22, 0x93	; 147
 1f6:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x0F,0xB1);//93
 1fa:	8f e0       	ldi	r24, 0x0F	; 15
 1fc:	61 eb       	ldi	r22, 0xB1	; 177
 1fe:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 
 cc_writereg(0x10,0x2D);
 202:	80 e1       	ldi	r24, 0x10	; 16
 204:	6d e2       	ldi	r22, 0x2D	; 45
 206:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x11,0x3B);
 20a:	81 e1       	ldi	r24, 0x11	; 17
 20c:	6b e3       	ldi	r22, 0x3B	; 59
 20e:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x12,0x73);
 212:	82 e1       	ldi	r24, 0x12	; 18
 214:	63 e7       	ldi	r22, 0x73	; 115
 216:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x13,0x22);
 21a:	83 e1       	ldi	r24, 0x13	; 19
 21c:	62 e2       	ldi	r22, 0x22	; 34
 21e:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x14,0xF8);
 222:	84 e1       	ldi	r24, 0x14	; 20
 224:	68 ef       	ldi	r22, 0xF8	; 248
 226:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 
 cc_writereg(0x0A,0x00);//Channel No. 
 22a:	8a e0       	ldi	r24, 0x0A	; 10
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 
 cc_writereg(0x15,0x00);//
 232:	85 e1       	ldi	r24, 0x15	; 21
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 
 cc_writereg(0x21,0xB6);
 23a:	81 e2       	ldi	r24, 0x21	; 33
 23c:	66 eb       	ldi	r22, 0xB6	; 182
 23e:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x22,0x10);
 242:	82 e2       	ldi	r24, 0x22	; 34
 244:	60 e1       	ldi	r22, 0x10	; 16
 246:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 
 cc_writereg(0x18,0x18);
 24a:	88 e1       	ldi	r24, 0x18	; 24
 24c:	68 e1       	ldi	r22, 0x18	; 24
 24e:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x19,0x1D);
 252:	89 e1       	ldi	r24, 0x19	; 25
 254:	6d e1       	ldi	r22, 0x1D	; 29
 256:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 
 cc_writereg(0x1A,0x1C);
 25a:	8a e1       	ldi	r24, 0x1A	; 26
 25c:	6c e1       	ldi	r22, 0x1C	; 28
 25e:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x1B,0xC7);
 262:	8b e1       	ldi	r24, 0x1B	; 27
 264:	67 ec       	ldi	r22, 0xC7	; 199
 266:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x1C,0x00);
 26a:	8c e1       	ldi	r24, 0x1C	; 28
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x1D,0xB2);//f8
 272:	8d e1       	ldi	r24, 0x1D	; 29
 274:	62 eb       	ldi	r22, 0xB2	; 178
 276:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 
 cc_writereg(0x23,0xEA);
 27a:	83 e2       	ldi	r24, 0x23	; 35
 27c:	6a ee       	ldi	r22, 0xEA	; 234
 27e:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x24,0x0A);
 282:	84 e2       	ldi	r24, 0x24	; 36
 284:	6a e0       	ldi	r22, 0x0A	; 10
 286:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x25,0x00);
 28a:	85 e2       	ldi	r24, 0x25	; 37
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x26,0x11);
 292:	86 e2       	ldi	r24, 0x26	; 38
 294:	61 e1       	ldi	r22, 0x11	; 17
 296:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x29,0x59);
 29a:	89 e2       	ldi	r24, 0x29	; 41
 29c:	69 e5       	ldi	r22, 0x59	; 89
 29e:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 
 cc_writereg(0x2C,0x88);
 2a2:	8c e2       	ldi	r24, 0x2C	; 44
 2a4:	68 e8       	ldi	r22, 0x88	; 136
 2a6:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x2D,0x31);
 2aa:	8d e2       	ldi	r24, 0x2D	; 45
 2ac:	61 e3       	ldi	r22, 0x31	; 49
 2ae:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x2E,0x0B);
 2b2:	8e e2       	ldi	r24, 0x2E	; 46
 2b4:	6b e0       	ldi	r22, 0x0B	; 11
 2b6:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 
 cc_writereg(0x00,0x06);  //iocfg2
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	66 e0       	ldi	r22, 0x06	; 6
 2be:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 
 cc_writereg(0x02,0x06);  //iocfg0
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	66 e0       	ldi	r22, 0x06	; 6
 2c6:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 
 cc_writereg(0x07,0x04);
 2ca:	87 e0       	ldi	r24, 0x07	; 7
 2cc:	64 e0       	ldi	r22, 0x04	; 4
 2ce:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x08,0x05);  //pktctrl 0 
 2d2:	88 e0       	ldi	r24, 0x08	; 8
 2d4:	65 e0       	ldi	r22, 0x05	; 5
 2d6:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x09,0x00);//device address
 2da:	89 e0       	ldi	r24, 0x09	; 9
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x06,0xFF);
 2e2:	86 e0       	ldi	r24, 0x06	; 6
 2e4:	6f ef       	ldi	r22, 0xFF	; 255
 2e6:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 
 //sync bits
 cc_writereg(0x04,0x12);
 2ea:	84 e0       	ldi	r24, 0x04	; 4
 2ec:	62 e1       	ldi	r22, 0x12	; 18
 2ee:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 cc_writereg(0x05,0x34);
 2f2:	85 e0       	ldi	r24, 0x05	; 5
 2f4:	64 e3       	ldi	r22, 0x34	; 52
 2f6:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
 
}
 2fa:	08 95       	ret

000002fc <rf_init>:
 Wait(1);	
}

void spi_master_init(void)//******************************************************************4
{
  DDRD|=0x02;				//spi slave select pin configure as output
 2fc:	89 9a       	sbi	0x11, 1	; 17
  DDRB|=0x2C;				//spi pins (mosi, sck, ss) configure as output  important ss must shod be configured  even if it is not in use
 2fe:	87 b3       	in	r24, 0x17	; 23
 300:	8c 62       	ori	r24, 0x2C	; 44
 302:	87 bb       	out	0x17, r24	; 23
  SPCR = 0x50;				//spe=1(spi enable),DDRD=1(MSB first),mstr=1(master)
 304:	80 e5       	ldi	r24, 0x50	; 80
 306:	8d b9       	out	0x0d, r24	; 13
}

void rf_init() //*****************************************************************************1
{
 spi_master_init();
 cc_reset();
 308:	0e 94 45 00 	call	0x8a	; 0x8a <cc_reset>
 cc_config();
 30c:	0e 94 ed 00 	call	0x1da	; 0x1da <cc_config>
 310:	84 e6       	ldi	r24, 0x64	; 100
	...
    do {
        asm("nop");
        asm("nop");
        asm("nop");
        asm("nop");
	} while (--timeout);
 31a:	81 50       	subi	r24, 0x01	; 1
 31c:	d1 f7       	brne	.-12     	; 0x312 <rf_init+0x16>
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 31e:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 320:	b4 99       	sbic	0x16, 4	; 22
 322:	fe cf       	rjmp	.-4      	; 0x320 <rf_init+0x24>
  SPDR=data;						//place data on spi resistor
 324:	84 e3       	ldi	r24, 0x34	; 52
 326:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 328:	77 9b       	sbis	0x0e, 7	; 14
 32a:	fe cf       	rjmp	.-4      	; 0x328 <rf_init+0x2c>
  csn1;								//pull the ss line to up to deactivate the slave
 32c:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 32e:	8f b1       	in	r24, 0x0f	; 15
 330:	80 93 62 00 	sts	0x0062, r24
 spi_master_init();
 cc_reset();
 cc_config();
 Wait(100);   
 cc_strobe(0x34); //receive mode
 MCUCR=0x02;
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	85 bf       	out	0x35, r24	; 53
 GICR=0x40;
 338:	80 e4       	ldi	r24, 0x40	; 64
 33a:	8b bf       	out	0x3b, r24	; 59
 sei();	 
 33c:	78 94       	sei
}
 33e:	08 95       	ret

00000340 <rf_transmit>:

void rf_transmit(unsigned char CCdata)//**************************************************************************2
{
 340:	68 2f       	mov	r22, r24
 cli();
 342:	f8 94       	cli
 flag=1;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	80 93 61 00 	sts	0x0061, r24
 cc_writereg(0x3f,CCdata);
 34a:	8f e3       	ldi	r24, 0x3F	; 63
 34c:	0e 94 de 00 	call	0x1bc	; 0x1bc <cc_writereg>
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 350:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 352:	b4 99       	sbic	0x16, 4	; 22
 354:	fe cf       	rjmp	.-4      	; 0x352 <rf_transmit+0x12>
  SPDR=data;						//place data on spi resistor
 356:	85 e3       	ldi	r24, 0x35	; 53
 358:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 35a:	77 9b       	sbis	0x0e, 7	; 14
 35c:	fe cf       	rjmp	.-4      	; 0x35a <rf_transmit+0x1a>
  csn1;								//pull the ss line to up to deactivate the slave
 35e:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 360:	8f b1       	in	r24, 0x0f	; 15
{
 cli();
 flag=1;
 cc_writereg(0x3f,CCdata);
 cc_strobe(0x35);	 //transmitter mode
 while(!gd0);
 362:	82 9b       	sbis	0x10, 2	; 16
 364:	fe cf       	rjmp	.-4      	; 0x362 <rf_transmit+0x22>
 while(gd0);
 366:	82 99       	sbic	0x10, 2	; 16
 368:	fe cf       	rjmp	.-4      	; 0x366 <rf_transmit+0x26>
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 36a:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 36c:	b4 99       	sbic	0x16, 4	; 22
 36e:	fe cf       	rjmp	.-4      	; 0x36c <rf_transmit+0x2c>
  SPDR=data;						//place data on spi resistor
 370:	8a e3       	ldi	r24, 0x3A	; 58
 372:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 374:	77 9b       	sbis	0x0e, 7	; 14
 376:	fe cf       	rjmp	.-4      	; 0x374 <rf_transmit+0x34>
  csn1;								//pull the ss line to up to deactivate the slave
 378:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 37a:	8f b1       	in	r24, 0x0f	; 15
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 37c:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 37e:	b4 99       	sbic	0x16, 4	; 22
 380:	fe cf       	rjmp	.-4      	; 0x37e <rf_transmit+0x3e>
  SPDR=data;						//place data on spi resistor
 382:	8b e3       	ldi	r24, 0x3B	; 59
 384:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 386:	77 9b       	sbis	0x0e, 7	; 14
 388:	fe cf       	rjmp	.-4      	; 0x386 <rf_transmit+0x46>
  csn1;								//pull the ss line to up to deactivate the slave
 38a:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 38c:	8f b1       	in	r24, 0x0f	; 15
	...
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 396:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 398:	b4 99       	sbic	0x16, 4	; 22
 39a:	fe cf       	rjmp	.-4      	; 0x398 <rf_transmit+0x58>
  SPDR=data;						//place data on spi resistor
 39c:	86 e3       	ldi	r24, 0x36	; 54
 39e:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 3a0:	77 9b       	sbis	0x0e, 7	; 14
 3a2:	fe cf       	rjmp	.-4      	; 0x3a0 <rf_transmit+0x60>
  csn1;								//pull the ss line to up to deactivate the slave
 3a4:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 3a6:	8f b1       	in	r24, 0x0f	; 15
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 3a8:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 3aa:	b4 99       	sbic	0x16, 4	; 22
 3ac:	fe cf       	rjmp	.-4      	; 0x3aa <rf_transmit+0x6a>
  SPDR=data;						//place data on spi resistor
 3ae:	84 e3       	ldi	r24, 0x34	; 52
 3b0:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 3b2:	77 9b       	sbis	0x0e, 7	; 14
 3b4:	fe cf       	rjmp	.-4      	; 0x3b2 <rf_transmit+0x72>
  csn1;								//pull the ss line to up to deactivate the slave
 3b6:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 3b8:	8f b1       	in	r24, 0x0f	; 15
 3ba:	80 93 62 00 	sts	0x0062, r24
	...
 cc_strobe(0x3B);  //flux txfifo
 Wait(1);
 cc_strobe(0x36); //ideale mode 
 cc_strobe(0x34); //receiver mode
 Wait(1); 
 sei();
 3c6:	78 94       	sei
}
 3c8:	08 95       	ret

000003ca <cc_strobe>:
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 3ca:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 3cc:	b4 99       	sbic	0x16, 4	; 22
 3ce:	fe cf       	rjmp	.-4      	; 0x3cc <cc_strobe+0x2>
  SPDR=data;						//place data on spi resistor
 3d0:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 3d2:	77 9b       	sbis	0x0e, 7	; 14
 3d4:	fe cf       	rjmp	.-4      	; 0x3d2 <cc_strobe+0x8>
  csn1;								//pull the ss line to up to deactivate the slave
 3d6:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 3d8:	8f b1       	in	r24, 0x0f	; 15
 3da:	80 93 62 00 	sts	0x0062, r24
}
 3de:	08 95       	ret

000003e0 <Wait>:
	...
    do {
        asm("nop");
        asm("nop");
        asm("nop");
        asm("nop");
	} while (--timeout);
 3e8:	81 50       	subi	r24, 0x01	; 1
 3ea:	d1 f7       	brne	.-12     	; 0x3e0 <Wait>
}
 3ec:	08 95       	ret

000003ee <main>:
*********************************************************************************/
#include<avr/io.h>
#include<util/delay.h>
#include "cc2500.h"
int main(void)
{
 3ee:	1f 93       	push	r17
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	88 e8       	ldi	r24, 0x88	; 136
 3f6:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3f8:	20 e9       	ldi	r18, 0x90	; 144
 3fa:	31 e0       	ldi	r19, 0x01	; 1
 3fc:	f9 01       	movw	r30, r18
 3fe:	31 97       	sbiw	r30, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <main+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 402:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 404:	d9 f7       	brne	.-10     	; 0x3fc <main+0xe>
int i=5;
_delay_ms(500);
DDRA=0xFF;
 406:	8f ef       	ldi	r24, 0xFF	; 255
 408:	8a bb       	out	0x1a, r24	; 26
rf_init();
 40a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <rf_init>
 40e:	15 e0       	ldi	r17, 0x05	; 5
 410:	c0 e9       	ldi	r28, 0x90	; 144
 412:	d1 e0       	ldi	r29, 0x01	; 1

 while(1)
  {
     
    rf_transmit(i);
 414:	81 2f       	mov	r24, r17
 416:	0e 94 a0 01 	call	0x340	; 0x340 <rf_transmit>
 41a:	80 e1       	ldi	r24, 0x10	; 16
 41c:	97 e2       	ldi	r25, 0x27	; 39
 41e:	fe 01       	movw	r30, r28
 420:	31 97       	sbiw	r30, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <main+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 424:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 426:	d9 f7       	brne	.-10     	; 0x41e <main+0x30>
 428:	1f 5f       	subi	r17, 0xFF	; 255
 42a:	f4 cf       	rjmp	.-24     	; 0x414 <main+0x26>

0000042c <_exit>:
 42c:	f8 94       	cli

0000042e <__stop_program>:
 42e:	ff cf       	rjmp	.-2      	; 0x42e <__stop_program>
