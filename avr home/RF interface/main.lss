
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  000004ae  2**0
                  ALLOC
  2 .stab         00001128  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000084e  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f6 01 	call	0x3ec	; 0x3ec <main>
  74:	0c 94 1b 02 	jmp	0x436	; 0x436 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <spi_master_init>:
 Wait(1);	
}

void spi_master_init(void)//******************************************************************4
{
  DDRD|=0x02;				//spi slave select pin configure as output
  7c:	89 9a       	sbi	0x11, 1	; 17
  DDRB|=0xF0;				//spi pins (mosi, sck, ss) configure as output  important ss must shod be configured  even if it is not in use
  7e:	87 b3       	in	r24, 0x17	; 23
  80:	80 6f       	ori	r24, 0xF0	; 240
  82:	87 bb       	out	0x17, r24	; 23
  SPCR = 0x51;				//spe=1(spi enable),DDRD=1(MSB first),mstr=1(master)
  84:	81 e5       	ldi	r24, 0x51	; 81
  86:	8d b9       	out	0x0d, r24	; 13
}
  88:	08 95       	ret

0000008a <cc_reset>:

void cc_reset(void)//*************************************************************************5
{
	csn1; 
  8a:	91 9a       	sbi	0x12, 1	; 18
	...
    Wait(1); 
    csn0; 
  94:	91 98       	cbi	0x12, 1	; 18
	...
    Wait(1); 
    csn1; 
  9e:	91 9a       	sbi	0x12, 1	; 18
  a0:	89 e2       	ldi	r24, 0x29	; 41
	...
    do {
        asm("nop");
        asm("nop");
        asm("nop");
        asm("nop");
	} while (--timeout);
  aa:	81 50       	subi	r24, 0x01	; 1
  ac:	d1 f7       	brne	.-12     	; 0xa2 <cc_reset+0x18>
    Wait(1); 
    csn0; 
    Wait(1); 
    csn1; 
    Wait(41);
	csn0;
  ae:	91 98       	cbi	0x12, 1	; 18
    while (miso);//((PINB&0x08)); 
  b0:	b5 99       	sbic	0x16, 5	; 22
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <cc_reset+0x26>
    SPDR = 0x30; 
  b4:	80 e3       	ldi	r24, 0x30	; 48
  b6:	8f b9       	out	0x0f, r24	; 15
    while((SPSR&0x80)==0);			 //SPI_WAIT(); 
  b8:	77 9b       	sbis	0x0e, 7	; 14
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <cc_reset+0x2e>
	while (miso);//((PINB&0x08)); 
  bc:	b5 99       	sbic	0x16, 5	; 22
  be:	fe cf       	rjmp	.-4      	; 0xbc <cc_reset+0x32>
    csn1; 
  c0:	91 9a       	sbi	0x12, 1	; 18
}
  c2:	08 95       	ret

000000c4 <cc_readreg>:
 
}

void cc_readreg(char add)//*******************************************************************7
{
  csn0;
  c4:	91 98       	cbi	0x12, 1	; 18
  while(miso);
  c6:	b5 99       	sbic	0x16, 5	; 22
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <cc_readreg+0x2>
  SPDR=(add|0x80);
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	8f b9       	out	0x0f, r24	; 15
	...
  Wait(1);	
  while((SPSR&0x80)==0);			//pull the ss line to down to activate slave 
  d6:	77 9b       	sbis	0x0e, 7	; 14
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <cc_readreg+0x12>
  SPDR=0;							//place data on spi resistor
  da:	1f b8       	out	0x0f, r1	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
  dc:	77 9b       	sbis	0x0e, 7	; 14
  de:	fe cf       	rjmp	.-4      	; 0xdc <cc_readreg+0x18>
  csn1;								//pull the ss line to up to deactivate the slave
  e0:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
  e2:	8f b1       	in	r24, 0x0f	; 15
  e4:	80 93 62 00 	sts	0x0062, r24
}
  e8:	08 95       	ret

000000ea <rf_receive>:
 sei();
}

void rf_receive() //**************************************************************************3
{
 cc_readreg(0x3F);
  ea:	8f e3       	ldi	r24, 0x3F	; 63
  ec:	0e 94 62 00 	call	0xc4	; 0xc4 <cc_readreg>
 cc_data=retval;
  f0:	80 91 62 00 	lds	r24, 0x0062
  f4:	80 93 60 00 	sts	0x0060, r24
 if(retval==5)
  f8:	85 30       	cpi	r24, 0x05	; 5
  fa:	11 f4       	brne	.+4      	; 0x100 <rf_receive+0x16>
 sbi(PORTA,5);
  fc:	dd 9a       	sbi	0x1b, 5	; 27
  fe:	02 c0       	rjmp	.+4      	; 0x104 <rf_receive+0x1a>
 else
 cbi(PORTA,5);
 100:	dd 98       	cbi	0x1b, 5	; 27
 102:	85 e0       	ldi	r24, 0x05	; 5
	...
    do {
        asm("nop");
        asm("nop");
        asm("nop");
        asm("nop");
	} while (--timeout);
 10c:	81 50       	subi	r24, 0x01	; 1
 10e:	d1 f7       	brne	.-12     	; 0x104 <rf_receive+0x1a>
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 110:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 112:	b5 99       	sbic	0x16, 5	; 22
 114:	fe cf       	rjmp	.-4      	; 0x112 <rf_receive+0x28>
  SPDR=data;						//place data on spi resistor
 116:	8a e3       	ldi	r24, 0x3A	; 58
 118:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 11a:	77 9b       	sbis	0x0e, 7	; 14
 11c:	fe cf       	rjmp	.-4      	; 0x11a <rf_receive+0x30>
  csn1;								//pull the ss line to up to deactivate the slave
 11e:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 120:	8f b1       	in	r24, 0x0f	; 15
	...
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 12a:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 12c:	b5 99       	sbic	0x16, 5	; 22
 12e:	fe cf       	rjmp	.-4      	; 0x12c <rf_receive+0x42>
  SPDR=data;						//place data on spi resistor
 130:	86 e3       	ldi	r24, 0x36	; 54
 132:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 134:	77 9b       	sbis	0x0e, 7	; 14
 136:	fe cf       	rjmp	.-4      	; 0x134 <rf_receive+0x4a>
  csn1;								//pull the ss line to up to deactivate the slave
 138:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 13a:	8f b1       	in	r24, 0x0f	; 15
	...
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 144:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 146:	b5 99       	sbic	0x16, 5	; 22
 148:	fe cf       	rjmp	.-4      	; 0x146 <rf_receive+0x5c>
  SPDR=data;						//place data on spi resistor
 14a:	84 e3       	ldi	r24, 0x34	; 52
 14c:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 14e:	77 9b       	sbis	0x0e, 7	; 14
 150:	fe cf       	rjmp	.-4      	; 0x14e <rf_receive+0x64>
  csn1;								//pull the ss line to up to deactivate the slave
 152:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 154:	8f b1       	in	r24, 0x0f	; 15
 156:	80 93 62 00 	sts	0x0062, r24
	...
 Wait(1);
 cc_strobe(0x36); //ideale mode 
 Wait(1);
 cc_strobe(0x34);	//receive mode
 Wait(1);	
}
 162:	08 95       	ret

00000164 <__vector_1>:


unsigned char retval,flag,cc_data;

ISR (INT0_vect) //****************************************************************************0
{ 
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	2f 93       	push	r18
 170:	3f 93       	push	r19
 172:	4f 93       	push	r20
 174:	5f 93       	push	r21
 176:	6f 93       	push	r22
 178:	7f 93       	push	r23
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	af 93       	push	r26
 180:	bf 93       	push	r27
 182:	ef 93       	push	r30
 184:	ff 93       	push	r31
  if(flag==0)
 186:	80 91 61 00 	lds	r24, 0x0061
 18a:	88 23       	and	r24, r24
 18c:	19 f4       	brne	.+6      	; 0x194 <__vector_1+0x30>
   {
    // LCD_gotoXY(4,3);
    // LCD_writeString_F ("inter ");
    // LCD_showvalue(count);
     rf_receive();
 18e:	0e 94 75 00 	call	0xea	; 0xea <rf_receive>
 192:	02 c0       	rjmp	.+4      	; 0x198 <__vector_1+0x34>
   }
  else
   {
     flag=0;
 194:	10 92 61 00 	sts	0x0061, r1
   }
   
}
 198:	ff 91       	pop	r31
 19a:	ef 91       	pop	r30
 19c:	bf 91       	pop	r27
 19e:	af 91       	pop	r26
 1a0:	9f 91       	pop	r25
 1a2:	8f 91       	pop	r24
 1a4:	7f 91       	pop	r23
 1a6:	6f 91       	pop	r22
 1a8:	5f 91       	pop	r21
 1aa:	4f 91       	pop	r20
 1ac:	3f 91       	pop	r19
 1ae:	2f 91       	pop	r18
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <cc_writereg>:
  retval = SPDR;
}

void cc_writereg(char add,char data)//********************************************************8
{
  csn0;
 1ba:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 1bc:	b5 99       	sbic	0x16, 5	; 22
 1be:	fe cf       	rjmp	.-4      	; 0x1bc <cc_writereg+0x2>
  SPDR=add;
 1c0:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//pull the ss line to down to activate slave 
 1c2:	77 9b       	sbis	0x0e, 7	; 14
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <cc_writereg+0x8>
  SPDR=data;				//place data on spi resistor
 1c6:	6f b9       	out	0x0f, r22	; 15
  while((SPSR&0x80)==0);	//wait foe the spi transmittion complit
 1c8:	77 9b       	sbis	0x0e, 7	; 14
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <cc_writereg+0xe>
  csn1;
 1cc:	91 9a       	sbi	0x12, 1	; 18
	...
  Wait(1);
}
 1d6:	08 95       	ret

000001d8 <cc_config>:
    csn1; 
}

void cc_config(void) //***********************************************************************6
{
 cc_writereg(0X0B,0x07);
 1d8:	8b e0       	ldi	r24, 0x0B	; 11
 1da:	67 e0       	ldi	r22, 0x07	; 7
 1dc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x0c,0x00);
 1e0:	8c e0       	ldi	r24, 0x0C	; 12
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x0D,0x5D);
 1e8:	8d e0       	ldi	r24, 0x0D	; 13
 1ea:	6d e5       	ldi	r22, 0x5D	; 93
 1ec:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x0E,0x93);
 1f0:	8e e0       	ldi	r24, 0x0E	; 14
 1f2:	63 e9       	ldi	r22, 0x93	; 147
 1f4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x0F,0xB1);//93
 1f8:	8f e0       	ldi	r24, 0x0F	; 15
 1fa:	61 eb       	ldi	r22, 0xB1	; 177
 1fc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 
 cc_writereg(0x10,0x2D);
 200:	80 e1       	ldi	r24, 0x10	; 16
 202:	6d e2       	ldi	r22, 0x2D	; 45
 204:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x11,0x3B);
 208:	81 e1       	ldi	r24, 0x11	; 17
 20a:	6b e3       	ldi	r22, 0x3B	; 59
 20c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x12,0x73);
 210:	82 e1       	ldi	r24, 0x12	; 18
 212:	63 e7       	ldi	r22, 0x73	; 115
 214:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x13,0x22);
 218:	83 e1       	ldi	r24, 0x13	; 19
 21a:	62 e2       	ldi	r22, 0x22	; 34
 21c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x14,0xF8);
 220:	84 e1       	ldi	r24, 0x14	; 20
 222:	68 ef       	ldi	r22, 0xF8	; 248
 224:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 
 cc_writereg(0x0A,0x00);//Channel No. 
 228:	8a e0       	ldi	r24, 0x0A	; 10
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 
 cc_writereg(0x15,0x00);//
 230:	85 e1       	ldi	r24, 0x15	; 21
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 
 cc_writereg(0x21,0xB6);
 238:	81 e2       	ldi	r24, 0x21	; 33
 23a:	66 eb       	ldi	r22, 0xB6	; 182
 23c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x22,0x10);
 240:	82 e2       	ldi	r24, 0x22	; 34
 242:	60 e1       	ldi	r22, 0x10	; 16
 244:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 
 cc_writereg(0x18,0x18);
 248:	88 e1       	ldi	r24, 0x18	; 24
 24a:	68 e1       	ldi	r22, 0x18	; 24
 24c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x19,0x1D);
 250:	89 e1       	ldi	r24, 0x19	; 25
 252:	6d e1       	ldi	r22, 0x1D	; 29
 254:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 
 cc_writereg(0x1A,0x1C);
 258:	8a e1       	ldi	r24, 0x1A	; 26
 25a:	6c e1       	ldi	r22, 0x1C	; 28
 25c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x1B,0xC7);
 260:	8b e1       	ldi	r24, 0x1B	; 27
 262:	67 ec       	ldi	r22, 0xC7	; 199
 264:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x1C,0x00);
 268:	8c e1       	ldi	r24, 0x1C	; 28
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x1D,0xB2);//f8
 270:	8d e1       	ldi	r24, 0x1D	; 29
 272:	62 eb       	ldi	r22, 0xB2	; 178
 274:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 
 cc_writereg(0x23,0xEA);
 278:	83 e2       	ldi	r24, 0x23	; 35
 27a:	6a ee       	ldi	r22, 0xEA	; 234
 27c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x24,0x0A);
 280:	84 e2       	ldi	r24, 0x24	; 36
 282:	6a e0       	ldi	r22, 0x0A	; 10
 284:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x25,0x00);
 288:	85 e2       	ldi	r24, 0x25	; 37
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x26,0x11);
 290:	86 e2       	ldi	r24, 0x26	; 38
 292:	61 e1       	ldi	r22, 0x11	; 17
 294:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x29,0x59);
 298:	89 e2       	ldi	r24, 0x29	; 41
 29a:	69 e5       	ldi	r22, 0x59	; 89
 29c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 
 cc_writereg(0x2C,0x88);
 2a0:	8c e2       	ldi	r24, 0x2C	; 44
 2a2:	68 e8       	ldi	r22, 0x88	; 136
 2a4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x2D,0x31);
 2a8:	8d e2       	ldi	r24, 0x2D	; 45
 2aa:	61 e3       	ldi	r22, 0x31	; 49
 2ac:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x2E,0x0B);
 2b0:	8e e2       	ldi	r24, 0x2E	; 46
 2b2:	6b e0       	ldi	r22, 0x0B	; 11
 2b4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 
 cc_writereg(0x00,0x06);  //iocfg2
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	66 e0       	ldi	r22, 0x06	; 6
 2bc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 
 cc_writereg(0x02,0x06);  //iocfg0
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	66 e0       	ldi	r22, 0x06	; 6
 2c4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 
 cc_writereg(0x07,0x04);
 2c8:	87 e0       	ldi	r24, 0x07	; 7
 2ca:	64 e0       	ldi	r22, 0x04	; 4
 2cc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x08,0x05);  //pktctrl 0 
 2d0:	88 e0       	ldi	r24, 0x08	; 8
 2d2:	65 e0       	ldi	r22, 0x05	; 5
 2d4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x09,0x00);//device address
 2d8:	89 e0       	ldi	r24, 0x09	; 9
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x06,0xFF);
 2e0:	86 e0       	ldi	r24, 0x06	; 6
 2e2:	6f ef       	ldi	r22, 0xFF	; 255
 2e4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 
 //sync bits
 cc_writereg(0x04,0x12);
 2e8:	84 e0       	ldi	r24, 0x04	; 4
 2ea:	62 e1       	ldi	r22, 0x12	; 18
 2ec:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 cc_writereg(0x05,0x34);
 2f0:	85 e0       	ldi	r24, 0x05	; 5
 2f2:	64 e3       	ldi	r22, 0x34	; 52
 2f4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
 
}
 2f8:	08 95       	ret

000002fa <rf_init>:
 Wait(1);	
}

void spi_master_init(void)//******************************************************************4
{
  DDRD|=0x02;				//spi slave select pin configure as output
 2fa:	89 9a       	sbi	0x11, 1	; 17
  DDRB|=0xF0;				//spi pins (mosi, sck, ss) configure as output  important ss must shod be configured  even if it is not in use
 2fc:	87 b3       	in	r24, 0x17	; 23
 2fe:	80 6f       	ori	r24, 0xF0	; 240
 300:	87 bb       	out	0x17, r24	; 23
  SPCR = 0x51;				//spe=1(spi enable),DDRD=1(MSB first),mstr=1(master)
 302:	81 e5       	ldi	r24, 0x51	; 81
 304:	8d b9       	out	0x0d, r24	; 13
}

void rf_init() //*****************************************************************************1
{
 spi_master_init();
 cc_reset();
 306:	0e 94 45 00 	call	0x8a	; 0x8a <cc_reset>
 cc_config();
 30a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <cc_config>
 30e:	84 e6       	ldi	r24, 0x64	; 100
	...
    do {
        asm("nop");
        asm("nop");
        asm("nop");
        asm("nop");
	} while (--timeout);
 318:	81 50       	subi	r24, 0x01	; 1
 31a:	d1 f7       	brne	.-12     	; 0x310 <rf_init+0x16>
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 31c:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 31e:	b5 99       	sbic	0x16, 5	; 22
 320:	fe cf       	rjmp	.-4      	; 0x31e <rf_init+0x24>
  SPDR=data;						//place data on spi resistor
 322:	84 e3       	ldi	r24, 0x34	; 52
 324:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 326:	77 9b       	sbis	0x0e, 7	; 14
 328:	fe cf       	rjmp	.-4      	; 0x326 <rf_init+0x2c>
  csn1;								//pull the ss line to up to deactivate the slave
 32a:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 32c:	8f b1       	in	r24, 0x0f	; 15
 32e:	80 93 62 00 	sts	0x0062, r24
 spi_master_init();
 cc_reset();
 cc_config();
 Wait(100);   
 cc_strobe(0x34); //receive mode
 MCUCR=0x02;
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	85 bf       	out	0x35, r24	; 53
 GICR=0x40;
 336:	80 e4       	ldi	r24, 0x40	; 64
 338:	8b bf       	out	0x3b, r24	; 59
 sei();	 
 33a:	78 94       	sei
}
 33c:	08 95       	ret

0000033e <rf_transmit>:

void rf_transmit(unsigned char CCdata)//**************************************************************************2
{
 33e:	68 2f       	mov	r22, r24
 cli();
 340:	f8 94       	cli
 flag=1;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	80 93 61 00 	sts	0x0061, r24
 cc_writereg(0x3f,CCdata);
 348:	8f e3       	ldi	r24, 0x3F	; 63
 34a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <cc_writereg>
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 34e:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 350:	b5 99       	sbic	0x16, 5	; 22
 352:	fe cf       	rjmp	.-4      	; 0x350 <rf_transmit+0x12>
  SPDR=data;						//place data on spi resistor
 354:	85 e3       	ldi	r24, 0x35	; 53
 356:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 358:	77 9b       	sbis	0x0e, 7	; 14
 35a:	fe cf       	rjmp	.-4      	; 0x358 <rf_transmit+0x1a>
  csn1;								//pull the ss line to up to deactivate the slave
 35c:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 35e:	8f b1       	in	r24, 0x0f	; 15
{
 cli();
 flag=1;
 cc_writereg(0x3f,CCdata);
 cc_strobe(0x35);	 //transmitter mode
 while(!gd0);
 360:	82 9b       	sbis	0x10, 2	; 16
 362:	fe cf       	rjmp	.-4      	; 0x360 <rf_transmit+0x22>
 while(gd0);
 364:	82 99       	sbic	0x10, 2	; 16
 366:	fe cf       	rjmp	.-4      	; 0x364 <rf_transmit+0x26>
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 368:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 36a:	b5 99       	sbic	0x16, 5	; 22
 36c:	fe cf       	rjmp	.-4      	; 0x36a <rf_transmit+0x2c>
  SPDR=data;						//place data on spi resistor
 36e:	8a e3       	ldi	r24, 0x3A	; 58
 370:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 372:	77 9b       	sbis	0x0e, 7	; 14
 374:	fe cf       	rjmp	.-4      	; 0x372 <rf_transmit+0x34>
  csn1;								//pull the ss line to up to deactivate the slave
 376:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 378:	8f b1       	in	r24, 0x0f	; 15
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 37a:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 37c:	b5 99       	sbic	0x16, 5	; 22
 37e:	fe cf       	rjmp	.-4      	; 0x37c <rf_transmit+0x3e>
  SPDR=data;						//place data on spi resistor
 380:	8b e3       	ldi	r24, 0x3B	; 59
 382:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 384:	77 9b       	sbis	0x0e, 7	; 14
 386:	fe cf       	rjmp	.-4      	; 0x384 <rf_transmit+0x46>
  csn1;								//pull the ss line to up to deactivate the slave
 388:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 38a:	8f b1       	in	r24, 0x0f	; 15
	...
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 394:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 396:	b5 99       	sbic	0x16, 5	; 22
 398:	fe cf       	rjmp	.-4      	; 0x396 <rf_transmit+0x58>
  SPDR=data;						//place data on spi resistor
 39a:	86 e3       	ldi	r24, 0x36	; 54
 39c:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 39e:	77 9b       	sbis	0x0e, 7	; 14
 3a0:	fe cf       	rjmp	.-4      	; 0x39e <rf_transmit+0x60>
  csn1;								//pull the ss line to up to deactivate the slave
 3a2:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 3a4:	8f b1       	in	r24, 0x0f	; 15
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 3a6:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 3a8:	b5 99       	sbic	0x16, 5	; 22
 3aa:	fe cf       	rjmp	.-4      	; 0x3a8 <rf_transmit+0x6a>
  SPDR=data;						//place data on spi resistor
 3ac:	84 e3       	ldi	r24, 0x34	; 52
 3ae:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 3b0:	77 9b       	sbis	0x0e, 7	; 14
 3b2:	fe cf       	rjmp	.-4      	; 0x3b0 <rf_transmit+0x72>
  csn1;								//pull the ss line to up to deactivate the slave
 3b4:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 3b6:	8f b1       	in	r24, 0x0f	; 15
 3b8:	80 93 62 00 	sts	0x0062, r24
	...
 cc_strobe(0x3B);  //flux txfifo
 Wait(1);
 cc_strobe(0x36); //ideale mode 
 cc_strobe(0x34); //receiver mode
 Wait(1); 
 sei();
 3c4:	78 94       	sei
}
 3c6:	08 95       	ret

000003c8 <cc_strobe>:
  Wait(1);
}

cc_strobe(char data) //***********************************************************************9
{
  csn0;								//pull the ss line to down to activate slave 
 3c8:	91 98       	cbi	0x12, 1	; 18
  while(miso);
 3ca:	b5 99       	sbic	0x16, 5	; 22
 3cc:	fe cf       	rjmp	.-4      	; 0x3ca <cc_strobe+0x2>
  SPDR=data;						//place data on spi resistor
 3ce:	8f b9       	out	0x0f, r24	; 15
  while((SPSR&0x80)==0);			//wait foe the spi transmittion complit
 3d0:	77 9b       	sbis	0x0e, 7	; 14
 3d2:	fe cf       	rjmp	.-4      	; 0x3d0 <cc_strobe+0x8>
  csn1;								//pull the ss line to up to deactivate the slave
 3d4:	91 9a       	sbi	0x12, 1	; 18
  retval = SPDR;
 3d6:	8f b1       	in	r24, 0x0f	; 15
 3d8:	80 93 62 00 	sts	0x0062, r24
}
 3dc:	08 95       	ret

000003de <Wait>:
	...
    do {
        asm("nop");
        asm("nop");
        asm("nop");
        asm("nop");
	} while (--timeout);
 3e6:	81 50       	subi	r24, 0x01	; 1
 3e8:	d1 f7       	brne	.-12     	; 0x3de <Wait>
}
 3ea:	08 95       	ret

000003ec <main>:
#include<avr/io.h>
#include<util/delay.h>
#include<compat/deprecated.h>
#include "cc2500.h"
int main(void)
{
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	88 e8       	ldi	r24, 0x88	; 136
 3f2:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3f4:	20 e9       	ldi	r18, 0x90	; 144
 3f6:	31 e0       	ldi	r19, 0x01	; 1
 3f8:	f9 01       	movw	r30, r18
 3fa:	31 97       	sbiw	r30, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <main+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 400:	d9 f7       	brne	.-10     	; 0x3f8 <main+0xc>
int i=5;
_delay_ms(500);
DDRA=0xFF;
 402:	8f ef       	ldi	r24, 0xFF	; 255
 404:	8a bb       	out	0x1a, r24	; 26
rf_init();
 406:	0e 94 7d 01 	call	0x2fa	; 0x2fa <rf_init>
 40a:	c0 e9       	ldi	r28, 0x90	; 144
 40c:	d1 e0       	ldi	r29, 0x01	; 1

 while(1)
  {
    sbi(PORTA,4); 
 40e:	dc 9a       	sbi	0x1b, 4	; 27
    rf_transmit(i);
 410:	85 e0       	ldi	r24, 0x05	; 5
 412:	0e 94 9f 01 	call	0x33e	; 0x33e <rf_transmit>
 416:	80 e1       	ldi	r24, 0x10	; 16
 418:	97 e2       	ldi	r25, 0x27	; 39
 41a:	fe 01       	movw	r30, r28
 41c:	31 97       	sbiw	r30, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <main+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 420:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 422:	d9 f7       	brne	.-10     	; 0x41a <main+0x2e>
	_delay_ms(1000);
	cbi(PORTA,4);
 424:	dc 98       	cbi	0x1b, 4	; 27
 426:	80 e1       	ldi	r24, 0x10	; 16
 428:	97 e2       	ldi	r25, 0x27	; 39
 42a:	fe 01       	movw	r30, r28
 42c:	31 97       	sbiw	r30, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <main+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 430:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 432:	d9 f7       	brne	.-10     	; 0x42a <main+0x3e>
 434:	ec cf       	rjmp	.-40     	; 0x40e <main+0x22>

00000436 <_exit>:
 436:	f8 94       	cli

00000438 <__stop_program>:
 438:	ff cf       	rjmp	.-2      	; 0x438 <__stop_program>
