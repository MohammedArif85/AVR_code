
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000076  00000000  00000000  0000016d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000041  00000000  00000000  000001e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000011d  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008a  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void) {

//Port D pins as input

DDRD=0xF0;
  6c:	80 ef       	ldi	r24, 0xF0	; 240
  6e:	81 bb       	out	0x11, r24	; 17

//Enable internal pull ups

PORTD=0xFF;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	82 bb       	out	0x12, r24	; 18

//Fast PWM

//ICR1=1250 defines 50Hz PWM-16mhz/256

ICR1=1250;
  74:	82 ee       	ldi	r24, 0xE2	; 226
  76:	94 e0       	ldi	r25, 0x04	; 4
  78:	97 bd       	out	0x27, r25	; 39
  7a:	86 bd       	out	0x26, r24	; 38

TCCR1A|=(0<<COM1A0)|(1<<COM1A1)|(0<<COM1B0)|(1<<COM1B1)|
  7c:	8f b5       	in	r24, 0x2f	; 47
  7e:	82 6a       	ori	r24, 0xA2	; 162
  80:	8f bd       	out	0x2f, r24	; 47

(0<<FOC1A)|(0<<FOC1B)|(1<<WGM11)|(0<<WGM10);

TCCR1B|=(0<<ICNC1)|(0<<ICES1)|(1<<WGM13)|(1<<WGM12)|
  82:	8e b5       	in	r24, 0x2e	; 46
  84:	8c 61       	ori	r24, 0x1C	; 28
  86:	8e bd       	out	0x2e, r24	; 46

if(bit_is_clear(PIND, 0)){

//increase duty cycle

OCR1A=38;
  88:	66 e2       	ldi	r22, 0x26	; 38
  8a:	70 e0       	ldi	r23, 0x00	; 0

if(bit_is_clear(PIND, 1)) {

//decease duty cycle

OCR1A=66;
  8c:	42 e4       	ldi	r20, 0x42	; 66
  8e:	50 e0       	ldi	r21, 0x00	; 0

if(bit_is_clear(PIND, 2)){

//increase duty cycle

OCR1A=94;
  90:	2e e5       	ldi	r18, 0x5E	; 94
  92:	30 e0       	ldi	r19, 0x00	; 0

if(bit_is_clear(PIND, 3)) {

//decease duty cycle

OCR1A=150;
  94:	86 e9       	ldi	r24, 0x96	; 150
  96:	90 e0       	ldi	r25, 0x00	; 0

//start timer with prescaler 8

for (;;) {

if(bit_is_clear(PIND, 0)){
  98:	80 99       	sbic	0x10, 0	; 16
  9a:	06 c0       	rjmp	.+12     	; 0xa8 <main+0x3c>

//increase duty cycle

OCR1A=38;
  9c:	7b bd       	out	0x2b, r23	; 43
  9e:	6a bd       	out	0x2a, r22	; 42
OCR1B=38;
  a0:	79 bd       	out	0x29, r23	; 41
  a2:	68 bd       	out	0x28, r22	; 40

loop_until_bit_is_set(PIND, 0);
  a4:	80 9b       	sbis	0x10, 0	; 16
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <main+0x38>

}

if(bit_is_clear(PIND, 1)) {
  a8:	81 99       	sbic	0x10, 1	; 16
  aa:	06 c0       	rjmp	.+12     	; 0xb8 <main+0x4c>

//decease duty cycle

OCR1A=66;
  ac:	5b bd       	out	0x2b, r21	; 43
  ae:	4a bd       	out	0x2a, r20	; 42
OCR1B=66;
  b0:	59 bd       	out	0x29, r21	; 41
  b2:	48 bd       	out	0x28, r20	; 40

loop_until_bit_is_set(PIND, 1);
  b4:	81 9b       	sbis	0x10, 1	; 16
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <main+0x48>

}

if(bit_is_clear(PIND, 2)){
  b8:	82 99       	sbic	0x10, 2	; 16
  ba:	06 c0       	rjmp	.+12     	; 0xc8 <main+0x5c>

//increase duty cycle

OCR1A=94;
  bc:	3b bd       	out	0x2b, r19	; 43
  be:	2a bd       	out	0x2a, r18	; 42
OCR1B=94;
  c0:	39 bd       	out	0x29, r19	; 41
  c2:	28 bd       	out	0x28, r18	; 40

loop_until_bit_is_set(PIND, 2);
  c4:	82 9b       	sbis	0x10, 2	; 16
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <main+0x58>

}

if(bit_is_clear(PIND, 3)) {
  c8:	83 99       	sbic	0x10, 3	; 16
  ca:	e6 cf       	rjmp	.-52     	; 0x98 <main+0x2c>

//decease duty cycle

OCR1A=150;
  cc:	9b bd       	out	0x2b, r25	; 43
  ce:	8a bd       	out	0x2a, r24	; 42
OCR1B=150;
  d0:	99 bd       	out	0x29, r25	; 41
  d2:	88 bd       	out	0x28, r24	; 40

loop_until_bit_is_set(PIND, 3);
  d4:	83 9b       	sbis	0x10, 3	; 16
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <main+0x68>
  d8:	df cf       	rjmp	.-66     	; 0x98 <main+0x2c>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
