
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000516  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000056a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000035  00000000  00000000  0000058a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001e1  00000000  00000000  000005bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f8  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000026a  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000b04  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e1  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001de  00000000  00000000  00000c25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000b0  00000000  00000000  00000e03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 2a 01 	call	0x254	; 0x254 <main>
  64:	0c 94 89 02 	jmp	0x512	; 0x512 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <pattern1>:
#include<util/delay.h>



void pattern1(unsigned char d)
{
  6c:	4f 92       	push	r4
  6e:	5f 92       	push	r5
  70:	6f 92       	push	r6
  72:	7f 92       	push	r7
  74:	8f 92       	push	r8
  76:	9f 92       	push	r9
  78:	af 92       	push	r10
  7a:	bf 92       	push	r11
  7c:	cf 92       	push	r12
  7e:	df 92       	push	r13
  80:	ef 92       	push	r14
  82:	ff 92       	push	r15
  84:	0f 93       	push	r16
  86:	1f 93       	push	r17
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
 unsigned char c;
 for(c=0;c<4;c++)
 {
 PORTA=0x80>>c;
 _delay_ms(d);
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	a0 e0       	ldi	r26, 0x00	; 0
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	bc 01       	movw	r22, r24
  94:	cd 01       	movw	r24, r26
  96:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__floatunsisf>
  9a:	5b 01       	movw	r10, r22
  9c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	4a e7       	ldi	r20, 0x7A	; 122
  a4:	55 e4       	ldi	r21, 0x45	; 69
  a6:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__mulsf3>
  aa:	7b 01       	movw	r14, r22
  ac:	8c 01       	movw	r16, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
  ae:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
  b2:	2b 01       	movw	r4, r22
  b4:	c0 e0       	ldi	r28, 0x00	; 0
  b6:	d0 e0       	ldi	r29, 0x00	; 0
void pattern1(unsigned char d)
{
 unsigned char c;
 for(c=0;c<4;c++)
 {
 PORTA=0x80>>c;
  b8:	90 e8       	ldi	r25, 0x80	; 128
  ba:	69 2e       	mov	r6, r25
  bc:	71 2c       	mov	r7, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  be:	80 e9       	ldi	r24, 0x90	; 144
  c0:	88 2e       	mov	r8, r24
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	98 2e       	mov	r9, r24
  c6:	c3 01       	movw	r24, r6
  c8:	0c 2e       	mov	r0, r28
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <pattern1+0x64>
  cc:	95 95       	asr	r25
  ce:	87 95       	ror	r24
  d0:	0a 94       	dec	r0
  d2:	e2 f7       	brpl	.-8      	; 0xcc <pattern1+0x60>
  d4:	8b bb       	out	0x1b, r24	; 27
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
  d6:	c8 01       	movw	r24, r16
  d8:	b7 01       	movw	r22, r14
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	40 e8       	ldi	r20, 0x80	; 128
  e0:	5f e3       	ldi	r21, 0x3F	; 63
  e2:	0e 94 40 01 	call	0x280	; 0x280 <__cmpsf2>
  e6:	87 fd       	sbrc	r24, 7
  e8:	20 c0       	rjmp	.+64     	; 0x12a <pattern1+0xbe>
		__ticks = 1;
	else if (__tmp > 65535)
  ea:	c8 01       	movw	r24, r16
  ec:	b7 01       	movw	r22, r14
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	3f ef       	ldi	r19, 0xFF	; 255
  f2:	4f e7       	ldi	r20, 0x7F	; 127
  f4:	57 e4       	ldi	r21, 0x47	; 71
  f6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__gesf2>
  fa:	18 16       	cp	r1, r24
  fc:	14 f0       	brlt	.+4      	; 0x102 <pattern1+0x96>
  fe:	92 01       	movw	r18, r4
 100:	16 c0       	rjmp	.+44     	; 0x12e <pattern1+0xc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 102:	c6 01       	movw	r24, r12
 104:	b5 01       	movw	r22, r10
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	40 e2       	ldi	r20, 0x20	; 32
 10c:	51 e4       	ldi	r21, 0x41	; 65
 10e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__mulsf3>
 112:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
 116:	05 c0       	rjmp	.+10     	; 0x122 <pattern1+0xb6>
 118:	c4 01       	movw	r24, r8
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <pattern1+0xae>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11e:	61 50       	subi	r22, 0x01	; 1
 120:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 122:	61 15       	cp	r22, r1
 124:	71 05       	cpc	r23, r1
 126:	c1 f7       	brne	.-16     	; 0x118 <pattern1+0xac>
 128:	05 c0       	rjmp	.+10     	; 0x134 <pattern1+0xc8>
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	c9 01       	movw	r24, r18
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <pattern1+0xc4>
 134:	21 96       	adiw	r28, 0x01	; 1


void pattern1(unsigned char d)
{
 unsigned char c;
 for(c=0;c<4;c++)
 136:	c4 30       	cpi	r28, 0x04	; 4
 138:	d1 05       	cpc	r29, r1
 13a:	29 f6       	brne	.-118    	; 0xc6 <pattern1+0x5a>
 {
 PORTA=0x80>>c;
 _delay_ms(d);
 }
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	ff 90       	pop	r15
 146:	ef 90       	pop	r14
 148:	df 90       	pop	r13
 14a:	cf 90       	pop	r12
 14c:	bf 90       	pop	r11
 14e:	af 90       	pop	r10
 150:	9f 90       	pop	r9
 152:	8f 90       	pop	r8
 154:	7f 90       	pop	r7
 156:	6f 90       	pop	r6
 158:	5f 90       	pop	r5
 15a:	4f 90       	pop	r4
 15c:	08 95       	ret

0000015e <pattern2>:
void pattern2(unsigned char d)
{
 15e:	4f 92       	push	r4
 160:	5f 92       	push	r5
 162:	6f 92       	push	r6
 164:	7f 92       	push	r7
 166:	8f 92       	push	r8
 168:	9f 92       	push	r9
 16a:	af 92       	push	r10
 16c:	bf 92       	push	r11
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 unsigned char c;
 for(c=0;c<4;c++)
 {
 PORTA=~(0x10<<c);
 _delay_ms(d);
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	a0 e0       	ldi	r26, 0x00	; 0
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	bc 01       	movw	r22, r24
 186:	cd 01       	movw	r24, r26
 188:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__floatunsisf>
 18c:	5b 01       	movw	r10, r22
 18e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	4a e7       	ldi	r20, 0x7A	; 122
 196:	55 e4       	ldi	r21, 0x45	; 69
 198:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__mulsf3>
 19c:	7b 01       	movw	r14, r22
 19e:	8c 01       	movw	r16, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1a0:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
 1a4:	2b 01       	movw	r4, r22
 1a6:	c0 e0       	ldi	r28, 0x00	; 0
 1a8:	d0 e0       	ldi	r29, 0x00	; 0
void pattern2(unsigned char d)
{
 unsigned char c;
 for(c=0;c<4;c++)
 {
 PORTA=~(0x10<<c);
 1aa:	30 e1       	ldi	r19, 0x10	; 16
 1ac:	63 2e       	mov	r6, r19
 1ae:	71 2c       	mov	r7, r1
 1b0:	20 e9       	ldi	r18, 0x90	; 144
 1b2:	82 2e       	mov	r8, r18
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	92 2e       	mov	r9, r18
 1b8:	c3 01       	movw	r24, r6
 1ba:	0c 2e       	mov	r0, r28
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <pattern2+0x64>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <pattern2+0x60>
 1c6:	80 95       	com	r24
 1c8:	8b bb       	out	0x1b, r24	; 27
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 1ca:	c8 01       	movw	r24, r16
 1cc:	b7 01       	movw	r22, r14
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	40 e8       	ldi	r20, 0x80	; 128
 1d4:	5f e3       	ldi	r21, 0x3F	; 63
 1d6:	0e 94 40 01 	call	0x280	; 0x280 <__cmpsf2>
 1da:	87 fd       	sbrc	r24, 7
 1dc:	20 c0       	rjmp	.+64     	; 0x21e <pattern2+0xc0>
		__ticks = 1;
	else if (__tmp > 65535)
 1de:	c8 01       	movw	r24, r16
 1e0:	b7 01       	movw	r22, r14
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	3f ef       	ldi	r19, 0xFF	; 255
 1e6:	4f e7       	ldi	r20, 0x7F	; 127
 1e8:	57 e4       	ldi	r21, 0x47	; 71
 1ea:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__gesf2>
 1ee:	18 16       	cp	r1, r24
 1f0:	14 f0       	brlt	.+4      	; 0x1f6 <pattern2+0x98>
 1f2:	92 01       	movw	r18, r4
 1f4:	16 c0       	rjmp	.+44     	; 0x222 <pattern2+0xc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1f6:	c6 01       	movw	r24, r12
 1f8:	b5 01       	movw	r22, r10
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	40 e2       	ldi	r20, 0x20	; 32
 200:	51 e4       	ldi	r21, 0x41	; 65
 202:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__mulsf3>
 206:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
 20a:	05 c0       	rjmp	.+10     	; 0x216 <pattern2+0xb8>
 20c:	c4 01       	movw	r24, r8
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <pattern2+0xb0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 212:	61 50       	subi	r22, 0x01	; 1
 214:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 216:	61 15       	cp	r22, r1
 218:	71 05       	cpc	r23, r1
 21a:	c1 f7       	brne	.-16     	; 0x20c <pattern2+0xae>
 21c:	05 c0       	rjmp	.+10     	; 0x228 <pattern2+0xca>
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	c9 01       	movw	r24, r18
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <pattern2+0xc6>
 228:	21 96       	adiw	r28, 0x01	; 1
 }
}
void pattern2(unsigned char d)
{
 unsigned char c;
 for(c=0;c<4;c++)
 22a:	c4 30       	cpi	r28, 0x04	; 4
 22c:	d1 05       	cpc	r29, r1
 22e:	09 f0       	breq	.+2      	; 0x232 <pattern2+0xd4>
 230:	c3 cf       	rjmp	.-122    	; 0x1b8 <pattern2+0x5a>
 {
 PORTA=~(0x10<<c);
 _delay_ms(d);
 }
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	ff 90       	pop	r15
 23c:	ef 90       	pop	r14
 23e:	df 90       	pop	r13
 240:	cf 90       	pop	r12
 242:	bf 90       	pop	r11
 244:	af 90       	pop	r10
 246:	9f 90       	pop	r9
 248:	8f 90       	pop	r8
 24a:	7f 90       	pop	r7
 24c:	6f 90       	pop	r6
 24e:	5f 90       	pop	r5
 250:	4f 90       	pop	r4
 252:	08 95       	ret

00000254 <main>:

void main()
{
  DDRA=0xF0;
 254:	80 ef       	ldi	r24, 0xF0	; 240
 256:	8a bb       	out	0x1a, r24	; 26
  DDRD=0x00;
 258:	11 ba       	out	0x11, r1	; 17
  PORTD=0x0F;
 25a:	8f e0       	ldi	r24, 0x0F	; 15
 25c:	82 bb       	out	0x12, r24	; 18
 25e:	03 c0       	rjmp	.+6      	; 0x266 <main+0x12>
  while(1)
  { 
  
   while((PIND&0x01)!=0)
   {
   pattern1(500);
 260:	84 ef       	ldi	r24, 0xF4	; 244
 262:	0e 94 36 00 	call	0x6c	; 0x6c <pattern1>
  DDRD=0x00;
  PORTD=0x0F;
  while(1)
  { 
  
   while((PIND&0x01)!=0)
 266:	80 99       	sbic	0x10, 0	; 16
 268:	fb cf       	rjmp	.-10     	; 0x260 <main+0xc>
   {
   pattern1(500);
   }
   while((PIND&0x01)!=1);
 26a:	80 9b       	sbis	0x10, 0	; 16
 26c:	fe cf       	rjmp	.-4      	; 0x26a <main+0x16>
 26e:	03 c0       	rjmp	.+6      	; 0x276 <main+0x22>
   
   while((PIND&0x01)!=0)
   {
   pattern2(500);
 270:	84 ef       	ldi	r24, 0xF4	; 244
 272:	0e 94 af 00 	call	0x15e	; 0x15e <pattern2>
   {
   pattern1(500);
   }
   while((PIND&0x01)!=1);
   
   while((PIND&0x01)!=0)
 276:	80 99       	sbic	0x10, 0	; 16
 278:	fb cf       	rjmp	.-10     	; 0x270 <main+0x1c>
   {
   pattern2(500);
   }
   while((PIND&0x01)!=1);
 27a:	80 9b       	sbis	0x10, 0	; 16
 27c:	fe cf       	rjmp	.-4      	; 0x27a <main+0x26>
 27e:	f3 cf       	rjmp	.-26     	; 0x266 <main+0x12>

00000280 <__cmpsf2>:
 280:	6c d0       	rcall	.+216    	; 0x35a <__fp_cmp>
 282:	08 f4       	brcc	.+2      	; 0x286 <__cmpsf2+0x6>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	08 95       	ret

00000288 <__fixunssfsi>:
 288:	94 d0       	rcall	.+296    	; 0x3b2 <__fp_splitA>
 28a:	88 f0       	brcs	.+34     	; 0x2ae <__fixunssfsi+0x26>
 28c:	9f 57       	subi	r25, 0x7F	; 127
 28e:	90 f0       	brcs	.+36     	; 0x2b4 <__fixunssfsi+0x2c>
 290:	b9 2f       	mov	r27, r25
 292:	99 27       	eor	r25, r25
 294:	b7 51       	subi	r27, 0x17	; 23
 296:	a0 f0       	brcs	.+40     	; 0x2c0 <__fixunssfsi+0x38>
 298:	d1 f0       	breq	.+52     	; 0x2ce <__fixunssfsi+0x46>
 29a:	66 0f       	add	r22, r22
 29c:	77 1f       	adc	r23, r23
 29e:	88 1f       	adc	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	1a f0       	brmi	.+6      	; 0x2aa <__fixunssfsi+0x22>
 2a4:	ba 95       	dec	r27
 2a6:	c9 f7       	brne	.-14     	; 0x29a <__fixunssfsi+0x12>
 2a8:	12 c0       	rjmp	.+36     	; 0x2ce <__fixunssfsi+0x46>
 2aa:	b1 30       	cpi	r27, 0x01	; 1
 2ac:	81 f0       	breq	.+32     	; 0x2ce <__fixunssfsi+0x46>
 2ae:	9b d0       	rcall	.+310    	; 0x3e6 <__fp_zero>
 2b0:	b1 e0       	ldi	r27, 0x01	; 1
 2b2:	08 95       	ret
 2b4:	98 c0       	rjmp	.+304    	; 0x3e6 <__fp_zero>
 2b6:	67 2f       	mov	r22, r23
 2b8:	78 2f       	mov	r23, r24
 2ba:	88 27       	eor	r24, r24
 2bc:	b8 5f       	subi	r27, 0xF8	; 248
 2be:	39 f0       	breq	.+14     	; 0x2ce <__fixunssfsi+0x46>
 2c0:	b9 3f       	cpi	r27, 0xF9	; 249
 2c2:	cc f3       	brlt	.-14     	; 0x2b6 <__fixunssfsi+0x2e>
 2c4:	86 95       	lsr	r24
 2c6:	77 95       	ror	r23
 2c8:	67 95       	ror	r22
 2ca:	b3 95       	inc	r27
 2cc:	d9 f7       	brne	.-10     	; 0x2c4 <__fixunssfsi+0x3c>
 2ce:	3e f4       	brtc	.+14     	; 0x2de <__fixunssfsi+0x56>
 2d0:	90 95       	com	r25
 2d2:	80 95       	com	r24
 2d4:	70 95       	com	r23
 2d6:	61 95       	neg	r22
 2d8:	7f 4f       	sbci	r23, 0xFF	; 255
 2da:	8f 4f       	sbci	r24, 0xFF	; 255
 2dc:	9f 4f       	sbci	r25, 0xFF	; 255
 2de:	08 95       	ret

000002e0 <__floatunsisf>:
 2e0:	e8 94       	clt
 2e2:	09 c0       	rjmp	.+18     	; 0x2f6 <__floatsisf+0x12>

000002e4 <__floatsisf>:
 2e4:	97 fb       	bst	r25, 7
 2e6:	3e f4       	brtc	.+14     	; 0x2f6 <__floatsisf+0x12>
 2e8:	90 95       	com	r25
 2ea:	80 95       	com	r24
 2ec:	70 95       	com	r23
 2ee:	61 95       	neg	r22
 2f0:	7f 4f       	sbci	r23, 0xFF	; 255
 2f2:	8f 4f       	sbci	r24, 0xFF	; 255
 2f4:	9f 4f       	sbci	r25, 0xFF	; 255
 2f6:	99 23       	and	r25, r25
 2f8:	a9 f0       	breq	.+42     	; 0x324 <__floatsisf+0x40>
 2fa:	f9 2f       	mov	r31, r25
 2fc:	96 e9       	ldi	r25, 0x96	; 150
 2fe:	bb 27       	eor	r27, r27
 300:	93 95       	inc	r25
 302:	f6 95       	lsr	r31
 304:	87 95       	ror	r24
 306:	77 95       	ror	r23
 308:	67 95       	ror	r22
 30a:	b7 95       	ror	r27
 30c:	f1 11       	cpse	r31, r1
 30e:	f8 cf       	rjmp	.-16     	; 0x300 <__floatsisf+0x1c>
 310:	fa f4       	brpl	.+62     	; 0x350 <__floatsisf+0x6c>
 312:	bb 0f       	add	r27, r27
 314:	11 f4       	brne	.+4      	; 0x31a <__floatsisf+0x36>
 316:	60 ff       	sbrs	r22, 0
 318:	1b c0       	rjmp	.+54     	; 0x350 <__floatsisf+0x6c>
 31a:	6f 5f       	subi	r22, 0xFF	; 255
 31c:	7f 4f       	sbci	r23, 0xFF	; 255
 31e:	8f 4f       	sbci	r24, 0xFF	; 255
 320:	9f 4f       	sbci	r25, 0xFF	; 255
 322:	16 c0       	rjmp	.+44     	; 0x350 <__floatsisf+0x6c>
 324:	88 23       	and	r24, r24
 326:	11 f0       	breq	.+4      	; 0x32c <__floatsisf+0x48>
 328:	96 e9       	ldi	r25, 0x96	; 150
 32a:	11 c0       	rjmp	.+34     	; 0x34e <__floatsisf+0x6a>
 32c:	77 23       	and	r23, r23
 32e:	21 f0       	breq	.+8      	; 0x338 <__floatsisf+0x54>
 330:	9e e8       	ldi	r25, 0x8E	; 142
 332:	87 2f       	mov	r24, r23
 334:	76 2f       	mov	r23, r22
 336:	05 c0       	rjmp	.+10     	; 0x342 <__floatsisf+0x5e>
 338:	66 23       	and	r22, r22
 33a:	71 f0       	breq	.+28     	; 0x358 <__floatsisf+0x74>
 33c:	96 e8       	ldi	r25, 0x86	; 134
 33e:	86 2f       	mov	r24, r22
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	2a f0       	brmi	.+10     	; 0x350 <__floatsisf+0x6c>
 346:	9a 95       	dec	r25
 348:	66 0f       	add	r22, r22
 34a:	77 1f       	adc	r23, r23
 34c:	88 1f       	adc	r24, r24
 34e:	da f7       	brpl	.-10     	; 0x346 <__floatsisf+0x62>
 350:	88 0f       	add	r24, r24
 352:	96 95       	lsr	r25
 354:	87 95       	ror	r24
 356:	97 f9       	bld	r25, 7
 358:	08 95       	ret

0000035a <__fp_cmp>:
 35a:	99 0f       	add	r25, r25
 35c:	00 08       	sbc	r0, r0
 35e:	55 0f       	add	r21, r21
 360:	aa 0b       	sbc	r26, r26
 362:	e0 e8       	ldi	r30, 0x80	; 128
 364:	fe ef       	ldi	r31, 0xFE	; 254
 366:	16 16       	cp	r1, r22
 368:	17 06       	cpc	r1, r23
 36a:	e8 07       	cpc	r30, r24
 36c:	f9 07       	cpc	r31, r25
 36e:	c0 f0       	brcs	.+48     	; 0x3a0 <__fp_cmp+0x46>
 370:	12 16       	cp	r1, r18
 372:	13 06       	cpc	r1, r19
 374:	e4 07       	cpc	r30, r20
 376:	f5 07       	cpc	r31, r21
 378:	98 f0       	brcs	.+38     	; 0x3a0 <__fp_cmp+0x46>
 37a:	62 1b       	sub	r22, r18
 37c:	73 0b       	sbc	r23, r19
 37e:	84 0b       	sbc	r24, r20
 380:	95 0b       	sbc	r25, r21
 382:	39 f4       	brne	.+14     	; 0x392 <__fp_cmp+0x38>
 384:	0a 26       	eor	r0, r26
 386:	61 f0       	breq	.+24     	; 0x3a0 <__fp_cmp+0x46>
 388:	23 2b       	or	r18, r19
 38a:	24 2b       	or	r18, r20
 38c:	25 2b       	or	r18, r21
 38e:	21 f4       	brne	.+8      	; 0x398 <__fp_cmp+0x3e>
 390:	08 95       	ret
 392:	0a 26       	eor	r0, r26
 394:	09 f4       	brne	.+2      	; 0x398 <__fp_cmp+0x3e>
 396:	a1 40       	sbci	r26, 0x01	; 1
 398:	a6 95       	lsr	r26
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	81 1d       	adc	r24, r1
 39e:	81 1d       	adc	r24, r1
 3a0:	08 95       	ret

000003a2 <__fp_split3>:
 3a2:	57 fd       	sbrc	r21, 7
 3a4:	90 58       	subi	r25, 0x80	; 128
 3a6:	44 0f       	add	r20, r20
 3a8:	55 1f       	adc	r21, r21
 3aa:	59 f0       	breq	.+22     	; 0x3c2 <__fp_splitA+0x10>
 3ac:	5f 3f       	cpi	r21, 0xFF	; 255
 3ae:	71 f0       	breq	.+28     	; 0x3cc <__fp_splitA+0x1a>
 3b0:	47 95       	ror	r20

000003b2 <__fp_splitA>:
 3b2:	88 0f       	add	r24, r24
 3b4:	97 fb       	bst	r25, 7
 3b6:	99 1f       	adc	r25, r25
 3b8:	61 f0       	breq	.+24     	; 0x3d2 <__fp_splitA+0x20>
 3ba:	9f 3f       	cpi	r25, 0xFF	; 255
 3bc:	79 f0       	breq	.+30     	; 0x3dc <__fp_splitA+0x2a>
 3be:	87 95       	ror	r24
 3c0:	08 95       	ret
 3c2:	12 16       	cp	r1, r18
 3c4:	13 06       	cpc	r1, r19
 3c6:	14 06       	cpc	r1, r20
 3c8:	55 1f       	adc	r21, r21
 3ca:	f2 cf       	rjmp	.-28     	; 0x3b0 <__fp_split3+0xe>
 3cc:	46 95       	lsr	r20
 3ce:	f1 df       	rcall	.-30     	; 0x3b2 <__fp_splitA>
 3d0:	08 c0       	rjmp	.+16     	; 0x3e2 <__fp_splitA+0x30>
 3d2:	16 16       	cp	r1, r22
 3d4:	17 06       	cpc	r1, r23
 3d6:	18 06       	cpc	r1, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	f1 cf       	rjmp	.-30     	; 0x3be <__fp_splitA+0xc>
 3dc:	86 95       	lsr	r24
 3de:	71 05       	cpc	r23, r1
 3e0:	61 05       	cpc	r22, r1
 3e2:	08 94       	sec
 3e4:	08 95       	ret

000003e6 <__fp_zero>:
 3e6:	e8 94       	clt

000003e8 <__fp_szero>:
 3e8:	bb 27       	eor	r27, r27
 3ea:	66 27       	eor	r22, r22
 3ec:	77 27       	eor	r23, r23
 3ee:	cb 01       	movw	r24, r22
 3f0:	97 f9       	bld	r25, 7
 3f2:	08 95       	ret

000003f4 <__gesf2>:
 3f4:	b2 df       	rcall	.-156    	; 0x35a <__fp_cmp>
 3f6:	08 f4       	brcc	.+2      	; 0x3fa <__gesf2+0x6>
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	08 95       	ret

000003fc <__mulsf3>:
 3fc:	0b d0       	rcall	.+22     	; 0x414 <__mulsf3x>
 3fe:	78 c0       	rjmp	.+240    	; 0x4f0 <__fp_round>
 400:	69 d0       	rcall	.+210    	; 0x4d4 <__fp_pscA>
 402:	28 f0       	brcs	.+10     	; 0x40e <__mulsf3+0x12>
 404:	6e d0       	rcall	.+220    	; 0x4e2 <__fp_pscB>
 406:	18 f0       	brcs	.+6      	; 0x40e <__mulsf3+0x12>
 408:	95 23       	and	r25, r21
 40a:	09 f0       	breq	.+2      	; 0x40e <__mulsf3+0x12>
 40c:	5a c0       	rjmp	.+180    	; 0x4c2 <__fp_inf>
 40e:	5f c0       	rjmp	.+190    	; 0x4ce <__fp_nan>
 410:	11 24       	eor	r1, r1
 412:	ea cf       	rjmp	.-44     	; 0x3e8 <__fp_szero>

00000414 <__mulsf3x>:
 414:	c6 df       	rcall	.-116    	; 0x3a2 <__fp_split3>
 416:	a0 f3       	brcs	.-24     	; 0x400 <__mulsf3+0x4>

00000418 <__mulsf3_pse>:
 418:	95 9f       	mul	r25, r21
 41a:	d1 f3       	breq	.-12     	; 0x410 <__mulsf3+0x14>
 41c:	95 0f       	add	r25, r21
 41e:	50 e0       	ldi	r21, 0x00	; 0
 420:	55 1f       	adc	r21, r21
 422:	62 9f       	mul	r22, r18
 424:	f0 01       	movw	r30, r0
 426:	72 9f       	mul	r23, r18
 428:	bb 27       	eor	r27, r27
 42a:	f0 0d       	add	r31, r0
 42c:	b1 1d       	adc	r27, r1
 42e:	63 9f       	mul	r22, r19
 430:	aa 27       	eor	r26, r26
 432:	f0 0d       	add	r31, r0
 434:	b1 1d       	adc	r27, r1
 436:	aa 1f       	adc	r26, r26
 438:	64 9f       	mul	r22, r20
 43a:	66 27       	eor	r22, r22
 43c:	b0 0d       	add	r27, r0
 43e:	a1 1d       	adc	r26, r1
 440:	66 1f       	adc	r22, r22
 442:	82 9f       	mul	r24, r18
 444:	22 27       	eor	r18, r18
 446:	b0 0d       	add	r27, r0
 448:	a1 1d       	adc	r26, r1
 44a:	62 1f       	adc	r22, r18
 44c:	73 9f       	mul	r23, r19
 44e:	b0 0d       	add	r27, r0
 450:	a1 1d       	adc	r26, r1
 452:	62 1f       	adc	r22, r18
 454:	83 9f       	mul	r24, r19
 456:	a0 0d       	add	r26, r0
 458:	61 1d       	adc	r22, r1
 45a:	22 1f       	adc	r18, r18
 45c:	74 9f       	mul	r23, r20
 45e:	33 27       	eor	r19, r19
 460:	a0 0d       	add	r26, r0
 462:	61 1d       	adc	r22, r1
 464:	23 1f       	adc	r18, r19
 466:	84 9f       	mul	r24, r20
 468:	60 0d       	add	r22, r0
 46a:	21 1d       	adc	r18, r1
 46c:	82 2f       	mov	r24, r18
 46e:	76 2f       	mov	r23, r22
 470:	6a 2f       	mov	r22, r26
 472:	11 24       	eor	r1, r1
 474:	9f 57       	subi	r25, 0x7F	; 127
 476:	50 40       	sbci	r21, 0x00	; 0
 478:	8a f0       	brmi	.+34     	; 0x49c <__stack+0x3d>
 47a:	e1 f0       	breq	.+56     	; 0x4b4 <__stack+0x55>
 47c:	88 23       	and	r24, r24
 47e:	4a f0       	brmi	.+18     	; 0x492 <__stack+0x33>
 480:	ee 0f       	add	r30, r30
 482:	ff 1f       	adc	r31, r31
 484:	bb 1f       	adc	r27, r27
 486:	66 1f       	adc	r22, r22
 488:	77 1f       	adc	r23, r23
 48a:	88 1f       	adc	r24, r24
 48c:	91 50       	subi	r25, 0x01	; 1
 48e:	50 40       	sbci	r21, 0x00	; 0
 490:	a9 f7       	brne	.-22     	; 0x47c <__stack+0x1d>
 492:	9e 3f       	cpi	r25, 0xFE	; 254
 494:	51 05       	cpc	r21, r1
 496:	70 f0       	brcs	.+28     	; 0x4b4 <__stack+0x55>
 498:	14 c0       	rjmp	.+40     	; 0x4c2 <__fp_inf>
 49a:	a6 cf       	rjmp	.-180    	; 0x3e8 <__fp_szero>
 49c:	5f 3f       	cpi	r21, 0xFF	; 255
 49e:	ec f3       	brlt	.-6      	; 0x49a <__stack+0x3b>
 4a0:	98 3e       	cpi	r25, 0xE8	; 232
 4a2:	dc f3       	brlt	.-10     	; 0x49a <__stack+0x3b>
 4a4:	86 95       	lsr	r24
 4a6:	77 95       	ror	r23
 4a8:	67 95       	ror	r22
 4aa:	b7 95       	ror	r27
 4ac:	f7 95       	ror	r31
 4ae:	e7 95       	ror	r30
 4b0:	9f 5f       	subi	r25, 0xFF	; 255
 4b2:	c1 f7       	brne	.-16     	; 0x4a4 <__stack+0x45>
 4b4:	fe 2b       	or	r31, r30
 4b6:	88 0f       	add	r24, r24
 4b8:	91 1d       	adc	r25, r1
 4ba:	96 95       	lsr	r25
 4bc:	87 95       	ror	r24
 4be:	97 f9       	bld	r25, 7
 4c0:	08 95       	ret

000004c2 <__fp_inf>:
 4c2:	97 f9       	bld	r25, 7
 4c4:	9f 67       	ori	r25, 0x7F	; 127
 4c6:	80 e8       	ldi	r24, 0x80	; 128
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	08 95       	ret

000004ce <__fp_nan>:
 4ce:	9f ef       	ldi	r25, 0xFF	; 255
 4d0:	80 ec       	ldi	r24, 0xC0	; 192
 4d2:	08 95       	ret

000004d4 <__fp_pscA>:
 4d4:	00 24       	eor	r0, r0
 4d6:	0a 94       	dec	r0
 4d8:	16 16       	cp	r1, r22
 4da:	17 06       	cpc	r1, r23
 4dc:	18 06       	cpc	r1, r24
 4de:	09 06       	cpc	r0, r25
 4e0:	08 95       	ret

000004e2 <__fp_pscB>:
 4e2:	00 24       	eor	r0, r0
 4e4:	0a 94       	dec	r0
 4e6:	12 16       	cp	r1, r18
 4e8:	13 06       	cpc	r1, r19
 4ea:	14 06       	cpc	r1, r20
 4ec:	05 06       	cpc	r0, r21
 4ee:	08 95       	ret

000004f0 <__fp_round>:
 4f0:	09 2e       	mov	r0, r25
 4f2:	03 94       	inc	r0
 4f4:	00 0c       	add	r0, r0
 4f6:	11 f4       	brne	.+4      	; 0x4fc <__fp_round+0xc>
 4f8:	88 23       	and	r24, r24
 4fa:	52 f0       	brmi	.+20     	; 0x510 <__fp_round+0x20>
 4fc:	bb 0f       	add	r27, r27
 4fe:	40 f4       	brcc	.+16     	; 0x510 <__fp_round+0x20>
 500:	bf 2b       	or	r27, r31
 502:	11 f4       	brne	.+4      	; 0x508 <__fp_round+0x18>
 504:	60 ff       	sbrs	r22, 0
 506:	04 c0       	rjmp	.+8      	; 0x510 <__fp_round+0x20>
 508:	6f 5f       	subi	r22, 0xFF	; 255
 50a:	7f 4f       	sbci	r23, 0xFF	; 255
 50c:	8f 4f       	sbci	r24, 0xFF	; 255
 50e:	9f 4f       	sbci	r25, 0xFF	; 255
 510:	08 95       	ret

00000512 <_exit>:
 512:	f8 94       	cli

00000514 <__stop_program>:
 514:	ff cf       	rjmp	.-2      	; 0x514 <__stop_program>
