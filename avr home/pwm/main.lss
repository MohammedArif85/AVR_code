
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001dd  00000000  00000000  00000167  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c2  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001c5  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c8  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000120  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000168  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<util/delay.h>



int main(void)
{DDRD=0b11110000;
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	80 ef       	ldi	r24, 0xF0	; 240
  72:	81 bb       	out	0x11, r24	; 17
 DDRA=0b11110000;//1-output 0-input
  74:	8a bb       	out	0x1a, r24	; 26
 PORTD=0x0f;
  76:	8f e0       	ldi	r24, 0x0F	; 15
  78:	82 bb       	out	0x12, r24	; 18
  while(1)
  {
   if(bit_is_clear(PIND,0))
   {
    PORTA=0xF0;//turn all led on
  7a:	20 ef       	ldi	r18, 0xF0	; 240
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7c:	40 e2       	ldi	r20, 0x20	; 32
  7e:	5e e4       	ldi	r21, 0x4E	; 78
{DDRD=0b11110000;
 DDRA=0b11110000;//1-output 0-input
 PORTD=0x0f;
  while(1)
  {
   if(bit_is_clear(PIND,0))
  80:	c0 ee       	ldi	r28, 0xE0	; 224
  82:	de e2       	ldi	r29, 0x2E	; 46
  84:	a0 e6       	ldi	r26, 0x60	; 96
  86:	bd e6       	ldi	r27, 0x6D	; 109
  88:	e0 ea       	ldi	r30, 0xA0	; 160
  8a:	ff e0       	ldi	r31, 0x0F	; 15
  8c:	60 ea       	ldi	r22, 0xA0	; 160
  8e:	7c e8       	ldi	r23, 0x8C	; 140
  90:	80 99       	sbic	0x10, 0	; 16
  92:	08 c0       	rjmp	.+16     	; 0xa4 <main+0x38>
   {
    PORTA=0xF0;//turn all led on
  94:	2b bb       	out	0x1b, r18	; 27
  96:	ca 01       	movw	r24, r20
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x2c>
    _delay_ms(5);
    PORTA=0x00;//turn all led off
  9c:	1b ba       	out	0x1b, r1	; 27
  9e:	ca 01       	movw	r24, r20
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x34>
    _delay_ms(5);
   } 
   if(bit_is_clear(PIND,1))
  a4:	81 99       	sbic	0x10, 1	; 16
  a6:	08 c0       	rjmp	.+16     	; 0xb8 <main+0x4c>
   {
    PORTA=0xF0;//turn all led on
  a8:	2b bb       	out	0x1b, r18	; 27
  aa:	ce 01       	movw	r24, r28
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x40>
    _delay_ms(3);
    PORTA=0x00;//turn all led off
  b0:	1b ba       	out	0x1b, r1	; 27
  b2:	cd 01       	movw	r24, r26
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x48>
    _delay_ms(7);
   } 
   if(bit_is_clear(PIND,2))
  b8:	82 99       	sbic	0x10, 2	; 16
  ba:	08 c0       	rjmp	.+16     	; 0xcc <main+0x60>
   {
    PORTA=0xF0;//turn all led on
  bc:	2b bb       	out	0x1b, r18	; 27
  be:	cf 01       	movw	r24, r30
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x54>
    _delay_ms(1);
    PORTA=0x00;//turn all led off
  c4:	1b ba       	out	0x1b, r1	; 27
  c6:	cb 01       	movw	r24, r22
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x5c>
    _delay_ms(9);
   } 
    if(bit_is_clear(PIND,3))
  cc:	83 99       	sbic	0x10, 3	; 16
  ce:	e0 cf       	rjmp	.-64     	; 0x90 <main+0x24>
   {
    PORTA=0xF0;//turn all led on
  d0:	2b bb       	out	0x1b, r18	; 27
  d2:	de cf       	rjmp	.-68     	; 0x90 <main+0x24>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
