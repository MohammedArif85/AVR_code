
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000019f  00000000  00000000  00000147  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d3  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001a9  00000000  00000000  000003b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d7  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000a0  00000000  00000000  0000065b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000006fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:




int main(void)
{DDRD=0b11110000;
  6c:	80 ef       	ldi	r24, 0xF0	; 240
  6e:	81 bb       	out	0x11, r24	; 17
 DDRC=0b00000011;//1-output 0-input
  70:	83 e0       	ldi	r24, 0x03	; 3
  72:	84 bb       	out	0x14, r24	; 20
 PORTD=0x0f;
  74:	8f e0       	ldi	r24, 0x0F	; 15
  76:	82 bb       	out	0x12, r24	; 18
  while(1)
  {
   if(bit_is_clear(PIND,0))
   {
    PORTC=0x01;//turn all led on
  78:	51 e0       	ldi	r21, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7a:	20 e2       	ldi	r18, 0x20	; 32
  7c:	3e e4       	ldi	r19, 0x4E	; 78
   {
    PORTC=0x01;
   } 
   if(bit_is_clear(PIND,2))
   {
    PORTC=0x02;//turn all led on
  7e:	42 e0       	ldi	r20, 0x02	; 2
{DDRD=0b11110000;
 DDRC=0b00000011;//1-output 0-input
 PORTD=0x0f;
  while(1)
  {
   if(bit_is_clear(PIND,0))
  80:	80 99       	sbic	0x10, 0	; 16
  82:	08 c0       	rjmp	.+16     	; 0x94 <main+0x28>
   {
    PORTC=0x01;//turn all led on
  84:	55 bb       	out	0x15, r21	; 21
  86:	c9 01       	movw	r24, r18
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <main+0x1c>
    _delay_ms(5);
    PORTC=0x00;//turn all led on
  8c:	15 ba       	out	0x15, r1	; 21
  8e:	c9 01       	movw	r24, r18
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <main+0x24>
    _delay_ms(5);
   
   } 
   if(bit_is_clear(PIND,1))
  94:	81 9b       	sbis	0x10, 1	; 16
   {
    PORTC=0x01;
  96:	55 bb       	out	0x15, r21	; 21
   } 
   if(bit_is_clear(PIND,2))
  98:	82 99       	sbic	0x10, 2	; 16
  9a:	08 c0       	rjmp	.+16     	; 0xac <main+0x40>
   {
    PORTC=0x02;//turn all led on
  9c:	45 bb       	out	0x15, r20	; 21
  9e:	c9 01       	movw	r24, r18
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x34>
    _delay_ms(5);
    PORTC=0x00;//turn all led on
  a4:	15 ba       	out	0x15, r1	; 21
  a6:	c9 01       	movw	r24, r18
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0x3c>
    _delay_ms(5);
   } 
   if(bit_is_clear(PIND,3))
  ac:	83 99       	sbic	0x10, 3	; 16
  ae:	e8 cf       	rjmp	.-48     	; 0x80 <main+0x14>
   {
    PORTC=0x02;
  b0:	45 bb       	out	0x15, r20	; 21
  b2:	e6 cf       	rjmp	.-52     	; 0x80 <main+0x14>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
