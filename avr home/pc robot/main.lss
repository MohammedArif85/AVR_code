
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  0000017a  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000053  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002e9  00000000  00000000  000002bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000164  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000030d  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f6  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000233  00000000  00000000  00000b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000da5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 3b       	cpi	r26, 0xBE	; 190
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  7a:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <USART_INIT>:
/*
===================================================================
SET BAUD RATE
===================================================================
*/
	UBRRL=UBRRVAL;
  82:	87 e6       	ldi	r24, 0x67	; 103
  84:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);
  86:	10 bc       	out	0x20, r1	; 32
/*===================================================================
SET DATAFRAME FORMAT : ASYNCHRONOUS MODE, NO PARITY, 1 START BIT, 8BIT
                       SIZE DATA	
===================================================================
*/
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
  88:	86 e8       	ldi	r24, 0x86	; 134
  8a:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN);
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	8a b9       	out	0x0a, r24	; 10
}
  90:	08 95       	ret

00000092 <rswritechar>:
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <rswritechar>
	UDR=c; //SEND RECEIVED DATA BACK
  96:	8c b9       	out	0x0c, r24	; 12
}
  98:	08 95       	ret

0000009a <rsreadchar>:
/*
===================================================================
WAIT UNTIL DATA IS AVAILABLE
===================================================================
*/
	while(!(UCSRA&(1<<RXC)))
  9a:	5f 9b       	sbis	0x0b, 7	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <rsreadchar>
	{	}
	return UDR;
  9e:	8c b1       	in	r24, 0x0c	; 12
}
  a0:	08 95       	ret

000000a2 <rsstr>:
===================================================================
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
  a2:	fc 01       	movw	r30, r24
  a4:	04 c0       	rjmp	.+8      	; 0xae <rsstr+0xc>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <rsstr+0x4>
	UDR=c; //SEND RECEIVED DATA BACK
  aa:	8c b9       	out	0x0c, r24	; 12
void rsstr(char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
  ac:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
	while(*s)
  ae:	80 81       	ld	r24, Z
  b0:	88 23       	and	r24, r24
  b2:	c9 f7       	brne	.-14     	; 0xa6 <rsstr+0x4>
	{
		rswritechar(*s);
		s++;
	}
  b4:	08 95       	ret

000000b6 <main>:
/*
===================================================================
SET BAUD RATE
===================================================================
*/
	UBRRL=UBRRVAL;
  b6:	87 e6       	ldi	r24, 0x67	; 103
  b8:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);
  ba:	10 bc       	out	0x20, r1	; 32
/*===================================================================
SET DATAFRAME FORMAT : ASYNCHRONOUS MODE, NO PARITY, 1 START BIT, 8BIT
                       SIZE DATA	
===================================================================
*/
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
  bc:	86 e8       	ldi	r24, 0x86	; 134
  be:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN);
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	8a b9       	out	0x0a, r24	; 10

int main(void)
{
	unsigned char t;
	USART_INIT();
	DDRA=0xF0;
  c4:	80 ef       	ldi	r24, 0xF0	; 240
  c6:	8a bb       	out	0x1a, r24	; 26
	DDRA=0x0F;
  c8:	8f e0       	ldi	r24, 0x0F	; 15
  ca:	8a bb       	out	0x1a, r24	; 26
	DDRC=0xFF;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	84 bb       	out	0x14, r24	; 20
  d0:	e0 e6       	ldi	r30, 0x60	; 96
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	04 c0       	rjmp	.+8      	; 0xde <main+0x28>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  d6:	5d 9b       	sbis	0x0b, 5	; 11
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <main+0x20>
	UDR=c; //SEND RECEIVED DATA BACK
  da:	8c b9       	out	0x0c, r24	; 12
void rsstr(char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
  dc:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
	while(*s)
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	c9 f7       	brne	.-14     	; 0xd6 <main+0x20>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e4:	20 e4       	ldi	r18, 0x40	; 64
  e6:	3c e9       	ldi	r19, 0x9C	; 156
	while(1)
	{
		t=rsreadchar();
		switch(t)
		{
		 case 'f':PORTC=forw;rsstr("i m going forward\r\n");break;
  e8:	70 ea       	ldi	r23, 0xA0	; 160
		 case 'b':PORTC=back;rsstr("i m going bacward\r\n");break;
		 case 'r':PORTC=right;rsstr("i m going right\r\n");break;
		 case 'l':PORTC=left;rsstr("i m going left\r\n");break;
  ea:	60 e9       	ldi	r22, 0x90	; 144
		t=rsreadchar();
		switch(t)
		{
		 case 'f':PORTC=forw;rsstr("i m going forward\r\n");break;
		 case 'b':PORTC=back;rsstr("i m going bacward\r\n");break;
		 case 'r':PORTC=right;rsstr("i m going right\r\n");break;
  ec:	50 e6       	ldi	r21, 0x60	; 96
	{
		t=rsreadchar();
		switch(t)
		{
		 case 'f':PORTC=forw;rsstr("i m going forward\r\n");break;
		 case 'b':PORTC=back;rsstr("i m going bacward\r\n");break;
  ee:	40 e5       	ldi	r20, 0x50	; 80
/*
===================================================================
WAIT UNTIL DATA IS AVAILABLE
===================================================================
*/
	while(!(UCSRA&(1<<RXC)))
  f0:	5f 9b       	sbis	0x0b, 7	; 11
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <main+0x3a>
	{	}
	return UDR;
  f4:	8c b1       	in	r24, 0x0c	; 12
	DDRC=0xFF;
	rsstr("hello i m robot\r\n");
	while(1)
	{
		t=rsreadchar();
		switch(t)
  f6:	86 36       	cpi	r24, 0x66	; 102
  f8:	51 f0       	breq	.+20     	; 0x10e <main+0x58>
  fa:	87 36       	cpi	r24, 0x67	; 103
  fc:	18 f4       	brcc	.+6      	; 0x104 <main+0x4e>
  fe:	82 36       	cpi	r24, 0x62	; 98
 100:	a9 f5       	brne	.+106    	; 0x16c <main+0xb6>
 102:	11 c0       	rjmp	.+34     	; 0x126 <main+0x70>
 104:	8c 36       	cpi	r24, 0x6C	; 108
 106:	39 f1       	breq	.+78     	; 0x156 <main+0xa0>
 108:	82 37       	cpi	r24, 0x72	; 114
 10a:	81 f5       	brne	.+96     	; 0x16c <main+0xb6>
 10c:	18 c0       	rjmp	.+48     	; 0x13e <main+0x88>
		{
		 case 'f':PORTC=forw;rsstr("i m going forward\r\n");break;
 10e:	75 bb       	out	0x15, r23	; 21
 110:	e2 e7       	ldi	r30, 0x72	; 114
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	04 c0       	rjmp	.+8      	; 0x11e <main+0x68>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 116:	5d 9b       	sbis	0x0b, 5	; 11
 118:	fe cf       	rjmp	.-4      	; 0x116 <main+0x60>
	UDR=c; //SEND RECEIVED DATA BACK
 11a:	8c b9       	out	0x0c, r24	; 12
void rsstr(char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
 11c:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
	while(*s)
 11e:	80 81       	ld	r24, Z
 120:	88 23       	and	r24, r24
 122:	c9 f7       	brne	.-14     	; 0x116 <main+0x60>
 124:	23 c0       	rjmp	.+70     	; 0x16c <main+0xb6>
		 case 'b':PORTC=back;rsstr("i m going bacward\r\n");break;
 126:	45 bb       	out	0x15, r20	; 21
 128:	e6 e8       	ldi	r30, 0x86	; 134
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	04 c0       	rjmp	.+8      	; 0x136 <main+0x80>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 12e:	5d 9b       	sbis	0x0b, 5	; 11
 130:	fe cf       	rjmp	.-4      	; 0x12e <main+0x78>
	UDR=c; //SEND RECEIVED DATA BACK
 132:	8c b9       	out	0x0c, r24	; 12
void rsstr(char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
 134:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
	while(*s)
 136:	80 81       	ld	r24, Z
 138:	88 23       	and	r24, r24
 13a:	c9 f7       	brne	.-14     	; 0x12e <main+0x78>
 13c:	17 c0       	rjmp	.+46     	; 0x16c <main+0xb6>
		 case 'r':PORTC=right;rsstr("i m going right\r\n");break;
 13e:	55 bb       	out	0x15, r21	; 21
 140:	ea e9       	ldi	r30, 0x9A	; 154
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	04 c0       	rjmp	.+8      	; 0x14e <main+0x98>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 146:	5d 9b       	sbis	0x0b, 5	; 11
 148:	fe cf       	rjmp	.-4      	; 0x146 <main+0x90>
	UDR=c; //SEND RECEIVED DATA BACK
 14a:	8c b9       	out	0x0c, r24	; 12
void rsstr(char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
 14c:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
	while(*s)
 14e:	80 81       	ld	r24, Z
 150:	88 23       	and	r24, r24
 152:	c9 f7       	brne	.-14     	; 0x146 <main+0x90>
 154:	0b c0       	rjmp	.+22     	; 0x16c <main+0xb6>
		 case 'l':PORTC=left;rsstr("i m going left\r\n");break;
 156:	65 bb       	out	0x15, r22	; 21
 158:	ec ea       	ldi	r30, 0xAC	; 172
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	04 c0       	rjmp	.+8      	; 0x166 <main+0xb0>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 15e:	5d 9b       	sbis	0x0b, 5	; 11
 160:	fe cf       	rjmp	.-4      	; 0x15e <main+0xa8>
	UDR=c; //SEND RECEIVED DATA BACK
 162:	8c b9       	out	0x0c, r24	; 12
void rsstr(char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
 164:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
	while(*s)
 166:	80 81       	ld	r24, Z
 168:	88 23       	and	r24, r24
 16a:	c9 f7       	brne	.-14     	; 0x15e <main+0xa8>
 16c:	c9 01       	movw	r24, r18
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0xb8>
		}
		_delay_ms(10);
		PORTC=0x00;
 172:	15 ba       	out	0x15, r1	; 21
 174:	bd cf       	rjmp	.-134    	; 0xf0 <main+0x3a>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
