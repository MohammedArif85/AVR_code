
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000398  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005c  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000709  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000184  00000000  00000000  00000b71  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000061e  00000000  00000000  00000cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00001314  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000107  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002c2  00000000  00000000  0000149b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000001e0  00000000  00000000  0000175d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  64:	0c 94 ca 01 	jmp	0x394	; 0x394 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <adcread>:
#include<util/delay.h>
#include<compat/deprecated.h>

int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
  6c:	80 64       	ori	r24, 0x40	; 64
  6e:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
  70:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  72:	86 b1       	in	r24, 0x06	; 6
  74:	87 64       	ori	r24, 0x47	; 71
  76:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
  78:	34 9b       	sbis	0x06, 4	; 6
  7a:	fe cf       	rjmp	.-4      	; 0x78 <adcread+0xc>
 return ADC;
  7c:	24 b1       	in	r18, 0x04	; 4
  7e:	35 b1       	in	r19, 0x05	; 5
}
  80:	c9 01       	movw	r24, r18
  82:	08 95       	ret

00000084 <forward>:
void forward()
{
 PORTC=0b01100000;
  84:	80 e6       	ldi	r24, 0x60	; 96
  86:	85 bb       	out	0x15, r24	; 21
}
  88:	08 95       	ret

0000008a <backward>:
void backward()
{
 PORTC=0b10010000;
  8a:	80 e9       	ldi	r24, 0x90	; 144
  8c:	85 bb       	out	0x15, r24	; 21
}
  8e:	08 95       	ret

00000090 <left>:
void left()
{
 PORTC=0b00100000;
  90:	80 e2       	ldi	r24, 0x20	; 32
  92:	85 bb       	out	0x15, r24	; 21
}
  94:	08 95       	ret

00000096 <right>:
void right()
{
 
 PORTC=0b01000000;
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	85 bb       	out	0x15, r24	; 21
}
  9a:	08 95       	ret

0000009c <stop>:

void stop()
{
 PORTC=0x00;
  9c:	15 ba       	out	0x15, r1	; 21
}
  9e:	08 95       	ret

000000a0 <main>:
int main(void)
{
  a0:	2f 92       	push	r2
  a2:	3f 92       	push	r3
  a4:	4f 92       	push	r4
  a6:	5f 92       	push	r5
  a8:	6f 92       	push	r6
  aa:	7f 92       	push	r7
  ac:	8f 92       	push	r8
  ae:	9f 92       	push	r9
  b0:	af 92       	push	r10
  b2:	bf 92       	push	r11
  b4:	cf 92       	push	r12
  b6:	df 92       	push	r13
  b8:	ef 92       	push	r14
  ba:	ff 92       	push	r15
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
int a1d,a2d,a3d,a1l,a2l,a3l,a1t,a2t,a3t; 
 unsigned char eyeval;
 DDRA=0xF0;
  c4:	80 ef       	ldi	r24, 0xF0	; 240
  c6:	8a bb       	out	0x1a, r24	; 26
 DDRC=0xFF;
  c8:	9f ef       	ldi	r25, 0xFF	; 255
  ca:	94 bb       	out	0x14, r25	; 20
 PORTC=0x00;
  cc:	15 ba       	out	0x15, r1	; 21
 DDRD=0x00;
  ce:	11 ba       	out	0x11, r1	; 17
 PORTD=0x03;
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	92 bb       	out	0x12, r25	; 18
 PORTA=0xF0;
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	80 e2       	ldi	r24, 0x20	; 32
  d8:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  da:	20 e9       	ldi	r18, 0x90	; 144
  dc:	31 e0       	ldi	r19, 0x01	; 1
  de:	f9 01       	movw	r30, r18
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x40>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e6:	d9 f7       	brne	.-10     	; 0xde <main+0x3e>
 _delay_ms(2000);
 PORTA=0x00;
  e8:	1b ba       	out	0x1b, r1	; 27
 eyeval=0x00;
   while(bit_is_set(PIND,0));
  ea:	80 99       	sbic	0x10, 0	; 16
  ec:	fe cf       	rjmp	.-4      	; 0xea <main+0x4a>
  ee:	88 e8       	ldi	r24, 0x88	; 136
  f0:	93 e1       	ldi	r25, 0x13	; 19
  f2:	20 e9       	ldi	r18, 0x90	; 144
  f4:	31 e0       	ldi	r19, 0x01	; 1
  f6:	f9 01       	movw	r30, r18
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fe:	d9 f7       	brne	.-10     	; 0xf6 <main+0x56>
   _delay_ms(500);
   while(bit_is_clear(PIND,0));
 100:	80 9b       	sbis	0x10, 0	; 16
 102:	fe cf       	rjmp	.-4      	; 0x100 <main+0x60>
   PORTA=0x10;
 104:	80 e1       	ldi	r24, 0x10	; 16
 106:	8b bb       	out	0x1b, r24	; 27
 108:	80 e1       	ldi	r24, 0x10	; 16
 10a:	97 e2       	ldi	r25, 0x27	; 39
 10c:	20 e9       	ldi	r18, 0x90	; 144
 10e:	31 e0       	ldi	r19, 0x01	; 1
 110:	f9 01       	movw	r30, r18
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 116:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 118:	d9 f7       	brne	.-10     	; 0x110 <main+0x70>
#include<util/delay.h>
#include<compat/deprecated.h>

int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 11a:	80 e4       	ldi	r24, 0x40	; 64
 11c:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 11e:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 120:	86 b1       	in	r24, 0x06	; 6
 122:	87 64       	ori	r24, 0x47	; 71
 124:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 126:	34 9b       	sbis	0x06, 4	; 6
 128:	fe cf       	rjmp	.-4      	; 0x126 <main+0x86>
 return ADC;
 12a:	64 b1       	in	r22, 0x04	; 4
 12c:	75 b1       	in	r23, 0x05	; 5
#include<util/delay.h>
#include<compat/deprecated.h>

int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 12e:	81 e4       	ldi	r24, 0x41	; 65
 130:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 132:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 134:	86 b1       	in	r24, 0x06	; 6
 136:	87 64       	ori	r24, 0x47	; 71
 138:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 13a:	34 9b       	sbis	0x06, 4	; 6
 13c:	fe cf       	rjmp	.-4      	; 0x13a <main+0x9a>
 return ADC;
 13e:	c4 b1       	in	r28, 0x04	; 4
 140:	d5 b1       	in	r29, 0x05	; 5
#include<util/delay.h>
#include<compat/deprecated.h>

int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 142:	82 e4       	ldi	r24, 0x42	; 66
 144:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 146:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 148:	86 b1       	in	r24, 0x06	; 6
 14a:	87 64       	ori	r24, 0x47	; 71
 14c:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 14e:	34 9b       	sbis	0x06, 4	; 6
 150:	fe cf       	rjmp	.-4      	; 0x14e <main+0xae>
 return ADC;
 152:	e4 b0       	in	r14, 0x04	; 4
 154:	f5 b0       	in	r15, 0x05	; 5
   PORTA=0x10;
  _delay_ms(1000);
  a1d=adcread(0);
  a2d=adcread(1);
  a3d=adcread(2);
   while(bit_is_set(PIND,0));
 156:	80 99       	sbic	0x10, 0	; 16
 158:	fe cf       	rjmp	.-4      	; 0x156 <main+0xb6>
 15a:	88 e8       	ldi	r24, 0x88	; 136
 15c:	93 e1       	ldi	r25, 0x13	; 19
 15e:	20 e9       	ldi	r18, 0x90	; 144
 160:	31 e0       	ldi	r19, 0x01	; 1
 162:	f9 01       	movw	r30, r18
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0xc4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 168:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16a:	d9 f7       	brne	.-10     	; 0x162 <main+0xc2>
   _delay_ms(500);
   while(bit_is_clear(PIND,0));
 16c:	80 9b       	sbis	0x10, 0	; 16
 16e:	fe cf       	rjmp	.-4      	; 0x16c <main+0xcc>
   PORTA=0x20;
 170:	80 e2       	ldi	r24, 0x20	; 32
 172:	8b bb       	out	0x1b, r24	; 27
 174:	80 e1       	ldi	r24, 0x10	; 16
 176:	97 e2       	ldi	r25, 0x27	; 39
 178:	20 e9       	ldi	r18, 0x90	; 144
 17a:	31 e0       	ldi	r19, 0x01	; 1
 17c:	f9 01       	movw	r30, r18
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0xde>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 182:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 184:	d9 f7       	brne	.-10     	; 0x17c <main+0xdc>
#include<util/delay.h>
#include<compat/deprecated.h>

int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 186:	80 e4       	ldi	r24, 0x40	; 64
 188:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 18a:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 18c:	86 b1       	in	r24, 0x06	; 6
 18e:	87 64       	ori	r24, 0x47	; 71
 190:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 192:	34 9b       	sbis	0x06, 4	; 6
 194:	fe cf       	rjmp	.-4      	; 0x192 <main+0xf2>
 return ADC;
 196:	44 b1       	in	r20, 0x04	; 4
 198:	55 b1       	in	r21, 0x05	; 5
#include<util/delay.h>
#include<compat/deprecated.h>

int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 19a:	81 e4       	ldi	r24, 0x41	; 65
 19c:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 19e:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 1a0:	86 b1       	in	r24, 0x06	; 6
 1a2:	87 64       	ori	r24, 0x47	; 71
 1a4:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 1a6:	34 9b       	sbis	0x06, 4	; 6
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <main+0x106>
 return ADC;
 1aa:	e4 b1       	in	r30, 0x04	; 4
 1ac:	f5 b1       	in	r31, 0x05	; 5
#include<util/delay.h>
#include<compat/deprecated.h>

int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 1ae:	82 e4       	ldi	r24, 0x42	; 66
 1b0:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 1b2:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 1b4:	86 b1       	in	r24, 0x06	; 6
 1b6:	87 64       	ori	r24, 0x47	; 71
 1b8:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 1ba:	34 9b       	sbis	0x06, 4	; 6
 1bc:	fe cf       	rjmp	.-4      	; 0x1ba <main+0x11a>
 return ADC;
 1be:	24 b1       	in	r18, 0x04	; 4
 1c0:	35 b1       	in	r19, 0x05	; 5
   PORTA=0x20;
   _delay_ms(1000);
  a1l=adcread(0);
  a2l=adcread(1);
  a3l=adcread(2);
  a1t=(a1d+a1l)/2;
 1c2:	ca 01       	movw	r24, r20
 1c4:	86 0f       	add	r24, r22
 1c6:	97 1f       	adc	r25, r23
 1c8:	62 e0       	ldi	r22, 0x02	; 2
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	0e 94 a3 01 	call	0x346	; 0x346 <__divmodhi4>
 1d0:	8b 01       	movw	r16, r22
  a2t=(a2d+a2l)/2;
 1d2:	cf 01       	movw	r24, r30
 1d4:	8c 0f       	add	r24, r28
 1d6:	9d 1f       	adc	r25, r29
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	0e 94 a3 01 	call	0x346	; 0x346 <__divmodhi4>
 1e0:	eb 01       	movw	r28, r22
  a3t=(a3d+a3l)/2;
 1e2:	c9 01       	movw	r24, r18
 1e4:	8e 0d       	add	r24, r14
 1e6:	9f 1d       	adc	r25, r15
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	0e 94 a3 01 	call	0x346	; 0x346 <__divmodhi4>
 1f0:	db 01       	movw	r26, r22
   PORTA=0xF0;
 1f2:	80 ef       	ldi	r24, 0xF0	; 240
 1f4:	8b bb       	out	0x1b, r24	; 27
 1f6:	80 ea       	ldi	r24, 0xA0	; 160
 1f8:	9f e0       	ldi	r25, 0x0F	; 15
 1fa:	20 e9       	ldi	r18, 0x90	; 144
 1fc:	31 e0       	ldi	r19, 0x01	; 1
 1fe:	f9 01       	movw	r30, r18
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <main+0x160>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 204:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 206:	d9 f7       	brne	.-10     	; 0x1fe <main+0x15e>
   _delay_ms(400);
   PORTA=0x00;
 208:	1b ba       	out	0x1b, r1	; 27
 20a:	80 ea       	ldi	r24, 0xA0	; 160
 20c:	9f e0       	ldi	r25, 0x0F	; 15
 20e:	20 e9       	ldi	r18, 0x90	; 144
 210:	31 e0       	ldi	r19, 0x01	; 1
 212:	f9 01       	movw	r30, r18
 214:	31 97       	sbiw	r30, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <main+0x174>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 218:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 21a:	d9 f7       	brne	.-10     	; 0x212 <main+0x172>
   _delay_ms(400);
   PORTA=0xF0;
 21c:	80 ef       	ldi	r24, 0xF0	; 240
 21e:	8b bb       	out	0x1b, r24	; 27
 220:	80 ea       	ldi	r24, 0xA0	; 160
 222:	9f e0       	ldi	r25, 0x0F	; 15
 224:	20 e9       	ldi	r18, 0x90	; 144
 226:	31 e0       	ldi	r19, 0x01	; 1
 228:	f9 01       	movw	r30, r18
 22a:	31 97       	sbiw	r30, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <main+0x18a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 230:	d9 f7       	brne	.-10     	; 0x228 <main+0x188>
   _delay_ms(400);
   PORTA=0x00;
 232:	1b ba       	out	0x1b, r1	; 27
 234:	80 ea       	ldi	r24, 0xA0	; 160
 236:	9f e0       	ldi	r25, 0x0F	; 15
 238:	20 e9       	ldi	r18, 0x90	; 144
 23a:	31 e0       	ldi	r19, 0x01	; 1
 23c:	f9 01       	movw	r30, r18
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <main+0x19e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 242:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 244:	d9 f7       	brne	.-10     	; 0x23c <main+0x19c>
 246:	20 e0       	ldi	r18, 0x00	; 0
#include<util/delay.h>
#include<compat/deprecated.h>

int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 248:	f0 e4       	ldi	r31, 0x40	; 64
 24a:	5f 2e       	mov	r5, r31
 24c:	e1 e4       	ldi	r30, 0x41	; 65
 24e:	2e 2e       	mov	r2, r30
 250:	72 e4       	ldi	r23, 0x42	; 66
 252:	37 2e       	mov	r3, r23
 254:	60 e8       	ldi	r22, 0x80	; 128
 256:	a6 2e       	mov	r10, r22
 258:	6e e3       	ldi	r22, 0x3E	; 62
 25a:	b6 2e       	mov	r11, r22
 while(!(ADCSRA&(1<<ADIF)));
 return ADC;
}
void forward()
{
 PORTC=0b01100000;
 25c:	50 ec       	ldi	r21, 0xC0	; 192
 25e:	c5 2e       	mov	r12, r21
 260:	5d e5       	ldi	r21, 0x5D	; 93
 262:	d5 2e       	mov	r13, r21
 264:	40 e6       	ldi	r20, 0x60	; 96
 266:	44 2e       	mov	r4, r20
 268:	30 e6       	ldi	r19, 0x60	; 96
 26a:	63 2e       	mov	r6, r19
 26c:	3d e6       	ldi	r19, 0x6D	; 109
 26e:	73 2e       	mov	r7, r19
{
 PORTC=0b10010000;
}
void left()
{
 PORTC=0b00100000;
 270:	90 ee       	ldi	r25, 0xE0	; 224
 272:	89 2e       	mov	r8, r25
 274:	9e e2       	ldi	r25, 0x2E	; 46
 276:	99 2e       	mov	r9, r25
 278:	80 e2       	ldi	r24, 0x20	; 32
 27a:	e8 2e       	mov	r14, r24
 27c:	8e e4       	ldi	r24, 0x4E	; 78
 27e:	f8 2e       	mov	r15, r24
 280:	30 e2       	ldi	r19, 0x20	; 32
#include<util/delay.h>
#include<compat/deprecated.h>

int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 282:	57 b8       	out	0x07, r5	; 7
 ADCSRA|=(1<<ADEN);
 284:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 286:	86 b1       	in	r24, 0x06	; 6
 288:	87 64       	ori	r24, 0x47	; 71
 28a:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 28c:	34 9b       	sbis	0x06, 4	; 6
 28e:	fe cf       	rjmp	.-4      	; 0x28c <main+0x1ec>
 return ADC;
 290:	e4 b1       	in	r30, 0x04	; 4
 292:	f5 b1       	in	r31, 0x05	; 5
#include<util/delay.h>
#include<compat/deprecated.h>

int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 294:	27 b8       	out	0x07, r2	; 7
 ADCSRA|=(1<<ADEN);
 296:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 298:	86 b1       	in	r24, 0x06	; 6
 29a:	87 64       	ori	r24, 0x47	; 71
 29c:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 29e:	34 9b       	sbis	0x06, 4	; 6
 2a0:	fe cf       	rjmp	.-4      	; 0x29e <main+0x1fe>
 return ADC;
 2a2:	64 b1       	in	r22, 0x04	; 4
 2a4:	75 b1       	in	r23, 0x05	; 5
#include<util/delay.h>
#include<compat/deprecated.h>

int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 2a6:	37 b8       	out	0x07, r3	; 7
 ADCSRA|=(1<<ADEN);
 2a8:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 2aa:	86 b1       	in	r24, 0x06	; 6
 2ac:	87 64       	ori	r24, 0x47	; 71
 2ae:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 2b0:	34 9b       	sbis	0x06, 4	; 6
 2b2:	fe cf       	rjmp	.-4      	; 0x2b0 <main+0x210>
 return ADC;
 2b4:	44 b1       	in	r20, 0x04	; 4
 2b6:	55 b1       	in	r21, 0x05	; 5
 while(1)
 {
   a1d=adcread(0);
  a2d=adcread(1);
  a3d=adcread(2);
   if(a1d>a1t)
 2b8:	0e 17       	cp	r16, r30
 2ba:	1f 07       	cpc	r17, r31
 2bc:	24 f4       	brge	.+8      	; 0x2c6 <main+0x226>
   {
   sbi(PORTA,4);
 2be:	dc 9a       	sbi	0x1b, 4	; 27
    sbi(eyeval,4);
 2c0:	82 2f       	mov	r24, r18
 2c2:	80 61       	ori	r24, 0x10	; 16
 2c4:	03 c0       	rjmp	.+6      	; 0x2cc <main+0x22c>
   }
   else
   {
   cbi(PORTA,4);
 2c6:	dc 98       	cbi	0x1b, 4	; 27
   cbi(eyeval,4);
 2c8:	82 2f       	mov	r24, r18
 2ca:	8f 7e       	andi	r24, 0xEF	; 239
   }
   if(a2d>a2t)
 2cc:	c6 17       	cp	r28, r22
 2ce:	d7 07       	cpc	r29, r23
 2d0:	1c f4       	brge	.+6      	; 0x2d8 <main+0x238>
   {
   sbi(PORTA,5);
 2d2:	dd 9a       	sbi	0x1b, 5	; 27
   sbi(eyeval,5);
 2d4:	80 62       	ori	r24, 0x20	; 32
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <main+0x23c>
   }
   else
   {
   cbi(PORTA,5);
 2d8:	dd 98       	cbi	0x1b, 5	; 27
   cbi(eyeval,5);
 2da:	8f 7d       	andi	r24, 0xDF	; 223
   }
   if(a3d>a3t)
 2dc:	a4 17       	cp	r26, r20
 2de:	b5 07       	cpc	r27, r21
 2e0:	1c f4       	brge	.+6      	; 0x2e8 <main+0x248>
   {
   sbi(PORTA,6);
 2e2:	de 9a       	sbi	0x1b, 6	; 27
   sbi(eyeval,6);
 2e4:	80 64       	ori	r24, 0x40	; 64
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <main+0x24c>
   }
   else
   {
   cbi(PORTA,6);
 2e8:	de 98       	cbi	0x1b, 6	; 27
   cbi(eyeval,6);
 2ea:	8f 7b       	andi	r24, 0xBF	; 191
   }
   eyeval=eyeval&0x70;
 2ec:	28 2f       	mov	r18, r24
 2ee:	20 77       	andi	r18, 0x70	; 112
   switch(eyeval)
 2f0:	20 34       	cpi	r18, 0x40	; 64
 2f2:	b9 f0       	breq	.+46     	; 0x322 <main+0x282>
 2f4:	21 34       	cpi	r18, 0x41	; 65
 2f6:	28 f4       	brcc	.+10     	; 0x302 <main+0x262>
 2f8:	20 31       	cpi	r18, 0x10	; 16
 2fa:	79 f0       	breq	.+30     	; 0x31a <main+0x27a>
 2fc:	20 33       	cpi	r18, 0x30	; 48
 2fe:	09 f5       	brne	.+66     	; 0x342 <main+0x2a2>
 300:	0e c0       	rjmp	.+28     	; 0x31e <main+0x27e>
 302:	20 35       	cpi	r18, 0x50	; 80
 304:	19 f0       	breq	.+6      	; 0x30c <main+0x26c>
 306:	20 36       	cpi	r18, 0x60	; 96
 308:	e1 f4       	brne	.+56     	; 0x342 <main+0x2a2>
 30a:	12 c0       	rjmp	.+36     	; 0x330 <main+0x290>
 while(!(ADCSRA&(1<<ADIF)));
 return ADC;
}
void forward()
{
 PORTC=0b01100000;
 30c:	45 ba       	out	0x15, r4	; 21
 30e:	c3 01       	movw	r24, r6
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <main+0x270>
 PORTC=0b01000000;
}

void stop()
{
 PORTC=0x00;
 314:	15 ba       	out	0x15, r1	; 21
 316:	c4 01       	movw	r24, r8
 318:	11 c0       	rjmp	.+34     	; 0x33c <main+0x29c>
{
 PORTC=0b10010000;
}
void left()
{
 PORTC=0b00100000;
 31a:	35 bb       	out	0x15, r19	; 21
 31c:	03 c0       	rjmp	.+6      	; 0x324 <main+0x284>
}
void right()
{
 
 PORTC=0b01000000;
 31e:	35 bb       	out	0x15, r19	; 21
 320:	08 c0       	rjmp	.+16     	; 0x332 <main+0x292>
 322:	25 bb       	out	0x15, r18	; 21
 324:	c5 01       	movw	r24, r10
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <main+0x286>
}

void stop()
{
 PORTC=0x00;
 32a:	15 ba       	out	0x15, r1	; 21
 32c:	c6 01       	movw	r24, r12
 32e:	06 c0       	rjmp	.+12     	; 0x33c <main+0x29c>
 PORTC=0b00100000;
}
void right()
{
 
 PORTC=0b01000000;
 330:	55 ba       	out	0x15, r5	; 21
 332:	c7 01       	movw	r24, r14
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <main+0x294>
}

void stop()
{
 PORTC=0x00;
 338:	15 ba       	out	0x15, r1	; 21
 33a:	c7 01       	movw	r24, r14
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <main+0x29c>
 340:	a0 cf       	rjmp	.-192    	; 0x282 <main+0x1e2>
 342:	15 ba       	out	0x15, r1	; 21
 344:	9e cf       	rjmp	.-196    	; 0x282 <main+0x1e2>

00000346 <__divmodhi4>:
 346:	97 fb       	bst	r25, 7
 348:	09 2e       	mov	r0, r25
 34a:	07 26       	eor	r0, r23
 34c:	0a d0       	rcall	.+20     	; 0x362 <__divmodhi4_neg1>
 34e:	77 fd       	sbrc	r23, 7
 350:	04 d0       	rcall	.+8      	; 0x35a <__divmodhi4_neg2>
 352:	0c d0       	rcall	.+24     	; 0x36c <__udivmodhi4>
 354:	06 d0       	rcall	.+12     	; 0x362 <__divmodhi4_neg1>
 356:	00 20       	and	r0, r0
 358:	1a f4       	brpl	.+6      	; 0x360 <__divmodhi4_exit>

0000035a <__divmodhi4_neg2>:
 35a:	70 95       	com	r23
 35c:	61 95       	neg	r22
 35e:	7f 4f       	sbci	r23, 0xFF	; 255

00000360 <__divmodhi4_exit>:
 360:	08 95       	ret

00000362 <__divmodhi4_neg1>:
 362:	f6 f7       	brtc	.-4      	; 0x360 <__divmodhi4_exit>
 364:	90 95       	com	r25
 366:	81 95       	neg	r24
 368:	9f 4f       	sbci	r25, 0xFF	; 255
 36a:	08 95       	ret

0000036c <__udivmodhi4>:
 36c:	aa 1b       	sub	r26, r26
 36e:	bb 1b       	sub	r27, r27
 370:	51 e1       	ldi	r21, 0x11	; 17
 372:	07 c0       	rjmp	.+14     	; 0x382 <__udivmodhi4_ep>

00000374 <__udivmodhi4_loop>:
 374:	aa 1f       	adc	r26, r26
 376:	bb 1f       	adc	r27, r27
 378:	a6 17       	cp	r26, r22
 37a:	b7 07       	cpc	r27, r23
 37c:	10 f0       	brcs	.+4      	; 0x382 <__udivmodhi4_ep>
 37e:	a6 1b       	sub	r26, r22
 380:	b7 0b       	sbc	r27, r23

00000382 <__udivmodhi4_ep>:
 382:	88 1f       	adc	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	5a 95       	dec	r21
 388:	a9 f7       	brne	.-22     	; 0x374 <__udivmodhi4_loop>
 38a:	80 95       	com	r24
 38c:	90 95       	com	r25
 38e:	bc 01       	movw	r22, r24
 390:	cd 01       	movw	r24, r26
 392:	08 95       	ret

00000394 <_exit>:
 394:	f8 94       	cli

00000396 <__stop_program>:
 396:	ff cf       	rjmp	.-2      	; 0x396 <__stop_program>
