
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000007d8  0000086c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008000a0  008000a0  000008ac  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000b5  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fd6  00000000  00000000  00000981  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f0  00000000  00000000  00001957  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bac  00000000  00000000  00001b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  000026f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000176  00000000  00000000  000027b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004e4  00000000  00000000  0000292a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00002e0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3a       	cpi	r26, 0xAB	; 171
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0c 03 	call	0x618	; 0x618 <main>
  8a:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_reset>:
#define LCD_RW      0x02
#define LCD_EN      0x04

void lcd_reset(void)
{
        lcd_port = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	88 bb       	out	0x18, r24	; 24
  96:	88 ec       	ldi	r24, 0xC8	; 200
  98:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	20 e9       	ldi	r18, 0x90	; 144
  9c:	31 e0       	ldi	r19, 0x01	; 1
  9e:	f9 01       	movw	r30, r18
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_reset+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a6:	d9 f7       	brne	.-10     	; 0x9e <lcd_reset+0xc>
        _delay_ms(20);
        lcd_port = 0x30+LCD_EN;
  a8:	94 e3       	ldi	r25, 0x34	; 52
  aa:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  ac:	80 e3       	ldi	r24, 0x30	; 48
  ae:	88 bb       	out	0x18, r24	; 24
  b0:	e0 e4       	ldi	r30, 0x40	; 64
  b2:	fc e9       	ldi	r31, 0x9C	; 156
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_reset+0x22>
        _delay_ms(10);
        lcd_port = 0x30+LCD_EN;
  b8:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	20 ea       	ldi	r18, 0xA0	; 160
  be:	3f e0       	ldi	r19, 0x0F	; 15
  c0:	f9 01       	movw	r30, r18
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_reset+0x30>
        _delay_ms(1);
        lcd_port = 0x30+LCD_EN;
  c6:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  c8:	88 bb       	out	0x18, r24	; 24
  ca:	c9 01       	movw	r24, r18
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_reset+0x3a>
        _delay_ms(1);
        lcd_port = 0x20+LCD_EN;
  d0:	84 e2       	ldi	r24, 0x24	; 36
  d2:	88 bb       	out	0x18, r24	; 24
        lcd_port = 0x20;
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	88 bb       	out	0x18, r24	; 24
  d8:	c9 01       	movw	r24, r18
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd_reset+0x48>
        _delay_ms(1);
}
  de:	08 95       	ret

000000e0 <lcd_cmd>:
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
  e0:	38 2f       	mov	r19, r24
  e2:	30 7f       	andi	r19, 0xF0	; 240
  e4:	23 2f       	mov	r18, r19
  e6:	24 60       	ori	r18, 0x04	; 4
  e8:	28 bb       	out	0x18, r18	; 24
        lcd_port = (cmd & 0xF0);
  ea:	38 bb       	out	0x18, r19	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	24 e0       	ldi	r18, 0x04	; 4
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	2a 95       	dec	r18
  f6:	e1 f7       	brne	.-8      	; 0xf0 <lcd_cmd+0x10>
  f8:	28 2f       	mov	r18, r24
  fa:	24 60       	ori	r18, 0x04	; 4
  fc:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((cmd << 4) & 0xF0);
  fe:	88 bb       	out	0x18, r24	; 24
 100:	80 e4       	ldi	r24, 0x40	; 64
 102:	9f e1       	ldi	r25, 0x1F	; 31
 104:	fc 01       	movw	r30, r24
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_cmd+0x26>

      

        _delay_ms(2);
        _delay_ms(2);
}
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_cmd+0x2a>
 10e:	08 95       	ret

00000110 <lcd_init>:

void lcd_init (void)
{       DDRB=0xFF;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	87 bb       	out	0x17, r24	; 23
        PORTB=0x00; 
 114:	18 ba       	out	0x18, r1	; 24
        lcd_reset();         // Call LCD reset
 116:	0e 94 49 00 	call	0x92	; 0x92 <lcd_reset>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 11a:	84 e2       	ldi	r24, 0x24	; 36
 11c:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 11e:	80 e2       	ldi	r24, 0x20	; 32
 120:	88 bb       	out	0x18, r24	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 122:	54 e8       	ldi	r21, 0x84	; 132
 124:	58 bb       	out	0x18, r21	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 126:	40 e8       	ldi	r20, 0x80	; 128
 128:	48 bb       	out	0x18, r20	; 24
 12a:	20 e4       	ldi	r18, 0x40	; 64
 12c:	3f e1       	ldi	r19, 0x1F	; 31
 12e:	c9 01       	movw	r24, r18
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lcd_init+0x20>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 134:	c9 01       	movw	r24, r18
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <lcd_init+0x26>
 13a:	94 e0       	ldi	r25, 0x04	; 4
 13c:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 13e:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 140:	84 ec       	ldi	r24, 0xC4	; 196
 142:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 144:	80 ec       	ldi	r24, 0xC0	; 192
 146:	88 bb       	out	0x18, r24	; 24
 148:	f9 01       	movw	r30, r18
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_init+0x3a>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 14e:	f9 01       	movw	r30, r18
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x40>
 154:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 156:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 158:	84 e6       	ldi	r24, 0x64	; 100
 15a:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 15c:	80 e6       	ldi	r24, 0x60	; 96
 15e:	88 bb       	out	0x18, r24	; 24
 160:	f9 01       	movw	r30, r18
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_init+0x52>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 166:	f9 01       	movw	r30, r18
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_init+0x58>
 16c:	58 bb       	out	0x18, r21	; 24
        lcd_port = (cmd & 0xF0);
 16e:	48 bb       	out	0x18, r20	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 170:	98 bb       	out	0x18, r25	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 172:	18 ba       	out	0x18, r1	; 24
 174:	c9 01       	movw	r24, r18
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_init+0x66>
        lcd_reset();         // Call LCD reset
        lcd_cmd(0x28);       // 4-bit mode - 2 line - 5x7 font.
        lcd_cmd(0x0C);       // Display on cursor - off .
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 }
 17a:	c9 01       	movw	r24, r18
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <lcd_init+0x6c>
 180:	08 95       	ret

00000182 <lcd_data>:


void lcd_data (unsigned char dat)
{
        lcd_port = ((dat & 0xF0)|LCD_EN|LCD_RS);
 182:	98 2f       	mov	r25, r24
 184:	90 7f       	andi	r25, 0xF0	; 240
 186:	29 2f       	mov	r18, r25
 188:	25 60       	ori	r18, 0x05	; 5
 18a:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((dat & 0xF0)|LCD_RS);
 18c:	91 60       	ori	r25, 0x01	; 1
 18e:	98 bb       	out	0x18, r25	; 24
		
		lcd_port = (((dat << 4) & 0xF0)|LCD_EN|LCD_RS);
 190:	82 95       	swap	r24
 192:	80 7f       	andi	r24, 0xF0	; 240
 194:	98 2f       	mov	r25, r24
 196:	95 60       	ori	r25, 0x05	; 5
 198:	98 bb       	out	0x18, r25	; 24
        lcd_port = (((dat << 4) & 0xF0)|LCD_RS);
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	88 bb       	out	0x18, r24	; 24
 19e:	80 e4       	ldi	r24, 0x40	; 64
 1a0:	9f e1       	ldi	r25, 0x1F	; 31
 1a2:	fc 01       	movw	r30, r24
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_data+0x22>
       
      

       _delay_ms(2);
       _delay_ms(2);
}
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_data+0x26>
 1ac:	08 95       	ret

000001ae <lcd_puts>:
void lcd_puts(char *aaa)
{
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <lcd_puts+0xc>
unsigned int i;
for(i=0;aaa[i]!=0;i++)
lcd_data(aaa[i]);
 1b6:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
       _delay_ms(2);
}
void lcd_puts(char *aaa)
{
unsigned int i;
for(i=0;aaa[i]!=0;i++)
 1ba:	89 91       	ld	r24, Y+
 1bc:	88 23       	and	r24, r24
 1be:	d9 f7       	brne	.-10     	; 0x1b6 <lcd_puts+0x8>
lcd_data(aaa[i]);

}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <itoa>:
void itoa(uint16_t num)
{
 1c6:	cf 92       	push	r12
 1c8:	df 92       	push	r13
 1ca:	ef 92       	push	r14
 1cc:	ff 92       	push	r15
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	7c 01       	movw	r14, r24
 unsigned char a,b,c,d;
 a=num%10;
 num=num/10;
 1d4:	6a e0       	ldi	r22, 0x0A	; 10
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	0e 94 c3 03 	call	0x786	; 0x786 <__udivmodhi4>
 1dc:	d6 2e       	mov	r13, r22
 1de:	c7 2e       	mov	r12, r23
 b=num%10;
 num=num/10;
 1e0:	86 2f       	mov	r24, r22
 1e2:	97 2f       	mov	r25, r23
 1e4:	6a e0       	ldi	r22, 0x0A	; 10
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	0e 94 c3 03 	call	0x786	; 0x786 <__udivmodhi4>
 1ec:	16 2f       	mov	r17, r22
 1ee:	07 2f       	mov	r16, r23
 c=num%10;
 num=num/10;
 d=num%10;
 lcd_data(0x30+d); 
 1f0:	86 2f       	mov	r24, r22
 1f2:	97 2f       	mov	r25, r23
 1f4:	6a e0       	ldi	r22, 0x0A	; 10
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	0e 94 c3 03 	call	0x786	; 0x786 <__udivmodhi4>
 1fc:	cb 01       	movw	r24, r22
 1fe:	6a e0       	ldi	r22, 0x0A	; 10
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	0e 94 c3 03 	call	0x786	; 0x786 <__udivmodhi4>
 206:	80 5d       	subi	r24, 0xD0	; 208
 208:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
 lcd_data(0x30+c); 
 20c:	81 2f       	mov	r24, r17
 20e:	90 2f       	mov	r25, r16
 210:	6a e0       	ldi	r22, 0x0A	; 10
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	0e 94 c3 03 	call	0x786	; 0x786 <__udivmodhi4>
 218:	80 5d       	subi	r24, 0xD0	; 208
 21a:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
 lcd_data(0x30+b); 
 21e:	8d 2d       	mov	r24, r13
 220:	9c 2d       	mov	r25, r12
 222:	6a e0       	ldi	r22, 0x0A	; 10
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	0e 94 c3 03 	call	0x786	; 0x786 <__udivmodhi4>
 22a:	80 5d       	subi	r24, 0xD0	; 208
 22c:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
 lcd_data(0x30+a); 
 230:	c7 01       	movw	r24, r14
 232:	6a e0       	ldi	r22, 0x0A	; 10
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	0e 94 c3 03 	call	0x786	; 0x786 <__udivmodhi4>
 23a:	80 5d       	subi	r24, 0xD0	; 208
 23c:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	08 95       	ret

0000024e <adcread>:
*/
volatile int eye_mid[5];
volatile unsigned char eyeval;
int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 24e:	80 64       	ori	r24, 0x40	; 64
 250:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 252:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 254:	86 b1       	in	r24, 0x06	; 6
 256:	87 64       	ori	r24, 0x47	; 71
 258:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 25a:	34 9b       	sbis	0x06, 4	; 6
 25c:	fe cf       	rjmp	.-4      	; 0x25a <adcread+0xc>
 return ADC;
 25e:	24 b1       	in	r18, 0x04	; 4
 260:	35 b1       	in	r19, 0x05	; 5
}
 262:	c9 01       	movw	r24, r18
 264:	08 95       	ret

00000266 <gripper_init>:
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 26a:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 26c:	84 e1       	ldi	r24, 0x14	; 20
 26e:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 270:	80 e1       	ldi	r24, 0x10	; 16
 272:	88 bb       	out	0x18, r24	; 24
 274:	80 e4       	ldi	r24, 0x40	; 64
 276:	9f e1       	ldi	r25, 0x1F	; 31
 278:	fc 01       	movw	r30, r24
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <gripper_init+0x14>
void gripper_init()
{
 lcd_cmd(0x01);
 lcd_puts("Gripper check");
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <gripper_init+0x18>
 282:	80 e6       	ldi	r24, 0x60	; 96
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_puts>
 while(bit_is_set(PIND,2))
 {
  if(bit_is_clear(PIND,0))
  PORTC=0x0A;
  else if(bit_is_clear(PIND,1))
  PORTC=0x05;
 28a:	95 e0       	ldi	r25, 0x05	; 5
 lcd_cmd(0x01);
 lcd_puts("Gripper check");
 while(bit_is_set(PIND,2))
 {
  if(bit_is_clear(PIND,0))
  PORTC=0x0A;
 28c:	8a e0       	ldi	r24, 0x0A	; 10
 28e:	09 c0       	rjmp	.+18     	; 0x2a2 <gripper_init+0x3c>
{
 lcd_cmd(0x01);
 lcd_puts("Gripper check");
 while(bit_is_set(PIND,2))
 {
  if(bit_is_clear(PIND,0))
 290:	80 99       	sbic	0x10, 0	; 16
 292:	02 c0       	rjmp	.+4      	; 0x298 <gripper_init+0x32>
  PORTC=0x0A;
 294:	85 bb       	out	0x15, r24	; 21
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <gripper_init+0x3c>
  else if(bit_is_clear(PIND,1))
 298:	81 99       	sbic	0x10, 1	; 16
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <gripper_init+0x3a>
  PORTC=0x05;
 29c:	95 bb       	out	0x15, r25	; 21
 29e:	01 c0       	rjmp	.+2      	; 0x2a2 <gripper_init+0x3c>
  else
  PORTC=0x00;
 2a0:	15 ba       	out	0x15, r1	; 21
}
void gripper_init()
{
 lcd_cmd(0x01);
 lcd_puts("Gripper check");
 while(bit_is_set(PIND,2))
 2a2:	82 99       	sbic	0x10, 2	; 16
 2a4:	f5 cf       	rjmp	.-22     	; 0x290 <gripper_init+0x2a>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 2a6:	84 e0       	ldi	r24, 0x04	; 4
 2a8:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 2aa:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 2ac:	84 e1       	ldi	r24, 0x14	; 20
 2ae:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 2b0:	80 e1       	ldi	r24, 0x10	; 16
 2b2:	88 bb       	out	0x18, r24	; 24
 2b4:	80 e4       	ldi	r24, 0x40	; 64
 2b6:	9f e1       	ldi	r25, 0x1F	; 31
 2b8:	fc 01       	movw	r30, r24
 2ba:	31 97       	sbiw	r30, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <gripper_init+0x54>
  PORTC=0x00;
  

}
lcd_cmd(0x01);
 lcd_puts("Gripper ready");
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <gripper_init+0x58>
 2c2:	8e e6       	ldi	r24, 0x6E	; 110
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_puts>
 2ca:	80 e2       	ldi	r24, 0x20	; 32
 2cc:	9e e4       	ldi	r25, 0x4E	; 78
 2ce:	20 e9       	ldi	r18, 0x90	; 144
 2d0:	31 e0       	ldi	r19, 0x01	; 1
 2d2:	f9 01       	movw	r30, r18
 2d4:	31 97       	sbiw	r30, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <gripper_init+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2da:	d9 f7       	brne	.-10     	; 0x2d2 <gripper_init+0x6c>
 _delay_ms(2000);
}
 2dc:	08 95       	ret

000002de <eye_check>:
void eye_check()
{
 2de:	cf 92       	push	r12
 2e0:	df 92       	push	r13
 2e2:	ef 92       	push	r14
 2e4:	ff 92       	push	r15
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	df 93       	push	r29
 2ec:	cf 93       	push	r28
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	64 97       	sbiw	r28, 0x14	; 20
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	cd bf       	out	0x3d, r28	; 61
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 2fe:	84 e0       	ldi	r24, 0x04	; 4
 300:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 302:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 304:	84 e1       	ldi	r24, 0x14	; 20
 306:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 308:	80 e1       	ldi	r24, 0x10	; 16
 30a:	88 bb       	out	0x18, r24	; 24
 30c:	80 e4       	ldi	r24, 0x40	; 64
 30e:	9f e1       	ldi	r25, 0x1F	; 31
 310:	fc 01       	movw	r30, r24
 312:	31 97       	sbiw	r30, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <eye_check+0x34>
 uint8_t i;
 int max[5];
 int min[5];
 lcd_cmd(0x01);
 lcd_puts("TEST Black");
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <eye_check+0x38>
 31a:	8c e7       	ldi	r24, 0x7C	; 124
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_puts>
 while(bit_is_set(PIND,0));
 322:	80 99       	sbic	0x10, 0	; 16
 324:	fe cf       	rjmp	.-4      	; 0x322 <eye_check+0x44>
 326:	80 e1       	ldi	r24, 0x10	; 16
 328:	97 e2       	ldi	r25, 0x27	; 39
 32a:	20 e9       	ldi	r18, 0x90	; 144
 32c:	31 e0       	ldi	r19, 0x01	; 1
 32e:	f9 01       	movw	r30, r18
 330:	31 97       	sbiw	r30, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <eye_check+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 334:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 336:	d9 f7       	brne	.-10     	; 0x32e <eye_check+0x50>
*/
volatile int eye_mid[5];
volatile unsigned char eyeval;
int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 338:	80 e4       	ldi	r24, 0x40	; 64
 33a:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 33c:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 33e:	86 b1       	in	r24, 0x06	; 6
 340:	87 64       	ori	r24, 0x47	; 71
 342:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 344:	34 9b       	sbis	0x06, 4	; 6
 346:	fe cf       	rjmp	.-4      	; 0x344 <eye_check+0x66>
 return ADC;
 348:	e4 b1       	in	r30, 0x04	; 4
 34a:	f5 b1       	in	r31, 0x05	; 5
*/
volatile int eye_mid[5];
volatile unsigned char eyeval;
int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 34c:	81 e4       	ldi	r24, 0x41	; 65
 34e:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 350:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 352:	86 b1       	in	r24, 0x06	; 6
 354:	87 64       	ori	r24, 0x47	; 71
 356:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 358:	34 9b       	sbis	0x06, 4	; 6
 35a:	fe cf       	rjmp	.-4      	; 0x358 <eye_check+0x7a>
 return ADC;
 35c:	64 b1       	in	r22, 0x04	; 4
 35e:	75 b1       	in	r23, 0x05	; 5
*/
volatile int eye_mid[5];
volatile unsigned char eyeval;
int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 360:	82 e4       	ldi	r24, 0x42	; 66
 362:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 364:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 366:	86 b1       	in	r24, 0x06	; 6
 368:	87 64       	ori	r24, 0x47	; 71
 36a:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 36c:	34 9b       	sbis	0x06, 4	; 6
 36e:	fe cf       	rjmp	.-4      	; 0x36c <eye_check+0x8e>
 return ADC;
 370:	44 b1       	in	r20, 0x04	; 4
 372:	55 b1       	in	r21, 0x05	; 5
*/
volatile int eye_mid[5];
volatile unsigned char eyeval;
int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 374:	83 e4       	ldi	r24, 0x43	; 67
 376:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 378:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 37a:	86 b1       	in	r24, 0x06	; 6
 37c:	87 64       	ori	r24, 0x47	; 71
 37e:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 380:	34 9b       	sbis	0x06, 4	; 6
 382:	fe cf       	rjmp	.-4      	; 0x380 <eye_check+0xa2>
 return ADC;
 384:	24 b1       	in	r18, 0x04	; 4
 386:	35 b1       	in	r19, 0x05	; 5
*/
volatile int eye_mid[5];
volatile unsigned char eyeval;
int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 388:	84 e4       	ldi	r24, 0x44	; 68
 38a:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 38c:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 38e:	86 b1       	in	r24, 0x06	; 6
 390:	87 64       	ori	r24, 0x47	; 71
 392:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 394:	34 9b       	sbis	0x06, 4	; 6
 396:	fe cf       	rjmp	.-4      	; 0x394 <eye_check+0xb6>
 return ADC;
 398:	84 b1       	in	r24, 0x04	; 4
 39a:	95 b1       	in	r25, 0x05	; 5
 int min[5];
 lcd_cmd(0x01);
 lcd_puts("TEST Black");
 while(bit_is_set(PIND,0));
 _delay_ms(1000);
 min[0]=adcread(0); 
 39c:	fc 87       	std	Y+12, r31	; 0x0c
 39e:	eb 87       	std	Y+11, r30	; 0x0b
 min[1]=adcread(1); 
 3a0:	7e 87       	std	Y+14, r23	; 0x0e
 3a2:	6d 87       	std	Y+13, r22	; 0x0d
 min[2]=adcread(2); 
 3a4:	58 8b       	std	Y+16, r21	; 0x10
 3a6:	4f 87       	std	Y+15, r20	; 0x0f
 min[3]=adcread(3); 
 3a8:	3a 8b       	std	Y+18, r19	; 0x12
 3aa:	29 8b       	std	Y+17, r18	; 0x11
 min[4]=adcread(4); 
 3ac:	9c 8b       	std	Y+20, r25	; 0x14
 3ae:	8b 8b       	std	Y+19, r24	; 0x13
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 3b0:	84 e0       	ldi	r24, 0x04	; 4
 3b2:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 3b4:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 3b6:	84 e1       	ldi	r24, 0x14	; 20
 3b8:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 3ba:	80 e1       	ldi	r24, 0x10	; 16
 3bc:	88 bb       	out	0x18, r24	; 24
 3be:	80 e4       	ldi	r24, 0x40	; 64
 3c0:	9f e1       	ldi	r25, 0x1F	; 31
 3c2:	fc 01       	movw	r30, r24
 3c4:	31 97       	sbiw	r30, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <eye_check+0xe6>
 lcd_cmd(0x01);
 lcd_puts("TEST white");
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <eye_check+0xea>
 3cc:	87 e8       	ldi	r24, 0x87	; 135
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_puts>
 while(bit_is_set(PIND,0)); 
 3d4:	80 99       	sbic	0x10, 0	; 16
 3d6:	fe cf       	rjmp	.-4      	; 0x3d4 <eye_check+0xf6>
 3d8:	80 e1       	ldi	r24, 0x10	; 16
 3da:	97 e2       	ldi	r25, 0x27	; 39
 3dc:	20 e9       	ldi	r18, 0x90	; 144
 3de:	31 e0       	ldi	r19, 0x01	; 1
 3e0:	f9 01       	movw	r30, r18
 3e2:	31 97       	sbiw	r30, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <eye_check+0x104>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3e8:	d9 f7       	brne	.-10     	; 0x3e0 <eye_check+0x102>
*/
volatile int eye_mid[5];
volatile unsigned char eyeval;
int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 3ea:	80 e4       	ldi	r24, 0x40	; 64
 3ec:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 3ee:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 3f0:	86 b1       	in	r24, 0x06	; 6
 3f2:	87 64       	ori	r24, 0x47	; 71
 3f4:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 3f6:	34 9b       	sbis	0x06, 4	; 6
 3f8:	fe cf       	rjmp	.-4      	; 0x3f6 <eye_check+0x118>
 return ADC;
 3fa:	e4 b1       	in	r30, 0x04	; 4
 3fc:	f5 b1       	in	r31, 0x05	; 5
*/
volatile int eye_mid[5];
volatile unsigned char eyeval;
int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 3fe:	81 e4       	ldi	r24, 0x41	; 65
 400:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 402:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 404:	86 b1       	in	r24, 0x06	; 6
 406:	87 64       	ori	r24, 0x47	; 71
 408:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 40a:	34 9b       	sbis	0x06, 4	; 6
 40c:	fe cf       	rjmp	.-4      	; 0x40a <eye_check+0x12c>
 return ADC;
 40e:	64 b1       	in	r22, 0x04	; 4
 410:	75 b1       	in	r23, 0x05	; 5
*/
volatile int eye_mid[5];
volatile unsigned char eyeval;
int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 412:	82 e4       	ldi	r24, 0x42	; 66
 414:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 416:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 418:	86 b1       	in	r24, 0x06	; 6
 41a:	87 64       	ori	r24, 0x47	; 71
 41c:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 41e:	34 9b       	sbis	0x06, 4	; 6
 420:	fe cf       	rjmp	.-4      	; 0x41e <eye_check+0x140>
 return ADC;
 422:	44 b1       	in	r20, 0x04	; 4
 424:	55 b1       	in	r21, 0x05	; 5
*/
volatile int eye_mid[5];
volatile unsigned char eyeval;
int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 426:	83 e4       	ldi	r24, 0x43	; 67
 428:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 42a:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 42c:	86 b1       	in	r24, 0x06	; 6
 42e:	87 64       	ori	r24, 0x47	; 71
 430:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 432:	34 9b       	sbis	0x06, 4	; 6
 434:	fe cf       	rjmp	.-4      	; 0x432 <eye_check+0x154>
 return ADC;
 436:	24 b1       	in	r18, 0x04	; 4
 438:	35 b1       	in	r19, 0x05	; 5
*/
volatile int eye_mid[5];
volatile unsigned char eyeval;
int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 43a:	84 e4       	ldi	r24, 0x44	; 68
 43c:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 43e:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 440:	86 b1       	in	r24, 0x06	; 6
 442:	87 64       	ori	r24, 0x47	; 71
 444:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 446:	34 9b       	sbis	0x06, 4	; 6
 448:	fe cf       	rjmp	.-4      	; 0x446 <eye_check+0x168>
 return ADC;
 44a:	84 b1       	in	r24, 0x04	; 4
 44c:	95 b1       	in	r25, 0x05	; 5
 min[4]=adcread(4); 
 lcd_cmd(0x01);
 lcd_puts("TEST white");
 while(bit_is_set(PIND,0)); 
 _delay_ms(1000);
 max[0]=adcread(0); 
 44e:	fa 83       	std	Y+2, r31	; 0x02
 450:	e9 83       	std	Y+1, r30	; 0x01
 max[1]=adcread(1); 
 452:	7c 83       	std	Y+4, r23	; 0x04
 454:	6b 83       	std	Y+3, r22	; 0x03
 max[2]=adcread(2); 
 456:	5e 83       	std	Y+6, r21	; 0x06
 458:	4d 83       	std	Y+5, r20	; 0x05
 max[3]=adcread(3); 
 45a:	38 87       	std	Y+8, r19	; 0x08
 45c:	2f 83       	std	Y+7, r18	; 0x07
 max[4]=adcread(4); 
 45e:	9a 87       	std	Y+10, r25	; 0x0a
 460:	89 87       	std	Y+9, r24	; 0x09
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 462:	84 e0       	ldi	r24, 0x04	; 4
 464:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 466:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 468:	84 e1       	ldi	r24, 0x14	; 20
 46a:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 46c:	80 e1       	ldi	r24, 0x10	; 16
 46e:	88 bb       	out	0x18, r24	; 24
 470:	80 e4       	ldi	r24, 0x40	; 64
 472:	9f e1       	ldi	r25, 0x1F	; 31
 474:	fc 01       	movw	r30, r24
 476:	31 97       	sbiw	r30, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <__stack+0x17>
 lcd_cmd(0x01);
 lcd_puts("TEST ok");
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <__stack+0x1b>
 47e:	82 e9       	ldi	r24, 0x92	; 146
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_puts>
 486:	6e 01       	movw	r12, r28
 488:	08 94       	sec
 48a:	c1 1c       	adc	r12, r1
 48c:	d1 1c       	adc	r13, r1
 48e:	4b e0       	ldi	r20, 0x0B	; 11
 490:	e4 2e       	mov	r14, r20
 492:	f1 2c       	mov	r15, r1
 494:	ec 0e       	add	r14, r28
 496:	fd 1e       	adc	r15, r29
 498:	00 e0       	ldi	r16, 0x00	; 0
 49a:	10 e0       	ldi	r17, 0x00	; 0
 for(i=0;i<5;i++)
 {
  eye_mid[i]=(max[i]+min[i])/2;
 49c:	f7 01       	movw	r30, r14
 49e:	81 91       	ld	r24, Z+
 4a0:	91 91       	ld	r25, Z+
 4a2:	7f 01       	movw	r14, r30
 4a4:	f6 01       	movw	r30, r12
 4a6:	21 91       	ld	r18, Z+
 4a8:	31 91       	ld	r19, Z+
 4aa:	6f 01       	movw	r12, r30
 4ac:	82 0f       	add	r24, r18
 4ae:	93 1f       	adc	r25, r19
 4b0:	62 e0       	ldi	r22, 0x02	; 2
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__divmodhi4>
 4b8:	f8 01       	movw	r30, r16
 4ba:	ee 0f       	add	r30, r30
 4bc:	ff 1f       	adc	r31, r31
 4be:	ef 55       	subi	r30, 0x5F	; 95
 4c0:	ff 4f       	sbci	r31, 0xFF	; 255
 4c2:	71 83       	std	Z+1, r23	; 0x01
 4c4:	60 83       	st	Z, r22
 4c6:	0f 5f       	subi	r16, 0xFF	; 255
 4c8:	1f 4f       	sbci	r17, 0xFF	; 255
 max[2]=adcread(2); 
 max[3]=adcread(3); 
 max[4]=adcread(4); 
 lcd_cmd(0x01);
 lcd_puts("TEST ok");
 for(i=0;i<5;i++)
 4ca:	05 30       	cpi	r16, 0x05	; 5
 4cc:	11 05       	cpc	r17, r1
 4ce:	31 f7       	brne	.-52     	; 0x49c <__stack+0x3d>
 {
  eye_mid[i]=(max[i]+min[i])/2;
 }
 while(bit_is_set(PIND,0)); 
 4d0:	80 99       	sbic	0x10, 0	; 16
 4d2:	fe cf       	rjmp	.-4      	; 0x4d0 <__stack+0x71>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 4d4:	84 e0       	ldi	r24, 0x04	; 4
 4d6:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 4d8:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 4da:	84 e1       	ldi	r24, 0x14	; 20
 4dc:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 4de:	80 e1       	ldi	r24, 0x10	; 16
 4e0:	88 bb       	out	0x18, r24	; 24
 4e2:	80 e4       	ldi	r24, 0x40	; 64
 4e4:	9f e1       	ldi	r25, 0x1F	; 31
 4e6:	fc 01       	movw	r30, r24
 4e8:	31 97       	sbiw	r30, 0x01	; 1
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <__stack+0x89>
 lcd_cmd(0x01);
}
 4ec:	01 97       	sbiw	r24, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <__stack+0x8d>
 4f0:	64 96       	adiw	r28, 0x14	; 20
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	f8 94       	cli
 4f6:	de bf       	out	0x3e, r29	; 62
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	cd bf       	out	0x3d, r28	; 61
 4fc:	cf 91       	pop	r28
 4fe:	df 91       	pop	r29
 500:	1f 91       	pop	r17
 502:	0f 91       	pop	r16
 504:	ff 90       	pop	r15
 506:	ef 90       	pop	r14
 508:	df 90       	pop	r13
 50a:	cf 90       	pop	r12
 50c:	08 95       	ret

0000050e <store_eye>:
*/
volatile int eye_mid[5];
volatile unsigned char eyeval;
int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 50e:	80 e4       	ldi	r24, 0x40	; 64
 510:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 512:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 514:	86 b1       	in	r24, 0x06	; 6
 516:	87 64       	ori	r24, 0x47	; 71
 518:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 51a:	34 9b       	sbis	0x06, 4	; 6
 51c:	fe cf       	rjmp	.-4      	; 0x51a <store_eye+0xc>
 return ADC;
 51e:	24 b1       	in	r18, 0x04	; 4
 520:	35 b1       	in	r19, 0x05	; 5
 lcd_cmd(0x01);
}
void store_eye()
{ int t;
  t=adcread(0);
  eyeval=0;
 522:	10 92 a0 00 	sts	0x00A0, r1
  if(t>eye_mid[0])
 526:	80 91 a1 00 	lds	r24, 0x00A1
 52a:	90 91 a2 00 	lds	r25, 0x00A2
 52e:	82 17       	cp	r24, r18
 530:	93 07       	cpc	r25, r19
 532:	24 f4       	brge	.+8      	; 0x53c <store_eye+0x2e>
  {
   sbi(eyeval,1);
 534:	80 91 a0 00 	lds	r24, 0x00A0
 538:	82 60       	ori	r24, 0x02	; 2
 53a:	03 c0       	rjmp	.+6      	; 0x542 <store_eye+0x34>
  } 
  else
  {
   cbi(eyeval,1);
 53c:	80 91 a0 00 	lds	r24, 0x00A0
 540:	8d 7f       	andi	r24, 0xFD	; 253
 542:	80 93 a0 00 	sts	0x00A0, r24
*/
volatile int eye_mid[5];
volatile unsigned char eyeval;
int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 546:	81 e4       	ldi	r24, 0x41	; 65
 548:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 54a:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 54c:	86 b1       	in	r24, 0x06	; 6
 54e:	87 64       	ori	r24, 0x47	; 71
 550:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 552:	34 9b       	sbis	0x06, 4	; 6
 554:	fe cf       	rjmp	.-4      	; 0x552 <store_eye+0x44>
 return ADC;
 556:	24 b1       	in	r18, 0x04	; 4
 558:	35 b1       	in	r19, 0x05	; 5
  else
  {
   cbi(eyeval,1);
  }
  t=adcread(1);
  if(t>eye_mid[1])
 55a:	80 91 a3 00 	lds	r24, 0x00A3
 55e:	90 91 a4 00 	lds	r25, 0x00A4
 562:	82 17       	cp	r24, r18
 564:	93 07       	cpc	r25, r19
 566:	24 f4       	brge	.+8      	; 0x570 <store_eye+0x62>
  {
   sbi(eyeval,0);
 568:	80 91 a0 00 	lds	r24, 0x00A0
 56c:	81 60       	ori	r24, 0x01	; 1
 56e:	03 c0       	rjmp	.+6      	; 0x576 <store_eye+0x68>
  } 
  else
  {
   cbi(eyeval,0); 
 570:	80 91 a0 00 	lds	r24, 0x00A0
 574:	8e 7f       	andi	r24, 0xFE	; 254
 576:	80 93 a0 00 	sts	0x00A0, r24
*/
volatile int eye_mid[5];
volatile unsigned char eyeval;
int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 57a:	82 e4       	ldi	r24, 0x42	; 66
 57c:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 57e:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 580:	86 b1       	in	r24, 0x06	; 6
 582:	87 64       	ori	r24, 0x47	; 71
 584:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 586:	34 9b       	sbis	0x06, 4	; 6
 588:	fe cf       	rjmp	.-4      	; 0x586 <store_eye+0x78>
 return ADC;
 58a:	24 b1       	in	r18, 0x04	; 4
 58c:	35 b1       	in	r19, 0x05	; 5
  else
  {
   cbi(eyeval,0); 
  }
  t=adcread(2);
  if(t>eye_mid[2])
 58e:	80 91 a5 00 	lds	r24, 0x00A5
 592:	90 91 a6 00 	lds	r25, 0x00A6
 596:	82 17       	cp	r24, r18
 598:	93 07       	cpc	r25, r19
 59a:	24 f4       	brge	.+8      	; 0x5a4 <store_eye+0x96>
  {
   sbi(eyeval,2);
 59c:	80 91 a0 00 	lds	r24, 0x00A0
 5a0:	84 60       	ori	r24, 0x04	; 4
 5a2:	03 c0       	rjmp	.+6      	; 0x5aa <store_eye+0x9c>
  } 
  else
  {
   cbi(eyeval,2);
 5a4:	80 91 a0 00 	lds	r24, 0x00A0
 5a8:	8b 7f       	andi	r24, 0xFB	; 251
 5aa:	80 93 a0 00 	sts	0x00A0, r24
*/
volatile int eye_mid[5];
volatile unsigned char eyeval;
int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 5ae:	83 e4       	ldi	r24, 0x43	; 67
 5b0:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 5b2:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 5b4:	86 b1       	in	r24, 0x06	; 6
 5b6:	87 64       	ori	r24, 0x47	; 71
 5b8:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 5ba:	34 9b       	sbis	0x06, 4	; 6
 5bc:	fe cf       	rjmp	.-4      	; 0x5ba <store_eye+0xac>
 return ADC;
 5be:	24 b1       	in	r18, 0x04	; 4
 5c0:	35 b1       	in	r19, 0x05	; 5
  else
  {
   cbi(eyeval,2);
  }
  t=adcread(3);
  if(t>eye_mid[3])
 5c2:	80 91 a7 00 	lds	r24, 0x00A7
 5c6:	90 91 a8 00 	lds	r25, 0x00A8
 5ca:	82 17       	cp	r24, r18
 5cc:	93 07       	cpc	r25, r19
 5ce:	24 f4       	brge	.+8      	; 0x5d8 <store_eye+0xca>
  {
   sbi(eyeval,3);
 5d0:	80 91 a0 00 	lds	r24, 0x00A0
 5d4:	88 60       	ori	r24, 0x08	; 8
 5d6:	03 c0       	rjmp	.+6      	; 0x5de <store_eye+0xd0>
  } 
  else
  {
   cbi(eyeval,3);
 5d8:	80 91 a0 00 	lds	r24, 0x00A0
 5dc:	87 7f       	andi	r24, 0xF7	; 247
 5de:	80 93 a0 00 	sts	0x00A0, r24
*/
volatile int eye_mid[5];
volatile unsigned char eyeval;
int adcread(unsigned char channel)
{
 ADMUX=0x40|channel;
 5e2:	84 e4       	ldi	r24, 0x44	; 68
 5e4:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADEN);
 5e6:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 5e8:	86 b1       	in	r24, 0x06	; 6
 5ea:	87 64       	ori	r24, 0x47	; 71
 5ec:	86 b9       	out	0x06, r24	; 6
 while(!(ADCSRA&(1<<ADIF)));
 5ee:	34 9b       	sbis	0x06, 4	; 6
 5f0:	fe cf       	rjmp	.-4      	; 0x5ee <store_eye+0xe0>
 return ADC;
 5f2:	24 b1       	in	r18, 0x04	; 4
 5f4:	35 b1       	in	r19, 0x05	; 5
  else
  {
   cbi(eyeval,3);
  }
  t=adcread(4);
  if(t>eye_mid[4])
 5f6:	80 91 a9 00 	lds	r24, 0x00A9
 5fa:	90 91 aa 00 	lds	r25, 0x00AA
 5fe:	82 17       	cp	r24, r18
 600:	93 07       	cpc	r25, r19
 602:	24 f4       	brge	.+8      	; 0x60c <store_eye+0xfe>
  {
   sbi(eyeval,4);
 604:	80 91 a0 00 	lds	r24, 0x00A0
 608:	80 61       	ori	r24, 0x10	; 16
 60a:	03 c0       	rjmp	.+6      	; 0x612 <store_eye+0x104>
  } 
  else
  {
   cbi(eyeval,4);
 60c:	80 91 a0 00 	lds	r24, 0x00A0
 610:	8f 7e       	andi	r24, 0xEF	; 239
 612:	80 93 a0 00 	sts	0x00A0, r24
 616:	08 95       	ret

00000618 <main>:
  }

}
int main(void)
{  int count=0;
 618:	9f 92       	push	r9
 61a:	af 92       	push	r10
 61c:	bf 92       	push	r11
 61e:	cf 92       	push	r12
 620:	df 92       	push	r13
 622:	ef 92       	push	r14
 624:	ff 92       	push	r15
 626:	0f 93       	push	r16
 628:	1f 93       	push	r17
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
 unsigned char r,side;
 lcd_init();
 62e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_init>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 632:	94 e0       	ldi	r25, 0x04	; 4
 634:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 636:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 638:	84 ec       	ldi	r24, 0xC4	; 196
 63a:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 63c:	80 ec       	ldi	r24, 0xC0	; 192
 63e:	88 bb       	out	0x18, r24	; 24
 640:	20 e4       	ldi	r18, 0x40	; 64
 642:	3f e1       	ldi	r19, 0x1F	; 31
 644:	f9 01       	movw	r30, r18
 646:	31 97       	sbiw	r30, 0x01	; 1
 648:	f1 f7       	brne	.-4      	; 0x646 <main+0x2e>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 64a:	f9 01       	movw	r30, r18
 64c:	31 97       	sbiw	r30, 0x01	; 1
 64e:	f1 f7       	brne	.-4      	; 0x64c <main+0x34>
 650:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 652:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 654:	84 e1       	ldi	r24, 0x14	; 20
 656:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 658:	80 e1       	ldi	r24, 0x10	; 16
 65a:	88 bb       	out	0x18, r24	; 24
 65c:	c9 01       	movw	r24, r18
 65e:	01 97       	sbiw	r24, 0x01	; 1
 660:	f1 f7       	brne	.-4      	; 0x65e <main+0x46>
 lcd_cmd(0x0c);//display on curser off 
 lcd_cmd(0x01);//display on curser off 
 DDRA=0x00;//input
 662:	c9 01       	movw	r24, r18
 664:	01 97       	sbiw	r24, 0x01	; 1
 666:	f1 f7       	brne	.-4      	; 0x664 <main+0x4c>
 668:	1a ba       	out	0x1a, r1	; 26
 DDRC=0xFF;//output 
 66a:	8f ef       	ldi	r24, 0xFF	; 255
 66c:	84 bb       	out	0x14, r24	; 20
 DDRD=0x00;
 66e:	11 ba       	out	0x11, r1	; 17
 PORTD=0xFF;
 670:	82 bb       	out	0x12, r24	; 18
 PORTC=0x00;
 672:	15 ba       	out	0x15, r1	; 21
 gripper_init();
 674:	0e 94 33 01 	call	0x266	; 0x266 <gripper_init>
 eye_check();
 678:	0e 94 6f 01 	call	0x2de	; 0x2de <eye_check>
 67c:	c0 e0       	ldi	r28, 0x00	; 0
 67e:	d0 e0       	ldi	r29, 0x00	; 0
  }
  }
  else
  {do
   {
   PORTC=0xA0;
 680:	a0 ea       	ldi	r26, 0xA0	; 160
 682:	fa 2e       	mov	r15, r26
    PORTC=0x00;lcd_puts("yahoo");
	 while(bit_is_set(PIND,0)); 
    }
   if(count==7)
   {
     PORTC=0x20;
 684:	f0 e2       	ldi	r31, 0x20	; 32
 686:	df 2e       	mov	r13, r31
 688:	00 e9       	ldi	r16, 0x90	; 144
 68a:	11 e0       	ldi	r17, 0x01	; 1
	 lcd_cmd(1);count=0;
	PORTC=0xA0; 
   }*/
   if(count==6)
   {
    PORTC=0x05;
 68c:	e5 e0       	ldi	r30, 0x05	; 5
 68e:	9e 2e       	mov	r9, r30
   }while(side==0x11);
   
   count++;
   if(count==3)
   {
     PORTC=0x80;
 690:	70 e8       	ldi	r23, 0x80	; 128
 692:	e7 2e       	mov	r14, r23
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 694:	65 ed       	ldi	r22, 0xD5	; 213
 696:	c6 2e       	mov	r12, r22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 698:	50 ef       	ldi	r21, 0xF0	; 240
 69a:	a5 2e       	mov	r10, r21
 69c:	b1 2c       	mov	r11, r1
 PORTC=0x00;
 gripper_init();
 eye_check();
 while(1)
 {
  store_eye();
 69e:	0e 94 87 02 	call	0x50e	; 0x50e <store_eye>
  r=eyeval&0x0E;
 6a2:	90 91 a0 00 	lds	r25, 0x00A0
  side=eyeval&0x11;
 6a6:	80 91 a0 00 	lds	r24, 0x00A0
  if(side!=0x11)
 6aa:	81 71       	andi	r24, 0x11	; 17
 6ac:	81 31       	cpi	r24, 0x11	; 17
 6ae:	f9 f0       	breq	.+62     	; 0x6ee <main+0xd6>
  {
  switch(r)
 6b0:	89 2f       	mov	r24, r25
 6b2:	8e 70       	andi	r24, 0x0E	; 14
 6b4:	88 30       	cpi	r24, 0x08	; 8
 6b6:	c9 f0       	breq	.+50     	; 0x6ea <main+0xd2>
 6b8:	89 30       	cpi	r24, 0x09	; 9
 6ba:	28 f4       	brcc	.+10     	; 0x6c6 <main+0xae>
 6bc:	82 30       	cpi	r24, 0x02	; 2
 6be:	99 f0       	breq	.+38     	; 0x6e6 <main+0xce>
 6c0:	86 30       	cpi	r24, 0x06	; 6
 6c2:	69 f7       	brne	.-38     	; 0x69e <main+0x86>
 6c4:	05 c0       	rjmp	.+10     	; 0x6d0 <main+0xb8>
 6c6:	8c 30       	cpi	r24, 0x0C	; 12
 6c8:	29 f0       	breq	.+10     	; 0x6d4 <main+0xbc>
 6ca:	8e 30       	cpi	r24, 0x0E	; 14
 6cc:	41 f7       	brne	.-48     	; 0x69e <main+0x86>
 6ce:	59 c0       	rjmp	.+178    	; 0x782 <main+0x16a>
  {
   case 0x0E:PORTC=0xA0;break;
   case 0x06:PORTC=0x80;_delay_us(40);PORTC=0xA0;_delay_us(60);break;
 6d0:	e5 ba       	out	0x15, r14	; 21
 6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <main+0xbe>
   case 0x0C:PORTC=0x20;_delay_us(40);PORTC=0xA0;_delay_us(60);break;
 6d4:	d5 ba       	out	0x15, r13	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 6d6:	8c 2d       	mov	r24, r12
 6d8:	8a 95       	dec	r24
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <main+0xc0>
 6dc:	f5 ba       	out	0x15, r15	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6de:	c5 01       	movw	r24, r10
 6e0:	01 97       	sbiw	r24, 0x01	; 1
 6e2:	f1 f7       	brne	.-4      	; 0x6e0 <main+0xc8>
 6e4:	dc cf       	rjmp	.-72     	; 0x69e <main+0x86>
   case 0x02:PORTC=0x80;break;
 6e6:	e5 ba       	out	0x15, r14	; 21
 6e8:	da cf       	rjmp	.-76     	; 0x69e <main+0x86>
   case 0x08:PORTC=0x20;break;    
 6ea:	d5 ba       	out	0x15, r13	; 21
 6ec:	d8 cf       	rjmp	.-80     	; 0x69e <main+0x86>
  }
  }
  else
  {do
   {
   PORTC=0xA0;
 6ee:	f5 ba       	out	0x15, r15	; 21
    store_eye();
 6f0:	0e 94 87 02 	call	0x50e	; 0x50e <store_eye>
  r=eyeval&0x0E;
 6f4:	80 91 a0 00 	lds	r24, 0x00A0
  side=eyeval&0x11;
 6f8:	80 91 a0 00 	lds	r24, 0x00A0
   }while(side==0x11);
 6fc:	81 71       	andi	r24, 0x11	; 17
 6fe:	81 31       	cpi	r24, 0x11	; 17
 700:	b1 f3       	breq	.-20     	; 0x6ee <main+0xd6>
   
   count++;
 702:	21 96       	adiw	r28, 0x01	; 1
   if(count==3)
 704:	c3 30       	cpi	r28, 0x03	; 3
 706:	d1 05       	cpc	r29, r1
 708:	89 f4       	brne	.+34     	; 0x72c <main+0x114>
   {
     PORTC=0x80;
 70a:	e5 ba       	out	0x15, r14	; 21
 70c:	88 e9       	ldi	r24, 0x98	; 152
 70e:	9a e3       	ldi	r25, 0x3A	; 58
 710:	f8 01       	movw	r30, r16
 712:	31 97       	sbiw	r30, 0x01	; 1
 714:	f1 f7       	brne	.-4      	; 0x712 <main+0xfa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 716:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 718:	d9 f7       	brne	.-10     	; 0x710 <main+0xf8>
	 _delay_ms(1500);
	 PORTC=0x00;
 71a:	15 ba       	out	0x15, r1	; 21
 71c:	80 e1       	ldi	r24, 0x10	; 16
 71e:	97 e2       	ldi	r25, 0x27	; 39
 720:	f8 01       	movw	r30, r16
 722:	31 97       	sbiw	r30, 0x01	; 1
 724:	f1 f7       	brne	.-4      	; 0x722 <main+0x10a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 726:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 728:	d9 f7       	brne	.-10     	; 0x720 <main+0x108>
 72a:	2b c0       	rjmp	.+86     	; 0x782 <main+0x16a>
    PORTC=0x00;lcd_puts("yahoo");
	 while(bit_is_set(PIND,0)); 
	 lcd_cmd(1);count=0;
	PORTC=0xA0; 
   }*/
   if(count==6)
 72c:	c6 30       	cpi	r28, 0x06	; 6
 72e:	d1 05       	cpc	r29, r1
 730:	49 f4       	brne	.+18     	; 0x744 <main+0x12c>
   {
    PORTC=0x05;
 732:	95 ba       	out	0x15, r9	; 21
 734:	80 ed       	ldi	r24, 0xD0	; 208
 736:	97 e0       	ldi	r25, 0x07	; 7
 738:	f8 01       	movw	r30, r16
 73a:	31 97       	sbiw	r30, 0x01	; 1
 73c:	f1 f7       	brne	.-4      	; 0x73a <main+0x122>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 73e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 740:	d9 f7       	brne	.-10     	; 0x738 <main+0x120>
 742:	1f c0       	rjmp	.+62     	; 0x782 <main+0x16a>
    _delay_ms(200);
   PORTC=0xA0;  
   }
   if(count==9)
 744:	c9 30       	cpi	r28, 0x09	; 9
 746:	d1 05       	cpc	r29, r1
 748:	41 f4       	brne	.+16     	; 0x75a <main+0x142>
   {
    PORTC=0x00;lcd_puts("yahoo");
 74a:	15 ba       	out	0x15, r1	; 21
 74c:	8a e9       	ldi	r24, 0x9A	; 154
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_puts>
	 while(bit_is_set(PIND,0)); 
 754:	80 99       	sbic	0x10, 0	; 16
 756:	fe cf       	rjmp	.-4      	; 0x754 <main+0x13c>
 758:	a2 cf       	rjmp	.-188    	; 0x69e <main+0x86>
    }
   if(count==7)
 75a:	c7 30       	cpi	r28, 0x07	; 7
 75c:	d1 05       	cpc	r29, r1
 75e:	09 f0       	breq	.+2      	; 0x762 <main+0x14a>
 760:	9e cf       	rjmp	.-196    	; 0x69e <main+0x86>
   {
     PORTC=0x20;
 762:	d5 ba       	out	0x15, r13	; 21
 764:	88 e9       	ldi	r24, 0x98	; 152
 766:	9a e3       	ldi	r25, 0x3A	; 58
 768:	f8 01       	movw	r30, r16
 76a:	31 97       	sbiw	r30, 0x01	; 1
 76c:	f1 f7       	brne	.-4      	; 0x76a <main+0x152>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 76e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 770:	d9 f7       	brne	.-10     	; 0x768 <main+0x150>
	 _delay_ms(1500);
	 PORTC=0x00;
 772:	15 ba       	out	0x15, r1	; 21
 774:	80 e1       	ldi	r24, 0x10	; 16
 776:	97 e2       	ldi	r25, 0x27	; 39
 778:	f8 01       	movw	r30, r16
 77a:	31 97       	sbiw	r30, 0x01	; 1
 77c:	f1 f7       	brne	.-4      	; 0x77a <main+0x162>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 77e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 780:	d9 f7       	brne	.-10     	; 0x778 <main+0x160>
	 _delay_ms(1000);
	PORTC=0xA0; 
 782:	f5 ba       	out	0x15, r15	; 21
 784:	8c cf       	rjmp	.-232    	; 0x69e <main+0x86>

00000786 <__udivmodhi4>:
 786:	aa 1b       	sub	r26, r26
 788:	bb 1b       	sub	r27, r27
 78a:	51 e1       	ldi	r21, 0x11	; 17
 78c:	07 c0       	rjmp	.+14     	; 0x79c <__udivmodhi4_ep>

0000078e <__udivmodhi4_loop>:
 78e:	aa 1f       	adc	r26, r26
 790:	bb 1f       	adc	r27, r27
 792:	a6 17       	cp	r26, r22
 794:	b7 07       	cpc	r27, r23
 796:	10 f0       	brcs	.+4      	; 0x79c <__udivmodhi4_ep>
 798:	a6 1b       	sub	r26, r22
 79a:	b7 0b       	sbc	r27, r23

0000079c <__udivmodhi4_ep>:
 79c:	88 1f       	adc	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	5a 95       	dec	r21
 7a2:	a9 f7       	brne	.-22     	; 0x78e <__udivmodhi4_loop>
 7a4:	80 95       	com	r24
 7a6:	90 95       	com	r25
 7a8:	bc 01       	movw	r22, r24
 7aa:	cd 01       	movw	r24, r26
 7ac:	08 95       	ret

000007ae <__divmodhi4>:
 7ae:	97 fb       	bst	r25, 7
 7b0:	09 2e       	mov	r0, r25
 7b2:	07 26       	eor	r0, r23
 7b4:	0a d0       	rcall	.+20     	; 0x7ca <__divmodhi4_neg1>
 7b6:	77 fd       	sbrc	r23, 7
 7b8:	04 d0       	rcall	.+8      	; 0x7c2 <__divmodhi4_neg2>
 7ba:	e5 df       	rcall	.-54     	; 0x786 <__udivmodhi4>
 7bc:	06 d0       	rcall	.+12     	; 0x7ca <__divmodhi4_neg1>
 7be:	00 20       	and	r0, r0
 7c0:	1a f4       	brpl	.+6      	; 0x7c8 <__divmodhi4_exit>

000007c2 <__divmodhi4_neg2>:
 7c2:	70 95       	com	r23
 7c4:	61 95       	neg	r22
 7c6:	7f 4f       	sbci	r23, 0xFF	; 255

000007c8 <__divmodhi4_exit>:
 7c8:	08 95       	ret

000007ca <__divmodhi4_neg1>:
 7ca:	f6 f7       	brtc	.-4      	; 0x7c8 <__divmodhi4_exit>
 7cc:	90 95       	com	r25
 7ce:	81 95       	neg	r24
 7d0:	9f 4f       	sbci	r25, 0xFF	; 255
 7d2:	08 95       	ret

000007d4 <_exit>:
 7d4:	f8 94       	cli

000007d6 <__stop_program>:
 7d6:	ff cf       	rjmp	.-2      	; 0x7d6 <__stop_program>
