
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000092  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000106  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000071  00000000  00000000  00000121  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000003d  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000a3  00000000  00000000  000001cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008e  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 47 00 	jmp	0x8e	; 0x8e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



void main()
{
 DDRC=0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
 DDRD=0x00;
  70:	11 ba       	out	0x11, r1	; 17
 PORTD=0x03;
  72:	83 e0       	ldi	r24, 0x03	; 3
  74:	82 bb       	out	0x12, r24	; 18
 while(1)
 {
  if(bit_is_clear(PIND,0))
  {
    PORTC=0x80;
  76:	90 e8       	ldi	r25, 0x80	; 128
  
  }
  else if(bit_is_clear(PIND,1))
  {
   PORTC=0x40;
  78:	80 e4       	ldi	r24, 0x40	; 64
 DDRC=0xFF;
 DDRD=0x00;
 PORTD=0x03;
 while(1)
 {
  if(bit_is_clear(PIND,0))
  7a:	80 99       	sbic	0x10, 0	; 16
  7c:	02 c0       	rjmp	.+4      	; 0x82 <main+0x16>
  {
    PORTC=0x80;
  7e:	95 bb       	out	0x15, r25	; 21
  80:	fc cf       	rjmp	.-8      	; 0x7a <main+0xe>
  
  }
  else if(bit_is_clear(PIND,1))
  82:	81 99       	sbic	0x10, 1	; 16
  84:	02 c0       	rjmp	.+4      	; 0x8a <main+0x1e>
  {
   PORTC=0x40;
  86:	85 bb       	out	0x15, r24	; 21
  88:	f8 cf       	rjmp	.-16     	; 0x7a <main+0xe>
  
  }
  else
  {
   PORTC=0x00;
  8a:	15 ba       	out	0x15, r1	; 21
  8c:	f6 cf       	rjmp	.-20     	; 0x7a <main+0xe>

0000008e <_exit>:
  8e:	f8 94       	cli

00000090 <__stop_program>:
  90:	ff cf       	rjmp	.-2      	; 0x90 <__stop_program>
