
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000076  00000000  00000000  00000145  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000041  00000000  00000000  000001bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000b3  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008e  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void) {

//Port D pins as input

DDRD=0xF0;
  6c:	80 ef       	ldi	r24, 0xF0	; 240
  6e:	81 bb       	out	0x11, r24	; 17

//Enable internal pull ups

PORTD=0x0F;
  70:	8f e0       	ldi	r24, 0x0F	; 15
  72:	82 bb       	out	0x12, r24	; 18

//Set PORTB1 pin as output

DDRB=0xFF;
  74:	8f ef       	ldi	r24, 0xFF	; 255
  76:	87 bb       	out	0x17, r24	; 23

//Fast PWM

//ICR1=20000 defines 50Hz PWM

ICR1=20000;
  78:	80 e2       	ldi	r24, 0x20	; 32
  7a:	9e e4       	ldi	r25, 0x4E	; 78
  7c:	97 bd       	out	0x27, r25	; 39
  7e:	86 bd       	out	0x26, r24	; 38

TCCR1A|=(0<<COM1A0)|(1<<COM1A1)|(0<<COM1B0)|(0<<COM1B1)|
  80:	8f b5       	in	r24, 0x2f	; 47
  82:	82 68       	ori	r24, 0x82	; 130
  84:	8f bd       	out	0x2f, r24	; 47

(0<<FOC1A)|(0<<FOC1B)|(1<<WGM11)|(0<<WGM10);

TCCR1B|=(0<<ICNC1)|(0<<ICES1)|(1<<WGM13)|(1<<WGM12)|
  86:	8e b5       	in	r24, 0x2e	; 46
  88:	8a 61       	ori	r24, 0x1A	; 26
  8a:	8e bd       	out	0x2e, r24	; 46

//start timer with prescaler 8

for (;;) {

if(bit_is_clear(PIND, 1)){
  8c:	81 99       	sbic	0x10, 1	; 16
  8e:	07 c0       	rjmp	.+14     	; 0x9e <main+0x32>

//increase duty cycle

OCR1A+=10;
  90:	8a b5       	in	r24, 0x2a	; 42
  92:	9b b5       	in	r25, 0x2b	; 43
  94:	0a 96       	adiw	r24, 0x0a	; 10
  96:	9b bd       	out	0x2b, r25	; 43
  98:	8a bd       	out	0x2a, r24	; 42

loop_until_bit_is_set(PIND, 1);
  9a:	81 9b       	sbis	0x10, 1	; 16
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x2e>

}

if(bit_is_clear(PIND, 2)) {
  9e:	82 99       	sbic	0x10, 2	; 16
  a0:	f5 cf       	rjmp	.-22     	; 0x8c <main+0x20>

//decease duty cycle

OCR1A-=10;
  a2:	8a b5       	in	r24, 0x2a	; 42
  a4:	9b b5       	in	r25, 0x2b	; 43
  a6:	0a 97       	sbiw	r24, 0x0a	; 10
  a8:	9b bd       	out	0x2b, r25	; 43
  aa:	8a bd       	out	0x2a, r24	; 42

loop_until_bit_is_set(PIND, 2);
  ac:	82 9b       	sbis	0x10, 2	; 16
  ae:	fe cf       	rjmp	.-4      	; 0xac <main+0x40>
  b0:	ed cf       	rjmp	.-38     	; 0x8c <main+0x20>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
