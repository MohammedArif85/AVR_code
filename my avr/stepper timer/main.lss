
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000176  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  0000020c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000047  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000200  00000000  00000000  00000273  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000013b  00000000  00000000  00000473  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001be  00000000  00000000  000005ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  0000076c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000116  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003b  00000000  00000000  000008b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000008ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_9>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000054 <fulln>:
  54:	88 22 44 11                                         ."D.

00000058 <fulld>:
  58:	aa 66 55 99                                         .fU.

0000005c <half>:
  5c:	88 aa 22 66 44 55 11 99                             .."fDU..

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d4 e0       	ldi	r29, 0x04	; 4
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e6 e7       	ldi	r30, 0x76	; 118
  78:	f1 e0       	ldi	r31, 0x01	; 1
  7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>

00000086 <__do_clear_bss>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	a2 e6       	ldi	r26, 0x62	; 98
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a4 36       	cpi	r26, 0x64	; 100
  92:	b1 07       	cpc	r27, r17
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  9a:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <__vector_9>:
 const unsigned char half[8]PROGMEM={0x88,0xAA,0x22,0x66,0x44,0x55,0x11,0x99};
 static volatile int speed=10;
 static volatile uint8_t d=0,c=0;
 //volatile unsigned char fulld[4]={0xA0,0x60,0x50,0x90};
ISR(TIMER0_OVF_vect)
{
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	2f 93       	push	r18
  ae:	3f 93       	push	r19
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
 
 c++;
  b8:	80 91 62 00 	lds	r24, 0x0062
  bc:	8f 5f       	subi	r24, 0xFF	; 255
  be:	80 93 62 00 	sts	0x0062, r24
 if(c==speed)
  c2:	80 91 62 00 	lds	r24, 0x0062
  c6:	20 91 60 00 	lds	r18, 0x0060
  ca:	30 91 61 00 	lds	r19, 0x0061
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	82 17       	cp	r24, r18
  d2:	93 07       	cpc	r25, r19
  d4:	b1 f4       	brne	.+44     	; 0x102 <__vector_9+0x60>
 {
  PORTA=PORTC=pgm_read_byte(&half[d]);
  d6:	e0 91 63 00 	lds	r30, 0x0063
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	e4 5a       	subi	r30, 0xA4	; 164
  de:	ff 4f       	sbci	r31, 0xFF	; 255
  e0:	e4 91       	lpm	r30, Z+
  e2:	e5 bb       	out	0x15, r30	; 21
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	8b bb       	out	0x1b, r24	; 27
  d++;
  e8:	80 91 63 00 	lds	r24, 0x0063
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	80 93 63 00 	sts	0x0063, r24
  if(d>7)
  f2:	80 91 63 00 	lds	r24, 0x0063
  f6:	88 30       	cpi	r24, 0x08	; 8
  f8:	10 f0       	brcs	.+4      	; 0xfe <__vector_9+0x5c>
  {
   d=0;
  fa:	10 92 63 00 	sts	0x0063, r1
   
  }
 
  c=0;
  fe:	10 92 62 00 	sts	0x0062, r1
 }
 
}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <main>:



int main(void)
{
 DDRA=0xF0;
 118:	80 ef       	ldi	r24, 0xF0	; 240
 11a:	8a bb       	out	0x1a, r24	; 26
 DDRC=0xFF;
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	84 bb       	out	0x14, r24	; 20
 PORTA=0x00;
 120:	1b ba       	out	0x1b, r1	; 27
 PORTC=0x00;
 122:	15 ba       	out	0x15, r1	; 21
  
 TCNT0=0x00;
 124:	12 be       	out	0x32, r1	; 50
 TCCR0=_BV(CS01)|_BV(CS00);
 126:	83 e0       	ldi	r24, 0x03	; 3
 128:	83 bf       	out	0x33, r24	; 51
 cli();
 12a:	f8 94       	cli
 TIMSK=_BV(TOIE0);
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	89 bf       	out	0x39, r24	; 57
 sei();
 130:	78 94       	sei
 while(1)
 {
   speed--;
   if(speed<1)
    speed=10;
 132:	4a e0       	ldi	r20, 0x0A	; 10
 134:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 136:	20 e9       	ldi	r18, 0x90	; 144
 138:	31 e0       	ldi	r19, 0x01	; 1
 cli();
 TIMSK=_BV(TOIE0);
 sei();
 while(1)
 {
   speed--;
 13a:	80 91 60 00 	lds	r24, 0x0060
 13e:	90 91 61 00 	lds	r25, 0x0061
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	90 93 61 00 	sts	0x0061, r25
 148:	80 93 60 00 	sts	0x0060, r24
   if(speed<1)
 14c:	80 91 60 00 	lds	r24, 0x0060
 150:	90 91 61 00 	lds	r25, 0x0061
 154:	18 16       	cp	r1, r24
 156:	19 06       	cpc	r1, r25
 158:	24 f0       	brlt	.+8      	; 0x162 <main+0x4a>
    speed=10;
 15a:	50 93 61 00 	sts	0x0061, r21
 15e:	40 93 60 00 	sts	0x0060, r20
 162:	88 e8       	ldi	r24, 0x88	; 136
 164:	93 e1       	ldi	r25, 0x13	; 19
 166:	f9 01       	movw	r30, r18
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <main+0x50>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 16c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16e:	29 f3       	breq	.-54     	; 0x13a <main+0x22>
 170:	fa cf       	rjmp	.-12     	; 0x166 <main+0x4e>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
