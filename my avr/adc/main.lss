
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000023  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000169  00000000  00000000  00000189  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ed  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001ed  00000000  00000000  000003df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000cf  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000053  00000000  00000000  000006cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <adc>:
#include<avr/io.h>
#include<util/delay.h>
#include<compat/deprecated.h>
unsigned int adc(unsigned char channel)
{  unsigned int val;
   ADMUX=0x40+channel;
  6c:	80 5c       	subi	r24, 0xC0	; 192
  6e:	87 b9       	out	0x07, r24	; 7
   ADCSRA=(1<<ADEN);
  70:	80 e8       	ldi	r24, 0x80	; 128
  72:	86 b9       	out	0x06, r24	; 6
   ADCSRA|=(1<<ADSC);
  74:	36 9a       	sbi	0x06, 6	; 6
    ADCSRA|=0x07;
  76:	86 b1       	in	r24, 0x06	; 6
  78:	87 60       	ori	r24, 0x07	; 7
  7a:	86 b9       	out	0x06, r24	; 6
   while(bit_is_clear(ADCSRA,ADIF));
  7c:	34 9b       	sbis	0x06, 4	; 6
  7e:	fe cf       	rjmp	.-4      	; 0x7c <adc+0x10>
   val=ADCW; 
  80:	44 b1       	in	r20, 0x04	; 4
  82:	55 b1       	in	r21, 0x05	; 5
  84:	28 ee       	ldi	r18, 0xE8	; 232
  86:	33 e0       	ldi	r19, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  88:	80 e9       	ldi	r24, 0x90	; 144
  8a:	91 e0       	ldi	r25, 0x01	; 1
  8c:	fc 01       	movw	r30, r24
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <adc+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  92:	21 50       	subi	r18, 0x01	; 1
  94:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  96:	d1 f7       	brne	.-12     	; 0x8c <adc+0x20>
   _delay_ms(100);
   return val;
}
  98:	ca 01       	movw	r24, r20
  9a:	08 95       	ret

0000009c <main>:

int main(void)
{
 unsigned int val;
DDRA=0xF0;
  9c:	80 ef       	ldi	r24, 0xF0	; 240
  9e:	8a bb       	out	0x1a, r24	; 26
DDRB=0xFF;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	87 bb       	out	0x17, r24	; 23
PORTB=0xFF;
  a4:	88 bb       	out	0x18, r24	; 24
PORTA=0x00;
  a6:	1b ba       	out	0x1b, r1	; 27

 while(1)
 {  
   val=adc(1);
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	0e 94 36 00 	call	0x6c	; 0x6c <adc>
   
   if(val<512)
  ae:	22 e0       	ldi	r18, 0x02	; 2
  b0:	80 30       	cpi	r24, 0x00	; 0
  b2:	92 07       	cpc	r25, r18
  b4:	18 f4       	brcc	.+6      	; 0xbc <main+0x20>
   {
   sbi(PORTA,4);
  b6:	dc 9a       	sbi	0x1b, 4	; 27
    cbi(PORTA,5);
  b8:	dd 98       	cbi	0x1b, 5	; 27
  ba:	06 c0       	rjmp	.+12     	; 0xc8 <main+0x2c>
    cbi(PORTA,6);
    cbi(PORTA,7);
   }
   else if(val<600)
  bc:	22 e0       	ldi	r18, 0x02	; 2
  be:	88 35       	cpi	r24, 0x58	; 88
  c0:	92 07       	cpc	r25, r18
  c2:	20 f4       	brcc	.+8      	; 0xcc <main+0x30>
   {
   sbi(PORTA,5);
  c4:	dd 9a       	sbi	0x1b, 5	; 27
    cbi(PORTA,4);
  c6:	dc 98       	cbi	0x1b, 4	; 27
    cbi(PORTA,6);
  c8:	de 98       	cbi	0x1b, 6	; 27
  ca:	07 c0       	rjmp	.+14     	; 0xda <main+0x3e>
    cbi(PORTA,7);
   }
   else if(val<700)
  cc:	22 e0       	ldi	r18, 0x02	; 2
  ce:	8c 3b       	cpi	r24, 0xBC	; 188
  d0:	92 07       	cpc	r25, r18
  d2:	28 f4       	brcc	.+10     	; 0xde <main+0x42>
   {
   sbi(PORTA,6); cbi(PORTA,5);
  d4:	de 9a       	sbi	0x1b, 6	; 27
  d6:	dd 98       	cbi	0x1b, 5	; 27
    cbi(PORTA,4);
  d8:	dc 98       	cbi	0x1b, 4	; 27
    cbi(PORTA,7);
  da:	df 98       	cbi	0x1b, 7	; 27
  dc:	e5 cf       	rjmp	.-54     	; 0xa8 <main+0xc>
   }
   else if(val<1000)
  de:	88 5e       	subi	r24, 0xE8	; 232
  e0:	93 40       	sbci	r25, 0x03	; 3
  e2:	10 f7       	brcc	.-60     	; 0xa8 <main+0xc>
   {
   sbi(PORTA,7);
  e4:	df 9a       	sbi	0x1b, 7	; 27
    cbi(PORTA,5);
  e6:	dd 98       	cbi	0x1b, 5	; 27
    cbi(PORTA,6);
  e8:	de 98       	cbi	0x1b, 6	; 27
    cbi(PORTA,4);
  ea:	dc 98       	cbi	0x1b, 4	; 27
  ec:	dd cf       	rjmp	.-70     	; 0xa8 <main+0xc>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
