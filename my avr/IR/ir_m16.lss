
ir_m16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000005fc  00000690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800062  00800062  00000692  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000692  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000ec  00000000  00000000  000006b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002da  00000000  00000000  0000079e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000171  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044d  00000000  00000000  00000be9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001038  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000128  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bb  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000128b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 53 02 	call	0x4a6	; 0x4a6 <main>
  8a:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <RemoteInit>:
void RemoteInit()
{

	
	char i;
	for(i=0;i<4;i++) IrData[i]=0;
  92:	10 92 66 00 	sts	0x0066, r1
  96:	10 92 67 00 	sts	0x0067, r1
  9a:	10 92 68 00 	sts	0x0068, r1
  9e:	10 92 69 00 	sts	0x0069, r1

	stop=0;
  a2:	10 92 78 00 	sts	0x0078, r1
  a6:	10 92 77 00 	sts	0x0077, r1
	State=IR_VALIDATE_LEAD_HIGH;
  aa:	10 92 6a 00 	sts	0x006A, r1
	Edge=0;
  ae:	10 92 64 00 	sts	0x0064, r1
	Repeat=0;
  b2:	10 92 62 00 	sts	0x0062, r1

	//Setup Timer1
	//------------
	TCCR0|=((1<<CS00)|(1<<WGM01));	//Prescaler : Fcpu   Mode : CTC
  b6:	83 b7       	in	r24, 0x33	; 51
  b8:	89 60       	ori	r24, 0x09	; 9
  ba:	83 bf       	out	0x33, r24	; 51

	TIMSK|=(1<<OCIE0);	//Enable Output Compare Interrupt
  bc:	89 b7       	in	r24, 0x39	; 57
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	89 bf       	out	0x39, r24	; 57

	OCR0=TIMER_COMP_VAL;			//Set Compare Value
  c2:	80 ea       	ldi	r24, 0xA0	; 160
  c4:	8c bf       	out	0x3c, r24	; 60

	//Set Up INT1
	//------------
	MCUCR|=(1<<ISC01);	//INT ON Falling Edge
  c6:	85 b7       	in	r24, 0x35	; 53
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	85 bf       	out	0x35, r24	; 53

	GICR|=(1<<INT0);	//Enable INT0
  cc:	8b b7       	in	r24, 0x3b	; 59
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	8b bf       	out	0x3b, r24	; 59

	//Enable Interrupts
	//-------------------

	SREG|=(1<<7);
  d2:	8f b7       	in	r24, 0x3f	; 63
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	8f bf       	out	0x3f, r24	; 63
}	
  d8:	08 95       	ret

000000da <__vector_19>:

ISR(TIMER0_COMP_vect)
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
	Time++;
  e8:	80 91 74 00 	lds	r24, 0x0074
  ec:	90 91 75 00 	lds	r25, 0x0075
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	90 93 75 00 	sts	0x0075, r25
  f6:	80 93 74 00 	sts	0x0074, r24
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_1>:
ISR(INT0_vect)
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	df 92       	push	r13
 114:	ef 92       	push	r14
 116:	ff 92       	push	r15
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	2f 93       	push	r18
 11e:	3f 93       	push	r19
 120:	4f 93       	push	r20
 122:	5f 93       	push	r21
 124:	6f 93       	push	r22
 126:	7f 93       	push	r23
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	af 93       	push	r26
 12e:	bf 93       	push	r27
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
	GICR&=(~(1<<INT0));	//Disable INT1
 138:	8b b7       	in	r24, 0x3b	; 59
 13a:	8f 7b       	andi	r24, 0xBF	; 191
 13c:	8b bf       	out	0x3b, r24	; 59
	sei();
 13e:	78 94       	sei
	
	if(stop) return;
 140:	80 91 77 00 	lds	r24, 0x0077
 144:	90 91 78 00 	lds	r25, 0x0078
 148:	89 2b       	or	r24, r25
 14a:	09 f0       	breq	.+2      	; 0x14e <__vector_1+0x46>
 14c:	5f c1       	rjmp	.+702    	; 0x40c <__vector_1+0x304>
	unsigned int TempTime=Time;
 14e:	c0 91 74 00 	lds	r28, 0x0074
 152:	d0 91 75 00 	lds	r29, 0x0075
	Time=0;
 156:	10 92 75 00 	sts	0x0075, r1
 15a:	10 92 74 00 	sts	0x0074, r1
	TCNT0=0;
 15e:	12 be       	out	0x32, r1	; 50
	switch(State)
 160:	d0 90 6a 00 	lds	r13, 0x006A
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	d8 16       	cp	r13, r24
 168:	71 f1       	breq	.+92     	; 0x1c6 <__vector_1+0xbe>
 16a:	d8 16       	cp	r13, r24
 16c:	48 f0       	brcs	.+18     	; 0x180 <__vector_1+0x78>
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	d8 16       	cp	r13, r24
 172:	09 f4       	brne	.+2      	; 0x176 <__vector_1+0x6e>
 174:	99 c0       	rjmp	.+306    	; 0x2a8 <__vector_1+0x1a0>
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	d8 16       	cp	r13, r24
 17a:	09 f0       	breq	.+2      	; 0x17e <__vector_1+0x76>
 17c:	44 c1       	rjmp	.+648    	; 0x406 <__vector_1+0x2fe>
 17e:	e9 c0       	rjmp	.+466    	; 0x352 <__vector_1+0x24a>
	{
	case IR_VALIDATE_LEAD_HIGH:
	{
			if(Edge)
 180:	80 91 64 00 	lds	r24, 0x0064
 184:	88 23       	and	r24, r24
 186:	09 f4       	brne	.+2      	; 0x18a <__vector_1+0x82>
 188:	dd c0       	rjmp	.+442    	; 0x344 <__vector_1+0x23c>
			{
				//Rising
				if((TempTime>(900-(900*TOL))) && (TempTime<(900+(900*TOL))))
 18a:	be 01       	movw	r22, r28
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 97 02 	call	0x52e	; 0x52e <__floatunsisf>
 194:	7b 01       	movw	r14, r22
 196:	8c 01       	movw	r16, r24
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 e8       	ldi	r19, 0x80	; 128
 19c:	4a e4       	ldi	r20, 0x4A	; 74
 19e:	54 e4       	ldi	r21, 0x44	; 68
 1a0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__gesf2>
 1a4:	18 16       	cp	r1, r24
 1a6:	0c f0       	brlt	.+2      	; 0x1aa <__vector_1+0xa2>
 1a8:	1c c1       	rjmp	.+568    	; 0x3e2 <__vector_1+0x2da>
 1aa:	c8 01       	movw	r24, r16
 1ac:	b7 01       	movw	r22, r14
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e8       	ldi	r19, 0x80	; 128
 1b2:	47 e7       	ldi	r20, 0x77	; 119
 1b4:	54 e4       	ldi	r21, 0x44	; 68
 1b6:	0e 94 93 02 	call	0x526	; 0x526 <__cmpsf2>
 1ba:	87 ff       	sbrs	r24, 7
 1bc:	12 c1       	rjmp	.+548    	; 0x3e2 <__vector_1+0x2da>
				{

					//Lead High Correct
					State=IR_VALIDATE_LEAD_LOW;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 6a 00 	sts	0x006A, r24
 1c4:	18 c1       	rjmp	.+560    	; 0x3f6 <__vector_1+0x2ee>
			}
		break;
	}
	case IR_VALIDATE_LEAD_LOW:
	{
		if((TempTime>(450-(450*TOL))) && (TempTime<(450+(450*TOL))))
 1c6:	be 01       	movw	r22, r28
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 97 02 	call	0x52e	; 0x52e <__floatunsisf>
 1d0:	7b 01       	movw	r14, r22
 1d2:	8c 01       	movw	r16, r24
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e8       	ldi	r19, 0x80	; 128
 1d8:	4a ec       	ldi	r20, 0xCA	; 202
 1da:	53 e4       	ldi	r21, 0x43	; 67
 1dc:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__gesf2>
 1e0:	18 16       	cp	r1, r24
 1e2:	bc f4       	brge	.+46     	; 0x212 <__vector_1+0x10a>
 1e4:	c8 01       	movw	r24, r16
 1e6:	b7 01       	movw	r22, r14
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e8       	ldi	r19, 0x80	; 128
 1ec:	47 ef       	ldi	r20, 0xF7	; 247
 1ee:	53 e4       	ldi	r21, 0x43	; 67
 1f0:	0e 94 93 02 	call	0x526	; 0x526 <__cmpsf2>
 1f4:	88 23       	and	r24, r24
 1f6:	6c f4       	brge	.+26     	; 0x212 <__vector_1+0x10a>
		{
		//Got a valid leader
		State=IR_RECEIVE_BITS;
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	80 93 6a 00 	sts	0x006A, r24
		BitNo=0;
 1fe:	10 92 65 00 	sts	0x0065, r1
		ByteNo=0;
 202:	10 92 63 00 	sts	0x0063, r1
		MCUCR|=((1<<ISC01)|(1<<ISC00));	//Set INT on Rising Edge
 206:	85 b7       	in	r24, 0x35	; 53
 208:	83 60       	ori	r24, 0x03	; 3
 20a:	85 bf       	out	0x35, r24	; 53
		Edge=1;
 20c:	d0 92 64 00 	sts	0x0064, r13
 210:	fa c0       	rjmp	.+500    	; 0x406 <__vector_1+0x2fe>

		
		}
		else if((TempTime>200) && (TempTime<245))
 212:	c9 5c       	subi	r28, 0xC9	; 201
 214:	d0 40       	sbci	r29, 0x00	; 0
 216:	ac 97       	sbiw	r28, 0x2c	; 44
 218:	08 f0       	brcs	.+2      	; 0x21c <__vector_1+0x114>
 21a:	e3 c0       	rjmp	.+454    	; 0x3e2 <__vector_1+0x2da>
		{
			if(Repeat)
 21c:	80 91 62 00 	lds	r24, 0x0062
 220:	88 23       	and	r24, r24
 222:	a1 f1       	breq	.+104    	; 0x28c <__vector_1+0x184>
			{
			//Got a repeat pulse
			if((QEnd==(QMAX-1) && QFront==0)||((QEnd+1)==QFront))
 224:	80 91 61 00 	lds	r24, 0x0061
 228:	87 30       	cpi	r24, 0x07	; 7
 22a:	21 f4       	brne	.+8      	; 0x234 <__vector_1+0x12c>
 22c:	80 91 60 00 	lds	r24, 0x0060
 230:	88 23       	and	r24, r24
 232:	51 f0       	breq	.+20     	; 0x248 <__vector_1+0x140>
 234:	80 91 61 00 	lds	r24, 0x0061
 238:	20 91 60 00 	lds	r18, 0x0060
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	82 17       	cp	r24, r18
 244:	93 07       	cpc	r25, r19
 246:	59 f4       	brne	.+22     	; 0x25e <__vector_1+0x156>
						{
							QFront++;
 248:	80 91 60 00 	lds	r24, 0x0060
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	80 93 60 00 	sts	0x0060, r24
							if(QFront==(QMAX)) 
 252:	80 91 60 00 	lds	r24, 0x0060
 256:	88 30       	cpi	r24, 0x08	; 8
 258:	11 f4       	brne	.+4      	; 0x25e <__vector_1+0x156>
								QFront=0;
 25a:	10 92 60 00 	sts	0x0060, r1
						}

						if(QEnd==(QMAX-1))
 25e:	80 91 61 00 	lds	r24, 0x0061
 262:	87 30       	cpi	r24, 0x07	; 7
 264:	19 f4       	brne	.+6      	; 0x26c <__vector_1+0x164>
							QEnd=0;
 266:	10 92 61 00 	sts	0x0061, r1
 26a:	05 c0       	rjmp	.+10     	; 0x276 <__vector_1+0x16e>
						else
							QEnd++;
 26c:	80 91 61 00 	lds	r24, 0x0061
 270:	8f 5f       	subi	r24, 0xFF	; 255
 272:	80 93 61 00 	sts	0x0061, r24

						IrCmdQ[QEnd]=PrevCmd;
 276:	e0 91 61 00 	lds	r30, 0x0061
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 91 6b 00 	lds	r24, 0x006B
 280:	e4 59       	subi	r30, 0x94	; 148
 282:	ff 4f       	sbci	r31, 0xFF	; 255
 284:	80 83       	st	Z, r24

					if(QFront==-1) QFront=0;
 286:	80 91 60 00 	lds	r24, 0x0060
 28a:	ab c0       	rjmp	.+342    	; 0x3e2 <__vector_1+0x2da>
			}
			else
			{
				RCount++;
 28c:	80 91 76 00 	lds	r24, 0x0076
 290:	8f 5f       	subi	r24, 0xFF	; 255
 292:	80 93 76 00 	sts	0x0076, r24
				if(RCount==4) Repeat=1;
 296:	80 91 76 00 	lds	r24, 0x0076
 29a:	84 30       	cpi	r24, 0x04	; 4
 29c:	09 f0       	breq	.+2      	; 0x2a0 <__vector_1+0x198>
 29e:	a1 c0       	rjmp	.+322    	; 0x3e2 <__vector_1+0x2da>
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	80 93 62 00 	sts	0x0062, r24
 2a6:	9d c0       	rjmp	.+314    	; 0x3e2 <__vector_1+0x2da>
		}
	break;
	}
	case IR_RECEIVE_BITS:
	{
		if(Edge)
 2a8:	80 91 64 00 	lds	r24, 0x0064
 2ac:	88 23       	and	r24, r24
 2ae:	29 f0       	breq	.+10     	; 0x2ba <__vector_1+0x1b2>
		{
			//Rising
			if((TempTime>50) && (TempTime<69))
 2b0:	e3 97       	sbiw	r28, 0x33	; 51
 2b2:	62 97       	sbiw	r28, 0x12	; 18
 2b4:	08 f0       	brcs	.+2      	; 0x2b8 <__vector_1+0x1b0>
 2b6:	95 c0       	rjmp	.+298    	; 0x3e2 <__vector_1+0x2da>
 2b8:	9e c0       	rjmp	.+316    	; 0x3f6 <__vector_1+0x2ee>
			}
		}
		else
		{
			//Falling
			if((TempTime>41) && (TempTime<58))
 2ba:	ce 01       	movw	r24, r28
 2bc:	8a 97       	sbiw	r24, 0x2a	; 42
 2be:	40 97       	sbiw	r24, 0x10	; 16
 2c0:	58 f1       	brcs	.+86     	; 0x318 <__vector_1+0x210>

					}
				}
				MCUCR|=((1<<ISC01)|(1<<ISC00));	//Set INT on Rising Edge 
				Edge=1;
			}else if((TempTime>(169-(169*TOL))) && (TempTime<(169+(169*TOL))))
 2c2:	be 01       	movw	r22, r28
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 97 02 	call	0x52e	; 0x52e <__floatunsisf>
 2cc:	7b 01       	movw	r14, r22
 2ce:	8c 01       	movw	r16, r24
 2d0:	2a e9       	ldi	r18, 0x9A	; 154
 2d2:	39 e1       	ldi	r19, 0x19	; 25
 2d4:	48 e1       	ldi	r20, 0x18	; 24
 2d6:	53 e4       	ldi	r21, 0x43	; 67
 2d8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__gesf2>
 2dc:	18 16       	cp	r1, r24
 2de:	0c f0       	brlt	.+2      	; 0x2e2 <__vector_1+0x1da>
 2e0:	80 c0       	rjmp	.+256    	; 0x3e2 <__vector_1+0x2da>
 2e2:	c8 01       	movw	r24, r16
 2e4:	b7 01       	movw	r22, r14
 2e6:	26 e6       	ldi	r18, 0x66	; 102
 2e8:	36 ee       	ldi	r19, 0xE6	; 230
 2ea:	49 e3       	ldi	r20, 0x39	; 57
 2ec:	53 e4       	ldi	r21, 0x43	; 67
 2ee:	0e 94 93 02 	call	0x526	; 0x526 <__cmpsf2>
 2f2:	87 ff       	sbrs	r24, 7
 2f4:	76 c0       	rjmp	.+236    	; 0x3e2 <__vector_1+0x2da>
			{
				//We Have got a '1' here
				IrData[ByteNo]|=(1<<BitNo);
 2f6:	e0 91 63 00 	lds	r30, 0x0063
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	ea 59       	subi	r30, 0x9A	; 154
 2fe:	ff 4f       	sbci	r31, 0xFF	; 255
 300:	20 81       	ld	r18, Z
 302:	30 91 65 00 	lds	r19, 0x0065
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <__vector_1+0x208>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	3a 95       	dec	r19
 312:	e2 f7       	brpl	.-8      	; 0x30c <__vector_1+0x204>
 314:	28 2b       	or	r18, r24
 316:	20 83       	st	Z, r18
				BitNo++;
 318:	80 91 65 00 	lds	r24, 0x0065
 31c:	8f 5f       	subi	r24, 0xFF	; 255
 31e:	80 93 65 00 	sts	0x0065, r24
				if(BitNo==8)
 322:	80 91 65 00 	lds	r24, 0x0065
 326:	88 30       	cpi	r24, 0x08	; 8
 328:	69 f4       	brne	.+26     	; 0x344 <__vector_1+0x23c>
				{
					BitNo=0;
 32a:	10 92 65 00 	sts	0x0065, r1
					ByteNo++;
 32e:	80 91 63 00 	lds	r24, 0x0063
 332:	8f 5f       	subi	r24, 0xFF	; 255
 334:	80 93 63 00 	sts	0x0063, r24
					if(ByteNo==4)
 338:	80 91 63 00 	lds	r24, 0x0063
 33c:	84 30       	cpi	r24, 0x04	; 4
 33e:	11 f4       	brne	.+4      	; 0x344 <__vector_1+0x23c>
					{
						
						State=IR_WAIT_STOP_BIT;
 340:	80 93 6a 00 	sts	0x006A, r24
					
					}
				}
				MCUCR|=((1<<ISC01)|(1<<ISC00));	//Set INT on Rising Edge 
 344:	85 b7       	in	r24, 0x35	; 53
 346:	83 60       	ori	r24, 0x03	; 3
 348:	85 bf       	out	0x35, r24	; 53
				Edge=1;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	80 93 64 00 	sts	0x0064, r24
 350:	5a c0       	rjmp	.+180    	; 0x406 <__vector_1+0x2fe>
		}
	break;
	}
	case IR_WAIT_STOP_BIT:
	{
		if(Edge)
 352:	80 91 64 00 	lds	r24, 0x0064
 356:	88 23       	and	r24, r24
 358:	09 f4       	brne	.+2      	; 0x35c <__vector_1+0x254>
 35a:	55 c0       	rjmp	.+170    	; 0x406 <__vector_1+0x2fe>
		{
			//Check for integrity
			if(IrData[2]==((unsigned char)~IrData[3]))
 35c:	90 91 68 00 	lds	r25, 0x0068
 360:	80 91 69 00 	lds	r24, 0x0069
 364:	80 95       	com	r24
 366:	98 17       	cp	r25, r24
 368:	09 f0       	breq	.+2      	; 0x36c <__vector_1+0x264>
 36a:	4d c0       	rjmp	.+154    	; 0x406 <__vector_1+0x2fe>
			{ 
				//Now We Have Got a packet
				//Add its Cmd to Queue
				
					//Step1:Check of Q full
					if((QEnd==(QMAX-1) && QFront==0)||((QEnd+1)==QFront))
 36c:	80 91 61 00 	lds	r24, 0x0061
 370:	87 30       	cpi	r24, 0x07	; 7
 372:	21 f4       	brne	.+8      	; 0x37c <__vector_1+0x274>
 374:	80 91 60 00 	lds	r24, 0x0060
 378:	88 23       	and	r24, r24
 37a:	51 f0       	breq	.+20     	; 0x390 <__vector_1+0x288>
 37c:	80 91 61 00 	lds	r24, 0x0061
 380:	20 91 60 00 	lds	r18, 0x0060
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	82 17       	cp	r24, r18
 38c:	93 07       	cpc	r25, r19
 38e:	59 f4       	brne	.+22     	; 0x3a6 <__vector_1+0x29e>
					{
						QFront++;
 390:	80 91 60 00 	lds	r24, 0x0060
 394:	8f 5f       	subi	r24, 0xFF	; 255
 396:	80 93 60 00 	sts	0x0060, r24
						if(QFront==(QMAX)) 
 39a:	80 91 60 00 	lds	r24, 0x0060
 39e:	88 30       	cpi	r24, 0x08	; 8
 3a0:	11 f4       	brne	.+4      	; 0x3a6 <__vector_1+0x29e>
							QFront=0;
 3a2:	10 92 60 00 	sts	0x0060, r1
					}

					if(QEnd==(QMAX-1))
 3a6:	80 91 61 00 	lds	r24, 0x0061
 3aa:	87 30       	cpi	r24, 0x07	; 7
 3ac:	19 f4       	brne	.+6      	; 0x3b4 <__vector_1+0x2ac>
						QEnd=0;
 3ae:	10 92 61 00 	sts	0x0061, r1
 3b2:	05 c0       	rjmp	.+10     	; 0x3be <__vector_1+0x2b6>
					else
						QEnd++;
 3b4:	80 91 61 00 	lds	r24, 0x0061
 3b8:	8f 5f       	subi	r24, 0xFF	; 255
 3ba:	80 93 61 00 	sts	0x0061, r24

					IrCmdQ[QEnd]=IrData[2];
 3be:	e0 91 61 00 	lds	r30, 0x0061
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 91 68 00 	lds	r24, 0x0068
 3c8:	e4 59       	subi	r30, 0x94	; 148
 3ca:	ff 4f       	sbci	r31, 0xFF	; 255
 3cc:	80 83       	st	Z, r24
					PrevCmd=IrData[2];
 3ce:	80 91 68 00 	lds	r24, 0x0068
 3d2:	80 93 6b 00 	sts	0x006B, r24

					if(QFront==-1) QFront=0;
 3d6:	80 91 60 00 	lds	r24, 0x0060
				//Prevent repeating immediatly
				Repeat=0;//It will be enabled after 4 repeat pulses
 3da:	10 92 62 00 	sts	0x0062, r1
				RCount=0;
 3de:	10 92 76 00 	sts	0x0076, r1
}

void ResetIR()
{
	char i;
	for(i=0;i<4;i++) IrData[i]=0;
 3e2:	10 92 66 00 	sts	0x0066, r1
 3e6:	10 92 67 00 	sts	0x0067, r1
 3ea:	10 92 68 00 	sts	0x0068, r1
 3ee:	10 92 69 00 	sts	0x0069, r1
	State=IR_VALIDATE_LEAD_HIGH;
 3f2:	10 92 6a 00 	sts	0x006A, r1
	//INT ON FALLING EDGE
	MCUCR&=(~((1<<ISC01)|(1<<ISC00)));
 3f6:	85 b7       	in	r24, 0x35	; 53
 3f8:	8c 7f       	andi	r24, 0xFC	; 252
 3fa:	85 bf       	out	0x35, r24	; 53
	MCUCR|=(1<<ISC01);
 3fc:	85 b7       	in	r24, 0x35	; 53
 3fe:	82 60       	ori	r24, 0x02	; 2
 400:	85 bf       	out	0x35, r24	; 53
	Edge=0;
 402:	10 92 64 00 	sts	0x0064, r1
			
		}
	}
	break;
	}
	GICR|=(1<<INT0);	//Enable INT1
 406:	8b b7       	in	r24, 0x3b	; 59
 408:	80 64       	ori	r24, 0x40	; 64
 40a:	8b bf       	out	0x3b, r24	; 59
}
 40c:	ff 91       	pop	r31
 40e:	ef 91       	pop	r30
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	bf 91       	pop	r27
 416:	af 91       	pop	r26
 418:	9f 91       	pop	r25
 41a:	8f 91       	pop	r24
 41c:	7f 91       	pop	r23
 41e:	6f 91       	pop	r22
 420:	5f 91       	pop	r21
 422:	4f 91       	pop	r20
 424:	3f 91       	pop	r19
 426:	2f 91       	pop	r18
 428:	1f 91       	pop	r17
 42a:	0f 91       	pop	r16
 42c:	ff 90       	pop	r15
 42e:	ef 90       	pop	r14
 430:	df 90       	pop	r13
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
 438:	1f 90       	pop	r1
 43a:	18 95       	reti

0000043c <ResetIR>:

void ResetIR()
{
	char i;
	for(i=0;i<4;i++) IrData[i]=0;
 43c:	10 92 66 00 	sts	0x0066, r1
 440:	10 92 67 00 	sts	0x0067, r1
 444:	10 92 68 00 	sts	0x0068, r1
 448:	10 92 69 00 	sts	0x0069, r1
	State=IR_VALIDATE_LEAD_HIGH;
 44c:	10 92 6a 00 	sts	0x006A, r1
	//INT ON FALLING EDGE
	MCUCR&=(~((1<<ISC01)|(1<<ISC00)));
 450:	85 b7       	in	r24, 0x35	; 53
 452:	8c 7f       	andi	r24, 0xFC	; 252
 454:	85 bf       	out	0x35, r24	; 53
	MCUCR|=(1<<ISC01);
 456:	85 b7       	in	r24, 0x35	; 53
 458:	82 60       	ori	r24, 0x02	; 2
 45a:	85 bf       	out	0x35, r24	; 53
	Edge=0;
 45c:	10 92 64 00 	sts	0x0064, r1
}
 460:	08 95       	ret

00000462 <GetRemoteCmd>:
	unsigned char cmd;

	if(wait)
		while(QFront==-1);
	else
		if(QFront==-1) return (RC_NONE);
 462:	80 91 60 00 	lds	r24, 0x0060

	cmd=IrCmdQ[QFront];
 466:	e0 91 60 00 	lds	r30, 0x0060
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	e4 59       	subi	r30, 0x94	; 148
 46e:	ff 4f       	sbci	r31, 0xFF	; 255
 470:	e0 81       	ld	r30, Z

	if(QFront==QEnd) 
 472:	90 91 60 00 	lds	r25, 0x0060
 476:	80 91 61 00 	lds	r24, 0x0061
 47a:	98 17       	cp	r25, r24
 47c:	31 f4       	brne	.+12     	; 0x48a <GetRemoteCmd+0x28>
		QFront=QEnd=-1;
 47e:	8f ef       	ldi	r24, 0xFF	; 255
 480:	80 93 61 00 	sts	0x0061, r24
 484:	80 91 61 00 	lds	r24, 0x0061
 488:	0a c0       	rjmp	.+20     	; 0x49e <GetRemoteCmd+0x3c>
	else
	{
		if(QFront==(QMAX-1))
 48a:	80 91 60 00 	lds	r24, 0x0060
 48e:	87 30       	cpi	r24, 0x07	; 7
 490:	19 f4       	brne	.+6      	; 0x498 <GetRemoteCmd+0x36>
			QFront=0;
 492:	10 92 60 00 	sts	0x0060, r1
 496:	05 c0       	rjmp	.+10     	; 0x4a2 <GetRemoteCmd+0x40>
		else
			QFront++;
 498:	80 91 60 00 	lds	r24, 0x0060
 49c:	8f 5f       	subi	r24, 0xFF	; 255
 49e:	80 93 60 00 	sts	0x0060, r24
	}

	return cmd;
}
 4a2:	8e 2f       	mov	r24, r30
 4a4:	08 95       	ret

000004a6 <main>:
#include "lcd.h"

void main()
{   
	uint8_t cmd=0;
	DDRA=0XFF;
 4a6:	8f ef       	ldi	r24, 0xFF	; 255
 4a8:	8a bb       	out	0x1a, r24	; 26
	PORTA=0X00;
 4aa:	1b ba       	out	0x1b, r1	; 27

	RemoteInit();
 4ac:	0e 94 49 00 	call	0x92	; 0x92 <RemoteInit>
		if(QFront==-1) return (RC_NONE);

	cmd=IrCmdQ[QFront];

	if(QFront==QEnd) 
		QFront=QEnd=-1;
 4b0:	5f ef       	ldi	r21, 0xFF	; 255
		 
		 switch(cmd)
		 {
		  case 19:PORTA=PORTA^0x10;break;
		  case 18:PORTA=PORTA^0x20;break;
		  case 17:PORTA=PORTA^0x40;break;
 4b2:	40 e4       	ldi	r20, 0x40	; 64
		cmd=GetRemoteCmd(1);
		 
		 switch(cmd)
		 {
		  case 19:PORTA=PORTA^0x10;break;
		  case 18:PORTA=PORTA^0x20;break;
 4b4:	30 e2       	ldi	r19, 0x20	; 32
	{
		cmd=GetRemoteCmd(1);
		 
		 switch(cmd)
		 {
		  case 19:PORTA=PORTA^0x10;break;
 4b6:	20 e1       	ldi	r18, 0x10	; 16
unsigned char GetRemoteCmd(char wait)
{
	unsigned char cmd;

	if(wait)
		while(QFront==-1);
 4b8:	80 91 60 00 	lds	r24, 0x0060
	else
		if(QFront==-1) return (RC_NONE);

	cmd=IrCmdQ[QFront];
 4bc:	e0 91 60 00 	lds	r30, 0x0060
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	e4 59       	subi	r30, 0x94	; 148
 4c4:	ff 4f       	sbci	r31, 0xFF	; 255
 4c6:	e0 81       	ld	r30, Z

	if(QFront==QEnd) 
 4c8:	90 91 60 00 	lds	r25, 0x0060
 4cc:	80 91 61 00 	lds	r24, 0x0061
 4d0:	98 17       	cp	r25, r24
 4d2:	29 f4       	brne	.+10     	; 0x4de <main+0x38>
		QFront=QEnd=-1;
 4d4:	50 93 61 00 	sts	0x0061, r21
 4d8:	80 91 61 00 	lds	r24, 0x0061
 4dc:	0a c0       	rjmp	.+20     	; 0x4f2 <main+0x4c>
	else
	{
		if(QFront==(QMAX-1))
 4de:	80 91 60 00 	lds	r24, 0x0060
 4e2:	87 30       	cpi	r24, 0x07	; 7
 4e4:	19 f4       	brne	.+6      	; 0x4ec <main+0x46>
			QFront=0;
 4e6:	10 92 60 00 	sts	0x0060, r1
 4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <main+0x50>
		else
			QFront++;
 4ec:	80 91 60 00 	lds	r24, 0x0060
 4f0:	8f 5f       	subi	r24, 0xFF	; 255
 4f2:	80 93 60 00 	sts	0x0060, r24

	while(1)
	{
		cmd=GetRemoteCmd(1);
		 
		 switch(cmd)
 4f6:	e1 31       	cpi	r30, 0x11	; 17
 4f8:	79 f0       	breq	.+30     	; 0x518 <main+0x72>
 4fa:	e2 31       	cpi	r30, 0x12	; 18
 4fc:	18 f4       	brcc	.+6      	; 0x504 <main+0x5e>
 4fe:	e0 31       	cpi	r30, 0x10	; 16
 500:	d9 f6       	brne	.-74     	; 0x4b8 <main+0x12>
 502:	0d c0       	rjmp	.+26     	; 0x51e <main+0x78>
 504:	e2 31       	cpi	r30, 0x12	; 18
 506:	29 f0       	breq	.+10     	; 0x512 <main+0x6c>
 508:	e3 31       	cpi	r30, 0x13	; 19
 50a:	b1 f6       	brne	.-84     	; 0x4b8 <main+0x12>
		 {
		  case 19:PORTA=PORTA^0x10;break;
 50c:	8b b3       	in	r24, 0x1b	; 27
 50e:	82 27       	eor	r24, r18
 510:	08 c0       	rjmp	.+16     	; 0x522 <main+0x7c>
		  case 18:PORTA=PORTA^0x20;break;
 512:	8b b3       	in	r24, 0x1b	; 27
 514:	83 27       	eor	r24, r19
 516:	05 c0       	rjmp	.+10     	; 0x522 <main+0x7c>
		  case 17:PORTA=PORTA^0x40;break;
 518:	8b b3       	in	r24, 0x1b	; 27
 51a:	84 27       	eor	r24, r20
 51c:	02 c0       	rjmp	.+4      	; 0x522 <main+0x7c>
		  case 16:PORTA=PORTA^0x80;break;
 51e:	8b b3       	in	r24, 0x1b	; 27
 520:	80 58       	subi	r24, 0x80	; 128
 522:	8b bb       	out	0x1b, r24	; 27
 524:	c9 cf       	rjmp	.-110    	; 0x4b8 <main+0x12>

00000526 <__cmpsf2>:
 526:	40 d0       	rcall	.+128    	; 0x5a8 <__fp_cmp>
 528:	08 f4       	brcc	.+2      	; 0x52c <__cmpsf2+0x6>
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	08 95       	ret

0000052e <__floatunsisf>:
 52e:	e8 94       	clt
 530:	09 c0       	rjmp	.+18     	; 0x544 <__floatsisf+0x12>

00000532 <__floatsisf>:
 532:	97 fb       	bst	r25, 7
 534:	3e f4       	brtc	.+14     	; 0x544 <__floatsisf+0x12>
 536:	90 95       	com	r25
 538:	80 95       	com	r24
 53a:	70 95       	com	r23
 53c:	61 95       	neg	r22
 53e:	7f 4f       	sbci	r23, 0xFF	; 255
 540:	8f 4f       	sbci	r24, 0xFF	; 255
 542:	9f 4f       	sbci	r25, 0xFF	; 255
 544:	99 23       	and	r25, r25
 546:	a9 f0       	breq	.+42     	; 0x572 <__floatsisf+0x40>
 548:	f9 2f       	mov	r31, r25
 54a:	96 e9       	ldi	r25, 0x96	; 150
 54c:	bb 27       	eor	r27, r27
 54e:	93 95       	inc	r25
 550:	f6 95       	lsr	r31
 552:	87 95       	ror	r24
 554:	77 95       	ror	r23
 556:	67 95       	ror	r22
 558:	b7 95       	ror	r27
 55a:	f1 11       	cpse	r31, r1
 55c:	f8 cf       	rjmp	.-16     	; 0x54e <__floatsisf+0x1c>
 55e:	fa f4       	brpl	.+62     	; 0x59e <__floatsisf+0x6c>
 560:	bb 0f       	add	r27, r27
 562:	11 f4       	brne	.+4      	; 0x568 <__floatsisf+0x36>
 564:	60 ff       	sbrs	r22, 0
 566:	1b c0       	rjmp	.+54     	; 0x59e <__floatsisf+0x6c>
 568:	6f 5f       	subi	r22, 0xFF	; 255
 56a:	7f 4f       	sbci	r23, 0xFF	; 255
 56c:	8f 4f       	sbci	r24, 0xFF	; 255
 56e:	9f 4f       	sbci	r25, 0xFF	; 255
 570:	16 c0       	rjmp	.+44     	; 0x59e <__floatsisf+0x6c>
 572:	88 23       	and	r24, r24
 574:	11 f0       	breq	.+4      	; 0x57a <__floatsisf+0x48>
 576:	96 e9       	ldi	r25, 0x96	; 150
 578:	11 c0       	rjmp	.+34     	; 0x59c <__floatsisf+0x6a>
 57a:	77 23       	and	r23, r23
 57c:	21 f0       	breq	.+8      	; 0x586 <__floatsisf+0x54>
 57e:	9e e8       	ldi	r25, 0x8E	; 142
 580:	87 2f       	mov	r24, r23
 582:	76 2f       	mov	r23, r22
 584:	05 c0       	rjmp	.+10     	; 0x590 <__floatsisf+0x5e>
 586:	66 23       	and	r22, r22
 588:	71 f0       	breq	.+28     	; 0x5a6 <__floatsisf+0x74>
 58a:	96 e8       	ldi	r25, 0x86	; 134
 58c:	86 2f       	mov	r24, r22
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	2a f0       	brmi	.+10     	; 0x59e <__floatsisf+0x6c>
 594:	9a 95       	dec	r25
 596:	66 0f       	add	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	88 1f       	adc	r24, r24
 59c:	da f7       	brpl	.-10     	; 0x594 <__floatsisf+0x62>
 59e:	88 0f       	add	r24, r24
 5a0:	96 95       	lsr	r25
 5a2:	87 95       	ror	r24
 5a4:	97 f9       	bld	r25, 7
 5a6:	08 95       	ret

000005a8 <__fp_cmp>:
 5a8:	99 0f       	add	r25, r25
 5aa:	00 08       	sbc	r0, r0
 5ac:	55 0f       	add	r21, r21
 5ae:	aa 0b       	sbc	r26, r26
 5b0:	e0 e8       	ldi	r30, 0x80	; 128
 5b2:	fe ef       	ldi	r31, 0xFE	; 254
 5b4:	16 16       	cp	r1, r22
 5b6:	17 06       	cpc	r1, r23
 5b8:	e8 07       	cpc	r30, r24
 5ba:	f9 07       	cpc	r31, r25
 5bc:	c0 f0       	brcs	.+48     	; 0x5ee <__fp_cmp+0x46>
 5be:	12 16       	cp	r1, r18
 5c0:	13 06       	cpc	r1, r19
 5c2:	e4 07       	cpc	r30, r20
 5c4:	f5 07       	cpc	r31, r21
 5c6:	98 f0       	brcs	.+38     	; 0x5ee <__fp_cmp+0x46>
 5c8:	62 1b       	sub	r22, r18
 5ca:	73 0b       	sbc	r23, r19
 5cc:	84 0b       	sbc	r24, r20
 5ce:	95 0b       	sbc	r25, r21
 5d0:	39 f4       	brne	.+14     	; 0x5e0 <__fp_cmp+0x38>
 5d2:	0a 26       	eor	r0, r26
 5d4:	61 f0       	breq	.+24     	; 0x5ee <__fp_cmp+0x46>
 5d6:	23 2b       	or	r18, r19
 5d8:	24 2b       	or	r18, r20
 5da:	25 2b       	or	r18, r21
 5dc:	21 f4       	brne	.+8      	; 0x5e6 <__fp_cmp+0x3e>
 5de:	08 95       	ret
 5e0:	0a 26       	eor	r0, r26
 5e2:	09 f4       	brne	.+2      	; 0x5e6 <__fp_cmp+0x3e>
 5e4:	a1 40       	sbci	r26, 0x01	; 1
 5e6:	a6 95       	lsr	r26
 5e8:	8f ef       	ldi	r24, 0xFF	; 255
 5ea:	81 1d       	adc	r24, r1
 5ec:	81 1d       	adc	r24, r1
 5ee:	08 95       	ret

000005f0 <__gesf2>:
 5f0:	db df       	rcall	.-74     	; 0x5a8 <__fp_cmp>
 5f2:	08 f4       	brcc	.+2      	; 0x5f6 <__gesf2+0x6>
 5f4:	8f ef       	ldi	r24, 0xFF	; 255
 5f6:	08 95       	ret

000005f8 <_exit>:
 5f8:	f8 94       	cli

000005fa <__stop_program>:
 5fa:	ff cf       	rjmp	.-2      	; 0x5fa <__stop_program>
