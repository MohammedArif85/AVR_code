
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000540  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006e6  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_INIT>:
/*
===================================================================
SET BAUD RATE
===================================================================
*/
	UBRRL=UBRRVAL;
  6c:	87 e6       	ldi	r24, 0x67	; 103
  6e:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);
  70:	10 bc       	out	0x20, r1	; 32
/*===================================================================
SET DATAFRAME FORMAT : ASYNCHRONOUS MODE, NO PARITY, 1 START BIT, 8BIT
                       SIZE DATA	
===================================================================
*/
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
  72:	86 e8       	ldi	r24, 0x86	; 134
  74:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN);
  76:	88 e1       	ldi	r24, 0x18	; 24
  78:	8a b9       	out	0x0a, r24	; 10
}
  7a:	08 95       	ret

0000007c <rswritechar>:
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  7c:	5d 9b       	sbis	0x0b, 5	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <rswritechar>
	UDR=c; //SEND RECEIVED DATA BACK
  80:	8c b9       	out	0x0c, r24	; 12
}
  82:	08 95       	ret

00000084 <rsreadchar>:
/*
===================================================================
WAIT UNTIL DATA IS AVAILABLE
===================================================================
*/
	while(!(UCSRA&(1<<RXC)))
  84:	5f 9b       	sbis	0x0b, 7	; 11
  86:	fe cf       	rjmp	.-4      	; 0x84 <rsreadchar>
	{	}
	return UDR;
  88:	8c b1       	in	r24, 0x0c	; 12
}
  8a:	08 95       	ret

0000008c <rsstr>:
===================================================================
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
  8c:	fc 01       	movw	r30, r24
  8e:	04 c0       	rjmp	.+8      	; 0x98 <rsstr+0xc>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  90:	5d 9b       	sbis	0x0b, 5	; 11
  92:	fe cf       	rjmp	.-4      	; 0x90 <rsstr+0x4>
	UDR=c; //SEND RECEIVED DATA BACK
  94:	8c b9       	out	0x0c, r24	; 12
void rsstr(char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
  96:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
	while(*s)
  98:	80 81       	ld	r24, Z
  9a:	88 23       	and	r24, r24
  9c:	c9 f7       	brne	.-14     	; 0x90 <rsstr+0x4>
	{
		rswritechar(*s);
		s++;
	}
  9e:	08 95       	ret

000000a0 <main>:
/*
===================================================================
SET BAUD RATE
===================================================================
*/
	UBRRL=UBRRVAL;
  a0:	87 e6       	ldi	r24, 0x67	; 103
  a2:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);
  a4:	10 bc       	out	0x20, r1	; 32
/*===================================================================
SET DATAFRAME FORMAT : ASYNCHRONOUS MODE, NO PARITY, 1 START BIT, 8BIT
                       SIZE DATA	
===================================================================
*/
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
  a6:	86 e8       	ldi	r24, 0x86	; 134
  a8:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN);
  aa:	88 e1       	ldi	r24, 0x18	; 24
  ac:	8a b9       	out	0x0a, r24	; 10

int main(void)
{
	unsigned char t;
	USART_INIT();
	DDRA=0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8a bb       	out	0x1a, r24	; 26
		t=rsreadchar();
		switch(t)
		{
		 case '5':PORTA=0xFF;break;
		 case '6':PORTA=0x00;break;
		 case '7':PORTA=0x30;break;
  b2:	30 e3       	ldi	r19, 0x30	; 48
		 case '8':PORTA=0xC0;break;
  b4:	20 ec       	ldi	r18, 0xC0	; 192
	while(1)
	{
		t=rsreadchar();
		switch(t)
		{
		 case '5':PORTA=0xFF;break;
  b6:	9f ef       	ldi	r25, 0xFF	; 255
/*
===================================================================
WAIT UNTIL DATA IS AVAILABLE
===================================================================
*/
	while(!(UCSRA&(1<<RXC)))
  b8:	5f 9b       	sbis	0x0b, 7	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <main+0x18>
	{	}
	return UDR;
  bc:	8c b1       	in	r24, 0x0c	; 12
	USART_INIT();
	DDRA=0xFF;
	while(1)
	{
		t=rsreadchar();
		switch(t)
  be:	86 33       	cpi	r24, 0x36	; 54
  c0:	61 f0       	breq	.+24     	; 0xda <main+0x3a>
  c2:	87 33       	cpi	r24, 0x37	; 55
  c4:	18 f4       	brcc	.+6      	; 0xcc <main+0x2c>
  c6:	85 33       	cpi	r24, 0x35	; 53
  c8:	b9 f7       	brne	.-18     	; 0xb8 <main+0x18>
  ca:	05 c0       	rjmp	.+10     	; 0xd6 <main+0x36>
  cc:	87 33       	cpi	r24, 0x37	; 55
  ce:	39 f0       	breq	.+14     	; 0xde <main+0x3e>
  d0:	88 33       	cpi	r24, 0x38	; 56
  d2:	91 f7       	brne	.-28     	; 0xb8 <main+0x18>
  d4:	06 c0       	rjmp	.+12     	; 0xe2 <main+0x42>
		{
		 case '5':PORTA=0xFF;break;
  d6:	9b bb       	out	0x1b, r25	; 27
  d8:	ef cf       	rjmp	.-34     	; 0xb8 <main+0x18>
		 case '6':PORTA=0x00;break;
  da:	1b ba       	out	0x1b, r1	; 27
  dc:	ed cf       	rjmp	.-38     	; 0xb8 <main+0x18>
		 case '7':PORTA=0x30;break;
  de:	3b bb       	out	0x1b, r19	; 27
  e0:	eb cf       	rjmp	.-42     	; 0xb8 <main+0x18>
		 case '8':PORTA=0xC0;break;
  e2:	2b bb       	out	0x1b, r18	; 27
  e4:	e9 cf       	rjmp	.-46     	; 0xb8 <main+0x18>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
