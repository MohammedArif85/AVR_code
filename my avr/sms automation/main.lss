
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  000002f8  0000038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000c2  008000c2  000003ee  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000003ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000084  00000000  00000000  0000040e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008bd  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000198  00000000  00000000  00000d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005bf  00000000  00000000  00000ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000014a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000010e  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000390  00000000  00000000  00001636  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 3c       	cpi	r26, 0xC2	; 194
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 ec       	ldi	r26, 0xC2	; 194
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3c       	cpi	r26, 0xC5	; 197
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 41 01 	call	0x282	; 0x282 <main>
  8a:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_INIT>:
/*
===================================================================
SET BAUD RATE
===================================================================
*/
	UBRRL=UBRRVAL;
  92:	87 e6       	ldi	r24, 0x67	; 103
  94:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);
  96:	10 bc       	out	0x20, r1	; 32
/*===================================================================
SET DATAFRAME FORMAT : ASYNCHRONOUS MODE, NO PARITY, 1 START BIT, 8BIT
                       SIZE DATA	
===================================================================
*/
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(0<<UCSZ2)|(1<<UCSZ1)|(1<<UCSZ0);
  98:	86 e8       	ldi	r24, 0x86	; 134
  9a:	80 bd       	out	0x20, r24	; 32
*/
	//UCSRB=(1<<RXEN)|(1<<TXEN);
	
		//Enable Transmitter and Receiver and Interrupt on receive complete

	UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
  9c:	88 e9       	ldi	r24, 0x98	; 152
  9e:	8a b9       	out	0x0a, r24	; 10

	//enable global interrupts

	set_sleep_mode(SLEEP_MODE_IDLE);
  a0:	85 b7       	in	r24, 0x35	; 53
  a2:	8f 74       	andi	r24, 0x4F	; 79
  a4:	85 bf       	out	0x35, r24	; 53
	sei();
  a6:	78 94       	sei

	
}
  a8:	08 95       	ret

000000aa <rswritechar>:
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  aa:	5d 9b       	sbis	0x0b, 5	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <rswritechar>
	UDR=c; //SEND RECEIVED DATA BACK
  ae:	8c b9       	out	0x0c, r24	; 12
}
  b0:	08 95       	ret

000000b2 <rsreadchar>:
/*
===================================================================
WAIT UNTIL DATA IS AVAILABLE
===================================================================
*/
	while(!(UCSRA&(1<<RXC)))
  b2:	5f 9b       	sbis	0x0b, 7	; 11
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <rsreadchar>
	{	}
	return UDR;
  b6:	8c b1       	in	r24, 0x0c	; 12
}
  b8:	08 95       	ret

000000ba <rsstr>:
===================================================================
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(unsigned char *s)
{
  ba:	fc 01       	movw	r30, r24
  bc:	04 c0       	rjmp	.+8      	; 0xc6 <rsstr+0xc>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  be:	5d 9b       	sbis	0x0b, 5	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <rsstr+0x4>
	UDR=c; //SEND RECEIVED DATA BACK
  c2:	8c b9       	out	0x0c, r24	; 12
void rsstr(unsigned char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
  c4:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(unsigned char *s)
{
	while(*s)
  c6:	80 81       	ld	r24, Z
  c8:	88 23       	and	r24, r24
  ca:	c9 f7       	brne	.-14     	; 0xbe <rsstr+0x4>
	{
		rswritechar(*s);
		s++;
	}
}
  cc:	08 95       	ret

000000ce <readsms>:



volatile unsigned char temp,cnt=0,str;
void readsms()
{rsstr("at");
  ce:	e0 e6       	ldi	r30, 0x60	; 96
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	04 c0       	rjmp	.+8      	; 0xdc <readsms+0xe>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  d4:	5d 9b       	sbis	0x0b, 5	; 11
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <readsms+0x6>
	UDR=c; //SEND RECEIVED DATA BACK
  d8:	8c b9       	out	0x0c, r24	; 12
void rsstr(unsigned char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
  da:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(unsigned char *s)
{
	while(*s)
  dc:	80 81       	ld	r24, Z
  de:	88 23       	and	r24, r24
  e0:	c9 f7       	brne	.-14     	; 0xd4 <readsms+0x6>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  e2:	5d 9b       	sbis	0x0b, 5	; 11
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <readsms+0x14>
	UDR=c; //SEND RECEIVED DATA BACK
  e6:	8d e0       	ldi	r24, 0x0D	; 13
  e8:	8c b9       	out	0x0c, r24	; 12
  ea:	80 e2       	ldi	r24, 0x20	; 32
  ec:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ee:	20 e9       	ldi	r18, 0x90	; 144
  f0:	31 e0       	ldi	r19, 0x01	; 1
  f2:	f9 01       	movw	r30, r18
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <readsms+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fa:	d9 f7       	brne	.-10     	; 0xf2 <readsms+0x24>
  fc:	e3 e6       	ldi	r30, 0x63	; 99
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	04 c0       	rjmp	.+8      	; 0x10a <readsms+0x3c>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 102:	5d 9b       	sbis	0x0b, 5	; 11
 104:	fe cf       	rjmp	.-4      	; 0x102 <readsms+0x34>
	UDR=c; //SEND RECEIVED DATA BACK
 106:	8c b9       	out	0x0c, r24	; 12
void rsstr(unsigned char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
 108:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(unsigned char *s)
{
	while(*s)
 10a:	80 81       	ld	r24, Z
 10c:	88 23       	and	r24, r24
 10e:	c9 f7       	brne	.-14     	; 0x102 <readsms+0x34>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 110:	5d 9b       	sbis	0x0b, 5	; 11
 112:	fe cf       	rjmp	.-4      	; 0x110 <readsms+0x42>
	UDR=c; //SEND RECEIVED DATA BACK
 114:	8d e0       	ldi	r24, 0x0D	; 13
 116:	8c b9       	out	0x0c, r24	; 12
 118:	80 e2       	ldi	r24, 0x20	; 32
 11a:	9e e4       	ldi	r25, 0x4E	; 78
 11c:	20 e9       	ldi	r18, 0x90	; 144
 11e:	31 e0       	ldi	r19, 0x01	; 1
 120:	f9 01       	movw	r30, r18
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <readsms+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 126:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 128:	d9 f7       	brne	.-10     	; 0x120 <readsms+0x52>
 12a:	ed e6       	ldi	r30, 0x6D	; 109
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	04 c0       	rjmp	.+8      	; 0x138 <readsms+0x6a>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 130:	5d 9b       	sbis	0x0b, 5	; 11
 132:	fe cf       	rjmp	.-4      	; 0x130 <readsms+0x62>
	UDR=c; //SEND RECEIVED DATA BACK
 134:	8c b9       	out	0x0c, r24	; 12
void rsstr(unsigned char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
 136:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(unsigned char *s)
{
	while(*s)
 138:	80 81       	ld	r24, Z
 13a:	88 23       	and	r24, r24
 13c:	c9 f7       	brne	.-14     	; 0x130 <readsms+0x62>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 13e:	5d 9b       	sbis	0x0b, 5	; 11
 140:	fe cf       	rjmp	.-4      	; 0x13e <readsms+0x70>
	UDR=c; //SEND RECEIVED DATA BACK
 142:	8d e0       	ldi	r24, 0x0D	; 13
 144:	8c b9       	out	0x0c, r24	; 12
 146:	80 e2       	ldi	r24, 0x20	; 32
 148:	9e e4       	ldi	r25, 0x4E	; 78
 14a:	20 e9       	ldi	r18, 0x90	; 144
 14c:	31 e0       	ldi	r19, 0x01	; 1
 14e:	f9 01       	movw	r30, r18
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <readsms+0x82>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 154:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 156:	d9 f7       	brne	.-10     	; 0x14e <readsms+0x80>
 158:	ed e6       	ldi	r30, 0x6D	; 109
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	04 c0       	rjmp	.+8      	; 0x166 <readsms+0x98>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 15e:	5d 9b       	sbis	0x0b, 5	; 11
 160:	fe cf       	rjmp	.-4      	; 0x15e <readsms+0x90>
	UDR=c; //SEND RECEIVED DATA BACK
 162:	8c b9       	out	0x0c, r24	; 12
void rsstr(unsigned char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
 164:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(unsigned char *s)
{
	while(*s)
 166:	80 81       	ld	r24, Z
 168:	88 23       	and	r24, r24
 16a:	c9 f7       	brne	.-14     	; 0x15e <readsms+0x90>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 16c:	5d 9b       	sbis	0x0b, 5	; 11
 16e:	fe cf       	rjmp	.-4      	; 0x16c <readsms+0x9e>
	UDR=c; //SEND RECEIVED DATA BACK
 170:	8d e0       	ldi	r24, 0x0D	; 13
 172:	8c b9       	out	0x0c, r24	; 12
 174:	80 e2       	ldi	r24, 0x20	; 32
 176:	9e e4       	ldi	r25, 0x4E	; 78
 178:	20 e9       	ldi	r18, 0x90	; 144
 17a:	31 e0       	ldi	r19, 0x01	; 1
 17c:	f9 01       	movw	r30, r18
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <readsms+0xb0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 182:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 184:	d9 f7       	brne	.-10     	; 0x17c <readsms+0xae>
 rswritechar(0x0d);
 _delay_ms(2000); 
rsstr("at+cnmi=2,2,0,0,0");
 rswritechar(0x0d);
 _delay_ms(2000); 
}
 186:	08 95       	ret

00000188 <sendsms>:
void sendsms()
{
 188:	ef e7       	ldi	r30, 0x7F	; 127
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	04 c0       	rjmp	.+8      	; 0x196 <sendsms+0xe>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 18e:	5d 9b       	sbis	0x0b, 5	; 11
 190:	fe cf       	rjmp	.-4      	; 0x18e <sendsms+0x6>
	UDR=c; //SEND RECEIVED DATA BACK
 192:	8c b9       	out	0x0c, r24	; 12
void rsstr(unsigned char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
 194:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(unsigned char *s)
{
	while(*s)
 196:	80 81       	ld	r24, Z
 198:	88 23       	and	r24, r24
 19a:	c9 f7       	brne	.-14     	; 0x18e <sendsms+0x6>
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	97 e2       	ldi	r25, 0x27	; 39
 1a0:	20 e9       	ldi	r18, 0x90	; 144
 1a2:	31 e0       	ldi	r19, 0x01	; 1
 1a4:	f9 01       	movw	r30, r18
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <sendsms+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ac:	d9 f7       	brne	.-10     	; 0x1a4 <sendsms+0x1c>
 1ae:	e4 e8       	ldi	r30, 0x84	; 132
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	04 c0       	rjmp	.+8      	; 0x1bc <sendsms+0x34>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 1b4:	5d 9b       	sbis	0x0b, 5	; 11
 1b6:	fe cf       	rjmp	.-4      	; 0x1b4 <sendsms+0x2c>
	UDR=c; //SEND RECEIVED DATA BACK
 1b8:	8c b9       	out	0x0c, r24	; 12
void rsstr(unsigned char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
 1ba:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(unsigned char *s)
{
	while(*s)
 1bc:	80 81       	ld	r24, Z
 1be:	88 23       	and	r24, r24
 1c0:	c9 f7       	brne	.-14     	; 0x1b4 <sendsms+0x2c>
 1c2:	80 e1       	ldi	r24, 0x10	; 16
 1c4:	97 e2       	ldi	r25, 0x27	; 39
 1c6:	20 e9       	ldi	r18, 0x90	; 144
 1c8:	31 e0       	ldi	r19, 0x01	; 1
 1ca:	f9 01       	movw	r30, r18
 1cc:	31 97       	sbiw	r30, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <sendsms+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d2:	d9 f7       	brne	.-10     	; 0x1ca <sendsms+0x42>
 1d4:	e0 e9       	ldi	r30, 0x90	; 144
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <sendsms+0x5a>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 1da:	5d 9b       	sbis	0x0b, 5	; 11
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <sendsms+0x52>
	UDR=c; //SEND RECEIVED DATA BACK
 1de:	8c b9       	out	0x0c, r24	; 12
void rsstr(unsigned char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
 1e0:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(unsigned char *s)
{
	while(*s)
 1e2:	80 81       	ld	r24, Z
 1e4:	88 23       	and	r24, r24
 1e6:	c9 f7       	brne	.-14     	; 0x1da <sendsms+0x52>
 1e8:	80 e1       	ldi	r24, 0x10	; 16
 1ea:	97 e2       	ldi	r25, 0x27	; 39
 1ec:	20 e9       	ldi	r18, 0x90	; 144
 1ee:	31 e0       	ldi	r19, 0x01	; 1
 1f0:	f9 01       	movw	r30, r18
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <sendsms+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f8:	d9 f7       	brne	.-10     	; 0x1f0 <sendsms+0x68>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 1fa:	5d 9b       	sbis	0x0b, 5	; 11
 1fc:	fe cf       	rjmp	.-4      	; 0x1fa <sendsms+0x72>
	UDR=c; //SEND RECEIVED DATA BACK
 1fe:	82 e2       	ldi	r24, 0x22	; 34
 200:	8c b9       	out	0x0c, r24	; 12
 202:	e9 e9       	ldi	r30, 0x99	; 153
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	04 c0       	rjmp	.+8      	; 0x210 <sendsms+0x88>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 208:	5d 9b       	sbis	0x0b, 5	; 11
 20a:	fe cf       	rjmp	.-4      	; 0x208 <sendsms+0x80>
	UDR=c; //SEND RECEIVED DATA BACK
 20c:	8c b9       	out	0x0c, r24	; 12
void rsstr(unsigned char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
 20e:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(unsigned char *s)
{
	while(*s)
 210:	80 81       	ld	r24, Z
 212:	88 23       	and	r24, r24
 214:	c9 f7       	brne	.-14     	; 0x208 <sendsms+0x80>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 216:	5d 9b       	sbis	0x0b, 5	; 11
 218:	fe cf       	rjmp	.-4      	; 0x216 <sendsms+0x8e>
	UDR=c; //SEND RECEIVED DATA BACK
 21a:	82 e2       	ldi	r24, 0x22	; 34
 21c:	8c b9       	out	0x0c, r24	; 12
 21e:	80 e1       	ldi	r24, 0x10	; 16
 220:	97 e2       	ldi	r25, 0x27	; 39
 222:	20 e9       	ldi	r18, 0x90	; 144
 224:	31 e0       	ldi	r19, 0x01	; 1
 226:	f9 01       	movw	r30, r18
 228:	31 97       	sbiw	r30, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <sendsms+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 22e:	d9 f7       	brne	.-10     	; 0x226 <sendsms+0x9e>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 230:	5d 9b       	sbis	0x0b, 5	; 11
 232:	fe cf       	rjmp	.-4      	; 0x230 <sendsms+0xa8>
	UDR=c; //SEND RECEIVED DATA BACK
 234:	8d e0       	ldi	r24, 0x0D	; 13
 236:	8c b9       	out	0x0c, r24	; 12
 238:	80 e1       	ldi	r24, 0x10	; 16
 23a:	97 e2       	ldi	r25, 0x27	; 39
 23c:	20 e9       	ldi	r18, 0x90	; 144
 23e:	31 e0       	ldi	r19, 0x01	; 1
 240:	f9 01       	movw	r30, r18
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <sendsms+0xba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 246:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 248:	d9 f7       	brne	.-10     	; 0x240 <sendsms+0xb8>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 24a:	5d 9b       	sbis	0x0b, 5	; 11
 24c:	fe cf       	rjmp	.-4      	; 0x24a <sendsms+0xc2>
	UDR=c; //SEND RECEIVED DATA BACK
 24e:	8a e0       	ldi	r24, 0x0A	; 10
 250:	8c b9       	out	0x0c, r24	; 12
 252:	e4 ea       	ldi	r30, 0xA4	; 164
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	04 c0       	rjmp	.+8      	; 0x260 <sendsms+0xd8>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 258:	5d 9b       	sbis	0x0b, 5	; 11
 25a:	fe cf       	rjmp	.-4      	; 0x258 <sendsms+0xd0>
	UDR=c; //SEND RECEIVED DATA BACK
 25c:	8c b9       	out	0x0c, r24	; 12
void rsstr(unsigned char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
 25e:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(unsigned char *s)
{
	while(*s)
 260:	80 81       	ld	r24, Z
 262:	88 23       	and	r24, r24
 264:	c9 f7       	brne	.-14     	; 0x258 <sendsms+0xd0>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 266:	5d 9b       	sbis	0x0b, 5	; 11
 268:	fe cf       	rjmp	.-4      	; 0x266 <sendsms+0xde>
	UDR=c; //SEND RECEIVED DATA BACK
 26a:	8a e1       	ldi	r24, 0x1A	; 26
 26c:	8c b9       	out	0x0c, r24	; 12
 26e:	80 e2       	ldi	r24, 0x20	; 32
 270:	9e e4       	ldi	r25, 0x4E	; 78
 272:	20 e9       	ldi	r18, 0x90	; 144
 274:	31 e0       	ldi	r19, 0x01	; 1
 276:	f9 01       	movw	r30, r18
 278:	31 97       	sbiw	r30, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <sendsms+0xf0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 27c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 27e:	d9 f7       	brne	.-10     	; 0x276 <sendsms+0xee>
 rswritechar('\n');
 rsstr("Intruder alert ..GSM Watchdog");
 rswritechar(0x1A);
 _delay_ms(2000);

}
 280:	08 95       	ret

00000282 <main>:
/*
===================================================================
SET BAUD RATE
===================================================================
*/
	UBRRL=UBRRVAL;
 282:	87 e6       	ldi	r24, 0x67	; 103
 284:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);
 286:	10 bc       	out	0x20, r1	; 32
/*===================================================================
SET DATAFRAME FORMAT : ASYNCHRONOUS MODE, NO PARITY, 1 START BIT, 8BIT
                       SIZE DATA	
===================================================================
*/
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(0<<UCSZ2)|(1<<UCSZ1)|(1<<UCSZ0);
 288:	86 e8       	ldi	r24, 0x86	; 134
 28a:	80 bd       	out	0x20, r24	; 32
*/
	//UCSRB=(1<<RXEN)|(1<<TXEN);
	
		//Enable Transmitter and Receiver and Interrupt on receive complete

	UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
 28c:	88 e9       	ldi	r24, 0x98	; 152
 28e:	8a b9       	out	0x0a, r24	; 10

	//enable global interrupts

	set_sleep_mode(SLEEP_MODE_IDLE);
 290:	85 b7       	in	r24, 0x35	; 53
 292:	8f 74       	andi	r24, 0x4F	; 79
 294:	85 bf       	out	0x35, r24	; 53
	sei();
 296:	78 94       	sei


int main(void)
{
	USART_INIT();
	DDRA=0xFF;
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00;
 29c:	1b ba       	out	0x1b, r1	; 27
	DDRC=0xFF;
 29e:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
 2a0:	15 ba       	out	0x15, r1	; 21
	//sei();
	PORTA=0xFF;
 2a2:	8b bb       	out	0x1b, r24	; 27
 2a4:	80 e4       	ldi	r24, 0x40	; 64
 2a6:	9c e9       	ldi	r25, 0x9C	; 156
 2a8:	20 e9       	ldi	r18, 0x90	; 144
 2aa:	31 e0       	ldi	r19, 0x01	; 1
 2ac:	f9 01       	movw	r30, r18
 2ae:	31 97       	sbiw	r30, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <main+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2b4:	d9 f7       	brne	.-10     	; 0x2ac <main+0x2a>
 2b6:	80 e4       	ldi	r24, 0x40	; 64
 2b8:	9c e9       	ldi	r25, 0x9C	; 156
 2ba:	20 e9       	ldi	r18, 0x90	; 144
 2bc:	31 e0       	ldi	r19, 0x01	; 1
 2be:	f9 01       	movw	r30, r18
 2c0:	31 97       	sbiw	r30, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <main+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c6:	d9 f7       	brne	.-10     	; 0x2be <main+0x3c>
 2c8:	80 e4       	ldi	r24, 0x40	; 64
 2ca:	9c e9       	ldi	r25, 0x9C	; 156
 2cc:	20 e9       	ldi	r18, 0x90	; 144
 2ce:	31 e0       	ldi	r19, 0x01	; 1
 2d0:	f9 01       	movw	r30, r18
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d8:	d9 f7       	brne	.-10     	; 0x2d0 <main+0x4e>
 2da:	80 e4       	ldi	r24, 0x40	; 64
 2dc:	9c e9       	ldi	r25, 0x9C	; 156
 2de:	20 e9       	ldi	r18, 0x90	; 144
 2e0:	31 e0       	ldi	r19, 0x01	; 1
 2e2:	f9 01       	movw	r30, r18
 2e4:	31 97       	sbiw	r30, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <main+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ea:	d9 f7       	brne	.-10     	; 0x2e2 <main+0x60>
	_delay_ms(4000);
	_delay_ms(4000);
    _delay_ms(4000);
	_delay_ms(4000);
		
	PORTA=0x00;
 2ec:	1b ba       	out	0x1b, r1	; 27
	//readsms();
	sendsms();
 2ee:	0e 94 c4 00 	call	0x188	; 0x188 <sendsms>
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <main+0x70>

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
