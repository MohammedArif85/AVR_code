
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000020d  00000000  00000000  0000017d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000102  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001e4  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000670  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000cf  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000098  00000000  00000000  0000075f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000007f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define stop cbi(PORTB,0); cbi(PORTB,1)

int main(void)
{
unsigned char c=0;
DDRA=0XFF;
  6c:	9f ef       	ldi	r25, 0xFF	; 255
  6e:	9a bb       	out	0x1a, r25	; 26
DDRB=0XFF;
  70:	97 bb       	out	0x17, r25	; 23
DDRC=0X00;
  72:	14 ba       	out	0x14, r1	; 20
DDRD=0X00;
  74:	11 ba       	out	0x11, r1	; 17
PORTC=0XF0;
  76:	80 ef       	ldi	r24, 0xF0	; 240
  78:	85 bb       	out	0x15, r24	; 21
PORTD=0xf0;
  7a:	82 bb       	out	0x12, r24	; 18
stop;
  7c:	c0 98       	cbi	0x18, 0	; 24
  7e:	c1 98       	cbi	0x18, 1	; 24
PORTA=0XFF;
  80:	9b bb       	out	0x1b, r25	; 27
  82:	80 e1       	ldi	r24, 0x10	; 16
  84:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  86:	2c e2       	ldi	r18, 0x2C	; 44
  88:	31 e0       	ldi	r19, 0x01	; 1
  8a:	f9 01       	movw	r30, r18
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <main+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  90:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  92:	d9 f7       	brne	.-10     	; 0x8a <main+0x1e>
_delay_ms(1000);

PORTA=0X00;
  94:	1b ba       	out	0x1b, r1	; 27
  96:	80 e1       	ldi	r24, 0x10	; 16
  98:	97 e2       	ldi	r25, 0x27	; 39
  9a:	2c e2       	ldi	r18, 0x2C	; 44
  9c:	31 e0       	ldi	r19, 0x01	; 1
  9e:	f9 01       	movw	r30, r18
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a6:	d9 f7       	brne	.-10     	; 0x9e <main+0x32>
  a8:	20 e0       	ldi	r18, 0x00	; 0
  aa:	48 e0       	ldi	r20, 0x08	; 8
  ac:	52 e5       	ldi	r21, 0x52	; 82
 _delay_ms(7);
 if(bit_is_clear(PINC,4))
 {
   
   while(bit_is_clear(PINC,4));
   PORTA^=0x01;
  ae:	31 e0       	ldi	r19, 0x01	; 1

 
while(1)
{
 
 cw;
  b0:	c0 98       	cbi	0x18, 0	; 24
  b2:	c1 9a       	sbi	0x18, 1	; 24
  b4:	ca 01       	movw	r24, r20
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x4a>
 _delay_ms(7);
 
 stop;
  ba:	c0 98       	cbi	0x18, 0	; 24
  bc:	c1 98       	cbi	0x18, 1	; 24
  be:	ca 01       	movw	r24, r20
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x54>
 _delay_ms(7);
 if(bit_is_clear(PINC,4))
  c4:	9c 99       	sbic	0x13, 4	; 19
  c6:	06 c0       	rjmp	.+12     	; 0xd4 <main+0x68>
 {
   
   while(bit_is_clear(PINC,4));
  c8:	9c 9b       	sbis	0x13, 4	; 19
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <main+0x5c>
   PORTA^=0x01;
  cc:	8b b3       	in	r24, 0x1b	; 27
  ce:	83 27       	eor	r24, r19
  d0:	8b bb       	out	0x1b, r24	; 27
   c++;
  d2:	2f 5f       	subi	r18, 0xFF	; 255
 
 }
 if(c>30)
  d4:	2f 31       	cpi	r18, 0x1F	; 31
  d6:	60 f3       	brcs	.-40     	; 0xb0 <main+0x44>
  {
   ccw;
  d8:	c1 98       	cbi	0x18, 1	; 24
  da:	c0 9a       	sbi	0x18, 0	; 24
  dc:	80 ee       	ldi	r24, 0xE0	; 224
  de:	9e e2       	ldi	r25, 0x2E	; 46
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x74>
   _delay_ms(4);
  stop;
  e4:	c0 98       	cbi	0x18, 0	; 24
  e6:	c1 98       	cbi	0x18, 1	; 24
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <main+0x7c>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
