
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  0000025e  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000064  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000308  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000167  00000000  00000000  000005ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002d1  00000000  00000000  00000751  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  00000a24  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000104  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000081  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000bd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2f 00 	jmp	0x5e	; 0x5e <__ctors_end>
   4:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
   8:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
   c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  10:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  14:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  18:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  1c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  20:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__vector_9>
  28:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  2c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  30:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  34:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  38:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  3c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  40:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  44:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  48:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  4c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  50:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>

00000054 <segdisp>:
  54:	7b 42 37 67 4e 6d 7d 43 7f 6f                       {B7gNm}C.o

0000005e <__ctors_end>:
  5e:	11 24       	eor	r1, r1
  60:	1f be       	out	0x3f, r1	; 63
  62:	cf e5       	ldi	r28, 0x5F	; 95
  64:	d4 e0       	ldi	r29, 0x04	; 4
  66:	de bf       	out	0x3e, r29	; 62
  68:	cd bf       	out	0x3d, r28	; 61

0000006a <__do_clear_bss>:
  6a:	10 e0       	ldi	r17, 0x00	; 0
  6c:	a0 e6       	ldi	r26, 0x60	; 96
  6e:	b0 e0       	ldi	r27, 0x00	; 0
  70:	01 c0       	rjmp	.+2      	; 0x74 <.do_clear_bss_start>

00000072 <.do_clear_bss_loop>:
  72:	1d 92       	st	X+, r1

00000074 <.do_clear_bss_start>:
  74:	a6 36       	cpi	r26, 0x66	; 102
  76:	b1 07       	cpc	r27, r17
  78:	e1 f7       	brne	.-8      	; 0x72 <.do_clear_bss_loop>
  7a:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  7e:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

00000082 <__bad_interrupt>:
  82:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000086 <__vector_9>:
 0b01111111,
 0b01101111
}; 
volatile unsigned char d1,d2,d3,d4,count=0,dot=0;
ISR(TIMER0_OVF_vect)
{
  86:	1f 92       	push	r1
  88:	0f 92       	push	r0
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	0f 92       	push	r0
  8e:	11 24       	eor	r1, r1
  90:	6f 93       	push	r22
  92:	7f 93       	push	r23
  94:	8f 93       	push	r24
  96:	9f 93       	push	r25
 count++;
  98:	80 91 60 00 	lds	r24, 0x0060
  9c:	8f 5f       	subi	r24, 0xFF	; 255
  9e:	80 93 60 00 	sts	0x0060, r24
 if(count%30==0)
  a2:	80 91 60 00 	lds	r24, 0x0060
  a6:	6e e1       	ldi	r22, 0x1E	; 30
  a8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <__udivmodqi4>
  ac:	99 23       	and	r25, r25
  ae:	51 f4       	brne	.+20     	; 0xc4 <__vector_9+0x3e>
 {
   if(dot)
  b0:	80 91 61 00 	lds	r24, 0x0061
  b4:	88 23       	and	r24, r24
  b6:	19 f0       	breq	.+6      	; 0xbe <__vector_9+0x38>
   dot=0x00;
  b8:	10 92 61 00 	sts	0x0061, r1
  bc:	03 c0       	rjmp	.+6      	; 0xc4 <__vector_9+0x3e>
   else
   dot=0x80;
  be:	80 e8       	ldi	r24, 0x80	; 128
  c0:	80 93 61 00 	sts	0x0061, r24
 }
 if(count==61)
  c4:	80 91 60 00 	lds	r24, 0x0060
  c8:	8d 33       	cpi	r24, 0x3D	; 61
  ca:	71 f5       	brne	.+92     	; 0x128 <__vector_9+0xa2>
 {
   count=0;
  cc:	10 92 60 00 	sts	0x0060, r1
   d1++;
  d0:	80 91 62 00 	lds	r24, 0x0062
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	80 93 62 00 	sts	0x0062, r24
   if(d1>9)
  da:	80 91 62 00 	lds	r24, 0x0062
  de:	8a 30       	cpi	r24, 0x0A	; 10
  e0:	38 f0       	brcs	.+14     	; 0xf0 <__vector_9+0x6a>
    {
      d1=0;
  e2:	10 92 62 00 	sts	0x0062, r1
	  d2++; 
  e6:	80 91 63 00 	lds	r24, 0x0063
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	80 93 63 00 	sts	0x0063, r24
     } 
	if(d2>5)
  f0:	80 91 63 00 	lds	r24, 0x0063
  f4:	86 30       	cpi	r24, 0x06	; 6
  f6:	38 f0       	brcs	.+14     	; 0x106 <__vector_9+0x80>
     {
      d2=0;
  f8:	10 92 63 00 	sts	0x0063, r1
	  d3++; 
  fc:	80 91 65 00 	lds	r24, 0x0065
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	80 93 65 00 	sts	0x0065, r24
	 } 
	 if(d3>9)
 106:	80 91 65 00 	lds	r24, 0x0065
 10a:	8a 30       	cpi	r24, 0x0A	; 10
 10c:	38 f0       	brcs	.+14     	; 0x11c <__vector_9+0x96>
	 {
	 d3=0;
 10e:	10 92 65 00 	sts	0x0065, r1
	 d4++;
 112:	80 91 64 00 	lds	r24, 0x0064
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 64 00 	sts	0x0064, r24
	 }
	 if(d4>5)
 11c:	80 91 64 00 	lds	r24, 0x0064
 120:	86 30       	cpi	r24, 0x06	; 6
 122:	10 f0       	brcs	.+4      	; 0x128 <__vector_9+0xa2>
	 {
	  d4=0;
 124:	10 92 64 00 	sts	0x0064, r1
	 }

 } 
}
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	7f 91       	pop	r23
 12e:	6f 91       	pop	r22
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <main>:
int main(void)
{
  DDRB=0x0F;
 13a:	8f e0       	ldi	r24, 0x0F	; 15
 13c:	87 bb       	out	0x17, r24	; 23
 DDRA=0xFF;
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	8a bb       	out	0x1a, r24	; 26
 PORTB=0x00;
 142:	18 ba       	out	0x18, r1	; 24
 PORTA=0x00;
 144:	1b ba       	out	0x1b, r1	; 27
 TCCR0=(1<<CS00)|(1<<CS02);//1024
 146:	85 e0       	ldi	r24, 0x05	; 5
 148:	83 bf       	out	0x33, r24	; 51
 TCNT0=0;
 14a:	12 be       	out	0x32, r1	; 50
 TIMSK=(1<<TOIE0);
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	89 bf       	out	0x39, r24	; 57
 
 d1=0;
 150:	10 92 62 00 	sts	0x0062, r1
 d2=0;
 154:	10 92 63 00 	sts	0x0063, r1
 d3=0;
 158:	10 92 65 00 	sts	0x0065, r1
 d4=0;
 15c:	10 92 64 00 	sts	0x0064, r1
 sei();
 160:	78 94       	sei
 
   while(1)
   {
    PORTB=0x01;
 162:	71 e0       	ldi	r23, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 164:	20 ed       	ldi	r18, 0xD0	; 208
 166:	37 e0       	ldi	r19, 0x07	; 7
	PORTA=pgm_read_byte(&segdisp[d1]);
	_delay_ms(1);
    PORTB=0x02;
 168:	62 e0       	ldi	r22, 0x02	; 2
	PORTA=pgm_read_byte(&segdisp[d2]);
	_delay_ms(1);
    PORTB=0x04;
 16a:	54 e0       	ldi	r21, 0x04	; 4
	PORTA=pgm_read_byte(&segdisp[d3])|dot;
	_delay_ms(1);
    PORTB=0x08;
 16c:	48 e0       	ldi	r20, 0x08	; 8
 d4=0;
 sei();
 
   while(1)
   {
    PORTB=0x01;
 16e:	78 bb       	out	0x18, r23	; 24
	PORTA=pgm_read_byte(&segdisp[d1]);
 170:	e0 91 62 00 	lds	r30, 0x0062
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	ec 5a       	subi	r30, 0xAC	; 172
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	e4 91       	lpm	r30, Z+
 17c:	eb bb       	out	0x1b, r30	; 27
 17e:	c9 01       	movw	r24, r18
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0x46>
	_delay_ms(1);
    PORTB=0x02;
 184:	68 bb       	out	0x18, r22	; 24
	PORTA=pgm_read_byte(&segdisp[d2]);
 186:	e0 91 63 00 	lds	r30, 0x0063
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	ec 5a       	subi	r30, 0xAC	; 172
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	e4 91       	lpm	r30, Z+
 192:	eb bb       	out	0x1b, r30	; 27
 194:	c9 01       	movw	r24, r18
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x5c>
	_delay_ms(1);
    PORTB=0x04;
 19a:	58 bb       	out	0x18, r21	; 24
	PORTA=pgm_read_byte(&segdisp[d3])|dot;
 19c:	e0 91 65 00 	lds	r30, 0x0065
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	ec 5a       	subi	r30, 0xAC	; 172
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	e4 91       	lpm	r30, Z+
 1a8:	80 91 61 00 	lds	r24, 0x0061
 1ac:	e8 2b       	or	r30, r24
 1ae:	eb bb       	out	0x1b, r30	; 27
 1b0:	c9 01       	movw	r24, r18
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x78>
	_delay_ms(1);
    PORTB=0x08;
 1b6:	48 bb       	out	0x18, r20	; 24
	PORTA=pgm_read_byte(&segdisp[d4]);
 1b8:	e0 91 64 00 	lds	r30, 0x0064
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	ec 5a       	subi	r30, 0xAC	; 172
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	e4 91       	lpm	r30, Z+
 1c4:	eb bb       	out	0x1b, r30	; 27
 1c6:	c9 01       	movw	r24, r18
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0x8e>
 1cc:	d0 cf       	rjmp	.-96     	; 0x16e <main+0x34>

000001ce <__udivmodqi4>:
 1ce:	99 1b       	sub	r25, r25
 1d0:	79 e0       	ldi	r23, 0x09	; 9
 1d2:	04 c0       	rjmp	.+8      	; 0x1dc <__udivmodqi4_ep>

000001d4 <__udivmodqi4_loop>:
 1d4:	99 1f       	adc	r25, r25
 1d6:	96 17       	cp	r25, r22
 1d8:	08 f0       	brcs	.+2      	; 0x1dc <__udivmodqi4_ep>
 1da:	96 1b       	sub	r25, r22

000001dc <__udivmodqi4_ep>:
 1dc:	88 1f       	adc	r24, r24
 1de:	7a 95       	dec	r23
 1e0:	c9 f7       	brne	.-14     	; 0x1d4 <__udivmodqi4_loop>
 1e2:	80 95       	com	r24
 1e4:	08 95       	ret

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
