
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00001d54  00001de8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  008000c4  008000c4  00001e4c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003b5  00000000  00000000  00001e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000204f  00000000  00000000  00002221  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000037c  00000000  00000000  00004270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001954  00000000  00000000  000045ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  00005f40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ed  00000000  00000000  00006220  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000126f  00000000  00000000  0000670d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  0000797c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c2 01 	jmp	0x384	; 0x384 <__ctors_end>
       4:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
       8:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
       c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      10:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      14:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      18:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      1c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      20:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      24:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      28:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      2c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      30:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      34:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      38:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      3c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      40:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      44:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      48:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      4c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      50:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>

00000054 <__c.2448>:
      54:	48 54 54 50 2f 31 2e 30 20 34 30 31 20 55 6e 61     HTTP/1.0 401 Una
      64:	75 74 68 6f 72 69 7a 65 64 0d 0a 43 6f 6e 74 65     uthorized..Conte
      74:	6e 74 2d 54 79 70 65 3a 20 74 65 78 74 2f 68 74     nt-Type: text/ht
      84:	6d 6c 0d 0a 0d 0a 3c 68 31 3e 34 30 31 20 55 6e     ml....<h1>401 Un
      94:	61 75 74 68 6f 72 69 7a 65 64 3c 2f 68 31 3e 00     authorized</h1>.

000000a4 <__c.2446>:
      a4:	3c 70 3e 55 73 61 67 65 3a 20 68 74 74 70 3a 2f     <p>Usage: http:/
      b4:	2f 68 6f 73 74 5f 6f 72 5f 69 70 2f 70 61 73 73     /host_or_ip/pass
      c4:	77 6f 72 64 3c 2f 70 3e 0a 00                       word</p>..

000000ce <__c.2444>:
      ce:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
      de:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
      ee:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

000000fb <__c.2441>:
      fb:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     10b:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     11b:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 3c 68 31 3e     ext/html....<h1>
     12b:	32 30 30 20 4f 4b 3c 2f 68 31 3e 00                 200 OK</h1>.

00000137 <__c.2409>:
     137:	3c 2f 63 65 6e 74 65 72 3e 3c 68 72 3e 3c 62 72     </center><hr><br
     147:	3e 3c 68 32 3e 53 68 61 63 68 69 20 41 77 61 73     ><h2>Shachi Awas
     157:	74 68 69 3c 2f 68 32 3e 0a 00                       thi</h2>..

00000161 <__c.2407>:
     161:	2f 31 22 3e 53 77 69 74 63 68 20 6f 6e 3c 2f 61     /1">Switch on</a
     171:	3e 3c 70 3e 00                                      ><p>.

00000176 <__c.2405>:
     176:	2f 30 22 3e 53 77 69 74 63 68 20 6f 66 66 3c 2f     /0">Switch off</
     186:	61 3e 3c 70 3e 00                                   a><p>.

0000018c <__c.2403>:
     18c:	20 3c 73 6d 61 6c 6c 3e 3c 61 20 68 72 65 66 3d      <small><a href=
     19c:	22 2e 22 3e 5b 72 65 66 72 65 73 68 20 73 74 61     ".">[refresh sta
     1ac:	74 75 73 5d 3c 2f 61 3e 3c 2f 73 6d 61 6c 6c 3e     tus]</a></small>
     1bc:	3c 2f 70 3e 0a 3c 70 3e 3c 61 20 68 72 65 66 3d     </p>.<p><a href=
     1cc:	22 2e 00                                            "..

000001cf <__c.2401>:
     1cf:	4f 46 46 00                                         OFF.

000001d3 <__c.2399>:
     1d3:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 23 46 46     <font color="#FF
     1e3:	30 30 30 30 22 3e 20 4f 4e 3c 2f 66 6f 6e 74 3e     0000"> ON</font>
     1f3:	00                                                  .

000001f4 <__c.2397>:
     1f4:	3c 63 65 6e 74 65 72 3e 3c 70 3e 4f 75 74 70 75     <center><p>Outpu
     204:	74 20 69 73 3a 20 00                                t is: .

0000020b <__c.2395>:
     20b:	20 57 41 54 54 53 2f 73 71 2e 6d 65 74 65 72 3c      WATTS/sq.meter<
     21b:	2f 63 65 6e 74 65 72 3e 3c 2f 68 32 3e 3c 2f 70     /center></h2></p
     22b:	3e 00                                               >.

0000022d <__c.2393>:
     22d:	3c 63 65 6e 74 65 72 3e 3c 70 3e 3c 68 32 3e 49     <center><p><h2>I
     23d:	72 72 61 64 69 61 6e 63 65 20 69 73 3a 20 00        rradiance is: .

0000024c <__c.2391>:
     24c:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 23 30 30     <font color="#00
     25c:	46 46 30 30 22 3e 3c 63 65 6e 74 65 72 3e 3c 48     FF00"><center><H
     26c:	31 3e 53 6f 6c 61 72 20 49 72 72 61 64 69 61 6e     1>Solar Irradian
     27c:	63 65 20 4d 65 74 65 72 3c 2f 48 31 3e 3c 2f 63     ce Meter</H1></c
     28c:	65 6e 74 65 72 3e 3c 2f 66 6f 6e 74 3e 00           enter></font>.

0000029a <__c.2389>:
     29a:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     2aa:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     2ba:	65 78 74 2f 68 74 6d 6c 0d 0a 50 72 61 67 6d 61     ext/html..Pragma
     2ca:	3a 20 6e 6f 2d 63 61 63 68 65 0d 0a 52 65 66 72     : no-cache..Refr
     2da:	65 73 68 3a 20 32 30 0d 0a 0d 0a 00                 esh: 20.....

000002e6 <__c.2376>:
     2e6:	61 64 64 20 61 20 74 72 61 69 6c 69 6e 67 20 73     add a trailing s
     2f6:	6c 61 73 68 20 74 6f 20 74 68 65 20 75 72 6c 0a     lash to the url.
     306:	00                                                  .

00000307 <__c.2374>:
     307:	3c 68 31 3e 33 30 31 20 4d 6f 76 65 64 20 50 65     <h1>301 Moved Pe
     317:	72 6d 61 6e 65 6e 74 6c 79 3c 2f 68 31 3e 0a 00     rmanently</h1>..

00000327 <__c.2372>:
     327:	2f 0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a     /..Content-Type:
     337:	20 74 65 78 74 2f 68 74 6d 6c 0d 0a 50 72 61 67      text/html..Prag
     347:	6d 61 3a 20 6e 6f 2d 63 61 63 68 65 0d 0a 0d 0a     ma: no-cache....
     357:	00                                                  .

00000358 <__c.2370>:
     358:	48 54 54 50 2f 31 2e 30 20 33 30 31 20 4d 6f 76     HTTP/1.0 301 Mov
     368:	65 64 20 50 65 72 6d 61 6e 65 6e 74 6c 79 0d 0a     ed Permanently..
     378:	4c 6f 63 61 74 69 6f 6e 3a 20 00 00                 Location: ..

00000384 <__ctors_end>:
     384:	11 24       	eor	r1, r1
     386:	1f be       	out	0x3f, r1	; 63
     388:	cf e5       	ldi	r28, 0x5F	; 95
     38a:	d4 e0       	ldi	r29, 0x04	; 4
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	cd bf       	out	0x3d, r28	; 61

00000390 <__do_copy_data>:
     390:	10 e0       	ldi	r17, 0x00	; 0
     392:	a0 e6       	ldi	r26, 0x60	; 96
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	e4 e5       	ldi	r30, 0x54	; 84
     398:	fd e1       	ldi	r31, 0x1D	; 29
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <.do_copy_data_start>

0000039c <.do_copy_data_loop>:
     39c:	05 90       	lpm	r0, Z+
     39e:	0d 92       	st	X+, r0

000003a0 <.do_copy_data_start>:
     3a0:	a4 3c       	cpi	r26, 0xC4	; 196
     3a2:	b1 07       	cpc	r27, r17
     3a4:	d9 f7       	brne	.-10     	; 0x39c <.do_copy_data_loop>

000003a6 <__do_clear_bss>:
     3a6:	10 e0       	ldi	r17, 0x00	; 0
     3a8:	a4 ec       	ldi	r26, 0xC4	; 196
     3aa:	b0 e0       	ldi	r27, 0x00	; 0
     3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <.do_clear_bss_start>

000003ae <.do_clear_bss_loop>:
     3ae:	1d 92       	st	X+, r1

000003b0 <.do_clear_bss_start>:
     3b0:	a4 3e       	cpi	r26, 0xE4	; 228
     3b2:	b1 07       	cpc	r27, r17
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <.do_clear_bss_loop>
     3b6:	0e 94 5d 09 	call	0x12ba	; 0x12ba <main>
     3ba:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <_exit>

000003be <__bad_interrupt>:
     3be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c2 <lcd_reset>:
#define LCD_RW      0x02
#define LCD_EN      0x04

void lcd_reset(void)
{
        lcd_port = 0xFF;
     3c2:	8f ef       	ldi	r24, 0xFF	; 255
     3c4:	85 bb       	out	0x15, r24	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3c6:	80 e6       	ldi	r24, 0x60	; 96
     3c8:	9a ee       	ldi	r25, 0xEA	; 234
     3ca:	01 97       	sbiw	r24, 0x01	; 1
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <lcd_reset+0x8>
        _delay_ms(20);
        lcd_port = 0x30+LCD_EN;
     3ce:	94 e3       	ldi	r25, 0x34	; 52
     3d0:	95 bb       	out	0x15, r25	; 21
        lcd_port = 0x30;
     3d2:	80 e3       	ldi	r24, 0x30	; 48
     3d4:	85 bb       	out	0x15, r24	; 21
     3d6:	e0 e3       	ldi	r30, 0x30	; 48
     3d8:	f5 e7       	ldi	r31, 0x75	; 117
     3da:	31 97       	sbiw	r30, 0x01	; 1
     3dc:	f1 f7       	brne	.-4      	; 0x3da <lcd_reset+0x18>
        _delay_ms(10);
        lcd_port = 0x30+LCD_EN;
     3de:	95 bb       	out	0x15, r25	; 21
        lcd_port = 0x30;
     3e0:	85 bb       	out	0x15, r24	; 21
     3e2:	28 eb       	ldi	r18, 0xB8	; 184
     3e4:	3b e0       	ldi	r19, 0x0B	; 11
     3e6:	f9 01       	movw	r30, r18
     3e8:	31 97       	sbiw	r30, 0x01	; 1
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <lcd_reset+0x26>
        _delay_ms(1);
        lcd_port = 0x30+LCD_EN;
     3ec:	95 bb       	out	0x15, r25	; 21
        lcd_port = 0x30;
     3ee:	85 bb       	out	0x15, r24	; 21
     3f0:	c9 01       	movw	r24, r18
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <lcd_reset+0x30>
        _delay_ms(1);
        lcd_port = 0x20+LCD_EN;
     3f6:	84 e2       	ldi	r24, 0x24	; 36
     3f8:	85 bb       	out	0x15, r24	; 21
        lcd_port = 0x20;
     3fa:	80 e2       	ldi	r24, 0x20	; 32
     3fc:	85 bb       	out	0x15, r24	; 21
     3fe:	c9 01       	movw	r24, r18
     400:	01 97       	sbiw	r24, 0x01	; 1
     402:	f1 f7       	brne	.-4      	; 0x400 <lcd_reset+0x3e>
        _delay_ms(1);
}
     404:	08 95       	ret

00000406 <lcd_cmd>:
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
     406:	38 2f       	mov	r19, r24
     408:	30 7f       	andi	r19, 0xF0	; 240
     40a:	23 2f       	mov	r18, r19
     40c:	24 60       	ori	r18, 0x04	; 4
     40e:	25 bb       	out	0x15, r18	; 21
        lcd_port = (cmd & 0xF0);
     410:	35 bb       	out	0x15, r19	; 21
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	24 e0       	ldi	r18, 0x04	; 4
     416:	88 0f       	add	r24, r24
     418:	99 1f       	adc	r25, r25
     41a:	2a 95       	dec	r18
     41c:	e1 f7       	brne	.-8      	; 0x416 <lcd_cmd+0x10>
     41e:	28 2f       	mov	r18, r24
     420:	24 60       	ori	r18, 0x04	; 4
     422:	25 bb       	out	0x15, r18	; 21
        lcd_port = ((cmd << 4) & 0xF0);
     424:	85 bb       	out	0x15, r24	; 21
     426:	80 e7       	ldi	r24, 0x70	; 112
     428:	97 e1       	ldi	r25, 0x17	; 23
     42a:	fc 01       	movw	r30, r24
     42c:	31 97       	sbiw	r30, 0x01	; 1
     42e:	f1 f7       	brne	.-4      	; 0x42c <lcd_cmd+0x26>

      

        _delay_ms(2);
        _delay_ms(2);
}
     430:	01 97       	sbiw	r24, 0x01	; 1
     432:	f1 f7       	brne	.-4      	; 0x430 <lcd_cmd+0x2a>
     434:	08 95       	ret

00000436 <lcd_init>:

void lcd_init (void)
{       DDRC=0xFF;
     436:	8f ef       	ldi	r24, 0xFF	; 255
     438:	84 bb       	out	0x14, r24	; 20
        PORTC=0x00; 
     43a:	15 ba       	out	0x15, r1	; 21
        lcd_reset();         // Call LCD reset
     43c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <lcd_reset>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
     440:	84 e2       	ldi	r24, 0x24	; 36
     442:	85 bb       	out	0x15, r24	; 21
        lcd_port = (cmd & 0xF0);
     444:	80 e2       	ldi	r24, 0x20	; 32
     446:	85 bb       	out	0x15, r24	; 21
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
     448:	54 e8       	ldi	r21, 0x84	; 132
     44a:	55 bb       	out	0x15, r21	; 21
        lcd_port = ((cmd << 4) & 0xF0);
     44c:	40 e8       	ldi	r20, 0x80	; 128
     44e:	45 bb       	out	0x15, r20	; 21
     450:	20 e7       	ldi	r18, 0x70	; 112
     452:	37 e1       	ldi	r19, 0x17	; 23
     454:	c9 01       	movw	r24, r18
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <lcd_init+0x20>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
     45a:	c9 01       	movw	r24, r18
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <lcd_init+0x26>
     460:	94 e0       	ldi	r25, 0x04	; 4
     462:	95 bb       	out	0x15, r25	; 21
        lcd_port = (cmd & 0xF0);
     464:	15 ba       	out	0x15, r1	; 21
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
     466:	84 ec       	ldi	r24, 0xC4	; 196
     468:	85 bb       	out	0x15, r24	; 21
        lcd_port = ((cmd << 4) & 0xF0);
     46a:	80 ec       	ldi	r24, 0xC0	; 192
     46c:	85 bb       	out	0x15, r24	; 21
     46e:	f9 01       	movw	r30, r18
     470:	31 97       	sbiw	r30, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <__stack+0x11>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
     474:	f9 01       	movw	r30, r18
     476:	31 97       	sbiw	r30, 0x01	; 1
     478:	f1 f7       	brne	.-4      	; 0x476 <__stack+0x17>
     47a:	95 bb       	out	0x15, r25	; 21
        lcd_port = (cmd & 0xF0);
     47c:	15 ba       	out	0x15, r1	; 21
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
     47e:	84 e6       	ldi	r24, 0x64	; 100
     480:	85 bb       	out	0x15, r24	; 21
        lcd_port = ((cmd << 4) & 0xF0);
     482:	80 e6       	ldi	r24, 0x60	; 96
     484:	85 bb       	out	0x15, r24	; 21
     486:	f9 01       	movw	r30, r18
     488:	31 97       	sbiw	r30, 0x01	; 1
     48a:	f1 f7       	brne	.-4      	; 0x488 <__stack+0x29>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
     48c:	f9 01       	movw	r30, r18
     48e:	31 97       	sbiw	r30, 0x01	; 1
     490:	f1 f7       	brne	.-4      	; 0x48e <__stack+0x2f>
     492:	55 bb       	out	0x15, r21	; 21
        lcd_port = (cmd & 0xF0);
     494:	45 bb       	out	0x15, r20	; 21
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
     496:	95 bb       	out	0x15, r25	; 21
        lcd_port = ((cmd << 4) & 0xF0);
     498:	15 ba       	out	0x15, r1	; 21
     49a:	c9 01       	movw	r24, r18
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <__stack+0x3d>
        lcd_reset();         // Call LCD reset
        lcd_cmd(0x28);       // 4-bit mode - 2 line - 5x7 font.
        lcd_cmd(0x0C);       // Display on cursor - off .
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 }
     4a0:	c9 01       	movw	r24, r18
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	f1 f7       	brne	.-4      	; 0x4a2 <__stack+0x43>
     4a6:	08 95       	ret

000004a8 <lcd_data>:


void lcd_data (unsigned char dat)
{
        lcd_port = ((dat & 0xF0)|LCD_EN|LCD_RS);
     4a8:	98 2f       	mov	r25, r24
     4aa:	90 7f       	andi	r25, 0xF0	; 240
     4ac:	29 2f       	mov	r18, r25
     4ae:	25 60       	ori	r18, 0x05	; 5
     4b0:	25 bb       	out	0x15, r18	; 21
        lcd_port = ((dat & 0xF0)|LCD_RS);
     4b2:	91 60       	ori	r25, 0x01	; 1
     4b4:	95 bb       	out	0x15, r25	; 21
		
		lcd_port = (((dat << 4) & 0xF0)|LCD_EN|LCD_RS);
     4b6:	82 95       	swap	r24
     4b8:	80 7f       	andi	r24, 0xF0	; 240
     4ba:	98 2f       	mov	r25, r24
     4bc:	95 60       	ori	r25, 0x05	; 5
     4be:	95 bb       	out	0x15, r25	; 21
        lcd_port = (((dat << 4) & 0xF0)|LCD_RS);
     4c0:	81 60       	ori	r24, 0x01	; 1
     4c2:	85 bb       	out	0x15, r24	; 21
     4c4:	80 e7       	ldi	r24, 0x70	; 112
     4c6:	97 e1       	ldi	r25, 0x17	; 23
     4c8:	fc 01       	movw	r30, r24
     4ca:	31 97       	sbiw	r30, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <lcd_data+0x22>
       
      

       _delay_ms(2);
       _delay_ms(2);
}
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	f1 f7       	brne	.-4      	; 0x4ce <lcd_data+0x26>
     4d2:	08 95       	ret

000004d4 <lcd_puts>:
void lcd_puts(char *aaa)
{
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	ec 01       	movw	r28, r24
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <lcd_puts+0xc>
unsigned int i;
for(i=0;aaa[i]!=0;i++)
lcd_data(aaa[i]);
     4dc:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_data>
       _delay_ms(2);
}
void lcd_puts(char *aaa)
{
unsigned int i;
for(i=0;aaa[i]!=0;i++)
     4e0:	89 91       	ld	r24, Y+
     4e2:	88 23       	and	r24, r24
     4e4:	d9 f7       	brne	.-10     	; 0x4dc <lcd_puts+0x8>
lcd_data(aaa[i]);

}
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <enc28j60ReadOp>:
//
#define waitspi() while(!(SPSR&(1<<SPIF)))

uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
{
        CSACTIVE;
     4ec:	c4 98       	cbi	0x18, 4	; 24
        // issue read command
        SPDR = op | (address & ADDR_MASK);
     4ee:	96 2f       	mov	r25, r22
     4f0:	9f 71       	andi	r25, 0x1F	; 31
     4f2:	98 2b       	or	r25, r24
     4f4:	9f b9       	out	0x0f, r25	; 15
        waitspi();
     4f6:	77 9b       	sbis	0x0e, 7	; 14
     4f8:	fe cf       	rjmp	.-4      	; 0x4f6 <enc28j60ReadOp+0xa>
        // read data
        SPDR = 0x00;
     4fa:	1f b8       	out	0x0f, r1	; 15
        waitspi();
     4fc:	77 9b       	sbis	0x0e, 7	; 14
     4fe:	fe cf       	rjmp	.-4      	; 0x4fc <enc28j60ReadOp+0x10>
        // do dummy read if needed (for mac and mii, see datasheet page 29)
        if(address & 0x80)
     500:	67 ff       	sbrs	r22, 7
     502:	03 c0       	rjmp	.+6      	; 0x50a <enc28j60ReadOp+0x1e>
        {
                SPDR = 0x00;
     504:	1f b8       	out	0x0f, r1	; 15
                waitspi();
     506:	77 9b       	sbis	0x0e, 7	; 14
     508:	fe cf       	rjmp	.-4      	; 0x506 <enc28j60ReadOp+0x1a>
        }
        // release CS
        CSPASSIVE;
     50a:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
     50c:	8f b1       	in	r24, 0x0f	; 15
}
     50e:	08 95       	ret

00000510 <enc28j60WriteOp>:

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     510:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     512:	6f 71       	andi	r22, 0x1F	; 31
     514:	68 2b       	or	r22, r24
     516:	6f b9       	out	0x0f, r22	; 15
        waitspi();
     518:	77 9b       	sbis	0x0e, 7	; 14
     51a:	fe cf       	rjmp	.-4      	; 0x518 <enc28j60WriteOp+0x8>
        // write data
        SPDR = data;
     51c:	4f b9       	out	0x0f, r20	; 15
        waitspi();
     51e:	77 9b       	sbis	0x0e, 7	; 14
     520:	fe cf       	rjmp	.-4      	; 0x51e <enc28j60WriteOp+0xe>
        CSPASSIVE;
     522:	c4 9a       	sbi	0x18, 4	; 24
}
     524:	08 95       	ret

00000526 <enc28j60ReadBuffer>:

void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
{
     526:	ac 01       	movw	r20, r24
     528:	fb 01       	movw	r30, r22
        CSACTIVE;
     52a:	c4 98       	cbi	0x18, 4	; 24
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
     52c:	8a e3       	ldi	r24, 0x3A	; 58
     52e:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     530:	77 9b       	sbis	0x0e, 7	; 14
     532:	fe cf       	rjmp	.-4      	; 0x530 <enc28j60ReadBuffer+0xa>
     534:	9a 01       	movw	r18, r20
     536:	df 01       	movw	r26, r30
     538:	07 c0       	rjmp	.+14     	; 0x548 <enc28j60ReadBuffer+0x22>
        while(len)
        {
                len--;
                // read data
                SPDR = 0x00;
     53a:	1f b8       	out	0x0f, r1	; 15
                waitspi();
     53c:	77 9b       	sbis	0x0e, 7	; 14
     53e:	fe cf       	rjmp	.-4      	; 0x53c <enc28j60ReadBuffer+0x16>
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     540:	21 50       	subi	r18, 0x01	; 1
     542:	30 40       	sbci	r19, 0x00	; 0
                // read data
                SPDR = 0x00;
                waitspi();
                *data = SPDR;
     544:	8f b1       	in	r24, 0x0f	; 15
     546:	8d 93       	st	X+, r24
{
        CSACTIVE;
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
        waitspi();
        while(len)
     548:	21 15       	cp	r18, r1
     54a:	31 05       	cpc	r19, r1
     54c:	b1 f7       	brne	.-20     	; 0x53a <enc28j60ReadBuffer+0x14>
                SPDR = 0x00;
                waitspi();
                *data = SPDR;
                data++;
        }
        *data='\0';
     54e:	e4 0f       	add	r30, r20
     550:	f5 1f       	adc	r31, r21
     552:	10 82       	st	Z, r1
        CSPASSIVE;
     554:	c4 9a       	sbi	0x18, 4	; 24
}
     556:	08 95       	ret

00000558 <enc28j60WriteBuffer>:

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
     558:	9c 01       	movw	r18, r24
     55a:	fb 01       	movw	r30, r22
        CSACTIVE;
     55c:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
     55e:	8a e7       	ldi	r24, 0x7A	; 122
     560:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     562:	77 9b       	sbis	0x0e, 7	; 14
     564:	fe cf       	rjmp	.-4      	; 0x562 <enc28j60WriteBuffer+0xa>
     566:	07 c0       	rjmp	.+14     	; 0x576 <enc28j60WriteBuffer+0x1e>
        while(len)
        {
                len--;
                // write data
                SPDR = *data;
     568:	80 81       	ld	r24, Z
     56a:	8f b9       	out	0x0f, r24	; 15
                data++;
                waitspi();
     56c:	77 9b       	sbis	0x0e, 7	; 14
     56e:	fe cf       	rjmp	.-4      	; 0x56c <enc28j60WriteBuffer+0x14>
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     570:	21 50       	subi	r18, 0x01	; 1
     572:	30 40       	sbci	r19, 0x00	; 0
                // write data
                SPDR = *data;
                data++;
     574:	31 96       	adiw	r30, 0x01	; 1
{
        CSACTIVE;
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
     576:	21 15       	cp	r18, r1
     578:	31 05       	cpc	r19, r1
     57a:	b1 f7       	brne	.-20     	; 0x568 <enc28j60WriteBuffer+0x10>
                // write data
                SPDR = *data;
                data++;
                waitspi();
        }
        CSPASSIVE;
     57c:	c4 9a       	sbi	0x18, 4	; 24
}
     57e:	08 95       	ret

00000580 <enc28j60SetBank>:

void enc28j60SetBank(uint8_t address)
{
     580:	48 2f       	mov	r20, r24
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
     582:	28 2f       	mov	r18, r24
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	20 76       	andi	r18, 0x60	; 96
     588:	30 70       	andi	r19, 0x00	; 0
     58a:	80 91 c8 00 	lds	r24, 0x00C8
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	28 17       	cp	r18, r24
     592:	39 07       	cpc	r19, r25
     594:	d9 f0       	breq	.+54     	; 0x5cc <enc28j60SetBank+0x4c>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     596:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     598:	8f eb       	ldi	r24, 0xBF	; 191
     59a:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     59c:	77 9b       	sbis	0x0e, 7	; 14
     59e:	fe cf       	rjmp	.-4      	; 0x59c <enc28j60SetBank+0x1c>
        // write data
        SPDR = data;
     5a0:	83 e0       	ldi	r24, 0x03	; 3
     5a2:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     5a4:	77 9b       	sbis	0x0e, 7	; 14
     5a6:	fe cf       	rjmp	.-4      	; 0x5a4 <enc28j60SetBank+0x24>
        CSPASSIVE;
     5a8:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     5aa:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     5ac:	8f e9       	ldi	r24, 0x9F	; 159
     5ae:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     5b0:	77 9b       	sbis	0x0e, 7	; 14
     5b2:	fe cf       	rjmp	.-4      	; 0x5b0 <enc28j60SetBank+0x30>
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
     5b4:	55 e0       	ldi	r21, 0x05	; 5
     5b6:	35 95       	asr	r19
     5b8:	27 95       	ror	r18
     5ba:	5a 95       	dec	r21
     5bc:	e1 f7       	brne	.-8      	; 0x5b6 <enc28j60SetBank+0x36>
        CSACTIVE;
        // issue write command
        SPDR = op | (address & ADDR_MASK);
        waitspi();
        // write data
        SPDR = data;
     5be:	2f b9       	out	0x0f, r18	; 15
        waitspi();
     5c0:	77 9b       	sbis	0x0e, 7	; 14
     5c2:	fe cf       	rjmp	.-4      	; 0x5c0 <enc28j60SetBank+0x40>
        CSPASSIVE;
     5c4:	c4 9a       	sbi	0x18, 4	; 24
        if((address & BANK_MASK) != Enc28j60Bank)
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
                Enc28j60Bank = (address & BANK_MASK);
     5c6:	40 76       	andi	r20, 0x60	; 96
     5c8:	40 93 c8 00 	sts	0x00C8, r20
     5cc:	08 95       	ret

000005ce <enc28j60Read>:
        }
}

uint8_t enc28j60Read(uint8_t address)
{
     5ce:	1f 93       	push	r17
     5d0:	18 2f       	mov	r17, r24
        // set the bank
        enc28j60SetBank(address);
     5d2:	0e 94 c0 02 	call	0x580	; 0x580 <enc28j60SetBank>
        // do the read
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	61 2f       	mov	r22, r17
     5da:	0e 94 76 02 	call	0x4ec	; 0x4ec <enc28j60ReadOp>
}
     5de:	1f 91       	pop	r17
     5e0:	08 95       	ret

000005e2 <enc28j60Write>:
	
	return (enc28j60Read(MIRDH));
}

void enc28j60Write(uint8_t address, uint8_t data)
{
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	18 2f       	mov	r17, r24
     5e8:	06 2f       	mov	r16, r22
        // set the bank
        enc28j60SetBank(address);
     5ea:	0e 94 c0 02 	call	0x580	; 0x580 <enc28j60SetBank>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     5ee:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     5f0:	1f 71       	andi	r17, 0x1F	; 31
     5f2:	10 64       	ori	r17, 0x40	; 64
     5f4:	1f b9       	out	0x0f, r17	; 15
        waitspi();
     5f6:	77 9b       	sbis	0x0e, 7	; 14
     5f8:	fe cf       	rjmp	.-4      	; 0x5f6 <enc28j60Write+0x14>
        // write data
        SPDR = data;
     5fa:	0f b9       	out	0x0f, r16	; 15
        waitspi();
     5fc:	77 9b       	sbis	0x0e, 7	; 14
     5fe:	fe cf       	rjmp	.-4      	; 0x5fc <enc28j60Write+0x1a>
        CSPASSIVE;
     600:	c4 9a       	sbi	0x18, 4	; 24
{
        // set the bank
        enc28j60SetBank(address);
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
}
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	08 95       	ret

00000608 <enc28j60PhyReadH>:
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
}

// read upper 8 bits
uint16_t enc28j60PhyReadH(uint8_t address)
{
     608:	68 2f       	mov	r22, r24

	// Set the right address and start the register read operation
	enc28j60Write(MIREGADR, address);
     60a:	84 ed       	ldi	r24, 0xD4	; 212
     60c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	enc28j60Write(MICMD, MICMD_MIIRD);
     610:	82 ed       	ldi	r24, 0xD2	; 210
     612:	61 e0       	ldi	r22, 0x01	; 1
     614:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     618:	8c e3       	ldi	r24, 0x3C	; 60
     61a:	8a 95       	dec	r24
     61c:	f1 f7       	brne	.-4      	; 0x61a <enc28j60PhyReadH+0x12>
        _delay_us(15);

	// wait until the PHY read completes
	while(enc28j60Read(MISTAT) & MISTAT_BUSY);
     61e:	8a ee       	ldi	r24, 0xEA	; 234
     620:	0e 94 e7 02 	call	0x5ce	; 0x5ce <enc28j60Read>
     624:	80 fd       	sbrc	r24, 0
     626:	fb cf       	rjmp	.-10     	; 0x61e <enc28j60PhyReadH+0x16>

	// reset reading bit
	enc28j60Write(MICMD, 0x00);
     628:	82 ed       	ldi	r24, 0xD2	; 210
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	
	return (enc28j60Read(MIRDH));
     630:	89 ed       	ldi	r24, 0xD9	; 217
     632:	0e 94 e7 02 	call	0x5ce	; 0x5ce <enc28j60Read>
}
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	08 95       	ret

0000063a <enc28j60PhyWrite>:
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
}

void enc28j60PhyWrite(uint8_t address, uint16_t data)
{
     63a:	0f 93       	push	r16
     63c:	1f 93       	push	r17
     63e:	98 2f       	mov	r25, r24
     640:	16 2f       	mov	r17, r22
     642:	07 2f       	mov	r16, r23
        // set the PHY register address
        enc28j60Write(MIREGADR, address);
     644:	84 ed       	ldi	r24, 0xD4	; 212
     646:	69 2f       	mov	r22, r25
     648:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
        // write the PHY data
        enc28j60Write(MIWRL, data);
     64c:	86 ed       	ldi	r24, 0xD6	; 214
     64e:	61 2f       	mov	r22, r17
     650:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
        enc28j60Write(MIWRH, data>>8);
     654:	87 ed       	ldi	r24, 0xD7	; 215
     656:	60 2f       	mov	r22, r16
     658:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
     65c:	1c e3       	ldi	r17, 0x3C	; 60
     65e:	03 c0       	rjmp	.+6      	; 0x666 <enc28j60PhyWrite+0x2c>
     660:	81 2f       	mov	r24, r17
     662:	8a 95       	dec	r24
     664:	f1 f7       	brne	.-4      	; 0x662 <enc28j60PhyWrite+0x28>
        // wait until the PHY write completes
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
     666:	8a ee       	ldi	r24, 0xEA	; 234
     668:	0e 94 e7 02 	call	0x5ce	; 0x5ce <enc28j60Read>
     66c:	80 fd       	sbrc	r24, 0
     66e:	f8 cf       	rjmp	.-16     	; 0x660 <enc28j60PhyWrite+0x26>
                _delay_us(15);
        }
}
     670:	1f 91       	pop	r17
     672:	0f 91       	pop	r16
     674:	08 95       	ret

00000676 <enc28j60clkout>:

void enc28j60clkout(uint8_t clk)
{
        //setup clkout: 2 is 12.5MHz:
	enc28j60Write(ECOCON, clk & 0x7);
     676:	68 2f       	mov	r22, r24
     678:	67 70       	andi	r22, 0x07	; 7
     67a:	85 e7       	ldi	r24, 0x75	; 117
     67c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
}
     680:	08 95       	ret

00000682 <enc28j60Init>:

void enc28j60Init(uint8_t* macaddr)
{
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	ec 01       	movw	r28, r24
	// initialize I/O
        // ss as output:
	ENC28J60_CONTROL_DDR |= 1<<ENC28J60_CONTROL_CS;
     688:	bc 9a       	sbi	0x17, 4	; 23
	CSPASSIVE; // ss=0
     68a:	c4 9a       	sbi	0x18, 4	; 24
        //	
	ENC28J60_CONTROL_DDR  |= 1<<ENC28J60_CONTROL_SI | 1<<ENC28J60_CONTROL_SCK; // mosi, sck output
     68c:	87 b3       	in	r24, 0x17	; 23
     68e:	80 6a       	ori	r24, 0xA0	; 160
     690:	87 bb       	out	0x17, r24	; 23
	cbi(ENC28J60_CONTROL_DDR,ENC28J60_CONTROL_SO); // MISO is input
     692:	be 98       	cbi	0x17, 6	; 23
        //
        cbi(ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_SI); // MOSI low
     694:	c5 98       	cbi	0x18, 5	; 24
        cbi(ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_SCK); // SCK low
     696:	c7 98       	cbi	0x18, 7	; 24
	//
	// initialize SPI interface
	// master mode and Fosc/2 clock:
        SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//SPCR = (1<<SPE)|(1<<MSTR);
     698:	81 e5       	ldi	r24, 0x51	; 81
     69a:	8d b9       	out	0x0d, r24	; 13
        SPSR |= (1<<SPI2X);
     69c:	70 9a       	sbi	0x0e, 0	; 14
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     69e:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     6a0:	8f ef       	ldi	r24, 0xFF	; 255
     6a2:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     6a4:	77 9b       	sbis	0x0e, 7	; 14
     6a6:	fe cf       	rjmp	.-4      	; 0x6a4 <enc28j60Init+0x22>
        // write data
        SPDR = data;
     6a8:	8f ef       	ldi	r24, 0xFF	; 255
     6aa:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     6ac:	77 9b       	sbis	0x0e, 7	; 14
     6ae:	fe cf       	rjmp	.-4      	; 0x6ac <enc28j60Init+0x2a>
        CSPASSIVE;
     6b0:	c4 9a       	sbi	0x18, 4	; 24
     6b2:	8d ec       	ldi	r24, 0xCD	; 205
     6b4:	8a 95       	dec	r24
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <enc28j60Init+0x32>
	//while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	gNextPacketPtr = RXSTART_INIT;
     6b8:	10 92 ca 00 	sts	0x00CA, r1
     6bc:	10 92 c9 00 	sts	0x00C9, r1
        // Rx start
	enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
     6c0:	88 e0       	ldi	r24, 0x08	; 8
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	enc28j60Write(ERXSTH, RXSTART_INIT>>8);
     6c8:	89 e0       	ldi	r24, 0x09	; 9
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	// set receive pointer address
	enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
     6d0:	8c e0       	ldi	r24, 0x0C	; 12
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
     6d8:	8d e0       	ldi	r24, 0x0D	; 13
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	// RX end
	enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
     6e0:	8a e0       	ldi	r24, 0x0A	; 10
     6e2:	6e ef       	ldi	r22, 0xFE	; 254
     6e4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
     6e8:	8b e0       	ldi	r24, 0x0B	; 11
     6ea:	69 e1       	ldi	r22, 0x19	; 25
     6ec:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	// TX start
	enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
     6f0:	84 e0       	ldi	r24, 0x04	; 4
     6f2:	6f ef       	ldi	r22, 0xFF	; 255
     6f4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	enc28j60Write(ETXSTH, TXSTART_INIT>>8);
     6f8:	85 e0       	ldi	r24, 0x05	; 5
     6fa:	69 e1       	ldi	r22, 0x19	; 25
     6fc:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	// TX end
	enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
     700:	86 e0       	ldi	r24, 0x06	; 6
     702:	6f ef       	ldi	r22, 0xFF	; 255
     704:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
     708:	87 e0       	ldi	r24, 0x07	; 7
     70a:	6f e1       	ldi	r22, 0x1F	; 31
     70c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
        // Type     ETH.DST
        // ARP      BROADCAST
        // 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
        // in binary these poitions are:11 0000 0011 1111
        // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
	enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
     710:	88 e3       	ldi	r24, 0x38	; 56
     712:	60 eb       	ldi	r22, 0xB0	; 176
     714:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	enc28j60Write(EPMM0, 0x3f);
     718:	88 e2       	ldi	r24, 0x28	; 40
     71a:	6f e3       	ldi	r22, 0x3F	; 63
     71c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	enc28j60Write(EPMM1, 0x30);
     720:	89 e2       	ldi	r24, 0x29	; 41
     722:	60 e3       	ldi	r22, 0x30	; 48
     724:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	enc28j60Write(EPMCSL, 0xf9);
     728:	80 e3       	ldi	r24, 0x30	; 48
     72a:	69 ef       	ldi	r22, 0xF9	; 249
     72c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	enc28j60Write(EPMCSH, 0xf7);
     730:	81 e3       	ldi	r24, 0x31	; 49
     732:	67 ef       	ldi	r22, 0xF7	; 247
     734:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
        //
        //
	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
     738:	80 ec       	ldi	r24, 0xC0	; 192
     73a:	6d e0       	ldi	r22, 0x0D	; 13
     73c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
     740:	81 ec       	ldi	r24, 0xC1	; 193
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     748:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     74a:	82 e8       	ldi	r24, 0x82	; 130
     74c:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     74e:	77 9b       	sbis	0x0e, 7	; 14
     750:	fe cf       	rjmp	.-4      	; 0x74e <enc28j60Init+0xcc>
        // write data
        SPDR = data;
     752:	82 e3       	ldi	r24, 0x32	; 50
     754:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     756:	77 9b       	sbis	0x0e, 7	; 14
     758:	fe cf       	rjmp	.-4      	; 0x756 <enc28j60Init+0xd4>
        CSPASSIVE;
     75a:	c4 9a       	sbi	0x18, 4	; 24
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
	// enable automatic padding to 60bytes and CRC operations
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
	// set inter-frame gap (non-back-to-back)
	enc28j60Write(MAIPGL, 0x12);
     75c:	86 ec       	ldi	r24, 0xC6	; 198
     75e:	62 e1       	ldi	r22, 0x12	; 18
     760:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	enc28j60Write(MAIPGH, 0x0C);
     764:	87 ec       	ldi	r24, 0xC7	; 199
     766:	6c e0       	ldi	r22, 0x0C	; 12
     768:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
     76c:	84 ec       	ldi	r24, 0xC4	; 196
     76e:	62 e1       	ldi	r22, 0x12	; 18
     770:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	// Set the maximum packet size which the controller will accept
        // Do not send packets longer than MAX_FRAMELEN:
	enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
     774:	8a ec       	ldi	r24, 0xCA	; 202
     776:	6c ed       	ldi	r22, 0xDC	; 220
     778:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
     77c:	8b ec       	ldi	r24, 0xCB	; 203
     77e:	65 e0       	ldi	r22, 0x05	; 5
     780:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	// do bank 3 stuff
        // write MAC address
        // NOTE: MAC address in ENC28J60 is byte-backward
        enc28j60Write(MAADR5, macaddr[0]);
     784:	84 ee       	ldi	r24, 0xE4	; 228
     786:	68 81       	ld	r22, Y
     788:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
        enc28j60Write(MAADR4, macaddr[1]);
     78c:	85 ee       	ldi	r24, 0xE5	; 229
     78e:	69 81       	ldd	r22, Y+1	; 0x01
     790:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
        enc28j60Write(MAADR3, macaddr[2]);
     794:	82 ee       	ldi	r24, 0xE2	; 226
     796:	6a 81       	ldd	r22, Y+2	; 0x02
     798:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
        enc28j60Write(MAADR2, macaddr[3]);
     79c:	83 ee       	ldi	r24, 0xE3	; 227
     79e:	6b 81       	ldd	r22, Y+3	; 0x03
     7a0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
        enc28j60Write(MAADR1, macaddr[4]);
     7a4:	80 ee       	ldi	r24, 0xE0	; 224
     7a6:	6c 81       	ldd	r22, Y+4	; 0x04
     7a8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
        enc28j60Write(MAADR0, macaddr[5]);
     7ac:	81 ee       	ldi	r24, 0xE1	; 225
     7ae:	6d 81       	ldd	r22, Y+5	; 0x05
     7b0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
     7b4:	80 e1       	ldi	r24, 0x10	; 16
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	71 e0       	ldi	r23, 0x01	; 1
     7ba:	0e 94 1d 03 	call	0x63a	; 0x63a <enc28j60PhyWrite>
	// switch to bank 0
	enc28j60SetBank(ECON1);
     7be:	8f e1       	ldi	r24, 0x1F	; 31
     7c0:	0e 94 c0 02 	call	0x580	; 0x580 <enc28j60SetBank>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     7c4:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     7c6:	8b e9       	ldi	r24, 0x9B	; 155
     7c8:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     7ca:	77 9b       	sbis	0x0e, 7	; 14
     7cc:	fe cf       	rjmp	.-4      	; 0x7ca <enc28j60Init+0x148>
        // write data
        SPDR = data;
     7ce:	80 ec       	ldi	r24, 0xC0	; 192
     7d0:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     7d2:	77 9b       	sbis	0x0e, 7	; 14
     7d4:	fe cf       	rjmp	.-4      	; 0x7d2 <enc28j60Init+0x150>
        CSPASSIVE;
     7d6:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     7d8:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     7da:	8f e9       	ldi	r24, 0x9F	; 159
     7dc:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     7de:	77 9b       	sbis	0x0e, 7	; 14
     7e0:	fe cf       	rjmp	.-4      	; 0x7de <enc28j60Init+0x15c>
        // write data
        SPDR = data;
     7e2:	84 e0       	ldi	r24, 0x04	; 4
     7e4:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     7e6:	77 9b       	sbis	0x0e, 7	; 14
     7e8:	fe cf       	rjmp	.-4      	; 0x7e6 <enc28j60Init+0x164>
        CSPASSIVE;
     7ea:	c4 9a       	sbi	0x18, 4	; 24
	enc28j60SetBank(ECON1);
	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
}
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	08 95       	ret

000007f2 <enc28j60getrev>:

// read the revision of the chip:
uint8_t enc28j60getrev(void)
{
	return(enc28j60Read(EREVID));
     7f2:	82 e7       	ldi	r24, 0x72	; 114
     7f4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <enc28j60Read>
}
     7f8:	08 95       	ret

000007fa <enc28j60linkup>:

// link status
uint8_t enc28j60linkup(void)
{
        // bit 10 (= bit 3 in upper reg)
	return(enc28j60PhyReadH(PHSTAT2) && 4);
     7fa:	81 e1       	ldi	r24, 0x11	; 17
     7fc:	0e 94 04 03 	call	0x608	; 0x608 <enc28j60PhyReadH>
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	89 2b       	or	r24, r25
     804:	09 f0       	breq	.+2      	; 0x808 <enc28j60linkup+0xe>
     806:	21 e0       	ldi	r18, 0x01	; 1
}
     808:	82 2f       	mov	r24, r18
     80a:	08 95       	ret

0000080c <enc28j60PacketSend>:

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	ec 01       	movw	r28, r24
     81c:	8b 01       	movw	r16, r22

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     81e:	ef e9       	ldi	r30, 0x9F	; 159
     820:	de 2e       	mov	r13, r30
        waitspi();
        // write data
        SPDR = data;
     822:	70 e8       	ldi	r23, 0x80	; 128
     824:	f7 2e       	mov	r15, r23

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     826:	6f eb       	ldi	r22, 0xBF	; 191
     828:	e6 2e       	mov	r14, r22
     82a:	15 c0       	rjmp	.+42     	; 0x856 <enc28j60PacketSend+0x4a>
{
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
        {
                // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
                if( (enc28j60Read(EIR) & EIR_TXERIF) ) {
     82c:	8c e1       	ldi	r24, 0x1C	; 28
     82e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <enc28j60Read>
     832:	81 ff       	sbrs	r24, 1
     834:	10 c0       	rjmp	.+32     	; 0x856 <enc28j60PacketSend+0x4a>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     836:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     838:	df b8       	out	0x0f, r13	; 15
        waitspi();
     83a:	77 9b       	sbis	0x0e, 7	; 14
     83c:	fe cf       	rjmp	.-4      	; 0x83a <enc28j60PacketSend+0x2e>
        // write data
        SPDR = data;
     83e:	ff b8       	out	0x0f, r15	; 15
        waitspi();
     840:	77 9b       	sbis	0x0e, 7	; 14
     842:	fe cf       	rjmp	.-4      	; 0x840 <enc28j60PacketSend+0x34>
        CSPASSIVE;
     844:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     846:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     848:	ef b8       	out	0x0f, r14	; 15
        waitspi();
     84a:	77 9b       	sbis	0x0e, 7	; 14
     84c:	fe cf       	rjmp	.-4      	; 0x84a <enc28j60PacketSend+0x3e>
        // write data
        SPDR = data;
     84e:	ff b8       	out	0x0f, r15	; 15
        waitspi();
     850:	77 9b       	sbis	0x0e, 7	; 14
     852:	fe cf       	rjmp	.-4      	; 0x850 <enc28j60PacketSend+0x44>
        CSPASSIVE;
     854:	c4 9a       	sbi	0x18, 4	; 24
}

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	6f e1       	ldi	r22, 0x1F	; 31
     85a:	0e 94 76 02 	call	0x4ec	; 0x4ec <enc28j60ReadOp>
     85e:	83 fd       	sbrc	r24, 3
     860:	e5 cf       	rjmp	.-54     	; 0x82c <enc28j60PacketSend+0x20>
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
                }
        }
	// Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
     862:	82 e0       	ldi	r24, 0x02	; 2
     864:	6f ef       	ldi	r22, 0xFF	; 255
     866:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
     86a:	83 e0       	ldi	r24, 0x03	; 3
     86c:	69 e1       	ldi	r22, 0x19	; 25
     86e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
     872:	ce 01       	movw	r24, r28
     874:	81 50       	subi	r24, 0x01	; 1
     876:	68 2f       	mov	r22, r24
     878:	86 e0       	ldi	r24, 0x06	; 6
     87a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
     87e:	9e 01       	movw	r18, r28
     880:	21 50       	subi	r18, 0x01	; 1
     882:	36 4e       	sbci	r19, 0xE6	; 230
     884:	87 e0       	ldi	r24, 0x07	; 7
     886:	63 2f       	mov	r22, r19
     888:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     88c:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     88e:	8a e7       	ldi	r24, 0x7A	; 122
     890:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     892:	77 9b       	sbis	0x0e, 7	; 14
     894:	fe cf       	rjmp	.-4      	; 0x892 <enc28j60PacketSend+0x86>
        // write data
        SPDR = data;
     896:	1f b8       	out	0x0f, r1	; 15
        waitspi();
     898:	77 9b       	sbis	0x0e, 7	; 14
     89a:	fe cf       	rjmp	.-4      	; 0x898 <enc28j60PacketSend+0x8c>
        CSPASSIVE;
     89c:	c4 9a       	sbi	0x18, 4	; 24
        CSPASSIVE;
}

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
        CSACTIVE;
     89e:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
     8a0:	8a e7       	ldi	r24, 0x7A	; 122
     8a2:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     8a4:	77 9b       	sbis	0x0e, 7	; 14
     8a6:	fe cf       	rjmp	.-4      	; 0x8a4 <enc28j60PacketSend+0x98>
     8a8:	08 c0       	rjmp	.+16     	; 0x8ba <enc28j60PacketSend+0xae>
        while(len)
        {
                len--;
                // write data
                SPDR = *data;
     8aa:	f8 01       	movw	r30, r16
     8ac:	80 81       	ld	r24, Z
     8ae:	8f b9       	out	0x0f, r24	; 15
                data++;
                waitspi();
     8b0:	77 9b       	sbis	0x0e, 7	; 14
     8b2:	fe cf       	rjmp	.-4      	; 0x8b0 <enc28j60PacketSend+0xa4>
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     8b4:	21 97       	sbiw	r28, 0x01	; 1
                // write data
                SPDR = *data;
                data++;
     8b6:	0f 5f       	subi	r16, 0xFF	; 255
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
{
        CSACTIVE;
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
     8ba:	20 97       	sbiw	r28, 0x00	; 0
     8bc:	b1 f7       	brne	.-20     	; 0x8aa <enc28j60PacketSend+0x9e>
                // write data
                SPDR = *data;
                data++;
                waitspi();
        }
        CSPASSIVE;
     8be:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     8c0:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     8c2:	8f e9       	ldi	r24, 0x9F	; 159
     8c4:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     8c6:	77 9b       	sbis	0x0e, 7	; 14
     8c8:	fe cf       	rjmp	.-4      	; 0x8c6 <enc28j60PacketSend+0xba>
        // write data
        SPDR = data;
     8ca:	88 e0       	ldi	r24, 0x08	; 8
     8cc:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     8ce:	77 9b       	sbis	0x0e, 7	; 14
     8d0:	fe cf       	rjmp	.-4      	; 0x8ce <enc28j60PacketSend+0xc2>
        CSPASSIVE;
     8d2:	c4 9a       	sbi	0x18, 4	; 24
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
}
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	ff 90       	pop	r15
     8de:	ef 90       	pop	r14
     8e0:	df 90       	pop	r13
     8e2:	08 95       	ret

000008e4 <enc28j60hasRxPkt>:

// just probe if there might be a packet
uint8_t enc28j60hasRxPkt(void)
{
	if( enc28j60Read(EPKTCNT) ==0 ){
     8e4:	89 e3       	ldi	r24, 0x39	; 57
     8e6:	0e 94 e7 02 	call	0x5ce	; 0x5ce <enc28j60Read>
     8ea:	81 11       	cpse	r24, r1
     8ec:	81 e0       	ldi	r24, 0x01	; 1
		return(0);
        }
        return(1);
}
     8ee:	08 95       	ret

000008f0 <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
     8f0:	8f 92       	push	r8
     8f2:	9f 92       	push	r9
     8f4:	af 92       	push	r10
     8f6:	bf 92       	push	r11
     8f8:	cf 92       	push	r12
     8fa:	df 92       	push	r13
     8fc:	ef 92       	push	r14
     8fe:	ff 92       	push	r15
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	5c 01       	movw	r10, r24
     90a:	4b 01       	movw	r8, r22
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
     90c:	89 e3       	ldi	r24, 0x39	; 57
     90e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <enc28j60Read>
     912:	88 23       	and	r24, r24
     914:	19 f4       	brne	.+6      	; 0x91c <enc28j60PacketReceive+0x2c>
     916:	c0 e0       	ldi	r28, 0x00	; 0
     918:	d0 e0       	ldi	r29, 0x00	; 0
     91a:	76 c0       	rjmp	.+236    	; 0xa08 <enc28j60PacketReceive+0x118>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
     91c:	60 91 c9 00 	lds	r22, 0x00C9
     920:	10 91 ca 00 	lds	r17, 0x00CA
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	61 2f       	mov	r22, r17
     92e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     932:	8a e3       	ldi	r24, 0x3A	; 58
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	0e 94 76 02 	call	0x4ec	; 0x4ec <enc28j60ReadOp>
     93a:	18 2f       	mov	r17, r24
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     93c:	8a e3       	ldi	r24, 0x3A	; 58
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	0e 94 76 02 	call	0x4ec	; 0x4ec <enc28j60ReadOp>
     944:	38 2f       	mov	r19, r24
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	e1 2e       	mov	r14, r17
     94a:	ff 24       	eor	r15, r15
     94c:	e2 2a       	or	r14, r18
     94e:	f3 2a       	or	r15, r19
     950:	f0 92 ca 00 	sts	0x00CA, r15
     954:	e0 92 c9 00 	sts	0x00C9, r14
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     958:	8a e3       	ldi	r24, 0x3A	; 58
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	0e 94 76 02 	call	0x4ec	; 0x4ec <enc28j60ReadOp>
     960:	c8 2e       	mov	r12, r24
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     962:	8a e3       	ldi	r24, 0x3A	; 58
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	0e 94 76 02 	call	0x4ec	; 0x4ec <enc28j60ReadOp>
     96a:	d8 2e       	mov	r13, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     96c:	8a e3       	ldi	r24, 0x3A	; 58
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	0e 94 76 02 	call	0x4ec	; 0x4ec <enc28j60ReadOp>
     974:	08 2f       	mov	r16, r24
     976:	10 e0       	ldi	r17, 0x00	; 0
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
     978:	8a e3       	ldi	r24, 0x3A	; 58
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	0e 94 76 02 	call	0x4ec	; 0x4ec <enc28j60ReadOp>
                len=maxlen-1;
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
     980:	38 2f       	mov	r19, r24
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	20 2b       	or	r18, r16
     986:	31 2b       	or	r19, r17
     988:	27 fd       	sbrc	r18, 7
     98a:	03 c0       	rjmp	.+6      	; 0x992 <enc28j60PacketReceive+0xa2>
     98c:	c0 e0       	ldi	r28, 0x00	; 0
     98e:	d0 e0       	ldi	r29, 0x00	; 0
     990:	11 c0       	rjmp	.+34     	; 0x9b4 <enc28j60PacketReceive+0xc4>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     992:	cc 2d       	mov	r28, r12
     994:	d0 e0       	ldi	r29, 0x00	; 0
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     996:	9d 2d       	mov	r25, r13
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	c8 2b       	or	r28, r24
     99c:	d9 2b       	or	r29, r25
        len-=4; //remove the CRC count
     99e:	c5 01       	movw	r24, r10
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	24 97       	sbiw	r28, 0x04	; 4
     9a4:	8c 17       	cp	r24, r28
     9a6:	9d 07       	cpc	r25, r29
     9a8:	08 f4       	brcc	.+2      	; 0x9ac <enc28j60PacketReceive+0xbc>
     9aa:	ec 01       	movw	r28, r24
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
     9ac:	ce 01       	movw	r24, r28
     9ae:	b4 01       	movw	r22, r8
     9b0:	0e 94 93 02 	call	0x526	; 0x526 <enc28j60ReadBuffer>
        }
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
     9b4:	de 2c       	mov	r13, r14
     9b6:	8c e0       	ldi	r24, 0x0C	; 12
     9b8:	6e 2d       	mov	r22, r14
     9ba:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
	enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
     9be:	8d e0       	ldi	r24, 0x0D	; 13
     9c0:	6f 2d       	mov	r22, r15
     9c2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
        // Move the RX read pointer to the start of the next received packet
        // This frees the memory we just read out.
        // However, compensate for the errata point 13, rev B4: enver write an even address!
        if ((gNextPacketPtr - 1 < RXSTART_INIT)
     9c6:	87 01       	movw	r16, r14
     9c8:	01 50       	subi	r16, 0x01	; 1
     9ca:	10 40       	sbci	r17, 0x00	; 0
     9cc:	89 e1       	ldi	r24, 0x19	; 25
     9ce:	0f 3f       	cpi	r16, 0xFF	; 255
     9d0:	18 07       	cpc	r17, r24
     9d2:	38 f0       	brcs	.+14     	; 0x9e2 <enc28j60PacketReceive+0xf2>
                || (gNextPacketPtr -1 > RXSTOP_INIT)) {
                enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
     9d4:	8c e0       	ldi	r24, 0x0C	; 12
     9d6:	6e ef       	ldi	r22, 0xFE	; 254
     9d8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
                enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
     9dc:	8d e0       	ldi	r24, 0x0D	; 13
     9de:	69 e1       	ldi	r22, 0x19	; 25
     9e0:	07 c0       	rjmp	.+14     	; 0x9f0 <enc28j60PacketReceive+0x100>
        } else {
                enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
     9e2:	da 94       	dec	r13
     9e4:	8c e0       	ldi	r24, 0x0C	; 12
     9e6:	6d 2d       	mov	r22, r13
     9e8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
     9ec:	8d e0       	ldi	r24, 0x0D	; 13
     9ee:	61 2f       	mov	r22, r17
     9f0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     9f4:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     9f6:	8e e9       	ldi	r24, 0x9E	; 158
     9f8:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     9fa:	77 9b       	sbis	0x0e, 7	; 14
     9fc:	fe cf       	rjmp	.-4      	; 0x9fa <enc28j60PacketReceive+0x10a>
        // write data
        SPDR = data;
     9fe:	80 e4       	ldi	r24, 0x40	; 64
     a00:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     a02:	77 9b       	sbis	0x0e, 7	; 14
     a04:	fe cf       	rjmp	.-4      	; 0xa02 <enc28j60PacketReceive+0x112>
        CSPASSIVE;
     a06:	c4 9a       	sbi	0x18, 4	; 24
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
}
     a08:	ce 01       	movw	r24, r28
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	df 90       	pop	r13
     a18:	cf 90       	pop	r12
     a1a:	bf 90       	pop	r11
     a1c:	af 90       	pop	r10
     a1e:	9f 90       	pop	r9
     a20:	8f 90       	pop	r8
     a22:	08 95       	ret

00000a24 <checksum>:
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
     a24:	cf 92       	push	r12
     a26:	df 92       	push	r13
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	6c 01       	movw	r12, r24
        uint32_t sum = 0;

        //if(type==0){
        //        // do not add anything
        //}
        if(type==1){
     a36:	41 30       	cpi	r20, 0x01	; 1
     a38:	81 f4       	brne	.+32     	; 0xa5a <checksum+0x36>
                sum+=IP_PROTO_UDP_V; // protocol udp
                // the length here is the length of udp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
     a3a:	68 50       	subi	r22, 0x08	; 8
     a3c:	70 40       	sbci	r23, 0x00	; 0
     a3e:	7b 01       	movw	r14, r22
     a40:	00 e0       	ldi	r16, 0x00	; 0
     a42:	10 e0       	ldi	r17, 0x00	; 0
     a44:	68 5f       	subi	r22, 0xF8	; 248
     a46:	7f 4f       	sbci	r23, 0xFF	; 255
     a48:	21 e1       	ldi	r18, 0x11	; 17
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	e2 0e       	add	r14, r18
     a52:	f3 1e       	adc	r15, r19
     a54:	04 1f       	adc	r16, r20
     a56:	15 1f       	adc	r17, r21
     a58:	15 c0       	rjmp	.+42     	; 0xa84 <checksum+0x60>
        }
        if(type==2){
     a5a:	42 30       	cpi	r20, 0x02	; 2
     a5c:	21 f0       	breq	.+8      	; 0xa66 <checksum+0x42>
     a5e:	ee 24       	eor	r14, r14
     a60:	ff 24       	eor	r15, r15
     a62:	87 01       	movw	r16, r14
     a64:	0f c0       	rjmp	.+30     	; 0xa84 <checksum+0x60>
                sum+=IP_PROTO_TCP_V; 
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
     a66:	68 50       	subi	r22, 0x08	; 8
     a68:	70 40       	sbci	r23, 0x00	; 0
     a6a:	7b 01       	movw	r14, r22
     a6c:	00 e0       	ldi	r16, 0x00	; 0
     a6e:	10 e0       	ldi	r17, 0x00	; 0
     a70:	68 5f       	subi	r22, 0xF8	; 248
     a72:	7f 4f       	sbci	r23, 0xFF	; 255
     a74:	86 e0       	ldi	r24, 0x06	; 6
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	e8 0e       	add	r14, r24
     a7e:	f9 1e       	adc	r15, r25
     a80:	0a 1f       	adc	r16, r26
     a82:	1b 1f       	adc	r17, r27
     a84:	f6 01       	movw	r30, r12
     a86:	eb 01       	movw	r28, r22
     a88:	16 c0       	rjmp	.+44     	; 0xab6 <checksum+0x92>
        }
        // build the sum of 16bit words
        while(len >1){
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
     a8a:	80 81       	ld	r24, Z
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	a0 e0       	ldi	r26, 0x00	; 0
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	ba 2f       	mov	r27, r26
     a94:	a9 2f       	mov	r26, r25
     a96:	98 2f       	mov	r25, r24
     a98:	88 27       	eor	r24, r24
     a9a:	21 81       	ldd	r18, Z+1	; 0x01
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	82 2b       	or	r24, r18
     aa4:	93 2b       	or	r25, r19
     aa6:	a4 2b       	or	r26, r20
     aa8:	b5 2b       	or	r27, r21
     aaa:	e8 0e       	add	r14, r24
     aac:	f9 1e       	adc	r15, r25
     aae:	0a 1f       	adc	r16, r26
     ab0:	1b 1f       	adc	r17, r27
                buf+=2;
     ab2:	32 96       	adiw	r30, 0x02	; 2
                len-=2;
     ab4:	22 97       	sbiw	r28, 0x02	; 2
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
        }
        // build the sum of 16bit words
        while(len >1){
     ab6:	c2 30       	cpi	r28, 0x02	; 2
     ab8:	d1 05       	cpc	r29, r1
     aba:	38 f7       	brcc	.-50     	; 0xa8a <checksum+0x66>
     abc:	fb 01       	movw	r30, r22
     abe:	ee 7f       	andi	r30, 0xFE	; 254
     ac0:	ec 0d       	add	r30, r12
     ac2:	fd 1d       	adc	r31, r13
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
                buf+=2;
                len-=2;
        }
        // if there is a byte left then add it (padded with zero)
        if (len){
     ac4:	60 ff       	sbrs	r22, 0
     ac6:	15 c0       	rjmp	.+42     	; 0xaf2 <checksum+0xce>
                sum += ((uint32_t)(0xFF & *buf))<<8;
     ac8:	80 81       	ld	r24, Z
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e0       	ldi	r26, 0x00	; 0
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	ba 2f       	mov	r27, r26
     ad2:	a9 2f       	mov	r26, r25
     ad4:	98 2f       	mov	r25, r24
     ad6:	88 27       	eor	r24, r24
     ad8:	08 c0       	rjmp	.+16     	; 0xaea <checksum+0xc6>
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
                sum = (sum & 0xFFFF)+(sum >> 16);
     ada:	2f ef       	ldi	r18, 0xFF	; 255
     adc:	3f ef       	ldi	r19, 0xFF	; 255
     ade:	40 e0       	ldi	r20, 0x00	; 0
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	e2 22       	and	r14, r18
     ae4:	f3 22       	and	r15, r19
     ae6:	04 23       	and	r16, r20
     ae8:	15 23       	and	r17, r21
     aea:	e8 0e       	add	r14, r24
     aec:	f9 1e       	adc	r15, r25
     aee:	0a 1f       	adc	r16, r26
     af0:	1b 1f       	adc	r17, r27
        if (len){
                sum += ((uint32_t)(0xFF & *buf))<<8;
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
     af2:	c8 01       	movw	r24, r16
     af4:	aa 27       	eor	r26, r26
     af6:	bb 27       	eor	r27, r27
     af8:	00 97       	sbiw	r24, 0x00	; 0
     afa:	a1 05       	cpc	r26, r1
     afc:	b1 05       	cpc	r27, r1
     afe:	69 f7       	brne	.-38     	; 0xada <checksum+0xb6>
     b00:	97 01       	movw	r18, r14
     b02:	20 95       	com	r18
     b04:	30 95       	com	r19
                sum = (sum & 0xFFFF)+(sum >> 16);
        }
        // build 1's complement:
        return( (uint16_t) sum ^ 0xFFFF);
}
     b06:	c9 01       	movw	r24, r18
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	ff 90       	pop	r15
     b12:	ef 90       	pop	r14
     b14:	df 90       	pop	r13
     b16:	cf 90       	pop	r12
     b18:	08 95       	ret

00000b1a <init_ip_arp_udp_tcp>:

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	ec 01       	movw	r28, r24
        uint8_t i=0;
        wwwport=wwwp;
     b20:	40 93 c2 00 	sts	0x00C2, r20
     b24:	20 e0       	ldi	r18, 0x00	; 0
     b26:	30 e0       	ldi	r19, 0x00	; 0
        while(i<4){
                ipaddr[i]=myip[i];
     b28:	f9 01       	movw	r30, r18
     b2a:	ef 52       	subi	r30, 0x2F	; 47
     b2c:	ff 4f       	sbci	r31, 0xFF	; 255
     b2e:	db 01       	movw	r26, r22
     b30:	a2 0f       	add	r26, r18
     b32:	b3 1f       	adc	r27, r19
     b34:	8c 91       	ld	r24, X
     b36:	80 83       	st	Z, r24
     b38:	2f 5f       	subi	r18, 0xFF	; 255
     b3a:	3f 4f       	sbci	r19, 0xFF	; 255

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
        uint8_t i=0;
        wwwport=wwwp;
        while(i<4){
     b3c:	24 30       	cpi	r18, 0x04	; 4
     b3e:	31 05       	cpc	r19, r1
     b40:	99 f7       	brne	.-26     	; 0xb28 <init_ip_arp_udp_tcp+0xe>
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 e0       	ldi	r19, 0x00	; 0
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
                macaddr[i]=mymac[i];
     b46:	f9 01       	movw	r30, r18
     b48:	e5 53       	subi	r30, 0x35	; 53
     b4a:	ff 4f       	sbci	r31, 0xFF	; 255
     b4c:	de 01       	movw	r26, r28
     b4e:	a2 0f       	add	r26, r18
     b50:	b3 1f       	adc	r27, r19
     b52:	8c 91       	ld	r24, X
     b54:	80 83       	st	Z, r24
     b56:	2f 5f       	subi	r18, 0xFF	; 255
     b58:	3f 4f       	sbci	r19, 0xFF	; 255
        while(i<4){
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
     b5a:	26 30       	cpi	r18, 0x06	; 6
     b5c:	31 05       	cpc	r19, r1
     b5e:	99 f7       	brne	.-26     	; 0xb46 <init_ip_arp_udp_tcp+0x2c>
                macaddr[i]=mymac[i];
                i++;
        }
}
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <eth_type_is_arp_and_my_ip>:

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
     b66:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //  
        if (len<41){
     b68:	69 32       	cpi	r22, 0x29	; 41
     b6a:	71 05       	cpc	r23, r1
     b6c:	b0 f0       	brcs	.+44     	; 0xb9a <eth_type_is_arp_and_my_ip+0x34>
                return(0);
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
     b6e:	84 85       	ldd	r24, Z+12	; 0x0c
     b70:	88 30       	cpi	r24, 0x08	; 8
     b72:	99 f4       	brne	.+38     	; 0xb9a <eth_type_is_arp_and_my_ip+0x34>
     b74:	85 85       	ldd	r24, Z+13	; 0x0d
     b76:	86 30       	cpi	r24, 0x06	; 6
     b78:	81 f4       	brne	.+32     	; 0xb9a <eth_type_is_arp_and_my_ip+0x34>
     b7a:	df 01       	movw	r26, r30
     b7c:	96 96       	adiw	r26, 0x26	; 38
     b7e:	e1 ed       	ldi	r30, 0xD1	; 209
     b80:	f0 e0       	ldi	r31, 0x00	; 0
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
     b82:	9c 91       	ld	r25, X
     b84:	80 81       	ld	r24, Z
     b86:	98 17       	cp	r25, r24
     b88:	41 f4       	brne	.+16     	; 0xb9a <eth_type_is_arp_and_my_ip+0x34>
     b8a:	11 96       	adiw	r26, 0x01	; 1
     b8c:	31 96       	adiw	r30, 0x01	; 1
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	e5 3d       	cpi	r30, 0xD5	; 213
     b92:	f8 07       	cpc	r31, r24
     b94:	b1 f7       	brne	.-20     	; 0xb82 <eth_type_is_arp_and_my_ip+0x1c>
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	08 95       	ret
     b9a:	80 e0       	ldi	r24, 0x00	; 0
                        return(0);
                }
                i++;
        }
        return(1);
}
     b9c:	08 95       	ret

00000b9e <eth_type_is_ip_and_my_ip>:

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
     b9e:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
     ba0:	6a 32       	cpi	r22, 0x2A	; 42
     ba2:	71 05       	cpc	r23, r1
     ba4:	d0 f0       	brcs	.+52     	; 0xbda <eth_type_is_ip_and_my_ip+0x3c>
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
     ba6:	84 85       	ldd	r24, Z+12	; 0x0c
     ba8:	88 30       	cpi	r24, 0x08	; 8
     baa:	b9 f4       	brne	.+46     	; 0xbda <eth_type_is_ip_and_my_ip+0x3c>
     bac:	85 85       	ldd	r24, Z+13	; 0x0d
     bae:	88 23       	and	r24, r24
     bb0:	a1 f4       	brne	.+40     	; 0xbda <eth_type_is_ip_and_my_ip+0x3c>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
                return(0);
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
     bb2:	86 85       	ldd	r24, Z+14	; 0x0e
     bb4:	85 34       	cpi	r24, 0x45	; 69
     bb6:	89 f4       	brne	.+34     	; 0xbda <eth_type_is_ip_and_my_ip+0x3c>
     bb8:	df 01       	movw	r26, r30
     bba:	e1 ed       	ldi	r30, 0xD1	; 209
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
                if(buf[IP_DST_P+i]!=ipaddr[i]){
     bbe:	5e 96       	adiw	r26, 0x1e	; 30
     bc0:	9c 91       	ld	r25, X
     bc2:	5e 97       	sbiw	r26, 0x1e	; 30
     bc4:	80 81       	ld	r24, Z
     bc6:	98 17       	cp	r25, r24
     bc8:	41 f4       	brne	.+16     	; 0xbda <eth_type_is_ip_and_my_ip+0x3c>
     bca:	11 96       	adiw	r26, 0x01	; 1
     bcc:	31 96       	adiw	r30, 0x01	; 1
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	e5 3d       	cpi	r30, 0xD5	; 213
     bd2:	f8 07       	cpc	r31, r24
     bd4:	a1 f7       	brne	.-24     	; 0xbbe <eth_type_is_ip_and_my_ip+0x20>
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	08 95       	ret
     bda:	80 e0       	ldi	r24, 0x00	; 0
                        return(0);
                }
                i++;
        }
        return(1);
}
     bdc:	08 95       	ret

00000bde <make_eth>:
// make a return eth header from a received eth packet
void make_eth(uint8_t *buf)
{
     bde:	fc 01       	movw	r30, r24
     be0:	ab ec       	ldi	r26, 0xCB	; 203
     be2:	b0 e0       	ldi	r27, 0x00	; 0
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     be4:	86 81       	ldd	r24, Z+6	; 0x06
     be6:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     be8:	8d 91       	ld	r24, X+
     bea:	86 83       	std	Z+6, r24	; 0x06
     bec:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	a1 3d       	cpi	r26, 0xD1	; 209
     bf2:	b8 07       	cpc	r27, r24
     bf4:	b9 f7       	brne	.-18     	; 0xbe4 <make_eth+0x6>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
}
     bf6:	08 95       	ret

00000bf8 <fill_ip_hdr_checksum>:
void fill_ip_hdr_checksum(uint8_t *buf)
{
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	8c 01       	movw	r16, r24
        uint16_t ck;
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
     bfe:	fc 01       	movw	r30, r24
     c00:	10 8e       	std	Z+24, r1	; 0x18
        buf[IP_CHECKSUM_P+1]=0;
     c02:	11 8e       	std	Z+25, r1	; 0x19
        buf[IP_FLAGS_P]=0x40; // don't fragment
     c04:	80 e4       	ldi	r24, 0x40	; 64
     c06:	84 8b       	std	Z+20, r24	; 0x14
        buf[IP_FLAGS_P+1]=0;  // fragement offset
     c08:	15 8a       	std	Z+21, r1	; 0x15
        buf[IP_TTL_P]=64; // ttl
     c0a:	86 8b       	std	Z+22, r24	; 0x16
        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
     c0c:	c8 01       	movw	r24, r16
     c0e:	0e 96       	adiw	r24, 0x0e	; 14
     c10:	64 e1       	ldi	r22, 0x14	; 20
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	0e 94 12 05 	call	0xa24	; 0xa24 <checksum>
        buf[IP_CHECKSUM_P]=ck>>8;
     c1a:	f8 01       	movw	r30, r16
     c1c:	90 8f       	std	Z+24, r25	; 0x18
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
     c1e:	81 8f       	std	Z+25, r24	; 0x19
}
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	08 95       	ret

00000c26 <make_ip>:

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
     c26:	ac 01       	movw	r20, r24
     c28:	fc 01       	movw	r30, r24
     c2a:	a1 ed       	ldi	r26, 0xD1	; 209
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
        uint8_t i=0;
        while(i<4){
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
     c2e:	82 8d       	ldd	r24, Z+26	; 0x1a
     c30:	86 8f       	std	Z+30, r24	; 0x1e
                buf[IP_SRC_P+i]=ipaddr[i];
     c32:	8d 91       	ld	r24, X+
     c34:	82 8f       	std	Z+26, r24	; 0x1a
     c36:	31 96       	adiw	r30, 0x01	; 1

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	a5 3d       	cpi	r26, 0xD5	; 213
     c3c:	b8 07       	cpc	r27, r24
     c3e:	b9 f7       	brne	.-18     	; 0xc2e <make_ip+0x8>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        fill_ip_hdr_checksum(buf);
     c40:	ca 01       	movw	r24, r20
     c42:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <fill_ip_hdr_checksum>
}
     c46:	08 95       	ret

00000c48 <make_tcphead>:
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t mss,uint8_t cp_seq)
{
     c48:	fc 01       	movw	r30, r24
        uint8_t i=0;
        uint8_t tseq;
        while(i<2){
                buf[TCP_DST_PORT_H_P+i]=buf[TCP_SRC_PORT_H_P+i];
     c4a:	82 a1       	ldd	r24, Z+34	; 0x22
     c4c:	84 a3       	std	Z+36, r24	; 0x24
                buf[TCP_SRC_PORT_H_P+i]=0; // clear source port
     c4e:	12 a2       	std	Z+34, r1	; 0x22
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t mss,uint8_t cp_seq)
{
        uint8_t i=0;
        uint8_t tseq;
        while(i<2){
                buf[TCP_DST_PORT_H_P+i]=buf[TCP_SRC_PORT_H_P+i];
     c50:	83 a1       	ldd	r24, Z+35	; 0x23
     c52:	85 a3       	std	Z+37, r24	; 0x25
                buf[TCP_SRC_PORT_H_P+i]=0; // clear source port
     c54:	13 a2       	std	Z+35, r1	; 0x23
                i++;
        }
        // set source port  (http):
        buf[TCP_SRC_PORT_L_P]=wwwport;
     c56:	80 91 c2 00 	lds	r24, 0x00C2
     c5a:	83 a3       	std	Z+35, r24	; 0x23
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t mss,uint8_t cp_seq)
{
     c5c:	df 01       	movw	r26, r30
     c5e:	99 96       	adiw	r26, 0x29	; 41
     c60:	94 e0       	ldi	r25, 0x04	; 4
        buf[TCP_SRC_PORT_L_P]=wwwport;
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
                rel_ack_num=buf[TCP_SEQ_H_P+i-1]+rel_ack_num;
     c62:	8c 91       	ld	r24, X
     c64:	68 0f       	add	r22, r24
     c66:	71 1d       	adc	r23, r1
                tseq=buf[TCP_SEQACK_H_P+i-1];
     c68:	14 96       	adiw	r26, 0x04	; 4
     c6a:	8c 91       	ld	r24, X
     c6c:	14 97       	sbiw	r26, 0x04	; 4
                buf[TCP_SEQACK_H_P+i-1]=0xff&rel_ack_num;
     c6e:	14 96       	adiw	r26, 0x04	; 4
     c70:	6c 93       	st	X, r22
     c72:	14 97       	sbiw	r26, 0x04	; 4
                if (cp_seq){
     c74:	22 23       	and	r18, r18
     c76:	11 f0       	breq	.+4      	; 0xc7c <make_tcphead+0x34>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
     c78:	8c 93       	st	X, r24
     c7a:	01 c0       	rjmp	.+2      	; 0xc7e <make_tcphead+0x36>
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
     c7c:	1c 92       	st	X, r1
                }
                rel_ack_num=rel_ack_num>>8;
                i--;
     c7e:	91 50       	subi	r25, 0x01	; 1
     c80:	11 97       	sbiw	r26, 0x01	; 1
        // set source port  (http):
        buf[TCP_SRC_PORT_L_P]=wwwport;
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
     c82:	99 23       	and	r25, r25
     c84:	19 f0       	breq	.+6      	; 0xc8c <make_tcphead+0x44>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
                }
                rel_ack_num=rel_ack_num>>8;
     c86:	67 2f       	mov	r22, r23
     c88:	77 27       	eor	r23, r23
     c8a:	eb cf       	rjmp	.-42     	; 0xc62 <make_tcphead+0x1a>
                i--;
        }
        if (cp_seq==0){
     c8c:	22 23       	and	r18, r18
     c8e:	49 f4       	brne	.+18     	; 0xca2 <make_tcphead+0x5a>
                // put inital seq number
                buf[TCP_SEQ_H_P+0]= 0;
     c90:	16 a2       	std	Z+38, r1	; 0x26
                buf[TCP_SEQ_H_P+1]= 0;
     c92:	17 a2       	std	Z+39, r1	; 0x27
                // we step only the second byte, this allows us to send packts 
                // with 255 bytes or 512 (if we step the initial seqnum by 2)
                buf[TCP_SEQ_H_P+2]= seqnum; 
     c94:	80 91 c3 00 	lds	r24, 0x00C3
     c98:	80 a7       	std	Z+40, r24	; 0x28
                buf[TCP_SEQ_H_P+3]= 0;
     c9a:	11 a6       	std	Z+41, r1	; 0x29
                // step the inititial seq num by something we will not use
                // during this tcp session:
                seqnum+=2;
     c9c:	8e 5f       	subi	r24, 0xFE	; 254
     c9e:	80 93 c3 00 	sts	0x00C3, r24
        }
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
     ca2:	12 aa       	std	Z+50, r1	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
     ca4:	13 aa       	std	Z+51, r1	; 0x33

        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes. 
        // E.g 24 bytes: 24/4=6 => 0x60=header len field
        //buf[TCP_HEADER_LEN_P]=(((TCP_HEADER_LEN_PLAIN+4)/4)) <<4; // 0x60
        if (mss){
     ca6:	44 23       	and	r20, r20
     ca8:	51 f0       	breq	.+20     	; 0xcbe <make_tcphead+0x76>
                // the only option we set is MSS to 1408:
                // 1408 in hex is 0x580
                buf[TCP_OPTIONS_P]=2;
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	86 ab       	std	Z+54, r24	; 0x36
                buf[TCP_OPTIONS_P+1]=4;
     cae:	84 e0       	ldi	r24, 0x04	; 4
     cb0:	87 ab       	std	Z+55, r24	; 0x37
                buf[TCP_OPTIONS_P+2]=0x05; 
     cb2:	85 e0       	ldi	r24, 0x05	; 5
     cb4:	80 af       	std	Z+56, r24	; 0x38
                buf[TCP_OPTIONS_P+3]=0x80;
     cb6:	80 e8       	ldi	r24, 0x80	; 128
     cb8:	81 af       	std	Z+57, r24	; 0x39
                // 24 bytes:
                buf[TCP_HEADER_LEN_P]=0x60;
     cba:	80 e6       	ldi	r24, 0x60	; 96
     cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <make_tcphead+0x78>
        }else{
                // no options:
                // 20 bytes:
                buf[TCP_HEADER_LEN_P]=0x50;
     cbe:	80 e5       	ldi	r24, 0x50	; 80
     cc0:	86 a7       	std	Z+46, r24	; 0x2e
     cc2:	08 95       	ret

00000cc4 <make_arp_answer_from_request>:
        }
}

void make_arp_answer_from_request(uint8_t *buf)
{
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	ac 01       	movw	r20, r24
     cca:	ec 01       	movw	r28, r24
     ccc:	2b ec       	ldi	r18, 0xCB	; 203
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	fc 01       	movw	r30, r24
     cd2:	d9 01       	movw	r26, r18
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     cd4:	86 81       	ldd	r24, Z+6	; 0x06
     cd6:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     cd8:	8d 91       	ld	r24, X+
     cda:	86 83       	std	Z+6, r24	; 0x06
     cdc:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	a1 3d       	cpi	r26, 0xD1	; 209
     ce2:	b8 07       	cpc	r27, r24
     ce4:	b9 f7       	brne	.-18     	; 0xcd4 <make_arp_answer_from_request+0x10>
void make_arp_answer_from_request(uint8_t *buf)
{
        uint8_t i=0;
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
     ce6:	fa 01       	movw	r30, r20
     ce8:	14 8a       	std	Z+20, r1	; 0x14
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
     cea:	82 e0       	ldi	r24, 0x02	; 2
     cec:	85 8b       	std	Z+21, r24	; 0x15
        // fill the mac addresses:
        while(i<6){
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
     cee:	8e 89       	ldd	r24, Y+22	; 0x16
     cf0:	88 a3       	std	Y+32, r24	; 0x20
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
     cf2:	f9 01       	movw	r30, r18
     cf4:	81 91       	ld	r24, Z+
     cf6:	9f 01       	movw	r18, r30
     cf8:	8e 8b       	std	Y+22, r24	; 0x16
     cfa:	21 96       	adiw	r28, 0x01	; 1
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
        // fill the mac addresses:
        while(i<6){
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	21 3d       	cpi	r18, 0xD1	; 209
     d00:	3f 07       	cpc	r19, r31
     d02:	a9 f7       	brne	.-22     	; 0xcee <make_arp_answer_from_request+0x2a>
     d04:	fa 01       	movw	r30, r20
     d06:	7c 96       	adiw	r30, 0x1c	; 28
     d08:	a1 ed       	ldi	r26, 0xD1	; 209
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
     d0c:	80 81       	ld	r24, Z
     d0e:	82 87       	std	Z+10, r24	; 0x0a
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
     d10:	8d 91       	ld	r24, X+
     d12:	81 93       	st	Z+, r24
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	a5 3d       	cpi	r26, 0xD5	; 213
     d18:	b8 07       	cpc	r27, r24
     d1a:	c1 f7       	brne	.-16     	; 0xd0c <make_arp_answer_from_request+0x48>
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf); 
     d1c:	8a e2       	ldi	r24, 0x2A	; 42
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	ba 01       	movw	r22, r20
     d22:	0e 94 06 04 	call	0x80c	; 0x80c <enc28j60PacketSend>
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	08 95       	ret

00000d2c <make_echo_reply_from_request>:

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	ec 01       	movw	r28, r24
     d36:	8b 01       	movw	r16, r22
     d38:	fc 01       	movw	r30, r24
     d3a:	ab ec       	ldi	r26, 0xCB	; 203
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     d3e:	86 81       	ldd	r24, Z+6	; 0x06
     d40:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     d42:	8d 91       	ld	r24, X+
     d44:	86 83       	std	Z+6, r24	; 0x06
     d46:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	a1 3d       	cpi	r26, 0xD1	; 209
     d4c:	b8 07       	cpc	r27, r24
     d4e:	b9 f7       	brne	.-18     	; 0xd3e <make_echo_reply_from_request+0x12>
}

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
        make_eth(buf);
        make_ip(buf);
     d50:	ce 01       	movw	r24, r28
     d52:	0e 94 13 06 	call	0xc26	; 0xc26 <make_ip>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
     d56:	1a a2       	std	Y+34, r1	; 0x22
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
     d58:	8c a1       	ldd	r24, Y+36	; 0x24
     d5a:	88 3f       	cpi	r24, 0xF8	; 248
     d5c:	18 f0       	brcs	.+6      	; 0xd64 <make_echo_reply_from_request+0x38>
                buf[ICMP_CHECKSUM_P+1]++;
     d5e:	8d a1       	ldd	r24, Y+37	; 0x25
     d60:	8f 5f       	subi	r24, 0xFF	; 255
     d62:	8d a3       	std	Y+37, r24	; 0x25
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
     d64:	8c a1       	ldd	r24, Y+36	; 0x24
     d66:	88 5f       	subi	r24, 0xF8	; 248
     d68:	8c a3       	std	Y+36, r24	; 0x24
        //
        enc28j60PacketSend(len,buf);
     d6a:	c8 01       	movw	r24, r16
     d6c:	be 01       	movw	r22, r28
     d6e:	0e 94 06 04 	call	0x80c	; 0x80c <enc28j60PacketSend>
}
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	08 95       	ret

00000d7c <make_udp_reply_from_request>:

// you can send a max of 220 bytes of data
void make_udp_reply_from_request(uint8_t *buf,char *data,uint8_t datalen,uint16_t port)
{
     d7c:	df 92       	push	r13
     d7e:	ef 92       	push	r14
     d80:	ff 92       	push	r15
     d82:	0f 93       	push	r16
     d84:	1f 93       	push	r17
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	ec 01       	movw	r28, r24
     d8c:	7b 01       	movw	r14, r22
     d8e:	d2 2e       	mov	r13, r18
     d90:	13 2f       	mov	r17, r19
     d92:	fc 01       	movw	r30, r24
     d94:	ab ec       	ldi	r26, 0xCB	; 203
     d96:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     d98:	86 81       	ldd	r24, Z+6	; 0x06
     d9a:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     d9c:	8d 91       	ld	r24, X+
     d9e:	86 83       	std	Z+6, r24	; 0x06
     da0:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	a1 3d       	cpi	r26, 0xD1	; 209
     da6:	b8 07       	cpc	r27, r24
     da8:	b9 f7       	brne	.-18     	; 0xd98 <make_udp_reply_from_request+0x1c>
     daa:	04 2f       	mov	r16, r20
     dac:	4d 3d       	cpi	r20, 0xDD	; 221
     dae:	08 f0       	brcs	.+2      	; 0xdb2 <make_udp_reply_from_request+0x36>
     db0:	0c ed       	ldi	r16, 0xDC	; 220
        make_eth(buf);
        if (datalen>220){
                datalen=220;
        }
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
     db2:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
     db4:	04 5e       	subi	r16, 0xE4	; 228
     db6:	09 8b       	std	Y+17, r16	; 0x11
        make_ip(buf);
     db8:	ce 01       	movw	r24, r28
     dba:	0e 94 13 06 	call	0xc26	; 0xc26 <make_ip>
        // send to port:
        //buf[UDP_DST_PORT_H_P]=port>>8;
        //buf[UDP_DST_PORT_L_P]=port & 0xff;
        // sent to port of sender and use "port" as own source:
        buf[UDP_DST_PORT_H_P]=buf[UDP_SRC_PORT_H_P];
     dbe:	8a a1       	ldd	r24, Y+34	; 0x22
     dc0:	8c a3       	std	Y+36, r24	; 0x24
        buf[UDP_DST_PORT_L_P]= buf[UDP_SRC_PORT_L_P];
     dc2:	8b a1       	ldd	r24, Y+35	; 0x23
     dc4:	8d a3       	std	Y+37, r24	; 0x25
        buf[UDP_SRC_PORT_H_P]=port>>8;
     dc6:	1a a3       	std	Y+34, r17	; 0x22
        buf[UDP_SRC_PORT_L_P]=port & 0xff;
     dc8:	db a2       	std	Y+35, r13	; 0x23
        // calculte the udp length:
        buf[UDP_LEN_H_P]=0;
     dca:	1e a2       	std	Y+38, r1	; 0x26
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
     dcc:	04 51       	subi	r16, 0x14	; 20
     dce:	0f a3       	std	Y+39, r16	; 0x27
     dd0:	08 50       	subi	r16, 0x08	; 8
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
     dd2:	18 a6       	std	Y+40, r1	; 0x28
        buf[UDP_CHECKSUM_L_P]=0;
     dd4:	19 a6       	std	Y+41, r1	; 0x29
     dd6:	de 01       	movw	r26, r28
     dd8:	9a 96       	adiw	r26, 0x2a	; 42
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	07 c0       	rjmp	.+14     	; 0xdee <make_udp_reply_from_request+0x72>
        // copy the data:
        while(i<datalen){
                buf[UDP_DATA_P+i]=data[i];
     de0:	f7 01       	movw	r30, r14
     de2:	e2 0f       	add	r30, r18
     de4:	f3 1f       	adc	r31, r19
     de6:	80 81       	ld	r24, Z
     de8:	8d 93       	st	X+, r24
     dea:	2f 5f       	subi	r18, 0xFF	; 255
     dec:	3f 4f       	sbci	r19, 0xFF	; 255
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
        buf[UDP_CHECKSUM_L_P]=0;
        // copy the data:
        while(i<datalen){
     dee:	20 17       	cp	r18, r16
     df0:	b8 f3       	brcs	.-18     	; 0xde0 <make_udp_reply_from_request+0x64>
                buf[UDP_DATA_P+i]=data[i];
                i++;
        }
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
     df2:	10 e0       	ldi	r17, 0x00	; 0
     df4:	00 5f       	subi	r16, 0xF0	; 240
     df6:	1f 4f       	sbci	r17, 0xFF	; 255
     df8:	ce 01       	movw	r24, r28
     dfa:	4a 96       	adiw	r24, 0x1a	; 26
     dfc:	b8 01       	movw	r22, r16
     dfe:	41 e0       	ldi	r20, 0x01	; 1
     e00:	0e 94 12 05 	call	0xa24	; 0xa24 <checksum>
        buf[UDP_CHECKSUM_H_P]=ck>>8;
     e04:	98 a7       	std	Y+40, r25	; 0x28
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
     e06:	89 a7       	std	Y+41, r24	; 0x29
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
     e08:	c8 01       	movw	r24, r16
     e0a:	4a 96       	adiw	r24, 0x1a	; 26
     e0c:	be 01       	movw	r22, r28
     e0e:	0e 94 06 04 	call	0x80c	; 0x80c <enc28j60PacketSend>
}
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	ff 90       	pop	r15
     e1c:	ef 90       	pop	r14
     e1e:	df 90       	pop	r13
     e20:	08 95       	ret

00000e22 <make_tcp_synack_from_syn>:

void make_tcp_synack_from_syn(uint8_t *buf)
{
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	ec 01       	movw	r28, r24
     e28:	fc 01       	movw	r30, r24
     e2a:	ab ec       	ldi	r26, 0xCB	; 203
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     e2e:	86 81       	ldd	r24, Z+6	; 0x06
     e30:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     e32:	8d 91       	ld	r24, X+
     e34:	86 83       	std	Z+6, r24	; 0x06
     e36:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	a1 3d       	cpi	r26, 0xD1	; 209
     e3c:	b8 07       	cpc	r27, r24
     e3e:	b9 f7       	brne	.-18     	; 0xe2e <make_tcp_synack_from_syn+0xc>
{
        uint16_t ck;
        make_eth(buf);
        // total length field in the IP header must be set:
        // 20 bytes IP + 24 bytes (20tcp+4tcp options)
        buf[IP_TOTLEN_H_P]=0;
     e40:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
     e42:	8c e2       	ldi	r24, 0x2C	; 44
     e44:	89 8b       	std	Y+17, r24	; 0x11
        make_ip(buf);
     e46:	ce 01       	movw	r24, r28
     e48:	0e 94 13 06 	call	0xc26	; 0xc26 <make_ip>
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYNACK_V;
     e4c:	82 e1       	ldi	r24, 0x12	; 18
     e4e:	8f a7       	std	Y+47, r24	; 0x2f
        make_tcphead(buf,1,1,0);
     e50:	ce 01       	movw	r24, r28
     e52:	61 e0       	ldi	r22, 0x01	; 1
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	41 e0       	ldi	r20, 0x01	; 1
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	0e 94 24 06 	call	0xc48	; 0xc48 <make_tcphead>
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + 4 (one option: mss)
        ck=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+4,2);
     e5e:	ce 01       	movw	r24, r28
     e60:	4a 96       	adiw	r24, 0x1a	; 26
     e62:	60 e2       	ldi	r22, 0x20	; 32
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	42 e0       	ldi	r20, 0x02	; 2
     e68:	0e 94 12 05 	call	0xa24	; 0xa24 <checksum>
        buf[TCP_CHECKSUM_H_P]=ck>>8;
     e6c:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
     e6e:	8b ab       	std	Y+51, r24	; 0x33
        // add 4 for option mss:
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN,buf);
     e70:	8a e3       	ldi	r24, 0x3A	; 58
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	be 01       	movw	r22, r28
     e76:	0e 94 06 04 	call	0x80c	; 0x80c <enc28j60PacketSend>
}
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	08 95       	ret

00000e80 <get_tcp_data_pointer>:
// get a pointer to the start of tcp data in buf
// Returns 0 if there is no data
// You must call init_len_info once before calling this function
uint16_t get_tcp_data_pointer(void)
{
        if (info_data_len){
     e80:	80 91 c4 00 	lds	r24, 0x00C4
     e84:	90 91 c5 00 	lds	r25, 0x00C5
     e88:	89 2b       	or	r24, r25
     e8a:	19 f4       	brne	.+6      	; 0xe92 <get_tcp_data_pointer+0x12>
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	06 c0       	rjmp	.+12     	; 0xe9e <get_tcp_data_pointer+0x1e>
                return((uint16_t)TCP_SRC_PORT_H_P+info_hdr_len);
     e92:	20 91 c6 00 	lds	r18, 0x00C6
     e96:	30 91 c7 00 	lds	r19, 0x00C7
     e9a:	2e 5d       	subi	r18, 0xDE	; 222
     e9c:	3f 4f       	sbci	r19, 0xFF	; 255
        }else{
                return(0);
        }
}
     e9e:	c9 01       	movw	r24, r18
     ea0:	08 95       	ret

00000ea2 <init_len_info>:

// do some basic length calculations and store the result in static varibales
void init_len_info(uint8_t *buf)
{
     ea2:	fc 01       	movw	r30, r24
        info_data_len=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
     ea4:	90 89       	ldd	r25, Z+16	; 0x10
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	21 89       	ldd	r18, Z+17	; 0x11
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	28 2b       	or	r18, r24
     eae:	39 2b       	or	r19, r25
        info_data_len-=IP_HEADER_LEN;
        info_hdr_len=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
     eb0:	86 a5       	ldd	r24, Z+46	; 0x2e
     eb2:	82 95       	swap	r24
     eb4:	8f 70       	andi	r24, 0x0F	; 15
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	90 93 c7 00 	sts	0x00C7, r25
     ec4:	80 93 c6 00 	sts	0x00C6, r24
        info_data_len-=info_hdr_len;
     ec8:	24 51       	subi	r18, 0x14	; 20
     eca:	30 40       	sbci	r19, 0x00	; 0
     ecc:	28 1b       	sub	r18, r24
     ece:	39 0b       	sbc	r19, r25
     ed0:	30 93 c5 00 	sts	0x00C5, r19
     ed4:	20 93 c4 00 	sts	0x00C4, r18
        if (info_data_len<=0){
     ed8:	12 16       	cp	r1, r18
     eda:	13 06       	cpc	r1, r19
     edc:	24 f0       	brlt	.+8      	; 0xee6 <init_len_info+0x44>
                info_data_len=0;
     ede:	10 92 c5 00 	sts	0x00C5, r1
     ee2:	10 92 c4 00 	sts	0x00C4, r1
     ee6:	08 95       	ret

00000ee8 <fill_tcp_data_p>:

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data_p(uint8_t *buf,uint16_t pos, const prog_char *progmem_s)
{
     ee8:	6a 5c       	subi	r22, 0xCA	; 202
     eea:	7f 4f       	sbci	r23, 0xFF	; 255
     eec:	dc 01       	movw	r26, r24
     eee:	a6 0f       	add	r26, r22
     ef0:	b7 1f       	adc	r27, r23
     ef2:	66 53       	subi	r22, 0x36	; 54
     ef4:	70 40       	sbci	r23, 0x00	; 0
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <fill_tcp_data_p+0x16>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     ef8:	8d 93       	st	X+, r24
                pos++;
     efa:	6f 5f       	subi	r22, 0xFF	; 255
     efc:	7f 4f       	sbci	r23, 0xFF	; 255
     efe:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     f00:	4f 5f       	subi	r20, 0xFF	; 255
     f02:	5f 4f       	sbci	r21, 0xFF	; 255
     f04:	84 91       	lpm	r24, Z+
     f06:	88 23       	and	r24, r24
     f08:	b9 f7       	brne	.-18     	; 0xef8 <fill_tcp_data_p+0x10>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
                pos++;
        }
        return(pos);
}
     f0a:	cb 01       	movw	r24, r22
     f0c:	08 95       	ret

00000f0e <fill_tcp_data>:

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
     f0e:	fa 01       	movw	r30, r20
     f10:	6a 5c       	subi	r22, 0xCA	; 202
     f12:	7f 4f       	sbci	r23, 0xFF	; 255
     f14:	dc 01       	movw	r26, r24
     f16:	a6 0f       	add	r26, r22
     f18:	b7 1f       	adc	r27, r23
     f1a:	66 53       	subi	r22, 0x36	; 54
     f1c:	70 40       	sbci	r23, 0x00	; 0
     f1e:	04 c0       	rjmp	.+8      	; 0xf28 <fill_tcp_data+0x1a>
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
     f20:	8d 93       	st	X+, r24
                pos++;
     f22:	6f 5f       	subi	r22, 0xFF	; 255
     f24:	7f 4f       	sbci	r23, 0xFF	; 255
                s++;
     f26:	31 96       	adiw	r30, 0x01	; 1
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
     f28:	80 81       	ld	r24, Z
     f2a:	88 23       	and	r24, r24
     f2c:	c9 f7       	brne	.-14     	; 0xf20 <fill_tcp_data+0x12>
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
                pos++;
                s++;
        }
        return(pos);
}
     f2e:	cb 01       	movw	r24, r22
     f30:	08 95       	ret

00000f32 <make_tcp_ack_from_any>:

// Make just an ack packet with no tcp data inside
// This will modify the eth/ip/tcp header 
void make_tcp_ack_from_any(uint8_t *buf)
{
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	ec 01       	movw	r28, r24
     f38:	fc 01       	movw	r30, r24
     f3a:	ab ec       	ldi	r26, 0xCB	; 203
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     f3e:	86 81       	ldd	r24, Z+6	; 0x06
     f40:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     f42:	8d 91       	ld	r24, X+
     f44:	86 83       	std	Z+6, r24	; 0x06
     f46:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	a1 3d       	cpi	r26, 0xD1	; 209
     f4c:	b8 07       	cpc	r27, r24
     f4e:	b9 f7       	brne	.-18     	; 0xf3e <make_tcp_ack_from_any+0xc>
void make_tcp_ack_from_any(uint8_t *buf)
{
        uint16_t j;
        make_eth(buf);
        // fill the header:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V;
     f50:	80 e1       	ldi	r24, 0x10	; 16
     f52:	8f a7       	std	Y+47, r24	; 0x2f
        if (info_data_len==0){
     f54:	60 91 c4 00 	lds	r22, 0x00C4
     f58:	70 91 c5 00 	lds	r23, 0x00C5
     f5c:	61 15       	cp	r22, r1
     f5e:	71 05       	cpc	r23, r1
     f60:	21 f4       	brne	.+8      	; 0xf6a <make_tcp_ack_from_any+0x38>
                // if there is no data then we must still acknoledge one packet
                make_tcphead(buf,1,0,1); // no options
     f62:	ce 01       	movw	r24, r28
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	01 c0       	rjmp	.+2      	; 0xf6c <make_tcp_ack_from_any+0x3a>
        }else{
                make_tcphead(buf,info_data_len,0,1); // no options
     f6a:	ce 01       	movw	r24, r28
     f6c:	40 e0       	ldi	r20, 0x00	; 0
     f6e:	21 e0       	ldi	r18, 0x01	; 1
     f70:	0e 94 24 06 	call	0xc48	; 0xc48 <make_tcphead>
        }

        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) 
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
        buf[IP_TOTLEN_H_P]=j>>8;
     f74:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=j& 0xff;
     f76:	88 e2       	ldi	r24, 0x28	; 40
     f78:	89 8b       	std	Y+17, r24	; 0x11
        make_ip(buf);
     f7a:	ce 01       	movw	r24, r28
     f7c:	0e 94 13 06 	call	0xc26	; 0xc26 <make_ip>
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN,2);
     f80:	ce 01       	movw	r24, r28
     f82:	4a 96       	adiw	r24, 0x1a	; 26
     f84:	6c e1       	ldi	r22, 0x1C	; 28
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	42 e0       	ldi	r20, 0x02	; 2
     f8a:	0e 94 12 05 	call	0xa24	; 0xa24 <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
     f8e:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
     f90:	8b ab       	std	Y+51, r24	; 0x33
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN,buf);
     f92:	86 e3       	ldi	r24, 0x36	; 54
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	be 01       	movw	r22, r28
     f98:	0e 94 06 04 	call	0x80c	; 0x80c <enc28j60PacketSend>
}
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	08 95       	ret

00000fa2 <make_tcp_ack_with_data>:
// dlen is the amount of tcp data (http data) we send in this packet
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
void make_tcp_ack_with_data(uint8_t *buf,uint16_t dlen)
{
     fa2:	ef 92       	push	r14
     fa4:	ff 92       	push	r15
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	8c 01       	movw	r16, r24
     fac:	7b 01       	movw	r14, r22
        uint16_t j;
        // fill the header:
        // This code requires that we send only one data packet
        // because we keep no state information. We must therefore set
        // the fin here:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V;
     fae:	89 e1       	ldi	r24, 0x19	; 25
     fb0:	f8 01       	movw	r30, r16
     fb2:	87 a7       	std	Z+47, r24	; 0x2f

        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) + len of data
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
     fb4:	cb 01       	movw	r24, r22
     fb6:	88 96       	adiw	r24, 0x28	; 40
        buf[IP_TOTLEN_H_P]=j>>8;
     fb8:	90 8b       	std	Z+16, r25	; 0x10
        buf[IP_TOTLEN_L_P]=j& 0xff;
     fba:	81 8b       	std	Z+17, r24	; 0x11
        fill_ip_hdr_checksum(buf);
     fbc:	c8 01       	movw	r24, r16
     fbe:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <fill_ip_hdr_checksum>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
     fc2:	f8 01       	movw	r30, r16
     fc4:	12 aa       	std	Z+50, r1	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
     fc6:	13 aa       	std	Z+51, r1	; 0x33
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+dlen,2);
     fc8:	8c e1       	ldi	r24, 0x1C	; 28
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	e8 0e       	add	r14, r24
     fce:	f9 1e       	adc	r15, r25
     fd0:	c8 01       	movw	r24, r16
     fd2:	4a 96       	adiw	r24, 0x1a	; 26
     fd4:	b7 01       	movw	r22, r14
     fd6:	42 e0       	ldi	r20, 0x02	; 2
     fd8:	0e 94 12 05 	call	0xa24	; 0xa24 <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
     fdc:	f8 01       	movw	r30, r16
     fde:	92 ab       	std	Z+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
     fe0:	83 ab       	std	Z+51, r24	; 0x33
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
     fe2:	c7 01       	movw	r24, r14
     fe4:	4a 96       	adiw	r24, 0x1a	; 26
     fe6:	b8 01       	movw	r22, r16
     fe8:	0e 94 06 04 	call	0x80c	; 0x80c <enc28j60PacketSend>
}
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	08 95       	ret

00000ff6 <analyse_get_url>:
// takes a string of the form password/commandNumber and analyse it
// return values: -1 invalid password, otherwise command number
//                -2 no command given but password valid
//                -3 valid password, no command and no trailing "/"
int8_t analyse_get_url(char *str)
{
     ff6:	58 2f       	mov	r21, r24
     ff8:	28 2f       	mov	r18, r24
     ffa:	39 2f       	mov	r19, r25
     ffc:	d9 01       	movw	r26, r18
     ffe:	05 c0       	rjmp	.+10     	; 0x100a <analyse_get_url+0x14>
        uint8_t loop=1;
        uint8_t i=0;
        while(loop){
                if(password[i]){
                        if(*str==password[i]){
    1000:	8e 17       	cp	r24, r30
    1002:	11 f0       	breq	.+4      	; 0x1008 <analyse_get_url+0x12>
    1004:	8f ef       	ldi	r24, 0xFF	; 255
    1006:	08 95       	ret
                                str++;
    1008:	11 96       	adiw	r26, 0x01	; 1
int8_t analyse_get_url(char *str)
{
        uint8_t loop=1;
        uint8_t i=0;
        while(loop){
                if(password[i]){
    100a:	ea 2f       	mov	r30, r26
    100c:	e5 1b       	sub	r30, r21
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	e5 54       	subi	r30, 0x45	; 69
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	e0 81       	ld	r30, Z
    1016:	8c 91       	ld	r24, X
    1018:	ee 23       	and	r30, r30
    101a:	91 f7       	brne	.-28     	; 0x1000 <analyse_get_url+0xa>
                        // end of password
                        loop=0;
                }
        }
        // is is now one char after the password
        if (*str == '/'){
    101c:	8f 32       	cpi	r24, 0x2F	; 47
    101e:	11 f0       	breq	.+4      	; 0x1024 <analyse_get_url+0x2e>
    1020:	8d ef       	ldi	r24, 0xFD	; 253
    1022:	08 95       	ret
                str++;
        }else{
                return(-3);
        }
        // check the first char, garbage after this is ignored (including a slash)
        if (*str < 0x3a && *str > 0x2f){
    1024:	11 96       	adiw	r26, 0x01	; 1
    1026:	8c 91       	ld	r24, X
    1028:	80 53       	subi	r24, 0x30	; 48
    102a:	8a 30       	cpi	r24, 0x0A	; 10
    102c:	08 f0       	brcs	.+2      	; 0x1030 <analyse_get_url+0x3a>
    102e:	8e ef       	ldi	r24, 0xFE	; 254
                // is a ASCII number, return it
                return(*str-0x30);
        }
        return(-2);
}
    1030:	08 95       	ret

00001032 <adc>:
unsigned int adc(unsigned char channel)
{  unsigned int val;
   ADMUX=0x40+channel;
    1032:	80 5c       	subi	r24, 0xC0	; 192
    1034:	87 b9       	out	0x07, r24	; 7
   ADCSRA=(1<<ADEN);
    1036:	80 e8       	ldi	r24, 0x80	; 128
    1038:	86 b9       	out	0x06, r24	; 6
   ADCSRA|=(1<<ADSC);
    103a:	36 9a       	sbi	0x06, 6	; 6
    ADCSRA|=0x07;
    103c:	86 b1       	in	r24, 0x06	; 6
    103e:	87 60       	ori	r24, 0x07	; 7
    1040:	86 b9       	out	0x06, r24	; 6
   while(bit_is_clear(ADCSRA,ADIF));
    1042:	34 9b       	sbis	0x06, 4	; 6
    1044:	fe cf       	rjmp	.-4      	; 0x1042 <adc+0x10>
   val=ADCW; 
    1046:	24 b1       	in	r18, 0x04	; 4
    1048:	35 b1       	in	r19, 0x05	; 5
   return val;
}
    104a:	c9 01       	movw	r24, r18
    104c:	08 95       	ret

0000104e <moved_perm>:
// answer HTTP/1.0 301 Moved Permanently\r\nLocation: password/\r\n\r\n
// to redirect to the url ending in a slash
uint16_t moved_perm(uint8_t *buf)
{
    104e:	dc 01       	movw	r26, r24
    1050:	d6 96       	adiw	r26, 0x36	; 54
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	03 c0       	rjmp	.+6      	; 0x105e <moved_perm+0x10>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1058:	4d 93       	st	X+, r20
                pos++;
    105a:	2f 5f       	subi	r18, 0xFF	; 255
    105c:	3f 4f       	sbci	r19, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    105e:	f9 01       	movw	r30, r18
    1060:	e8 5a       	subi	r30, 0xA8	; 168
    1062:	fc 4f       	sbci	r31, 0xFC	; 252
    1064:	44 91       	lpm	r20, Z+
    1066:	44 23       	and	r20, r20
    1068:	b9 f7       	brne	.-18     	; 0x1058 <moved_perm+0xa>
    106a:	2a 5c       	subi	r18, 0xCA	; 202
    106c:	3f 4f       	sbci	r19, 0xFF	; 255
    106e:	dc 01       	movw	r26, r24
    1070:	a2 0f       	add	r26, r18
    1072:	b3 1f       	adc	r27, r19
    1074:	26 53       	subi	r18, 0x36	; 54
    1076:	30 40       	sbci	r19, 0x00	; 0
    1078:	eb eb       	ldi	r30, 0xBB	; 187
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	04 c0       	rjmp	.+8      	; 0x1086 <moved_perm+0x38>
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
    107e:	4d 93       	st	X+, r20
                pos++;
    1080:	2f 5f       	subi	r18, 0xFF	; 255
    1082:	3f 4f       	sbci	r19, 0xFF	; 255
                s++;
    1084:	31 96       	adiw	r30, 0x01	; 1
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
    1086:	40 81       	ld	r20, Z
    1088:	44 23       	and	r20, r20
    108a:	c9 f7       	brne	.-14     	; 0x107e <moved_perm+0x30>
    108c:	2a 5c       	subi	r18, 0xCA	; 202
    108e:	3f 4f       	sbci	r19, 0xFF	; 255
    1090:	dc 01       	movw	r26, r24
    1092:	a2 0f       	add	r26, r18
    1094:	b3 1f       	adc	r27, r19
    1096:	26 53       	subi	r18, 0x36	; 54
    1098:	30 40       	sbci	r19, 0x00	; 0
        uint16_t plen;
        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 301 Moved Permanently\r\nLocation: "));
        plen=fill_tcp_data(buf,plen,password);
        plen=fill_tcp_data_p(buf,plen,PSTR("/\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n"));
    109a:	47 e2       	ldi	r20, 0x27	; 39
    109c:	53 e0       	ldi	r21, 0x03	; 3
    109e:	03 c0       	rjmp	.+6      	; 0x10a6 <moved_perm+0x58>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    10a0:	6d 93       	st	X+, r22
                pos++;
    10a2:	2f 5f       	subi	r18, 0xFF	; 255
    10a4:	3f 4f       	sbci	r19, 0xFF	; 255
    10a6:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    10a8:	4f 5f       	subi	r20, 0xFF	; 255
    10aa:	5f 4f       	sbci	r21, 0xFF	; 255
    10ac:	64 91       	lpm	r22, Z+
    10ae:	66 23       	and	r22, r22
    10b0:	b9 f7       	brne	.-18     	; 0x10a0 <moved_perm+0x52>
    10b2:	2a 5c       	subi	r18, 0xCA	; 202
    10b4:	3f 4f       	sbci	r19, 0xFF	; 255
    10b6:	dc 01       	movw	r26, r24
    10b8:	a2 0f       	add	r26, r18
    10ba:	b3 1f       	adc	r27, r19
    10bc:	26 53       	subi	r18, 0x36	; 54
    10be:	30 40       	sbci	r19, 0x00	; 0
        plen=fill_tcp_data_p(buf,plen,PSTR("<h1>301 Moved Permanently</h1>\n"));
    10c0:	47 e0       	ldi	r20, 0x07	; 7
    10c2:	53 e0       	ldi	r21, 0x03	; 3
    10c4:	03 c0       	rjmp	.+6      	; 0x10cc <moved_perm+0x7e>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    10c6:	6d 93       	st	X+, r22
                pos++;
    10c8:	2f 5f       	subi	r18, 0xFF	; 255
    10ca:	3f 4f       	sbci	r19, 0xFF	; 255
    10cc:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    10ce:	4f 5f       	subi	r20, 0xFF	; 255
    10d0:	5f 4f       	sbci	r21, 0xFF	; 255
    10d2:	64 91       	lpm	r22, Z+
    10d4:	66 23       	and	r22, r22
    10d6:	b9 f7       	brne	.-18     	; 0x10c6 <moved_perm+0x78>
    10d8:	2a 5c       	subi	r18, 0xCA	; 202
    10da:	3f 4f       	sbci	r19, 0xFF	; 255
    10dc:	dc 01       	movw	r26, r24
    10de:	a2 0f       	add	r26, r18
    10e0:	b3 1f       	adc	r27, r19
    10e2:	26 53       	subi	r18, 0x36	; 54
    10e4:	30 40       	sbci	r19, 0x00	; 0
        plen=fill_tcp_data_p(buf,plen,PSTR("add a trailing slash to the url\n"));
    10e6:	86 ee       	ldi	r24, 0xE6	; 230
    10e8:	92 e0       	ldi	r25, 0x02	; 2
    10ea:	03 c0       	rjmp	.+6      	; 0x10f2 <moved_perm+0xa4>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    10ec:	4d 93       	st	X+, r20
                pos++;
    10ee:	2f 5f       	subi	r18, 0xFF	; 255
    10f0:	3f 4f       	sbci	r19, 0xFF	; 255
    10f2:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	44 91       	lpm	r20, Z+
    10f8:	44 23       	and	r20, r20
    10fa:	c1 f7       	brne	.-16     	; 0x10ec <moved_perm+0x9e>
        return(plen);
}
    10fc:	c9 01       	movw	r24, r18
    10fe:	08 95       	ret

00001100 <verify_password>:
unsigned int radiance;
#define STR_BUFFER_SIZE 12
volatile char gStrbuf[STR_BUFFER_SIZE+1];
// 
uint8_t verify_password(char *str)
{
    1100:	bc 01       	movw	r22, r24
        // the first characters of the received string are
        // a simple password/cookie:
        if (strncmp(password,str,5)==0){
    1102:	8b eb       	ldi	r24, 0xBB	; 187
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	45 e0       	ldi	r20, 0x05	; 5
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <strncmp>
    110e:	9c 01       	movw	r18, r24
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	23 2b       	or	r18, r19
    1114:	09 f4       	brne	.+2      	; 0x1118 <verify_password+0x18>
    1116:	81 e0       	ldi	r24, 0x01	; 1
                return(1);
        }
        return(0);
}
    1118:	08 95       	ret

0000111a <print_webpage>:
        return(plen);
}

// prepare the webpage by writing the data to the tcp send buffer
uint16_t print_webpage(uint8_t *buf,uint8_t on_off)
{
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	8c 01       	movw	r16, r24
    1126:	f6 2e       	mov	r15, r22
    1128:	dc 01       	movw	r26, r24
    112a:	d6 96       	adiw	r26, 0x36	; 54
    112c:	c0 e0       	ldi	r28, 0x00	; 0
    112e:	d0 e0       	ldi	r29, 0x00	; 0
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <print_webpage+0x1c>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1132:	8d 93       	st	X+, r24
                pos++;
    1134:	21 96       	adiw	r28, 0x01	; 1
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1136:	fe 01       	movw	r30, r28
    1138:	e6 56       	subi	r30, 0x66	; 102
    113a:	fd 4f       	sbci	r31, 0xFD	; 253
    113c:	84 91       	lpm	r24, Z+
    113e:	88 23       	and	r24, r24
    1140:	c1 f7       	brne	.-16     	; 0x1132 <print_webpage+0x18>
    1142:	e6 96       	adiw	r28, 0x36	; 54
    1144:	d8 01       	movw	r26, r16
    1146:	ac 0f       	add	r26, r28
    1148:	bd 1f       	adc	r27, r29
    114a:	e6 97       	sbiw	r28, 0x36	; 54
        uint16_t plen;
        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\nRefresh: 20\r\n\r\n"));
        plen=fill_tcp_data_p(buf,plen,PSTR("<font color=\"#00FF00\"><center><H1>Solar Irradiance Meter</H1></center></font>"));
    114c:	8c e4       	ldi	r24, 0x4C	; 76
    114e:	92 e0       	ldi	r25, 0x02	; 2
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <print_webpage+0x3c>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1152:	2d 93       	st	X+, r18
                pos++;
    1154:	21 96       	adiw	r28, 0x01	; 1
    1156:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	24 91       	lpm	r18, Z+
    115c:	22 23       	and	r18, r18
    115e:	c9 f7       	brne	.-14     	; 0x1152 <print_webpage+0x38>
    1160:	e6 96       	adiw	r28, 0x36	; 54
    1162:	d8 01       	movw	r26, r16
    1164:	ac 0f       	add	r26, r28
    1166:	bd 1f       	adc	r27, r29
    1168:	e6 97       	sbiw	r28, 0x36	; 54
        plen=fill_tcp_data_p(buf,plen,PSTR("<center><p><h2>Irradiance is: "));
    116a:	8d e2       	ldi	r24, 0x2D	; 45
    116c:	92 e0       	ldi	r25, 0x02	; 2
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <print_webpage+0x5a>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1170:	2d 93       	st	X+, r18
                pos++;
    1172:	21 96       	adiw	r28, 0x01	; 1
    1174:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	24 91       	lpm	r18, Z+
    117a:	22 23       	and	r18, r18
    117c:	c9 f7       	brne	.-14     	; 0x1170 <print_webpage+0x56>
		itoa(radiance*2,gStrbuf,10); // convert integer to string
    117e:	80 91 d5 00 	lds	r24, 0x00D5
    1182:	90 91 d6 00 	lds	r25, 0x00D6
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	67 ed       	ldi	r22, 0xD7	; 215
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	4a e0       	ldi	r20, 0x0A	; 10
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	0e 94 8b 0b 	call	0x1716	; 0x1716 <itoa>
    1196:	e6 96       	adiw	r28, 0x36	; 54
    1198:	d8 01       	movw	r26, r16
    119a:	ac 0f       	add	r26, r28
    119c:	bd 1f       	adc	r27, r29
    119e:	e6 97       	sbiw	r28, 0x36	; 54
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <print_webpage+0x90>
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
    11a6:	ed 93       	st	X+, r30
                pos++;
    11a8:	21 96       	adiw	r28, 0x01	; 1
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
    11aa:	fc 01       	movw	r30, r24
    11ac:	e9 52       	subi	r30, 0x29	; 41
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	e0 81       	ld	r30, Z
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	ee 23       	and	r30, r30
    11b6:	b9 f7       	brne	.-18     	; 0x11a6 <print_webpage+0x8c>
    11b8:	e6 96       	adiw	r28, 0x36	; 54
    11ba:	d8 01       	movw	r26, r16
    11bc:	ac 0f       	add	r26, r28
    11be:	bd 1f       	adc	r27, r29
    11c0:	e6 97       	sbiw	r28, 0x36	; 54
		plen=fill_tcp_data(buf,plen,gStrbuf);
		plen=fill_tcp_data_p(buf,plen,PSTR(" WATTS/sq.meter</center></h2></p>"));
    11c2:	8b e0       	ldi	r24, 0x0B	; 11
    11c4:	92 e0       	ldi	r25, 0x02	; 2
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <print_webpage+0xb2>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    11c8:	2d 93       	st	X+, r18
                pos++;
    11ca:	21 96       	adiw	r28, 0x01	; 1
    11cc:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    11ce:	01 96       	adiw	r24, 0x01	; 1
    11d0:	24 91       	lpm	r18, Z+
    11d2:	22 23       	and	r18, r18
    11d4:	c9 f7       	brne	.-14     	; 0x11c8 <print_webpage+0xae>
    11d6:	e6 96       	adiw	r28, 0x36	; 54
    11d8:	d8 01       	movw	r26, r16
    11da:	ac 0f       	add	r26, r28
    11dc:	bd 1f       	adc	r27, r29
    11de:	e6 97       	sbiw	r28, 0x36	; 54
		plen=fill_tcp_data_p(buf,plen,PSTR("<center><p>Output is: "));
    11e0:	84 ef       	ldi	r24, 0xF4	; 244
    11e2:	91 e0       	ldi	r25, 0x01	; 1
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <print_webpage+0xd0>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    11e6:	2d 93       	st	X+, r18
                pos++;
    11e8:	21 96       	adiw	r28, 0x01	; 1
    11ea:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	24 91       	lpm	r18, Z+
    11f0:	22 23       	and	r18, r18
    11f2:	c9 f7       	brne	.-14     	; 0x11e6 <print_webpage+0xcc>
    11f4:	ce 01       	movw	r24, r28
    11f6:	c6 96       	adiw	r24, 0x36	; 54
        if (on_off){
    11f8:	ff 20       	and	r15, r15
    11fa:	31 f4       	brne	.+12     	; 0x1208 <print_webpage+0xee>
    11fc:	d8 01       	movw	r26, r16
    11fe:	a8 0f       	add	r26, r24
    1200:	b9 1f       	adc	r27, r25
                plen=fill_tcp_data_p(buf,plen,PSTR("<font color=\"#FF0000\"> ON</font>"));
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("OFF"));
    1202:	8f ec       	ldi	r24, 0xCF	; 207
    1204:	91 e0       	ldi	r25, 0x01	; 1
    1206:	17 c0       	rjmp	.+46     	; 0x1236 <print_webpage+0x11c>
    1208:	d8 01       	movw	r26, r16
    120a:	a8 0f       	add	r26, r24
    120c:	b9 1f       	adc	r27, r25
		itoa(radiance*2,gStrbuf,10); // convert integer to string
		plen=fill_tcp_data(buf,plen,gStrbuf);
		plen=fill_tcp_data_p(buf,plen,PSTR(" WATTS/sq.meter</center></h2></p>"));
		plen=fill_tcp_data_p(buf,plen,PSTR("<center><p>Output is: "));
        if (on_off){
                plen=fill_tcp_data_p(buf,plen,PSTR("<font color=\"#FF0000\"> ON</font>"));
    120e:	83 ed       	ldi	r24, 0xD3	; 211
    1210:	91 e0       	ldi	r25, 0x01	; 1
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <print_webpage+0xfe>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1214:	2d 93       	st	X+, r18
                pos++;
    1216:	21 96       	adiw	r28, 0x01	; 1
    1218:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    121a:	01 96       	adiw	r24, 0x01	; 1
    121c:	24 91       	lpm	r18, Z+
    121e:	22 23       	and	r18, r18
    1220:	c9 f7       	brne	.-14     	; 0x1214 <print_webpage+0xfa>
    1222:	e6 96       	adiw	r28, 0x36	; 54
    1224:	d8 01       	movw	r26, r16
    1226:	ac 0f       	add	r26, r28
    1228:	bd 1f       	adc	r27, r29
    122a:	e6 97       	sbiw	r28, 0x36	; 54
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("OFF"));
        }
        plen=fill_tcp_data_p(buf,plen,PSTR(" <small><a href=\".\">[refresh status]</a></small></p>\n<p><a href=\"."));
    122c:	8c e8       	ldi	r24, 0x8C	; 140
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	0a c0       	rjmp	.+20     	; 0x1246 <print_webpage+0x12c>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1232:	2d 93       	st	X+, r18
                pos++;
    1234:	21 96       	adiw	r28, 0x01	; 1
    1236:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	24 91       	lpm	r18, Z+
    123c:	22 23       	and	r18, r18
    123e:	c9 f7       	brne	.-14     	; 0x1232 <print_webpage+0x118>
    1240:	f0 cf       	rjmp	.-32     	; 0x1222 <print_webpage+0x108>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1242:	2d 93       	st	X+, r18
                pos++;
    1244:	21 96       	adiw	r28, 0x01	; 1
    1246:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	24 91       	lpm	r18, Z+
    124c:	22 23       	and	r18, r18
    124e:	c9 f7       	brne	.-14     	; 0x1242 <print_webpage+0x128>
    1250:	ce 01       	movw	r24, r28
    1252:	c6 96       	adiw	r24, 0x36	; 54
        if (on_off){
    1254:	ff 20       	and	r15, r15
    1256:	31 f4       	brne	.+12     	; 0x1264 <print_webpage+0x14a>
    1258:	d8 01       	movw	r26, r16
    125a:	a8 0f       	add	r26, r24
    125c:	b9 1f       	adc	r27, r25
                plen=fill_tcp_data_p(buf,plen,PSTR("/0\">Switch off</a><p>"));
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("/1\">Switch on</a><p>"));
    125e:	81 e6       	ldi	r24, 0x61	; 97
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	17 c0       	rjmp	.+46     	; 0x1292 <print_webpage+0x178>
    1264:	d8 01       	movw	r26, r16
    1266:	a8 0f       	add	r26, r24
    1268:	b9 1f       	adc	r27, r25
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("OFF"));
        }
        plen=fill_tcp_data_p(buf,plen,PSTR(" <small><a href=\".\">[refresh status]</a></small></p>\n<p><a href=\"."));
        if (on_off){
                plen=fill_tcp_data_p(buf,plen,PSTR("/0\">Switch off</a><p>"));
    126a:	86 e7       	ldi	r24, 0x76	; 118
    126c:	91 e0       	ldi	r25, 0x01	; 1
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <print_webpage+0x15a>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1270:	2d 93       	st	X+, r18
                pos++;
    1272:	21 96       	adiw	r28, 0x01	; 1
    1274:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1276:	01 96       	adiw	r24, 0x01	; 1
    1278:	24 91       	lpm	r18, Z+
    127a:	22 23       	and	r18, r18
    127c:	c9 f7       	brne	.-14     	; 0x1270 <print_webpage+0x156>
    127e:	e6 96       	adiw	r28, 0x36	; 54
    1280:	d8 01       	movw	r26, r16
    1282:	ac 0f       	add	r26, r28
    1284:	bd 1f       	adc	r27, r29
    1286:	e6 97       	sbiw	r28, 0x36	; 54
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("/1\">Switch on</a><p>"));
        }
        plen=fill_tcp_data_p(buf,plen,PSTR("</center><hr><br><h2>Shachi Awasthi</h2>\n"));
    1288:	87 e3       	ldi	r24, 0x37	; 55
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	0a c0       	rjmp	.+20     	; 0x12a2 <print_webpage+0x188>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    128e:	2d 93       	st	X+, r18
                pos++;
    1290:	21 96       	adiw	r28, 0x01	; 1
    1292:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	24 91       	lpm	r18, Z+
    1298:	22 23       	and	r18, r18
    129a:	c9 f7       	brne	.-14     	; 0x128e <print_webpage+0x174>
    129c:	f0 cf       	rjmp	.-32     	; 0x127e <print_webpage+0x164>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    129e:	2d 93       	st	X+, r18
                pos++;
    12a0:	21 96       	adiw	r28, 0x01	; 1
    12a2:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	24 91       	lpm	r18, Z+
    12a8:	22 23       	and	r18, r18
    12aa:	c9 f7       	brne	.-14     	; 0x129e <print_webpage+0x184>
        return(plen);
}
    12ac:	ce 01       	movw	r24, r28
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	ff 90       	pop	r15
    12b8:	08 95       	ret

000012ba <main>:


int main(void){
    12ba:	2f 92       	push	r2
    12bc:	3f 92       	push	r3
    12be:	4f 92       	push	r4
    12c0:	5f 92       	push	r5
    12c2:	6f 92       	push	r6
    12c4:	7f 92       	push	r7
    12c6:	8f 92       	push	r8
    12c8:	9f 92       	push	r9
    12ca:	af 92       	push	r10
    12cc:	bf 92       	push	r11
    12ce:	cf 92       	push	r12
    12d0:	df 92       	push	r13
    12d2:	ef 92       	push	r14
    12d4:	ff 92       	push	r15
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	ad 97       	sbiw	r28, 0x2d	; 45
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	12 e3       	ldi	r17, 0x32	; 50
    12f0:	81 2f       	mov	r24, r17
    12f2:	8a 95       	dec	r24
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <main+0x38>
//        CLKPR=(1<<CLKPCE); // change enable
//        CLKPR=0; // "no pre-scaler"
        _delay_loop_1(50); // 12ms

        /* enable PD2/INT0, as input */
        DDRD&= ~(1<<DDD2);
    12f6:	8a 98       	cbi	0x11, 2	; 17
          DDRA=0x0F;
    12f8:	8f e0       	ldi	r24, 0x0F	; 15
    12fa:	8a bb       	out	0x1a, r24	; 26
        /*initialize enc28j60*/
        enc28j60Init(mymac);
    12fc:	81 eb       	ldi	r24, 0xB1	; 177
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 41 03 	call	0x682	; 0x682 <enc28j60Init>
        enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
    1304:	82 e0       	ldi	r24, 0x02	; 2
    1306:	0e 94 3b 03 	call	0x676	; 0x676 <enc28j60clkout>
    130a:	81 2f       	mov	r24, r17
    130c:	8a 95       	dec	r24
    130e:	f1 f7       	brne	.-4      	; 0x130c <main+0x52>
        _delay_loop_1(50); // 12ms
        
        // LED
        /* enable PB1, LED as output */
        DDRB|= (1<<DDB1);
    1310:	b9 9a       	sbi	0x17, 1	; 23

        /* set output to Vcc, LED off */
        PORTB|= (1<<PORTB1);
    1312:	c1 9a       	sbi	0x18, 1	; 24

        // the transistor on PD7
        DDRD|= (1<<DDD7);DDRA|= (1<<7);
    1314:	8f 9a       	sbi	0x11, 7	; 17
    1316:	d7 9a       	sbi	0x1a, 7	; 26
       // PORTD &= ~(1<<PORTD7);// transistor off
        DDRC=0xFF;
    1318:	8f ef       	ldi	r24, 0xFF	; 255
    131a:	84 bb       	out	0x14, r24	; 20
		PORTC = 0x00;// transistor off
    131c:	15 ba       	out	0x15, r1	; 21
        /* Magjack leds configuration, see enc28j60 datasheet, page 11 */
        // LEDB=yellow LEDA=green
        //
        // 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
        // enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
        enc28j60PhyWrite(PHLCON,0x476);
    131e:	84 e1       	ldi	r24, 0x14	; 20
    1320:	66 e7       	ldi	r22, 0x76	; 118
    1322:	74 e0       	ldi	r23, 0x04	; 4
    1324:	0e 94 1d 03 	call	0x63a	; 0x63a <enc28j60PhyWrite>
    1328:	1a 95       	dec	r17
    132a:	f1 f7       	brne	.-4      	; 0x1328 <main+0x6e>
        _delay_loop_1(50); // 12ms
        
        /* set output to GND, red LED on */
        PORTB &= ~(1<<PORTB1);
    132c:	c1 98       	cbi	0x18, 1	; 24
}

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
        uint8_t i=0;
        wwwport=wwwp;
    132e:	80 e5       	ldi	r24, 0x50	; 80
    1330:	80 93 c2 00 	sts	0x00C2, r24
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
        while(i<4){
                ipaddr[i]=myip[i];
    1338:	f9 01       	movw	r30, r18
    133a:	ef 52       	subi	r30, 0x2F	; 47
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	d9 01       	movw	r26, r18
    1340:	a9 54       	subi	r26, 0x49	; 73
    1342:	bf 4f       	sbci	r27, 0xFF	; 255
    1344:	8c 91       	ld	r24, X
    1346:	80 83       	st	Z, r24
    1348:	2f 5f       	subi	r18, 0xFF	; 255
    134a:	3f 4f       	sbci	r19, 0xFF	; 255

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
        uint8_t i=0;
        wwwport=wwwp;
        while(i<4){
    134c:	24 30       	cpi	r18, 0x04	; 4
    134e:	31 05       	cpc	r19, r1
    1350:	99 f7       	brne	.-26     	; 0x1338 <main+0x7e>
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
                macaddr[i]=mymac[i];
    1356:	f9 01       	movw	r30, r18
    1358:	e5 53       	subi	r30, 0x35	; 53
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	d9 01       	movw	r26, r18
    135e:	af 54       	subi	r26, 0x4F	; 79
    1360:	bf 4f       	sbci	r27, 0xFF	; 255
    1362:	8c 91       	ld	r24, X
    1364:	80 83       	st	Z, r24
    1366:	2f 5f       	subi	r18, 0xFF	; 255
    1368:	3f 4f       	sbci	r19, 0xFF	; 255
        while(i<4){
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
    136a:	26 30       	cpi	r18, 0x06	; 6
    136c:	31 05       	cpc	r19, r1
    136e:	99 f7       	brne	.-26     	; 0x1356 <main+0x9c>
        i=1;

        //init the ethernet/ip layer:
        init_ip_arp_udp_tcp(mymac,myip,MYWWWPORT);
         lcd_init();
    1370:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_init>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
    1374:	94 e0       	ldi	r25, 0x04	; 4
    1376:	95 bb       	out	0x15, r25	; 21
        lcd_port = (cmd & 0xF0);
    1378:	15 ba       	out	0x15, r1	; 21
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
    137a:	84 ec       	ldi	r24, 0xC4	; 196
    137c:	85 bb       	out	0x15, r24	; 21
        lcd_port = ((cmd << 4) & 0xF0);
    137e:	80 ec       	ldi	r24, 0xC0	; 192
    1380:	85 bb       	out	0x15, r24	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1382:	20 e7       	ldi	r18, 0x70	; 112
    1384:	37 e1       	ldi	r19, 0x17	; 23
    1386:	f9 01       	movw	r30, r18
    1388:	31 97       	sbiw	r30, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <main+0xce>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
    138c:	f9 01       	movw	r30, r18
    138e:	31 97       	sbiw	r30, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <main+0xd4>
    1392:	95 bb       	out	0x15, r25	; 21
        lcd_port = (cmd & 0xF0);
    1394:	15 ba       	out	0x15, r1	; 21
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
    1396:	84 e1       	ldi	r24, 0x14	; 20
    1398:	85 bb       	out	0x15, r24	; 21
        lcd_port = ((cmd << 4) & 0xF0);
    139a:	80 e1       	ldi	r24, 0x10	; 16
    139c:	85 bb       	out	0x15, r24	; 21
    139e:	c9 01       	movw	r24, r18
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <main+0xe6>
         lcd_cmd(0x0c);
         lcd_cmd(0x01);
         lcd_puts("Irradiance Meter");  
    13a4:	c9 01       	movw	r24, r18
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	f1 f7       	brne	.-4      	; 0x13a6 <main+0xec>
    13aa:	80 e6       	ldi	r24, 0x60	; 96
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <lcd_puts>
    13b2:	77 24       	eor	r7, r7
    13b4:	73 94       	inc	r7
        while(1){
                // get the next new packet:
                plen = enc28j60PacketReceive(BUFFER_SIZE, buf);
    13b6:	6e 01       	movw	r12, r28
    13b8:	08 94       	sec
    13ba:	c1 1c       	adc	r12, r1
    13bc:	d1 1c       	adc	r13, r1
                // udp start, we listen on udp port 1200=0x4B0
                if (buf[IP_PROTO_P]==IP_PROTO_UDP_V&&buf[UDP_DST_PORT_H_P]==4&&buf[UDP_DST_PORT_L_P]==0xb0){
                        payloadlen=buf[UDP_LEN_L_P]-UDP_HEADER_LEN;
                        // you must sent a string starting with v
                        // e.g udpcom version 10.0.0.24
                        if (verify_password((char *)&(buf[UDP_DATA_P]))){
    13be:	2b e2       	ldi	r18, 0x2B	; 43
    13c0:	42 2e       	mov	r4, r18
    13c2:	51 2c       	mov	r5, r1
    13c4:	4c 0e       	add	r4, r28
    13c6:	5d 1e       	adc	r5, r29
                                strcpy(str,"e=no_such_cmd");
                                goto ANSWER;
                        }
                        strcpy(str,"e=invalid_pw");
ANSWER:
                        make_udp_reply_from_request(buf,str,strlen(str),MYUDPPORT);
    13c8:	90 e1       	ldi	r25, 0x10	; 16
    13ca:	a9 2e       	mov	r10, r25
    13cc:	b1 2c       	mov	r11, r1
    13ce:	ac 0e       	add	r10, r28
    13d0:	bd 1e       	adc	r11, r29
        }
        return(-2);
}
unsigned int adc(unsigned char channel)
{  unsigned int val;
   ADMUX=0x40+channel;
    13d2:	84 e4       	ldi	r24, 0x44	; 68
    13d4:	68 2e       	mov	r6, r24
    13d6:	00 e7       	ldi	r16, 0x70	; 112
    13d8:	20 2e       	mov	r2, r16
    13da:	07 e1       	ldi	r16, 0x17	; 23
    13dc:	30 2e       	mov	r3, r16
                                        goto SENDTCP;
                                }
                                cmd=analyse_get_url((char *)&(buf[dat_p+5]));
                                // for possible status codes see:
                                // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
                                if (cmd==-1){
    13de:	17 e3       	ldi	r17, 0x37	; 55
    13e0:	81 2e       	mov	r8, r17
    13e2:	91 2c       	mov	r9, r1
    13e4:	8c 0e       	add	r8, r28
    13e6:	9d 1e       	adc	r9, r29
         lcd_cmd(0x0c);
         lcd_cmd(0x01);
         lcd_puts("Irradiance Meter");  
        while(1){
                // get the next new packet:
                plen = enc28j60PacketReceive(BUFFER_SIZE, buf);
    13e8:	86 e2       	ldi	r24, 0x26	; 38
    13ea:	92 e0       	ldi	r25, 0x02	; 2
    13ec:	b6 01       	movw	r22, r12
    13ee:	0e 94 78 04 	call	0x8f0	; 0x8f0 <enc28j60PacketReceive>
    13f2:	8c 01       	movw	r16, r24

                /*plen will ne unequal to zero if there is a valid 
                 * packet (without crc error) */
                if(plen==0){
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	c1 f3       	breq	.-16     	; 0x13e8 <main+0x12e>
                }
                        
                // arp is broadcast if unknown but a host may also
                // verify the mac address by sending it to 
                // a unicast address.
                if(eth_type_is_arp_and_my_ip(buf,plen)){
    13f8:	c6 01       	movw	r24, r12
    13fa:	b8 01       	movw	r22, r16
    13fc:	0e 94 b3 05 	call	0xb66	; 0xb66 <eth_type_is_arp_and_my_ip>
    1400:	88 23       	and	r24, r24
    1402:	21 f0       	breq	.+8      	; 0x140c <main+0x152>
                        make_arp_answer_from_request(buf);
    1404:	c6 01       	movw	r24, r12
    1406:	0e 94 62 06 	call	0xcc4	; 0xcc4 <make_arp_answer_from_request>
    140a:	ee cf       	rjmp	.-36     	; 0x13e8 <main+0x12e>
                        continue;
                }

                // check if ip packets are for us:
                if(eth_type_is_ip_and_my_ip(buf,plen)==0){
    140c:	c6 01       	movw	r24, r12
    140e:	b8 01       	movw	r22, r16
    1410:	0e 94 cf 05 	call	0xb9e	; 0xb9e <eth_type_is_ip_and_my_ip>
    1414:	88 23       	and	r24, r24
    1416:	41 f3       	breq	.-48     	; 0x13e8 <main+0x12e>
                        continue;
                }
                // led----------
                if (i){
    1418:	77 20       	and	r7, r7
    141a:	19 f0       	breq	.+6      	; 0x1422 <main+0x168>
                        /* set output to Vcc, LED off */
                        PORTB|= (1<<PORTB1);
    141c:	c1 9a       	sbi	0x18, 1	; 24
    141e:	77 24       	eor	r7, r7
    1420:	03 c0       	rjmp	.+6      	; 0x1428 <main+0x16e>
                        i=0;
                }else{
                        /* set output to GND, LED on */
                        PORTB &= ~(1<<PORTB1);
    1422:	c1 98       	cbi	0x18, 1	; 24
    1424:	77 24       	eor	r7, r7
    1426:	73 94       	inc	r7
                        i=1;
                }
                
                if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
    1428:	88 8d       	ldd	r24, Y+24	; 0x18
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	41 f4       	brne	.+16     	; 0x143e <main+0x184>
    142e:	8b a1       	ldd	r24, Y+35	; 0x23
    1430:	88 30       	cpi	r24, 0x08	; 8
    1432:	d1 f6       	brne	.-76     	; 0x13e8 <main+0x12e>
                        // a ping packet, let's send pong
                        make_echo_reply_from_request(buf,plen);
    1434:	c6 01       	movw	r24, r12
    1436:	b8 01       	movw	r22, r16
    1438:	0e 94 96 06 	call	0xd2c	; 0xd2c <make_echo_reply_from_request>
    143c:	d5 cf       	rjmp	.-86     	; 0x13e8 <main+0x12e>
                        continue;
                }
                // tcp port www start, compare only the lower byte
                if (buf[IP_PROTO_P]==IP_PROTO_TCP_V&&buf[TCP_DST_PORT_H_P]==0&&buf[TCP_DST_PORT_L_P]==MYWWWPORT){
    143e:	86 30       	cpi	r24, 0x06	; 6
    1440:	09 f0       	breq	.+2      	; 0x1444 <main+0x18a>
    1442:	e5 c0       	rjmp	.+458    	; 0x160e <main+0x354>
    1444:	8d a1       	ldd	r24, Y+37	; 0x25
    1446:	88 23       	and	r24, r24
    1448:	79 f6       	brne	.-98     	; 0x13e8 <main+0x12e>
    144a:	8e a1       	ldd	r24, Y+38	; 0x26
    144c:	80 35       	cpi	r24, 0x50	; 80
    144e:	61 f6       	brne	.-104    	; 0x13e8 <main+0x12e>
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
    1450:	88 a9       	ldd	r24, Y+48	; 0x30
    1452:	81 ff       	sbrs	r24, 1
    1454:	04 c0       	rjmp	.+8      	; 0x145e <main+0x1a4>
                                make_tcp_synack_from_syn(buf);
    1456:	c6 01       	movw	r24, r12
    1458:	0e 94 11 07 	call	0xe22	; 0xe22 <make_tcp_synack_from_syn>
    145c:	c5 cf       	rjmp	.-118    	; 0x13e8 <main+0x12e>
                                // make_tcp_synack_from_syn does already send the syn,ack
                                continue;
                        }
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    145e:	84 ff       	sbrs	r24, 4
    1460:	c3 cf       	rjmp	.-122    	; 0x13e8 <main+0x12e>
                                init_len_info(buf); // init some data structures
    1462:	c6 01       	movw	r24, r12
    1464:	0e 94 51 07 	call	0xea2	; 0xea2 <init_len_info>
// get a pointer to the start of tcp data in buf
// Returns 0 if there is no data
// You must call init_len_info once before calling this function
uint16_t get_tcp_data_pointer(void)
{
        if (info_data_len){
    1468:	80 91 c4 00 	lds	r24, 0x00C4
    146c:	90 91 c5 00 	lds	r25, 0x00C5
    1470:	89 2b       	or	r24, r25
    1472:	61 f0       	breq	.+24     	; 0x148c <main+0x1d2>
                return((uint16_t)TCP_SRC_PORT_H_P+info_hdr_len);
    1474:	00 91 c6 00 	lds	r16, 0x00C6
    1478:	10 91 c7 00 	lds	r17, 0x00C7
    147c:	b2 e2       	ldi	r27, 0x22	; 34
    147e:	eb 2e       	mov	r14, r27
    1480:	f1 2c       	mov	r15, r1
    1482:	e0 0e       	add	r14, r16
    1484:	f1 1e       	adc	r15, r17
                                // we can possibly have no data, just ack:
                                dat_p=get_tcp_data_pointer();
                                if (dat_p==0){
    1486:	e1 14       	cp	r14, r1
    1488:	f1 04       	cpc	r15, r1
    148a:	39 f4       	brne	.+14     	; 0x149a <main+0x1e0>
                                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    148c:	88 a9       	ldd	r24, Y+48	; 0x30
    148e:	80 ff       	sbrs	r24, 0
    1490:	ab cf       	rjmp	.-170    	; 0x13e8 <main+0x12e>
                                                // finack, answer with ack
                                                make_tcp_ack_from_any(buf);
    1492:	c6 01       	movw	r24, r12
    1494:	0e 94 99 07 	call	0xf32	; 0xf32 <make_tcp_ack_from_any>
    1498:	a7 cf       	rjmp	.-178    	; 0x13e8 <main+0x12e>
                                        }
                                        // just an ack with no data, wait for next packet
                                        continue;
                                }
                                if (strncmp("GET ",(char *)&(buf[dat_p]),4)!=0){
    149a:	b6 01       	movw	r22, r12
    149c:	6e 0d       	add	r22, r14
    149e:	7f 1d       	adc	r23, r15
    14a0:	81 e7       	ldi	r24, 0x71	; 113
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	44 e0       	ldi	r20, 0x04	; 4
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <strncmp>
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	71 f0       	breq	.+28     	; 0x14cc <main+0x212>
    14b0:	d4 01       	movw	r26, r8
    14b2:	00 e0       	ldi	r16, 0x00	; 0
    14b4:	10 e0       	ldi	r17, 0x00	; 0
    14b6:	03 c0       	rjmp	.+6      	; 0x14be <main+0x204>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    14b8:	8d 93       	st	X+, r24
                pos++;
    14ba:	0f 5f       	subi	r16, 0xFF	; 255
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    14be:	f8 01       	movw	r30, r16
    14c0:	e5 50       	subi	r30, 0x05	; 5
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	84 91       	lpm	r24, Z+
    14c6:	88 23       	and	r24, r24
    14c8:	b9 f7       	brne	.-18     	; 0x14b8 <main+0x1fe>
    14ca:	99 c0       	rjmp	.+306    	; 0x15fe <main+0x344>
                                        // for possible status codes see:
                                        // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
                                        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n<h1>200 OK</h1>"));
                                        goto SENDTCP;
                                }
                                if (strncmp("/ ",(char *)&(buf[dat_p+4]),2)==0){
    14cc:	0a 5d       	subi	r16, 0xDA	; 218
    14ce:	1f 4f       	sbci	r17, 0xFF	; 255
    14d0:	0c 0d       	add	r16, r12
    14d2:	1d 1d       	adc	r17, r13
    14d4:	86 e7       	ldi	r24, 0x76	; 118
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	b8 01       	movw	r22, r16
    14da:	42 e0       	ldi	r20, 0x02	; 2
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <strncmp>
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	01 f5       	brne	.+64     	; 0x1526 <main+0x26c>
    14e6:	d4 01       	movw	r26, r8
    14e8:	00 e0       	ldi	r16, 0x00	; 0
    14ea:	10 e0       	ldi	r17, 0x00	; 0
    14ec:	03 c0       	rjmp	.+6      	; 0x14f4 <main+0x23a>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    14ee:	8d 93       	st	X+, r24
                pos++;
    14f0:	0f 5f       	subi	r16, 0xFF	; 255
    14f2:	1f 4f       	sbci	r17, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    14f4:	f8 01       	movw	r30, r16
    14f6:	e2 53       	subi	r30, 0x32	; 50
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	84 91       	lpm	r24, Z+
    14fc:	88 23       	and	r24, r24
    14fe:	b9 f7       	brne	.-18     	; 0x14ee <main+0x234>
    1500:	0a 5c       	subi	r16, 0xCA	; 202
    1502:	1f 4f       	sbci	r17, 0xFF	; 255
    1504:	d6 01       	movw	r26, r12
    1506:	a0 0f       	add	r26, r16
    1508:	b1 1f       	adc	r27, r17
    150a:	06 53       	subi	r16, 0x36	; 54
    150c:	10 40       	sbci	r17, 0x00	; 0
                                        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n"));
                                        plen=fill_tcp_data_p(buf,plen,PSTR("<p>Usage: http://host_or_ip/password</p>\n"));
    150e:	84 ea       	ldi	r24, 0xA4	; 164
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	03 c0       	rjmp	.+6      	; 0x151a <main+0x260>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1514:	2d 93       	st	X+, r18
                pos++;
    1516:	0f 5f       	subi	r16, 0xFF	; 255
    1518:	1f 4f       	sbci	r17, 0xFF	; 255
    151a:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	24 91       	lpm	r18, Z+
    1520:	22 23       	and	r18, r18
    1522:	c1 f7       	brne	.-16     	; 0x1514 <main+0x25a>
    1524:	6c c0       	rjmp	.+216    	; 0x15fe <main+0x344>
                                        goto SENDTCP;
                                }
                                cmd=analyse_get_url((char *)&(buf[dat_p+5]));
    1526:	25 e0       	ldi	r18, 0x05	; 5
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	e2 0e       	add	r14, r18
    152c:	f3 1e       	adc	r15, r19
    152e:	c6 01       	movw	r24, r12
    1530:	8e 0d       	add	r24, r14
    1532:	9f 1d       	adc	r25, r15
    1534:	0e 94 fb 07 	call	0xff6	; 0xff6 <analyse_get_url>
                                // for possible status codes see:
                                // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
                                if (cmd==-1){
    1538:	8f 3f       	cpi	r24, 0xFF	; 255
    153a:	71 f4       	brne	.+28     	; 0x1558 <main+0x29e>
    153c:	d4 01       	movw	r26, r8
    153e:	00 e0       	ldi	r16, 0x00	; 0
    1540:	10 e0       	ldi	r17, 0x00	; 0
    1542:	03 c0       	rjmp	.+6      	; 0x154a <main+0x290>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1544:	8d 93       	st	X+, r24
                pos++;
    1546:	0f 5f       	subi	r16, 0xFF	; 255
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    154a:	f8 01       	movw	r30, r16
    154c:	ec 5a       	subi	r30, 0xAC	; 172
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	84 91       	lpm	r24, Z+
    1552:	88 23       	and	r24, r24
    1554:	b9 f7       	brne	.-18     	; 0x1544 <main+0x28a>
    1556:	53 c0       	rjmp	.+166    	; 0x15fe <main+0x344>
								 case 4:cbi(PORTC,2);cbi(dtpack,2);break;
								 case 5:sbi(PORTC,2);sbi(dtpack,2);break;
							     case 6:cbi(PORTC,3);cbi(dtpack,3);break;
								 case 7:sbi(PORTC,3);sbi(dtpack,3);break;
							   }*/
                                if (cmd==1){
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	11 f4       	brne	.+4      	; 0x1560 <main+0x2a6>
                                       // PORTD|= (1<<PORTD7);// transistor on
										PORTC|= (1<<3);// transistor on
    155c:	ab 9a       	sbi	0x15, 3	; 21
    155e:	0a c0       	rjmp	.+20     	; 0x1574 <main+0x2ba>
                                }
                                if (cmd==0){
    1560:	88 23       	and	r24, r24
    1562:	11 f4       	brne	.+4      	; 0x1568 <main+0x2ae>
                                       // PORTD &= ~(1<<PORTD7);// transistor off
                                        PORTC &= ~(1<<3);// transistor off
    1564:	ab 98       	cbi	0x15, 3	; 21
    1566:	06 c0       	rjmp	.+12     	; 0x1574 <main+0x2ba>
                                }
                                if (cmd==-3){
    1568:	8d 3f       	cpi	r24, 0xFD	; 253
    156a:	21 f4       	brne	.+8      	; 0x1574 <main+0x2ba>
                                        // redirect to add a trailing slash
                                        plen=moved_perm(buf);
    156c:	c6 01       	movw	r24, r12
    156e:	0e 94 27 08 	call	0x104e	; 0x104e <moved_perm>
    1572:	44 c0       	rjmp	.+136    	; 0x15fc <main+0x342>
        }
        return(-2);
}
unsigned int adc(unsigned char channel)
{  unsigned int val;
   ADMUX=0x40+channel;
    1574:	67 b8       	out	0x07, r6	; 7
   ADCSRA=(1<<ADEN);
    1576:	30 e8       	ldi	r19, 0x80	; 128
    1578:	36 b9       	out	0x06, r19	; 6
   ADCSRA|=(1<<ADSC);
    157a:	36 9a       	sbi	0x06, 6	; 6
    ADCSRA|=0x07;
    157c:	86 b1       	in	r24, 0x06	; 6
    157e:	87 60       	ori	r24, 0x07	; 7
    1580:	86 b9       	out	0x06, r24	; 6
   while(bit_is_clear(ADCSRA,ADIF));
    1582:	34 9b       	sbis	0x06, 4	; 6
    1584:	fe cf       	rjmp	.-4      	; 0x1582 <main+0x2c8>
   val=ADCW; 
    1586:	84 b1       	in	r24, 0x04	; 4
    1588:	95 b1       	in	r25, 0x05	; 5
                                if (cmd==-3){
                                        // redirect to add a trailing slash
                                        plen=moved_perm(buf);
                                        goto SENDTCP;
                                }
								radiance=adc(4);
    158a:	90 93 d6 00 	sts	0x00D6, r25
    158e:	80 93 d5 00 	sts	0x00D5, r24
								sprintf(buf,"%d Watt/sqm",radiance*2);
    1592:	00 d0       	rcall	.+0      	; 0x1594 <main+0x2da>
    1594:	00 d0       	rcall	.+0      	; 0x1596 <main+0x2dc>
    1596:	00 d0       	rcall	.+0      	; 0x1598 <main+0x2de>
    1598:	ed b7       	in	r30, 0x3d	; 61
    159a:	fe b7       	in	r31, 0x3e	; 62
    159c:	31 96       	adiw	r30, 0x01	; 1
    159e:	ad b7       	in	r26, 0x3d	; 61
    15a0:	be b7       	in	r27, 0x3e	; 62
    15a2:	12 96       	adiw	r26, 0x02	; 2
    15a4:	dc 92       	st	X, r13
    15a6:	ce 92       	st	-X, r12
    15a8:	11 97       	sbiw	r26, 0x01	; 1
    15aa:	29 e7       	ldi	r18, 0x79	; 121
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	33 83       	std	Z+3, r19	; 0x03
    15b0:	22 83       	std	Z+2, r18	; 0x02
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	95 83       	std	Z+5, r25	; 0x05
    15b8:	84 83       	std	Z+4, r24	; 0x04
    15ba:	0e 94 ac 0b 	call	0x1758	; 0x1758 <sprintf>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
    15be:	34 ec       	ldi	r19, 0xC4	; 196
    15c0:	35 bb       	out	0x15, r19	; 21
        lcd_port = (cmd & 0xF0);
    15c2:	80 ec       	ldi	r24, 0xC0	; 192
    15c4:	85 bb       	out	0x15, r24	; 21
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
    15c6:	94 e2       	ldi	r25, 0x24	; 36
    15c8:	95 bb       	out	0x15, r25	; 21
        lcd_port = ((cmd << 4) & 0xF0);
    15ca:	a0 e2       	ldi	r26, 0x20	; 32
    15cc:	a5 bb       	out	0x15, r26	; 21
    15ce:	c1 01       	movw	r24, r2
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <main+0x316>
                                lcd_cmd(0xc2);
                                lcd_puts(buf);
    15d4:	c1 01       	movw	r24, r2
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	f1 f7       	brne	.-4      	; 0x15d6 <main+0x31c>
    15da:	2d b7       	in	r18, 0x3d	; 61
    15dc:	3e b7       	in	r19, 0x3e	; 62
    15de:	2a 5f       	subi	r18, 0xFA	; 250
    15e0:	3f 4f       	sbci	r19, 0xFF	; 255
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	3e bf       	out	0x3e, r19	; 62
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	2d bf       	out	0x3d, r18	; 61
    15ec:	c6 01       	movw	r24, r12
    15ee:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <lcd_puts>
                                // if (cmd==-2) or any other value
                                // just display the status:
                                plen=print_webpage(buf,(PORTC & (1<<PORTC3)));
    15f2:	65 b3       	in	r22, 0x15	; 21
    15f4:	68 70       	andi	r22, 0x08	; 8
    15f6:	c6 01       	movw	r24, r12
    15f8:	0e 94 8d 08 	call	0x111a	; 0x111a <print_webpage>
    15fc:	8c 01       	movw	r16, r24
                                //
SENDTCP:
                                make_tcp_ack_from_any(buf); // send ack for http get
    15fe:	c6 01       	movw	r24, r12
    1600:	0e 94 99 07 	call	0xf32	; 0xf32 <make_tcp_ack_from_any>
                                make_tcp_ack_with_data(buf,plen); // send data
    1604:	c6 01       	movw	r24, r12
    1606:	b8 01       	movw	r22, r16
    1608:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <make_tcp_ack_with_data>
    160c:	ed ce       	rjmp	.-550    	; 0x13e8 <main+0x12e>

                }
                // tcp port www end
                //
                // udp start, we listen on udp port 1200=0x4B0
                if (buf[IP_PROTO_P]==IP_PROTO_UDP_V&&buf[UDP_DST_PORT_H_P]==4&&buf[UDP_DST_PORT_L_P]==0xb0){
    160e:	81 31       	cpi	r24, 0x11	; 17
    1610:	09 f0       	breq	.+2      	; 0x1614 <main+0x35a>
    1612:	ea ce       	rjmp	.-556    	; 0x13e8 <main+0x12e>
    1614:	8d a1       	ldd	r24, Y+37	; 0x25
    1616:	84 30       	cpi	r24, 0x04	; 4
    1618:	09 f0       	breq	.+2      	; 0x161c <main+0x362>
    161a:	e6 ce       	rjmp	.-564    	; 0x13e8 <main+0x12e>
    161c:	8e a1       	ldd	r24, Y+38	; 0x26
    161e:	80 3b       	cpi	r24, 0xB0	; 176
    1620:	09 f0       	breq	.+2      	; 0x1624 <main+0x36a>
    1622:	e2 ce       	rjmp	.-572    	; 0x13e8 <main+0x12e>
                        payloadlen=buf[UDP_LEN_L_P]-UDP_HEADER_LEN;
    1624:	18 a5       	ldd	r17, Y+40	; 0x28
    1626:	18 50       	subi	r17, 0x08	; 8
                        // you must sent a string starting with v
                        // e.g udpcom version 10.0.0.24
                        if (verify_password((char *)&(buf[UDP_DATA_P]))){
    1628:	c2 01       	movw	r24, r4
    162a:	0e 94 80 08 	call	0x1100	; 0x1100 <verify_password>
    162e:	88 23       	and	r24, r24
    1630:	51 f4       	brne	.+20     	; 0x1646 <main+0x38c>
    1632:	48 c0       	rjmp	.+144    	; 0x16c4 <main+0x40a>
                                // find the first comma which indicates 
                                // the start of a command:
                                cmd_pos=0;
                                while(cmd_pos<payloadlen){
                                        cmd_pos++;
    1634:	9f 5f       	subi	r25, 0xFF	; 255
                                        if (buf[UDP_DATA_P+cmd_pos]==','){
    1636:	f2 01       	movw	r30, r4
    1638:	e9 0f       	add	r30, r25
    163a:	f1 1d       	adc	r31, r1
    163c:	80 81       	ld	r24, Z
    163e:	8c 32       	cpi	r24, 0x2C	; 44
    1640:	19 f4       	brne	.+6      	; 0x1648 <main+0x38e>
                                                cmd_pos++; // put on start of cmd
    1642:	9f 5f       	subi	r25, 0xFF	; 255
    1644:	03 c0       	rjmp	.+6      	; 0x164c <main+0x392>
                                                break;
    1646:	90 e0       	ldi	r25, 0x00	; 0
                        // e.g udpcom version 10.0.0.24
                        if (verify_password((char *)&(buf[UDP_DATA_P]))){
                                // find the first comma which indicates 
                                // the start of a command:
                                cmd_pos=0;
                                while(cmd_pos<payloadlen){
    1648:	91 17       	cp	r25, r17
    164a:	a0 f3       	brcs	.-24     	; 0x1634 <main+0x37a>
                                        }
                                }
                                // a command is one char and a value. At
                                // least 3 characters long. It has an '=' on
                                // position 2:
                                if (cmd_pos<2 || cmd_pos>payloadlen-3 || buf[UDP_DATA_P+cmd_pos+1]!='='){
    164c:	92 30       	cpi	r25, 0x02	; 2
    164e:	88 f0       	brcs	.+34     	; 0x1672 <main+0x3b8>
    1650:	a9 2f       	mov	r26, r25
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	81 2f       	mov	r24, r17
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 97       	sbiw	r24, 0x02	; 2
    165a:	a8 17       	cp	r26, r24
    165c:	b9 07       	cpc	r27, r25
    165e:	4c f4       	brge	.+18     	; 0x1672 <main+0x3b8>
    1660:	ec e2       	ldi	r30, 0x2C	; 44
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	ec 0f       	add	r30, r28
    1666:	fd 1f       	adc	r31, r29
    1668:	ea 0f       	add	r30, r26
    166a:	fb 1f       	adc	r31, r27
    166c:	80 81       	ld	r24, Z
    166e:	8d 33       	cpi	r24, 0x3D	; 61
    1670:	21 f0       	breq	.+8      	; 0x167a <main+0x3c0>
                                        strcpy(str,"e=no_cmd");
    1672:	c5 01       	movw	r24, r10
    1674:	65 e8       	ldi	r22, 0x85	; 133
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	28 c0       	rjmp	.+80     	; 0x16ca <main+0x410>
                                        goto ANSWER;
                                }
                                // supported commands are
                                // t=1 t=0 t=?
                                if (buf[UDP_DATA_P+cmd_pos]=='t'){
    167a:	f2 01       	movw	r30, r4
    167c:	ea 0f       	add	r30, r26
    167e:	fb 1f       	adc	r31, r27
    1680:	80 81       	ld	r24, Z
    1682:	84 37       	cpi	r24, 0x74	; 116
    1684:	d9 f4       	brne	.+54     	; 0x16bc <main+0x402>
                                        cmdval=buf[UDP_DATA_P+cmd_pos+2];
    1686:	8d e2       	ldi	r24, 0x2D	; 45
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	8c 0f       	add	r24, r28
    168c:	9d 1f       	adc	r25, r29
    168e:	a8 0f       	add	r26, r24
    1690:	b9 1f       	adc	r27, r25
    1692:	8c 91       	ld	r24, X
                                        if(cmdval=='1'){
    1694:	81 33       	cpi	r24, 0x31	; 49
    1696:	11 f4       	brne	.+4      	; 0x169c <main+0x3e2>
                                                PORTC|= (1<<PORTC0);// transistor on
    1698:	a8 9a       	sbi	0x15, 0	; 21
    169a:	08 c0       	rjmp	.+16     	; 0x16ac <main+0x3f2>
                                                strcpy(str,"t=1");
                                                goto ANSWER;
                                        }else if(cmdval=='0'){
    169c:	80 33       	cpi	r24, 0x30	; 48
    169e:	11 f4       	brne	.+4      	; 0x16a4 <main+0x3ea>
                                                PORTC &= ~(1<<PORTC0);// transistor off
    16a0:	a8 98       	cbi	0x15, 0	; 21
    16a2:	08 c0       	rjmp	.+16     	; 0x16b4 <main+0x3fa>
                                                strcpy(str,"t=0");
                                                goto ANSWER;
                                        }else if(cmdval=='?'){
    16a4:	8f 33       	cpi	r24, 0x3F	; 63
    16a6:	51 f4       	brne	.+20     	; 0x16bc <main+0x402>
                                                if (PORTC & (1<<PORTC0)){
    16a8:	a8 9b       	sbis	0x15, 0	; 21
    16aa:	04 c0       	rjmp	.+8      	; 0x16b4 <main+0x3fa>
                                                        strcpy(str,"t=1");
    16ac:	c5 01       	movw	r24, r10
    16ae:	6e e8       	ldi	r22, 0x8E	; 142
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	0b c0       	rjmp	.+22     	; 0x16ca <main+0x410>
                                                        goto ANSWER;
                                                }
                                                strcpy(str,"t=0");
    16b4:	c5 01       	movw	r24, r10
    16b6:	62 e9       	ldi	r22, 0x92	; 146
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	07 c0       	rjmp	.+14     	; 0x16ca <main+0x410>
                                                goto ANSWER;
                                        }
                                }
                                strcpy(str,"e=no_such_cmd");
    16bc:	c5 01       	movw	r24, r10
    16be:	66 e9       	ldi	r22, 0x96	; 150
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	03 c0       	rjmp	.+6      	; 0x16ca <main+0x410>
                                goto ANSWER;
                        }
                        strcpy(str,"e=invalid_pw");
    16c4:	c5 01       	movw	r24, r10
    16c6:	64 ea       	ldi	r22, 0xA4	; 164
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	0e 94 76 0b 	call	0x16ec	; 0x16ec <strcpy>
ANSWER:
                        make_udp_reply_from_request(buf,str,strlen(str),MYUDPPORT);
    16ce:	f5 01       	movw	r30, r10
    16d0:	01 90       	ld	r0, Z+
    16d2:	00 20       	and	r0, r0
    16d4:	e9 f7       	brne	.-6      	; 0x16d0 <main+0x416>
    16d6:	31 97       	sbiw	r30, 0x01	; 1
    16d8:	ea 19       	sub	r30, r10
    16da:	fb 09       	sbc	r31, r11
    16dc:	c6 01       	movw	r24, r12
    16de:	b5 01       	movw	r22, r10
    16e0:	4e 2f       	mov	r20, r30
    16e2:	20 eb       	ldi	r18, 0xB0	; 176
    16e4:	34 e0       	ldi	r19, 0x04	; 4
    16e6:	0e 94 be 06 	call	0xd7c	; 0xd7c <make_udp_reply_from_request>
    16ea:	7e ce       	rjmp	.-772    	; 0x13e8 <main+0x12e>

000016ec <strcpy>:
    16ec:	fb 01       	movw	r30, r22
    16ee:	dc 01       	movw	r26, r24
    16f0:	01 90       	ld	r0, Z+
    16f2:	0d 92       	st	X+, r0
    16f4:	00 20       	and	r0, r0
    16f6:	e1 f7       	brne	.-8      	; 0x16f0 <strcpy+0x4>
    16f8:	08 95       	ret

000016fa <strncmp>:
    16fa:	fb 01       	movw	r30, r22
    16fc:	dc 01       	movw	r26, r24
    16fe:	41 50       	subi	r20, 0x01	; 1
    1700:	50 40       	sbci	r21, 0x00	; 0
    1702:	30 f0       	brcs	.+12     	; 0x1710 <strncmp+0x16>
    1704:	8d 91       	ld	r24, X+
    1706:	01 90       	ld	r0, Z+
    1708:	80 19       	sub	r24, r0
    170a:	19 f4       	brne	.+6      	; 0x1712 <strncmp+0x18>
    170c:	00 20       	and	r0, r0
    170e:	b9 f7       	brne	.-18     	; 0x16fe <strncmp+0x4>
    1710:	88 1b       	sub	r24, r24
    1712:	99 0b       	sbc	r25, r25
    1714:	08 95       	ret

00001716 <itoa>:
    1716:	fb 01       	movw	r30, r22
    1718:	9f 01       	movw	r18, r30
    171a:	e8 94       	clt
    171c:	42 30       	cpi	r20, 0x02	; 2
    171e:	c4 f0       	brlt	.+48     	; 0x1750 <itoa+0x3a>
    1720:	45 32       	cpi	r20, 0x25	; 37
    1722:	b4 f4       	brge	.+44     	; 0x1750 <itoa+0x3a>
    1724:	4a 30       	cpi	r20, 0x0A	; 10
    1726:	29 f4       	brne	.+10     	; 0x1732 <itoa+0x1c>
    1728:	97 fb       	bst	r25, 7
    172a:	1e f4       	brtc	.+6      	; 0x1732 <itoa+0x1c>
    172c:	90 95       	com	r25
    172e:	81 95       	neg	r24
    1730:	9f 4f       	sbci	r25, 0xFF	; 255
    1732:	64 2f       	mov	r22, r20
    1734:	77 27       	eor	r23, r23
    1736:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__udivmodhi4>
    173a:	80 5d       	subi	r24, 0xD0	; 208
    173c:	8a 33       	cpi	r24, 0x3A	; 58
    173e:	0c f0       	brlt	.+2      	; 0x1742 <itoa+0x2c>
    1740:	89 5d       	subi	r24, 0xD9	; 217
    1742:	81 93       	st	Z+, r24
    1744:	cb 01       	movw	r24, r22
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	a1 f7       	brne	.-24     	; 0x1732 <itoa+0x1c>
    174a:	16 f4       	brtc	.+4      	; 0x1750 <itoa+0x3a>
    174c:	5d e2       	ldi	r21, 0x2D	; 45
    174e:	51 93       	st	Z+, r21
    1750:	10 82       	st	Z, r1
    1752:	c9 01       	movw	r24, r18
    1754:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <strrev>

00001758 <sprintf>:
    1758:	ae e0       	ldi	r26, 0x0E	; 14
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e2 eb       	ldi	r30, 0xB2	; 178
    175e:	fb e0       	ldi	r31, 0x0B	; 11
    1760:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__prologue_saves__+0x1c>
    1764:	0d 89       	ldd	r16, Y+21	; 0x15
    1766:	1e 89       	ldd	r17, Y+22	; 0x16
    1768:	86 e0       	ldi	r24, 0x06	; 6
    176a:	8c 83       	std	Y+4, r24	; 0x04
    176c:	1a 83       	std	Y+2, r17	; 0x02
    176e:	09 83       	std	Y+1, r16	; 0x01
    1770:	8f ef       	ldi	r24, 0xFF	; 255
    1772:	9f e7       	ldi	r25, 0x7F	; 127
    1774:	9e 83       	std	Y+6, r25	; 0x06
    1776:	8d 83       	std	Y+5, r24	; 0x05
    1778:	9e 01       	movw	r18, r28
    177a:	27 5e       	subi	r18, 0xE7	; 231
    177c:	3f 4f       	sbci	r19, 0xFF	; 255
    177e:	ce 01       	movw	r24, r28
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	6f 89       	ldd	r22, Y+23	; 0x17
    1784:	78 8d       	ldd	r23, Y+24	; 0x18
    1786:	a9 01       	movw	r20, r18
    1788:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <vfprintf>
    178c:	2f 81       	ldd	r18, Y+7	; 0x07
    178e:	38 85       	ldd	r19, Y+8	; 0x08
    1790:	02 0f       	add	r16, r18
    1792:	13 1f       	adc	r17, r19
    1794:	f8 01       	movw	r30, r16
    1796:	10 82       	st	Z, r1
    1798:	2e 96       	adiw	r28, 0x0e	; 14
    179a:	e4 e0       	ldi	r30, 0x04	; 4
    179c:	0c 94 9b 0e 	jmp	0x1d36	; 0x1d36 <__epilogue_restores__+0x1c>

000017a0 <vfprintf>:
    17a0:	ab e0       	ldi	r26, 0x0B	; 11
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e6 ed       	ldi	r30, 0xD6	; 214
    17a6:	fb e0       	ldi	r31, 0x0B	; 11
    17a8:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__prologue_saves__>
    17ac:	3c 01       	movw	r6, r24
    17ae:	2b 01       	movw	r4, r22
    17b0:	5a 01       	movw	r10, r20
    17b2:	fc 01       	movw	r30, r24
    17b4:	17 82       	std	Z+7, r1	; 0x07
    17b6:	16 82       	std	Z+6, r1	; 0x06
    17b8:	83 81       	ldd	r24, Z+3	; 0x03
    17ba:	81 fd       	sbrc	r24, 1
    17bc:	03 c0       	rjmp	.+6      	; 0x17c4 <vfprintf+0x24>
    17be:	6f ef       	ldi	r22, 0xFF	; 255
    17c0:	7f ef       	ldi	r23, 0xFF	; 255
    17c2:	c6 c1       	rjmp	.+908    	; 0x1b50 <vfprintf+0x3b0>
    17c4:	9a e0       	ldi	r25, 0x0A	; 10
    17c6:	89 2e       	mov	r8, r25
    17c8:	1e 01       	movw	r2, r28
    17ca:	08 94       	sec
    17cc:	21 1c       	adc	r2, r1
    17ce:	31 1c       	adc	r3, r1
    17d0:	f3 01       	movw	r30, r6
    17d2:	23 81       	ldd	r18, Z+3	; 0x03
    17d4:	f2 01       	movw	r30, r4
    17d6:	23 fd       	sbrc	r18, 3
    17d8:	85 91       	lpm	r24, Z+
    17da:	23 ff       	sbrs	r18, 3
    17dc:	81 91       	ld	r24, Z+
    17de:	2f 01       	movw	r4, r30
    17e0:	88 23       	and	r24, r24
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <vfprintf+0x46>
    17e4:	b2 c1       	rjmp	.+868    	; 0x1b4a <vfprintf+0x3aa>
    17e6:	85 32       	cpi	r24, 0x25	; 37
    17e8:	39 f4       	brne	.+14     	; 0x17f8 <vfprintf+0x58>
    17ea:	23 fd       	sbrc	r18, 3
    17ec:	85 91       	lpm	r24, Z+
    17ee:	23 ff       	sbrs	r18, 3
    17f0:	81 91       	ld	r24, Z+
    17f2:	2f 01       	movw	r4, r30
    17f4:	85 32       	cpi	r24, 0x25	; 37
    17f6:	29 f4       	brne	.+10     	; 0x1802 <vfprintf+0x62>
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	b3 01       	movw	r22, r6
    17fc:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <fputc>
    1800:	e7 cf       	rjmp	.-50     	; 0x17d0 <vfprintf+0x30>
    1802:	98 2f       	mov	r25, r24
    1804:	ff 24       	eor	r15, r15
    1806:	ee 24       	eor	r14, r14
    1808:	99 24       	eor	r9, r9
    180a:	ff e1       	ldi	r31, 0x1F	; 31
    180c:	ff 15       	cp	r31, r15
    180e:	d0 f0       	brcs	.+52     	; 0x1844 <vfprintf+0xa4>
    1810:	9b 32       	cpi	r25, 0x2B	; 43
    1812:	69 f0       	breq	.+26     	; 0x182e <vfprintf+0x8e>
    1814:	9c 32       	cpi	r25, 0x2C	; 44
    1816:	28 f4       	brcc	.+10     	; 0x1822 <vfprintf+0x82>
    1818:	90 32       	cpi	r25, 0x20	; 32
    181a:	59 f0       	breq	.+22     	; 0x1832 <vfprintf+0x92>
    181c:	93 32       	cpi	r25, 0x23	; 35
    181e:	91 f4       	brne	.+36     	; 0x1844 <vfprintf+0xa4>
    1820:	0e c0       	rjmp	.+28     	; 0x183e <vfprintf+0x9e>
    1822:	9d 32       	cpi	r25, 0x2D	; 45
    1824:	49 f0       	breq	.+18     	; 0x1838 <vfprintf+0x98>
    1826:	90 33       	cpi	r25, 0x30	; 48
    1828:	69 f4       	brne	.+26     	; 0x1844 <vfprintf+0xa4>
    182a:	41 e0       	ldi	r20, 0x01	; 1
    182c:	24 c0       	rjmp	.+72     	; 0x1876 <vfprintf+0xd6>
    182e:	52 e0       	ldi	r21, 0x02	; 2
    1830:	f5 2a       	or	r15, r21
    1832:	84 e0       	ldi	r24, 0x04	; 4
    1834:	f8 2a       	or	r15, r24
    1836:	28 c0       	rjmp	.+80     	; 0x1888 <vfprintf+0xe8>
    1838:	98 e0       	ldi	r25, 0x08	; 8
    183a:	f9 2a       	or	r15, r25
    183c:	25 c0       	rjmp	.+74     	; 0x1888 <vfprintf+0xe8>
    183e:	e0 e1       	ldi	r30, 0x10	; 16
    1840:	fe 2a       	or	r15, r30
    1842:	22 c0       	rjmp	.+68     	; 0x1888 <vfprintf+0xe8>
    1844:	f7 fc       	sbrc	r15, 7
    1846:	29 c0       	rjmp	.+82     	; 0x189a <vfprintf+0xfa>
    1848:	89 2f       	mov	r24, r25
    184a:	80 53       	subi	r24, 0x30	; 48
    184c:	8a 30       	cpi	r24, 0x0A	; 10
    184e:	70 f4       	brcc	.+28     	; 0x186c <vfprintf+0xcc>
    1850:	f6 fe       	sbrs	r15, 6
    1852:	05 c0       	rjmp	.+10     	; 0x185e <vfprintf+0xbe>
    1854:	98 9c       	mul	r9, r8
    1856:	90 2c       	mov	r9, r0
    1858:	11 24       	eor	r1, r1
    185a:	98 0e       	add	r9, r24
    185c:	15 c0       	rjmp	.+42     	; 0x1888 <vfprintf+0xe8>
    185e:	e8 9c       	mul	r14, r8
    1860:	e0 2c       	mov	r14, r0
    1862:	11 24       	eor	r1, r1
    1864:	e8 0e       	add	r14, r24
    1866:	f0 e2       	ldi	r31, 0x20	; 32
    1868:	ff 2a       	or	r15, r31
    186a:	0e c0       	rjmp	.+28     	; 0x1888 <vfprintf+0xe8>
    186c:	9e 32       	cpi	r25, 0x2E	; 46
    186e:	29 f4       	brne	.+10     	; 0x187a <vfprintf+0xda>
    1870:	f6 fc       	sbrc	r15, 6
    1872:	6b c1       	rjmp	.+726    	; 0x1b4a <vfprintf+0x3aa>
    1874:	40 e4       	ldi	r20, 0x40	; 64
    1876:	f4 2a       	or	r15, r20
    1878:	07 c0       	rjmp	.+14     	; 0x1888 <vfprintf+0xe8>
    187a:	9c 36       	cpi	r25, 0x6C	; 108
    187c:	19 f4       	brne	.+6      	; 0x1884 <vfprintf+0xe4>
    187e:	50 e8       	ldi	r21, 0x80	; 128
    1880:	f5 2a       	or	r15, r21
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <vfprintf+0xe8>
    1884:	98 36       	cpi	r25, 0x68	; 104
    1886:	49 f4       	brne	.+18     	; 0x189a <vfprintf+0xfa>
    1888:	f2 01       	movw	r30, r4
    188a:	23 fd       	sbrc	r18, 3
    188c:	95 91       	lpm	r25, Z+
    188e:	23 ff       	sbrs	r18, 3
    1890:	91 91       	ld	r25, Z+
    1892:	2f 01       	movw	r4, r30
    1894:	99 23       	and	r25, r25
    1896:	09 f0       	breq	.+2      	; 0x189a <vfprintf+0xfa>
    1898:	b8 cf       	rjmp	.-144    	; 0x180a <vfprintf+0x6a>
    189a:	89 2f       	mov	r24, r25
    189c:	85 54       	subi	r24, 0x45	; 69
    189e:	83 30       	cpi	r24, 0x03	; 3
    18a0:	18 f0       	brcs	.+6      	; 0x18a8 <vfprintf+0x108>
    18a2:	80 52       	subi	r24, 0x20	; 32
    18a4:	83 30       	cpi	r24, 0x03	; 3
    18a6:	38 f4       	brcc	.+14     	; 0x18b6 <vfprintf+0x116>
    18a8:	44 e0       	ldi	r20, 0x04	; 4
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	a4 0e       	add	r10, r20
    18ae:	b5 1e       	adc	r11, r21
    18b0:	5f e3       	ldi	r21, 0x3F	; 63
    18b2:	59 83       	std	Y+1, r21	; 0x01
    18b4:	0f c0       	rjmp	.+30     	; 0x18d4 <vfprintf+0x134>
    18b6:	93 36       	cpi	r25, 0x63	; 99
    18b8:	31 f0       	breq	.+12     	; 0x18c6 <vfprintf+0x126>
    18ba:	93 37       	cpi	r25, 0x73	; 115
    18bc:	79 f0       	breq	.+30     	; 0x18dc <vfprintf+0x13c>
    18be:	93 35       	cpi	r25, 0x53	; 83
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <vfprintf+0x124>
    18c2:	56 c0       	rjmp	.+172    	; 0x1970 <vfprintf+0x1d0>
    18c4:	20 c0       	rjmp	.+64     	; 0x1906 <vfprintf+0x166>
    18c6:	f5 01       	movw	r30, r10
    18c8:	80 81       	ld	r24, Z
    18ca:	89 83       	std	Y+1, r24	; 0x01
    18cc:	42 e0       	ldi	r20, 0x02	; 2
    18ce:	50 e0       	ldi	r21, 0x00	; 0
    18d0:	a4 0e       	add	r10, r20
    18d2:	b5 1e       	adc	r11, r21
    18d4:	61 01       	movw	r12, r2
    18d6:	01 e0       	ldi	r16, 0x01	; 1
    18d8:	10 e0       	ldi	r17, 0x00	; 0
    18da:	12 c0       	rjmp	.+36     	; 0x1900 <vfprintf+0x160>
    18dc:	f5 01       	movw	r30, r10
    18de:	c0 80       	ld	r12, Z
    18e0:	d1 80       	ldd	r13, Z+1	; 0x01
    18e2:	f6 fc       	sbrc	r15, 6
    18e4:	03 c0       	rjmp	.+6      	; 0x18ec <vfprintf+0x14c>
    18e6:	6f ef       	ldi	r22, 0xFF	; 255
    18e8:	7f ef       	ldi	r23, 0xFF	; 255
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <vfprintf+0x150>
    18ec:	69 2d       	mov	r22, r9
    18ee:	70 e0       	ldi	r23, 0x00	; 0
    18f0:	42 e0       	ldi	r20, 0x02	; 2
    18f2:	50 e0       	ldi	r21, 0x00	; 0
    18f4:	a4 0e       	add	r10, r20
    18f6:	b5 1e       	adc	r11, r21
    18f8:	c6 01       	movw	r24, r12
    18fa:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <strnlen>
    18fe:	8c 01       	movw	r16, r24
    1900:	5f e7       	ldi	r21, 0x7F	; 127
    1902:	f5 22       	and	r15, r21
    1904:	14 c0       	rjmp	.+40     	; 0x192e <vfprintf+0x18e>
    1906:	f5 01       	movw	r30, r10
    1908:	c0 80       	ld	r12, Z
    190a:	d1 80       	ldd	r13, Z+1	; 0x01
    190c:	f6 fc       	sbrc	r15, 6
    190e:	03 c0       	rjmp	.+6      	; 0x1916 <vfprintf+0x176>
    1910:	6f ef       	ldi	r22, 0xFF	; 255
    1912:	7f ef       	ldi	r23, 0xFF	; 255
    1914:	02 c0       	rjmp	.+4      	; 0x191a <vfprintf+0x17a>
    1916:	69 2d       	mov	r22, r9
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	42 e0       	ldi	r20, 0x02	; 2
    191c:	50 e0       	ldi	r21, 0x00	; 0
    191e:	a4 0e       	add	r10, r20
    1920:	b5 1e       	adc	r11, r21
    1922:	c6 01       	movw	r24, r12
    1924:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <strnlen_P>
    1928:	8c 01       	movw	r16, r24
    192a:	50 e8       	ldi	r21, 0x80	; 128
    192c:	f5 2a       	or	r15, r21
    192e:	f3 fe       	sbrs	r15, 3
    1930:	07 c0       	rjmp	.+14     	; 0x1940 <vfprintf+0x1a0>
    1932:	1a c0       	rjmp	.+52     	; 0x1968 <vfprintf+0x1c8>
    1934:	80 e2       	ldi	r24, 0x20	; 32
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	b3 01       	movw	r22, r6
    193a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <fputc>
    193e:	ea 94       	dec	r14
    1940:	8e 2d       	mov	r24, r14
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	08 17       	cp	r16, r24
    1946:	19 07       	cpc	r17, r25
    1948:	a8 f3       	brcs	.-22     	; 0x1934 <vfprintf+0x194>
    194a:	0e c0       	rjmp	.+28     	; 0x1968 <vfprintf+0x1c8>
    194c:	f6 01       	movw	r30, r12
    194e:	f7 fc       	sbrc	r15, 7
    1950:	85 91       	lpm	r24, Z+
    1952:	f7 fe       	sbrs	r15, 7
    1954:	81 91       	ld	r24, Z+
    1956:	6f 01       	movw	r12, r30
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	b3 01       	movw	r22, r6
    195c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <fputc>
    1960:	e1 10       	cpse	r14, r1
    1962:	ea 94       	dec	r14
    1964:	01 50       	subi	r16, 0x01	; 1
    1966:	10 40       	sbci	r17, 0x00	; 0
    1968:	01 15       	cp	r16, r1
    196a:	11 05       	cpc	r17, r1
    196c:	79 f7       	brne	.-34     	; 0x194c <vfprintf+0x1ac>
    196e:	ea c0       	rjmp	.+468    	; 0x1b44 <vfprintf+0x3a4>
    1970:	94 36       	cpi	r25, 0x64	; 100
    1972:	11 f0       	breq	.+4      	; 0x1978 <vfprintf+0x1d8>
    1974:	99 36       	cpi	r25, 0x69	; 105
    1976:	69 f5       	brne	.+90     	; 0x19d2 <vfprintf+0x232>
    1978:	f7 fe       	sbrs	r15, 7
    197a:	08 c0       	rjmp	.+16     	; 0x198c <vfprintf+0x1ec>
    197c:	f5 01       	movw	r30, r10
    197e:	20 81       	ld	r18, Z
    1980:	31 81       	ldd	r19, Z+1	; 0x01
    1982:	42 81       	ldd	r20, Z+2	; 0x02
    1984:	53 81       	ldd	r21, Z+3	; 0x03
    1986:	84 e0       	ldi	r24, 0x04	; 4
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	0a c0       	rjmp	.+20     	; 0x19a0 <vfprintf+0x200>
    198c:	f5 01       	movw	r30, r10
    198e:	80 81       	ld	r24, Z
    1990:	91 81       	ldd	r25, Z+1	; 0x01
    1992:	9c 01       	movw	r18, r24
    1994:	44 27       	eor	r20, r20
    1996:	37 fd       	sbrc	r19, 7
    1998:	40 95       	com	r20
    199a:	54 2f       	mov	r21, r20
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	a8 0e       	add	r10, r24
    19a2:	b9 1e       	adc	r11, r25
    19a4:	9f e6       	ldi	r25, 0x6F	; 111
    19a6:	f9 22       	and	r15, r25
    19a8:	57 ff       	sbrs	r21, 7
    19aa:	09 c0       	rjmp	.+18     	; 0x19be <vfprintf+0x21e>
    19ac:	50 95       	com	r21
    19ae:	40 95       	com	r20
    19b0:	30 95       	com	r19
    19b2:	21 95       	neg	r18
    19b4:	3f 4f       	sbci	r19, 0xFF	; 255
    19b6:	4f 4f       	sbci	r20, 0xFF	; 255
    19b8:	5f 4f       	sbci	r21, 0xFF	; 255
    19ba:	e0 e8       	ldi	r30, 0x80	; 128
    19bc:	fe 2a       	or	r15, r30
    19be:	ca 01       	movw	r24, r20
    19c0:	b9 01       	movw	r22, r18
    19c2:	a1 01       	movw	r20, r2
    19c4:	2a e0       	ldi	r18, 0x0A	; 10
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__ultoa_invert>
    19cc:	d8 2e       	mov	r13, r24
    19ce:	d2 18       	sub	r13, r2
    19d0:	40 c0       	rjmp	.+128    	; 0x1a52 <vfprintf+0x2b2>
    19d2:	95 37       	cpi	r25, 0x75	; 117
    19d4:	29 f4       	brne	.+10     	; 0x19e0 <vfprintf+0x240>
    19d6:	1f 2d       	mov	r17, r15
    19d8:	1f 7e       	andi	r17, 0xEF	; 239
    19da:	2a e0       	ldi	r18, 0x0A	; 10
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	1d c0       	rjmp	.+58     	; 0x1a1a <vfprintf+0x27a>
    19e0:	1f 2d       	mov	r17, r15
    19e2:	19 7f       	andi	r17, 0xF9	; 249
    19e4:	9f 36       	cpi	r25, 0x6F	; 111
    19e6:	61 f0       	breq	.+24     	; 0x1a00 <vfprintf+0x260>
    19e8:	90 37       	cpi	r25, 0x70	; 112
    19ea:	20 f4       	brcc	.+8      	; 0x19f4 <vfprintf+0x254>
    19ec:	98 35       	cpi	r25, 0x58	; 88
    19ee:	09 f0       	breq	.+2      	; 0x19f2 <vfprintf+0x252>
    19f0:	ac c0       	rjmp	.+344    	; 0x1b4a <vfprintf+0x3aa>
    19f2:	0f c0       	rjmp	.+30     	; 0x1a12 <vfprintf+0x272>
    19f4:	90 37       	cpi	r25, 0x70	; 112
    19f6:	39 f0       	breq	.+14     	; 0x1a06 <vfprintf+0x266>
    19f8:	98 37       	cpi	r25, 0x78	; 120
    19fa:	09 f0       	breq	.+2      	; 0x19fe <vfprintf+0x25e>
    19fc:	a6 c0       	rjmp	.+332    	; 0x1b4a <vfprintf+0x3aa>
    19fe:	04 c0       	rjmp	.+8      	; 0x1a08 <vfprintf+0x268>
    1a00:	28 e0       	ldi	r18, 0x08	; 8
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	0a c0       	rjmp	.+20     	; 0x1a1a <vfprintf+0x27a>
    1a06:	10 61       	ori	r17, 0x10	; 16
    1a08:	14 fd       	sbrc	r17, 4
    1a0a:	14 60       	ori	r17, 0x04	; 4
    1a0c:	20 e1       	ldi	r18, 0x10	; 16
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	04 c0       	rjmp	.+8      	; 0x1a1a <vfprintf+0x27a>
    1a12:	14 fd       	sbrc	r17, 4
    1a14:	16 60       	ori	r17, 0x06	; 6
    1a16:	20 e1       	ldi	r18, 0x10	; 16
    1a18:	32 e0       	ldi	r19, 0x02	; 2
    1a1a:	17 ff       	sbrs	r17, 7
    1a1c:	08 c0       	rjmp	.+16     	; 0x1a2e <vfprintf+0x28e>
    1a1e:	f5 01       	movw	r30, r10
    1a20:	60 81       	ld	r22, Z
    1a22:	71 81       	ldd	r23, Z+1	; 0x01
    1a24:	82 81       	ldd	r24, Z+2	; 0x02
    1a26:	93 81       	ldd	r25, Z+3	; 0x03
    1a28:	44 e0       	ldi	r20, 0x04	; 4
    1a2a:	50 e0       	ldi	r21, 0x00	; 0
    1a2c:	08 c0       	rjmp	.+16     	; 0x1a3e <vfprintf+0x29e>
    1a2e:	f5 01       	movw	r30, r10
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	bc 01       	movw	r22, r24
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	42 e0       	ldi	r20, 0x02	; 2
    1a3c:	50 e0       	ldi	r21, 0x00	; 0
    1a3e:	a4 0e       	add	r10, r20
    1a40:	b5 1e       	adc	r11, r21
    1a42:	a1 01       	movw	r20, r2
    1a44:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__ultoa_invert>
    1a48:	d8 2e       	mov	r13, r24
    1a4a:	d2 18       	sub	r13, r2
    1a4c:	8f e7       	ldi	r24, 0x7F	; 127
    1a4e:	f8 2e       	mov	r15, r24
    1a50:	f1 22       	and	r15, r17
    1a52:	f6 fe       	sbrs	r15, 6
    1a54:	0b c0       	rjmp	.+22     	; 0x1a6c <vfprintf+0x2cc>
    1a56:	5e ef       	ldi	r21, 0xFE	; 254
    1a58:	f5 22       	and	r15, r21
    1a5a:	d9 14       	cp	r13, r9
    1a5c:	38 f4       	brcc	.+14     	; 0x1a6c <vfprintf+0x2cc>
    1a5e:	f4 fe       	sbrs	r15, 4
    1a60:	07 c0       	rjmp	.+14     	; 0x1a70 <vfprintf+0x2d0>
    1a62:	f2 fc       	sbrc	r15, 2
    1a64:	05 c0       	rjmp	.+10     	; 0x1a70 <vfprintf+0x2d0>
    1a66:	8f ee       	ldi	r24, 0xEF	; 239
    1a68:	f8 22       	and	r15, r24
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <vfprintf+0x2d0>
    1a6c:	1d 2d       	mov	r17, r13
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <vfprintf+0x2d2>
    1a70:	19 2d       	mov	r17, r9
    1a72:	f4 fe       	sbrs	r15, 4
    1a74:	0d c0       	rjmp	.+26     	; 0x1a90 <vfprintf+0x2f0>
    1a76:	fe 01       	movw	r30, r28
    1a78:	ed 0d       	add	r30, r13
    1a7a:	f1 1d       	adc	r31, r1
    1a7c:	80 81       	ld	r24, Z
    1a7e:	80 33       	cpi	r24, 0x30	; 48
    1a80:	19 f4       	brne	.+6      	; 0x1a88 <vfprintf+0x2e8>
    1a82:	99 ee       	ldi	r25, 0xE9	; 233
    1a84:	f9 22       	and	r15, r25
    1a86:	08 c0       	rjmp	.+16     	; 0x1a98 <vfprintf+0x2f8>
    1a88:	1f 5f       	subi	r17, 0xFF	; 255
    1a8a:	f2 fe       	sbrs	r15, 2
    1a8c:	05 c0       	rjmp	.+10     	; 0x1a98 <vfprintf+0x2f8>
    1a8e:	03 c0       	rjmp	.+6      	; 0x1a96 <vfprintf+0x2f6>
    1a90:	8f 2d       	mov	r24, r15
    1a92:	86 78       	andi	r24, 0x86	; 134
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <vfprintf+0x2f8>
    1a96:	1f 5f       	subi	r17, 0xFF	; 255
    1a98:	0f 2d       	mov	r16, r15
    1a9a:	f3 fc       	sbrc	r15, 3
    1a9c:	14 c0       	rjmp	.+40     	; 0x1ac6 <vfprintf+0x326>
    1a9e:	f0 fe       	sbrs	r15, 0
    1aa0:	0f c0       	rjmp	.+30     	; 0x1ac0 <vfprintf+0x320>
    1aa2:	1e 15       	cp	r17, r14
    1aa4:	10 f0       	brcs	.+4      	; 0x1aaa <vfprintf+0x30a>
    1aa6:	9d 2c       	mov	r9, r13
    1aa8:	0b c0       	rjmp	.+22     	; 0x1ac0 <vfprintf+0x320>
    1aaa:	9d 2c       	mov	r9, r13
    1aac:	9e 0c       	add	r9, r14
    1aae:	91 1a       	sub	r9, r17
    1ab0:	1e 2d       	mov	r17, r14
    1ab2:	06 c0       	rjmp	.+12     	; 0x1ac0 <vfprintf+0x320>
    1ab4:	80 e2       	ldi	r24, 0x20	; 32
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	b3 01       	movw	r22, r6
    1aba:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <fputc>
    1abe:	1f 5f       	subi	r17, 0xFF	; 255
    1ac0:	1e 15       	cp	r17, r14
    1ac2:	c0 f3       	brcs	.-16     	; 0x1ab4 <vfprintf+0x314>
    1ac4:	04 c0       	rjmp	.+8      	; 0x1ace <vfprintf+0x32e>
    1ac6:	1e 15       	cp	r17, r14
    1ac8:	10 f4       	brcc	.+4      	; 0x1ace <vfprintf+0x32e>
    1aca:	e1 1a       	sub	r14, r17
    1acc:	01 c0       	rjmp	.+2      	; 0x1ad0 <vfprintf+0x330>
    1ace:	ee 24       	eor	r14, r14
    1ad0:	04 ff       	sbrs	r16, 4
    1ad2:	0f c0       	rjmp	.+30     	; 0x1af2 <vfprintf+0x352>
    1ad4:	80 e3       	ldi	r24, 0x30	; 48
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	b3 01       	movw	r22, r6
    1ada:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <fputc>
    1ade:	02 ff       	sbrs	r16, 2
    1ae0:	1d c0       	rjmp	.+58     	; 0x1b1c <vfprintf+0x37c>
    1ae2:	01 fd       	sbrc	r16, 1
    1ae4:	03 c0       	rjmp	.+6      	; 0x1aec <vfprintf+0x34c>
    1ae6:	88 e7       	ldi	r24, 0x78	; 120
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	0e c0       	rjmp	.+28     	; 0x1b08 <vfprintf+0x368>
    1aec:	88 e5       	ldi	r24, 0x58	; 88
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	0b c0       	rjmp	.+22     	; 0x1b08 <vfprintf+0x368>
    1af2:	80 2f       	mov	r24, r16
    1af4:	86 78       	andi	r24, 0x86	; 134
    1af6:	91 f0       	breq	.+36     	; 0x1b1c <vfprintf+0x37c>
    1af8:	01 ff       	sbrs	r16, 1
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <vfprintf+0x360>
    1afc:	8b e2       	ldi	r24, 0x2B	; 43
    1afe:	01 c0       	rjmp	.+2      	; 0x1b02 <vfprintf+0x362>
    1b00:	80 e2       	ldi	r24, 0x20	; 32
    1b02:	f7 fc       	sbrc	r15, 7
    1b04:	8d e2       	ldi	r24, 0x2D	; 45
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	b3 01       	movw	r22, r6
    1b0a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <fputc>
    1b0e:	06 c0       	rjmp	.+12     	; 0x1b1c <vfprintf+0x37c>
    1b10:	80 e3       	ldi	r24, 0x30	; 48
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	b3 01       	movw	r22, r6
    1b16:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <fputc>
    1b1a:	9a 94       	dec	r9
    1b1c:	d9 14       	cp	r13, r9
    1b1e:	c0 f3       	brcs	.-16     	; 0x1b10 <vfprintf+0x370>
    1b20:	da 94       	dec	r13
    1b22:	f1 01       	movw	r30, r2
    1b24:	ed 0d       	add	r30, r13
    1b26:	f1 1d       	adc	r31, r1
    1b28:	80 81       	ld	r24, Z
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	b3 01       	movw	r22, r6
    1b2e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <fputc>
    1b32:	dd 20       	and	r13, r13
    1b34:	a9 f7       	brne	.-22     	; 0x1b20 <vfprintf+0x380>
    1b36:	06 c0       	rjmp	.+12     	; 0x1b44 <vfprintf+0x3a4>
    1b38:	80 e2       	ldi	r24, 0x20	; 32
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	b3 01       	movw	r22, r6
    1b3e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <fputc>
    1b42:	ea 94       	dec	r14
    1b44:	ee 20       	and	r14, r14
    1b46:	c1 f7       	brne	.-16     	; 0x1b38 <vfprintf+0x398>
    1b48:	43 ce       	rjmp	.-890    	; 0x17d0 <vfprintf+0x30>
    1b4a:	f3 01       	movw	r30, r6
    1b4c:	66 81       	ldd	r22, Z+6	; 0x06
    1b4e:	77 81       	ldd	r23, Z+7	; 0x07
    1b50:	cb 01       	movw	r24, r22
    1b52:	2b 96       	adiw	r28, 0x0b	; 11
    1b54:	e2 e1       	ldi	r30, 0x12	; 18
    1b56:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__epilogue_restores__>

00001b5a <strnlen_P>:
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	05 90       	lpm	r0, Z+
    1b5e:	61 50       	subi	r22, 0x01	; 1
    1b60:	70 40       	sbci	r23, 0x00	; 0
    1b62:	01 10       	cpse	r0, r1
    1b64:	d8 f7       	brcc	.-10     	; 0x1b5c <strnlen_P+0x2>
    1b66:	80 95       	com	r24
    1b68:	90 95       	com	r25
    1b6a:	8e 0f       	add	r24, r30
    1b6c:	9f 1f       	adc	r25, r31
    1b6e:	08 95       	ret

00001b70 <strnlen>:
    1b70:	fc 01       	movw	r30, r24
    1b72:	61 50       	subi	r22, 0x01	; 1
    1b74:	70 40       	sbci	r23, 0x00	; 0
    1b76:	01 90       	ld	r0, Z+
    1b78:	01 10       	cpse	r0, r1
    1b7a:	d8 f7       	brcc	.-10     	; 0x1b72 <strnlen+0x2>
    1b7c:	80 95       	com	r24
    1b7e:	90 95       	com	r25
    1b80:	8e 0f       	add	r24, r30
    1b82:	9f 1f       	adc	r25, r31
    1b84:	08 95       	ret

00001b86 <strrev>:
    1b86:	dc 01       	movw	r26, r24
    1b88:	fc 01       	movw	r30, r24
    1b8a:	67 2f       	mov	r22, r23
    1b8c:	71 91       	ld	r23, Z+
    1b8e:	77 23       	and	r23, r23
    1b90:	e1 f7       	brne	.-8      	; 0x1b8a <strrev+0x4>
    1b92:	32 97       	sbiw	r30, 0x02	; 2
    1b94:	04 c0       	rjmp	.+8      	; 0x1b9e <strrev+0x18>
    1b96:	7c 91       	ld	r23, X
    1b98:	6d 93       	st	X+, r22
    1b9a:	70 83       	st	Z, r23
    1b9c:	62 91       	ld	r22, -Z
    1b9e:	ae 17       	cp	r26, r30
    1ba0:	bf 07       	cpc	r27, r31
    1ba2:	c8 f3       	brcs	.-14     	; 0x1b96 <strrev+0x10>
    1ba4:	08 95       	ret

00001ba6 <fputc>:
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	8c 01       	movw	r16, r24
    1bb0:	eb 01       	movw	r28, r22
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	81 ff       	sbrs	r24, 1
    1bb6:	1b c0       	rjmp	.+54     	; 0x1bee <fputc+0x48>
    1bb8:	82 ff       	sbrs	r24, 2
    1bba:	0d c0       	rjmp	.+26     	; 0x1bd6 <fputc+0x30>
    1bbc:	2e 81       	ldd	r18, Y+6	; 0x06
    1bbe:	3f 81       	ldd	r19, Y+7	; 0x07
    1bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc4:	28 17       	cp	r18, r24
    1bc6:	39 07       	cpc	r19, r25
    1bc8:	64 f4       	brge	.+24     	; 0x1be2 <fputc+0x3c>
    1bca:	e8 81       	ld	r30, Y
    1bcc:	f9 81       	ldd	r31, Y+1	; 0x01
    1bce:	01 93       	st	Z+, r16
    1bd0:	f9 83       	std	Y+1, r31	; 0x01
    1bd2:	e8 83       	st	Y, r30
    1bd4:	06 c0       	rjmp	.+12     	; 0x1be2 <fputc+0x3c>
    1bd6:	e8 85       	ldd	r30, Y+8	; 0x08
    1bd8:	f9 85       	ldd	r31, Y+9	; 0x09
    1bda:	80 2f       	mov	r24, r16
    1bdc:	09 95       	icall
    1bde:	89 2b       	or	r24, r25
    1be0:	31 f4       	brne	.+12     	; 0x1bee <fputc+0x48>
    1be2:	8e 81       	ldd	r24, Y+6	; 0x06
    1be4:	9f 81       	ldd	r25, Y+7	; 0x07
    1be6:	01 96       	adiw	r24, 0x01	; 1
    1be8:	9f 83       	std	Y+7, r25	; 0x07
    1bea:	8e 83       	std	Y+6, r24	; 0x06
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <fputc+0x4c>
    1bee:	0f ef       	ldi	r16, 0xFF	; 255
    1bf0:	1f ef       	ldi	r17, 0xFF	; 255
    1bf2:	c8 01       	movw	r24, r16
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	1f 91       	pop	r17
    1bfa:	0f 91       	pop	r16
    1bfc:	08 95       	ret

00001bfe <__ultoa_invert>:
    1bfe:	fa 01       	movw	r30, r20
    1c00:	aa 27       	eor	r26, r26
    1c02:	28 30       	cpi	r18, 0x08	; 8
    1c04:	51 f1       	breq	.+84     	; 0x1c5a <__ultoa_invert+0x5c>
    1c06:	20 31       	cpi	r18, 0x10	; 16
    1c08:	81 f1       	breq	.+96     	; 0x1c6a <__ultoa_invert+0x6c>
    1c0a:	e8 94       	clt
    1c0c:	6f 93       	push	r22
    1c0e:	6e 7f       	andi	r22, 0xFE	; 254
    1c10:	6e 5f       	subi	r22, 0xFE	; 254
    1c12:	7f 4f       	sbci	r23, 0xFF	; 255
    1c14:	8f 4f       	sbci	r24, 0xFF	; 255
    1c16:	9f 4f       	sbci	r25, 0xFF	; 255
    1c18:	af 4f       	sbci	r26, 0xFF	; 255
    1c1a:	b1 e0       	ldi	r27, 0x01	; 1
    1c1c:	3e d0       	rcall	.+124    	; 0x1c9a <__ultoa_invert+0x9c>
    1c1e:	b4 e0       	ldi	r27, 0x04	; 4
    1c20:	3c d0       	rcall	.+120    	; 0x1c9a <__ultoa_invert+0x9c>
    1c22:	67 0f       	add	r22, r23
    1c24:	78 1f       	adc	r23, r24
    1c26:	89 1f       	adc	r24, r25
    1c28:	9a 1f       	adc	r25, r26
    1c2a:	a1 1d       	adc	r26, r1
    1c2c:	68 0f       	add	r22, r24
    1c2e:	79 1f       	adc	r23, r25
    1c30:	8a 1f       	adc	r24, r26
    1c32:	91 1d       	adc	r25, r1
    1c34:	a1 1d       	adc	r26, r1
    1c36:	6a 0f       	add	r22, r26
    1c38:	71 1d       	adc	r23, r1
    1c3a:	81 1d       	adc	r24, r1
    1c3c:	91 1d       	adc	r25, r1
    1c3e:	a1 1d       	adc	r26, r1
    1c40:	20 d0       	rcall	.+64     	; 0x1c82 <__ultoa_invert+0x84>
    1c42:	09 f4       	brne	.+2      	; 0x1c46 <__ultoa_invert+0x48>
    1c44:	68 94       	set
    1c46:	3f 91       	pop	r19
    1c48:	2a e0       	ldi	r18, 0x0A	; 10
    1c4a:	26 9f       	mul	r18, r22
    1c4c:	11 24       	eor	r1, r1
    1c4e:	30 19       	sub	r19, r0
    1c50:	30 5d       	subi	r19, 0xD0	; 208
    1c52:	31 93       	st	Z+, r19
    1c54:	de f6       	brtc	.-74     	; 0x1c0c <__ultoa_invert+0xe>
    1c56:	cf 01       	movw	r24, r30
    1c58:	08 95       	ret
    1c5a:	46 2f       	mov	r20, r22
    1c5c:	47 70       	andi	r20, 0x07	; 7
    1c5e:	40 5d       	subi	r20, 0xD0	; 208
    1c60:	41 93       	st	Z+, r20
    1c62:	b3 e0       	ldi	r27, 0x03	; 3
    1c64:	0f d0       	rcall	.+30     	; 0x1c84 <__ultoa_invert+0x86>
    1c66:	c9 f7       	brne	.-14     	; 0x1c5a <__ultoa_invert+0x5c>
    1c68:	f6 cf       	rjmp	.-20     	; 0x1c56 <__ultoa_invert+0x58>
    1c6a:	46 2f       	mov	r20, r22
    1c6c:	4f 70       	andi	r20, 0x0F	; 15
    1c6e:	40 5d       	subi	r20, 0xD0	; 208
    1c70:	4a 33       	cpi	r20, 0x3A	; 58
    1c72:	18 f0       	brcs	.+6      	; 0x1c7a <__ultoa_invert+0x7c>
    1c74:	49 5d       	subi	r20, 0xD9	; 217
    1c76:	31 fd       	sbrc	r19, 1
    1c78:	40 52       	subi	r20, 0x20	; 32
    1c7a:	41 93       	st	Z+, r20
    1c7c:	02 d0       	rcall	.+4      	; 0x1c82 <__ultoa_invert+0x84>
    1c7e:	a9 f7       	brne	.-22     	; 0x1c6a <__ultoa_invert+0x6c>
    1c80:	ea cf       	rjmp	.-44     	; 0x1c56 <__ultoa_invert+0x58>
    1c82:	b4 e0       	ldi	r27, 0x04	; 4
    1c84:	a6 95       	lsr	r26
    1c86:	97 95       	ror	r25
    1c88:	87 95       	ror	r24
    1c8a:	77 95       	ror	r23
    1c8c:	67 95       	ror	r22
    1c8e:	ba 95       	dec	r27
    1c90:	c9 f7       	brne	.-14     	; 0x1c84 <__ultoa_invert+0x86>
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	61 05       	cpc	r22, r1
    1c96:	71 05       	cpc	r23, r1
    1c98:	08 95       	ret
    1c9a:	9b 01       	movw	r18, r22
    1c9c:	ac 01       	movw	r20, r24
    1c9e:	0a 2e       	mov	r0, r26
    1ca0:	06 94       	lsr	r0
    1ca2:	57 95       	ror	r21
    1ca4:	47 95       	ror	r20
    1ca6:	37 95       	ror	r19
    1ca8:	27 95       	ror	r18
    1caa:	ba 95       	dec	r27
    1cac:	c9 f7       	brne	.-14     	; 0x1ca0 <__ultoa_invert+0xa2>
    1cae:	62 0f       	add	r22, r18
    1cb0:	73 1f       	adc	r23, r19
    1cb2:	84 1f       	adc	r24, r20
    1cb4:	95 1f       	adc	r25, r21
    1cb6:	a0 1d       	adc	r26, r0
    1cb8:	08 95       	ret

00001cba <__udivmodhi4>:
    1cba:	aa 1b       	sub	r26, r26
    1cbc:	bb 1b       	sub	r27, r27
    1cbe:	51 e1       	ldi	r21, 0x11	; 17
    1cc0:	07 c0       	rjmp	.+14     	; 0x1cd0 <__udivmodhi4_ep>

00001cc2 <__udivmodhi4_loop>:
    1cc2:	aa 1f       	adc	r26, r26
    1cc4:	bb 1f       	adc	r27, r27
    1cc6:	a6 17       	cp	r26, r22
    1cc8:	b7 07       	cpc	r27, r23
    1cca:	10 f0       	brcs	.+4      	; 0x1cd0 <__udivmodhi4_ep>
    1ccc:	a6 1b       	sub	r26, r22
    1cce:	b7 0b       	sbc	r27, r23

00001cd0 <__udivmodhi4_ep>:
    1cd0:	88 1f       	adc	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	5a 95       	dec	r21
    1cd6:	a9 f7       	brne	.-22     	; 0x1cc2 <__udivmodhi4_loop>
    1cd8:	80 95       	com	r24
    1cda:	90 95       	com	r25
    1cdc:	bc 01       	movw	r22, r24
    1cde:	cd 01       	movw	r24, r26
    1ce0:	08 95       	ret

00001ce2 <__prologue_saves__>:
    1ce2:	2f 92       	push	r2
    1ce4:	3f 92       	push	r3
    1ce6:	4f 92       	push	r4
    1ce8:	5f 92       	push	r5
    1cea:	6f 92       	push	r6
    1cec:	7f 92       	push	r7
    1cee:	8f 92       	push	r8
    1cf0:	9f 92       	push	r9
    1cf2:	af 92       	push	r10
    1cf4:	bf 92       	push	r11
    1cf6:	cf 92       	push	r12
    1cf8:	df 92       	push	r13
    1cfa:	ef 92       	push	r14
    1cfc:	ff 92       	push	r15
    1cfe:	0f 93       	push	r16
    1d00:	1f 93       	push	r17
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	ca 1b       	sub	r28, r26
    1d0c:	db 0b       	sbc	r29, r27
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	cd bf       	out	0x3d, r28	; 61
    1d18:	09 94       	ijmp

00001d1a <__epilogue_restores__>:
    1d1a:	2a 88       	ldd	r2, Y+18	; 0x12
    1d1c:	39 88       	ldd	r3, Y+17	; 0x11
    1d1e:	48 88       	ldd	r4, Y+16	; 0x10
    1d20:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d22:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d24:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d26:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d28:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d2a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d2c:	b9 84       	ldd	r11, Y+9	; 0x09
    1d2e:	c8 84       	ldd	r12, Y+8	; 0x08
    1d30:	df 80       	ldd	r13, Y+7	; 0x07
    1d32:	ee 80       	ldd	r14, Y+6	; 0x06
    1d34:	fd 80       	ldd	r15, Y+5	; 0x05
    1d36:	0c 81       	ldd	r16, Y+4	; 0x04
    1d38:	1b 81       	ldd	r17, Y+3	; 0x03
    1d3a:	aa 81       	ldd	r26, Y+2	; 0x02
    1d3c:	b9 81       	ldd	r27, Y+1	; 0x01
    1d3e:	ce 0f       	add	r28, r30
    1d40:	d1 1d       	adc	r29, r1
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	ed 01       	movw	r28, r26
    1d4e:	08 95       	ret

00001d50 <_exit>:
    1d50:	f8 94       	cli

00001d52 <__stop_program>:
    1d52:	ff cf       	rjmp	.-2      	; 0x1d52 <__stop_program>
