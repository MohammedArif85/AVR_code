
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  000015b4  00001648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000247  008000a8  008000a8  00001690  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000374  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019e7  00000000  00000000  00001a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000036d  00000000  00000000  0000340b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000164d  00000000  00000000  00003778  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  00004dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c0  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001108  00000000  00000000  00005518  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00006620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c2 01 	jmp	0x384	; 0x384 <__ctors_end>
       4:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
       8:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
       c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      10:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      14:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      18:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      1c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      20:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      24:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      28:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      2c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      30:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      34:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      38:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      3c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      40:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      44:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      48:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      4c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>
      50:	0c 94 df 01 	jmp	0x3be	; 0x3be <__bad_interrupt>

00000054 <__c.2397>:
      54:	48 54 54 50 2f 31 2e 30 20 34 30 31 20 55 6e 61     HTTP/1.0 401 Una
      64:	75 74 68 6f 72 69 7a 65 64 0d 0a 43 6f 6e 74 65     uthorized..Conte
      74:	6e 74 2d 54 79 70 65 3a 20 74 65 78 74 2f 68 74     nt-Type: text/ht
      84:	6d 6c 0d 0a 0d 0a 3c 68 31 3e 34 30 31 20 55 6e     ml....<h1>401 Un
      94:	61 75 74 68 6f 72 69 7a 65 64 3c 2f 68 31 3e 00     authorized</h1>.

000000a4 <__c.2395>:
      a4:	3c 70 3e 55 73 61 67 65 3a 20 68 74 74 70 3a 2f     <p>Usage: http:/
      b4:	2f 68 6f 73 74 5f 6f 72 5f 69 70 2f 70 61 73 73     /host_or_ip/pass
      c4:	77 6f 72 64 3c 2f 70 3e 0a 00                       word</p>..

000000ce <__c.2393>:
      ce:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
      de:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
      ee:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

000000fb <__c.2390>:
      fb:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     10b:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     11b:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 3c 68 31 3e     ext/html....<h1>
     12b:	32 30 30 20 4f 4b 3c 2f 68 31 3e 00                 200 OK</h1>.

00000137 <__c.2359>:
     137:	3c 2f 63 65 6e 74 65 72 3e 3c 68 72 3e 3c 62 72     </center><hr><br
     147:	3e 3c 68 32 3e 53 68 61 63 68 69 20 41 77 61 73     ><h2>Shachi Awas
     157:	74 68 69 3c 2f 68 32 3e 0a 00                       thi</h2>..

00000161 <__c.2357>:
     161:	2f 31 22 3e 53 77 69 74 63 68 20 6f 6e 3c 2f 61     /1">Switch on</a
     171:	3e 3c 70 3e 00                                      ><p>.

00000176 <__c.2355>:
     176:	2f 30 22 3e 53 77 69 74 63 68 20 6f 66 66 3c 2f     /0">Switch off</
     186:	61 3e 3c 70 3e 00                                   a><p>.

0000018c <__c.2353>:
     18c:	20 3c 73 6d 61 6c 6c 3e 3c 61 20 68 72 65 66 3d      <small><a href=
     19c:	22 2e 22 3e 5b 72 65 66 72 65 73 68 20 73 74 61     ".">[refresh sta
     1ac:	74 75 73 5d 3c 2f 61 3e 3c 2f 73 6d 61 6c 6c 3e     tus]</a></small>
     1bc:	3c 2f 70 3e 0a 3c 70 3e 3c 61 20 68 72 65 66 3d     </p>.<p><a href=
     1cc:	22 2e 00                                            "..

000001cf <__c.2351>:
     1cf:	4f 46 46 00                                         OFF.

000001d3 <__c.2349>:
     1d3:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 23 46 46     <font color="#FF
     1e3:	30 30 30 30 22 3e 20 4f 4e 3c 2f 66 6f 6e 74 3e     0000"> ON</font>
     1f3:	00                                                  .

000001f4 <__c.2347>:
     1f4:	3c 63 65 6e 74 65 72 3e 3c 70 3e 4f 75 74 70 75     <center><p>Outpu
     204:	74 20 69 73 3a 20 00                                t is: .

0000020b <__c.2345>:
     20b:	20 57 41 54 54 53 2f 73 71 2e 6d 65 74 65 72 3c      WATTS/sq.meter<
     21b:	2f 63 65 6e 74 65 72 3e 3c 2f 68 32 3e 3c 2f 70     /center></h2></p
     22b:	3e 00                                               >.

0000022d <__c.2343>:
     22d:	3c 63 65 6e 74 65 72 3e 3c 70 3e 3c 68 32 3e 49     <center><p><h2>I
     23d:	72 72 61 64 69 61 6e 63 65 20 69 73 3a 20 00        rradiance is: .

0000024c <__c.2341>:
     24c:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 23 46 46     <font color="#FF
     25c:	30 30 30 30 22 3e 3c 63 65 6e 74 65 72 3e 3c 48     0000"><center><H
     26c:	31 3e 53 6f 6c 61 72 20 49 72 72 61 64 69 61 6e     1>Solar Irradian
     27c:	63 65 20 4d 65 74 65 72 3c 2f 48 31 3e 3c 2f 63     ce Meter</H1></c
     28c:	65 6e 74 65 72 3e 3c 2f 66 6f 6e 74 3e 00           enter></font>.

0000029a <__c.2339>:
     29a:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     2aa:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     2ba:	65 78 74 2f 68 74 6d 6c 0d 0a 50 72 61 67 6d 61     ext/html..Pragma
     2ca:	3a 20 6e 6f 2d 63 61 63 68 65 0d 0a 52 65 66 72     : no-cache..Refr
     2da:	65 73 68 3a 20 32 30 0d 0a 0d 0a 00                 esh: 20.....

000002e6 <__c.2326>:
     2e6:	61 64 64 20 61 20 74 72 61 69 6c 69 6e 67 20 73     add a trailing s
     2f6:	6c 61 73 68 20 74 6f 20 74 68 65 20 75 72 6c 0a     lash to the url.
     306:	00                                                  .

00000307 <__c.2324>:
     307:	3c 68 31 3e 33 30 31 20 4d 6f 76 65 64 20 50 65     <h1>301 Moved Pe
     317:	72 6d 61 6e 65 6e 74 6c 79 3c 2f 68 31 3e 0a 00     rmanently</h1>..

00000327 <__c.2322>:
     327:	2f 0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a     /..Content-Type:
     337:	20 74 65 78 74 2f 68 74 6d 6c 0d 0a 50 72 61 67      text/html..Prag
     347:	6d 61 3a 20 6e 6f 2d 63 61 63 68 65 0d 0a 0d 0a     ma: no-cache....
     357:	00                                                  .

00000358 <__c.2320>:
     358:	48 54 54 50 2f 31 2e 30 20 33 30 31 20 4d 6f 76     HTTP/1.0 301 Mov
     368:	65 64 20 50 65 72 6d 61 6e 65 6e 74 6c 79 0d 0a     ed Permanently..
     378:	4c 6f 63 61 74 69 6f 6e 3a 20 00 00                 Location: ..

00000384 <__ctors_end>:
     384:	11 24       	eor	r1, r1
     386:	1f be       	out	0x3f, r1	; 63
     388:	cf e5       	ldi	r28, 0x5F	; 95
     38a:	d4 e0       	ldi	r29, 0x04	; 4
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	cd bf       	out	0x3d, r28	; 61

00000390 <__do_copy_data>:
     390:	10 e0       	ldi	r17, 0x00	; 0
     392:	a0 e6       	ldi	r26, 0x60	; 96
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	e4 eb       	ldi	r30, 0xB4	; 180
     398:	f5 e1       	ldi	r31, 0x15	; 21
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <.do_copy_data_start>

0000039c <.do_copy_data_loop>:
     39c:	05 90       	lpm	r0, Z+
     39e:	0d 92       	st	X+, r0

000003a0 <.do_copy_data_start>:
     3a0:	a8 3a       	cpi	r26, 0xA8	; 168
     3a2:	b1 07       	cpc	r27, r17
     3a4:	d9 f7       	brne	.-10     	; 0x39c <.do_copy_data_loop>

000003a6 <__do_clear_bss>:
     3a6:	12 e0       	ldi	r17, 0x02	; 2
     3a8:	a8 ea       	ldi	r26, 0xA8	; 168
     3aa:	b0 e0       	ldi	r27, 0x00	; 0
     3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <.do_clear_bss_start>

000003ae <.do_clear_bss_loop>:
     3ae:	1d 92       	st	X+, r1

000003b0 <.do_clear_bss_start>:
     3b0:	af 3e       	cpi	r26, 0xEF	; 239
     3b2:	b1 07       	cpc	r27, r17
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <.do_clear_bss_loop>
     3b6:	0e 94 c8 08 	call	0x1190	; 0x1190 <main>
     3ba:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <_exit>

000003be <__bad_interrupt>:
     3be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c2 <enc28j60ReadOp>:
//
#define waitspi() while(!(SPSR&(1<<SPIF)))

uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
{
        CSACTIVE;
     3c2:	c4 98       	cbi	0x18, 4	; 24
        // issue read command
        SPDR = op | (address & ADDR_MASK);
     3c4:	96 2f       	mov	r25, r22
     3c6:	9f 71       	andi	r25, 0x1F	; 31
     3c8:	98 2b       	or	r25, r24
     3ca:	9f b9       	out	0x0f, r25	; 15
        waitspi();
     3cc:	77 9b       	sbis	0x0e, 7	; 14
     3ce:	fe cf       	rjmp	.-4      	; 0x3cc <enc28j60ReadOp+0xa>
        // read data
        SPDR = 0x00;
     3d0:	1f b8       	out	0x0f, r1	; 15
        waitspi();
     3d2:	77 9b       	sbis	0x0e, 7	; 14
     3d4:	fe cf       	rjmp	.-4      	; 0x3d2 <enc28j60ReadOp+0x10>
        // do dummy read if needed (for mac and mii, see datasheet page 29)
        if(address & 0x80)
     3d6:	67 ff       	sbrs	r22, 7
     3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <enc28j60ReadOp+0x1e>
        {
                SPDR = 0x00;
     3da:	1f b8       	out	0x0f, r1	; 15
                waitspi();
     3dc:	77 9b       	sbis	0x0e, 7	; 14
     3de:	fe cf       	rjmp	.-4      	; 0x3dc <enc28j60ReadOp+0x1a>
        }
        // release CS
        CSPASSIVE;
     3e0:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
     3e2:	8f b1       	in	r24, 0x0f	; 15
}
     3e4:	08 95       	ret

000003e6 <enc28j60WriteOp>:

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     3e6:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     3e8:	6f 71       	andi	r22, 0x1F	; 31
     3ea:	68 2b       	or	r22, r24
     3ec:	6f b9       	out	0x0f, r22	; 15
        waitspi();
     3ee:	77 9b       	sbis	0x0e, 7	; 14
     3f0:	fe cf       	rjmp	.-4      	; 0x3ee <enc28j60WriteOp+0x8>
        // write data
        SPDR = data;
     3f2:	4f b9       	out	0x0f, r20	; 15
        waitspi();
     3f4:	77 9b       	sbis	0x0e, 7	; 14
     3f6:	fe cf       	rjmp	.-4      	; 0x3f4 <enc28j60WriteOp+0xe>
        CSPASSIVE;
     3f8:	c4 9a       	sbi	0x18, 4	; 24
}
     3fa:	08 95       	ret

000003fc <enc28j60ReadBuffer>:

void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
{
     3fc:	ac 01       	movw	r20, r24
     3fe:	fb 01       	movw	r30, r22
        CSACTIVE;
     400:	c4 98       	cbi	0x18, 4	; 24
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
     402:	8a e3       	ldi	r24, 0x3A	; 58
     404:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     406:	77 9b       	sbis	0x0e, 7	; 14
     408:	fe cf       	rjmp	.-4      	; 0x406 <enc28j60ReadBuffer+0xa>
     40a:	9a 01       	movw	r18, r20
     40c:	df 01       	movw	r26, r30
     40e:	07 c0       	rjmp	.+14     	; 0x41e <enc28j60ReadBuffer+0x22>
        while(len)
        {
                len--;
                // read data
                SPDR = 0x00;
     410:	1f b8       	out	0x0f, r1	; 15
                waitspi();
     412:	77 9b       	sbis	0x0e, 7	; 14
     414:	fe cf       	rjmp	.-4      	; 0x412 <enc28j60ReadBuffer+0x16>
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     416:	21 50       	subi	r18, 0x01	; 1
     418:	30 40       	sbci	r19, 0x00	; 0
                // read data
                SPDR = 0x00;
                waitspi();
                *data = SPDR;
     41a:	8f b1       	in	r24, 0x0f	; 15
     41c:	8d 93       	st	X+, r24
{
        CSACTIVE;
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
        waitspi();
        while(len)
     41e:	21 15       	cp	r18, r1
     420:	31 05       	cpc	r19, r1
     422:	b1 f7       	brne	.-20     	; 0x410 <enc28j60ReadBuffer+0x14>
                SPDR = 0x00;
                waitspi();
                *data = SPDR;
                data++;
        }
        *data='\0';
     424:	e4 0f       	add	r30, r20
     426:	f5 1f       	adc	r31, r21
     428:	10 82       	st	Z, r1
        CSPASSIVE;
     42a:	c4 9a       	sbi	0x18, 4	; 24
}
     42c:	08 95       	ret

0000042e <enc28j60WriteBuffer>:

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
     42e:	9c 01       	movw	r18, r24
     430:	fb 01       	movw	r30, r22
        CSACTIVE;
     432:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
     434:	8a e7       	ldi	r24, 0x7A	; 122
     436:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     438:	77 9b       	sbis	0x0e, 7	; 14
     43a:	fe cf       	rjmp	.-4      	; 0x438 <enc28j60WriteBuffer+0xa>
     43c:	07 c0       	rjmp	.+14     	; 0x44c <enc28j60WriteBuffer+0x1e>
        while(len)
        {
                len--;
                // write data
                SPDR = *data;
     43e:	80 81       	ld	r24, Z
     440:	8f b9       	out	0x0f, r24	; 15
                data++;
                waitspi();
     442:	77 9b       	sbis	0x0e, 7	; 14
     444:	fe cf       	rjmp	.-4      	; 0x442 <enc28j60WriteBuffer+0x14>
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     446:	21 50       	subi	r18, 0x01	; 1
     448:	30 40       	sbci	r19, 0x00	; 0
                // write data
                SPDR = *data;
                data++;
     44a:	31 96       	adiw	r30, 0x01	; 1
{
        CSACTIVE;
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
     44c:	21 15       	cp	r18, r1
     44e:	31 05       	cpc	r19, r1
     450:	b1 f7       	brne	.-20     	; 0x43e <enc28j60WriteBuffer+0x10>
                // write data
                SPDR = *data;
                data++;
                waitspi();
        }
        CSPASSIVE;
     452:	c4 9a       	sbi	0x18, 4	; 24
}
     454:	08 95       	ret

00000456 <enc28j60SetBank>:

void enc28j60SetBank(uint8_t address)
{
     456:	48 2f       	mov	r20, r24
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
     458:	28 2f       	mov	r18, r24
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	20 76       	andi	r18, 0x60	; 96
     45e:	30 70       	andi	r19, 0x00	; 0
     460:	80 91 ac 00 	lds	r24, 0x00AC
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	28 17       	cp	r18, r24
     468:	39 07       	cpc	r19, r25
     46a:	d9 f0       	breq	.+54     	; 0x4a2 <__stack+0x43>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     46c:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     46e:	8f eb       	ldi	r24, 0xBF	; 191
     470:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     472:	77 9b       	sbis	0x0e, 7	; 14
     474:	fe cf       	rjmp	.-4      	; 0x472 <__stack+0x13>
        // write data
        SPDR = data;
     476:	83 e0       	ldi	r24, 0x03	; 3
     478:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     47a:	77 9b       	sbis	0x0e, 7	; 14
     47c:	fe cf       	rjmp	.-4      	; 0x47a <__stack+0x1b>
        CSPASSIVE;
     47e:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     480:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     482:	8f e9       	ldi	r24, 0x9F	; 159
     484:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     486:	77 9b       	sbis	0x0e, 7	; 14
     488:	fe cf       	rjmp	.-4      	; 0x486 <__stack+0x27>
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
     48a:	85 e0       	ldi	r24, 0x05	; 5
     48c:	35 95       	asr	r19
     48e:	27 95       	ror	r18
     490:	8a 95       	dec	r24
     492:	e1 f7       	brne	.-8      	; 0x48c <__stack+0x2d>
        CSACTIVE;
        // issue write command
        SPDR = op | (address & ADDR_MASK);
        waitspi();
        // write data
        SPDR = data;
     494:	2f b9       	out	0x0f, r18	; 15
        waitspi();
     496:	77 9b       	sbis	0x0e, 7	; 14
     498:	fe cf       	rjmp	.-4      	; 0x496 <__stack+0x37>
        CSPASSIVE;
     49a:	c4 9a       	sbi	0x18, 4	; 24
        if((address & BANK_MASK) != Enc28j60Bank)
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
                Enc28j60Bank = (address & BANK_MASK);
     49c:	40 76       	andi	r20, 0x60	; 96
     49e:	40 93 ac 00 	sts	0x00AC, r20
     4a2:	08 95       	ret

000004a4 <enc28j60Read>:
        }
}

uint8_t enc28j60Read(uint8_t address)
{
     4a4:	1f 93       	push	r17
     4a6:	18 2f       	mov	r17, r24
        // set the bank
        enc28j60SetBank(address);
     4a8:	0e 94 2b 02 	call	0x456	; 0x456 <enc28j60SetBank>
        // do the read
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	61 2f       	mov	r22, r17
     4b0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enc28j60ReadOp>
}
     4b4:	1f 91       	pop	r17
     4b6:	08 95       	ret

000004b8 <enc28j60Write>:
	
	return (enc28j60Read(MIRDH));
}

void enc28j60Write(uint8_t address, uint8_t data)
{
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	18 2f       	mov	r17, r24
     4be:	06 2f       	mov	r16, r22
        // set the bank
        enc28j60SetBank(address);
     4c0:	0e 94 2b 02 	call	0x456	; 0x456 <enc28j60SetBank>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     4c4:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     4c6:	1f 71       	andi	r17, 0x1F	; 31
     4c8:	10 64       	ori	r17, 0x40	; 64
     4ca:	1f b9       	out	0x0f, r17	; 15
        waitspi();
     4cc:	77 9b       	sbis	0x0e, 7	; 14
     4ce:	fe cf       	rjmp	.-4      	; 0x4cc <enc28j60Write+0x14>
        // write data
        SPDR = data;
     4d0:	0f b9       	out	0x0f, r16	; 15
        waitspi();
     4d2:	77 9b       	sbis	0x0e, 7	; 14
     4d4:	fe cf       	rjmp	.-4      	; 0x4d2 <enc28j60Write+0x1a>
        CSPASSIVE;
     4d6:	c4 9a       	sbi	0x18, 4	; 24
{
        // set the bank
        enc28j60SetBank(address);
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
}
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	08 95       	ret

000004de <enc28j60PhyReadH>:
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
}

// read upper 8 bits
uint16_t enc28j60PhyReadH(uint8_t address)
{
     4de:	68 2f       	mov	r22, r24

	// Set the right address and start the register read operation
	enc28j60Write(MIREGADR, address);
     4e0:	84 ed       	ldi	r24, 0xD4	; 212
     4e2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	enc28j60Write(MICMD, MICMD_MIIRD);
     4e6:	82 ed       	ldi	r24, 0xD2	; 210
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4ee:	8c e3       	ldi	r24, 0x3C	; 60
     4f0:	8a 95       	dec	r24
     4f2:	f1 f7       	brne	.-4      	; 0x4f0 <enc28j60PhyReadH+0x12>
        _delay_us(15);

	// wait until the PHY read completes
	while(enc28j60Read(MISTAT) & MISTAT_BUSY);
     4f4:	8a ee       	ldi	r24, 0xEA	; 234
     4f6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <enc28j60Read>
     4fa:	80 fd       	sbrc	r24, 0
     4fc:	fb cf       	rjmp	.-10     	; 0x4f4 <enc28j60PhyReadH+0x16>

	// reset reading bit
	enc28j60Write(MICMD, 0x00);
     4fe:	82 ed       	ldi	r24, 0xD2	; 210
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	
	return (enc28j60Read(MIRDH));
     506:	89 ed       	ldi	r24, 0xD9	; 217
     508:	0e 94 52 02 	call	0x4a4	; 0x4a4 <enc28j60Read>
}
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	08 95       	ret

00000510 <enc28j60PhyWrite>:
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
}

void enc28j60PhyWrite(uint8_t address, uint16_t data)
{
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	98 2f       	mov	r25, r24
     516:	16 2f       	mov	r17, r22
     518:	07 2f       	mov	r16, r23
        // set the PHY register address
        enc28j60Write(MIREGADR, address);
     51a:	84 ed       	ldi	r24, 0xD4	; 212
     51c:	69 2f       	mov	r22, r25
     51e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
        // write the PHY data
        enc28j60Write(MIWRL, data);
     522:	86 ed       	ldi	r24, 0xD6	; 214
     524:	61 2f       	mov	r22, r17
     526:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
        enc28j60Write(MIWRH, data>>8);
     52a:	87 ed       	ldi	r24, 0xD7	; 215
     52c:	60 2f       	mov	r22, r16
     52e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
     532:	1c e3       	ldi	r17, 0x3C	; 60
     534:	03 c0       	rjmp	.+6      	; 0x53c <enc28j60PhyWrite+0x2c>
     536:	81 2f       	mov	r24, r17
     538:	8a 95       	dec	r24
     53a:	f1 f7       	brne	.-4      	; 0x538 <enc28j60PhyWrite+0x28>
        // wait until the PHY write completes
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
     53c:	8a ee       	ldi	r24, 0xEA	; 234
     53e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <enc28j60Read>
     542:	80 fd       	sbrc	r24, 0
     544:	f8 cf       	rjmp	.-16     	; 0x536 <enc28j60PhyWrite+0x26>
                _delay_us(15);
        }
}
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	08 95       	ret

0000054c <enc28j60clkout>:

void enc28j60clkout(uint8_t clk)
{
        //setup clkout: 2 is 12.5MHz:
	enc28j60Write(ECOCON, clk & 0x7);
     54c:	68 2f       	mov	r22, r24
     54e:	67 70       	andi	r22, 0x07	; 7
     550:	85 e7       	ldi	r24, 0x75	; 117
     552:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
}
     556:	08 95       	ret

00000558 <enc28j60Init>:

void enc28j60Init(uint8_t* macaddr)
{
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	ec 01       	movw	r28, r24
	// initialize I/O
        // ss as output:
	ENC28J60_CONTROL_DDR |= 1<<ENC28J60_CONTROL_CS;
     55e:	bc 9a       	sbi	0x17, 4	; 23
	CSPASSIVE; // ss=0
     560:	c4 9a       	sbi	0x18, 4	; 24
        //	
	ENC28J60_CONTROL_DDR  |= 1<<ENC28J60_CONTROL_SI | 1<<ENC28J60_CONTROL_SCK; // mosi, sck output
     562:	87 b3       	in	r24, 0x17	; 23
     564:	80 6a       	ori	r24, 0xA0	; 160
     566:	87 bb       	out	0x17, r24	; 23
	cbi(ENC28J60_CONTROL_DDR,ENC28J60_CONTROL_SO); // MISO is input
     568:	be 98       	cbi	0x17, 6	; 23
        //
        cbi(ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_SI); // MOSI low
     56a:	c5 98       	cbi	0x18, 5	; 24
        cbi(ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_SCK); // SCK low
     56c:	c7 98       	cbi	0x18, 7	; 24
	//
	// initialize SPI interface
	// master mode and Fosc/2 clock:
        SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//SPCR = (1<<SPE)|(1<<MSTR);
     56e:	81 e5       	ldi	r24, 0x51	; 81
     570:	8d b9       	out	0x0d, r24	; 13
        SPSR |= (1<<SPI2X);
     572:	70 9a       	sbi	0x0e, 0	; 14
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     574:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     576:	8f ef       	ldi	r24, 0xFF	; 255
     578:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     57a:	77 9b       	sbis	0x0e, 7	; 14
     57c:	fe cf       	rjmp	.-4      	; 0x57a <enc28j60Init+0x22>
        // write data
        SPDR = data;
     57e:	8f ef       	ldi	r24, 0xFF	; 255
     580:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     582:	77 9b       	sbis	0x0e, 7	; 14
     584:	fe cf       	rjmp	.-4      	; 0x582 <enc28j60Init+0x2a>
        CSPASSIVE;
     586:	c4 9a       	sbi	0x18, 4	; 24
     588:	8d ec       	ldi	r24, 0xCD	; 205
     58a:	8a 95       	dec	r24
     58c:	f1 f7       	brne	.-4      	; 0x58a <enc28j60Init+0x32>
	//while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	gNextPacketPtr = RXSTART_INIT;
     58e:	10 92 ae 00 	sts	0x00AE, r1
     592:	10 92 ad 00 	sts	0x00AD, r1
        // Rx start
	enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
     596:	88 e0       	ldi	r24, 0x08	; 8
     598:	60 e0       	ldi	r22, 0x00	; 0
     59a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	enc28j60Write(ERXSTH, RXSTART_INIT>>8);
     59e:	89 e0       	ldi	r24, 0x09	; 9
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	// set receive pointer address
	enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
     5a6:	8c e0       	ldi	r24, 0x0C	; 12
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
     5ae:	8d e0       	ldi	r24, 0x0D	; 13
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	// RX end
	enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
     5b6:	8a e0       	ldi	r24, 0x0A	; 10
     5b8:	6e ef       	ldi	r22, 0xFE	; 254
     5ba:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
     5be:	8b e0       	ldi	r24, 0x0B	; 11
     5c0:	69 e1       	ldi	r22, 0x19	; 25
     5c2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	// TX start
	enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
     5c6:	84 e0       	ldi	r24, 0x04	; 4
     5c8:	6f ef       	ldi	r22, 0xFF	; 255
     5ca:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	enc28j60Write(ETXSTH, TXSTART_INIT>>8);
     5ce:	85 e0       	ldi	r24, 0x05	; 5
     5d0:	69 e1       	ldi	r22, 0x19	; 25
     5d2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	// TX end
	enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
     5d6:	86 e0       	ldi	r24, 0x06	; 6
     5d8:	6f ef       	ldi	r22, 0xFF	; 255
     5da:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
     5de:	87 e0       	ldi	r24, 0x07	; 7
     5e0:	6f e1       	ldi	r22, 0x1F	; 31
     5e2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
        // Type     ETH.DST
        // ARP      BROADCAST
        // 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
        // in binary these poitions are:11 0000 0011 1111
        // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
	enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
     5e6:	88 e3       	ldi	r24, 0x38	; 56
     5e8:	60 eb       	ldi	r22, 0xB0	; 176
     5ea:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	enc28j60Write(EPMM0, 0x3f);
     5ee:	88 e2       	ldi	r24, 0x28	; 40
     5f0:	6f e3       	ldi	r22, 0x3F	; 63
     5f2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	enc28j60Write(EPMM1, 0x30);
     5f6:	89 e2       	ldi	r24, 0x29	; 41
     5f8:	60 e3       	ldi	r22, 0x30	; 48
     5fa:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	enc28j60Write(EPMCSL, 0xf9);
     5fe:	80 e3       	ldi	r24, 0x30	; 48
     600:	69 ef       	ldi	r22, 0xF9	; 249
     602:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	enc28j60Write(EPMCSH, 0xf7);
     606:	81 e3       	ldi	r24, 0x31	; 49
     608:	67 ef       	ldi	r22, 0xF7	; 247
     60a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
        //
        //
	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
     60e:	80 ec       	ldi	r24, 0xC0	; 192
     610:	6d e0       	ldi	r22, 0x0D	; 13
     612:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
     616:	81 ec       	ldi	r24, 0xC1	; 193
     618:	60 e0       	ldi	r22, 0x00	; 0
     61a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     61e:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     620:	82 e8       	ldi	r24, 0x82	; 130
     622:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     624:	77 9b       	sbis	0x0e, 7	; 14
     626:	fe cf       	rjmp	.-4      	; 0x624 <enc28j60Init+0xcc>
        // write data
        SPDR = data;
     628:	82 e3       	ldi	r24, 0x32	; 50
     62a:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     62c:	77 9b       	sbis	0x0e, 7	; 14
     62e:	fe cf       	rjmp	.-4      	; 0x62c <enc28j60Init+0xd4>
        CSPASSIVE;
     630:	c4 9a       	sbi	0x18, 4	; 24
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
	// enable automatic padding to 60bytes and CRC operations
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
	// set inter-frame gap (non-back-to-back)
	enc28j60Write(MAIPGL, 0x12);
     632:	86 ec       	ldi	r24, 0xC6	; 198
     634:	62 e1       	ldi	r22, 0x12	; 18
     636:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	enc28j60Write(MAIPGH, 0x0C);
     63a:	87 ec       	ldi	r24, 0xC7	; 199
     63c:	6c e0       	ldi	r22, 0x0C	; 12
     63e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
     642:	84 ec       	ldi	r24, 0xC4	; 196
     644:	62 e1       	ldi	r22, 0x12	; 18
     646:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	// Set the maximum packet size which the controller will accept
        // Do not send packets longer than MAX_FRAMELEN:
	enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
     64a:	8a ec       	ldi	r24, 0xCA	; 202
     64c:	6c ed       	ldi	r22, 0xDC	; 220
     64e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
     652:	8b ec       	ldi	r24, 0xCB	; 203
     654:	65 e0       	ldi	r22, 0x05	; 5
     656:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	// do bank 3 stuff
        // write MAC address
        // NOTE: MAC address in ENC28J60 is byte-backward
        enc28j60Write(MAADR5, macaddr[0]);
     65a:	84 ee       	ldi	r24, 0xE4	; 228
     65c:	68 81       	ld	r22, Y
     65e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
        enc28j60Write(MAADR4, macaddr[1]);
     662:	85 ee       	ldi	r24, 0xE5	; 229
     664:	69 81       	ldd	r22, Y+1	; 0x01
     666:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
        enc28j60Write(MAADR3, macaddr[2]);
     66a:	82 ee       	ldi	r24, 0xE2	; 226
     66c:	6a 81       	ldd	r22, Y+2	; 0x02
     66e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
        enc28j60Write(MAADR2, macaddr[3]);
     672:	83 ee       	ldi	r24, 0xE3	; 227
     674:	6b 81       	ldd	r22, Y+3	; 0x03
     676:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
        enc28j60Write(MAADR1, macaddr[4]);
     67a:	80 ee       	ldi	r24, 0xE0	; 224
     67c:	6c 81       	ldd	r22, Y+4	; 0x04
     67e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
        enc28j60Write(MAADR0, macaddr[5]);
     682:	81 ee       	ldi	r24, 0xE1	; 225
     684:	6d 81       	ldd	r22, Y+5	; 0x05
     686:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
     68a:	80 e1       	ldi	r24, 0x10	; 16
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	71 e0       	ldi	r23, 0x01	; 1
     690:	0e 94 88 02 	call	0x510	; 0x510 <enc28j60PhyWrite>
	// switch to bank 0
	enc28j60SetBank(ECON1);
     694:	8f e1       	ldi	r24, 0x1F	; 31
     696:	0e 94 2b 02 	call	0x456	; 0x456 <enc28j60SetBank>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     69a:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     69c:	8b e9       	ldi	r24, 0x9B	; 155
     69e:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     6a0:	77 9b       	sbis	0x0e, 7	; 14
     6a2:	fe cf       	rjmp	.-4      	; 0x6a0 <enc28j60Init+0x148>
        // write data
        SPDR = data;
     6a4:	80 ec       	ldi	r24, 0xC0	; 192
     6a6:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     6a8:	77 9b       	sbis	0x0e, 7	; 14
     6aa:	fe cf       	rjmp	.-4      	; 0x6a8 <enc28j60Init+0x150>
        CSPASSIVE;
     6ac:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     6ae:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     6b0:	8f e9       	ldi	r24, 0x9F	; 159
     6b2:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     6b4:	77 9b       	sbis	0x0e, 7	; 14
     6b6:	fe cf       	rjmp	.-4      	; 0x6b4 <enc28j60Init+0x15c>
        // write data
        SPDR = data;
     6b8:	84 e0       	ldi	r24, 0x04	; 4
     6ba:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     6bc:	77 9b       	sbis	0x0e, 7	; 14
     6be:	fe cf       	rjmp	.-4      	; 0x6bc <enc28j60Init+0x164>
        CSPASSIVE;
     6c0:	c4 9a       	sbi	0x18, 4	; 24
	enc28j60SetBank(ECON1);
	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <enc28j60getrev>:

// read the revision of the chip:
uint8_t enc28j60getrev(void)
{
	return(enc28j60Read(EREVID));
     6c8:	82 e7       	ldi	r24, 0x72	; 114
     6ca:	0e 94 52 02 	call	0x4a4	; 0x4a4 <enc28j60Read>
}
     6ce:	08 95       	ret

000006d0 <enc28j60linkup>:

// link status
uint8_t enc28j60linkup(void)
{
        // bit 10 (= bit 3 in upper reg)
	return(enc28j60PhyReadH(PHSTAT2) && 4);
     6d0:	81 e1       	ldi	r24, 0x11	; 17
     6d2:	0e 94 6f 02 	call	0x4de	; 0x4de <enc28j60PhyReadH>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	89 2b       	or	r24, r25
     6da:	09 f0       	breq	.+2      	; 0x6de <enc28j60linkup+0xe>
     6dc:	21 e0       	ldi	r18, 0x01	; 1
}
     6de:	82 2f       	mov	r24, r18
     6e0:	08 95       	ret

000006e2 <enc28j60PacketSend>:

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
     6e2:	df 92       	push	r13
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	ec 01       	movw	r28, r24
     6f2:	8b 01       	movw	r16, r22

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     6f4:	3f e9       	ldi	r19, 0x9F	; 159
     6f6:	d3 2e       	mov	r13, r19
        waitspi();
        // write data
        SPDR = data;
     6f8:	20 e8       	ldi	r18, 0x80	; 128
     6fa:	f2 2e       	mov	r15, r18

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     6fc:	9f eb       	ldi	r25, 0xBF	; 191
     6fe:	e9 2e       	mov	r14, r25
     700:	15 c0       	rjmp	.+42     	; 0x72c <enc28j60PacketSend+0x4a>
{
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
        {
                // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
                if( (enc28j60Read(EIR) & EIR_TXERIF) ) {
     702:	8c e1       	ldi	r24, 0x1C	; 28
     704:	0e 94 52 02 	call	0x4a4	; 0x4a4 <enc28j60Read>
     708:	81 ff       	sbrs	r24, 1
     70a:	10 c0       	rjmp	.+32     	; 0x72c <enc28j60PacketSend+0x4a>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     70c:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     70e:	df b8       	out	0x0f, r13	; 15
        waitspi();
     710:	77 9b       	sbis	0x0e, 7	; 14
     712:	fe cf       	rjmp	.-4      	; 0x710 <enc28j60PacketSend+0x2e>
        // write data
        SPDR = data;
     714:	ff b8       	out	0x0f, r15	; 15
        waitspi();
     716:	77 9b       	sbis	0x0e, 7	; 14
     718:	fe cf       	rjmp	.-4      	; 0x716 <enc28j60PacketSend+0x34>
        CSPASSIVE;
     71a:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     71c:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     71e:	ef b8       	out	0x0f, r14	; 15
        waitspi();
     720:	77 9b       	sbis	0x0e, 7	; 14
     722:	fe cf       	rjmp	.-4      	; 0x720 <enc28j60PacketSend+0x3e>
        // write data
        SPDR = data;
     724:	ff b8       	out	0x0f, r15	; 15
        waitspi();
     726:	77 9b       	sbis	0x0e, 7	; 14
     728:	fe cf       	rjmp	.-4      	; 0x726 <enc28j60PacketSend+0x44>
        CSPASSIVE;
     72a:	c4 9a       	sbi	0x18, 4	; 24
}

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	6f e1       	ldi	r22, 0x1F	; 31
     730:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enc28j60ReadOp>
     734:	83 fd       	sbrc	r24, 3
     736:	e5 cf       	rjmp	.-54     	; 0x702 <enc28j60PacketSend+0x20>
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
                }
        }
	// Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	6f ef       	ldi	r22, 0xFF	; 255
     73c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
     740:	83 e0       	ldi	r24, 0x03	; 3
     742:	69 e1       	ldi	r22, 0x19	; 25
     744:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
     748:	ce 01       	movw	r24, r28
     74a:	81 50       	subi	r24, 0x01	; 1
     74c:	68 2f       	mov	r22, r24
     74e:	86 e0       	ldi	r24, 0x06	; 6
     750:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
     754:	9e 01       	movw	r18, r28
     756:	21 50       	subi	r18, 0x01	; 1
     758:	36 4e       	sbci	r19, 0xE6	; 230
     75a:	87 e0       	ldi	r24, 0x07	; 7
     75c:	63 2f       	mov	r22, r19
     75e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     762:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     764:	8a e7       	ldi	r24, 0x7A	; 122
     766:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     768:	77 9b       	sbis	0x0e, 7	; 14
     76a:	fe cf       	rjmp	.-4      	; 0x768 <enc28j60PacketSend+0x86>
        // write data
        SPDR = data;
     76c:	1f b8       	out	0x0f, r1	; 15
        waitspi();
     76e:	77 9b       	sbis	0x0e, 7	; 14
     770:	fe cf       	rjmp	.-4      	; 0x76e <enc28j60PacketSend+0x8c>
        CSPASSIVE;
     772:	c4 9a       	sbi	0x18, 4	; 24
        CSPASSIVE;
}

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
        CSACTIVE;
     774:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
     776:	8a e7       	ldi	r24, 0x7A	; 122
     778:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     77a:	77 9b       	sbis	0x0e, 7	; 14
     77c:	fe cf       	rjmp	.-4      	; 0x77a <enc28j60PacketSend+0x98>
     77e:	08 c0       	rjmp	.+16     	; 0x790 <enc28j60PacketSend+0xae>
        while(len)
        {
                len--;
                // write data
                SPDR = *data;
     780:	f8 01       	movw	r30, r16
     782:	80 81       	ld	r24, Z
     784:	8f b9       	out	0x0f, r24	; 15
                data++;
                waitspi();
     786:	77 9b       	sbis	0x0e, 7	; 14
     788:	fe cf       	rjmp	.-4      	; 0x786 <enc28j60PacketSend+0xa4>
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     78a:	21 97       	sbiw	r28, 0x01	; 1
                // write data
                SPDR = *data;
                data++;
     78c:	0f 5f       	subi	r16, 0xFF	; 255
     78e:	1f 4f       	sbci	r17, 0xFF	; 255
{
        CSACTIVE;
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
     790:	20 97       	sbiw	r28, 0x00	; 0
     792:	b1 f7       	brne	.-20     	; 0x780 <enc28j60PacketSend+0x9e>
                // write data
                SPDR = *data;
                data++;
                waitspi();
        }
        CSPASSIVE;
     794:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     796:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     798:	8f e9       	ldi	r24, 0x9F	; 159
     79a:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     79c:	77 9b       	sbis	0x0e, 7	; 14
     79e:	fe cf       	rjmp	.-4      	; 0x79c <enc28j60PacketSend+0xba>
        // write data
        SPDR = data;
     7a0:	88 e0       	ldi	r24, 0x08	; 8
     7a2:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     7a4:	77 9b       	sbis	0x0e, 7	; 14
     7a6:	fe cf       	rjmp	.-4      	; 0x7a4 <enc28j60PacketSend+0xc2>
        CSPASSIVE;
     7a8:	c4 9a       	sbi	0x18, 4	; 24
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
}
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	df 90       	pop	r13
     7b8:	08 95       	ret

000007ba <enc28j60hasRxPkt>:

// just probe if there might be a packet
uint8_t enc28j60hasRxPkt(void)
{
	if( enc28j60Read(EPKTCNT) ==0 ){
     7ba:	89 e3       	ldi	r24, 0x39	; 57
     7bc:	0e 94 52 02 	call	0x4a4	; 0x4a4 <enc28j60Read>
     7c0:	81 11       	cpse	r24, r1
     7c2:	81 e0       	ldi	r24, 0x01	; 1
		return(0);
        }
        return(1);
}
     7c4:	08 95       	ret

000007c6 <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
     7c6:	8f 92       	push	r8
     7c8:	9f 92       	push	r9
     7ca:	af 92       	push	r10
     7cc:	bf 92       	push	r11
     7ce:	cf 92       	push	r12
     7d0:	df 92       	push	r13
     7d2:	ef 92       	push	r14
     7d4:	ff 92       	push	r15
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	5c 01       	movw	r10, r24
     7e0:	4b 01       	movw	r8, r22
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
     7e2:	89 e3       	ldi	r24, 0x39	; 57
     7e4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <enc28j60Read>
     7e8:	88 23       	and	r24, r24
     7ea:	19 f4       	brne	.+6      	; 0x7f2 <enc28j60PacketReceive+0x2c>
     7ec:	c0 e0       	ldi	r28, 0x00	; 0
     7ee:	d0 e0       	ldi	r29, 0x00	; 0
     7f0:	76 c0       	rjmp	.+236    	; 0x8de <enc28j60PacketReceive+0x118>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
     7f2:	60 91 ad 00 	lds	r22, 0x00AD
     7f6:	10 91 ae 00 	lds	r17, 0x00AE
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	61 2f       	mov	r22, r17
     804:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     808:	8a e3       	ldi	r24, 0x3A	; 58
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enc28j60ReadOp>
     810:	18 2f       	mov	r17, r24
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     812:	8a e3       	ldi	r24, 0x3A	; 58
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enc28j60ReadOp>
     81a:	38 2f       	mov	r19, r24
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	e1 2e       	mov	r14, r17
     820:	ff 24       	eor	r15, r15
     822:	e2 2a       	or	r14, r18
     824:	f3 2a       	or	r15, r19
     826:	f0 92 ae 00 	sts	0x00AE, r15
     82a:	e0 92 ad 00 	sts	0x00AD, r14
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     82e:	8a e3       	ldi	r24, 0x3A	; 58
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enc28j60ReadOp>
     836:	c8 2e       	mov	r12, r24
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     838:	8a e3       	ldi	r24, 0x3A	; 58
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enc28j60ReadOp>
     840:	d8 2e       	mov	r13, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     842:	8a e3       	ldi	r24, 0x3A	; 58
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enc28j60ReadOp>
     84a:	08 2f       	mov	r16, r24
     84c:	10 e0       	ldi	r17, 0x00	; 0
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
     84e:	8a e3       	ldi	r24, 0x3A	; 58
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enc28j60ReadOp>
                len=maxlen-1;
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
     856:	38 2f       	mov	r19, r24
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	20 2b       	or	r18, r16
     85c:	31 2b       	or	r19, r17
     85e:	27 fd       	sbrc	r18, 7
     860:	03 c0       	rjmp	.+6      	; 0x868 <enc28j60PacketReceive+0xa2>
     862:	c0 e0       	ldi	r28, 0x00	; 0
     864:	d0 e0       	ldi	r29, 0x00	; 0
     866:	11 c0       	rjmp	.+34     	; 0x88a <enc28j60PacketReceive+0xc4>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     868:	cc 2d       	mov	r28, r12
     86a:	d0 e0       	ldi	r29, 0x00	; 0
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     86c:	9d 2d       	mov	r25, r13
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	c8 2b       	or	r28, r24
     872:	d9 2b       	or	r29, r25
        len-=4; //remove the CRC count
     874:	c5 01       	movw	r24, r10
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	24 97       	sbiw	r28, 0x04	; 4
     87a:	8c 17       	cp	r24, r28
     87c:	9d 07       	cpc	r25, r29
     87e:	08 f4       	brcc	.+2      	; 0x882 <enc28j60PacketReceive+0xbc>
     880:	ec 01       	movw	r28, r24
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
     882:	ce 01       	movw	r24, r28
     884:	b4 01       	movw	r22, r8
     886:	0e 94 fe 01 	call	0x3fc	; 0x3fc <enc28j60ReadBuffer>
        }
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
     88a:	de 2c       	mov	r13, r14
     88c:	8c e0       	ldi	r24, 0x0C	; 12
     88e:	6e 2d       	mov	r22, r14
     890:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
	enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
     894:	8d e0       	ldi	r24, 0x0D	; 13
     896:	6f 2d       	mov	r22, r15
     898:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
        // Move the RX read pointer to the start of the next received packet
        // This frees the memory we just read out.
        // However, compensate for the errata point 13, rev B4: enver write an even address!
        if ((gNextPacketPtr - 1 < RXSTART_INIT)
     89c:	87 01       	movw	r16, r14
     89e:	01 50       	subi	r16, 0x01	; 1
     8a0:	10 40       	sbci	r17, 0x00	; 0
     8a2:	89 e1       	ldi	r24, 0x19	; 25
     8a4:	0f 3f       	cpi	r16, 0xFF	; 255
     8a6:	18 07       	cpc	r17, r24
     8a8:	38 f0       	brcs	.+14     	; 0x8b8 <enc28j60PacketReceive+0xf2>
                || (gNextPacketPtr -1 > RXSTOP_INIT)) {
                enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
     8aa:	8c e0       	ldi	r24, 0x0C	; 12
     8ac:	6e ef       	ldi	r22, 0xFE	; 254
     8ae:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
                enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
     8b2:	8d e0       	ldi	r24, 0x0D	; 13
     8b4:	69 e1       	ldi	r22, 0x19	; 25
     8b6:	07 c0       	rjmp	.+14     	; 0x8c6 <enc28j60PacketReceive+0x100>
        } else {
                enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
     8b8:	da 94       	dec	r13
     8ba:	8c e0       	ldi	r24, 0x0C	; 12
     8bc:	6d 2d       	mov	r22, r13
     8be:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
     8c2:	8d e0       	ldi	r24, 0x0D	; 13
     8c4:	61 2f       	mov	r22, r17
     8c6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     8ca:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     8cc:	8e e9       	ldi	r24, 0x9E	; 158
     8ce:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     8d0:	77 9b       	sbis	0x0e, 7	; 14
     8d2:	fe cf       	rjmp	.-4      	; 0x8d0 <enc28j60PacketReceive+0x10a>
        // write data
        SPDR = data;
     8d4:	80 e4       	ldi	r24, 0x40	; 64
     8d6:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     8d8:	77 9b       	sbis	0x0e, 7	; 14
     8da:	fe cf       	rjmp	.-4      	; 0x8d8 <enc28j60PacketReceive+0x112>
        CSPASSIVE;
     8dc:	c4 9a       	sbi	0x18, 4	; 24
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
}
     8de:	ce 01       	movw	r24, r28
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	1f 91       	pop	r17
     8e6:	0f 91       	pop	r16
     8e8:	ff 90       	pop	r15
     8ea:	ef 90       	pop	r14
     8ec:	df 90       	pop	r13
     8ee:	cf 90       	pop	r12
     8f0:	bf 90       	pop	r11
     8f2:	af 90       	pop	r10
     8f4:	9f 90       	pop	r9
     8f6:	8f 90       	pop	r8
     8f8:	08 95       	ret

000008fa <checksum>:
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
     8fa:	cf 92       	push	r12
     8fc:	df 92       	push	r13
     8fe:	ef 92       	push	r14
     900:	ff 92       	push	r15
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	6c 01       	movw	r12, r24
        uint32_t sum = 0;

        //if(type==0){
        //        // do not add anything
        //}
        if(type==1){
     90c:	41 30       	cpi	r20, 0x01	; 1
     90e:	81 f4       	brne	.+32     	; 0x930 <checksum+0x36>
                sum+=IP_PROTO_UDP_V; // protocol udp
                // the length here is the length of udp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
     910:	68 50       	subi	r22, 0x08	; 8
     912:	70 40       	sbci	r23, 0x00	; 0
     914:	7b 01       	movw	r14, r22
     916:	00 e0       	ldi	r16, 0x00	; 0
     918:	10 e0       	ldi	r17, 0x00	; 0
     91a:	68 5f       	subi	r22, 0xF8	; 248
     91c:	7f 4f       	sbci	r23, 0xFF	; 255
     91e:	21 e1       	ldi	r18, 0x11	; 17
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	40 e0       	ldi	r20, 0x00	; 0
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	e2 0e       	add	r14, r18
     928:	f3 1e       	adc	r15, r19
     92a:	04 1f       	adc	r16, r20
     92c:	15 1f       	adc	r17, r21
     92e:	15 c0       	rjmp	.+42     	; 0x95a <checksum+0x60>
        }
        if(type==2){
     930:	42 30       	cpi	r20, 0x02	; 2
     932:	21 f0       	breq	.+8      	; 0x93c <checksum+0x42>
     934:	ee 24       	eor	r14, r14
     936:	ff 24       	eor	r15, r15
     938:	87 01       	movw	r16, r14
     93a:	0f c0       	rjmp	.+30     	; 0x95a <checksum+0x60>
                sum+=IP_PROTO_TCP_V; 
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
     93c:	68 50       	subi	r22, 0x08	; 8
     93e:	70 40       	sbci	r23, 0x00	; 0
     940:	7b 01       	movw	r14, r22
     942:	00 e0       	ldi	r16, 0x00	; 0
     944:	10 e0       	ldi	r17, 0x00	; 0
     946:	68 5f       	subi	r22, 0xF8	; 248
     948:	7f 4f       	sbci	r23, 0xFF	; 255
     94a:	86 e0       	ldi	r24, 0x06	; 6
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	a0 e0       	ldi	r26, 0x00	; 0
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	e8 0e       	add	r14, r24
     954:	f9 1e       	adc	r15, r25
     956:	0a 1f       	adc	r16, r26
     958:	1b 1f       	adc	r17, r27
     95a:	f6 01       	movw	r30, r12
     95c:	eb 01       	movw	r28, r22
     95e:	16 c0       	rjmp	.+44     	; 0x98c <checksum+0x92>
        }
        // build the sum of 16bit words
        while(len >1){
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
     960:	80 81       	ld	r24, Z
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 e0       	ldi	r26, 0x00	; 0
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	ba 2f       	mov	r27, r26
     96a:	a9 2f       	mov	r26, r25
     96c:	98 2f       	mov	r25, r24
     96e:	88 27       	eor	r24, r24
     970:	21 81       	ldd	r18, Z+1	; 0x01
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	40 e0       	ldi	r20, 0x00	; 0
     976:	50 e0       	ldi	r21, 0x00	; 0
     978:	82 2b       	or	r24, r18
     97a:	93 2b       	or	r25, r19
     97c:	a4 2b       	or	r26, r20
     97e:	b5 2b       	or	r27, r21
     980:	e8 0e       	add	r14, r24
     982:	f9 1e       	adc	r15, r25
     984:	0a 1f       	adc	r16, r26
     986:	1b 1f       	adc	r17, r27
                buf+=2;
     988:	32 96       	adiw	r30, 0x02	; 2
                len-=2;
     98a:	22 97       	sbiw	r28, 0x02	; 2
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
        }
        // build the sum of 16bit words
        while(len >1){
     98c:	c2 30       	cpi	r28, 0x02	; 2
     98e:	d1 05       	cpc	r29, r1
     990:	38 f7       	brcc	.-50     	; 0x960 <checksum+0x66>
     992:	fb 01       	movw	r30, r22
     994:	ee 7f       	andi	r30, 0xFE	; 254
     996:	ec 0d       	add	r30, r12
     998:	fd 1d       	adc	r31, r13
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
                buf+=2;
                len-=2;
        }
        // if there is a byte left then add it (padded with zero)
        if (len){
     99a:	60 ff       	sbrs	r22, 0
     99c:	15 c0       	rjmp	.+42     	; 0x9c8 <checksum+0xce>
                sum += ((uint32_t)(0xFF & *buf))<<8;
     99e:	80 81       	ld	r24, Z
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	a0 e0       	ldi	r26, 0x00	; 0
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	ba 2f       	mov	r27, r26
     9a8:	a9 2f       	mov	r26, r25
     9aa:	98 2f       	mov	r25, r24
     9ac:	88 27       	eor	r24, r24
     9ae:	08 c0       	rjmp	.+16     	; 0x9c0 <checksum+0xc6>
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
                sum = (sum & 0xFFFF)+(sum >> 16);
     9b0:	2f ef       	ldi	r18, 0xFF	; 255
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	e2 22       	and	r14, r18
     9ba:	f3 22       	and	r15, r19
     9bc:	04 23       	and	r16, r20
     9be:	15 23       	and	r17, r21
     9c0:	e8 0e       	add	r14, r24
     9c2:	f9 1e       	adc	r15, r25
     9c4:	0a 1f       	adc	r16, r26
     9c6:	1b 1f       	adc	r17, r27
        if (len){
                sum += ((uint32_t)(0xFF & *buf))<<8;
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
     9c8:	c8 01       	movw	r24, r16
     9ca:	aa 27       	eor	r26, r26
     9cc:	bb 27       	eor	r27, r27
     9ce:	00 97       	sbiw	r24, 0x00	; 0
     9d0:	a1 05       	cpc	r26, r1
     9d2:	b1 05       	cpc	r27, r1
     9d4:	69 f7       	brne	.-38     	; 0x9b0 <checksum+0xb6>
     9d6:	97 01       	movw	r18, r14
     9d8:	20 95       	com	r18
     9da:	30 95       	com	r19
                sum = (sum & 0xFFFF)+(sum >> 16);
        }
        // build 1's complement:
        return( (uint16_t) sum ^ 0xFFFF);
}
     9dc:	c9 01       	movw	r24, r18
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	df 90       	pop	r13
     9ec:	cf 90       	pop	r12
     9ee:	08 95       	ret

000009f0 <init_ip_arp_udp_tcp>:

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	ec 01       	movw	r28, r24
        uint8_t i=0;
        wwwport=wwwp;
     9f6:	40 93 a5 00 	sts	0x00A5, r20
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
        while(i<4){
                ipaddr[i]=myip[i];
     9fe:	f9 01       	movw	r30, r18
     a00:	eb 54       	subi	r30, 0x4B	; 75
     a02:	ff 4f       	sbci	r31, 0xFF	; 255
     a04:	db 01       	movw	r26, r22
     a06:	a2 0f       	add	r26, r18
     a08:	b3 1f       	adc	r27, r19
     a0a:	8c 91       	ld	r24, X
     a0c:	80 83       	st	Z, r24
     a0e:	2f 5f       	subi	r18, 0xFF	; 255
     a10:	3f 4f       	sbci	r19, 0xFF	; 255

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
        uint8_t i=0;
        wwwport=wwwp;
        while(i<4){
     a12:	24 30       	cpi	r18, 0x04	; 4
     a14:	31 05       	cpc	r19, r1
     a16:	99 f7       	brne	.-26     	; 0x9fe <init_ip_arp_udp_tcp+0xe>
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
                macaddr[i]=mymac[i];
     a1c:	f9 01       	movw	r30, r18
     a1e:	e1 55       	subi	r30, 0x51	; 81
     a20:	ff 4f       	sbci	r31, 0xFF	; 255
     a22:	de 01       	movw	r26, r28
     a24:	a2 0f       	add	r26, r18
     a26:	b3 1f       	adc	r27, r19
     a28:	8c 91       	ld	r24, X
     a2a:	80 83       	st	Z, r24
     a2c:	2f 5f       	subi	r18, 0xFF	; 255
     a2e:	3f 4f       	sbci	r19, 0xFF	; 255
        while(i<4){
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
     a30:	26 30       	cpi	r18, 0x06	; 6
     a32:	31 05       	cpc	r19, r1
     a34:	99 f7       	brne	.-26     	; 0xa1c <init_ip_arp_udp_tcp+0x2c>
                macaddr[i]=mymac[i];
                i++;
        }
}
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	08 95       	ret

00000a3c <eth_type_is_arp_and_my_ip>:

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
     a3c:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //  
        if (len<41){
     a3e:	69 32       	cpi	r22, 0x29	; 41
     a40:	71 05       	cpc	r23, r1
     a42:	b0 f0       	brcs	.+44     	; 0xa70 <eth_type_is_arp_and_my_ip+0x34>
                return(0);
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
     a44:	84 85       	ldd	r24, Z+12	; 0x0c
     a46:	88 30       	cpi	r24, 0x08	; 8
     a48:	99 f4       	brne	.+38     	; 0xa70 <eth_type_is_arp_and_my_ip+0x34>
     a4a:	85 85       	ldd	r24, Z+13	; 0x0d
     a4c:	86 30       	cpi	r24, 0x06	; 6
     a4e:	81 f4       	brne	.+32     	; 0xa70 <eth_type_is_arp_and_my_ip+0x34>
     a50:	df 01       	movw	r26, r30
     a52:	96 96       	adiw	r26, 0x26	; 38
     a54:	e5 eb       	ldi	r30, 0xB5	; 181
     a56:	f0 e0       	ldi	r31, 0x00	; 0
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
     a58:	9c 91       	ld	r25, X
     a5a:	80 81       	ld	r24, Z
     a5c:	98 17       	cp	r25, r24
     a5e:	41 f4       	brne	.+16     	; 0xa70 <eth_type_is_arp_and_my_ip+0x34>
     a60:	11 96       	adiw	r26, 0x01	; 1
     a62:	31 96       	adiw	r30, 0x01	; 1
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	e9 3b       	cpi	r30, 0xB9	; 185
     a68:	f8 07       	cpc	r31, r24
     a6a:	b1 f7       	brne	.-20     	; 0xa58 <eth_type_is_arp_and_my_ip+0x1c>
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	08 95       	ret
     a70:	80 e0       	ldi	r24, 0x00	; 0
                        return(0);
                }
                i++;
        }
        return(1);
}
     a72:	08 95       	ret

00000a74 <eth_type_is_ip_and_my_ip>:

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
     a74:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
     a76:	6a 32       	cpi	r22, 0x2A	; 42
     a78:	71 05       	cpc	r23, r1
     a7a:	d0 f0       	brcs	.+52     	; 0xab0 <eth_type_is_ip_and_my_ip+0x3c>
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
     a7c:	84 85       	ldd	r24, Z+12	; 0x0c
     a7e:	88 30       	cpi	r24, 0x08	; 8
     a80:	b9 f4       	brne	.+46     	; 0xab0 <eth_type_is_ip_and_my_ip+0x3c>
     a82:	85 85       	ldd	r24, Z+13	; 0x0d
     a84:	88 23       	and	r24, r24
     a86:	a1 f4       	brne	.+40     	; 0xab0 <eth_type_is_ip_and_my_ip+0x3c>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
                return(0);
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
     a88:	86 85       	ldd	r24, Z+14	; 0x0e
     a8a:	85 34       	cpi	r24, 0x45	; 69
     a8c:	89 f4       	brne	.+34     	; 0xab0 <eth_type_is_ip_and_my_ip+0x3c>
     a8e:	df 01       	movw	r26, r30
     a90:	e5 eb       	ldi	r30, 0xB5	; 181
     a92:	f0 e0       	ldi	r31, 0x00	; 0
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
                if(buf[IP_DST_P+i]!=ipaddr[i]){
     a94:	5e 96       	adiw	r26, 0x1e	; 30
     a96:	9c 91       	ld	r25, X
     a98:	5e 97       	sbiw	r26, 0x1e	; 30
     a9a:	80 81       	ld	r24, Z
     a9c:	98 17       	cp	r25, r24
     a9e:	41 f4       	brne	.+16     	; 0xab0 <eth_type_is_ip_and_my_ip+0x3c>
     aa0:	11 96       	adiw	r26, 0x01	; 1
     aa2:	31 96       	adiw	r30, 0x01	; 1
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	e9 3b       	cpi	r30, 0xB9	; 185
     aa8:	f8 07       	cpc	r31, r24
     aaa:	a1 f7       	brne	.-24     	; 0xa94 <eth_type_is_ip_and_my_ip+0x20>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	08 95       	ret
     ab0:	80 e0       	ldi	r24, 0x00	; 0
                        return(0);
                }
                i++;
        }
        return(1);
}
     ab2:	08 95       	ret

00000ab4 <make_eth>:
// make a return eth header from a received eth packet
void make_eth(uint8_t *buf)
{
     ab4:	fc 01       	movw	r30, r24
     ab6:	af ea       	ldi	r26, 0xAF	; 175
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     aba:	86 81       	ldd	r24, Z+6	; 0x06
     abc:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     abe:	8d 91       	ld	r24, X+
     ac0:	86 83       	std	Z+6, r24	; 0x06
     ac2:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	a5 3b       	cpi	r26, 0xB5	; 181
     ac8:	b8 07       	cpc	r27, r24
     aca:	b9 f7       	brne	.-18     	; 0xaba <make_eth+0x6>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
}
     acc:	08 95       	ret

00000ace <fill_ip_hdr_checksum>:
void fill_ip_hdr_checksum(uint8_t *buf)
{
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	8c 01       	movw	r16, r24
        uint16_t ck;
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
     ad4:	fc 01       	movw	r30, r24
     ad6:	10 8e       	std	Z+24, r1	; 0x18
        buf[IP_CHECKSUM_P+1]=0;
     ad8:	11 8e       	std	Z+25, r1	; 0x19
        buf[IP_FLAGS_P]=0x40; // don't fragment
     ada:	80 e4       	ldi	r24, 0x40	; 64
     adc:	84 8b       	std	Z+20, r24	; 0x14
        buf[IP_FLAGS_P+1]=0;  // fragement offset
     ade:	15 8a       	std	Z+21, r1	; 0x15
        buf[IP_TTL_P]=64; // ttl
     ae0:	86 8b       	std	Z+22, r24	; 0x16
        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
     ae2:	c8 01       	movw	r24, r16
     ae4:	0e 96       	adiw	r24, 0x0e	; 14
     ae6:	64 e1       	ldi	r22, 0x14	; 20
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	40 e0       	ldi	r20, 0x00	; 0
     aec:	0e 94 7d 04 	call	0x8fa	; 0x8fa <checksum>
        buf[IP_CHECKSUM_P]=ck>>8;
     af0:	f8 01       	movw	r30, r16
     af2:	90 8f       	std	Z+24, r25	; 0x18
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
     af4:	81 8f       	std	Z+25, r24	; 0x19
}
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	08 95       	ret

00000afc <make_ip>:

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
     afc:	ac 01       	movw	r20, r24
     afe:	fc 01       	movw	r30, r24
     b00:	a5 eb       	ldi	r26, 0xB5	; 181
     b02:	b0 e0       	ldi	r27, 0x00	; 0
        uint8_t i=0;
        while(i<4){
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
     b04:	82 8d       	ldd	r24, Z+26	; 0x1a
     b06:	86 8f       	std	Z+30, r24	; 0x1e
                buf[IP_SRC_P+i]=ipaddr[i];
     b08:	8d 91       	ld	r24, X+
     b0a:	82 8f       	std	Z+26, r24	; 0x1a
     b0c:	31 96       	adiw	r30, 0x01	; 1

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	a9 3b       	cpi	r26, 0xB9	; 185
     b12:	b8 07       	cpc	r27, r24
     b14:	b9 f7       	brne	.-18     	; 0xb04 <make_ip+0x8>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        fill_ip_hdr_checksum(buf);
     b16:	ca 01       	movw	r24, r20
     b18:	0e 94 67 05 	call	0xace	; 0xace <fill_ip_hdr_checksum>
}
     b1c:	08 95       	ret

00000b1e <make_tcphead>:
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t mss,uint8_t cp_seq)
{
     b1e:	fc 01       	movw	r30, r24
        uint8_t i=0;
        uint8_t tseq;
        while(i<2){
                buf[TCP_DST_PORT_H_P+i]=buf[TCP_SRC_PORT_H_P+i];
     b20:	82 a1       	ldd	r24, Z+34	; 0x22
     b22:	84 a3       	std	Z+36, r24	; 0x24
                buf[TCP_SRC_PORT_H_P+i]=0; // clear source port
     b24:	12 a2       	std	Z+34, r1	; 0x22
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t mss,uint8_t cp_seq)
{
        uint8_t i=0;
        uint8_t tseq;
        while(i<2){
                buf[TCP_DST_PORT_H_P+i]=buf[TCP_SRC_PORT_H_P+i];
     b26:	83 a1       	ldd	r24, Z+35	; 0x23
     b28:	85 a3       	std	Z+37, r24	; 0x25
                buf[TCP_SRC_PORT_H_P+i]=0; // clear source port
     b2a:	13 a2       	std	Z+35, r1	; 0x23
                i++;
        }
        // set source port  (http):
        buf[TCP_SRC_PORT_L_P]=wwwport;
     b2c:	80 91 a5 00 	lds	r24, 0x00A5
     b30:	83 a3       	std	Z+35, r24	; 0x23
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t mss,uint8_t cp_seq)
{
     b32:	df 01       	movw	r26, r30
     b34:	99 96       	adiw	r26, 0x29	; 41
     b36:	94 e0       	ldi	r25, 0x04	; 4
        buf[TCP_SRC_PORT_L_P]=wwwport;
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
                rel_ack_num=buf[TCP_SEQ_H_P+i-1]+rel_ack_num;
     b38:	8c 91       	ld	r24, X
     b3a:	68 0f       	add	r22, r24
     b3c:	71 1d       	adc	r23, r1
                tseq=buf[TCP_SEQACK_H_P+i-1];
     b3e:	14 96       	adiw	r26, 0x04	; 4
     b40:	8c 91       	ld	r24, X
     b42:	14 97       	sbiw	r26, 0x04	; 4
                buf[TCP_SEQACK_H_P+i-1]=0xff&rel_ack_num;
     b44:	14 96       	adiw	r26, 0x04	; 4
     b46:	6c 93       	st	X, r22
     b48:	14 97       	sbiw	r26, 0x04	; 4
                if (cp_seq){
     b4a:	22 23       	and	r18, r18
     b4c:	11 f0       	breq	.+4      	; 0xb52 <make_tcphead+0x34>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
     b4e:	8c 93       	st	X, r24
     b50:	01 c0       	rjmp	.+2      	; 0xb54 <make_tcphead+0x36>
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
     b52:	1c 92       	st	X, r1
                }
                rel_ack_num=rel_ack_num>>8;
                i--;
     b54:	91 50       	subi	r25, 0x01	; 1
     b56:	11 97       	sbiw	r26, 0x01	; 1
        // set source port  (http):
        buf[TCP_SRC_PORT_L_P]=wwwport;
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
     b58:	99 23       	and	r25, r25
     b5a:	19 f0       	breq	.+6      	; 0xb62 <make_tcphead+0x44>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
                }
                rel_ack_num=rel_ack_num>>8;
     b5c:	67 2f       	mov	r22, r23
     b5e:	77 27       	eor	r23, r23
     b60:	eb cf       	rjmp	.-42     	; 0xb38 <make_tcphead+0x1a>
                i--;
        }
        if (cp_seq==0){
     b62:	22 23       	and	r18, r18
     b64:	49 f4       	brne	.+18     	; 0xb78 <make_tcphead+0x5a>
                // put inital seq number
                buf[TCP_SEQ_H_P+0]= 0;
     b66:	16 a2       	std	Z+38, r1	; 0x26
                buf[TCP_SEQ_H_P+1]= 0;
     b68:	17 a2       	std	Z+39, r1	; 0x27
                // we step only the second byte, this allows us to send packts 
                // with 255 bytes or 512 (if we step the initial seqnum by 2)
                buf[TCP_SEQ_H_P+2]= seqnum; 
     b6a:	80 91 a6 00 	lds	r24, 0x00A6
     b6e:	80 a7       	std	Z+40, r24	; 0x28
                buf[TCP_SEQ_H_P+3]= 0;
     b70:	11 a6       	std	Z+41, r1	; 0x29
                // step the inititial seq num by something we will not use
                // during this tcp session:
                seqnum+=2;
     b72:	8e 5f       	subi	r24, 0xFE	; 254
     b74:	80 93 a6 00 	sts	0x00A6, r24
        }
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
     b78:	12 aa       	std	Z+50, r1	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
     b7a:	13 aa       	std	Z+51, r1	; 0x33

        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes. 
        // E.g 24 bytes: 24/4=6 => 0x60=header len field
        //buf[TCP_HEADER_LEN_P]=(((TCP_HEADER_LEN_PLAIN+4)/4)) <<4; // 0x60
        if (mss){
     b7c:	44 23       	and	r20, r20
     b7e:	51 f0       	breq	.+20     	; 0xb94 <make_tcphead+0x76>
                // the only option we set is MSS to 1408:
                // 1408 in hex is 0x580
                buf[TCP_OPTIONS_P]=2;
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	86 ab       	std	Z+54, r24	; 0x36
                buf[TCP_OPTIONS_P+1]=4;
     b84:	84 e0       	ldi	r24, 0x04	; 4
     b86:	87 ab       	std	Z+55, r24	; 0x37
                buf[TCP_OPTIONS_P+2]=0x05; 
     b88:	85 e0       	ldi	r24, 0x05	; 5
     b8a:	80 af       	std	Z+56, r24	; 0x38
                buf[TCP_OPTIONS_P+3]=0x80;
     b8c:	80 e8       	ldi	r24, 0x80	; 128
     b8e:	81 af       	std	Z+57, r24	; 0x39
                // 24 bytes:
                buf[TCP_HEADER_LEN_P]=0x60;
     b90:	80 e6       	ldi	r24, 0x60	; 96
     b92:	01 c0       	rjmp	.+2      	; 0xb96 <make_tcphead+0x78>
        }else{
                // no options:
                // 20 bytes:
                buf[TCP_HEADER_LEN_P]=0x50;
     b94:	80 e5       	ldi	r24, 0x50	; 80
     b96:	86 a7       	std	Z+46, r24	; 0x2e
     b98:	08 95       	ret

00000b9a <make_arp_answer_from_request>:
        }
}

void make_arp_answer_from_request(uint8_t *buf)
{
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	ac 01       	movw	r20, r24
     ba0:	ec 01       	movw	r28, r24
     ba2:	2f ea       	ldi	r18, 0xAF	; 175
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	fc 01       	movw	r30, r24
     ba8:	d9 01       	movw	r26, r18
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     baa:	86 81       	ldd	r24, Z+6	; 0x06
     bac:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     bae:	8d 91       	ld	r24, X+
     bb0:	86 83       	std	Z+6, r24	; 0x06
     bb2:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	a5 3b       	cpi	r26, 0xB5	; 181
     bb8:	b8 07       	cpc	r27, r24
     bba:	b9 f7       	brne	.-18     	; 0xbaa <make_arp_answer_from_request+0x10>
void make_arp_answer_from_request(uint8_t *buf)
{
        uint8_t i=0;
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
     bbc:	fa 01       	movw	r30, r20
     bbe:	14 8a       	std	Z+20, r1	; 0x14
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	85 8b       	std	Z+21, r24	; 0x15
        // fill the mac addresses:
        while(i<6){
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
     bc4:	8e 89       	ldd	r24, Y+22	; 0x16
     bc6:	88 a3       	std	Y+32, r24	; 0x20
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
     bc8:	f9 01       	movw	r30, r18
     bca:	81 91       	ld	r24, Z+
     bcc:	9f 01       	movw	r18, r30
     bce:	8e 8b       	std	Y+22, r24	; 0x16
     bd0:	21 96       	adiw	r28, 0x01	; 1
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
        // fill the mac addresses:
        while(i<6){
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	25 3b       	cpi	r18, 0xB5	; 181
     bd6:	3f 07       	cpc	r19, r31
     bd8:	a9 f7       	brne	.-22     	; 0xbc4 <make_arp_answer_from_request+0x2a>
     bda:	fa 01       	movw	r30, r20
     bdc:	7c 96       	adiw	r30, 0x1c	; 28
     bde:	a5 eb       	ldi	r26, 0xB5	; 181
     be0:	b0 e0       	ldi	r27, 0x00	; 0
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
     be2:	80 81       	ld	r24, Z
     be4:	82 87       	std	Z+10, r24	; 0x0a
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
     be6:	8d 91       	ld	r24, X+
     be8:	81 93       	st	Z+, r24
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	a9 3b       	cpi	r26, 0xB9	; 185
     bee:	b8 07       	cpc	r27, r24
     bf0:	c1 f7       	brne	.-16     	; 0xbe2 <make_arp_answer_from_request+0x48>
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf); 
     bf2:	8a e2       	ldi	r24, 0x2A	; 42
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	ba 01       	movw	r22, r20
     bf8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <enc28j60PacketSend>
}
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	08 95       	ret

00000c02 <make_echo_reply_from_request>:

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	ec 01       	movw	r28, r24
     c0c:	8b 01       	movw	r16, r22
     c0e:	fc 01       	movw	r30, r24
     c10:	af ea       	ldi	r26, 0xAF	; 175
     c12:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     c14:	86 81       	ldd	r24, Z+6	; 0x06
     c16:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     c18:	8d 91       	ld	r24, X+
     c1a:	86 83       	std	Z+6, r24	; 0x06
     c1c:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	a5 3b       	cpi	r26, 0xB5	; 181
     c22:	b8 07       	cpc	r27, r24
     c24:	b9 f7       	brne	.-18     	; 0xc14 <make_echo_reply_from_request+0x12>
}

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
        make_eth(buf);
        make_ip(buf);
     c26:	ce 01       	movw	r24, r28
     c28:	0e 94 7e 05 	call	0xafc	; 0xafc <make_ip>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
     c2c:	1a a2       	std	Y+34, r1	; 0x22
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
     c2e:	8c a1       	ldd	r24, Y+36	; 0x24
     c30:	88 3f       	cpi	r24, 0xF8	; 248
     c32:	18 f0       	brcs	.+6      	; 0xc3a <make_echo_reply_from_request+0x38>
                buf[ICMP_CHECKSUM_P+1]++;
     c34:	8d a1       	ldd	r24, Y+37	; 0x25
     c36:	8f 5f       	subi	r24, 0xFF	; 255
     c38:	8d a3       	std	Y+37, r24	; 0x25
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
     c3a:	8c a1       	ldd	r24, Y+36	; 0x24
     c3c:	88 5f       	subi	r24, 0xF8	; 248
     c3e:	8c a3       	std	Y+36, r24	; 0x24
        //
        enc28j60PacketSend(len,buf);
     c40:	c8 01       	movw	r24, r16
     c42:	be 01       	movw	r22, r28
     c44:	0e 94 71 03 	call	0x6e2	; 0x6e2 <enc28j60PacketSend>
}
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	08 95       	ret

00000c52 <make_udp_reply_from_request>:

// you can send a max of 220 bytes of data
void make_udp_reply_from_request(uint8_t *buf,char *data,uint8_t datalen,uint16_t port)
{
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	ec 01       	movw	r28, r24
     c62:	7b 01       	movw	r14, r22
     c64:	d2 2e       	mov	r13, r18
     c66:	13 2f       	mov	r17, r19
     c68:	fc 01       	movw	r30, r24
     c6a:	af ea       	ldi	r26, 0xAF	; 175
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     c6e:	86 81       	ldd	r24, Z+6	; 0x06
     c70:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     c72:	8d 91       	ld	r24, X+
     c74:	86 83       	std	Z+6, r24	; 0x06
     c76:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	a5 3b       	cpi	r26, 0xB5	; 181
     c7c:	b8 07       	cpc	r27, r24
     c7e:	b9 f7       	brne	.-18     	; 0xc6e <make_udp_reply_from_request+0x1c>
     c80:	04 2f       	mov	r16, r20
     c82:	4d 3d       	cpi	r20, 0xDD	; 221
     c84:	08 f0       	brcs	.+2      	; 0xc88 <make_udp_reply_from_request+0x36>
     c86:	0c ed       	ldi	r16, 0xDC	; 220
        make_eth(buf);
        if (datalen>220){
                datalen=220;
        }
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
     c88:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
     c8a:	04 5e       	subi	r16, 0xE4	; 228
     c8c:	09 8b       	std	Y+17, r16	; 0x11
        make_ip(buf);
     c8e:	ce 01       	movw	r24, r28
     c90:	0e 94 7e 05 	call	0xafc	; 0xafc <make_ip>
        // send to port:
        //buf[UDP_DST_PORT_H_P]=port>>8;
        //buf[UDP_DST_PORT_L_P]=port & 0xff;
        // sent to port of sender and use "port" as own source:
        buf[UDP_DST_PORT_H_P]=buf[UDP_SRC_PORT_H_P];
     c94:	8a a1       	ldd	r24, Y+34	; 0x22
     c96:	8c a3       	std	Y+36, r24	; 0x24
        buf[UDP_DST_PORT_L_P]= buf[UDP_SRC_PORT_L_P];
     c98:	8b a1       	ldd	r24, Y+35	; 0x23
     c9a:	8d a3       	std	Y+37, r24	; 0x25
        buf[UDP_SRC_PORT_H_P]=port>>8;
     c9c:	1a a3       	std	Y+34, r17	; 0x22
        buf[UDP_SRC_PORT_L_P]=port & 0xff;
     c9e:	db a2       	std	Y+35, r13	; 0x23
        // calculte the udp length:
        buf[UDP_LEN_H_P]=0;
     ca0:	1e a2       	std	Y+38, r1	; 0x26
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
     ca2:	04 51       	subi	r16, 0x14	; 20
     ca4:	0f a3       	std	Y+39, r16	; 0x27
     ca6:	08 50       	subi	r16, 0x08	; 8
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
     ca8:	18 a6       	std	Y+40, r1	; 0x28
        buf[UDP_CHECKSUM_L_P]=0;
     caa:	19 a6       	std	Y+41, r1	; 0x29
     cac:	de 01       	movw	r26, r28
     cae:	9a 96       	adiw	r26, 0x2a	; 42
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	07 c0       	rjmp	.+14     	; 0xcc4 <make_udp_reply_from_request+0x72>
        // copy the data:
        while(i<datalen){
                buf[UDP_DATA_P+i]=data[i];
     cb6:	f7 01       	movw	r30, r14
     cb8:	e2 0f       	add	r30, r18
     cba:	f3 1f       	adc	r31, r19
     cbc:	80 81       	ld	r24, Z
     cbe:	8d 93       	st	X+, r24
     cc0:	2f 5f       	subi	r18, 0xFF	; 255
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
        buf[UDP_CHECKSUM_L_P]=0;
        // copy the data:
        while(i<datalen){
     cc4:	20 17       	cp	r18, r16
     cc6:	b8 f3       	brcs	.-18     	; 0xcb6 <make_udp_reply_from_request+0x64>
                buf[UDP_DATA_P+i]=data[i];
                i++;
        }
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
     cc8:	10 e0       	ldi	r17, 0x00	; 0
     cca:	00 5f       	subi	r16, 0xF0	; 240
     ccc:	1f 4f       	sbci	r17, 0xFF	; 255
     cce:	ce 01       	movw	r24, r28
     cd0:	4a 96       	adiw	r24, 0x1a	; 26
     cd2:	b8 01       	movw	r22, r16
     cd4:	41 e0       	ldi	r20, 0x01	; 1
     cd6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <checksum>
        buf[UDP_CHECKSUM_H_P]=ck>>8;
     cda:	98 a7       	std	Y+40, r25	; 0x28
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
     cdc:	89 a7       	std	Y+41, r24	; 0x29
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
     cde:	c8 01       	movw	r24, r16
     ce0:	4a 96       	adiw	r24, 0x1a	; 26
     ce2:	be 01       	movw	r22, r28
     ce4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <enc28j60PacketSend>
}
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	08 95       	ret

00000cf8 <make_tcp_synack_from_syn>:

void make_tcp_synack_from_syn(uint8_t *buf)
{
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	ec 01       	movw	r28, r24
     cfe:	fc 01       	movw	r30, r24
     d00:	af ea       	ldi	r26, 0xAF	; 175
     d02:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     d04:	86 81       	ldd	r24, Z+6	; 0x06
     d06:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     d08:	8d 91       	ld	r24, X+
     d0a:	86 83       	std	Z+6, r24	; 0x06
     d0c:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	a5 3b       	cpi	r26, 0xB5	; 181
     d12:	b8 07       	cpc	r27, r24
     d14:	b9 f7       	brne	.-18     	; 0xd04 <make_tcp_synack_from_syn+0xc>
{
        uint16_t ck;
        make_eth(buf);
        // total length field in the IP header must be set:
        // 20 bytes IP + 24 bytes (20tcp+4tcp options)
        buf[IP_TOTLEN_H_P]=0;
     d16:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
     d18:	8c e2       	ldi	r24, 0x2C	; 44
     d1a:	89 8b       	std	Y+17, r24	; 0x11
        make_ip(buf);
     d1c:	ce 01       	movw	r24, r28
     d1e:	0e 94 7e 05 	call	0xafc	; 0xafc <make_ip>
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYNACK_V;
     d22:	82 e1       	ldi	r24, 0x12	; 18
     d24:	8f a7       	std	Y+47, r24	; 0x2f
        make_tcphead(buf,1,1,0);
     d26:	ce 01       	movw	r24, r28
     d28:	61 e0       	ldi	r22, 0x01	; 1
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	41 e0       	ldi	r20, 0x01	; 1
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	0e 94 8f 05 	call	0xb1e	; 0xb1e <make_tcphead>
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + 4 (one option: mss)
        ck=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+4,2);
     d34:	ce 01       	movw	r24, r28
     d36:	4a 96       	adiw	r24, 0x1a	; 26
     d38:	60 e2       	ldi	r22, 0x20	; 32
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	42 e0       	ldi	r20, 0x02	; 2
     d3e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <checksum>
        buf[TCP_CHECKSUM_H_P]=ck>>8;
     d42:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
     d44:	8b ab       	std	Y+51, r24	; 0x33
        // add 4 for option mss:
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN,buf);
     d46:	8a e3       	ldi	r24, 0x3A	; 58
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	be 01       	movw	r22, r28
     d4c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <enc28j60PacketSend>
}
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	08 95       	ret

00000d56 <get_tcp_data_pointer>:
// get a pointer to the start of tcp data in buf
// Returns 0 if there is no data
// You must call init_len_info once before calling this function
uint16_t get_tcp_data_pointer(void)
{
        if (info_data_len){
     d56:	80 91 a8 00 	lds	r24, 0x00A8
     d5a:	90 91 a9 00 	lds	r25, 0x00A9
     d5e:	89 2b       	or	r24, r25
     d60:	19 f4       	brne	.+6      	; 0xd68 <get_tcp_data_pointer+0x12>
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	06 c0       	rjmp	.+12     	; 0xd74 <get_tcp_data_pointer+0x1e>
                return((uint16_t)TCP_SRC_PORT_H_P+info_hdr_len);
     d68:	20 91 aa 00 	lds	r18, 0x00AA
     d6c:	30 91 ab 00 	lds	r19, 0x00AB
     d70:	2e 5d       	subi	r18, 0xDE	; 222
     d72:	3f 4f       	sbci	r19, 0xFF	; 255
        }else{
                return(0);
        }
}
     d74:	c9 01       	movw	r24, r18
     d76:	08 95       	ret

00000d78 <init_len_info>:

// do some basic length calculations and store the result in static varibales
void init_len_info(uint8_t *buf)
{
     d78:	fc 01       	movw	r30, r24
        info_data_len=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
     d7a:	90 89       	ldd	r25, Z+16	; 0x10
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	21 89       	ldd	r18, Z+17	; 0x11
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	28 2b       	or	r18, r24
     d84:	39 2b       	or	r19, r25
        info_data_len-=IP_HEADER_LEN;
        info_hdr_len=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
     d86:	86 a5       	ldd	r24, Z+46	; 0x2e
     d88:	82 95       	swap	r24
     d8a:	8f 70       	andi	r24, 0x0F	; 15
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	90 93 ab 00 	sts	0x00AB, r25
     d9a:	80 93 aa 00 	sts	0x00AA, r24
        info_data_len-=info_hdr_len;
     d9e:	24 51       	subi	r18, 0x14	; 20
     da0:	30 40       	sbci	r19, 0x00	; 0
     da2:	28 1b       	sub	r18, r24
     da4:	39 0b       	sbc	r19, r25
     da6:	30 93 a9 00 	sts	0x00A9, r19
     daa:	20 93 a8 00 	sts	0x00A8, r18
        if (info_data_len<=0){
     dae:	12 16       	cp	r1, r18
     db0:	13 06       	cpc	r1, r19
     db2:	24 f0       	brlt	.+8      	; 0xdbc <init_len_info+0x44>
                info_data_len=0;
     db4:	10 92 a9 00 	sts	0x00A9, r1
     db8:	10 92 a8 00 	sts	0x00A8, r1
     dbc:	08 95       	ret

00000dbe <fill_tcp_data_p>:

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data_p(uint8_t *buf,uint16_t pos, const prog_char *progmem_s)
{
     dbe:	6a 5c       	subi	r22, 0xCA	; 202
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	dc 01       	movw	r26, r24
     dc4:	a6 0f       	add	r26, r22
     dc6:	b7 1f       	adc	r27, r23
     dc8:	66 53       	subi	r22, 0x36	; 54
     dca:	70 40       	sbci	r23, 0x00	; 0
     dcc:	03 c0       	rjmp	.+6      	; 0xdd4 <fill_tcp_data_p+0x16>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     dce:	8d 93       	st	X+, r24
                pos++;
     dd0:	6f 5f       	subi	r22, 0xFF	; 255
     dd2:	7f 4f       	sbci	r23, 0xFF	; 255
     dd4:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     dd6:	4f 5f       	subi	r20, 0xFF	; 255
     dd8:	5f 4f       	sbci	r21, 0xFF	; 255
     dda:	84 91       	lpm	r24, Z+
     ddc:	88 23       	and	r24, r24
     dde:	b9 f7       	brne	.-18     	; 0xdce <fill_tcp_data_p+0x10>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
                pos++;
        }
        return(pos);
}
     de0:	cb 01       	movw	r24, r22
     de2:	08 95       	ret

00000de4 <fill_tcp_data>:

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
     de4:	fa 01       	movw	r30, r20
     de6:	6a 5c       	subi	r22, 0xCA	; 202
     de8:	7f 4f       	sbci	r23, 0xFF	; 255
     dea:	dc 01       	movw	r26, r24
     dec:	a6 0f       	add	r26, r22
     dee:	b7 1f       	adc	r27, r23
     df0:	66 53       	subi	r22, 0x36	; 54
     df2:	70 40       	sbci	r23, 0x00	; 0
     df4:	04 c0       	rjmp	.+8      	; 0xdfe <fill_tcp_data+0x1a>
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
     df6:	8d 93       	st	X+, r24
                pos++;
     df8:	6f 5f       	subi	r22, 0xFF	; 255
     dfa:	7f 4f       	sbci	r23, 0xFF	; 255
                s++;
     dfc:	31 96       	adiw	r30, 0x01	; 1
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
     dfe:	80 81       	ld	r24, Z
     e00:	88 23       	and	r24, r24
     e02:	c9 f7       	brne	.-14     	; 0xdf6 <fill_tcp_data+0x12>
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
                pos++;
                s++;
        }
        return(pos);
}
     e04:	cb 01       	movw	r24, r22
     e06:	08 95       	ret

00000e08 <make_tcp_ack_from_any>:

// Make just an ack packet with no tcp data inside
// This will modify the eth/ip/tcp header 
void make_tcp_ack_from_any(uint8_t *buf)
{
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	ec 01       	movw	r28, r24
     e0e:	fc 01       	movw	r30, r24
     e10:	af ea       	ldi	r26, 0xAF	; 175
     e12:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     e14:	86 81       	ldd	r24, Z+6	; 0x06
     e16:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     e18:	8d 91       	ld	r24, X+
     e1a:	86 83       	std	Z+6, r24	; 0x06
     e1c:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	a5 3b       	cpi	r26, 0xB5	; 181
     e22:	b8 07       	cpc	r27, r24
     e24:	b9 f7       	brne	.-18     	; 0xe14 <make_tcp_ack_from_any+0xc>
void make_tcp_ack_from_any(uint8_t *buf)
{
        uint16_t j;
        make_eth(buf);
        // fill the header:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V;
     e26:	80 e1       	ldi	r24, 0x10	; 16
     e28:	8f a7       	std	Y+47, r24	; 0x2f
        if (info_data_len==0){
     e2a:	60 91 a8 00 	lds	r22, 0x00A8
     e2e:	70 91 a9 00 	lds	r23, 0x00A9
     e32:	61 15       	cp	r22, r1
     e34:	71 05       	cpc	r23, r1
     e36:	21 f4       	brne	.+8      	; 0xe40 <make_tcp_ack_from_any+0x38>
                // if there is no data then we must still acknoledge one packet
                make_tcphead(buf,1,0,1); // no options
     e38:	ce 01       	movw	r24, r28
     e3a:	61 e0       	ldi	r22, 0x01	; 1
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <make_tcp_ack_from_any+0x3a>
        }else{
                make_tcphead(buf,info_data_len,0,1); // no options
     e40:	ce 01       	movw	r24, r28
     e42:	40 e0       	ldi	r20, 0x00	; 0
     e44:	21 e0       	ldi	r18, 0x01	; 1
     e46:	0e 94 8f 05 	call	0xb1e	; 0xb1e <make_tcphead>
        }

        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) 
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
        buf[IP_TOTLEN_H_P]=j>>8;
     e4a:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=j& 0xff;
     e4c:	88 e2       	ldi	r24, 0x28	; 40
     e4e:	89 8b       	std	Y+17, r24	; 0x11
        make_ip(buf);
     e50:	ce 01       	movw	r24, r28
     e52:	0e 94 7e 05 	call	0xafc	; 0xafc <make_ip>
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN,2);
     e56:	ce 01       	movw	r24, r28
     e58:	4a 96       	adiw	r24, 0x1a	; 26
     e5a:	6c e1       	ldi	r22, 0x1C	; 28
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	42 e0       	ldi	r20, 0x02	; 2
     e60:	0e 94 7d 04 	call	0x8fa	; 0x8fa <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
     e64:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
     e66:	8b ab       	std	Y+51, r24	; 0x33
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN,buf);
     e68:	86 e3       	ldi	r24, 0x36	; 54
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	be 01       	movw	r22, r28
     e6e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <enc28j60PacketSend>
}
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	08 95       	ret

00000e78 <make_tcp_ack_with_data>:
// dlen is the amount of tcp data (http data) we send in this packet
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
void make_tcp_ack_with_data(uint8_t *buf,uint16_t dlen)
{
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	8c 01       	movw	r16, r24
     e82:	7b 01       	movw	r14, r22
        uint16_t j;
        // fill the header:
        // This code requires that we send only one data packet
        // because we keep no state information. We must therefore set
        // the fin here:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V;
     e84:	89 e1       	ldi	r24, 0x19	; 25
     e86:	f8 01       	movw	r30, r16
     e88:	87 a7       	std	Z+47, r24	; 0x2f

        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) + len of data
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
     e8a:	cb 01       	movw	r24, r22
     e8c:	88 96       	adiw	r24, 0x28	; 40
        buf[IP_TOTLEN_H_P]=j>>8;
     e8e:	90 8b       	std	Z+16, r25	; 0x10
        buf[IP_TOTLEN_L_P]=j& 0xff;
     e90:	81 8b       	std	Z+17, r24	; 0x11
        fill_ip_hdr_checksum(buf);
     e92:	c8 01       	movw	r24, r16
     e94:	0e 94 67 05 	call	0xace	; 0xace <fill_ip_hdr_checksum>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
     e98:	f8 01       	movw	r30, r16
     e9a:	12 aa       	std	Z+50, r1	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
     e9c:	13 aa       	std	Z+51, r1	; 0x33
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+dlen,2);
     e9e:	8c e1       	ldi	r24, 0x1C	; 28
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	e8 0e       	add	r14, r24
     ea4:	f9 1e       	adc	r15, r25
     ea6:	c8 01       	movw	r24, r16
     ea8:	4a 96       	adiw	r24, 0x1a	; 26
     eaa:	b7 01       	movw	r22, r14
     eac:	42 e0       	ldi	r20, 0x02	; 2
     eae:	0e 94 7d 04 	call	0x8fa	; 0x8fa <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
     eb2:	f8 01       	movw	r30, r16
     eb4:	92 ab       	std	Z+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
     eb6:	83 ab       	std	Z+51, r24	; 0x33
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
     eb8:	c7 01       	movw	r24, r14
     eba:	4a 96       	adiw	r24, 0x1a	; 26
     ebc:	b8 01       	movw	r22, r16
     ebe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <enc28j60PacketSend>
}
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	ff 90       	pop	r15
     ec8:	ef 90       	pop	r14
     eca:	08 95       	ret

00000ecc <analyse_get_url>:
// takes a string of the form password/commandNumber and analyse it
// return values: -1 invalid password, otherwise command number
//                -2 no command given but password valid
//                -3 valid password, no command and no trailing "/"
int8_t analyse_get_url(char *str)
{
     ecc:	58 2f       	mov	r21, r24
     ece:	28 2f       	mov	r18, r24
     ed0:	39 2f       	mov	r19, r25
     ed2:	d9 01       	movw	r26, r18
     ed4:	05 c0       	rjmp	.+10     	; 0xee0 <analyse_get_url+0x14>
        uint8_t loop=1;
        uint8_t i=0;
        while(loop){
                if(password[i]){
                        if(*str==password[i]){
     ed6:	8e 17       	cp	r24, r30
     ed8:	11 f0       	breq	.+4      	; 0xede <analyse_get_url+0x12>
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	08 95       	ret
                                str++;
     ede:	11 96       	adiw	r26, 0x01	; 1
int8_t analyse_get_url(char *str)
{
        uint8_t loop=1;
        uint8_t i=0;
        while(loop){
                if(password[i]){
     ee0:	ea 2f       	mov	r30, r26
     ee2:	e5 1b       	sub	r30, r21
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	e2 56       	subi	r30, 0x62	; 98
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	e0 81       	ld	r30, Z
     eec:	8c 91       	ld	r24, X
     eee:	ee 23       	and	r30, r30
     ef0:	91 f7       	brne	.-28     	; 0xed6 <analyse_get_url+0xa>
                        // end of password
                        loop=0;
                }
        }
        // is is now one char after the password
        if (*str == '/'){
     ef2:	8f 32       	cpi	r24, 0x2F	; 47
     ef4:	11 f0       	breq	.+4      	; 0xefa <analyse_get_url+0x2e>
     ef6:	8d ef       	ldi	r24, 0xFD	; 253
     ef8:	08 95       	ret
                str++;
        }else{
                return(-3);
        }
        // check the first char, garbage after this is ignored (including a slash)
        if (*str < 0x3a && *str > 0x2f){
     efa:	11 96       	adiw	r26, 0x01	; 1
     efc:	8c 91       	ld	r24, X
     efe:	80 53       	subi	r24, 0x30	; 48
     f00:	8a 30       	cpi	r24, 0x0A	; 10
     f02:	08 f0       	brcs	.+2      	; 0xf06 <analyse_get_url+0x3a>
     f04:	8e ef       	ldi	r24, 0xFE	; 254
                // is a ASCII number, return it
                return(*str-0x30);
        }
        return(-2);
}
     f06:	08 95       	ret

00000f08 <adc>:
unsigned int adc(unsigned char channel)
{  unsigned int val;
   ADMUX=0x40+channel;
     f08:	80 5c       	subi	r24, 0xC0	; 192
     f0a:	87 b9       	out	0x07, r24	; 7
   ADCSRA=(1<<ADEN);
     f0c:	80 e8       	ldi	r24, 0x80	; 128
     f0e:	86 b9       	out	0x06, r24	; 6
   ADCSRA|=(1<<ADSC);
     f10:	36 9a       	sbi	0x06, 6	; 6
    ADCSRA|=0x07;
     f12:	86 b1       	in	r24, 0x06	; 6
     f14:	87 60       	ori	r24, 0x07	; 7
     f16:	86 b9       	out	0x06, r24	; 6
   while(bit_is_clear(ADCSRA,ADIF));
     f18:	34 9b       	sbis	0x06, 4	; 6
     f1a:	fe cf       	rjmp	.-4      	; 0xf18 <adc+0x10>
   val=ADCW; 
     f1c:	24 b1       	in	r18, 0x04	; 4
     f1e:	35 b1       	in	r19, 0x05	; 5
   return val;
}
     f20:	c9 01       	movw	r24, r18
     f22:	08 95       	ret

00000f24 <moved_perm>:
// answer HTTP/1.0 301 Moved Permanently\r\nLocation: password/\r\n\r\n
// to redirect to the url ending in a slash
uint16_t moved_perm(uint8_t *buf)
{
     f24:	dc 01       	movw	r26, r24
     f26:	d6 96       	adiw	r26, 0x36	; 54
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	03 c0       	rjmp	.+6      	; 0xf34 <moved_perm+0x10>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     f2e:	4d 93       	st	X+, r20
                pos++;
     f30:	2f 5f       	subi	r18, 0xFF	; 255
     f32:	3f 4f       	sbci	r19, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     f34:	f9 01       	movw	r30, r18
     f36:	e8 5a       	subi	r30, 0xA8	; 168
     f38:	fc 4f       	sbci	r31, 0xFC	; 252
     f3a:	44 91       	lpm	r20, Z+
     f3c:	44 23       	and	r20, r20
     f3e:	b9 f7       	brne	.-18     	; 0xf2e <moved_perm+0xa>
     f40:	2a 5c       	subi	r18, 0xCA	; 202
     f42:	3f 4f       	sbci	r19, 0xFF	; 255
     f44:	dc 01       	movw	r26, r24
     f46:	a2 0f       	add	r26, r18
     f48:	b3 1f       	adc	r27, r19
     f4a:	26 53       	subi	r18, 0x36	; 54
     f4c:	30 40       	sbci	r19, 0x00	; 0
     f4e:	ee e9       	ldi	r30, 0x9E	; 158
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	04 c0       	rjmp	.+8      	; 0xf5c <moved_perm+0x38>
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
     f54:	4d 93       	st	X+, r20
                pos++;
     f56:	2f 5f       	subi	r18, 0xFF	; 255
     f58:	3f 4f       	sbci	r19, 0xFF	; 255
                s++;
     f5a:	31 96       	adiw	r30, 0x01	; 1
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
     f5c:	40 81       	ld	r20, Z
     f5e:	44 23       	and	r20, r20
     f60:	c9 f7       	brne	.-14     	; 0xf54 <moved_perm+0x30>
     f62:	2a 5c       	subi	r18, 0xCA	; 202
     f64:	3f 4f       	sbci	r19, 0xFF	; 255
     f66:	dc 01       	movw	r26, r24
     f68:	a2 0f       	add	r26, r18
     f6a:	b3 1f       	adc	r27, r19
     f6c:	26 53       	subi	r18, 0x36	; 54
     f6e:	30 40       	sbci	r19, 0x00	; 0
        uint16_t plen;
        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 301 Moved Permanently\r\nLocation: "));
        plen=fill_tcp_data(buf,plen,password);
        plen=fill_tcp_data_p(buf,plen,PSTR("/\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n"));
     f70:	47 e2       	ldi	r20, 0x27	; 39
     f72:	53 e0       	ldi	r21, 0x03	; 3
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <moved_perm+0x58>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     f76:	6d 93       	st	X+, r22
                pos++;
     f78:	2f 5f       	subi	r18, 0xFF	; 255
     f7a:	3f 4f       	sbci	r19, 0xFF	; 255
     f7c:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     f7e:	4f 5f       	subi	r20, 0xFF	; 255
     f80:	5f 4f       	sbci	r21, 0xFF	; 255
     f82:	64 91       	lpm	r22, Z+
     f84:	66 23       	and	r22, r22
     f86:	b9 f7       	brne	.-18     	; 0xf76 <moved_perm+0x52>
     f88:	2a 5c       	subi	r18, 0xCA	; 202
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	dc 01       	movw	r26, r24
     f8e:	a2 0f       	add	r26, r18
     f90:	b3 1f       	adc	r27, r19
     f92:	26 53       	subi	r18, 0x36	; 54
     f94:	30 40       	sbci	r19, 0x00	; 0
        plen=fill_tcp_data_p(buf,plen,PSTR("<h1>301 Moved Permanently</h1>\n"));
     f96:	47 e0       	ldi	r20, 0x07	; 7
     f98:	53 e0       	ldi	r21, 0x03	; 3
     f9a:	03 c0       	rjmp	.+6      	; 0xfa2 <moved_perm+0x7e>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     f9c:	6d 93       	st	X+, r22
                pos++;
     f9e:	2f 5f       	subi	r18, 0xFF	; 255
     fa0:	3f 4f       	sbci	r19, 0xFF	; 255
     fa2:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     fa4:	4f 5f       	subi	r20, 0xFF	; 255
     fa6:	5f 4f       	sbci	r21, 0xFF	; 255
     fa8:	64 91       	lpm	r22, Z+
     faa:	66 23       	and	r22, r22
     fac:	b9 f7       	brne	.-18     	; 0xf9c <moved_perm+0x78>
     fae:	2a 5c       	subi	r18, 0xCA	; 202
     fb0:	3f 4f       	sbci	r19, 0xFF	; 255
     fb2:	dc 01       	movw	r26, r24
     fb4:	a2 0f       	add	r26, r18
     fb6:	b3 1f       	adc	r27, r19
     fb8:	26 53       	subi	r18, 0x36	; 54
     fba:	30 40       	sbci	r19, 0x00	; 0
        plen=fill_tcp_data_p(buf,plen,PSTR("add a trailing slash to the url\n"));
     fbc:	86 ee       	ldi	r24, 0xE6	; 230
     fbe:	92 e0       	ldi	r25, 0x02	; 2
     fc0:	03 c0       	rjmp	.+6      	; 0xfc8 <moved_perm+0xa4>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     fc2:	4d 93       	st	X+, r20
                pos++;
     fc4:	2f 5f       	subi	r18, 0xFF	; 255
     fc6:	3f 4f       	sbci	r19, 0xFF	; 255
     fc8:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	44 91       	lpm	r20, Z+
     fce:	44 23       	and	r20, r20
     fd0:	c1 f7       	brne	.-16     	; 0xfc2 <moved_perm+0x9e>
        return(plen);
}
     fd2:	c9 01       	movw	r24, r18
     fd4:	08 95       	ret

00000fd6 <verify_password>:
unsigned int radiance;
#define STR_BUFFER_SIZE 12
volatile char gStrbuf[STR_BUFFER_SIZE+1];
// 
uint8_t verify_password(char *str)
{
     fd6:	bc 01       	movw	r22, r24
        // the first characters of the received string are
        // a simple password/cookie:
        if (strncmp(password,str,5)==0){
     fd8:	8e e9       	ldi	r24, 0x9E	; 158
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	45 e0       	ldi	r20, 0x05	; 5
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	0e 94 85 0a 	call	0x150a	; 0x150a <strncmp>
     fe4:	9c 01       	movw	r18, r24
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	23 2b       	or	r18, r19
     fea:	09 f4       	brne	.+2      	; 0xfee <verify_password+0x18>
     fec:	81 e0       	ldi	r24, 0x01	; 1
                return(1);
        }
        return(0);
}
     fee:	08 95       	ret

00000ff0 <print_webpage>:
        return(plen);
}

// prepare the webpage by writing the data to the tcp send buffer
uint16_t print_webpage(uint8_t *buf,uint8_t on_off)
{
     ff0:	ff 92       	push	r15
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	8c 01       	movw	r16, r24
     ffc:	f6 2e       	mov	r15, r22
     ffe:	dc 01       	movw	r26, r24
    1000:	d6 96       	adiw	r26, 0x36	; 54
    1002:	c0 e0       	ldi	r28, 0x00	; 0
    1004:	d0 e0       	ldi	r29, 0x00	; 0
    1006:	02 c0       	rjmp	.+4      	; 0x100c <print_webpage+0x1c>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1008:	8d 93       	st	X+, r24
                pos++;
    100a:	21 96       	adiw	r28, 0x01	; 1
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    100c:	fe 01       	movw	r30, r28
    100e:	e6 56       	subi	r30, 0x66	; 102
    1010:	fd 4f       	sbci	r31, 0xFD	; 253
    1012:	84 91       	lpm	r24, Z+
    1014:	88 23       	and	r24, r24
    1016:	c1 f7       	brne	.-16     	; 0x1008 <print_webpage+0x18>
    1018:	e6 96       	adiw	r28, 0x36	; 54
    101a:	d8 01       	movw	r26, r16
    101c:	ac 0f       	add	r26, r28
    101e:	bd 1f       	adc	r27, r29
    1020:	e6 97       	sbiw	r28, 0x36	; 54
        uint16_t plen;
        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\nRefresh: 20\r\n\r\n"));
        plen=fill_tcp_data_p(buf,plen,PSTR("<font color=\"#FF0000\"><center><H1>Solar Irradiance Meter</H1></center></font>"));
    1022:	8c e4       	ldi	r24, 0x4C	; 76
    1024:	92 e0       	ldi	r25, 0x02	; 2
    1026:	02 c0       	rjmp	.+4      	; 0x102c <print_webpage+0x3c>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1028:	2d 93       	st	X+, r18
                pos++;
    102a:	21 96       	adiw	r28, 0x01	; 1
    102c:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	24 91       	lpm	r18, Z+
    1032:	22 23       	and	r18, r18
    1034:	c9 f7       	brne	.-14     	; 0x1028 <print_webpage+0x38>
    1036:	e6 96       	adiw	r28, 0x36	; 54
    1038:	d8 01       	movw	r26, r16
    103a:	ac 0f       	add	r26, r28
    103c:	bd 1f       	adc	r27, r29
    103e:	e6 97       	sbiw	r28, 0x36	; 54
        plen=fill_tcp_data_p(buf,plen,PSTR("<center><p><h2>Irradiance is: "));
    1040:	8d e2       	ldi	r24, 0x2D	; 45
    1042:	92 e0       	ldi	r25, 0x02	; 2
    1044:	02 c0       	rjmp	.+4      	; 0x104a <print_webpage+0x5a>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1046:	2d 93       	st	X+, r18
                pos++;
    1048:	21 96       	adiw	r28, 0x01	; 1
    104a:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	24 91       	lpm	r18, Z+
    1050:	22 23       	and	r18, r18
    1052:	c9 f7       	brne	.-14     	; 0x1046 <print_webpage+0x56>
		itoa(radiance*2,gStrbuf,10); // convert integer to string
    1054:	80 91 e0 02 	lds	r24, 0x02E0
    1058:	90 91 e1 02 	lds	r25, 0x02E1
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	62 ee       	ldi	r22, 0xE2	; 226
    1062:	72 e0       	ldi	r23, 0x02	; 2
    1064:	4a e0       	ldi	r20, 0x0A	; 10
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	0e 94 93 0a 	call	0x1526	; 0x1526 <itoa>
    106c:	e6 96       	adiw	r28, 0x36	; 54
    106e:	d8 01       	movw	r26, r16
    1070:	ac 0f       	add	r26, r28
    1072:	bd 1f       	adc	r27, r29
    1074:	e6 97       	sbiw	r28, 0x36	; 54
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <print_webpage+0x90>
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
    107c:	ed 93       	st	X+, r30
                pos++;
    107e:	21 96       	adiw	r28, 0x01	; 1
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
    1080:	fc 01       	movw	r30, r24
    1082:	ee 51       	subi	r30, 0x1E	; 30
    1084:	fd 4f       	sbci	r31, 0xFD	; 253
    1086:	e0 81       	ld	r30, Z
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	ee 23       	and	r30, r30
    108c:	b9 f7       	brne	.-18     	; 0x107c <print_webpage+0x8c>
    108e:	e6 96       	adiw	r28, 0x36	; 54
    1090:	d8 01       	movw	r26, r16
    1092:	ac 0f       	add	r26, r28
    1094:	bd 1f       	adc	r27, r29
    1096:	e6 97       	sbiw	r28, 0x36	; 54
		plen=fill_tcp_data(buf,plen,gStrbuf);
		plen=fill_tcp_data_p(buf,plen,PSTR(" WATTS/sq.meter</center></h2></p>"));
    1098:	8b e0       	ldi	r24, 0x0B	; 11
    109a:	92 e0       	ldi	r25, 0x02	; 2
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <print_webpage+0xb2>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    109e:	2d 93       	st	X+, r18
                pos++;
    10a0:	21 96       	adiw	r28, 0x01	; 1
    10a2:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    10a4:	01 96       	adiw	r24, 0x01	; 1
    10a6:	24 91       	lpm	r18, Z+
    10a8:	22 23       	and	r18, r18
    10aa:	c9 f7       	brne	.-14     	; 0x109e <print_webpage+0xae>
    10ac:	e6 96       	adiw	r28, 0x36	; 54
    10ae:	d8 01       	movw	r26, r16
    10b0:	ac 0f       	add	r26, r28
    10b2:	bd 1f       	adc	r27, r29
    10b4:	e6 97       	sbiw	r28, 0x36	; 54
		plen=fill_tcp_data_p(buf,plen,PSTR("<center><p>Output is: "));
    10b6:	84 ef       	ldi	r24, 0xF4	; 244
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <print_webpage+0xd0>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    10bc:	2d 93       	st	X+, r18
                pos++;
    10be:	21 96       	adiw	r28, 0x01	; 1
    10c0:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	24 91       	lpm	r18, Z+
    10c6:	22 23       	and	r18, r18
    10c8:	c9 f7       	brne	.-14     	; 0x10bc <print_webpage+0xcc>
    10ca:	ce 01       	movw	r24, r28
    10cc:	c6 96       	adiw	r24, 0x36	; 54
        if (on_off){
    10ce:	ff 20       	and	r15, r15
    10d0:	31 f4       	brne	.+12     	; 0x10de <print_webpage+0xee>
    10d2:	d8 01       	movw	r26, r16
    10d4:	a8 0f       	add	r26, r24
    10d6:	b9 1f       	adc	r27, r25
                plen=fill_tcp_data_p(buf,plen,PSTR("<font color=\"#FF0000\"> ON</font>"));
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("OFF"));
    10d8:	8f ec       	ldi	r24, 0xCF	; 207
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	17 c0       	rjmp	.+46     	; 0x110c <print_webpage+0x11c>
    10de:	d8 01       	movw	r26, r16
    10e0:	a8 0f       	add	r26, r24
    10e2:	b9 1f       	adc	r27, r25
		itoa(radiance*2,gStrbuf,10); // convert integer to string
		plen=fill_tcp_data(buf,plen,gStrbuf);
		plen=fill_tcp_data_p(buf,plen,PSTR(" WATTS/sq.meter</center></h2></p>"));
		plen=fill_tcp_data_p(buf,plen,PSTR("<center><p>Output is: "));
        if (on_off){
                plen=fill_tcp_data_p(buf,plen,PSTR("<font color=\"#FF0000\"> ON</font>"));
    10e4:	83 ed       	ldi	r24, 0xD3	; 211
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <print_webpage+0xfe>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    10ea:	2d 93       	st	X+, r18
                pos++;
    10ec:	21 96       	adiw	r28, 0x01	; 1
    10ee:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	24 91       	lpm	r18, Z+
    10f4:	22 23       	and	r18, r18
    10f6:	c9 f7       	brne	.-14     	; 0x10ea <print_webpage+0xfa>
    10f8:	e6 96       	adiw	r28, 0x36	; 54
    10fa:	d8 01       	movw	r26, r16
    10fc:	ac 0f       	add	r26, r28
    10fe:	bd 1f       	adc	r27, r29
    1100:	e6 97       	sbiw	r28, 0x36	; 54
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("OFF"));
        }
        plen=fill_tcp_data_p(buf,plen,PSTR(" <small><a href=\".\">[refresh status]</a></small></p>\n<p><a href=\"."));
    1102:	8c e8       	ldi	r24, 0x8C	; 140
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	0a c0       	rjmp	.+20     	; 0x111c <print_webpage+0x12c>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1108:	2d 93       	st	X+, r18
                pos++;
    110a:	21 96       	adiw	r28, 0x01	; 1
    110c:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	24 91       	lpm	r18, Z+
    1112:	22 23       	and	r18, r18
    1114:	c9 f7       	brne	.-14     	; 0x1108 <print_webpage+0x118>
    1116:	f0 cf       	rjmp	.-32     	; 0x10f8 <print_webpage+0x108>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1118:	2d 93       	st	X+, r18
                pos++;
    111a:	21 96       	adiw	r28, 0x01	; 1
    111c:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	24 91       	lpm	r18, Z+
    1122:	22 23       	and	r18, r18
    1124:	c9 f7       	brne	.-14     	; 0x1118 <print_webpage+0x128>
    1126:	ce 01       	movw	r24, r28
    1128:	c6 96       	adiw	r24, 0x36	; 54
        if (on_off){
    112a:	ff 20       	and	r15, r15
    112c:	31 f4       	brne	.+12     	; 0x113a <print_webpage+0x14a>
    112e:	d8 01       	movw	r26, r16
    1130:	a8 0f       	add	r26, r24
    1132:	b9 1f       	adc	r27, r25
                plen=fill_tcp_data_p(buf,plen,PSTR("/0\">Switch off</a><p>"));
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("/1\">Switch on</a><p>"));
    1134:	81 e6       	ldi	r24, 0x61	; 97
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	17 c0       	rjmp	.+46     	; 0x1168 <print_webpage+0x178>
    113a:	d8 01       	movw	r26, r16
    113c:	a8 0f       	add	r26, r24
    113e:	b9 1f       	adc	r27, r25
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("OFF"));
        }
        plen=fill_tcp_data_p(buf,plen,PSTR(" <small><a href=\".\">[refresh status]</a></small></p>\n<p><a href=\"."));
        if (on_off){
                plen=fill_tcp_data_p(buf,plen,PSTR("/0\">Switch off</a><p>"));
    1140:	86 e7       	ldi	r24, 0x76	; 118
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	02 c0       	rjmp	.+4      	; 0x114a <print_webpage+0x15a>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1146:	2d 93       	st	X+, r18
                pos++;
    1148:	21 96       	adiw	r28, 0x01	; 1
    114a:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	24 91       	lpm	r18, Z+
    1150:	22 23       	and	r18, r18
    1152:	c9 f7       	brne	.-14     	; 0x1146 <print_webpage+0x156>
    1154:	e6 96       	adiw	r28, 0x36	; 54
    1156:	d8 01       	movw	r26, r16
    1158:	ac 0f       	add	r26, r28
    115a:	bd 1f       	adc	r27, r29
    115c:	e6 97       	sbiw	r28, 0x36	; 54
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("/1\">Switch on</a><p>"));
        }
        plen=fill_tcp_data_p(buf,plen,PSTR("</center><hr><br><h2>Shachi Awasthi</h2>\n"));
    115e:	87 e3       	ldi	r24, 0x37	; 55
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	0a c0       	rjmp	.+20     	; 0x1178 <print_webpage+0x188>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1164:	2d 93       	st	X+, r18
                pos++;
    1166:	21 96       	adiw	r28, 0x01	; 1
    1168:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	24 91       	lpm	r18, Z+
    116e:	22 23       	and	r18, r18
    1170:	c9 f7       	brne	.-14     	; 0x1164 <print_webpage+0x174>
    1172:	f0 cf       	rjmp	.-32     	; 0x1154 <print_webpage+0x164>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1174:	2d 93       	st	X+, r18
                pos++;
    1176:	21 96       	adiw	r28, 0x01	; 1
    1178:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	24 91       	lpm	r18, Z+
    117e:	22 23       	and	r18, r18
    1180:	c9 f7       	brne	.-14     	; 0x1174 <print_webpage+0x184>
        return(plen);
}
    1182:	ce 01       	movw	r24, r28
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	08 95       	ret

00001190 <main>:


int main(void){
    1190:	9f 92       	push	r9
    1192:	af 92       	push	r10
    1194:	bf 92       	push	r11
    1196:	cf 92       	push	r12
    1198:	df 92       	push	r13
    119a:	ef 92       	push	r14
    119c:	ff 92       	push	r15
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	6e 97       	sbiw	r28, 0x1e	; 30
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	12 e3       	ldi	r17, 0x32	; 50
    11b8:	81 2f       	mov	r24, r17
    11ba:	8a 95       	dec	r24
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <main+0x2a>
//        CLKPR=(1<<CLKPCE); // change enable
//        CLKPR=0; // "no pre-scaler"
        _delay_loop_1(50); // 12ms

        /* enable PD2/INT0, as input */
        DDRD&= ~(1<<DDD2);
    11be:	8a 98       	cbi	0x11, 2	; 17
          DDRA=0x0F;
    11c0:	8f e0       	ldi	r24, 0x0F	; 15
    11c2:	8a bb       	out	0x1a, r24	; 26
        /*initialize enc28j60*/
        enc28j60Init(mymac);
    11c4:	84 e9       	ldi	r24, 0x94	; 148
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 ac 02 	call	0x558	; 0x558 <enc28j60Init>
        enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	0e 94 a6 02 	call	0x54c	; 0x54c <enc28j60clkout>
    11d2:	81 2f       	mov	r24, r17
    11d4:	8a 95       	dec	r24
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <main+0x44>
        _delay_loop_1(50); // 12ms
        
        // LED
        /* enable PB1, LED as output */
        DDRB|= (1<<DDB1);
    11d8:	b9 9a       	sbi	0x17, 1	; 23

        /* set output to Vcc, LED off */
        PORTB|= (1<<PORTB1);
    11da:	c1 9a       	sbi	0x18, 1	; 24

        // the transistor on PD7
        DDRD|= (1<<DDD7);DDRA|= (1<<7);
    11dc:	8f 9a       	sbi	0x11, 7	; 17
    11de:	d7 9a       	sbi	0x1a, 7	; 26
       // PORTD &= ~(1<<PORTD7);// transistor off
        DDRC=0xFF;
    11e0:	8f ef       	ldi	r24, 0xFF	; 255
    11e2:	84 bb       	out	0x14, r24	; 20
		PORTC = 0x00;// transistor off
    11e4:	15 ba       	out	0x15, r1	; 21
        /* Magjack leds configuration, see enc28j60 datasheet, page 11 */
        // LEDB=yellow LEDA=green
        //
        // 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
        // enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
        enc28j60PhyWrite(PHLCON,0x476);
    11e6:	84 e1       	ldi	r24, 0x14	; 20
    11e8:	66 e7       	ldi	r22, 0x76	; 118
    11ea:	74 e0       	ldi	r23, 0x04	; 4
    11ec:	0e 94 88 02 	call	0x510	; 0x510 <enc28j60PhyWrite>
    11f0:	1a 95       	dec	r17
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <main+0x60>
        _delay_loop_1(50); // 12ms
        
        /* set output to GND, red LED on */
        PORTB &= ~(1<<PORTB1);
    11f4:	c1 98       	cbi	0x18, 1	; 24
}

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
        uint8_t i=0;
        wwwport=wwwp;
    11f6:	80 e5       	ldi	r24, 0x50	; 80
    11f8:	80 93 a5 00 	sts	0x00A5, r24
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
        while(i<4){
                ipaddr[i]=myip[i];
    1200:	f9 01       	movw	r30, r18
    1202:	eb 54       	subi	r30, 0x4B	; 75
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	d9 01       	movw	r26, r18
    1208:	a6 56       	subi	r26, 0x66	; 102
    120a:	bf 4f       	sbci	r27, 0xFF	; 255
    120c:	8c 91       	ld	r24, X
    120e:	80 83       	st	Z, r24
    1210:	2f 5f       	subi	r18, 0xFF	; 255
    1212:	3f 4f       	sbci	r19, 0xFF	; 255

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
        uint8_t i=0;
        wwwport=wwwp;
        while(i<4){
    1214:	24 30       	cpi	r18, 0x04	; 4
    1216:	31 05       	cpc	r19, r1
    1218:	99 f7       	brne	.-26     	; 0x1200 <main+0x70>
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
                macaddr[i]=mymac[i];
    121e:	f9 01       	movw	r30, r18
    1220:	e1 55       	subi	r30, 0x51	; 81
    1222:	ff 4f       	sbci	r31, 0xFF	; 255
    1224:	d9 01       	movw	r26, r18
    1226:	ac 56       	subi	r26, 0x6C	; 108
    1228:	bf 4f       	sbci	r27, 0xFF	; 255
    122a:	8c 91       	ld	r24, X
    122c:	80 83       	st	Z, r24
    122e:	2f 5f       	subi	r18, 0xFF	; 255
    1230:	3f 4f       	sbci	r19, 0xFF	; 255
        while(i<4){
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
    1232:	26 30       	cpi	r18, 0x06	; 6
    1234:	31 05       	cpc	r19, r1
    1236:	99 f7       	brne	.-26     	; 0x121e <main+0x8e>
    1238:	bb 24       	eor	r11, r11
    123a:	b3 94       	inc	r11
                                strcpy(str,"e=no_such_cmd");
                                goto ANSWER;
                        }
                        strcpy(str,"e=invalid_pw");
ANSWER:
                        make_udp_reply_from_request(buf,str,strlen(str),MYUDPPORT);
    123c:	6e 01       	movw	r12, r28
    123e:	08 94       	sec
    1240:	c1 1c       	adc	r12, r1
    1242:	d1 1c       	adc	r13, r1
        }
        return(-2);
}
unsigned int adc(unsigned char channel)
{  unsigned int val;
   ADMUX=0x40+channel;
    1244:	e4 e4       	ldi	r30, 0x44	; 68
    1246:	ae 2e       	mov	r10, r30
   ADCSRA=(1<<ADEN);
    1248:	70 e8       	ldi	r23, 0x80	; 128
    124a:	97 2e       	mov	r9, r23
        //init the ethernet/ip layer:
        init_ip_arp_udp_tcp(mymac,myip,MYWWWPORT);

        while(1){
                // get the next new packet:
                plen = enc28j60PacketReceive(BUFFER_SIZE, buf);
    124c:	86 e2       	ldi	r24, 0x26	; 38
    124e:	92 e0       	ldi	r25, 0x02	; 2
    1250:	69 eb       	ldi	r22, 0xB9	; 185
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <enc28j60PacketReceive>
    1258:	8c 01       	movw	r16, r24

                /*plen will ne unequal to zero if there is a valid 
                 * packet (without crc error) */
                if(plen==0){
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	b9 f3       	breq	.-18     	; 0x124c <main+0xbc>
                }
                        
                // arp is broadcast if unknown but a host may also
                // verify the mac address by sending it to 
                // a unicast address.
                if(eth_type_is_arp_and_my_ip(buf,plen)){
    125e:	89 eb       	ldi	r24, 0xB9	; 185
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	b8 01       	movw	r22, r16
    1264:	0e 94 1e 05 	call	0xa3c	; 0xa3c <eth_type_is_arp_and_my_ip>
    1268:	88 23       	and	r24, r24
    126a:	29 f0       	breq	.+10     	; 0x1276 <main+0xe6>
                        make_arp_answer_from_request(buf);
    126c:	89 eb       	ldi	r24, 0xB9	; 185
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0e 94 cd 05 	call	0xb9a	; 0xb9a <make_arp_answer_from_request>
    1274:	eb cf       	rjmp	.-42     	; 0x124c <main+0xbc>
                        continue;
                }

                // check if ip packets are for us:
                if(eth_type_is_ip_and_my_ip(buf,plen)==0){
    1276:	89 eb       	ldi	r24, 0xB9	; 185
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	b8 01       	movw	r22, r16
    127c:	0e 94 3a 05 	call	0xa74	; 0xa74 <eth_type_is_ip_and_my_ip>
    1280:	88 23       	and	r24, r24
    1282:	21 f3       	breq	.-56     	; 0x124c <main+0xbc>
                        continue;
                }
                // led----------
                if (i){
    1284:	bb 20       	and	r11, r11
    1286:	19 f0       	breq	.+6      	; 0x128e <main+0xfe>
                        /* set output to Vcc, LED off */
                        PORTB|= (1<<PORTB1);
    1288:	c1 9a       	sbi	0x18, 1	; 24
    128a:	bb 24       	eor	r11, r11
    128c:	03 c0       	rjmp	.+6      	; 0x1294 <main+0x104>
                        i=0;
                }else{
                        /* set output to GND, LED on */
                        PORTB &= ~(1<<PORTB1);
    128e:	c1 98       	cbi	0x18, 1	; 24
    1290:	bb 24       	eor	r11, r11
    1292:	b3 94       	inc	r11
                        i=1;
                }
                
                if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
    1294:	80 91 d0 00 	lds	r24, 0x00D0
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	51 f4       	brne	.+20     	; 0x12b0 <main+0x120>
    129c:	80 91 db 00 	lds	r24, 0x00DB
    12a0:	88 30       	cpi	r24, 0x08	; 8
    12a2:	a1 f6       	brne	.-88     	; 0x124c <main+0xbc>
                        // a ping packet, let's send pong
                        make_echo_reply_from_request(buf,plen);
    12a4:	89 eb       	ldi	r24, 0xB9	; 185
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	b8 01       	movw	r22, r16
    12aa:	0e 94 01 06 	call	0xc02	; 0xc02 <make_echo_reply_from_request>
    12ae:	ce cf       	rjmp	.-100    	; 0x124c <main+0xbc>
                        continue;
                }
                // tcp port www start, compare only the lower byte
                if (buf[IP_PROTO_P]==IP_PROTO_TCP_V&&buf[TCP_DST_PORT_H_P]==0&&buf[TCP_DST_PORT_L_P]==MYWWWPORT){
    12b0:	86 30       	cpi	r24, 0x06	; 6
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <main+0x126>
    12b4:	bb c0       	rjmp	.+374    	; 0x142c <main+0x29c>
    12b6:	80 91 dd 00 	lds	r24, 0x00DD
    12ba:	88 23       	and	r24, r24
    12bc:	39 f6       	brne	.-114    	; 0x124c <main+0xbc>
    12be:	80 91 de 00 	lds	r24, 0x00DE
    12c2:	80 35       	cpi	r24, 0x50	; 80
    12c4:	19 f6       	brne	.-122    	; 0x124c <main+0xbc>
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
    12c6:	80 91 e8 00 	lds	r24, 0x00E8
    12ca:	81 ff       	sbrs	r24, 1
    12cc:	05 c0       	rjmp	.+10     	; 0x12d8 <main+0x148>
                                make_tcp_synack_from_syn(buf);
    12ce:	89 eb       	ldi	r24, 0xB9	; 185
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <make_tcp_synack_from_syn>
    12d6:	ba cf       	rjmp	.-140    	; 0x124c <main+0xbc>
                                // make_tcp_synack_from_syn does already send the syn,ack
                                continue;
                        }
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    12d8:	84 ff       	sbrs	r24, 4
    12da:	b8 cf       	rjmp	.-144    	; 0x124c <main+0xbc>
                                init_len_info(buf); // init some data structures
    12dc:	89 eb       	ldi	r24, 0xB9	; 185
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 94 bc 06 	call	0xd78	; 0xd78 <init_len_info>
// get a pointer to the start of tcp data in buf
// Returns 0 if there is no data
// You must call init_len_info once before calling this function
uint16_t get_tcp_data_pointer(void)
{
        if (info_data_len){
    12e4:	80 91 a8 00 	lds	r24, 0x00A8
    12e8:	90 91 a9 00 	lds	r25, 0x00A9
    12ec:	89 2b       	or	r24, r25
    12ee:	61 f0       	breq	.+24     	; 0x1308 <main+0x178>
                return((uint16_t)TCP_SRC_PORT_H_P+info_hdr_len);
    12f0:	00 91 aa 00 	lds	r16, 0x00AA
    12f4:	10 91 ab 00 	lds	r17, 0x00AB
    12f8:	62 e2       	ldi	r22, 0x22	; 34
    12fa:	e6 2e       	mov	r14, r22
    12fc:	f1 2c       	mov	r15, r1
    12fe:	e0 0e       	add	r14, r16
    1300:	f1 1e       	adc	r15, r17
                                // we can possibly have no data, just ack:
                                dat_p=get_tcp_data_pointer();
                                if (dat_p==0){
    1302:	e1 14       	cp	r14, r1
    1304:	f1 04       	cpc	r15, r1
    1306:	49 f4       	brne	.+18     	; 0x131a <main+0x18a>
                                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    1308:	80 91 e8 00 	lds	r24, 0x00E8
    130c:	80 ff       	sbrs	r24, 0
    130e:	9e cf       	rjmp	.-196    	; 0x124c <main+0xbc>
                                                // finack, answer with ack
                                                make_tcp_ack_from_any(buf);
    1310:	89 eb       	ldi	r24, 0xB9	; 185
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 04 07 	call	0xe08	; 0xe08 <make_tcp_ack_from_any>
    1318:	99 cf       	rjmp	.-206    	; 0x124c <main+0xbc>
                                        }
                                        // just an ack with no data, wait for next packet
                                        continue;
                                }
                                if (strncmp("GET ",(char *)&(buf[dat_p]),4)!=0){
    131a:	b7 01       	movw	r22, r14
    131c:	67 54       	subi	r22, 0x47	; 71
    131e:	7f 4f       	sbci	r23, 0xFF	; 255
    1320:	80 e6       	ldi	r24, 0x60	; 96
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	44 e0       	ldi	r20, 0x04	; 4
    1326:	50 e0       	ldi	r21, 0x00	; 0
    1328:	0e 94 85 0a 	call	0x150a	; 0x150a <strncmp>
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	81 f0       	breq	.+32     	; 0x1350 <main+0x1c0>
    1330:	00 e0       	ldi	r16, 0x00	; 0
    1332:	10 e0       	ldi	r17, 0x00	; 0
    1334:	06 c0       	rjmp	.+12     	; 0x1342 <main+0x1b2>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1336:	f8 01       	movw	r30, r16
    1338:	e7 54       	subi	r30, 0x47	; 71
    133a:	ff 4f       	sbci	r31, 0xFF	; 255
    133c:	86 ab       	std	Z+54, r24	; 0x36
                pos++;
    133e:	0f 5f       	subi	r16, 0xFF	; 255
    1340:	1f 4f       	sbci	r17, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1342:	f8 01       	movw	r30, r16
    1344:	e5 50       	subi	r30, 0x05	; 5
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	84 91       	lpm	r24, Z+
    134a:	88 23       	and	r24, r24
    134c:	a1 f7       	brne	.-24     	; 0x1336 <main+0x1a6>
    134e:	64 c0       	rjmp	.+200    	; 0x1418 <main+0x288>
                                        // for possible status codes see:
                                        // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
                                        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n<h1>200 OK</h1>"));
                                        goto SENDTCP;
                                }
                                if (strncmp("/ ",(char *)&(buf[dat_p+4]),2)==0){
    1350:	01 52       	subi	r16, 0x21	; 33
    1352:	1f 4f       	sbci	r17, 0xFF	; 255
    1354:	85 e6       	ldi	r24, 0x65	; 101
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	b8 01       	movw	r22, r16
    135a:	42 e0       	ldi	r20, 0x02	; 2
    135c:	50 e0       	ldi	r21, 0x00	; 0
    135e:	0e 94 85 0a 	call	0x150a	; 0x150a <strncmp>
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	f1 f4       	brne	.+60     	; 0x13a2 <main+0x212>
    1366:	00 e0       	ldi	r16, 0x00	; 0
    1368:	10 e0       	ldi	r17, 0x00	; 0
    136a:	06 c0       	rjmp	.+12     	; 0x1378 <main+0x1e8>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    136c:	f8 01       	movw	r30, r16
    136e:	e7 54       	subi	r30, 0x47	; 71
    1370:	ff 4f       	sbci	r31, 0xFF	; 255
    1372:	86 ab       	std	Z+54, r24	; 0x36
                pos++;
    1374:	0f 5f       	subi	r16, 0xFF	; 255
    1376:	1f 4f       	sbci	r17, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1378:	f8 01       	movw	r30, r16
    137a:	e2 53       	subi	r30, 0x32	; 50
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	84 91       	lpm	r24, Z+
    1380:	88 23       	and	r24, r24
    1382:	a1 f7       	brne	.-24     	; 0x136c <main+0x1dc>
    1384:	d8 01       	movw	r26, r16
    1386:	a1 51       	subi	r26, 0x11	; 17
    1388:	bf 4f       	sbci	r27, 0xFF	; 255
                                        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n"));
                                        plen=fill_tcp_data_p(buf,plen,PSTR("<p>Usage: http://host_or_ip/password</p>\n"));
    138a:	84 ea       	ldi	r24, 0xA4	; 164
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	03 c0       	rjmp	.+6      	; 0x1396 <main+0x206>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1390:	2d 93       	st	X+, r18
                pos++;
    1392:	0f 5f       	subi	r16, 0xFF	; 255
    1394:	1f 4f       	sbci	r17, 0xFF	; 255
    1396:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	24 91       	lpm	r18, Z+
    139c:	22 23       	and	r18, r18
    139e:	c1 f7       	brne	.-16     	; 0x1390 <main+0x200>
    13a0:	3b c0       	rjmp	.+118    	; 0x1418 <main+0x288>
                                        goto SENDTCP;
                                }
                                cmd=analyse_get_url((char *)&(buf[dat_p+5]));
    13a2:	c7 01       	movw	r24, r14
    13a4:	82 54       	subi	r24, 0x42	; 66
    13a6:	9f 4f       	sbci	r25, 0xFF	; 255
    13a8:	0e 94 66 07 	call	0xecc	; 0xecc <analyse_get_url>
                                // for possible status codes see:
                                // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
                                if (cmd==-1){
    13ac:	8f 3f       	cpi	r24, 0xFF	; 255
    13ae:	81 f4       	brne	.+32     	; 0x13d0 <main+0x240>
    13b0:	00 e0       	ldi	r16, 0x00	; 0
    13b2:	10 e0       	ldi	r17, 0x00	; 0
    13b4:	06 c0       	rjmp	.+12     	; 0x13c2 <main+0x232>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    13b6:	f8 01       	movw	r30, r16
    13b8:	e7 54       	subi	r30, 0x47	; 71
    13ba:	ff 4f       	sbci	r31, 0xFF	; 255
    13bc:	86 ab       	std	Z+54, r24	; 0x36
                pos++;
    13be:	0f 5f       	subi	r16, 0xFF	; 255
    13c0:	1f 4f       	sbci	r17, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    13c2:	f8 01       	movw	r30, r16
    13c4:	ec 5a       	subi	r30, 0xAC	; 172
    13c6:	ff 4f       	sbci	r31, 0xFF	; 255
    13c8:	84 91       	lpm	r24, Z+
    13ca:	88 23       	and	r24, r24
    13cc:	a1 f7       	brne	.-24     	; 0x13b6 <main+0x226>
    13ce:	24 c0       	rjmp	.+72     	; 0x1418 <main+0x288>
								 case 4:cbi(PORTC,2);cbi(dtpack,2);break;
								 case 5:sbi(PORTC,2);sbi(dtpack,2);break;
							     case 6:cbi(PORTC,3);cbi(dtpack,3);break;
								 case 7:sbi(PORTC,3);sbi(dtpack,3);break;
							   }*/
                                if (cmd==1){
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	11 f4       	brne	.+4      	; 0x13d8 <main+0x248>
                                       // PORTD|= (1<<PORTD7);// transistor on
										PORTC|= (1<<0);// transistor on
    13d4:	a8 9a       	sbi	0x15, 0	; 21
    13d6:	0b c0       	rjmp	.+22     	; 0x13ee <main+0x25e>
                                }
                                if (cmd==0){
    13d8:	88 23       	and	r24, r24
    13da:	11 f4       	brne	.+4      	; 0x13e0 <main+0x250>
                                       // PORTD &= ~(1<<PORTD7);// transistor off
                                        PORTC &= ~(1<<0);// transistor off
    13dc:	a8 98       	cbi	0x15, 0	; 21
    13de:	07 c0       	rjmp	.+14     	; 0x13ee <main+0x25e>
                                }
                                if (cmd==-3){
    13e0:	8d 3f       	cpi	r24, 0xFD	; 253
    13e2:	29 f4       	brne	.+10     	; 0x13ee <main+0x25e>
                                        // redirect to add a trailing slash
                                        plen=moved_perm(buf);
    13e4:	89 eb       	ldi	r24, 0xB9	; 185
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0e 94 92 07 	call	0xf24	; 0xf24 <moved_perm>
    13ec:	14 c0       	rjmp	.+40     	; 0x1416 <main+0x286>
        }
        return(-2);
}
unsigned int adc(unsigned char channel)
{  unsigned int val;
   ADMUX=0x40+channel;
    13ee:	a7 b8       	out	0x07, r10	; 7
   ADCSRA=(1<<ADEN);
    13f0:	96 b8       	out	0x06, r9	; 6
   ADCSRA|=(1<<ADSC);
    13f2:	36 9a       	sbi	0x06, 6	; 6
    ADCSRA|=0x07;
    13f4:	86 b1       	in	r24, 0x06	; 6
    13f6:	87 60       	ori	r24, 0x07	; 7
    13f8:	86 b9       	out	0x06, r24	; 6
   while(bit_is_clear(ADCSRA,ADIF));
    13fa:	34 9b       	sbis	0x06, 4	; 6
    13fc:	fe cf       	rjmp	.-4      	; 0x13fa <main+0x26a>
   val=ADCW; 
    13fe:	84 b1       	in	r24, 0x04	; 4
    1400:	95 b1       	in	r25, 0x05	; 5
                                if (cmd==-3){
                                        // redirect to add a trailing slash
                                        plen=moved_perm(buf);
                                        goto SENDTCP;
                                }
								radiance=adc(4);
    1402:	90 93 e1 02 	sts	0x02E1, r25
    1406:	80 93 e0 02 	sts	0x02E0, r24
                                // if (cmd==-2) or any other value
                                // just display the status:
                                plen=print_webpage(buf,(PORTC & (1<<PORTC0)));
    140a:	65 b3       	in	r22, 0x15	; 21
    140c:	61 70       	andi	r22, 0x01	; 1
    140e:	89 eb       	ldi	r24, 0xB9	; 185
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 f8 07 	call	0xff0	; 0xff0 <print_webpage>
    1416:	8c 01       	movw	r16, r24
                                //
SENDTCP:
                                make_tcp_ack_from_any(buf); // send ack for http get
    1418:	89 eb       	ldi	r24, 0xB9	; 185
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 94 04 07 	call	0xe08	; 0xe08 <make_tcp_ack_from_any>
                                make_tcp_ack_with_data(buf,plen); // send data
    1420:	89 eb       	ldi	r24, 0xB9	; 185
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	b8 01       	movw	r22, r16
    1426:	0e 94 3c 07 	call	0xe78	; 0xe78 <make_tcp_ack_with_data>
    142a:	10 cf       	rjmp	.-480    	; 0x124c <main+0xbc>

                }
                // tcp port www end
                //
                // udp start, we listen on udp port 1200=0x4B0
                if (buf[IP_PROTO_P]==IP_PROTO_UDP_V&&buf[UDP_DST_PORT_H_P]==4&&buf[UDP_DST_PORT_L_P]==0xb0){
    142c:	81 31       	cpi	r24, 0x11	; 17
    142e:	09 f0       	breq	.+2      	; 0x1432 <main+0x2a2>
    1430:	0d cf       	rjmp	.-486    	; 0x124c <main+0xbc>
    1432:	80 91 dd 00 	lds	r24, 0x00DD
    1436:	84 30       	cpi	r24, 0x04	; 4
    1438:	09 f0       	breq	.+2      	; 0x143c <main+0x2ac>
    143a:	08 cf       	rjmp	.-496    	; 0x124c <main+0xbc>
    143c:	80 91 de 00 	lds	r24, 0x00DE
    1440:	80 3b       	cpi	r24, 0xB0	; 176
    1442:	09 f0       	breq	.+2      	; 0x1446 <main+0x2b6>
    1444:	03 cf       	rjmp	.-506    	; 0x124c <main+0xbc>
                        payloadlen=buf[UDP_LEN_L_P]-UDP_HEADER_LEN;
    1446:	10 91 e0 00 	lds	r17, 0x00E0
    144a:	18 50       	subi	r17, 0x08	; 8
                        // you must sent a string starting with v
                        // e.g udpcom version 10.0.0.24
                        if (verify_password((char *)&(buf[UDP_DATA_P]))){
    144c:	83 ee       	ldi	r24, 0xE3	; 227
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <verify_password>
    1454:	88 23       	and	r24, r24
    1456:	59 f4       	brne	.+22     	; 0x146e <main+0x2de>
    1458:	3c c0       	rjmp	.+120    	; 0x14d2 <main+0x342>
                                // find the first comma which indicates 
                                // the start of a command:
                                cmd_pos=0;
                                while(cmd_pos<payloadlen){
                                        cmd_pos++;
    145a:	9f 5f       	subi	r25, 0xFF	; 255
                                        if (buf[UDP_DATA_P+cmd_pos]==','){
    145c:	e9 2f       	mov	r30, r25
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	e7 54       	subi	r30, 0x47	; 71
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	82 a5       	ldd	r24, Z+42	; 0x2a
    1466:	8c 32       	cpi	r24, 0x2C	; 44
    1468:	19 f4       	brne	.+6      	; 0x1470 <main+0x2e0>
                                                cmd_pos++; // put on start of cmd
    146a:	9f 5f       	subi	r25, 0xFF	; 255
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <main+0x2e4>
                                                break;
    146e:	90 e0       	ldi	r25, 0x00	; 0
                        // e.g udpcom version 10.0.0.24
                        if (verify_password((char *)&(buf[UDP_DATA_P]))){
                                // find the first comma which indicates 
                                // the start of a command:
                                cmd_pos=0;
                                while(cmd_pos<payloadlen){
    1470:	91 17       	cp	r25, r17
    1472:	98 f3       	brcs	.-26     	; 0x145a <main+0x2ca>
                                        }
                                }
                                // a command is one char and a value. At
                                // least 3 characters long. It has an '=' on
                                // position 2:
                                if (cmd_pos<2 || cmd_pos>payloadlen-3 || buf[UDP_DATA_P+cmd_pos+1]!='='){
    1474:	92 30       	cpi	r25, 0x02	; 2
    1476:	68 f0       	brcs	.+26     	; 0x1492 <main+0x302>
    1478:	e9 2f       	mov	r30, r25
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	81 2f       	mov	r24, r17
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 97       	sbiw	r24, 0x02	; 2
    1482:	e8 17       	cp	r30, r24
    1484:	f9 07       	cpc	r31, r25
    1486:	2c f4       	brge	.+10     	; 0x1492 <main+0x302>
    1488:	e7 54       	subi	r30, 0x47	; 71
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	83 a5       	ldd	r24, Z+43	; 0x2b
    148e:	8d 33       	cpi	r24, 0x3D	; 61
    1490:	21 f0       	breq	.+8      	; 0x149a <main+0x30a>
                                        strcpy(str,"e=no_cmd");
    1492:	c6 01       	movw	r24, r12
    1494:	68 e6       	ldi	r22, 0x68	; 104
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	1f c0       	rjmp	.+62     	; 0x14d8 <main+0x348>
                                        goto ANSWER;
                                }
                                // supported commands are
                                // t=1 t=0 t=?
                                if (buf[UDP_DATA_P+cmd_pos]=='t'){
    149a:	82 a5       	ldd	r24, Z+42	; 0x2a
    149c:	84 37       	cpi	r24, 0x74	; 116
    149e:	a9 f4       	brne	.+42     	; 0x14ca <main+0x33a>
                                        cmdval=buf[UDP_DATA_P+cmd_pos+2];
    14a0:	e4 a5       	ldd	r30, Z+44	; 0x2c
                                        if(cmdval=='1'){
    14a2:	e1 33       	cpi	r30, 0x31	; 49
    14a4:	11 f4       	brne	.+4      	; 0x14aa <main+0x31a>
                                                PORTC|= (1<<PORTC0);// transistor on
    14a6:	a8 9a       	sbi	0x15, 0	; 21
    14a8:	08 c0       	rjmp	.+16     	; 0x14ba <main+0x32a>
                                                strcpy(str,"t=1");
                                                goto ANSWER;
                                        }else if(cmdval=='0'){
    14aa:	e0 33       	cpi	r30, 0x30	; 48
    14ac:	11 f4       	brne	.+4      	; 0x14b2 <main+0x322>
                                                PORTC &= ~(1<<PORTC0);// transistor off
    14ae:	a8 98       	cbi	0x15, 0	; 21
    14b0:	08 c0       	rjmp	.+16     	; 0x14c2 <main+0x332>
                                                strcpy(str,"t=0");
                                                goto ANSWER;
                                        }else if(cmdval=='?'){
    14b2:	ef 33       	cpi	r30, 0x3F	; 63
    14b4:	51 f4       	brne	.+20     	; 0x14ca <main+0x33a>
                                                if (PORTC & (1<<PORTC0)){
    14b6:	a8 9b       	sbis	0x15, 0	; 21
    14b8:	04 c0       	rjmp	.+8      	; 0x14c2 <main+0x332>
                                                        strcpy(str,"t=1");
    14ba:	c6 01       	movw	r24, r12
    14bc:	61 e7       	ldi	r22, 0x71	; 113
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	0b c0       	rjmp	.+22     	; 0x14d8 <main+0x348>
                                                        goto ANSWER;
                                                }
                                                strcpy(str,"t=0");
    14c2:	c6 01       	movw	r24, r12
    14c4:	65 e7       	ldi	r22, 0x75	; 117
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	07 c0       	rjmp	.+14     	; 0x14d8 <main+0x348>
                                                goto ANSWER;
                                        }
                                }
                                strcpy(str,"e=no_such_cmd");
    14ca:	c6 01       	movw	r24, r12
    14cc:	69 e7       	ldi	r22, 0x79	; 121
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	03 c0       	rjmp	.+6      	; 0x14d8 <main+0x348>
                                goto ANSWER;
                        }
                        strcpy(str,"e=invalid_pw");
    14d2:	c6 01       	movw	r24, r12
    14d4:	67 e8       	ldi	r22, 0x87	; 135
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <strcpy>
ANSWER:
                        make_udp_reply_from_request(buf,str,strlen(str),MYUDPPORT);
    14dc:	f6 01       	movw	r30, r12
    14de:	01 90       	ld	r0, Z+
    14e0:	00 20       	and	r0, r0
    14e2:	e9 f7       	brne	.-6      	; 0x14de <main+0x34e>
    14e4:	31 97       	sbiw	r30, 0x01	; 1
    14e6:	ec 19       	sub	r30, r12
    14e8:	fd 09       	sbc	r31, r13
    14ea:	89 eb       	ldi	r24, 0xB9	; 185
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	b6 01       	movw	r22, r12
    14f0:	4e 2f       	mov	r20, r30
    14f2:	20 eb       	ldi	r18, 0xB0	; 176
    14f4:	34 e0       	ldi	r19, 0x04	; 4
    14f6:	0e 94 29 06 	call	0xc52	; 0xc52 <make_udp_reply_from_request>
    14fa:	a8 ce       	rjmp	.-688    	; 0x124c <main+0xbc>

000014fc <strcpy>:
    14fc:	fb 01       	movw	r30, r22
    14fe:	dc 01       	movw	r26, r24
    1500:	01 90       	ld	r0, Z+
    1502:	0d 92       	st	X+, r0
    1504:	00 20       	and	r0, r0
    1506:	e1 f7       	brne	.-8      	; 0x1500 <strcpy+0x4>
    1508:	08 95       	ret

0000150a <strncmp>:
    150a:	fb 01       	movw	r30, r22
    150c:	dc 01       	movw	r26, r24
    150e:	41 50       	subi	r20, 0x01	; 1
    1510:	50 40       	sbci	r21, 0x00	; 0
    1512:	30 f0       	brcs	.+12     	; 0x1520 <strncmp+0x16>
    1514:	8d 91       	ld	r24, X+
    1516:	01 90       	ld	r0, Z+
    1518:	80 19       	sub	r24, r0
    151a:	19 f4       	brne	.+6      	; 0x1522 <strncmp+0x18>
    151c:	00 20       	and	r0, r0
    151e:	b9 f7       	brne	.-18     	; 0x150e <strncmp+0x4>
    1520:	88 1b       	sub	r24, r24
    1522:	99 0b       	sbc	r25, r25
    1524:	08 95       	ret

00001526 <itoa>:
    1526:	fb 01       	movw	r30, r22
    1528:	9f 01       	movw	r18, r30
    152a:	e8 94       	clt
    152c:	42 30       	cpi	r20, 0x02	; 2
    152e:	c4 f0       	brlt	.+48     	; 0x1560 <itoa+0x3a>
    1530:	45 32       	cpi	r20, 0x25	; 37
    1532:	b4 f4       	brge	.+44     	; 0x1560 <itoa+0x3a>
    1534:	4a 30       	cpi	r20, 0x0A	; 10
    1536:	29 f4       	brne	.+10     	; 0x1542 <itoa+0x1c>
    1538:	97 fb       	bst	r25, 7
    153a:	1e f4       	brtc	.+6      	; 0x1542 <itoa+0x1c>
    153c:	90 95       	com	r25
    153e:	81 95       	neg	r24
    1540:	9f 4f       	sbci	r25, 0xFF	; 255
    1542:	64 2f       	mov	r22, r20
    1544:	77 27       	eor	r23, r23
    1546:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__udivmodhi4>
    154a:	80 5d       	subi	r24, 0xD0	; 208
    154c:	8a 33       	cpi	r24, 0x3A	; 58
    154e:	0c f0       	brlt	.+2      	; 0x1552 <itoa+0x2c>
    1550:	89 5d       	subi	r24, 0xD9	; 217
    1552:	81 93       	st	Z+, r24
    1554:	cb 01       	movw	r24, r22
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	a1 f7       	brne	.-24     	; 0x1542 <itoa+0x1c>
    155a:	16 f4       	brtc	.+4      	; 0x1560 <itoa+0x3a>
    155c:	5d e2       	ldi	r21, 0x2D	; 45
    155e:	51 93       	st	Z+, r21
    1560:	10 82       	st	Z, r1
    1562:	c9 01       	movw	r24, r18
    1564:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <strrev>

00001568 <strrev>:
    1568:	dc 01       	movw	r26, r24
    156a:	fc 01       	movw	r30, r24
    156c:	67 2f       	mov	r22, r23
    156e:	71 91       	ld	r23, Z+
    1570:	77 23       	and	r23, r23
    1572:	e1 f7       	brne	.-8      	; 0x156c <strrev+0x4>
    1574:	32 97       	sbiw	r30, 0x02	; 2
    1576:	04 c0       	rjmp	.+8      	; 0x1580 <strrev+0x18>
    1578:	7c 91       	ld	r23, X
    157a:	6d 93       	st	X+, r22
    157c:	70 83       	st	Z, r23
    157e:	62 91       	ld	r22, -Z
    1580:	ae 17       	cp	r26, r30
    1582:	bf 07       	cpc	r27, r31
    1584:	c8 f3       	brcs	.-14     	; 0x1578 <strrev+0x10>
    1586:	08 95       	ret

00001588 <__udivmodhi4>:
    1588:	aa 1b       	sub	r26, r26
    158a:	bb 1b       	sub	r27, r27
    158c:	51 e1       	ldi	r21, 0x11	; 17
    158e:	07 c0       	rjmp	.+14     	; 0x159e <__udivmodhi4_ep>

00001590 <__udivmodhi4_loop>:
    1590:	aa 1f       	adc	r26, r26
    1592:	bb 1f       	adc	r27, r27
    1594:	a6 17       	cp	r26, r22
    1596:	b7 07       	cpc	r27, r23
    1598:	10 f0       	brcs	.+4      	; 0x159e <__udivmodhi4_ep>
    159a:	a6 1b       	sub	r26, r22
    159c:	b7 0b       	sbc	r27, r23

0000159e <__udivmodhi4_ep>:
    159e:	88 1f       	adc	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	5a 95       	dec	r21
    15a4:	a9 f7       	brne	.-22     	; 0x1590 <__udivmodhi4_loop>
    15a6:	80 95       	com	r24
    15a8:	90 95       	com	r25
    15aa:	bc 01       	movw	r22, r24
    15ac:	cd 01       	movw	r24, r26
    15ae:	08 95       	ret

000015b0 <_exit>:
    15b0:	f8 94       	cli

000015b2 <__stop_program>:
    15b2:	ff cf       	rjmp	.-2      	; 0x15b2 <__stop_program>
