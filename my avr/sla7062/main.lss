
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000063c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006be  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  64:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <clock>:

#define delay 100
 

void clock(unsigned  int step)
{
  6c:	bc 01       	movw	r22, r24
unsigned int i;
 en_on;
  6e:	aa 98       	cbi	0x15, 2	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  70:	8c e3       	ldi	r24, 0x3C	; 60
  72:	28 2f       	mov	r18, r24
  74:	2a 95       	dec	r18
  76:	f1 f7       	brne	.-4      	; 0x74 <clock+0x8>
 _delay_us(15);
 clkwise;
  78:	a9 9a       	sbi	0x15, 1	; 21
  7a:	8a 95       	dec	r24
  7c:	f1 f7       	brne	.-4      	; 0x7a <clock+0xe>
  7e:	20 e0       	ldi	r18, 0x00	; 0
  80:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  82:	4c e2       	ldi	r20, 0x2C	; 44
  84:	51 e0       	ldi	r21, 0x01	; 1
  86:	0a c0       	rjmp	.+20     	; 0x9c <clock+0x30>
 _delay_us(15);
 for(i=0;i<step;i++)
 {
	 clk_on;
  88:	a8 9a       	sbi	0x15, 0	; 21
  8a:	fa 01       	movw	r30, r20
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <clock+0x20>
	 _delay_us(delay);
	 clk_off;
  90:	a8 98       	cbi	0x15, 0	; 21
  92:	fa 01       	movw	r30, r20
  94:	31 97       	sbiw	r30, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <clock+0x28>
unsigned int i;
 en_on;
 _delay_us(15);
 clkwise;
 _delay_us(15);
 for(i=0;i<step;i++)
  98:	2f 5f       	subi	r18, 0xFF	; 255
  9a:	3f 4f       	sbci	r19, 0xFF	; 255
  9c:	26 17       	cp	r18, r22
  9e:	37 07       	cpc	r19, r23
  a0:	98 f3       	brcs	.-26     	; 0x88 <clock+0x1c>
	 clk_on;
	 _delay_us(delay);
	 clk_off;
	 _delay_us(delay);
 }
en_off; 
  a2:	aa 9a       	sbi	0x15, 2	; 21
 
 

} 
  a4:	08 95       	ret

000000a6 <anticlock>:

void anticlock(unsigned  int step)
{
  a6:	bc 01       	movw	r22, r24
unsigned int i;
 en_on;
  a8:	aa 98       	cbi	0x15, 2	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  aa:	8c e3       	ldi	r24, 0x3C	; 60
  ac:	28 2f       	mov	r18, r24
  ae:	2a 95       	dec	r18
  b0:	f1 f7       	brne	.-4      	; 0xae <anticlock+0x8>
 _delay_us(15);
 anticlkwise;
  b2:	a9 98       	cbi	0x15, 1	; 21
  b4:	8a 95       	dec	r24
  b6:	f1 f7       	brne	.-4      	; 0xb4 <anticlock+0xe>
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  bc:	4c e2       	ldi	r20, 0x2C	; 44
  be:	51 e0       	ldi	r21, 0x01	; 1
  c0:	0a c0       	rjmp	.+20     	; 0xd6 <anticlock+0x30>
 _delay_us(15);
 for(i=0;i<step;i++)
 {
	 clk_on;
  c2:	a8 9a       	sbi	0x15, 0	; 21
  c4:	fa 01       	movw	r30, r20
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <anticlock+0x20>
	 _delay_us(delay);
	 clk_off;
  ca:	a8 98       	cbi	0x15, 0	; 21
  cc:	fa 01       	movw	r30, r20
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <anticlock+0x28>
unsigned int i;
 en_on;
 _delay_us(15);
 anticlkwise;
 _delay_us(15);
 for(i=0;i<step;i++)
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
  d6:	26 17       	cp	r18, r22
  d8:	37 07       	cpc	r19, r23
  da:	98 f3       	brcs	.-26     	; 0xc2 <anticlock+0x1c>
	 clk_on;
	 _delay_us(delay);
	 clk_off;
	 _delay_us(delay);
 }
en_off; 
  dc:	aa 9a       	sbi	0x15, 2	; 21
 
 

}
  de:	08 95       	ret

000000e0 <stop>:
void stop(void)
{
 en_off;
  e0:	aa 9a       	sbi	0x15, 2	; 21
 clk_off;
  e2:	a8 98       	cbi	0x15, 0	; 21
 anticlkwise;
  e4:	a9 98       	cbi	0x15, 1	; 21
}
  e6:	08 95       	ret

000000e8 <main>:


int main(void)
{
DDRA=0XFF;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	8a bb       	out	0x1a, r24	; 26
DDRC=0XFF;
  ec:	84 bb       	out	0x14, r24	; 20
DDRD=0X00;
  ee:	11 ba       	out	0x11, r1	; 17

PORTA=0X00;
  f0:	1b ba       	out	0x1b, r1	; 27
PORTC=0X00;
  f2:	15 ba       	out	0x15, r1	; 21
PORTD=0XFF;
  f4:	82 bb       	out	0x12, r24	; 18

	while(1)
	{
		 if(bit_is_clear(PIND,4))
  f6:	84 99       	sbic	0x10, 4	; 16
  f8:	05 c0       	rjmp	.+10     	; 0x104 <main+0x1c>
		 {
		  
		  clock(20);
  fa:	84 e1       	ldi	r24, 0x14	; 20
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 36 00 	call	0x6c	; 0x6c <clock>
 102:	f9 cf       	rjmp	.-14     	; 0xf6 <main+0xe>
		 }
		 else if(bit_is_clear(PIND,5))
 104:	85 99       	sbic	0x10, 5	; 16
 106:	05 c0       	rjmp	.+10     	; 0x112 <main+0x2a>
		 {
		  anticlock(20);
 108:	84 e1       	ldi	r24, 0x14	; 20
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <anticlock>
 110:	f2 cf       	rjmp	.-28     	; 0xf6 <main+0xe>
 

}
void stop(void)
{
 en_off;
 112:	aa 9a       	sbi	0x15, 2	; 21
 clk_off;
 114:	a8 98       	cbi	0x15, 0	; 21
 anticlkwise;
 116:	a9 98       	cbi	0x15, 1	; 21
 118:	ee cf       	rjmp	.-36     	; 0xf6 <main+0xe>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
