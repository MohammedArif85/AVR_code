
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002a  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000016b  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ee  00000000  00000000  000002e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001d8  00000000  00000000  000003d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000005b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e7  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000080  00000000  00000000  000006c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000747  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
#include<avr/interrupt.h>
#include<util/delay.h>
#include<compat/deprecated.h>
//static volatile uint8_t led;
ISR (INT0_vect)
{ if (bit_is_clear(PINA,6))
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	ce 99       	sbic	0x19, 6	; 25
  78:	02 c0       	rjmp	.+4      	; 0x7e <__vector_1+0x12>
sbi(PORTA,6);
  7a:	de 9a       	sbi	0x1b, 6	; 27
  7c:	01 c0       	rjmp	.+2      	; 0x80 <__vector_1+0x14>
else
cbi(PORTA,6);
  7e:	de 98       	cbi	0x1b, 6	; 27
}
  80:	0f 90       	pop	r0
  82:	0f be       	out	0x3f, r0	; 63
  84:	0f 90       	pop	r0
  86:	1f 90       	pop	r1
  88:	18 95       	reti

0000008a <main>:
int main(void)
{
DDRA=0xF0;
  8a:	80 ef       	ldi	r24, 0xF0	; 240
  8c:	8a bb       	out	0x1a, r24	; 26
DDRB=0xFB;
  8e:	8b ef       	ldi	r24, 0xFB	; 251
  90:	87 bb       	out	0x17, r24	; 23
DDRD=0xF1;
  92:	81 ef       	ldi	r24, 0xF1	; 241
  94:	81 bb       	out	0x11, r24	; 17
PORTA=0x00;
  96:	1b ba       	out	0x1b, r1	; 27
PORTB=0x04;
  98:	84 e0       	ldi	r24, 0x04	; 4
  9a:	88 bb       	out	0x18, r24	; 24
PORTD=0x0D;
  9c:	8d e0       	ldi	r24, 0x0D	; 13
  9e:	82 bb       	out	0x12, r24	; 18
sbi(PORTA,4);
  a0:	dc 9a       	sbi	0x1b, 4	; 27
sbi(PORTB,2);
  a2:	c2 9a       	sbi	0x18, 2	; 24
sbi(PORTD,1);
  a4:	91 9a       	sbi	0x12, 1	; 18
sbi(PORTD,2);
  a6:	92 9a       	sbi	0x12, 2	; 18
sbi(PORTD,3);
  a8:	93 9a       	sbi	0x12, 3	; 18
GICR=(1<<INT0);
  aa:	80 e4       	ldi	r24, 0x40	; 64
  ac:	8b bf       	out	0x3b, r24	; 59
MCUCR=(1<<ISC01);
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	85 bf       	out	0x35, r24	; 53
sei();
  b2:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b4:	28 ec       	ldi	r18, 0xC8	; 200
  b6:	30 e0       	ldi	r19, 0x00	; 0
for(;;)
{
 sbi(PORTA,5);
  b8:	dd 9a       	sbi	0x1b, 5	; 27
  ba:	84 ec       	ldi	r24, 0xC4	; 196
  bc:	99 e0       	ldi	r25, 0x09	; 9
  be:	f9 01       	movw	r30, r18
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x36>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c6:	d9 f7       	brne	.-10     	; 0xbe <main+0x34>
 _delay_ms(250);
 cbi(PORTA,5);
  c8:	dd 98       	cbi	0x1b, 5	; 27
  ca:	84 ec       	ldi	r24, 0xC4	; 196
  cc:	99 e0       	ldi	r25, 0x09	; 9
  ce:	f9 01       	movw	r30, r18
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d6:	d9 f7       	brne	.-10     	; 0xce <main+0x44>
  d8:	ef cf       	rjmp	.-34     	; 0xb8 <main+0x2e>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
