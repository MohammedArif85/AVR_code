
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000002ba  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000065  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000526  00000000  00000000  000003c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000211  00000000  00000000  000008ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004a2  00000000  00000000  00000afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000117  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000193  00000000  00000000  00001137  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  000012ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  7a:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <USART_INIT>:
/*
===================================================================
SET BAUD RATE
===================================================================
*/
	UBRRL=UBRRVAL;
  82:	87 e6       	ldi	r24, 0x67	; 103
  84:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);
  86:	10 bc       	out	0x20, r1	; 32
/*===================================================================
SET DATAFRAME FORMAT : ASYNCHRONOUS MODE, NO PARITY, 1 START BIT, 8BIT
                       SIZE DATA	
===================================================================
*/
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
  88:	86 e8       	ldi	r24, 0x86	; 134
  8a:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN);
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	8a b9       	out	0x0a, r24	; 10
}
  90:	08 95       	ret

00000092 <rswritechar>:
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <rswritechar>
	UDR=c; //SEND RECEIVED DATA BACK
  96:	8c b9       	out	0x0c, r24	; 12
}
  98:	08 95       	ret

0000009a <rsreadchar>:
/*
===================================================================
WAIT UNTIL DATA IS AVAILABLE
===================================================================
*/
	while(!(UCSRA&(1<<RXC)))
  9a:	5f 9b       	sbis	0x0b, 7	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <rsreadchar>
	{	}
	return UDR;
  9e:	8c b1       	in	r24, 0x0c	; 12
}
  a0:	08 95       	ret

000000a2 <rsstr>:
===================================================================
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
  a2:	fc 01       	movw	r30, r24
  a4:	04 c0       	rjmp	.+8      	; 0xae <rsstr+0xc>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <rsstr+0x4>
	UDR=c; //SEND RECEIVED DATA BACK
  aa:	8c b9       	out	0x0c, r24	; 12
void rsstr(char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
  ac:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
	while(*s)
  ae:	80 81       	ld	r24, Z
  b0:	88 23       	and	r24, r24
  b2:	c9 f7       	brne	.-14     	; 0xa6 <rsstr+0x4>
	{
		rswritechar(*s);
		s++;
	}
  b4:	08 95       	ret

000000b6 <adc>:
#include<stdio.h>
#include<compat/deprecated.h>
#include "uart.h"
unsigned int adc(unsigned char channel)
{  unsigned int val;
   ADMUX=0x40+channel;
  b6:	80 5c       	subi	r24, 0xC0	; 192
  b8:	87 b9       	out	0x07, r24	; 7
   ADCSRA=(1<<ADEN);
  ba:	80 e8       	ldi	r24, 0x80	; 128
  bc:	86 b9       	out	0x06, r24	; 6
   ADCSRA|=(1<<ADSC);
  be:	36 9a       	sbi	0x06, 6	; 6
    ADCSRA|=0x07;
  c0:	86 b1       	in	r24, 0x06	; 6
  c2:	87 60       	ori	r24, 0x07	; 7
  c4:	86 b9       	out	0x06, r24	; 6
   while(bit_is_clear(ADCSRA,ADIF));
  c6:	34 9b       	sbis	0x06, 4	; 6
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <adc+0x10>
   val=ADCW; 
  ca:	44 b1       	in	r20, 0x04	; 4
  cc:	55 b1       	in	r21, 0x05	; 5
  ce:	28 ee       	ldi	r18, 0xE8	; 232
  d0:	33 e0       	ldi	r19, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d2:	80 e9       	ldi	r24, 0x90	; 144
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	fc 01       	movw	r30, r24
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <adc+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e0:	d1 f7       	brne	.-12     	; 0xd6 <adc+0x20>
   _delay_ms(100);
   return val;
}
  e2:	ca 01       	movw	r24, r20
  e4:	08 95       	ret

000000e6 <ascii>:
void ascii(unsigned int v)
{
  e6:	ff 92       	push	r15
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	ec 01       	movw	r28, r24
 unsigned char a,b,c,d;
 a=v%10;
 v=v/10;
  f2:	6a e0       	ldi	r22, 0x0A	; 10
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	0e 94 47 01 	call	0x28e	; 0x28e <__udivmodhi4>
  fa:	06 2f       	mov	r16, r22
  fc:	f7 2e       	mov	r15, r23
 b=v%10;
 v=v/10;
  fe:	86 2f       	mov	r24, r22
 100:	97 2f       	mov	r25, r23
 102:	6a e0       	ldi	r22, 0x0A	; 10
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	0e 94 47 01 	call	0x28e	; 0x28e <__udivmodhi4>
 10a:	46 2f       	mov	r20, r22
 10c:	17 2f       	mov	r17, r23
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 10e:	5d 9b       	sbis	0x0b, 5	; 11
 110:	fe cf       	rjmp	.-4      	; 0x10e <ascii+0x28>
 c=v%10;
 v=v/10;
 d=v%10;
 v=v/10;
 rswritechar(0x30+d);_delay_ms(100);
 112:	84 2f       	mov	r24, r20
 114:	91 2f       	mov	r25, r17
 116:	6a e0       	ldi	r22, 0x0A	; 10
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	0e 94 47 01 	call	0x28e	; 0x28e <__udivmodhi4>
 11e:	cb 01       	movw	r24, r22
 120:	6a e0       	ldi	r22, 0x0A	; 10
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	0e 94 47 01 	call	0x28e	; 0x28e <__udivmodhi4>
 128:	80 5d       	subi	r24, 0xD0	; 208
	UDR=c; //SEND RECEIVED DATA BACK
 12a:	8c b9       	out	0x0c, r24	; 12
 12c:	88 ee       	ldi	r24, 0xE8	; 232
 12e:	93 e0       	ldi	r25, 0x03	; 3
 130:	20 e9       	ldi	r18, 0x90	; 144
 132:	31 e0       	ldi	r19, 0x01	; 1
 134:	f9 01       	movw	r30, r18
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <ascii+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 13a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13c:	d9 f7       	brne	.-10     	; 0x134 <ascii+0x4e>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 13e:	5d 9b       	sbis	0x0b, 5	; 11
 140:	fe cf       	rjmp	.-4      	; 0x13e <ascii+0x58>
 rswritechar(0x30+c);_delay_ms(100);
 142:	84 2f       	mov	r24, r20
 144:	91 2f       	mov	r25, r17
 146:	6a e0       	ldi	r22, 0x0A	; 10
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	0e 94 47 01 	call	0x28e	; 0x28e <__udivmodhi4>
 14e:	80 5d       	subi	r24, 0xD0	; 208
	UDR=c; //SEND RECEIVED DATA BACK
 150:	8c b9       	out	0x0c, r24	; 12
 152:	88 ee       	ldi	r24, 0xE8	; 232
 154:	93 e0       	ldi	r25, 0x03	; 3
 156:	20 e9       	ldi	r18, 0x90	; 144
 158:	31 e0       	ldi	r19, 0x01	; 1
 15a:	f9 01       	movw	r30, r18
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <ascii+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 160:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 162:	d9 f7       	brne	.-10     	; 0x15a <ascii+0x74>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 164:	5d 9b       	sbis	0x0b, 5	; 11
 166:	fe cf       	rjmp	.-4      	; 0x164 <ascii+0x7e>
 rswritechar(0x30+b);_delay_ms(100);
 168:	80 2f       	mov	r24, r16
 16a:	9f 2d       	mov	r25, r15
 16c:	6a e0       	ldi	r22, 0x0A	; 10
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	0e 94 47 01 	call	0x28e	; 0x28e <__udivmodhi4>
 174:	80 5d       	subi	r24, 0xD0	; 208
	UDR=c; //SEND RECEIVED DATA BACK
 176:	8c b9       	out	0x0c, r24	; 12
 178:	88 ee       	ldi	r24, 0xE8	; 232
 17a:	93 e0       	ldi	r25, 0x03	; 3
 17c:	20 e9       	ldi	r18, 0x90	; 144
 17e:	31 e0       	ldi	r19, 0x01	; 1
 180:	f9 01       	movw	r30, r18
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <ascii+0x9c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 186:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 188:	d9 f7       	brne	.-10     	; 0x180 <ascii+0x9a>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 18a:	5d 9b       	sbis	0x0b, 5	; 11
 18c:	fe cf       	rjmp	.-4      	; 0x18a <ascii+0xa4>
 rswritechar(0x30+a);_delay_ms(100);
 18e:	ce 01       	movw	r24, r28
 190:	6a e0       	ldi	r22, 0x0A	; 10
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	0e 94 47 01 	call	0x28e	; 0x28e <__udivmodhi4>
 198:	80 5d       	subi	r24, 0xD0	; 208
	UDR=c; //SEND RECEIVED DATA BACK
 19a:	8c b9       	out	0x0c, r24	; 12
 19c:	88 ee       	ldi	r24, 0xE8	; 232
 19e:	93 e0       	ldi	r25, 0x03	; 3
 1a0:	20 e9       	ldi	r18, 0x90	; 144
 1a2:	31 e0       	ldi	r19, 0x01	; 1
 1a4:	f9 01       	movw	r30, r18
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <ascii+0xc0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ac:	d9 f7       	brne	.-10     	; 0x1a4 <ascii+0xbe>
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	08 95       	ret

000001ba <main>:
int main(void)
{unsigned char buf[15];
 1ba:	cf 92       	push	r12
 1bc:	df 92       	push	r13
 1be:	ef 92       	push	r14
 1c0:	ff 92       	push	r15
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 unsigned int val,temp,light;
DDRA=0xF0;
 1ca:	80 ef       	ldi	r24, 0xF0	; 240
 1cc:	8a bb       	out	0x1a, r24	; 26
DDRB=0xFF;
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	87 bb       	out	0x17, r24	; 23
PORTB=0xFF;
 1d2:	88 bb       	out	0x18, r24	; 24
PORTA=0x00;
 1d4:	1b ba       	out	0x1b, r1	; 27
/*
===================================================================
SET BAUD RATE
===================================================================
*/
	UBRRL=UBRRVAL;
 1d6:	87 e6       	ldi	r24, 0x67	; 103
 1d8:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);
 1da:	10 bc       	out	0x20, r1	; 32
/*===================================================================
SET DATAFRAME FORMAT : ASYNCHRONOUS MODE, NO PARITY, 1 START BIT, 8BIT
                       SIZE DATA	
===================================================================
*/
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
 1dc:	86 e8       	ldi	r24, 0x86	; 134
 1de:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN);
 1e0:	88 e1       	ldi	r24, 0x18	; 24
 1e2:	8a b9       	out	0x0a, r24	; 10
 1e4:	e0 e6       	ldi	r30, 0x60	; 96
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <main+0x38>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 1ea:	5d 9b       	sbis	0x0b, 5	; 11
 1ec:	fe cf       	rjmp	.-4      	; 0x1ea <main+0x30>
	UDR=c; //SEND RECEIVED DATA BACK
 1ee:	8c b9       	out	0x0c, r24	; 12
void rsstr(char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
 1f0:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
	while(*s)
 1f2:	80 81       	ld	r24, Z
 1f4:	88 23       	and	r24, r24
 1f6:	c9 f7       	brne	.-14     	; 0x1ea <main+0x30>
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
	UDR=c; //SEND RECEIVED DATA BACK
 1f8:	2c e4       	ldi	r18, 0x4C	; 76
 1fa:	c2 2e       	mov	r12, r18
 1fc:	90 e9       	ldi	r25, 0x90	; 144
 1fe:	e9 2e       	mov	r14, r25
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	f9 2e       	mov	r15, r25
 204:	84 e5       	ldi	r24, 0x54	; 84
 206:	d8 2e       	mov	r13, r24
USART_INIT();
rsstr("DATA acquisition\r\n");
 while(1)
 { light=adc(0);
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 5b 00 	call	0xb6	; 0xb6 <adc>
 20e:	ec 01       	movw	r28, r24
   temp=adc(1); 
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 5b 00 	call	0xb6	; 0xb6 <adc>
 216:	8c 01       	movw	r16, r24
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 218:	5d 9b       	sbis	0x0b, 5	; 11
 21a:	fe cf       	rjmp	.-4      	; 0x218 <main+0x5e>
	UDR=c; //SEND RECEIVED DATA BACK
 21c:	cc b8       	out	0x0c, r12	; 12
   rswritechar('L');
   ascii(light);_delay_ms(2000);
 21e:	ce 01       	movw	r24, r28
 220:	0e 94 73 00 	call	0xe6	; 0xe6 <ascii>
 224:	80 e2       	ldi	r24, 0x20	; 32
 226:	9e e4       	ldi	r25, 0x4E	; 78
 228:	f7 01       	movw	r30, r14
 22a:	31 97       	sbiw	r30, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <main+0x70>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 230:	d9 f7       	brne	.-10     	; 0x228 <main+0x6e>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 232:	5d 9b       	sbis	0x0b, 5	; 11
 234:	fe cf       	rjmp	.-4      	; 0x232 <main+0x78>
	UDR=c; //SEND RECEIVED DATA BACK
 236:	dc b8       	out	0x0c, r13	; 12
   rswritechar('T');
   ascii(temp);_delay_ms(2000);
 238:	c8 01       	movw	r24, r16
 23a:	0e 94 73 00 	call	0xe6	; 0xe6 <ascii>
 23e:	80 e2       	ldi	r24, 0x20	; 32
 240:	9e e4       	ldi	r25, 0x4E	; 78
 242:	f7 01       	movw	r30, r14
 244:	31 97       	sbiw	r30, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <main+0x8a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 248:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 24a:	d9 f7       	brne	.-10     	; 0x242 <main+0x88>
   val=light;
   
   if(val<512)
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	c0 30       	cpi	r28, 0x00	; 0
 250:	d8 07       	cpc	r29, r24
 252:	18 f4       	brcc	.+6      	; 0x25a <main+0xa0>
   {
   sbi(PORTA,4);
 254:	dc 9a       	sbi	0x1b, 4	; 27
    cbi(PORTA,5);
 256:	dd 98       	cbi	0x1b, 5	; 27
 258:	06 c0       	rjmp	.+12     	; 0x266 <main+0xac>
    cbi(PORTA,6);
    cbi(PORTA,7);
   }
   else if(val<600)
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	c8 35       	cpi	r28, 0x58	; 88
 25e:	d8 07       	cpc	r29, r24
 260:	20 f4       	brcc	.+8      	; 0x26a <main+0xb0>
   {
   sbi(PORTA,5);
 262:	dd 9a       	sbi	0x1b, 5	; 27
    cbi(PORTA,4);
 264:	dc 98       	cbi	0x1b, 4	; 27
    cbi(PORTA,6);
 266:	de 98       	cbi	0x1b, 6	; 27
 268:	07 c0       	rjmp	.+14     	; 0x278 <main+0xbe>
    cbi(PORTA,7);
   }
   else if(val<700)
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	cc 3b       	cpi	r28, 0xBC	; 188
 26e:	d8 07       	cpc	r29, r24
 270:	28 f4       	brcc	.+10     	; 0x27c <main+0xc2>
   {
   sbi(PORTA,6); cbi(PORTA,5);
 272:	de 9a       	sbi	0x1b, 6	; 27
 274:	dd 98       	cbi	0x1b, 5	; 27
    cbi(PORTA,4);
 276:	dc 98       	cbi	0x1b, 4	; 27
    cbi(PORTA,7);
 278:	df 98       	cbi	0x1b, 7	; 27
 27a:	c6 cf       	rjmp	.-116    	; 0x208 <main+0x4e>
   }
   else if(val<1000)
 27c:	c8 5e       	subi	r28, 0xE8	; 232
 27e:	d3 40       	sbci	r29, 0x03	; 3
 280:	08 f0       	brcs	.+2      	; 0x284 <main+0xca>
 282:	c2 cf       	rjmp	.-124    	; 0x208 <main+0x4e>
   {
   sbi(PORTA,7);
 284:	df 9a       	sbi	0x1b, 7	; 27
    cbi(PORTA,5);
 286:	dd 98       	cbi	0x1b, 5	; 27
    cbi(PORTA,6);
 288:	de 98       	cbi	0x1b, 6	; 27
    cbi(PORTA,4);
 28a:	dc 98       	cbi	0x1b, 4	; 27
 28c:	bd cf       	rjmp	.-134    	; 0x208 <main+0x4e>

0000028e <__udivmodhi4>:
 28e:	aa 1b       	sub	r26, r26
 290:	bb 1b       	sub	r27, r27
 292:	51 e1       	ldi	r21, 0x11	; 17
 294:	07 c0       	rjmp	.+14     	; 0x2a4 <__udivmodhi4_ep>

00000296 <__udivmodhi4_loop>:
 296:	aa 1f       	adc	r26, r26
 298:	bb 1f       	adc	r27, r27
 29a:	a6 17       	cp	r26, r22
 29c:	b7 07       	cpc	r27, r23
 29e:	10 f0       	brcs	.+4      	; 0x2a4 <__udivmodhi4_ep>
 2a0:	a6 1b       	sub	r26, r22
 2a2:	b7 0b       	sbc	r27, r23

000002a4 <__udivmodhi4_ep>:
 2a4:	88 1f       	adc	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	5a 95       	dec	r21
 2aa:	a9 f7       	brne	.-22     	; 0x296 <__udivmodhi4_loop>
 2ac:	80 95       	com	r24
 2ae:	90 95       	com	r25
 2b0:	bc 01       	movw	r22, r24
 2b2:	cd 01       	movw	r24, r26
 2b4:	08 95       	ret

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
