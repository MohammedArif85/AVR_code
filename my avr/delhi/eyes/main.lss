
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000490  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000490  00000524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800066  00800066  0000052a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000052a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000be  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000713  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000224  00000000  00000000  00000d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000713  00000000  00000000  00000f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000175  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000293  00000000  00000000  00001869  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 09 02 	call	0x412	; 0x412 <main>
  8a:	0c 94 46 02 	jmp	0x48c	; 0x48c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc>:



uint8_t adc(unsigned char channel)
{uint8_t adc_value;
         ADMUX = 0x60|channel; // channel 0, left-justified result
  92:	80 66       	ori	r24, 0x60	; 96
  94:	87 b9       	out	0x07, r24	; 7
        ADCSRA = _BV(ADEN) | _BV(ADPS2)| _BV(ADPS0);     
  96:	85 e8       	ldi	r24, 0x85	; 133
  98:	86 b9       	out	0x06, r24	; 6
        /* read output from ADC */
        ADCSRA |= _BV(ADSC);
  9a:	36 9a       	sbi	0x06, 6	; 6
        while (!(ADCSRA & _BV(ADIF)));
  9c:	34 9b       	sbis	0x06, 4	; 6
  9e:	fe cf       	rjmp	.-4      	; 0x9c <adc+0xa>
        adc_value = ADCH;
  a0:	85 b1       	in	r24, 0x05	; 5
        ADCSRA |= _BV(ADIF);
  a2:	34 9a       	sbi	0x06, 4	; 6
        
        return adc_value;

}
  a4:	08 95       	ret

000000a6 <eye_read>:


void eye_read()
{ uint8_t adc_value,i;
   Reye=0;
  a6:	10 92 6b 00 	sts	0x006B, r1
  aa:	e6 e6       	ldi	r30, 0x66	; 102
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	20 e0       	ldi	r18, 0x00	; 0


uint8_t adc(unsigned char channel)
{uint8_t adc_value;
         ADMUX = 0x60|channel; // channel 0, left-justified result
        ADCSRA = _BV(ADEN) | _BV(ADPS2)| _BV(ADPS0);     
  b0:	35 e8       	ldi	r19, 0x85	; 133
void eye_read()
{ uint8_t adc_value,i;
   Reye=0;
   for (i=0; i<5; i++)
                {
                        Reye = Reye << 1;
  b2:	80 91 6b 00 	lds	r24, 0x006B
  b6:	88 0f       	add	r24, r24
  b8:	80 93 6b 00 	sts	0x006B, r24



uint8_t adc(unsigned char channel)
{uint8_t adc_value;
         ADMUX = 0x60|channel; // channel 0, left-justified result
  bc:	82 2f       	mov	r24, r18
  be:	80 66       	ori	r24, 0x60	; 96
  c0:	87 b9       	out	0x07, r24	; 7
        ADCSRA = _BV(ADEN) | _BV(ADPS2)| _BV(ADPS0);     
  c2:	36 b9       	out	0x06, r19	; 6
        /* read output from ADC */
        ADCSRA |= _BV(ADSC);
  c4:	36 9a       	sbi	0x06, 6	; 6
        while (!(ADCSRA & _BV(ADIF)));
  c6:	34 9b       	sbis	0x06, 4	; 6
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <eye_read+0x20>
        adc_value = ADCH;
  ca:	95 b1       	in	r25, 0x05	; 5
        ADCSRA |= _BV(ADIF);
  cc:	34 9a       	sbi	0x06, 4	; 6
   Reye=0;
   for (i=0; i<5; i++)
                {
                        Reye = Reye << 1;
                        adc_value = adc(i);
                        if (adc_value >= midpoint[i]) 
  ce:	80 81       	ld	r24, Z
  d0:	98 17       	cp	r25, r24
  d2:	20 f0       	brcs	.+8      	; 0xdc <eye_read+0x36>
                        {
                                Reye |= _BV(0);  
  d4:	80 91 6b 00 	lds	r24, 0x006B
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	03 c0       	rjmp	.+6      	; 0xe2 <eye_read+0x3c>
                        }
                        else
                        {
                                Reye &= ~_BV(0);
  dc:	80 91 6b 00 	lds	r24, 0x006B
  e0:	8e 7f       	andi	r24, 0xFE	; 254
  e2:	80 93 6b 00 	sts	0x006B, r24


void eye_read()
{ uint8_t adc_value,i;
   Reye=0;
   for (i=0; i<5; i++)
  e6:	2f 5f       	subi	r18, 0xFF	; 255
  e8:	31 96       	adiw	r30, 0x01	; 1
  ea:	25 30       	cpi	r18, 0x05	; 5
  ec:	11 f7       	brne	.-60     	; 0xb2 <eye_read+0xc>
                        else
                        {
                                Reye &= ~_BV(0);
                        }
                }
 if(Reye&0x01)
  ee:	80 91 6b 00 	lds	r24, 0x006B
  f2:	80 ff       	sbrs	r24, 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <eye_read+0x54>
 sbi(PORTB,0);
  f6:	c0 9a       	sbi	0x18, 0	; 24
  f8:	01 c0       	rjmp	.+2      	; 0xfc <eye_read+0x56>
 else
 cbi(PORTB,0);
  fa:	c0 98       	cbi	0x18, 0	; 24
 if(Reye&0x02)
  fc:	80 91 6b 00 	lds	r24, 0x006B
 100:	81 ff       	sbrs	r24, 1
 102:	02 c0       	rjmp	.+4      	; 0x108 <eye_read+0x62>
 sbi(PORTB,1);
 104:	c1 9a       	sbi	0x18, 1	; 24
 106:	01 c0       	rjmp	.+2      	; 0x10a <eye_read+0x64>
 else
 cbi(PORTB,1);
 108:	c1 98       	cbi	0x18, 1	; 24
 if(Reye&0x04)
 10a:	80 91 6b 00 	lds	r24, 0x006B
 10e:	82 ff       	sbrs	r24, 2
 110:	02 c0       	rjmp	.+4      	; 0x116 <eye_read+0x70>
 sbi(PORTB,2);
 112:	c2 9a       	sbi	0x18, 2	; 24
 114:	01 c0       	rjmp	.+2      	; 0x118 <eye_read+0x72>
 else
 cbi(PORTB,2);
 116:	c2 98       	cbi	0x18, 2	; 24
 if(Reye&0x08)
 118:	80 91 6b 00 	lds	r24, 0x006B
 11c:	83 ff       	sbrs	r24, 3
 11e:	02 c0       	rjmp	.+4      	; 0x124 <eye_read+0x7e>
 sbi(PORTB,5);
 120:	c5 9a       	sbi	0x18, 5	; 24
 122:	01 c0       	rjmp	.+2      	; 0x126 <eye_read+0x80>
 else
 cbi(PORTB,5);
 124:	c5 98       	cbi	0x18, 5	; 24
 if(Reye&0x10)
 126:	80 91 6b 00 	lds	r24, 0x006B
 12a:	84 ff       	sbrs	r24, 4
 12c:	02 c0       	rjmp	.+4      	; 0x132 <eye_read+0x8c>
 sbi(PORTB,6);
 12e:	c6 9a       	sbi	0x18, 6	; 24
 130:	08 95       	ret
 else
 cbi(PORTB,6);
 132:	c6 98       	cbi	0x18, 6	; 24
 134:	08 95       	ret

00000136 <motor_pwm_init>:

}
void motor_pwm_init()
{DDRC=0xFF;
 136:	9f ef       	ldi	r25, 0xFF	; 255
 138:	94 bb       	out	0x14, r25	; 20
 PORTC=0x00;
 13a:	15 ba       	out	0x15, r1	; 21
 DDRB=0xFF;
 13c:	97 bb       	out	0x17, r25	; 23
 DDRD=0xF0;
 13e:	80 ef       	ldi	r24, 0xF0	; 240
 140:	81 bb       	out	0x11, r24	; 17
 PORTD=0xFF;
 142:	92 bb       	out	0x12, r25	; 18

 PORTC=forw;
 144:	80 e5       	ldi	r24, 0x50	; 80
 146:	85 bb       	out	0x15, r24	; 21
 TCCR0=0x6D;
 148:	8d e6       	ldi	r24, 0x6D	; 109
 14a:	83 bf       	out	0x33, r24	; 51
 TCNT0=0x00;
 14c:	12 be       	out	0x32, r1	; 50
 TCCR2=0x6F;
 14e:	8f e6       	ldi	r24, 0x6F	; 111
 150:	85 bd       	out	0x25, r24	; 37
 TCNT2=0x00;
 152:	14 bc       	out	0x24, r1	; 36
}
 154:	08 95       	ret

00000156 <steer>:



void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
 156:	83 bd       	out	0x23, r24	; 35
 OCR0=r;
 158:	6c bf       	out	0x3c, r22	; 60
 
}
 15a:	08 95       	ret

0000015c <drive_motor>:



void drive_motor(unsigned char Lspeed,unsigned char Rspeed) 
{
 PORTC=forw;
 15c:	90 e5       	ldi	r25, 0x50	; 80
 15e:	95 bb       	out	0x15, r25	; 21



void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
 160:	83 bd       	out	0x23, r24	; 35
 OCR0=r;
 162:	6c bf       	out	0x3c, r22	; 60
void drive_motor(unsigned char Lspeed,unsigned char Rspeed) 
{
 PORTC=forw;
 steer(Lspeed,Rspeed);//L-R
 
}
 164:	08 95       	ret

00000166 <pos_calculate>:
 OCR2=l;
 OCR0=r;
 
}
void pos_calculate()
{unsigned char r,side;
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 side=(Reye & 0b00011111);
 16c:	80 91 6b 00 	lds	r24, 0x006B
 170:	8f 71       	andi	r24, 0x1F	; 31
 r=(Reye & 0b00011111);
 172:	90 91 6b 00 	lds	r25, 0x006B
 
 if(side!=0b00000000 && side!=0b00011111) 
 176:	88 23       	and	r24, r24
 178:	09 f4       	brne	.+2      	; 0x17c <pos_calculate+0x16>
 17a:	69 c0       	rjmp	.+210    	; 0x24e <pos_calculate+0xe8>
 17c:	8f 31       	cpi	r24, 0x1F	; 31
 17e:	99 f1       	breq	.+102    	; 0x1e6 <pos_calculate+0x80>
 {
 switch(r)
 180:	89 2f       	mov	r24, r25
 182:	8f 71       	andi	r24, 0x1F	; 31
 184:	81 31       	cpi	r24, 0x11	; 17
 186:	11 f1       	breq	.+68     	; 0x1cc <pos_calculate+0x66>
 188:	82 31       	cpi	r24, 0x12	; 18
 18a:	40 f4       	brcc	.+16     	; 0x19c <pos_calculate+0x36>
 18c:	87 30       	cpi	r24, 0x07	; 7
 18e:	a1 f0       	breq	.+40     	; 0x1b8 <pos_calculate+0x52>
 190:	80 31       	cpi	r24, 0x10	; 16
 192:	e1 f0       	breq	.+56     	; 0x1cc <pos_calculate+0x66>
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	09 f0       	breq	.+2      	; 0x19a <pos_calculate+0x34>
 198:	8a c0       	rjmp	.+276    	; 0x2ae <pos_calculate+0x148>
 19a:	11 c0       	rjmp	.+34     	; 0x1be <pos_calculate+0x58>
 19c:	88 31       	cpi	r24, 0x18	; 24
 19e:	c9 f0       	breq	.+50     	; 0x1d2 <pos_calculate+0x6c>
 1a0:	89 31       	cpi	r24, 0x19	; 25
 1a2:	20 f4       	brcc	.+8      	; 0x1ac <pos_calculate+0x46>
 1a4:	83 31       	cpi	r24, 0x13	; 19
 1a6:	09 f0       	breq	.+2      	; 0x1aa <pos_calculate+0x44>
 1a8:	82 c0       	rjmp	.+260    	; 0x2ae <pos_calculate+0x148>
 1aa:	10 c0       	rjmp	.+32     	; 0x1cc <pos_calculate+0x66>
 1ac:	89 31       	cpi	r24, 0x19	; 25
 1ae:	71 f0       	breq	.+28     	; 0x1cc <pos_calculate+0x66>
 1b0:	8c 31       	cpi	r24, 0x1C	; 28
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <pos_calculate+0x50>
 1b4:	7c c0       	rjmp	.+248    	; 0x2ae <pos_calculate+0x148>
 1b6:	12 c0       	rjmp	.+36     	; 0x1dc <pos_calculate+0x76>
 {
  case 0x07:drive_motor(20,pwmmaxspeed);break;//xrightmost95
 1b8:	84 e1       	ldi	r24, 0x14	; 20
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <pos_calculate+0x5c>
  case 0x03:drive_motor(pwmmaxspeed-100,pwmmaxspeed);break;//xrightmost95
 1be:	82 e3       	ldi	r24, 0x32	; 50
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	66 e9       	ldi	r22, 0x96	; 150
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	0e 94 ae 00 	call	0x15c	; 0x15c <drive_motor>
 1ca:	71 c0       	rjmp	.+226    	; 0x2ae <pos_calculate+0x148>
 
  
  case 0x10:drive_motor(pwmmaxspeed,pwmmaxspeed);break;//center
  case 0x11:drive_motor(pwmmaxspeed,pwmmaxspeed);break;//center
  case 0x13:drive_motor(pwmmaxspeed,pwmmaxspeed);break;//center
  case 0x19:drive_motor(pwmmaxspeed,pwmmaxspeed);break;//center
 1cc:	86 e9       	ldi	r24, 0x96	; 150
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	f8 cf       	rjmp	.-16     	; 0x1c2 <pos_calculate+0x5c>
  
 
  case 0x18:drive_motor(pwmmaxspeed,pwmmaxspeed-100);break;//xleftmost95
 1d2:	86 e9       	ldi	r24, 0x96	; 150
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	62 e3       	ldi	r22, 0x32	; 50
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	f5 cf       	rjmp	.-22     	; 0x1c6 <pos_calculate+0x60>
  case 0x1C:drive_motor(pwmmaxspeed,20);break;
 1dc:	86 e9       	ldi	r24, 0x96	; 150
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	64 e1       	ldi	r22, 0x14	; 20
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	f0 cf       	rjmp	.-32     	; 0x1c6 <pos_calculate+0x60>


 } 
}
else if(side==0b00011111)
{PORTC=stop;
 1e6:	15 ba       	out	0x15, r1	; 21
 1e8:	80 e1       	ldi	r24, 0x10	; 16
 1ea:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ec:	20 e9       	ldi	r18, 0x90	; 144
 1ee:	31 e0       	ldi	r19, 0x01	; 1
 1f0:	f9 01       	movw	r30, r18
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <pos_calculate+0x8c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f8:	d9 f7       	brne	.-10     	; 0x1f0 <pos_calculate+0x8a>
  _delay_ms(1000);
 if(nattu<1)
 1fa:	80 91 6c 00 	lds	r24, 0x006C
 1fe:	88 23       	and	r24, r24
 200:	09 f0       	breq	.+2      	; 0x204 <pos_calculate+0x9e>
 202:	55 c0       	rjmp	.+170    	; 0x2ae <pos_calculate+0x148>
 {
 eye_read();
 204:	0e 94 53 00 	call	0xa6	; 0xa6 <eye_read>
 r=(Reye & 0b00011111);
 208:	10 91 6b 00 	lds	r17, 0x006B
 20c:	1f 71       	andi	r17, 0x1F	; 31
 r=(Reye & 0b00011111);
 drive_motor(110,110);
 if(pikku==0)
 {PORTC=xright;}
 else
 {PORTC=xleft;}
 20e:	80 e6       	ldi	r24, 0x60	; 96
 210:	f8 2e       	mov	r15, r24
 {
 eye_read();
 r=(Reye & 0b00011111);
 drive_motor(110,110);
 if(pikku==0)
 {PORTC=xright;}
 212:	00 e9       	ldi	r16, 0x90	; 144
 214:	12 c0       	rjmp	.+36     	; 0x23a <pos_calculate+0xd4>
 {
 eye_read();
 r=(Reye & 0b00011111);
 while(r==0b00011111)
 {
 eye_read();
 216:	0e 94 53 00 	call	0xa6	; 0xa6 <eye_read>
 r=(Reye & 0b00011111);
 21a:	10 91 6b 00 	lds	r17, 0x006B
 21e:	1f 71       	andi	r17, 0x1F	; 31
 drive_motor(110,110);
 220:	8e e6       	ldi	r24, 0x6E	; 110
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	6e e6       	ldi	r22, 0x6E	; 110
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	0e 94 ae 00 	call	0x15c	; 0x15c <drive_motor>
 if(pikku==0)
 22c:	80 91 6d 00 	lds	r24, 0x006D
 230:	88 23       	and	r24, r24
 232:	11 f4       	brne	.+4      	; 0x238 <pos_calculate+0xd2>
 {PORTC=xright;}
 234:	05 bb       	out	0x15, r16	; 21
 236:	01 c0       	rjmp	.+2      	; 0x23a <pos_calculate+0xd4>
 else
 {PORTC=xleft;}
 238:	f5 ba       	out	0x15, r15	; 21
  _delay_ms(1000);
 if(nattu<1)
 {
 eye_read();
 r=(Reye & 0b00011111);
 while(r==0b00011111)
 23a:	1f 31       	cpi	r17, 0x1F	; 31
 23c:	61 f3       	breq	.-40     	; 0x216 <pos_calculate+0xb0>
 {PORTC=xleft;}
 
 }
 
// _delay_ms(1000);
 PORTC=forw;
 23e:	80 e5       	ldi	r24, 0x50	; 80
 240:	85 bb       	out	0x15, r24	; 21
 nattu++;
 242:	80 91 6c 00 	lds	r24, 0x006C
 246:	8f 5f       	subi	r24, 0xFF	; 255
 248:	80 93 6c 00 	sts	0x006C, r24
 24c:	30 c0       	rjmp	.+96     	; 0x2ae <pos_calculate+0x148>
 }
}

else
{
 if(nattu<1)
 24e:	80 91 6c 00 	lds	r24, 0x006C
 252:	88 23       	and	r24, r24
 254:	19 f4       	brne	.+6      	; 0x25c <pos_calculate+0xf6>
 {
 PORTC=forw;
 256:	80 e5       	ldi	r24, 0x50	; 80
 258:	85 bb       	out	0x15, r24	; 21
 25a:	29 c0       	rjmp	.+82     	; 0x2ae <pos_calculate+0x148>
 }
 else
 {
 if(pikku==0)
 25c:	80 91 6d 00 	lds	r24, 0x006D
 260:	88 23       	and	r24, r24
 262:	61 f4       	brne	.+24     	; 0x27c <pos_calculate+0x116>
 {
 PORTC=xleft;
 264:	80 e6       	ldi	r24, 0x60	; 96
 266:	85 bb       	out	0x15, r24	; 21
 268:	88 ee       	ldi	r24, 0xE8	; 232
 26a:	93 e0       	ldi	r25, 0x03	; 3
 26c:	20 e9       	ldi	r18, 0x90	; 144
 26e:	31 e0       	ldi	r19, 0x01	; 1
 270:	f9 01       	movw	r30, r18
 272:	31 97       	sbiw	r30, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <pos_calculate+0x10c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 276:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 278:	d9 f7       	brne	.-10     	; 0x270 <pos_calculate+0x10a>
 27a:	0b c0       	rjmp	.+22     	; 0x292 <pos_calculate+0x12c>
  _delay_ms(100);
 }
 else
 {
 PORTC=xright;
 27c:	80 e9       	ldi	r24, 0x90	; 144
 27e:	85 bb       	out	0x15, r24	; 21
 280:	88 ee       	ldi	r24, 0xE8	; 232
 282:	93 e0       	ldi	r25, 0x03	; 3
 284:	20 e9       	ldi	r18, 0x90	; 144
 286:	31 e0       	ldi	r19, 0x01	; 1
 288:	f9 01       	movw	r30, r18
 28a:	31 97       	sbiw	r30, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <pos_calculate+0x124>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 290:	d9 f7       	brne	.-10     	; 0x288 <pos_calculate+0x122>
  _delay_ms(100);


 } 
 PORTC=forw;
 292:	80 e5       	ldi	r24, 0x50	; 80
 294:	85 bb       	out	0x15, r24	; 21
 296:	88 e8       	ldi	r24, 0x88	; 136
 298:	93 e1       	ldi	r25, 0x13	; 19
 29a:	20 e9       	ldi	r18, 0x90	; 144
 29c:	31 e0       	ldi	r19, 0x01	; 1
 29e:	f9 01       	movw	r30, r18
 2a0:	31 97       	sbiw	r30, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <pos_calculate+0x13a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a6:	d9 f7       	brne	.-10     	; 0x29e <pos_calculate+0x138>
  _delay_ms(500);
 PORTC=stop;
 2a8:	15 ba       	out	0x15, r1	; 21
 while(bit_is_set(PIND,0));
 2aa:	80 99       	sbic	0x10, 0	; 16
 2ac:	fe cf       	rjmp	.-4      	; 0x2aa <pos_calculate+0x144>
 }
 
}
//while(bit_is_set(PIND,0));

}
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	ff 90       	pop	r15
 2b4:	08 95       	ret

000002b6 <calibrate_sensors>:
 PORTC=forw;
 steer(Lspeed,Rspeed);//L-R
 
}
void calibrate_sensors()
{
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	df 93       	push	r29
 2bc:	cf 93       	push	r28
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	2a 97       	sbiw	r28, 0x0a	; 10
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	f8 94       	cli
 2c8:	de bf       	out	0x3e, r29	; 62
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	cd bf       	out	0x3d, r28	; 61
        uint8_t adc_value;              /* ADC value */
        uint8_t i, j;                   /* loop counter */ 
        uint8_t thresh_high[5] = { 0,0,0,0,0 };
 2ce:	fe 01       	movw	r30, r28
 2d0:	31 96       	adiw	r30, 0x01	; 1
 2d2:	85 e0       	ldi	r24, 0x05	; 5
 2d4:	df 01       	movw	r26, r30
 2d6:	1d 92       	st	X+, r1
 2d8:	8a 95       	dec	r24
 2da:	e9 f7       	brne	.-6      	; 0x2d6 <calibrate_sensors+0x20>
        uint8_t thresh_low[5] = { 255,255,255,255,255 };
 2dc:	de 01       	movw	r26, r28
 2de:	16 96       	adiw	r26, 0x06	; 6
 2e0:	e0 e6       	ldi	r30, 0x60	; 96
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	85 e0       	ldi	r24, 0x05	; 5
 2e6:	01 90       	ld	r0, Z+
 2e8:	0d 92       	st	X+, r0
 2ea:	81 50       	subi	r24, 0x01	; 1
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <calibrate_sensors+0x30>
         PORTC=xleft; steer(pwmmaxspeed-40,pwmmaxspeed-40);           
 2ee:	80 e6       	ldi	r24, 0x60	; 96
 2f0:	85 bb       	out	0x15, r24	; 21



void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
 2f2:	8e e6       	ldi	r24, 0x6E	; 110
 2f4:	83 bd       	out	0x23, r24	; 35
 OCR0=r;
 2f6:	8c bf       	out	0x3c, r24	; 60
 2f8:	20 e0       	ldi	r18, 0x00	; 0
        uint8_t adc_value;              /* ADC value */
        uint8_t i, j;                   /* loop counter */ 
        uint8_t thresh_high[5] = { 0,0,0,0,0 };
        uint8_t thresh_low[5] = { 255,255,255,255,255 };
         PORTC=xleft; steer(pwmmaxspeed-40,pwmmaxspeed-40);           
        for (i=0; i<100; i++) 
 2fa:	be 01       	movw	r22, r28
 2fc:	6f 5f       	subi	r22, 0xFF	; 255
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255
 300:	ae 01       	movw	r20, r28
 302:	4a 5f       	subi	r20, 0xFA	; 250
 304:	5f 4f       	sbci	r21, 0xFF	; 255


uint8_t adc(unsigned char channel)
{uint8_t adc_value;
         ADMUX = 0x60|channel; // channel 0, left-justified result
        ADCSRA = _BV(ADEN) | _BV(ADPS2)| _BV(ADPS0);     
 306:	35 e8       	ldi	r19, 0x85	; 133
 308:	00 e9       	ldi	r16, 0x90	; 144
 30a:	11 e0       	ldi	r17, 0x01	; 1
 30c:	21 c0       	rjmp	.+66     	; 0x350 <calibrate_sensors+0x9a>



uint8_t adc(unsigned char channel)
{uint8_t adc_value;
         ADMUX = 0x60|channel; // channel 0, left-justified result
 30e:	8e 2f       	mov	r24, r30
 310:	86 1b       	sub	r24, r22
 312:	80 66       	ori	r24, 0x60	; 96
 314:	87 b9       	out	0x07, r24	; 7
        ADCSRA = _BV(ADEN) | _BV(ADPS2)| _BV(ADPS0);     
 316:	36 b9       	out	0x06, r19	; 6
        /* read output from ADC */
        ADCSRA |= _BV(ADSC);
 318:	36 9a       	sbi	0x06, 6	; 6
        while (!(ADCSRA & _BV(ADIF)));
 31a:	34 9b       	sbis	0x06, 4	; 6
 31c:	fe cf       	rjmp	.-4      	; 0x31a <calibrate_sensors+0x64>
        adc_value = ADCH;
 31e:	95 b1       	in	r25, 0x05	; 5
        ADCSRA |= _BV(ADIF);
 320:	34 9a       	sbi	0x06, 4	; 6
        for (i=0; i<100; i++) 
        { 
                for (j=0; j<5; j++)
                {
                        adc_value = adc(j);
                        if (adc_value < thresh_low[j]) thresh_low[j] = adc_value;
 322:	8c 91       	ld	r24, X
 324:	98 17       	cp	r25, r24
 326:	08 f4       	brcc	.+2      	; 0x32a <calibrate_sensors+0x74>
 328:	9c 93       	st	X, r25
                        if (adc_value > thresh_high[j]) thresh_high[j] = adc_value;
 32a:	80 81       	ld	r24, Z
 32c:	89 17       	cp	r24, r25
 32e:	08 f4       	brcc	.+2      	; 0x332 <calibrate_sensors+0x7c>
 330:	90 83       	st	Z, r25
 332:	31 96       	adiw	r30, 0x01	; 1
 334:	11 96       	adiw	r26, 0x01	; 1
        uint8_t thresh_high[5] = { 0,0,0,0,0 };
        uint8_t thresh_low[5] = { 255,255,255,255,255 };
         PORTC=xleft; steer(pwmmaxspeed-40,pwmmaxspeed-40);           
        for (i=0; i<100; i++) 
        { 
                for (j=0; j<5; j++)
 336:	e4 17       	cp	r30, r20
 338:	f5 07       	cpc	r31, r21
 33a:	49 f7       	brne	.-46     	; 0x30e <calibrate_sensors+0x58>
 33c:	84 ef       	ldi	r24, 0xF4	; 244
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	f8 01       	movw	r30, r16
 342:	31 97       	sbiw	r30, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <calibrate_sensors+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 346:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 348:	d9 f7       	brne	.-10     	; 0x340 <calibrate_sensors+0x8a>
        uint8_t adc_value;              /* ADC value */
        uint8_t i, j;                   /* loop counter */ 
        uint8_t thresh_high[5] = { 0,0,0,0,0 };
        uint8_t thresh_low[5] = { 255,255,255,255,255 };
         PORTC=xleft; steer(pwmmaxspeed-40,pwmmaxspeed-40);           
        for (i=0; i<100; i++) 
 34a:	2f 5f       	subi	r18, 0xFF	; 255
 34c:	24 36       	cpi	r18, 0x64	; 100
 34e:	19 f0       	breq	.+6      	; 0x356 <calibrate_sensors+0xa0>
 350:	da 01       	movw	r26, r20
 352:	fb 01       	movw	r30, r22
 354:	dc cf       	rjmp	.-72     	; 0x30e <calibrate_sensors+0x58>
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	50 e0       	ldi	r21, 0x00	; 0
                _delay_ms(50); 
        }
        
        for (i=0; i<5; i++)
        {
                midpoint[i] =  (thresh_high[i] + thresh_low[i]) / 2;
 35a:	8e 01       	movw	r16, r28
 35c:	0a 5f       	subi	r16, 0xFA	; 250
 35e:	1f 4f       	sbci	r17, 0xFF	; 255
 360:	be 01       	movw	r22, r28
 362:	6f 5f       	subi	r22, 0xFF	; 255
 364:	7f 4f       	sbci	r23, 0xFF	; 255
 366:	da 01       	movw	r26, r20
 368:	aa 59       	subi	r26, 0x9A	; 154
 36a:	bf 4f       	sbci	r27, 0xFF	; 255
 36c:	f8 01       	movw	r30, r16
 36e:	e4 0f       	add	r30, r20
 370:	f5 1f       	adc	r31, r21
 372:	20 81       	ld	r18, Z
 374:	fb 01       	movw	r30, r22
 376:	e4 0f       	add	r30, r20
 378:	f5 1f       	adc	r31, r21
 37a:	80 81       	ld	r24, Z
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	82 0f       	add	r24, r18
 380:	91 1d       	adc	r25, r1
 382:	95 95       	asr	r25
 384:	87 95       	ror	r24
 386:	8c 93       	st	X, r24
 388:	4f 5f       	subi	r20, 0xFF	; 255
 38a:	5f 4f       	sbci	r21, 0xFF	; 255
                        if (adc_value > thresh_high[j]) thresh_high[j] = adc_value;
                }
                _delay_ms(50); 
        }
        
        for (i=0; i<5; i++)
 38c:	45 30       	cpi	r20, 0x05	; 5
 38e:	51 05       	cpc	r21, r1
 390:	51 f7       	brne	.-44     	; 0x366 <calibrate_sensors+0xb0>
        {
                midpoint[i] =  (thresh_high[i] + thresh_low[i]) / 2;
        }
       PORTC=stop;
 392:	15 ba       	out	0x15, r1	; 21
}
 394:	2a 96       	adiw	r28, 0x0a	; 10
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	f8 94       	cli
 39a:	de bf       	out	0x3e, r29	; 62
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	cd bf       	out	0x3d, r28	; 61
 3a0:	cf 91       	pop	r28
 3a2:	df 91       	pop	r29
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	08 95       	ret

000003aa <motor_test>:

void motor_test()
{
 PORTC=forw;
 3aa:	80 e5       	ldi	r24, 0x50	; 80
 3ac:	85 bb       	out	0x15, r24	; 21



void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
 3ae:	80 e4       	ldi	r24, 0x40	; 64
 3b0:	83 bd       	out	0x23, r24	; 35
 OCR0=r;
 3b2:	8c bf       	out	0x3c, r24	; 60
 3b4:	80 e2       	ldi	r24, 0x20	; 32
 3b6:	9e e4       	ldi	r25, 0x4E	; 78
 3b8:	20 e9       	ldi	r18, 0x90	; 144
 3ba:	31 e0       	ldi	r19, 0x01	; 1
 3bc:	f9 01       	movw	r30, r18
 3be:	31 97       	sbiw	r30, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <motor_test+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3c4:	d9 f7       	brne	.-10     	; 0x3bc <motor_test+0x12>



void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
 3c6:	8e e6       	ldi	r24, 0x6E	; 110
 3c8:	83 bd       	out	0x23, r24	; 35
 OCR0=r;
 3ca:	8c bf       	out	0x3c, r24	; 60
 3cc:	80 e1       	ldi	r24, 0x10	; 16
 3ce:	97 e2       	ldi	r25, 0x27	; 39
 3d0:	20 e9       	ldi	r18, 0x90	; 144
 3d2:	31 e0       	ldi	r19, 0x01	; 1
 3d4:	f9 01       	movw	r30, r18
 3d6:	31 97       	sbiw	r30, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <motor_test+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3dc:	d9 f7       	brne	.-10     	; 0x3d4 <motor_test+0x2a>



void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
 3de:	86 e9       	ldi	r24, 0x96	; 150
 3e0:	83 bd       	out	0x23, r24	; 35
 OCR0=r;
 3e2:	8c bf       	out	0x3c, r24	; 60
 3e4:	80 e1       	ldi	r24, 0x10	; 16
 3e6:	97 e2       	ldi	r25, 0x27	; 39
 3e8:	20 e9       	ldi	r18, 0x90	; 144
 3ea:	31 e0       	ldi	r19, 0x01	; 1
 3ec:	f9 01       	movw	r30, r18
 3ee:	31 97       	sbiw	r30, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <motor_test+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3f4:	d9 f7       	brne	.-10     	; 0x3ec <motor_test+0x42>



void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
 3f6:	80 ef       	ldi	r24, 0xF0	; 240
 3f8:	83 bd       	out	0x23, r24	; 35
 OCR0=r;
 3fa:	8c bf       	out	0x3c, r24	; 60
 3fc:	80 e2       	ldi	r24, 0x20	; 32
 3fe:	9e e4       	ldi	r25, 0x4E	; 78
 400:	20 e9       	ldi	r18, 0x90	; 144
 402:	31 e0       	ldi	r19, 0x01	; 1
 404:	f9 01       	movw	r30, r18
 406:	31 97       	sbiw	r30, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <motor_test+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 40a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 40c:	d9 f7       	brne	.-10     	; 0x404 <motor_test+0x5a>
 _delay_ms(1000);

 steer(240,240);//right
 _delay_ms(2000);

 PORTC=0x00;
 40e:	15 ba       	out	0x15, r1	; 21
}  
 410:	08 95       	ret

00000412 <main>:

int main(void)
{
 nattu=0;pikku=0;
 412:	10 92 6c 00 	sts	0x006C, r1
 416:	10 92 6d 00 	sts	0x006D, r1
 DDRD=0xF0;
 41a:	90 ef       	ldi	r25, 0xF0	; 240
 41c:	91 bb       	out	0x11, r25	; 17
 PORTD=0x0F;
 41e:	8f e0       	ldi	r24, 0x0F	; 15
 420:	82 bb       	out	0x12, r24	; 18
 DDRA=0x00;
 422:	1a ba       	out	0x1a, r1	; 26
 PORTA=0xC0;
 424:	80 ec       	ldi	r24, 0xC0	; 192
 426:	8b bb       	out	0x1b, r24	; 27
 else
 cbi(PORTB,6);

}
void motor_pwm_init()
{DDRC=0xFF;
 428:	8f ef       	ldi	r24, 0xFF	; 255
 42a:	84 bb       	out	0x14, r24	; 20
 PORTC=0x00;
 42c:	15 ba       	out	0x15, r1	; 21
 DDRB=0xFF;
 42e:	87 bb       	out	0x17, r24	; 23
 DDRD=0xF0;
 430:	91 bb       	out	0x11, r25	; 17
 PORTD=0xFF;
 432:	82 bb       	out	0x12, r24	; 18

 PORTC=forw;
 434:	80 e5       	ldi	r24, 0x50	; 80
 436:	85 bb       	out	0x15, r24	; 21
 TCCR0=0x6D;
 438:	8d e6       	ldi	r24, 0x6D	; 109
 43a:	83 bf       	out	0x33, r24	; 51
 TCNT0=0x00;
 43c:	12 be       	out	0x32, r1	; 50
 TCCR2=0x6F;
 43e:	8f e6       	ldi	r24, 0x6F	; 111
 440:	85 bd       	out	0x25, r24	; 37
 TCNT2=0x00;
 442:	14 bc       	out	0x24, r1	; 36
 DDRD=0xF0;
 PORTD=0x0F;
 DDRA=0x00;
 PORTA=0xC0;
 motor_pwm_init();
 sbi(PORTB,7);
 444:	c7 9a       	sbi	0x18, 7	; 24
 446:	80 e2       	ldi	r24, 0x20	; 32
 448:	9e e4       	ldi	r25, 0x4E	; 78
 44a:	20 e9       	ldi	r18, 0x90	; 144
 44c:	31 e0       	ldi	r19, 0x01	; 1
 44e:	f9 01       	movw	r30, r18
 450:	31 97       	sbiw	r30, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <main+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 454:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 456:	d9 f7       	brne	.-10     	; 0x44e <main+0x3c>
 _delay_ms(2000);
//motor_test();
 cbi(PORTB,7);
 458:	c7 98       	cbi	0x18, 7	; 24
 calibrate_sensors();
 45a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <calibrate_sensors>
 while(bit_is_set(PIND,0) && bit_is_set(PIND,1));
 45e:	80 9b       	sbis	0x10, 0	; 16
 460:	02 c0       	rjmp	.+4      	; 0x466 <__stack+0x7>
 462:	81 99       	sbic	0x10, 1	; 16
 464:	fc cf       	rjmp	.-8      	; 0x45e <main+0x4c>
 if(bit_is_clear(PIND,1))
 466:	81 99       	sbic	0x10, 1	; 16
 468:	03 c0       	rjmp	.+6      	; 0x470 <__stack+0x11>
 pikku=1;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	80 93 6d 00 	sts	0x006D, r24
 470:	80 e2       	ldi	r24, 0x20	; 32
 472:	9e e4       	ldi	r25, 0x4E	; 78
 474:	20 e9       	ldi	r18, 0x90	; 144
 476:	31 e0       	ldi	r19, 0x01	; 1
 478:	f9 01       	movw	r30, r18
 47a:	31 97       	sbiw	r30, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <__stack+0x1b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 47e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 480:	d9 f7       	brne	.-10     	; 0x478 <__stack+0x19>
  _delay_ms(2000);
 while(1)
 {

eye_read();
 482:	0e 94 53 00 	call	0xa6	; 0xa6 <eye_read>

 pos_calculate();
 486:	0e 94 b3 00 	call	0x166	; 0x166 <pos_calculate>
 48a:	fb cf       	rjmp	.-10     	; 0x482 <__stack+0x23>

0000048c <_exit>:
 48c:	f8 94       	cli

0000048e <__stop_program>:
 48e:	ff cf       	rjmp	.-2      	; 0x48e <__stop_program>
