
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000213  00000000  00000000  00000173  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000eb  00000000  00000000  00000386  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000218  00000000  00000000  00000471  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000068c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000fc  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000090  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000108  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
*/
 
   int main (void)
   
   {unsigned char c;
    DDRC=0xFF;
  6c:	9f ef       	ldi	r25, 0xFF	; 255
  6e:	94 bb       	out	0x14, r25	; 20
    DDRA=0xF0;
  70:	80 ef       	ldi	r24, 0xF0	; 240
  72:	8a bb       	out	0x1a, r24	; 26
	DDRD=0x00;
  74:	11 ba       	out	0x11, r1	; 17
	PORTD=0xFF;
  76:	92 bb       	out	0x12, r25	; 18
	PORTC=0x00;
  78:	15 ba       	out	0x15, r1	; 21
	
	while(PIND&0x01);
  7a:	80 99       	sbic	0x10, 0	; 16
  7c:	fe cf       	rjmp	.-4      	; 0x7a <main+0xe>
	  PORTC=0x00;
	  _delay_us(10);
	 }
	 else if(c==0x00)
	 {
	  PORTC=forw;
  7e:	60 e5       	ldi	r22, 0x50	; 80
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  80:	25 e3       	ldi	r18, 0x35	; 53
	  PORTC=0x00;
	  _delay_us(10);
	 }
	 else if(c==0x0c)
	 {
	  PORTC=xleft;
  82:	a0 e6       	ldi	r26, 0x60	; 96
	  _delay_us(30);
	 
	 }
	 else if(c==0x05)
	 {
	  PORTC=xright;
  84:	f0 e9       	ldi	r31, 0x90	; 144
	 
	  
	 }
	 else if(c==0x08)
	 {
	  PORTC=left;
  86:	e0 e4       	ldi	r30, 0x40	; 64
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  88:	48 e1       	ldi	r20, 0x18	; 24
  8a:	51 e0       	ldi	r21, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  8c:	30 ea       	ldi	r19, 0xA0	; 160
     {
      PORTC=forw;
     } 
	 else if(c==0x01)//slight right
	 {
	  PORTC=right;
  8e:	70 e1       	ldi	r23, 0x10	; 16
	PORTC=0x00;
	
	while(PIND&0x01);
	while(1)
	{
	 c=PINA&0x0D;
  90:	89 b3       	in	r24, 0x19	; 25
  92:	8d 70       	andi	r24, 0x0D	; 13
	 if(c==0x09)//center detect
  94:	89 30       	cpi	r24, 0x09	; 9
  96:	11 f4       	brne	.+4      	; 0x9c <main+0x30>
     {
      PORTC=forw;
  98:	65 bb       	out	0x15, r22	; 21
  9a:	fa cf       	rjmp	.-12     	; 0x90 <main+0x24>
     } 
	 else if(c==0x01)//slight right
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	11 f4       	brne	.+4      	; 0xa4 <main+0x38>
	 {
	  PORTC=right;
  a0:	75 bb       	out	0x15, r23	; 21
  a2:	03 c0       	rjmp	.+6      	; 0xaa <main+0x3e>
	  PORTC=0x00;
	  _delay_us(30);
	 
	  
	 }
	 else if(c==0x08)
  a4:	88 30       	cpi	r24, 0x08	; 8
  a6:	39 f4       	brne	.+14     	; 0xb6 <main+0x4a>
	 {
	  PORTC=left;
  a8:	e5 bb       	out	0x15, r30	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  aa:	ca 01       	movw	r24, r20
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x40>
	    _delay_us(70);
	  PORTC=0x00;
  b0:	15 ba       	out	0x15, r1	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  b2:	83 2f       	mov	r24, r19
  b4:	10 c0       	rjmp	.+32     	; 0xd6 <main+0x6a>
	  _delay_us(30);
	 
	 }
	 else if(c==0x05)
  b6:	85 30       	cpi	r24, 0x05	; 5
  b8:	11 f4       	brne	.+4      	; 0xbe <main+0x52>
	 {
	  PORTC=xright;
  ba:	f5 bb       	out	0x15, r31	; 21
  bc:	07 c0       	rjmp	.+14     	; 0xcc <main+0x60>
	  _delay_us(10);
	  PORTC=0x00;
	  _delay_us(10);
	 }
	 else if(c==0x0c)
  be:	8c 30       	cpi	r24, 0x0C	; 12
  c0:	11 f4       	brne	.+4      	; 0xc6 <main+0x5a>
	 {
	  PORTC=xleft;
  c2:	a5 bb       	out	0x15, r26	; 21
  c4:	03 c0       	rjmp	.+6      	; 0xcc <main+0x60>
	  _delay_us(10);
	  PORTC=0x00;
	  _delay_us(10);
	 }
	 else if(c==0x00)
  c6:	88 23       	and	r24, r24
  c8:	49 f4       	brne	.+18     	; 0xdc <main+0x70>
	 {
	  PORTC=forw;
  ca:	65 bb       	out	0x15, r22	; 21
  cc:	82 2f       	mov	r24, r18
  ce:	8a 95       	dec	r24
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x62>
	   _delay_us(10);
	  PORTC=0x00;
  d2:	15 ba       	out	0x15, r1	; 21
  d4:	82 2f       	mov	r24, r18
  d6:	8a 95       	dec	r24
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x6a>
  da:	da cf       	rjmp	.-76     	; 0x90 <main+0x24>
	  _delay_us(10);
	 }
	 else
	 {
	 PORTC=0x00;
  dc:	15 ba       	out	0x15, r1	; 21
  de:	d8 cf       	rjmp	.-80     	; 0x90 <main+0x24>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
