
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000012e  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001e5  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000fb  00000000  00000000  00000363  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000183  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000104  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000043  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	30 c0       	rjmp	.+96     	; 0x64 <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	38 c0       	rjmp	.+112    	; 0xb6 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#include<compat/deprecated.h>
unsigned int i=0;

int main(void)
{
DDRD=0xFB;         // PORTD declared as output port  PORTD_2 input
  48:	8b ef       	ldi	r24, 0xFB	; 251
  4a:	81 bb       	out	0x11, r24	; 17
PORTD=0xFF;        // PORTD pulls enabled, initialized
  4c:	8f ef       	ldi	r24, 0xFF	; 255
  4e:	82 bb       	out	0x12, r24	; 18
GICR=1<<INT0;   // INT0 enabled
  50:	80 e4       	ldi	r24, 0x40	; 64
  52:	8b bf       	out	0x3b, r24	; 59
sbi(MCUCR,1);       // falling edge at INT0 generates interrupt
  54:	85 b7       	in	r24, 0x35	; 53
  56:	82 60       	ori	r24, 0x02	; 2
  58:	85 bf       	out	0x35, r24	; 53
cbi(MCUCR,0);
  5a:	85 b7       	in	r24, 0x35	; 53
  5c:	8e 7f       	andi	r24, 0xFE	; 254
  5e:	85 bf       	out	0x35, r24	; 53
sei();  // Interrupt flag set
  60:	78 94       	sei
  62:	ff cf       	rjmp	.-2      	; 0x62 <main+0x1a>

00000064 <__vector_1>:
return 0;

}

SIGNAL(	SIG_INTERRUPT0 )  
{
  64:	1f 92       	push	r1
  66:	0f 92       	push	r0
  68:	0f b6       	in	r0, 0x3f	; 63
  6a:	0f 92       	push	r0
  6c:	11 24       	eor	r1, r1
  6e:	2f 93       	push	r18
  70:	3f 93       	push	r19
  72:	8f 93       	push	r24
  74:	9f 93       	push	r25
  76:	ef 93       	push	r30
  78:	ff 93       	push	r31

cli();
  7a:	f8 94       	cli
DDRD=0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  80:	93 e0       	ldi	r25, 0x03	; 3
  82:	9a 95       	dec	r25
  84:	f1 f7       	brne	.-4      	; 0x82 <__vector_1+0x1e>
_delay_us(10);
PORTD=0xFF;
  86:	82 bb       	out	0x12, r24	; 18
  88:	80 e5       	ldi	r24, 0x50	; 80
  8a:	93 ec       	ldi	r25, 0xC3	; 195
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8c:	29 e1       	ldi	r18, 0x19	; 25
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	f9 01       	movw	r30, r18
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <__vector_1+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  96:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  98:	d9 f7       	brne	.-10     	; 0x90 <__vector_1+0x2c>
_delay_ms(5000);
PORTD=0x00;
  9a:	12 ba       	out	0x12, r1	; 18
sei();
  9c:	78 94       	sei
DDRD=0x00;
  9e:	11 ba       	out	0x11, r1	; 17

}
  a0:	ff 91       	pop	r31
  a2:	ef 91       	pop	r30
  a4:	9f 91       	pop	r25
  a6:	8f 91       	pop	r24
  a8:	3f 91       	pop	r19
  aa:	2f 91       	pop	r18
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
