
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001f6  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006a  0080006a  00000294  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000064  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000251  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000137  00000000  00000000  00000569  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028e  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000930  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f0  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  8a:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_9>:
 0b01111111,
 0b01101111
}; 
volatile unsigned char d1,d2,d3,d4,count=0,dot=0;
ISR(TIMER0_OVF_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	6f 93       	push	r22
  9e:	7f 93       	push	r23
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
 count++;
  a4:	80 91 6a 00 	lds	r24, 0x006A
  a8:	8f 5f       	subi	r24, 0xFF	; 255
  aa:	80 93 6a 00 	sts	0x006A, r24
 if(count%15==0)
  ae:	80 91 6a 00 	lds	r24, 0x006A
  b2:	6f e0       	ldi	r22, 0x0F	; 15
  b4:	0e 94 ed 00 	call	0x1da	; 0x1da <__udivmodqi4>
  b8:	99 23       	and	r25, r25
  ba:	51 f4       	brne	.+20     	; 0xd0 <__vector_9+0x3e>
 {
   if(dot)
  bc:	80 91 6b 00 	lds	r24, 0x006B
  c0:	88 23       	and	r24, r24
  c2:	19 f0       	breq	.+6      	; 0xca <__vector_9+0x38>
   dot=0x00;
  c4:	10 92 6b 00 	sts	0x006B, r1
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <__vector_9+0x3e>
   else
   dot=0x80;
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	80 93 6b 00 	sts	0x006B, r24
 }
 if(count==31)
  d0:	80 91 6a 00 	lds	r24, 0x006A
  d4:	8f 31       	cpi	r24, 0x1F	; 31
  d6:	71 f5       	brne	.+92     	; 0x134 <__vector_9+0xa2>
 {
   count=0;
  d8:	10 92 6a 00 	sts	0x006A, r1
   d1++;
  dc:	80 91 6c 00 	lds	r24, 0x006C
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	80 93 6c 00 	sts	0x006C, r24
   if(d1>9)
  e6:	80 91 6c 00 	lds	r24, 0x006C
  ea:	8a 30       	cpi	r24, 0x0A	; 10
  ec:	38 f0       	brcs	.+14     	; 0xfc <__vector_9+0x6a>
    {
      d1=0;
  ee:	10 92 6c 00 	sts	0x006C, r1
	  d2++; 
  f2:	80 91 6d 00 	lds	r24, 0x006D
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 6d 00 	sts	0x006D, r24
     } 
	if(d2>5)
  fc:	80 91 6d 00 	lds	r24, 0x006D
 100:	86 30       	cpi	r24, 0x06	; 6
 102:	38 f0       	brcs	.+14     	; 0x112 <__vector_9+0x80>
     {
      d2=0;
 104:	10 92 6d 00 	sts	0x006D, r1
	  d3++; 
 108:	80 91 6f 00 	lds	r24, 0x006F
 10c:	8f 5f       	subi	r24, 0xFF	; 255
 10e:	80 93 6f 00 	sts	0x006F, r24
	 } 
	 if(d3>9)
 112:	80 91 6f 00 	lds	r24, 0x006F
 116:	8a 30       	cpi	r24, 0x0A	; 10
 118:	38 f0       	brcs	.+14     	; 0x128 <__vector_9+0x96>
	 {
	 d3=0;
 11a:	10 92 6f 00 	sts	0x006F, r1
	 d4++;
 11e:	80 91 6e 00 	lds	r24, 0x006E
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	80 93 6e 00 	sts	0x006E, r24
	 }
	 if(d4>5)
 128:	80 91 6e 00 	lds	r24, 0x006E
 12c:	86 30       	cpi	r24, 0x06	; 6
 12e:	10 f0       	brcs	.+4      	; 0x134 <__vector_9+0xa2>
	 {
	  d4=0;
 130:	10 92 6e 00 	sts	0x006E, r1
	 }

 } 
}
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	7f 91       	pop	r23
 13a:	6f 91       	pop	r22
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <main>:
int main(void)
{
  DDRB=0x0F;
 146:	8f e0       	ldi	r24, 0x0F	; 15
 148:	87 bb       	out	0x17, r24	; 23
 DDRA=0xFF;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	8a bb       	out	0x1a, r24	; 26
 PORTB=0x00;
 14e:	18 ba       	out	0x18, r1	; 24
 PORTA=0x00;
 150:	1b ba       	out	0x1b, r1	; 27
 TCCR0=(1<<CS00)|(1<<CS02);//1024
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	83 bf       	out	0x33, r24	; 51
 TCNT0=0;
 156:	12 be       	out	0x32, r1	; 50
 TIMSK=(1<<TOIE0);
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	89 bf       	out	0x39, r24	; 57
 
 d1=0;
 15c:	10 92 6c 00 	sts	0x006C, r1
 d2=0;
 160:	10 92 6d 00 	sts	0x006D, r1
 d3=0;
 164:	10 92 6f 00 	sts	0x006F, r1
 d4=0;
 168:	10 92 6e 00 	sts	0x006E, r1
 sei();
 16c:	78 94       	sei
 
   while(1)
   {
    PORTB=0x01;
 16e:	71 e0       	ldi	r23, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 170:	20 ed       	ldi	r18, 0xD0	; 208
 172:	37 e0       	ldi	r19, 0x07	; 7
	PORTA=segdisp[d1];
	_delay_ms(1);
    PORTB=0x02;
 174:	62 e0       	ldi	r22, 0x02	; 2
	PORTA=segdisp[d2];
	_delay_ms(1);
    PORTB=0x04;
 176:	54 e0       	ldi	r21, 0x04	; 4
	PORTA=segdisp[d3]|dot;
	_delay_ms(1);
    PORTB=0x08;
 178:	48 e0       	ldi	r20, 0x08	; 8
 d4=0;
 sei();
 
   while(1)
   {
    PORTB=0x01;
 17a:	78 bb       	out	0x18, r23	; 24
	PORTA=segdisp[d1];
 17c:	e0 91 6c 00 	lds	r30, 0x006C
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	e0 5a       	subi	r30, 0xA0	; 160
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	80 81       	ld	r24, Z
 188:	8b bb       	out	0x1b, r24	; 27
 18a:	c9 01       	movw	r24, r18
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0x46>
	_delay_ms(1);
    PORTB=0x02;
 190:	68 bb       	out	0x18, r22	; 24
	PORTA=segdisp[d2];
 192:	e0 91 6d 00 	lds	r30, 0x006D
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	e0 5a       	subi	r30, 0xA0	; 160
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	80 81       	ld	r24, Z
 19e:	8b bb       	out	0x1b, r24	; 27
 1a0:	c9 01       	movw	r24, r18
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x5c>
	_delay_ms(1);
    PORTB=0x04;
 1a6:	58 bb       	out	0x18, r21	; 24
	PORTA=segdisp[d3]|dot;
 1a8:	e0 91 6f 00 	lds	r30, 0x006F
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	e0 5a       	subi	r30, 0xA0	; 160
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	80 81       	ld	r24, Z
 1b4:	90 91 6b 00 	lds	r25, 0x006B
 1b8:	89 2b       	or	r24, r25
 1ba:	8b bb       	out	0x1b, r24	; 27
 1bc:	c9 01       	movw	r24, r18
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <main+0x78>
	_delay_ms(1);
    PORTB=0x08;
 1c2:	48 bb       	out	0x18, r20	; 24
	PORTA=segdisp[d4];
 1c4:	e0 91 6e 00 	lds	r30, 0x006E
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	e0 5a       	subi	r30, 0xA0	; 160
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	80 81       	ld	r24, Z
 1d0:	8b bb       	out	0x1b, r24	; 27
 1d2:	c9 01       	movw	r24, r18
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <main+0x8e>
 1d8:	d0 cf       	rjmp	.-96     	; 0x17a <main+0x34>

000001da <__udivmodqi4>:
 1da:	99 1b       	sub	r25, r25
 1dc:	79 e0       	ldi	r23, 0x09	; 9
 1de:	04 c0       	rjmp	.+8      	; 0x1e8 <__udivmodqi4_ep>

000001e0 <__udivmodqi4_loop>:
 1e0:	99 1f       	adc	r25, r25
 1e2:	96 17       	cp	r25, r22
 1e4:	08 f0       	brcs	.+2      	; 0x1e8 <__udivmodqi4_ep>
 1e6:	96 1b       	sub	r25, r22

000001e8 <__udivmodqi4_ep>:
 1e8:	88 1f       	adc	r24, r24
 1ea:	7a 95       	dec	r23
 1ec:	c9 f7       	brne	.-14     	; 0x1e0 <__udivmodqi4_loop>
 1ee:	80 95       	com	r24
 1f0:	08 95       	ret

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
