
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000027e  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080006a  0080006a  0000031c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000064  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002e7  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000012e  00000000  00000000  00000687  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000300  00000000  00000000  000007b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ef  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000118  00000000  00000000  00000bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00000cef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  8a:	0c 94 3d 01 	jmp	0x27a	; 0x27a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_9>:
 0b01111111,
 0b01101111
}; 
volatile unsigned int d1,d2,d3,d4,count=0,dot=0;
ISR(TIMER0_OVF_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
 count++;
  a2:	80 91 6a 00 	lds	r24, 0x006A
  a6:	90 91 6b 00 	lds	r25, 0x006B
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	90 93 6b 00 	sts	0x006B, r25
  b0:	80 93 6a 00 	sts	0x006A, r24
 
 if(count==312)
  b4:	80 91 6a 00 	lds	r24, 0x006A
  b8:	90 91 6b 00 	lds	r25, 0x006B
  bc:	88 53       	subi	r24, 0x38	; 56
  be:	91 40       	sbci	r25, 0x01	; 1
  c0:	09 f0       	breq	.+2      	; 0xc4 <__vector_9+0x32>
  c2:	50 c0       	rjmp	.+160    	; 0x164 <__vector_9+0xd2>
 {
   count=0;
  c4:	10 92 6b 00 	sts	0x006B, r1
  c8:	10 92 6a 00 	sts	0x006A, r1
   d1++;
  cc:	80 91 6e 00 	lds	r24, 0x006E
  d0:	90 91 6f 00 	lds	r25, 0x006F
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	90 93 6f 00 	sts	0x006F, r25
  da:	80 93 6e 00 	sts	0x006E, r24
   if(d1>9)
  de:	80 91 6e 00 	lds	r24, 0x006E
  e2:	90 91 6f 00 	lds	r25, 0x006F
  e6:	0a 97       	sbiw	r24, 0x0a	; 10
  e8:	68 f0       	brcs	.+26     	; 0x104 <__vector_9+0x72>
    {
      d1=0;
  ea:	10 92 6f 00 	sts	0x006F, r1
  ee:	10 92 6e 00 	sts	0x006E, r1
	  d2++; 
  f2:	80 91 70 00 	lds	r24, 0x0070
  f6:	90 91 71 00 	lds	r25, 0x0071
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	90 93 71 00 	sts	0x0071, r25
 100:	80 93 70 00 	sts	0x0070, r24
     } 
	if(d2>9)
 104:	80 91 70 00 	lds	r24, 0x0070
 108:	90 91 71 00 	lds	r25, 0x0071
 10c:	0a 97       	sbiw	r24, 0x0a	; 10
 10e:	68 f0       	brcs	.+26     	; 0x12a <__vector_9+0x98>
     {
      d2=0;
 110:	10 92 71 00 	sts	0x0071, r1
 114:	10 92 70 00 	sts	0x0070, r1
	  d3++; 
 118:	80 91 74 00 	lds	r24, 0x0074
 11c:	90 91 75 00 	lds	r25, 0x0075
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	90 93 75 00 	sts	0x0075, r25
 126:	80 93 74 00 	sts	0x0074, r24
	 } 
	 if(d3>9)
 12a:	80 91 74 00 	lds	r24, 0x0074
 12e:	90 91 75 00 	lds	r25, 0x0075
 132:	0a 97       	sbiw	r24, 0x0a	; 10
 134:	68 f0       	brcs	.+26     	; 0x150 <__vector_9+0xbe>
	 {
	 d3=0;
 136:	10 92 75 00 	sts	0x0075, r1
 13a:	10 92 74 00 	sts	0x0074, r1
	 d4++;
 13e:	80 91 72 00 	lds	r24, 0x0072
 142:	90 91 73 00 	lds	r25, 0x0073
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	90 93 73 00 	sts	0x0073, r25
 14c:	80 93 72 00 	sts	0x0072, r24
	 }
	 if(d4>9)
 150:	80 91 72 00 	lds	r24, 0x0072
 154:	90 91 73 00 	lds	r25, 0x0073
 158:	0a 97       	sbiw	r24, 0x0a	; 10
 15a:	20 f0       	brcs	.+8      	; 0x164 <__vector_9+0xd2>
	 {
	  d4=0;
 15c:	10 92 73 00 	sts	0x0073, r1
 160:	10 92 72 00 	sts	0x0072, r1
	 }

 } 
}
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <main>:
int main(void)
{
 174:	1f 93       	push	r17
  DDRB=0x0F;
 176:	8f e0       	ldi	r24, 0x0F	; 15
 178:	87 bb       	out	0x17, r24	; 23
 DDRA=0xFF;
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	8a bb       	out	0x1a, r24	; 26
 PORTB=0x00;
 17e:	18 ba       	out	0x18, r1	; 24
 DDRD=0x00;
 180:	11 ba       	out	0x11, r1	; 17
 PORTD=0xFF;
 182:	82 bb       	out	0x12, r24	; 18
 PORTA=0x00;
 184:	1b ba       	out	0x1b, r1	; 27
 TCCR0=(1<<CS00);//1/8mhz
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	83 bf       	out	0x33, r24	; 51
 TCNT0=0;
 18a:	12 be       	out	0x32, r1	; 50
 TIMSK=(1<<TOIE0);
 18c:	89 bf       	out	0x39, r24	; 57
 
 d1=0;
 18e:	10 92 6f 00 	sts	0x006F, r1
 192:	10 92 6e 00 	sts	0x006E, r1
 d2=0;
 196:	10 92 71 00 	sts	0x0071, r1
 19a:	10 92 70 00 	sts	0x0070, r1
 d3=0;
 19e:	10 92 75 00 	sts	0x0075, r1
 1a2:	10 92 74 00 	sts	0x0074, r1
 d4=0;
 1a6:	10 92 73 00 	sts	0x0073, r1
 1aa:	10 92 72 00 	sts	0x0072, r1
 sei(); 
 1ae:	78 94       	sei
 while(1)
 {
   PORTB=0x01;
 1b0:	11 e0       	ldi	r17, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1b2:	40 ed       	ldi	r20, 0xD0	; 208
 1b4:	57 e0       	ldi	r21, 0x07	; 7
	PORTA=segdisp[d1];
	_delay_ms(1);
    PORTB=0x02;
 1b6:	b2 e0       	ldi	r27, 0x02	; 2
	PORTA=segdisp[d2];
	_delay_ms(1);
    PORTB=0x04;
 1b8:	a4 e0       	ldi	r26, 0x04	; 4
	PORTA=segdisp[d3]|dot;
	_delay_ms(1);
    PORTB=0x08;
 1ba:	38 e0       	ldi	r19, 0x08	; 8
 1bc:	60 e2       	ldi	r22, 0x20	; 32
 1be:	7e e4       	ldi	r23, 0x4E	; 78
 d3=0;
 d4=0;
 sei(); 
 while(1)
 {
   PORTB=0x01;
 1c0:	18 bb       	out	0x18, r17	; 24
	PORTA=segdisp[d1];
 1c2:	e0 91 6e 00 	lds	r30, 0x006E
 1c6:	f0 91 6f 00 	lds	r31, 0x006F
 1ca:	e0 5a       	subi	r30, 0xA0	; 160
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	80 81       	ld	r24, Z
 1d0:	8b bb       	out	0x1b, r24	; 27
 1d2:	ca 01       	movw	r24, r20
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <main+0x60>
	_delay_ms(1);
    PORTB=0x02;
 1d8:	b8 bb       	out	0x18, r27	; 24
	PORTA=segdisp[d2];
 1da:	e0 91 70 00 	lds	r30, 0x0070
 1de:	f0 91 71 00 	lds	r31, 0x0071
 1e2:	e0 5a       	subi	r30, 0xA0	; 160
 1e4:	ff 4f       	sbci	r31, 0xFF	; 255
 1e6:	80 81       	ld	r24, Z
 1e8:	8b bb       	out	0x1b, r24	; 27
 1ea:	ca 01       	movw	r24, r20
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0x78>
	_delay_ms(1);
    PORTB=0x04;
 1f0:	a8 bb       	out	0x18, r26	; 24
	PORTA=segdisp[d3]|dot;
 1f2:	e0 91 74 00 	lds	r30, 0x0074
 1f6:	f0 91 75 00 	lds	r31, 0x0075
 1fa:	e0 5a       	subi	r30, 0xA0	; 160
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	20 81       	ld	r18, Z
 200:	80 91 6c 00 	lds	r24, 0x006C
 204:	90 91 6d 00 	lds	r25, 0x006D
 208:	28 2b       	or	r18, r24
 20a:	2b bb       	out	0x1b, r18	; 27
 20c:	ca 01       	movw	r24, r20
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <main+0x9a>
	_delay_ms(1);
    PORTB=0x08;
 212:	38 bb       	out	0x18, r19	; 24
	PORTA=segdisp[d4];
 214:	e0 91 72 00 	lds	r30, 0x0072
 218:	f0 91 73 00 	lds	r31, 0x0073
 21c:	e0 5a       	subi	r30, 0xA0	; 160
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	80 81       	ld	r24, Z
 222:	8b bb       	out	0x1b, r24	; 27
 224:	ca 01       	movw	r24, r20
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <main+0xb2>
	_delay_ms(1);
	if(bit_is_clear(PIND,0))
 22a:	80 99       	sbic	0x10, 0	; 16
 22c:	06 c0       	rjmp	.+12     	; 0x23a <main+0xc6>
 22e:	cb 01       	movw	r24, r22
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0xbc>
	{
	  _delay_ms(10);
	  while(bit_is_clear(PIND,0));
 234:	80 9b       	sbis	0x10, 0	; 16
 236:	fe cf       	rjmp	.-4      	; 0x234 <main+0xc0>
	  cli();
 238:	f8 94       	cli
	}
	if(bit_is_clear(PIND,1))
 23a:	81 99       	sbic	0x10, 1	; 16
 23c:	15 c0       	rjmp	.+42     	; 0x268 <main+0xf4>
 23e:	cb 01       	movw	r24, r22
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0xcc>
	{
	  _delay_ms(10);
	  while(bit_is_clear(PIND,1));
 244:	81 9b       	sbis	0x10, 1	; 16
 246:	fe cf       	rjmp	.-4      	; 0x244 <main+0xd0>
	  d1=0;d2=0;d3=0;d4=0;
 248:	10 92 6f 00 	sts	0x006F, r1
 24c:	10 92 6e 00 	sts	0x006E, r1
 250:	10 92 71 00 	sts	0x0071, r1
 254:	10 92 70 00 	sts	0x0070, r1
 258:	10 92 75 00 	sts	0x0075, r1
 25c:	10 92 74 00 	sts	0x0074, r1
 260:	10 92 73 00 	sts	0x0073, r1
 264:	10 92 72 00 	sts	0x0072, r1
	}
	if(bit_is_clear(PIND,2))
 268:	82 99       	sbic	0x10, 2	; 16
 26a:	aa cf       	rjmp	.-172    	; 0x1c0 <main+0x4c>
 26c:	cb 01       	movw	r24, r22
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <main+0xfa>
	{
	  _delay_ms(10);
	  while(bit_is_clear(PIND,2));
 272:	82 9b       	sbis	0x10, 2	; 16
 274:	fe cf       	rjmp	.-4      	; 0x272 <main+0xfe>
	  sei();
 276:	78 94       	sei
 278:	a3 cf       	rjmp	.-186    	; 0x1c0 <main+0x4c>

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
