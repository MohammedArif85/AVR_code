
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000001f6  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000003e  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002e5  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000183  00000000  00000000  00000539  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ea  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000009a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000fb  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000101  00000000  00000000  00000ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  74:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <eyeread>:
    //volatile unsigned char sense;
	volatile unsigned int readc;
    int eyeread(unsigned char channel)
	 
	{  
	   ADMUX=(1<<REFS0)|channel;
  7c:	80 64       	ori	r24, 0x40	; 64
  7e:	87 b9       	out	0x07, r24	; 7
	   ADCSRA=(1<<ADEN)|(1<<ADPS0);
  80:	81 e8       	ldi	r24, 0x81	; 129
  82:	86 b9       	out	0x06, r24	; 6
	   ADCSRA|=(1<<ADSC);
  84:	36 9a       	sbi	0x06, 6	; 6
	   loop_until_bit_is_set(ADCSRA,ADIF);
  86:	34 9b       	sbis	0x06, 4	; 6
  88:	fe cf       	rjmp	.-4      	; 0x86 <eyeread+0xa>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8a:	80 e2       	ldi	r24, 0x20	; 32
  8c:	9e e4       	ldi	r25, 0x4E	; 78
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <eyeread+0x12>
	   _delay_ms(10);
       return ADCW;
  92:	24 b1       	in	r18, 0x04	; 4
  94:	35 b1       	in	r19, 0x05	; 5
	}   
  96:	c9 01       	movw	r24, r18
  98:	08 95       	ret

0000009a <detectth>:
	 
	 
	 
	 void detectth(unsigned char ch, unsigned int *tune)
     {   
  9a:	fb 01       	movw	r30, r22
      while((PIND&0x01))
	  {
	    ADMUX=(1<<REFS0)|ch;
  9c:	68 2f       	mov	r22, r24
  9e:	60 64       	ori	r22, 0x40	; 64
	   ADCSRA=(1<<ADEN)|(1<<ADPS0);
  a0:	71 e8       	ldi	r23, 0x81	; 129
  a2:	40 e2       	ldi	r20, 0x20	; 32
  a4:	5e e4       	ldi	r21, 0x4E	; 78
	   ADCSRA|=(1<<ADSC);
	   loop_until_bit_is_set(ADCSRA,ADIF);
	   readc=ADCW;
	   _delay_ms(10);
	   ADMUX=(1<<REFS0)|0x03;
  a6:	a3 e4       	ldi	r26, 0x43	; 67
  a8:	24 c0       	rjmp	.+72     	; 0xf2 <detectth+0x58>
	 
	 void detectth(unsigned char ch, unsigned int *tune)
     {   
      while((PIND&0x01))
	  {
	    ADMUX=(1<<REFS0)|ch;
  aa:	67 b9       	out	0x07, r22	; 7
	   ADCSRA=(1<<ADEN)|(1<<ADPS0);
  ac:	76 b9       	out	0x06, r23	; 6
	   ADCSRA|=(1<<ADSC);
  ae:	36 9a       	sbi	0x06, 6	; 6
	   loop_until_bit_is_set(ADCSRA,ADIF);
  b0:	34 9b       	sbis	0x06, 4	; 6
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <detectth+0x16>
	   readc=ADCW;
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	95 b1       	in	r25, 0x05	; 5
  b8:	90 93 63 00 	sts	0x0063, r25
  bc:	80 93 62 00 	sts	0x0062, r24
  c0:	ca 01       	movw	r24, r20
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <detectth+0x28>
	   _delay_ms(10);
	   ADMUX=(1<<REFS0)|0x03;
  c6:	a7 b9       	out	0x07, r26	; 7
	   ADCSRA=(1<<ADEN)|(1<<ADPS0);
  c8:	76 b9       	out	0x06, r23	; 6
	   ADCSRA|=(1<<ADSC);
  ca:	36 9a       	sbi	0x06, 6	; 6
	   loop_until_bit_is_set(ADCSRA,ADIF);
  cc:	34 9b       	sbis	0x06, 4	; 6
  ce:	fe cf       	rjmp	.-4      	; 0xcc <detectth+0x32>
  d0:	ca 01       	movw	r24, r20
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <detectth+0x38>
	   _delay_ms(10);
	   *tune=ADCW;
  d6:	24 b1       	in	r18, 0x04	; 4
  d8:	35 b1       	in	r19, 0x05	; 5
  da:	31 83       	std	Z+1, r19	; 0x01
  dc:	20 83       	st	Z, r18
	   if(*tune<readc)
  de:	80 91 62 00 	lds	r24, 0x0062
  e2:	90 91 63 00 	lds	r25, 0x0063
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
  ea:	10 f4       	brcc	.+4      	; 0xf0 <detectth+0x56>
	   {
	    sbi(PORTA,4);
  ec:	dc 9a       	sbi	0x1b, 4	; 27
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <detectth+0x58>
	   }
	   else
	   {cbi(PORTA,4);
  f0:	dc 98       	cbi	0x1b, 4	; 27
	 
	 
	 
	 void detectth(unsigned char ch, unsigned int *tune)
     {   
      while((PIND&0x01))
  f2:	80 99       	sbic	0x10, 0	; 16
  f4:	da cf       	rjmp	.-76     	; 0xaa <detectth+0x10>
	   else
	   {cbi(PORTA,4);
	   }
	  }
	  
     } 
  f6:	08 95       	ret

000000f8 <main>:
   int main (void)
   
   { unsigned static int tune;
  f8:	1f 93       	push	r17
     DDRA=0XF0;
  fa:	80 ef       	ldi	r24, 0xF0	; 240
  fc:	8a bb       	out	0x1a, r24	; 26
	 PORTA=0X0F;
  fe:	8f e0       	ldi	r24, 0x0F	; 15
 100:	8b bb       	out	0x1b, r24	; 27
     DDRD=0X00;
 102:	11 ba       	out	0x11, r1	; 17
	 PORTD=0XFF;
 104:	1f ef       	ldi	r17, 0xFF	; 255
 106:	12 bb       	out	0x12, r17	; 18
     detectth(0,&tune);
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	60 e6       	ldi	r22, 0x60	; 96
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	0e 94 4d 00 	call	0x9a	; 0x9a <detectth>
	 //sense=0x00;
	 PORTA=0xFF;
 112:	1b bb       	out	0x1b, r17	; 27
 114:	80 e1       	ldi	r24, 0x10	; 16
 116:	97 e2       	ldi	r25, 0x27	; 39
 118:	28 ec       	ldi	r18, 0xC8	; 200
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 122:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 124:	d9 f7       	brne	.-10     	; 0x11c <main+0x24>
	 _delay_ms(1000);              	 
	 PORTA=0x0F;
 126:	8f e0       	ldi	r24, 0x0F	; 15
 128:	8b bb       	out	0x1b, r24	; 27
 12a:	80 e1       	ldi	r24, 0x10	; 16
 12c:	97 e2       	ldi	r25, 0x27	; 39
 12e:	28 ec       	ldi	r18, 0xC8	; 200
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	f9 01       	movw	r30, r18
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 138:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13a:	d9 f7       	brne	.-10     	; 0x132 <main+0x3a>
	 _delay_ms(1000);
	 
	 while(1){
	 readc=eyeread(0);
	  if(tune<readc)
 13c:	20 91 60 00 	lds	r18, 0x0060
 140:	30 91 61 00 	lds	r19, 0x0061
    //volatile unsigned char sense;
	volatile unsigned int readc;
    int eyeread(unsigned char channel)
	 
	{  
	   ADMUX=(1<<REFS0)|channel;
 144:	70 e4       	ldi	r23, 0x40	; 64
	   ADCSRA=(1<<ADEN)|(1<<ADPS0);
 146:	61 e8       	ldi	r22, 0x81	; 129
 148:	40 e2       	ldi	r20, 0x20	; 32
 14a:	5e e4       	ldi	r21, 0x4E	; 78
    //volatile unsigned char sense;
	volatile unsigned int readc;
    int eyeread(unsigned char channel)
	 
	{  
	   ADMUX=(1<<REFS0)|channel;
 14c:	77 b9       	out	0x07, r23	; 7
	   ADCSRA=(1<<ADEN)|(1<<ADPS0);
 14e:	66 b9       	out	0x06, r22	; 6
	   ADCSRA|=(1<<ADSC);
 150:	36 9a       	sbi	0x06, 6	; 6
	   loop_until_bit_is_set(ADCSRA,ADIF);
 152:	34 9b       	sbis	0x06, 4	; 6
 154:	fe cf       	rjmp	.-4      	; 0x152 <main+0x5a>
 156:	ca 01       	movw	r24, r20
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0x60>
	   _delay_ms(10);
       return ADCW;
 15c:	84 b1       	in	r24, 0x04	; 4
 15e:	95 b1       	in	r25, 0x05	; 5
	 _delay_ms(1000);              	 
	 PORTA=0x0F;
	 _delay_ms(1000);
	 
	 while(1){
	 readc=eyeread(0);
 160:	90 93 63 00 	sts	0x0063, r25
 164:	80 93 62 00 	sts	0x0062, r24
	  if(tune<readc)
 168:	80 91 62 00 	lds	r24, 0x0062
 16c:	90 91 63 00 	lds	r25, 0x0063
 170:	28 17       	cp	r18, r24
 172:	39 07       	cpc	r19, r25
 174:	10 f4       	brcc	.+4      	; 0x17a <main+0x82>
	   {
	    sbi(PORTA,4);
 176:	dc 9a       	sbi	0x1b, 4	; 27
 178:	e9 cf       	rjmp	.-46     	; 0x14c <main+0x54>
	   }
	   else
	   {cbi(PORTA,4);
 17a:	dc 98       	cbi	0x1b, 4	; 27
 17c:	e7 cf       	rjmp	.-50     	; 0x14c <main+0x54>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
