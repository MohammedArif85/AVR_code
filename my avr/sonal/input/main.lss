
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000071  00000000  00000000  00000145  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000003d  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000103  00000000  00000000  000001f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000095  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
#include<sfr_defs.h>
void main()
{
DDRA=0XF0;
  6c:	80 ef       	ldi	r24, 0xF0	; 240
  6e:	8a bb       	out	0x1a, r24	; 26
DDRB=0x00;
  70:	17 ba       	out	0x17, r1	; 23
PORTB=0xFF;
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	88 bb       	out	0x18, r24	; 24
DDRD=0x00;
  76:	11 ba       	out	0x11, r1	; 17
PORTD=0xFF;
  78:	82 bb       	out	0x12, r24	; 18
PORTA=0x00;
  7a:	1b ba       	out	0x1b, r1	; 27
while(1)
{
 if(bit_is_clear(PINB,2))
 {
  PORTA=0xF0;
  7c:	40 ef       	ldi	r20, 0xF0	; 240
 {
  PORTA=0x40;
  }
   else if(bit_is_clear(PIND,3))
 {
  PORTA=0x80;
  7e:	30 e8       	ldi	r19, 0x80	; 128
 {
  PORTA=0x20;
  }
  else if(bit_is_clear(PIND,2))
 {
  PORTA=0x40;
  80:	20 e4       	ldi	r18, 0x40	; 64
 {
  PORTA=0x10;
  }
 else if(bit_is_clear(PIND,1))
 {
  PORTA=0x20;
  82:	90 e2       	ldi	r25, 0x20	; 32
 {
  PORTA=0xF0;
 }
 else if(bit_is_clear(PIND,0))
 {
  PORTA=0x10;
  84:	80 e1       	ldi	r24, 0x10	; 16
DDRD=0x00;
PORTD=0xFF;
PORTA=0x00;
while(1)
{
 if(bit_is_clear(PINB,2))
  86:	b2 99       	sbic	0x16, 2	; 22
  88:	02 c0       	rjmp	.+4      	; 0x8e <main+0x22>
 {
  PORTA=0xF0;
  8a:	4b bb       	out	0x1b, r20	; 27
  8c:	fc cf       	rjmp	.-8      	; 0x86 <main+0x1a>
 }
 else if(bit_is_clear(PIND,0))
  8e:	80 99       	sbic	0x10, 0	; 16
  90:	02 c0       	rjmp	.+4      	; 0x96 <main+0x2a>
 {
  PORTA=0x10;
  92:	8b bb       	out	0x1b, r24	; 27
  94:	f8 cf       	rjmp	.-16     	; 0x86 <main+0x1a>
  }
 else if(bit_is_clear(PIND,1))
  96:	81 99       	sbic	0x10, 1	; 16
  98:	02 c0       	rjmp	.+4      	; 0x9e <main+0x32>
 {
  PORTA=0x20;
  9a:	9b bb       	out	0x1b, r25	; 27
  9c:	f4 cf       	rjmp	.-24     	; 0x86 <main+0x1a>
  }
  else if(bit_is_clear(PIND,2))
  9e:	82 99       	sbic	0x10, 2	; 16
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <main+0x3a>
 {
  PORTA=0x40;
  a2:	2b bb       	out	0x1b, r18	; 27
  a4:	f0 cf       	rjmp	.-32     	; 0x86 <main+0x1a>
  }
   else if(bit_is_clear(PIND,3))
  a6:	83 99       	sbic	0x10, 3	; 16
  a8:	02 c0       	rjmp	.+4      	; 0xae <main+0x42>
 {
  PORTA=0x80;
  aa:	3b bb       	out	0x1b, r19	; 27
  ac:	ec cf       	rjmp	.-40     	; 0x86 <main+0x1a>
  }
   else 
 {
  PORTA=0x00;
  ae:	1b ba       	out	0x1b, r1	; 27
  b0:	ea cf       	rjmp	.-44     	; 0x86 <main+0x1a>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
