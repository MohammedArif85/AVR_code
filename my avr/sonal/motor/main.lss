
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000157  00000000  00000000  0000014d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d9  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000019d  00000000  00000000  0000037d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d8  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000a0  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
#include<sfr_defs.h>
int main(void)
{DDRD=0x00;
  6c:	11 ba       	out	0x11, r1	; 17
PORTD=0xFF;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	82 bb       	out	0x12, r24	; 18
DDRC=0XFF;
  72:	84 bb       	out	0x14, r24	; 20
PORTC=0x00;
  74:	15 ba       	out	0x15, r1	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  76:	28 ec       	ldi	r18, 0xC8	; 200
  78:	30 e0       	ldi	r19, 0x00	; 0

if(!(PIND&0x01))
{
_delay_ms(500);
while(!(PIND&0x01))
PORTC=0x55;
  7a:	55 e5       	ldi	r21, 0x55	; 85
}
else if(!(PIND&0x02))
{
_delay_ms(500);
while(!(PIND&0x02))
PORTC=0xAA;
  7c:	4a ea       	ldi	r20, 0xAA	; 170
DDRC=0XFF;
PORTC=0x00;
while(1)
{

if(!(PIND&0x01))
  7e:	80 99       	sbic	0x10, 0	; 16
  80:	0c c0       	rjmp	.+24     	; 0x9a <main+0x2e>
  82:	88 e8       	ldi	r24, 0x88	; 136
  84:	93 e1       	ldi	r25, 0x13	; 19
  86:	f9 01       	movw	r30, r18
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <main+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  8c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  8e:	d9 f7       	brne	.-10     	; 0x86 <main+0x1a>
  90:	01 c0       	rjmp	.+2      	; 0x94 <main+0x28>
{
_delay_ms(500);
while(!(PIND&0x01))
PORTC=0x55;
  92:	55 bb       	out	0x15, r21	; 21
{

if(!(PIND&0x01))
{
_delay_ms(500);
while(!(PIND&0x01))
  94:	80 9b       	sbis	0x10, 0	; 16
  96:	fd cf       	rjmp	.-6      	; 0x92 <main+0x26>
  98:	f2 cf       	rjmp	.-28     	; 0x7e <main+0x12>
PORTC=0x55;
}
else if(!(PIND&0x02))
  9a:	81 99       	sbic	0x10, 1	; 16
  9c:	0c c0       	rjmp	.+24     	; 0xb6 <main+0x4a>
  9e:	88 e8       	ldi	r24, 0x88	; 136
  a0:	93 e1       	ldi	r25, 0x13	; 19
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <main+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  aa:	d9 f7       	brne	.-10     	; 0xa2 <main+0x36>
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <main+0x44>
{
_delay_ms(500);
while(!(PIND&0x02))
PORTC=0xAA;
  ae:	45 bb       	out	0x15, r20	; 21
PORTC=0x55;
}
else if(!(PIND&0x02))
{
_delay_ms(500);
while(!(PIND&0x02))
  b0:	81 9b       	sbis	0x10, 1	; 16
  b2:	fd cf       	rjmp	.-6      	; 0xae <main+0x42>
  b4:	e4 cf       	rjmp	.-56     	; 0x7e <main+0x12>
PORTC=0xAA;
}
else
{
 PORTC=0x00;
  b6:	15 ba       	out	0x15, r1	; 21
  b8:	e2 cf       	rjmp	.-60     	; 0x7e <main+0x12>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
