
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000065  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000740  00000000  00000000  0000037b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000179  00000000  00000000  00000abb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000410  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000108  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001fe  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000a8  00000000  00000000  000013ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  64:	0c 94 4f 01 	jmp	0x29e	; 0x29e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcd_reset>:
#define LCD_RW      0x02
#define LCD_EN      0x04

void lcd_reset(void)
{
        lcd_port = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	88 bb       	out	0x18, r24	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  70:	80 e4       	ldi	r24, 0x40	; 64
  72:	9c e9       	ldi	r25, 0x9C	; 156
  74:	01 97       	sbiw	r24, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <lcd_reset+0x8>
        _delay_ms(20);
        lcd_port = 0x30+LCD_EN;
  78:	94 e3       	ldi	r25, 0x34	; 52
  7a:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  7c:	80 e3       	ldi	r24, 0x30	; 48
  7e:	88 bb       	out	0x18, r24	; 24
  80:	e0 e2       	ldi	r30, 0x20	; 32
  82:	fe e4       	ldi	r31, 0x4E	; 78
  84:	31 97       	sbiw	r30, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <lcd_reset+0x18>
        _delay_ms(10);
        lcd_port = 0x30+LCD_EN;
  88:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  8a:	88 bb       	out	0x18, r24	; 24
  8c:	20 ed       	ldi	r18, 0xD0	; 208
  8e:	37 e0       	ldi	r19, 0x07	; 7
  90:	f9 01       	movw	r30, r18
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <lcd_reset+0x26>
        _delay_ms(1);
        lcd_port = 0x30+LCD_EN;
  96:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  98:	88 bb       	out	0x18, r24	; 24
  9a:	c9 01       	movw	r24, r18
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcd_reset+0x30>
        _delay_ms(1);
        lcd_port = 0x20+LCD_EN;
  a0:	84 e2       	ldi	r24, 0x24	; 36
  a2:	88 bb       	out	0x18, r24	; 24
        lcd_port = 0x20;
  a4:	80 e2       	ldi	r24, 0x20	; 32
  a6:	88 bb       	out	0x18, r24	; 24
  a8:	c9 01       	movw	r24, r18
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_reset+0x3e>
        _delay_ms(1);
}
  ae:	08 95       	ret

000000b0 <lcd_cmd>:
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
  b0:	38 2f       	mov	r19, r24
  b2:	30 7f       	andi	r19, 0xF0	; 240
  b4:	23 2f       	mov	r18, r19
  b6:	24 60       	ori	r18, 0x04	; 4
  b8:	28 bb       	out	0x18, r18	; 24
        lcd_port = (cmd & 0xF0);
  ba:	38 bb       	out	0x18, r19	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	24 e0       	ldi	r18, 0x04	; 4
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	2a 95       	dec	r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <lcd_cmd+0x10>
  c8:	28 2f       	mov	r18, r24
  ca:	24 60       	ori	r18, 0x04	; 4
  cc:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((cmd << 4) & 0xF0);
  ce:	88 bb       	out	0x18, r24	; 24
  d0:	80 ea       	ldi	r24, 0xA0	; 160
  d2:	9f e0       	ldi	r25, 0x0F	; 15
  d4:	fc 01       	movw	r30, r24
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_cmd+0x26>

      

        _delay_ms(2);
        _delay_ms(2);
}
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd_cmd+0x2a>
  de:	08 95       	ret

000000e0 <lcd_init>:

void lcd_init (void)
{       DDRB=0xFF;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	87 bb       	out	0x17, r24	; 23
        PORTB=0x00; 
  e4:	18 ba       	out	0x18, r1	; 24
        lcd_reset();         // Call LCD reset
  e6:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_reset>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
  ea:	84 e2       	ldi	r24, 0x24	; 36
  ec:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
  ee:	80 e2       	ldi	r24, 0x20	; 32
  f0:	88 bb       	out	0x18, r24	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
  f2:	54 e8       	ldi	r21, 0x84	; 132
  f4:	58 bb       	out	0x18, r21	; 24
        lcd_port = ((cmd << 4) & 0xF0);
  f6:	40 e8       	ldi	r20, 0x80	; 128
  f8:	48 bb       	out	0x18, r20	; 24
  fa:	20 ea       	ldi	r18, 0xA0	; 160
  fc:	3f e0       	ldi	r19, 0x0F	; 15
  fe:	c9 01       	movw	r24, r18
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_init+0x20>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 104:	c9 01       	movw	r24, r18
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_init+0x26>
 10a:	94 e0       	ldi	r25, 0x04	; 4
 10c:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 10e:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 110:	84 ec       	ldi	r24, 0xC4	; 196
 112:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 114:	80 ec       	ldi	r24, 0xC0	; 192
 116:	88 bb       	out	0x18, r24	; 24
 118:	f9 01       	movw	r30, r18
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_init+0x3a>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 11e:	f9 01       	movw	r30, r18
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <lcd_init+0x40>
 124:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 126:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 128:	84 e6       	ldi	r24, 0x64	; 100
 12a:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 12c:	80 e6       	ldi	r24, 0x60	; 96
 12e:	88 bb       	out	0x18, r24	; 24
 130:	f9 01       	movw	r30, r18
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_init+0x52>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 136:	f9 01       	movw	r30, r18
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_init+0x58>
 13c:	58 bb       	out	0x18, r21	; 24
        lcd_port = (cmd & 0xF0);
 13e:	48 bb       	out	0x18, r20	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 140:	98 bb       	out	0x18, r25	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 142:	18 ba       	out	0x18, r1	; 24
 144:	c9 01       	movw	r24, r18
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_init+0x66>
        lcd_reset();         // Call LCD reset
        lcd_cmd(0x28);       // 4-bit mode - 2 line - 5x7 font.
        lcd_cmd(0x0C);       // Display on cursor - off .
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 }
 14a:	c9 01       	movw	r24, r18
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_init+0x6c>
 150:	08 95       	ret

00000152 <lcd_data>:


void lcd_data (unsigned char dat)
{
        lcd_port = ((dat & 0xF0)|LCD_EN|LCD_RS);
 152:	98 2f       	mov	r25, r24
 154:	90 7f       	andi	r25, 0xF0	; 240
 156:	29 2f       	mov	r18, r25
 158:	25 60       	ori	r18, 0x05	; 5
 15a:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((dat & 0xF0)|LCD_RS);
 15c:	91 60       	ori	r25, 0x01	; 1
 15e:	98 bb       	out	0x18, r25	; 24
		
		lcd_port = (((dat << 4) & 0xF0)|LCD_EN|LCD_RS);
 160:	82 95       	swap	r24
 162:	80 7f       	andi	r24, 0xF0	; 240
 164:	98 2f       	mov	r25, r24
 166:	95 60       	ori	r25, 0x05	; 5
 168:	98 bb       	out	0x18, r25	; 24
        lcd_port = (((dat << 4) & 0xF0)|LCD_RS);
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	88 bb       	out	0x18, r24	; 24
 16e:	80 ea       	ldi	r24, 0xA0	; 160
 170:	9f e0       	ldi	r25, 0x0F	; 15
 172:	fc 01       	movw	r30, r24
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_data+0x22>
       
      

       _delay_ms(2);
       _delay_ms(2);
}
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_data+0x26>
 17c:	08 95       	ret

0000017e <lcd_puts>:
void lcd_puts(char *aaa)
{
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	ec 01       	movw	r28, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <lcd_puts+0xc>
unsigned int i;
for(i=0;aaa[i]!=0;i++)
lcd_data(aaa[i]);
 186:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_data>
       _delay_ms(2);
}
void lcd_puts(char *aaa)
{
unsigned int i;
for(i=0;aaa[i]!=0;i++)
 18a:	89 91       	ld	r24, Y+
 18c:	88 23       	and	r24, r24
 18e:	d9 f7       	brne	.-10     	; 0x186 <lcd_puts+0x8>
lcd_data(aaa[i]);

}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <itoa>:
void itoa(uint16_t num)
{
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	8c 01       	movw	r16, r24
 num=num/10;
 b=num%10;
 num=num/10;

 
 lcd_data(0x30+b); 
 19c:	6a e0       	ldi	r22, 0x0A	; 10
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	0e 94 3b 01 	call	0x276	; 0x276 <__udivmodhi4>
 1a4:	cb 01       	movw	r24, r22
 1a6:	6a e0       	ldi	r22, 0x0A	; 10
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 3b 01 	call	0x276	; 0x276 <__udivmodhi4>
 1ae:	80 5d       	subi	r24, 0xD0	; 208
 1b0:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_data>
 lcd_data(0x30+a); 
 1b4:	c8 01       	movw	r24, r16
 1b6:	6a e0       	ldi	r22, 0x0A	; 10
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	0e 94 3b 01 	call	0x276	; 0x276 <__udivmodhi4>
 1be:	80 5d       	subi	r24, 0xD0	; 208
 1c0:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_data>
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <main>:
#include<avr/io.h>
#include<util/delay.h>
#include "lcd.h"

int main(void)
{ int s,m;
 1ca:	8f 92       	push	r8
 1cc:	9f 92       	push	r9
 1ce:	af 92       	push	r10
 1d0:	bf 92       	push	r11
 1d2:	cf 92       	push	r12
 1d4:	df 92       	push	r13
 1d6:	ef 92       	push	r14
 1d8:	ff 92       	push	r15
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
  lcd_init();
 1e2:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_init>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 1e6:	84 e0       	ldi	r24, 0x04	; 4
 1e8:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 1ea:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 1ec:	84 e1       	ldi	r24, 0x14	; 20
 1ee:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 1f0:	80 e1       	ldi	r24, 0x10	; 16
 1f2:	88 bb       	out	0x18, r24	; 24
 1f4:	80 ea       	ldi	r24, 0xA0	; 160
 1f6:	9f e0       	ldi	r25, 0x0F	; 15
 1f8:	fc 01       	movw	r30, r24
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <main+0x30>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <main+0x34>
 202:	00 e0       	ldi	r16, 0x00	; 0
 204:	10 e0       	ldi	r17, 0x00	; 0
 206:	e0 ea       	ldi	r30, 0xA0	; 160
 208:	ee 2e       	mov	r14, r30
 20a:	ef e0       	ldi	r30, 0x0F	; 15
 20c:	fe 2e       	mov	r15, r30
 20e:	78 ec       	ldi	r23, 0xC8	; 200
 210:	c7 2e       	mov	r12, r23
 212:	d1 2c       	mov	r13, r1
 214:	64 e8       	ldi	r22, 0x84	; 132
 216:	86 2e       	mov	r8, r22
        lcd_port = (cmd & 0xF0);
 218:	50 e8       	ldi	r21, 0x80	; 128
 21a:	95 2e       	mov	r9, r21
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 21c:	44 e2       	ldi	r20, 0x24	; 36
 21e:	a4 2e       	mov	r10, r20
        lcd_port = ((cmd << 4) & 0xF0);
 220:	30 e2       	ldi	r19, 0x20	; 32
 222:	b3 2e       	mov	r11, r19
 224:	25 c0       	rjmp	.+74     	; 0x270 <main+0xa6>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 226:	88 ba       	out	0x18, r8	; 24
        lcd_port = (cmd & 0xF0);
 228:	98 ba       	out	0x18, r9	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 22a:	a8 ba       	out	0x18, r10	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 22c:	b8 ba       	out	0x18, r11	; 24
 22e:	c7 01       	movw	r24, r14
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0x66>
 for(m=0;m<=59;m++)
 {
 for( s=1;s<=59;s++)
 {
 lcd_cmd(0x82);
  itoa(m);
 234:	c7 01       	movw	r24, r14
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <main+0x6c>
 23a:	c8 01       	movw	r24, r16
 23c:	0e 94 cb 00 	call	0x196	; 0x196 <itoa>
  lcd_data(':');
 240:	8a e3       	ldi	r24, 0x3A	; 58
 242:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_data>
  itoa(s);
 246:	ce 01       	movw	r24, r28
 248:	0e 94 cb 00 	call	0x196	; 0x196 <itoa>
 24c:	80 e1       	ldi	r24, 0x10	; 16
 24e:	97 e2       	ldi	r25, 0x27	; 39
 250:	f6 01       	movw	r30, r12
 252:	31 97       	sbiw	r30, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <main+0x88>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 256:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 258:	d9 f7       	brne	.-10     	; 0x250 <main+0x86>
  lcd_cmd(0x01);
  while(1)
  {
 for(m=0;m<=59;m++)
 {
 for( s=1;s<=59;s++)
 25a:	21 96       	adiw	r28, 0x01	; 1
 25c:	cc 33       	cpi	r28, 0x3C	; 60
 25e:	d1 05       	cpc	r29, r1
 260:	11 f7       	brne	.-60     	; 0x226 <main+0x5c>
{ int s,m;
  lcd_init();
  lcd_cmd(0x01);
  while(1)
  {
 for(m=0;m<=59;m++)
 262:	0f 5f       	subi	r16, 0xFF	; 255
 264:	1f 4f       	sbci	r17, 0xFF	; 255
 266:	0c 33       	cpi	r16, 0x3C	; 60
 268:	11 05       	cpc	r17, r1
 26a:	14 f0       	brlt	.+4      	; 0x270 <main+0xa6>
 26c:	00 e0       	ldi	r16, 0x00	; 0
 26e:	10 e0       	ldi	r17, 0x00	; 0
 270:	c1 e0       	ldi	r28, 0x01	; 1
 272:	d0 e0       	ldi	r29, 0x00	; 0
 274:	d8 cf       	rjmp	.-80     	; 0x226 <main+0x5c>

00000276 <__udivmodhi4>:
 276:	aa 1b       	sub	r26, r26
 278:	bb 1b       	sub	r27, r27
 27a:	51 e1       	ldi	r21, 0x11	; 17
 27c:	07 c0       	rjmp	.+14     	; 0x28c <__udivmodhi4_ep>

0000027e <__udivmodhi4_loop>:
 27e:	aa 1f       	adc	r26, r26
 280:	bb 1f       	adc	r27, r27
 282:	a6 17       	cp	r26, r22
 284:	b7 07       	cpc	r27, r23
 286:	10 f0       	brcs	.+4      	; 0x28c <__udivmodhi4_ep>
 288:	a6 1b       	sub	r26, r22
 28a:	b7 0b       	sbc	r27, r23

0000028c <__udivmodhi4_ep>:
 28c:	88 1f       	adc	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	5a 95       	dec	r21
 292:	a9 f7       	brne	.-22     	; 0x27e <__udivmodhi4_loop>
 294:	80 95       	com	r24
 296:	90 95       	com	r25
 298:	bc 01       	movw	r22, r24
 29a:	cd 01       	movw	r24, r26
 29c:	08 95       	ret

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
