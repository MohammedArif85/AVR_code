
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002698  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00002698  0000272c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002e6  00800084  00800084  00002750  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002750  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000663  00000000  00000000  00002770  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002d55  00000000  00000000  00002dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000449  00000000  00000000  00005b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002595  00000000  00000000  00005f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004c0  00000000  00000000  00008508  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009ae  00000000  00000000  000089c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002229  00000000  00000000  00009376  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  0000b59f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__ctors_end>
       4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
       8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
       c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      10:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      14:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      18:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      1c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      20:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      24:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__vector_9>
      28:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      2c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      30:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      34:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      38:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      3c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      40:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      44:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      48:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      4c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
      50:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>

00000054 <arpreqhdr>:
      54:	00 01 08 00 06 04 00 01                             ........

0000005c <iphdr>:
      5c:	45 00 00 82 00 00 40 00 20                          E.....@. 

00000065 <__c.3209>:
      65:	48 54 54 50 2f 31 2e 30 20 34 30 31 20 55 6e 61     HTTP/1.0 401 Una
      75:	75 74 68 6f 72 69 7a 65 64 0d 0a 43 6f 6e 74 65     uthorized..Conte
      85:	6e 74 2d 54 79 70 65 3a 20 74 65 78 74 2f 68 74     nt-Type: text/ht
      95:	6d 6c 0d 0a 0d 0a 3c 68 31 3e 34 30 31 20 55 6e     ml....<h1>401 Un
      a5:	61 75 74 68 6f 72 69 7a 65 64 3c 2f 68 31 3e 00     authorized</h1>.

000000b5 <__c.3206>:
      b5:	3c 68 31 3e 32 30 30 20 4f 4b 3c 2f 68 31 3e 00     <h1>200 OK</h1>.

000000c5 <__c.3204>:
      c5:	74 75 78 67 72 61 70 68 69 63 73 2e 6f 72 67 00     tuxgraphics.org.

000000d5 <__c.3202>:
      d5:	2f 63 67 69 2d 62 69 6e 2f 75 70 6c 64 3f 70 69     /cgi-bin/upld?pi
      e5:	6e 67 49 50 3d 63 68 69 26 79 3d 00                 ngIP=chi&y=.

000000f1 <__c.3200>:
      f1:	64 64 61 6e 75 70 61 6d 00                          ddanupam.

000000fa <__c.3198>:
      fa:	74 75 78 67 72 61 70 68 69 63 73 2e 6f 72 67 00     tuxgraphics.org.

0000010a <__c.3127>:
     10a:	0a 3c 2f 70 72 65 3e 3c 62 72 3e 3c 68 72 3e 00     .</pre><br><hr>.

0000011a <__c.3125>:
     11a:	0a 63 68 65 63 6b 20 72 65 73 75 6c 74 3a 20 3c     .check result: <
     12a:	61 20 68 72 65 66 3d 68 74 74 70 3a 2f 2f 74 75     a href=http://tu
     13a:	78 67 72 61 70 68 69 63 73 2e 6f 72 67 2f 63 67     xgraphics.org/cg
     14a:	69 2d 62 69 6e 2f 75 70 6c 64 3e 68 74 74 70 3a     i-bin/upld>http:
     15a:	2f 2f 74 75 78 67 72 61 70 68 69 63 73 2e 6f 72     //tuxgraphics.or
     16a:	67 2f 63 67 69 2d 62 69 6e 2f 75 70 6c 64 3c 2f     g/cgi-bin/upld</
     17a:	61 3e 00                                            a>.

0000017d <__c.3123>:
     17d:	0a 4e 75 6d 62 65 72 20 73 75 63 63 65 73 73 66     .Number successf
     18d:	75 6c 20 64 61 74 61 20 75 70 6c 6f 61 64 73 20     ul data uploads 
     19d:	74 6f 20 77 65 62 3a 20 00                          to web: .

000001a6 <__c.3121>:
     1a6:	4e 75 6d 62 65 72 20 6f 66 20 64 61 74 61 20 75     Number of data u
     1b6:	70 6c 6f 61 64 73 20 73 74 61 72 74 65 64 20 62     ploads started b
     1c6:	79 20 70 69 6e 67 3a 20 00                          y ping: .

000001cf <__c.3119>:
     1cf:	77 61 69 74 69 6e 67 20 66 6f 72 20 44 4e 53 20     waiting for DNS 
     1df:	61 6e 73 77 65 72 2e 0a 00                          answer...

000001e8 <__c.3117>:
     1e8:	77 61 69 74 69 6e 67 20 66 6f 72 20 47 57 20 49     waiting for GW I
     1f8:	50 20 74 6f 20 61 6e 73 77 65 72 20 61 72 70 2e     P to answer arp.
     208:	0a 00                                               ..

0000020a <__c.3115>:
     20a:	3c 68 32 3e 77 65 62 20 63 6c 69 65 6e 74 20 73     <h2>web client s
     21a:	74 61 74 75 73 3c 2f 68 32 3e 0a 3c 70 72 65 3e     tatus</h2>.<pre>
     22a:	0a 00                                               ..

0000022c <__c.3106>:
     22c:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     23c:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     24c:	65 78 74 2f 68 74 6d 6c 0d 0a 50 72 61 67 6d 61     ext/html..Pragma
     25c:	3a 20 6e 6f 2d 63 61 63 68 65 0d 0a 0d 0a 00        : no-cache.....

0000026b <__c.2659>:
     26b:	0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20     ..Content-Type: 
     27b:	61 70 70 6c 69 63 61 74 69 6f 6e 2f 78 2d 77 77     application/x-ww
     28b:	77 2d 66 6f 72 6d 2d 75 72 6c 65 6e 63 6f 64 65     w-form-urlencode
     29b:	64 0d 0a 0d 0a 00                                   d.....

000002a1 <__c.2657>:
     2a1:	43 6f 6e 74 65 6e 74 2d 4c 65 6e 67 74 68 3a 20     Content-Length: 
     2b1:	00                                                  .

000002b2 <__c.2655>:
     2b2:	0d 0a 55 73 65 72 2d 41 67 65 6e 74 3a 20 74 67     ..User-Agent: tg
     2c2:	72 2f 31 2e 31 0d 0a 41 63 63 65 70 74 3a 20 2a     r/1.1..Accept: *
     2d2:	2f 2a 0d 0a 43 6f 6e 6e 65 63 74 69 6f 6e 3a 20     /*..Connection: 
     2e2:	63 6c 6f 73 65 0d 0a 00                             close...

000002ea <__c.2653>:
     2ea:	0d 0a 00                                            ...

000002ed <__c.2651>:
     2ed:	20 48 54 54 50 2f 31 2e 31 0d 0a 48 6f 73 74 3a      HTTP/1.1..Host:
     2fd:	20 00                                                .

000002ff <__c.2649>:
     2ff:	50 4f 53 54 20 00                                   POST .

00000305 <__c.2647>:
     305:	0d 0a 55 73 65 72 2d 41 67 65 6e 74 3a 20 74 67     ..User-Agent: tg
     315:	72 2f 31 2e 30 0d 0a 41 63 63 65 70 74 3a 20 74     r/1.0..Accept: t
     325:	65 78 74 2f 68 74 6d 6c 0d 0a 43 6f 6e 6e 65 63     ext/html..Connec
     335:	74 69 6f 6e 3a 20 63 6c 6f 73 65 0d 0a 0d 0a 00     tion: close.....

00000345 <__c.2645>:
     345:	20 48 54 54 50 2f 31 2e 31 0d 0a 48 6f 73 74 3a      HTTP/1.1..Host:
     355:	20 00                                                .

00000357 <__c.2643>:
     357:	47 45 54 20 00                                      GET .

0000035c <__ctors_end>:
     35c:	11 24       	eor	r1, r1
     35e:	1f be       	out	0x3f, r1	; 63
     360:	cf e5       	ldi	r28, 0x5F	; 95
     362:	d4 e0       	ldi	r29, 0x04	; 4
     364:	de bf       	out	0x3e, r29	; 62
     366:	cd bf       	out	0x3d, r28	; 61

00000368 <__do_copy_data>:
     368:	10 e0       	ldi	r17, 0x00	; 0
     36a:	a0 e6       	ldi	r26, 0x60	; 96
     36c:	b0 e0       	ldi	r27, 0x00	; 0
     36e:	e8 e9       	ldi	r30, 0x98	; 152
     370:	f6 e2       	ldi	r31, 0x26	; 38
     372:	02 c0       	rjmp	.+4      	; 0x378 <.do_copy_data_start>

00000374 <.do_copy_data_loop>:
     374:	05 90       	lpm	r0, Z+
     376:	0d 92       	st	X+, r0

00000378 <.do_copy_data_start>:
     378:	a4 38       	cpi	r26, 0x84	; 132
     37a:	b1 07       	cpc	r27, r17
     37c:	d9 f7       	brne	.-10     	; 0x374 <.do_copy_data_loop>

0000037e <__do_clear_bss>:
     37e:	13 e0       	ldi	r17, 0x03	; 3
     380:	a4 e8       	ldi	r26, 0x84	; 132
     382:	b0 e0       	ldi	r27, 0x00	; 0
     384:	01 c0       	rjmp	.+2      	; 0x388 <.do_clear_bss_start>

00000386 <.do_clear_bss_loop>:
     386:	1d 92       	st	X+, r1

00000388 <.do_clear_bss_start>:
     388:	aa 36       	cpi	r26, 0x6A	; 106
     38a:	b1 07       	cpc	r27, r17
     38c:	e1 f7       	brne	.-8      	; 0x386 <.do_clear_bss_loop>
     38e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <main>
     392:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <_exit>

00000396 <__bad_interrupt>:
     396:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000039a <enc28j60ReadOp>:
//
#define waitspi() while(!(SPSR&(1<<SPIF)))

uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
{
        CSACTIVE;
     39a:	c4 98       	cbi	0x18, 4	; 24
        // issue read command
        SPDR = op | (address & ADDR_MASK);
     39c:	96 2f       	mov	r25, r22
     39e:	9f 71       	andi	r25, 0x1F	; 31
     3a0:	98 2b       	or	r25, r24
     3a2:	9f b9       	out	0x0f, r25	; 15
        waitspi();
     3a4:	77 9b       	sbis	0x0e, 7	; 14
     3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <enc28j60ReadOp+0xa>
        // read data
        SPDR = 0x00;
     3a8:	1f b8       	out	0x0f, r1	; 15
        waitspi();
     3aa:	77 9b       	sbis	0x0e, 7	; 14
     3ac:	fe cf       	rjmp	.-4      	; 0x3aa <enc28j60ReadOp+0x10>
        // do dummy read if needed (for mac and mii, see datasheet page 29)
        if(address & 0x80)
     3ae:	67 ff       	sbrs	r22, 7
     3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <enc28j60ReadOp+0x1e>
        {
                SPDR = 0x00;
     3b2:	1f b8       	out	0x0f, r1	; 15
                waitspi();
     3b4:	77 9b       	sbis	0x0e, 7	; 14
     3b6:	fe cf       	rjmp	.-4      	; 0x3b4 <enc28j60ReadOp+0x1a>
        }
        // release CS
        CSPASSIVE;
     3b8:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
     3ba:	8f b1       	in	r24, 0x0f	; 15
}
     3bc:	08 95       	ret

000003be <enc28j60WriteOp>:

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     3be:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     3c0:	6f 71       	andi	r22, 0x1F	; 31
     3c2:	68 2b       	or	r22, r24
     3c4:	6f b9       	out	0x0f, r22	; 15
        waitspi();
     3c6:	77 9b       	sbis	0x0e, 7	; 14
     3c8:	fe cf       	rjmp	.-4      	; 0x3c6 <enc28j60WriteOp+0x8>
        // write data
        SPDR = data;
     3ca:	4f b9       	out	0x0f, r20	; 15
        waitspi();
     3cc:	77 9b       	sbis	0x0e, 7	; 14
     3ce:	fe cf       	rjmp	.-4      	; 0x3cc <enc28j60WriteOp+0xe>
        CSPASSIVE;
     3d0:	c4 9a       	sbi	0x18, 4	; 24
}
     3d2:	08 95       	ret

000003d4 <enc28j60ReadBuffer>:

void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
{
     3d4:	ac 01       	movw	r20, r24
     3d6:	fb 01       	movw	r30, r22
        CSACTIVE;
     3d8:	c4 98       	cbi	0x18, 4	; 24
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
     3da:	8a e3       	ldi	r24, 0x3A	; 58
     3dc:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     3de:	77 9b       	sbis	0x0e, 7	; 14
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <enc28j60ReadBuffer+0xa>
     3e2:	9a 01       	movw	r18, r20
     3e4:	df 01       	movw	r26, r30
     3e6:	07 c0       	rjmp	.+14     	; 0x3f6 <enc28j60ReadBuffer+0x22>
        while(len)
        {
                len--;
                // read data
                SPDR = 0x00;
     3e8:	1f b8       	out	0x0f, r1	; 15
                waitspi();
     3ea:	77 9b       	sbis	0x0e, 7	; 14
     3ec:	fe cf       	rjmp	.-4      	; 0x3ea <enc28j60ReadBuffer+0x16>
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     3ee:	21 50       	subi	r18, 0x01	; 1
     3f0:	30 40       	sbci	r19, 0x00	; 0
                // read data
                SPDR = 0x00;
                waitspi();
                *data = SPDR;
     3f2:	8f b1       	in	r24, 0x0f	; 15
     3f4:	8d 93       	st	X+, r24
{
        CSACTIVE;
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
        waitspi();
        while(len)
     3f6:	21 15       	cp	r18, r1
     3f8:	31 05       	cpc	r19, r1
     3fa:	b1 f7       	brne	.-20     	; 0x3e8 <enc28j60ReadBuffer+0x14>
                SPDR = 0x00;
                waitspi();
                *data = SPDR;
                data++;
        }
        *data='\0';
     3fc:	e4 0f       	add	r30, r20
     3fe:	f5 1f       	adc	r31, r21
     400:	10 82       	st	Z, r1
        CSPASSIVE;
     402:	c4 9a       	sbi	0x18, 4	; 24
}
     404:	08 95       	ret

00000406 <enc28j60WriteBuffer>:

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
     406:	9c 01       	movw	r18, r24
     408:	fb 01       	movw	r30, r22
        CSACTIVE;
     40a:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
     40c:	8a e7       	ldi	r24, 0x7A	; 122
     40e:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     410:	77 9b       	sbis	0x0e, 7	; 14
     412:	fe cf       	rjmp	.-4      	; 0x410 <enc28j60WriteBuffer+0xa>
     414:	07 c0       	rjmp	.+14     	; 0x424 <enc28j60WriteBuffer+0x1e>
        while(len)
        {
                len--;
                // write data
                SPDR = *data;
     416:	80 81       	ld	r24, Z
     418:	8f b9       	out	0x0f, r24	; 15
                data++;
                waitspi();
     41a:	77 9b       	sbis	0x0e, 7	; 14
     41c:	fe cf       	rjmp	.-4      	; 0x41a <enc28j60WriteBuffer+0x14>
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     41e:	21 50       	subi	r18, 0x01	; 1
     420:	30 40       	sbci	r19, 0x00	; 0
                // write data
                SPDR = *data;
                data++;
     422:	31 96       	adiw	r30, 0x01	; 1
{
        CSACTIVE;
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
     424:	21 15       	cp	r18, r1
     426:	31 05       	cpc	r19, r1
     428:	b1 f7       	brne	.-20     	; 0x416 <enc28j60WriteBuffer+0x10>
                // write data
                SPDR = *data;
                data++;
                waitspi();
        }
        CSPASSIVE;
     42a:	c4 9a       	sbi	0x18, 4	; 24
}
     42c:	08 95       	ret

0000042e <enc28j60SetBank>:

void enc28j60SetBank(uint8_t address)
{
     42e:	48 2f       	mov	r20, r24
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
     430:	28 2f       	mov	r18, r24
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	20 76       	andi	r18, 0x60	; 96
     436:	30 70       	andi	r19, 0x00	; 0
     438:	80 91 99 00 	lds	r24, 0x0099
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	28 17       	cp	r18, r24
     440:	39 07       	cpc	r19, r25
     442:	d9 f0       	breq	.+54     	; 0x47a <__stack+0x1b>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     444:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     446:	8f eb       	ldi	r24, 0xBF	; 191
     448:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     44a:	77 9b       	sbis	0x0e, 7	; 14
     44c:	fe cf       	rjmp	.-4      	; 0x44a <enc28j60SetBank+0x1c>
        // write data
        SPDR = data;
     44e:	83 e0       	ldi	r24, 0x03	; 3
     450:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     452:	77 9b       	sbis	0x0e, 7	; 14
     454:	fe cf       	rjmp	.-4      	; 0x452 <enc28j60SetBank+0x24>
        CSPASSIVE;
     456:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     458:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     45a:	8f e9       	ldi	r24, 0x9F	; 159
     45c:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     45e:	77 9b       	sbis	0x0e, 7	; 14
     460:	fe cf       	rjmp	.-4      	; 0x45e <enc28j60SetBank+0x30>
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
     462:	85 e0       	ldi	r24, 0x05	; 5
     464:	35 95       	asr	r19
     466:	27 95       	ror	r18
     468:	8a 95       	dec	r24
     46a:	e1 f7       	brne	.-8      	; 0x464 <__stack+0x5>
        CSACTIVE;
        // issue write command
        SPDR = op | (address & ADDR_MASK);
        waitspi();
        // write data
        SPDR = data;
     46c:	2f b9       	out	0x0f, r18	; 15
        waitspi();
     46e:	77 9b       	sbis	0x0e, 7	; 14
     470:	fe cf       	rjmp	.-4      	; 0x46e <__stack+0xf>
        CSPASSIVE;
     472:	c4 9a       	sbi	0x18, 4	; 24
        if((address & BANK_MASK) != Enc28j60Bank)
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
                Enc28j60Bank = (address & BANK_MASK);
     474:	40 76       	andi	r20, 0x60	; 96
     476:	40 93 99 00 	sts	0x0099, r20
     47a:	08 95       	ret

0000047c <enc28j60Read>:
        }
}

uint8_t enc28j60Read(uint8_t address)
{
     47c:	1f 93       	push	r17
     47e:	18 2f       	mov	r17, r24
        // set the bank
        enc28j60SetBank(address);
     480:	0e 94 17 02 	call	0x42e	; 0x42e <enc28j60SetBank>
        // do the read
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	61 2f       	mov	r22, r17
     488:	0e 94 cd 01 	call	0x39a	; 0x39a <enc28j60ReadOp>
}
     48c:	1f 91       	pop	r17
     48e:	08 95       	ret

00000490 <enc28j60Write>:
	
	return (enc28j60Read(MIRDH));
}

void enc28j60Write(uint8_t address, uint8_t data)
{
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	18 2f       	mov	r17, r24
     496:	06 2f       	mov	r16, r22
        // set the bank
        enc28j60SetBank(address);
     498:	0e 94 17 02 	call	0x42e	; 0x42e <enc28j60SetBank>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     49c:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     49e:	1f 71       	andi	r17, 0x1F	; 31
     4a0:	10 64       	ori	r17, 0x40	; 64
     4a2:	1f b9       	out	0x0f, r17	; 15
        waitspi();
     4a4:	77 9b       	sbis	0x0e, 7	; 14
     4a6:	fe cf       	rjmp	.-4      	; 0x4a4 <enc28j60Write+0x14>
        // write data
        SPDR = data;
     4a8:	0f b9       	out	0x0f, r16	; 15
        waitspi();
     4aa:	77 9b       	sbis	0x0e, 7	; 14
     4ac:	fe cf       	rjmp	.-4      	; 0x4aa <enc28j60Write+0x1a>
        CSPASSIVE;
     4ae:	c4 9a       	sbi	0x18, 4	; 24
{
        // set the bank
        enc28j60SetBank(address);
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
}
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	08 95       	ret

000004b6 <enc28j60PhyReadH>:
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
}

// read upper 8 bits
uint16_t enc28j60PhyReadH(uint8_t address)
{
     4b6:	68 2f       	mov	r22, r24

	// Set the right address and start the register read operation
	enc28j60Write(MIREGADR, address);
     4b8:	84 ed       	ldi	r24, 0xD4	; 212
     4ba:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	enc28j60Write(MICMD, MICMD_MIIRD);
     4be:	82 ed       	ldi	r24, 0xD2	; 210
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4c6:	80 e5       	ldi	r24, 0x50	; 80
     4c8:	8a 95       	dec	r24
     4ca:	f1 f7       	brne	.-4      	; 0x4c8 <enc28j60PhyReadH+0x12>
        _delay_us(15);

	// wait until the PHY read completes
	while(enc28j60Read(MISTAT) & MISTAT_BUSY);
     4cc:	8a ee       	ldi	r24, 0xEA	; 234
     4ce:	0e 94 3e 02 	call	0x47c	; 0x47c <enc28j60Read>
     4d2:	80 fd       	sbrc	r24, 0
     4d4:	fb cf       	rjmp	.-10     	; 0x4cc <enc28j60PhyReadH+0x16>

	// reset reading bit
	enc28j60Write(MICMD, 0x00);
     4d6:	82 ed       	ldi	r24, 0xD2	; 210
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	
	return (enc28j60Read(MIRDH));
     4de:	89 ed       	ldi	r24, 0xD9	; 217
     4e0:	0e 94 3e 02 	call	0x47c	; 0x47c <enc28j60Read>
}
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	08 95       	ret

000004e8 <enc28j60PhyWrite>:
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
}

void enc28j60PhyWrite(uint8_t address, uint16_t data)
{
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	98 2f       	mov	r25, r24
     4ee:	16 2f       	mov	r17, r22
     4f0:	07 2f       	mov	r16, r23
        // set the PHY register address
        enc28j60Write(MIREGADR, address);
     4f2:	84 ed       	ldi	r24, 0xD4	; 212
     4f4:	69 2f       	mov	r22, r25
     4f6:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
        // write the PHY data
        enc28j60Write(MIWRL, data);
     4fa:	86 ed       	ldi	r24, 0xD6	; 214
     4fc:	61 2f       	mov	r22, r17
     4fe:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
        enc28j60Write(MIWRH, data>>8);
     502:	87 ed       	ldi	r24, 0xD7	; 215
     504:	60 2f       	mov	r22, r16
     506:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
     50a:	10 e5       	ldi	r17, 0x50	; 80
     50c:	03 c0       	rjmp	.+6      	; 0x514 <enc28j60PhyWrite+0x2c>
     50e:	81 2f       	mov	r24, r17
     510:	8a 95       	dec	r24
     512:	f1 f7       	brne	.-4      	; 0x510 <enc28j60PhyWrite+0x28>
        // wait until the PHY write completes
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
     514:	8a ee       	ldi	r24, 0xEA	; 234
     516:	0e 94 3e 02 	call	0x47c	; 0x47c <enc28j60Read>
     51a:	80 fd       	sbrc	r24, 0
     51c:	f8 cf       	rjmp	.-16     	; 0x50e <enc28j60PhyWrite+0x26>
                _delay_us(15);
        }
}
     51e:	1f 91       	pop	r17
     520:	0f 91       	pop	r16
     522:	08 95       	ret

00000524 <enc28j60clkout>:

void enc28j60clkout(uint8_t clk)
{
        //setup clkout: 2 is 12.5MHz:
	enc28j60Write(ECOCON, clk & 0x7);
     524:	68 2f       	mov	r22, r24
     526:	67 70       	andi	r22, 0x07	; 7
     528:	85 e7       	ldi	r24, 0x75	; 117
     52a:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
}
     52e:	08 95       	ret

00000530 <enc28j60Init>:

void enc28j60Init(uint8_t* macaddr)
{
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	ec 01       	movw	r28, r24
	// initialize I/O
        // ss as output:
	ENC28J60_CONTROL_DDR |= 1<<ENC28J60_CONTROL_CS;
     536:	bc 9a       	sbi	0x17, 4	; 23
	CSPASSIVE; // ss=0
     538:	c4 9a       	sbi	0x18, 4	; 24
        //	
	ENC28J60_CONTROL_DDR  |= 1<<ENC28J60_CONTROL_SI | 1<<ENC28J60_CONTROL_SCK; // mosi, sck output
     53a:	87 b3       	in	r24, 0x17	; 23
     53c:	80 6a       	ori	r24, 0xA0	; 160
     53e:	87 bb       	out	0x17, r24	; 23
	cbi(ENC28J60_CONTROL_DDR,ENC28J60_CONTROL_SO); // MISO is input
     540:	be 98       	cbi	0x17, 6	; 23
        //
        cbi(ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_SI); // MOSI low
     542:	c5 98       	cbi	0x18, 5	; 24
        cbi(ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_SCK); // SCK low
     544:	c7 98       	cbi	0x18, 7	; 24
	//
	// initialize SPI interface
	// master mode and Fosc/2 clock:
        SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//SPCR = (1<<SPE)|(1<<MSTR);
     546:	81 e5       	ldi	r24, 0x51	; 81
     548:	8d b9       	out	0x0d, r24	; 13
        SPSR |= (1<<SPI2X);
     54a:	70 9a       	sbi	0x0e, 0	; 14
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     54c:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     54e:	8f ef       	ldi	r24, 0xFF	; 255
     550:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     552:	77 9b       	sbis	0x0e, 7	; 14
     554:	fe cf       	rjmp	.-4      	; 0x552 <enc28j60Init+0x22>
        // write data
        SPDR = data;
     556:	8f ef       	ldi	r24, 0xFF	; 255
     558:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     55a:	77 9b       	sbis	0x0e, 7	; 14
     55c:	fe cf       	rjmp	.-4      	; 0x55a <enc28j60Init+0x2a>
        CSPASSIVE;
     55e:	c4 9a       	sbi	0x18, 4	; 24
     560:	8d ec       	ldi	r24, 0xCD	; 205
     562:	8a 95       	dec	r24
     564:	f1 f7       	brne	.-4      	; 0x562 <enc28j60Init+0x32>
	//while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	gNextPacketPtr = RXSTART_INIT;
     566:	10 92 9b 00 	sts	0x009B, r1
     56a:	10 92 9a 00 	sts	0x009A, r1
        // Rx start
	enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
     56e:	88 e0       	ldi	r24, 0x08	; 8
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	enc28j60Write(ERXSTH, RXSTART_INIT>>8);
     576:	89 e0       	ldi	r24, 0x09	; 9
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	// set receive pointer address
	enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
     57e:	8c e0       	ldi	r24, 0x0C	; 12
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
     586:	8d e0       	ldi	r24, 0x0D	; 13
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	// RX end
	enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
     58e:	8a e0       	ldi	r24, 0x0A	; 10
     590:	6e ef       	ldi	r22, 0xFE	; 254
     592:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
     596:	8b e0       	ldi	r24, 0x0B	; 11
     598:	69 e1       	ldi	r22, 0x19	; 25
     59a:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	// TX start
	enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
     59e:	84 e0       	ldi	r24, 0x04	; 4
     5a0:	6f ef       	ldi	r22, 0xFF	; 255
     5a2:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	enc28j60Write(ETXSTH, TXSTART_INIT>>8);
     5a6:	85 e0       	ldi	r24, 0x05	; 5
     5a8:	69 e1       	ldi	r22, 0x19	; 25
     5aa:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	// TX end
	enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
     5ae:	86 e0       	ldi	r24, 0x06	; 6
     5b0:	6f ef       	ldi	r22, 0xFF	; 255
     5b2:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
     5b6:	87 e0       	ldi	r24, 0x07	; 7
     5b8:	6f e1       	ldi	r22, 0x1F	; 31
     5ba:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
        // Type     ETH.DST
        // ARP      BROADCAST
        // 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
        // in binary these poitions are:11 0000 0011 1111
        // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
	enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
     5be:	88 e3       	ldi	r24, 0x38	; 56
     5c0:	60 eb       	ldi	r22, 0xB0	; 176
     5c2:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	enc28j60Write(EPMM0, 0x3f);
     5c6:	88 e2       	ldi	r24, 0x28	; 40
     5c8:	6f e3       	ldi	r22, 0x3F	; 63
     5ca:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	enc28j60Write(EPMM1, 0x30);
     5ce:	89 e2       	ldi	r24, 0x29	; 41
     5d0:	60 e3       	ldi	r22, 0x30	; 48
     5d2:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	enc28j60Write(EPMCSL, 0xf9);
     5d6:	80 e3       	ldi	r24, 0x30	; 48
     5d8:	69 ef       	ldi	r22, 0xF9	; 249
     5da:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	enc28j60Write(EPMCSH, 0xf7);
     5de:	81 e3       	ldi	r24, 0x31	; 49
     5e0:	67 ef       	ldi	r22, 0xF7	; 247
     5e2:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
        //
        //
	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
     5e6:	80 ec       	ldi	r24, 0xC0	; 192
     5e8:	6d e0       	ldi	r22, 0x0D	; 13
     5ea:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
     5ee:	81 ec       	ldi	r24, 0xC1	; 193
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     5f6:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     5f8:	82 e8       	ldi	r24, 0x82	; 130
     5fa:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     5fc:	77 9b       	sbis	0x0e, 7	; 14
     5fe:	fe cf       	rjmp	.-4      	; 0x5fc <enc28j60Init+0xcc>
        // write data
        SPDR = data;
     600:	82 e3       	ldi	r24, 0x32	; 50
     602:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     604:	77 9b       	sbis	0x0e, 7	; 14
     606:	fe cf       	rjmp	.-4      	; 0x604 <enc28j60Init+0xd4>
        CSPASSIVE;
     608:	c4 9a       	sbi	0x18, 4	; 24
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
	// enable automatic padding to 60bytes and CRC operations
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
	// set inter-frame gap (non-back-to-back)
	enc28j60Write(MAIPGL, 0x12);
     60a:	86 ec       	ldi	r24, 0xC6	; 198
     60c:	62 e1       	ldi	r22, 0x12	; 18
     60e:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	enc28j60Write(MAIPGH, 0x0C);
     612:	87 ec       	ldi	r24, 0xC7	; 199
     614:	6c e0       	ldi	r22, 0x0C	; 12
     616:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
     61a:	84 ec       	ldi	r24, 0xC4	; 196
     61c:	62 e1       	ldi	r22, 0x12	; 18
     61e:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	// Set the maximum packet size which the controller will accept
        // Do not send packets longer than MAX_FRAMELEN:
	enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
     622:	8a ec       	ldi	r24, 0xCA	; 202
     624:	6c ed       	ldi	r22, 0xDC	; 220
     626:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
     62a:	8b ec       	ldi	r24, 0xCB	; 203
     62c:	65 e0       	ldi	r22, 0x05	; 5
     62e:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	// do bank 3 stuff
        // write MAC address
        // NOTE: MAC address in ENC28J60 is byte-backward
        enc28j60Write(MAADR5, macaddr[0]);
     632:	84 ee       	ldi	r24, 0xE4	; 228
     634:	68 81       	ld	r22, Y
     636:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
        enc28j60Write(MAADR4, macaddr[1]);
     63a:	85 ee       	ldi	r24, 0xE5	; 229
     63c:	69 81       	ldd	r22, Y+1	; 0x01
     63e:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
        enc28j60Write(MAADR3, macaddr[2]);
     642:	82 ee       	ldi	r24, 0xE2	; 226
     644:	6a 81       	ldd	r22, Y+2	; 0x02
     646:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
        enc28j60Write(MAADR2, macaddr[3]);
     64a:	83 ee       	ldi	r24, 0xE3	; 227
     64c:	6b 81       	ldd	r22, Y+3	; 0x03
     64e:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
        enc28j60Write(MAADR1, macaddr[4]);
     652:	80 ee       	ldi	r24, 0xE0	; 224
     654:	6c 81       	ldd	r22, Y+4	; 0x04
     656:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
        enc28j60Write(MAADR0, macaddr[5]);
     65a:	81 ee       	ldi	r24, 0xE1	; 225
     65c:	6d 81       	ldd	r22, Y+5	; 0x05
     65e:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
     662:	80 e1       	ldi	r24, 0x10	; 16
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	71 e0       	ldi	r23, 0x01	; 1
     668:	0e 94 74 02 	call	0x4e8	; 0x4e8 <enc28j60PhyWrite>
	// switch to bank 0
	enc28j60SetBank(ECON1);
     66c:	8f e1       	ldi	r24, 0x1F	; 31
     66e:	0e 94 17 02 	call	0x42e	; 0x42e <enc28j60SetBank>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     672:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     674:	8b e9       	ldi	r24, 0x9B	; 155
     676:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     678:	77 9b       	sbis	0x0e, 7	; 14
     67a:	fe cf       	rjmp	.-4      	; 0x678 <enc28j60Init+0x148>
        // write data
        SPDR = data;
     67c:	80 ec       	ldi	r24, 0xC0	; 192
     67e:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     680:	77 9b       	sbis	0x0e, 7	; 14
     682:	fe cf       	rjmp	.-4      	; 0x680 <enc28j60Init+0x150>
        CSPASSIVE;
     684:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     686:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     688:	8f e9       	ldi	r24, 0x9F	; 159
     68a:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     68c:	77 9b       	sbis	0x0e, 7	; 14
     68e:	fe cf       	rjmp	.-4      	; 0x68c <enc28j60Init+0x15c>
        // write data
        SPDR = data;
     690:	84 e0       	ldi	r24, 0x04	; 4
     692:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     694:	77 9b       	sbis	0x0e, 7	; 14
     696:	fe cf       	rjmp	.-4      	; 0x694 <enc28j60Init+0x164>
        CSPASSIVE;
     698:	c4 9a       	sbi	0x18, 4	; 24
	enc28j60SetBank(ECON1);
	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
}
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	08 95       	ret

000006a0 <enc28j60getrev>:

// read the revision of the chip:
uint8_t enc28j60getrev(void)
{
	return(enc28j60Read(EREVID));
     6a0:	82 e7       	ldi	r24, 0x72	; 114
     6a2:	0e 94 3e 02 	call	0x47c	; 0x47c <enc28j60Read>
}
     6a6:	08 95       	ret

000006a8 <enc28j60linkup>:

// link status
uint8_t enc28j60linkup(void)
{
        // bit 10 (= bit 3 in upper reg)
	return(enc28j60PhyReadH(PHSTAT2) && 4);
     6a8:	81 e1       	ldi	r24, 0x11	; 17
     6aa:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <enc28j60PhyReadH>
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	89 2b       	or	r24, r25
     6b2:	09 f0       	breq	.+2      	; 0x6b6 <enc28j60linkup+0xe>
     6b4:	21 e0       	ldi	r18, 0x01	; 1
}
     6b6:	82 2f       	mov	r24, r18
     6b8:	08 95       	ret

000006ba <enc28j60PacketSend>:

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
     6ba:	df 92       	push	r13
     6bc:	ef 92       	push	r14
     6be:	ff 92       	push	r15
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	ec 01       	movw	r28, r24
     6ca:	8b 01       	movw	r16, r22

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     6cc:	3f e9       	ldi	r19, 0x9F	; 159
     6ce:	d3 2e       	mov	r13, r19
        waitspi();
        // write data
        SPDR = data;
     6d0:	20 e8       	ldi	r18, 0x80	; 128
     6d2:	f2 2e       	mov	r15, r18

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     6d4:	9f eb       	ldi	r25, 0xBF	; 191
     6d6:	e9 2e       	mov	r14, r25
     6d8:	15 c0       	rjmp	.+42     	; 0x704 <enc28j60PacketSend+0x4a>
{
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
        {
                // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
                if( (enc28j60Read(EIR) & EIR_TXERIF) ) {
     6da:	8c e1       	ldi	r24, 0x1C	; 28
     6dc:	0e 94 3e 02 	call	0x47c	; 0x47c <enc28j60Read>
     6e0:	81 ff       	sbrs	r24, 1
     6e2:	10 c0       	rjmp	.+32     	; 0x704 <enc28j60PacketSend+0x4a>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     6e4:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     6e6:	df b8       	out	0x0f, r13	; 15
        waitspi();
     6e8:	77 9b       	sbis	0x0e, 7	; 14
     6ea:	fe cf       	rjmp	.-4      	; 0x6e8 <enc28j60PacketSend+0x2e>
        // write data
        SPDR = data;
     6ec:	ff b8       	out	0x0f, r15	; 15
        waitspi();
     6ee:	77 9b       	sbis	0x0e, 7	; 14
     6f0:	fe cf       	rjmp	.-4      	; 0x6ee <enc28j60PacketSend+0x34>
        CSPASSIVE;
     6f2:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     6f4:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     6f6:	ef b8       	out	0x0f, r14	; 15
        waitspi();
     6f8:	77 9b       	sbis	0x0e, 7	; 14
     6fa:	fe cf       	rjmp	.-4      	; 0x6f8 <enc28j60PacketSend+0x3e>
        // write data
        SPDR = data;
     6fc:	ff b8       	out	0x0f, r15	; 15
        waitspi();
     6fe:	77 9b       	sbis	0x0e, 7	; 14
     700:	fe cf       	rjmp	.-4      	; 0x6fe <enc28j60PacketSend+0x44>
        CSPASSIVE;
     702:	c4 9a       	sbi	0x18, 4	; 24
}

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	6f e1       	ldi	r22, 0x1F	; 31
     708:	0e 94 cd 01 	call	0x39a	; 0x39a <enc28j60ReadOp>
     70c:	83 fd       	sbrc	r24, 3
     70e:	e5 cf       	rjmp	.-54     	; 0x6da <enc28j60PacketSend+0x20>
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
                }
        }
	// Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	6f ef       	ldi	r22, 0xFF	; 255
     714:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	69 e1       	ldi	r22, 0x19	; 25
     71c:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
     720:	ce 01       	movw	r24, r28
     722:	81 50       	subi	r24, 0x01	; 1
     724:	68 2f       	mov	r22, r24
     726:	86 e0       	ldi	r24, 0x06	; 6
     728:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
     72c:	9e 01       	movw	r18, r28
     72e:	21 50       	subi	r18, 0x01	; 1
     730:	36 4e       	sbci	r19, 0xE6	; 230
     732:	87 e0       	ldi	r24, 0x07	; 7
     734:	63 2f       	mov	r22, r19
     736:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     73a:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     73c:	8a e7       	ldi	r24, 0x7A	; 122
     73e:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     740:	77 9b       	sbis	0x0e, 7	; 14
     742:	fe cf       	rjmp	.-4      	; 0x740 <enc28j60PacketSend+0x86>
        // write data
        SPDR = data;
     744:	1f b8       	out	0x0f, r1	; 15
        waitspi();
     746:	77 9b       	sbis	0x0e, 7	; 14
     748:	fe cf       	rjmp	.-4      	; 0x746 <enc28j60PacketSend+0x8c>
        CSPASSIVE;
     74a:	c4 9a       	sbi	0x18, 4	; 24
        CSPASSIVE;
}

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
        CSACTIVE;
     74c:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
     74e:	8a e7       	ldi	r24, 0x7A	; 122
     750:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     752:	77 9b       	sbis	0x0e, 7	; 14
     754:	fe cf       	rjmp	.-4      	; 0x752 <enc28j60PacketSend+0x98>
     756:	08 c0       	rjmp	.+16     	; 0x768 <enc28j60PacketSend+0xae>
        while(len)
        {
                len--;
                // write data
                SPDR = *data;
     758:	f8 01       	movw	r30, r16
     75a:	80 81       	ld	r24, Z
     75c:	8f b9       	out	0x0f, r24	; 15
                data++;
                waitspi();
     75e:	77 9b       	sbis	0x0e, 7	; 14
     760:	fe cf       	rjmp	.-4      	; 0x75e <enc28j60PacketSend+0xa4>
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     762:	21 97       	sbiw	r28, 0x01	; 1
                // write data
                SPDR = *data;
                data++;
     764:	0f 5f       	subi	r16, 0xFF	; 255
     766:	1f 4f       	sbci	r17, 0xFF	; 255
{
        CSACTIVE;
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
     768:	20 97       	sbiw	r28, 0x00	; 0
     76a:	b1 f7       	brne	.-20     	; 0x758 <enc28j60PacketSend+0x9e>
                // write data
                SPDR = *data;
                data++;
                waitspi();
        }
        CSPASSIVE;
     76c:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     76e:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     770:	8f e9       	ldi	r24, 0x9F	; 159
     772:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     774:	77 9b       	sbis	0x0e, 7	; 14
     776:	fe cf       	rjmp	.-4      	; 0x774 <enc28j60PacketSend+0xba>
        // write data
        SPDR = data;
     778:	88 e0       	ldi	r24, 0x08	; 8
     77a:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     77c:	77 9b       	sbis	0x0e, 7	; 14
     77e:	fe cf       	rjmp	.-4      	; 0x77c <enc28j60PacketSend+0xc2>
        CSPASSIVE;
     780:	c4 9a       	sbi	0x18, 4	; 24
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
}
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	ff 90       	pop	r15
     78c:	ef 90       	pop	r14
     78e:	df 90       	pop	r13
     790:	08 95       	ret

00000792 <enc28j60hasRxPkt>:

// just probe if there might be a packet
uint8_t enc28j60hasRxPkt(void)
{
	if( enc28j60Read(EPKTCNT) ==0 ){
     792:	89 e3       	ldi	r24, 0x39	; 57
     794:	0e 94 3e 02 	call	0x47c	; 0x47c <enc28j60Read>
     798:	81 11       	cpse	r24, r1
     79a:	81 e0       	ldi	r24, 0x01	; 1
		return(0);
        }
        return(1);
}
     79c:	08 95       	ret

0000079e <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
     79e:	8f 92       	push	r8
     7a0:	9f 92       	push	r9
     7a2:	af 92       	push	r10
     7a4:	bf 92       	push	r11
     7a6:	cf 92       	push	r12
     7a8:	df 92       	push	r13
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	5c 01       	movw	r10, r24
     7b8:	4b 01       	movw	r8, r22
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
     7ba:	89 e3       	ldi	r24, 0x39	; 57
     7bc:	0e 94 3e 02 	call	0x47c	; 0x47c <enc28j60Read>
     7c0:	88 23       	and	r24, r24
     7c2:	19 f4       	brne	.+6      	; 0x7ca <enc28j60PacketReceive+0x2c>
     7c4:	c0 e0       	ldi	r28, 0x00	; 0
     7c6:	d0 e0       	ldi	r29, 0x00	; 0
     7c8:	76 c0       	rjmp	.+236    	; 0x8b6 <enc28j60PacketReceive+0x118>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
     7ca:	60 91 9a 00 	lds	r22, 0x009A
     7ce:	10 91 9b 00 	lds	r17, 0x009B
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	61 2f       	mov	r22, r17
     7dc:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     7e0:	8a e3       	ldi	r24, 0x3A	; 58
     7e2:	60 e0       	ldi	r22, 0x00	; 0
     7e4:	0e 94 cd 01 	call	0x39a	; 0x39a <enc28j60ReadOp>
     7e8:	18 2f       	mov	r17, r24
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     7ea:	8a e3       	ldi	r24, 0x3A	; 58
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	0e 94 cd 01 	call	0x39a	; 0x39a <enc28j60ReadOp>
     7f2:	38 2f       	mov	r19, r24
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	e1 2e       	mov	r14, r17
     7f8:	ff 24       	eor	r15, r15
     7fa:	e2 2a       	or	r14, r18
     7fc:	f3 2a       	or	r15, r19
     7fe:	f0 92 9b 00 	sts	0x009B, r15
     802:	e0 92 9a 00 	sts	0x009A, r14
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     806:	8a e3       	ldi	r24, 0x3A	; 58
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	0e 94 cd 01 	call	0x39a	; 0x39a <enc28j60ReadOp>
     80e:	c8 2e       	mov	r12, r24
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     810:	8a e3       	ldi	r24, 0x3A	; 58
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	0e 94 cd 01 	call	0x39a	; 0x39a <enc28j60ReadOp>
     818:	d8 2e       	mov	r13, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     81a:	8a e3       	ldi	r24, 0x3A	; 58
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	0e 94 cd 01 	call	0x39a	; 0x39a <enc28j60ReadOp>
     822:	08 2f       	mov	r16, r24
     824:	10 e0       	ldi	r17, 0x00	; 0
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
     826:	8a e3       	ldi	r24, 0x3A	; 58
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	0e 94 cd 01 	call	0x39a	; 0x39a <enc28j60ReadOp>
                len=maxlen-1;
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
     82e:	38 2f       	mov	r19, r24
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	20 2b       	or	r18, r16
     834:	31 2b       	or	r19, r17
     836:	27 fd       	sbrc	r18, 7
     838:	03 c0       	rjmp	.+6      	; 0x840 <enc28j60PacketReceive+0xa2>
     83a:	c0 e0       	ldi	r28, 0x00	; 0
     83c:	d0 e0       	ldi	r29, 0x00	; 0
     83e:	11 c0       	rjmp	.+34     	; 0x862 <enc28j60PacketReceive+0xc4>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     840:	cc 2d       	mov	r28, r12
     842:	d0 e0       	ldi	r29, 0x00	; 0
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     844:	9d 2d       	mov	r25, r13
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	c8 2b       	or	r28, r24
     84a:	d9 2b       	or	r29, r25
        len-=4; //remove the CRC count
     84c:	c5 01       	movw	r24, r10
     84e:	01 97       	sbiw	r24, 0x01	; 1
     850:	24 97       	sbiw	r28, 0x04	; 4
     852:	8c 17       	cp	r24, r28
     854:	9d 07       	cpc	r25, r29
     856:	08 f4       	brcc	.+2      	; 0x85a <enc28j60PacketReceive+0xbc>
     858:	ec 01       	movw	r28, r24
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
     85a:	ce 01       	movw	r24, r28
     85c:	b4 01       	movw	r22, r8
     85e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <enc28j60ReadBuffer>
        }
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
     862:	de 2c       	mov	r13, r14
     864:	8c e0       	ldi	r24, 0x0C	; 12
     866:	6e 2d       	mov	r22, r14
     868:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
	enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
     86c:	8d e0       	ldi	r24, 0x0D	; 13
     86e:	6f 2d       	mov	r22, r15
     870:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
        // Move the RX read pointer to the start of the next received packet
        // This frees the memory we just read out.
        // However, compensate for the errata point 13, rev B4: enver write an even address!
        if ((gNextPacketPtr - 1 < RXSTART_INIT)
     874:	87 01       	movw	r16, r14
     876:	01 50       	subi	r16, 0x01	; 1
     878:	10 40       	sbci	r17, 0x00	; 0
     87a:	89 e1       	ldi	r24, 0x19	; 25
     87c:	0f 3f       	cpi	r16, 0xFF	; 255
     87e:	18 07       	cpc	r17, r24
     880:	38 f0       	brcs	.+14     	; 0x890 <enc28j60PacketReceive+0xf2>
                || (gNextPacketPtr -1 > RXSTOP_INIT)) {
                enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
     882:	8c e0       	ldi	r24, 0x0C	; 12
     884:	6e ef       	ldi	r22, 0xFE	; 254
     886:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
                enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
     88a:	8d e0       	ldi	r24, 0x0D	; 13
     88c:	69 e1       	ldi	r22, 0x19	; 25
     88e:	07 c0       	rjmp	.+14     	; 0x89e <enc28j60PacketReceive+0x100>
        } else {
                enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
     890:	da 94       	dec	r13
     892:	8c e0       	ldi	r24, 0x0C	; 12
     894:	6d 2d       	mov	r22, r13
     896:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
     89a:	8d e0       	ldi	r24, 0x0D	; 13
     89c:	61 2f       	mov	r22, r17
     89e:	0e 94 48 02 	call	0x490	; 0x490 <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     8a2:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     8a4:	8e e9       	ldi	r24, 0x9E	; 158
     8a6:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     8a8:	77 9b       	sbis	0x0e, 7	; 14
     8aa:	fe cf       	rjmp	.-4      	; 0x8a8 <enc28j60PacketReceive+0x10a>
        // write data
        SPDR = data;
     8ac:	80 e4       	ldi	r24, 0x40	; 64
     8ae:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     8b0:	77 9b       	sbis	0x0e, 7	; 14
     8b2:	fe cf       	rjmp	.-4      	; 0x8b0 <enc28j60PacketReceive+0x112>
        CSPASSIVE;
     8b4:	c4 9a       	sbi	0x18, 4	; 24
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
}
     8b6:	ce 01       	movw	r24, r28
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	ff 90       	pop	r15
     8c2:	ef 90       	pop	r14
     8c4:	df 90       	pop	r13
     8c6:	cf 90       	pop	r12
     8c8:	bf 90       	pop	r11
     8ca:	af 90       	pop	r10
     8cc:	9f 90       	pop	r9
     8ce:	8f 90       	pop	r8
     8d0:	08 95       	ret

000008d2 <checksum>:
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
     8d2:	cf 92       	push	r12
     8d4:	df 92       	push	r13
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	6c 01       	movw	r12, r24

        //if(type==0){    
        //        // do not add anything, standard IP checksum as described above
        //        // Usable for ICMP and IP header
        //}
        if(type==1){
     8e4:	41 30       	cpi	r20, 0x01	; 1
     8e6:	81 f4       	brne	.+32     	; 0x908 <checksum+0x36>
                sum+=IP_PROTO_UDP_V; // protocol udp
                // the length here is the length of udp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real udp len
     8e8:	68 50       	subi	r22, 0x08	; 8
     8ea:	70 40       	sbci	r23, 0x00	; 0
     8ec:	7b 01       	movw	r14, r22
     8ee:	00 e0       	ldi	r16, 0x00	; 0
     8f0:	10 e0       	ldi	r17, 0x00	; 0
     8f2:	68 5f       	subi	r22, 0xF8	; 248
     8f4:	7f 4f       	sbci	r23, 0xFF	; 255
     8f6:	21 e1       	ldi	r18, 0x11	; 17
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	40 e0       	ldi	r20, 0x00	; 0
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	e2 0e       	add	r14, r18
     900:	f3 1e       	adc	r15, r19
     902:	04 1f       	adc	r16, r20
     904:	15 1f       	adc	r17, r21
     906:	15 c0       	rjmp	.+42     	; 0x932 <checksum+0x60>
        }
        if(type==2){
     908:	42 30       	cpi	r20, 0x02	; 2
     90a:	21 f0       	breq	.+8      	; 0x914 <checksum+0x42>
     90c:	ee 24       	eor	r14, r14
     90e:	ff 24       	eor	r15, r15
     910:	87 01       	movw	r16, r14
     912:	0f c0       	rjmp	.+30     	; 0x932 <checksum+0x60>
                sum+=IP_PROTO_TCP_V; 
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
     914:	68 50       	subi	r22, 0x08	; 8
     916:	70 40       	sbci	r23, 0x00	; 0
     918:	7b 01       	movw	r14, r22
     91a:	00 e0       	ldi	r16, 0x00	; 0
     91c:	10 e0       	ldi	r17, 0x00	; 0
     91e:	68 5f       	subi	r22, 0xF8	; 248
     920:	7f 4f       	sbci	r23, 0xFF	; 255
     922:	86 e0       	ldi	r24, 0x06	; 6
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	e8 0e       	add	r14, r24
     92c:	f9 1e       	adc	r15, r25
     92e:	0a 1f       	adc	r16, r26
     930:	1b 1f       	adc	r17, r27
     932:	f6 01       	movw	r30, r12
     934:	eb 01       	movw	r28, r22
     936:	16 c0       	rjmp	.+44     	; 0x964 <checksum+0x92>
        }
        // build the sum of 16bit words
        while(len >1){
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
     938:	80 81       	ld	r24, Z
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	ba 2f       	mov	r27, r26
     942:	a9 2f       	mov	r26, r25
     944:	98 2f       	mov	r25, r24
     946:	88 27       	eor	r24, r24
     948:	21 81       	ldd	r18, Z+1	; 0x01
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	82 2b       	or	r24, r18
     952:	93 2b       	or	r25, r19
     954:	a4 2b       	or	r26, r20
     956:	b5 2b       	or	r27, r21
     958:	e8 0e       	add	r14, r24
     95a:	f9 1e       	adc	r15, r25
     95c:	0a 1f       	adc	r16, r26
     95e:	1b 1f       	adc	r17, r27
                buf+=2;
     960:	32 96       	adiw	r30, 0x02	; 2
                len-=2;
     962:	22 97       	sbiw	r28, 0x02	; 2
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
        }
        // build the sum of 16bit words
        while(len >1){
     964:	c2 30       	cpi	r28, 0x02	; 2
     966:	d1 05       	cpc	r29, r1
     968:	38 f7       	brcc	.-50     	; 0x938 <checksum+0x66>
     96a:	fb 01       	movw	r30, r22
     96c:	ee 7f       	andi	r30, 0xFE	; 254
     96e:	ec 0d       	add	r30, r12
     970:	fd 1d       	adc	r31, r13
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
                buf+=2;
                len-=2;
        }
        // if there is a byte left then add it (padded with zero)
        if (len){
     972:	60 ff       	sbrs	r22, 0
     974:	15 c0       	rjmp	.+42     	; 0x9a0 <checksum+0xce>
                sum += ((uint32_t)(0xFF & *buf))<<8;
     976:	80 81       	ld	r24, Z
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	a0 e0       	ldi	r26, 0x00	; 0
     97c:	b0 e0       	ldi	r27, 0x00	; 0
     97e:	ba 2f       	mov	r27, r26
     980:	a9 2f       	mov	r26, r25
     982:	98 2f       	mov	r25, r24
     984:	88 27       	eor	r24, r24
     986:	08 c0       	rjmp	.+16     	; 0x998 <checksum+0xc6>
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
                sum = (sum & 0xFFFF)+(sum >> 16);
     988:	2f ef       	ldi	r18, 0xFF	; 255
     98a:	3f ef       	ldi	r19, 0xFF	; 255
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	e2 22       	and	r14, r18
     992:	f3 22       	and	r15, r19
     994:	04 23       	and	r16, r20
     996:	15 23       	and	r17, r21
     998:	e8 0e       	add	r14, r24
     99a:	f9 1e       	adc	r15, r25
     99c:	0a 1f       	adc	r16, r26
     99e:	1b 1f       	adc	r17, r27
        if (len){
                sum += ((uint32_t)(0xFF & *buf))<<8;
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
     9a0:	c8 01       	movw	r24, r16
     9a2:	aa 27       	eor	r26, r26
     9a4:	bb 27       	eor	r27, r27
     9a6:	00 97       	sbiw	r24, 0x00	; 0
     9a8:	a1 05       	cpc	r26, r1
     9aa:	b1 05       	cpc	r27, r1
     9ac:	69 f7       	brne	.-38     	; 0x988 <checksum+0xb6>
     9ae:	97 01       	movw	r18, r14
     9b0:	20 95       	com	r18
     9b2:	30 95       	com	r19
                sum = (sum & 0xFFFF)+(sum >> 16);
        }
        // build 1's complement:
        return( (uint16_t) sum ^ 0xFFFF);
}
     9b4:	c9 01       	movw	r24, r18
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
     9be:	ff 90       	pop	r15
     9c0:	ef 90       	pop	r14
     9c2:	df 90       	pop	r13
     9c4:	cf 90       	pop	r12
     9c6:	08 95       	ret

000009c8 <init_ip_arp_udp_tcp>:

// This initializes the web server
// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint16_t port){
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	ec 01       	movw	r28, r24
        uint8_t i=0;
        wwwport_h=(port>>8)&0xff;
     9ce:	50 93 94 00 	sts	0x0094, r21
        wwwport_l=(port&0xff);
     9d2:	40 93 81 00 	sts	0x0081, r20
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
        while(i<4){
                ipaddr[i]=myip[i];
     9da:	f9 01       	movw	r30, r18
     9dc:	e2 54       	subi	r30, 0x42	; 66
     9de:	ff 4f       	sbci	r31, 0xFF	; 255
     9e0:	db 01       	movw	r26, r22
     9e2:	a2 0f       	add	r26, r18
     9e4:	b3 1f       	adc	r27, r19
     9e6:	8c 91       	ld	r24, X
     9e8:	80 83       	st	Z, r24
     9ea:	2f 5f       	subi	r18, 0xFF	; 255
     9ec:	3f 4f       	sbci	r19, 0xFF	; 255
// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint16_t port){
        uint8_t i=0;
        wwwport_h=(port>>8)&0xff;
        wwwport_l=(port&0xff);
        while(i<4){
     9ee:	24 30       	cpi	r18, 0x04	; 4
     9f0:	31 05       	cpc	r19, r1
     9f2:	99 f7       	brne	.-26     	; 0x9da <init_ip_arp_udp_tcp+0x12>
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
                macaddr[i]=mymac[i];
     9f8:	f9 01       	movw	r30, r18
     9fa:	e8 54       	subi	r30, 0x48	; 72
     9fc:	ff 4f       	sbci	r31, 0xFF	; 255
     9fe:	de 01       	movw	r26, r28
     a00:	a2 0f       	add	r26, r18
     a02:	b3 1f       	adc	r27, r19
     a04:	8c 91       	ld	r24, X
     a06:	80 83       	st	Z, r24
     a08:	2f 5f       	subi	r18, 0xFF	; 255
     a0a:	3f 4f       	sbci	r19, 0xFF	; 255
        while(i<4){
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
     a0c:	26 30       	cpi	r18, 0x06	; 6
     a0e:	31 05       	cpc	r19, r1
     a10:	99 f7       	brne	.-26     	; 0x9f8 <init_ip_arp_udp_tcp+0x30>
                macaddr[i]=mymac[i];
                i++;
        }
}
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <check_ip_message_is_from>:

uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
     a18:	dc 01       	movw	r26, r24
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	30 e0       	ldi	r19, 0x00	; 0
        uint8_t i=0;
        while(i<4){
                if(buf[IP_SRC_P+i]!=ip[i]){
     a1e:	fb 01       	movw	r30, r22
     a20:	e2 0f       	add	r30, r18
     a22:	f3 1f       	adc	r31, r19
     a24:	5a 96       	adiw	r26, 0x1a	; 26
     a26:	9c 91       	ld	r25, X
     a28:	5a 97       	sbiw	r26, 0x1a	; 26
     a2a:	80 81       	ld	r24, Z
     a2c:	98 17       	cp	r25, r24
     a2e:	11 f0       	breq	.+4      	; 0xa34 <check_ip_message_is_from+0x1c>
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	08 95       	ret
     a34:	2f 5f       	subi	r18, 0xFF	; 255
     a36:	3f 4f       	sbci	r19, 0xFF	; 255
     a38:	11 96       	adiw	r26, 0x01	; 1
}

uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
        uint8_t i=0;
        while(i<4){
     a3a:	24 30       	cpi	r18, 0x04	; 4
     a3c:	31 05       	cpc	r19, r1
     a3e:	79 f7       	brne	.-34     	; 0xa1e <check_ip_message_is_from+0x6>
     a40:	81 e0       	ldi	r24, 0x01	; 1
                        return(0);
                }
                i++;
        }
        return(1);
}
     a42:	08 95       	ret

00000a44 <eth_type_is_arp_and_my_ip>:

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
     a44:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //  
        if (len<41){
     a46:	69 32       	cpi	r22, 0x29	; 41
     a48:	71 05       	cpc	r23, r1
     a4a:	b0 f0       	brcs	.+44     	; 0xa78 <eth_type_is_arp_and_my_ip+0x34>
                return(0);
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
     a4c:	84 85       	ldd	r24, Z+12	; 0x0c
     a4e:	88 30       	cpi	r24, 0x08	; 8
     a50:	99 f4       	brne	.+38     	; 0xa78 <eth_type_is_arp_and_my_ip+0x34>
     a52:	85 85       	ldd	r24, Z+13	; 0x0d
     a54:	86 30       	cpi	r24, 0x06	; 6
     a56:	81 f4       	brne	.+32     	; 0xa78 <eth_type_is_arp_and_my_ip+0x34>
     a58:	df 01       	movw	r26, r30
     a5a:	96 96       	adiw	r26, 0x26	; 38
     a5c:	ee eb       	ldi	r30, 0xBE	; 190
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
     a60:	9c 91       	ld	r25, X
     a62:	80 81       	ld	r24, Z
     a64:	98 17       	cp	r25, r24
     a66:	41 f4       	brne	.+16     	; 0xa78 <eth_type_is_arp_and_my_ip+0x34>
     a68:	11 96       	adiw	r26, 0x01	; 1
     a6a:	31 96       	adiw	r30, 0x01	; 1
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	e2 3c       	cpi	r30, 0xC2	; 194
     a70:	f8 07       	cpc	r31, r24
     a72:	b1 f7       	brne	.-20     	; 0xa60 <eth_type_is_arp_and_my_ip+0x1c>
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	08 95       	ret
     a78:	80 e0       	ldi	r24, 0x00	; 0
                        return(0);
                }
                i++;
        }
        return(1);
}
     a7a:	08 95       	ret

00000a7c <eth_type_is_ip_and_my_ip>:

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
     a7c:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
     a7e:	6a 32       	cpi	r22, 0x2A	; 42
     a80:	71 05       	cpc	r23, r1
     a82:	d0 f0       	brcs	.+52     	; 0xab8 <eth_type_is_ip_and_my_ip+0x3c>
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
     a84:	84 85       	ldd	r24, Z+12	; 0x0c
     a86:	88 30       	cpi	r24, 0x08	; 8
     a88:	b9 f4       	brne	.+46     	; 0xab8 <eth_type_is_ip_and_my_ip+0x3c>
     a8a:	85 85       	ldd	r24, Z+13	; 0x0d
     a8c:	88 23       	and	r24, r24
     a8e:	a1 f4       	brne	.+40     	; 0xab8 <eth_type_is_ip_and_my_ip+0x3c>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
                return(0);
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
     a90:	86 85       	ldd	r24, Z+14	; 0x0e
     a92:	85 34       	cpi	r24, 0x45	; 69
     a94:	89 f4       	brne	.+34     	; 0xab8 <eth_type_is_ip_and_my_ip+0x3c>
     a96:	df 01       	movw	r26, r30
     a98:	ee eb       	ldi	r30, 0xBE	; 190
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
                if(buf[IP_DST_P+i]!=ipaddr[i]){
     a9c:	5e 96       	adiw	r26, 0x1e	; 30
     a9e:	9c 91       	ld	r25, X
     aa0:	5e 97       	sbiw	r26, 0x1e	; 30
     aa2:	80 81       	ld	r24, Z
     aa4:	98 17       	cp	r25, r24
     aa6:	41 f4       	brne	.+16     	; 0xab8 <eth_type_is_ip_and_my_ip+0x3c>
     aa8:	11 96       	adiw	r26, 0x01	; 1
     aaa:	31 96       	adiw	r30, 0x01	; 1
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	e2 3c       	cpi	r30, 0xC2	; 194
     ab0:	f8 07       	cpc	r31, r24
     ab2:	a1 f7       	brne	.-24     	; 0xa9c <eth_type_is_ip_and_my_ip+0x20>
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	08 95       	ret
     ab8:	80 e0       	ldi	r24, 0x00	; 0
                        return(0);
                }
                i++;
        }
        return(1);
}
     aba:	08 95       	ret

00000abc <make_eth>:
// make a return eth header from a received eth packet
void make_eth(uint8_t *buf)
{
     abc:	fc 01       	movw	r30, r24
     abe:	a8 eb       	ldi	r26, 0xB8	; 184
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     ac2:	86 81       	ldd	r24, Z+6	; 0x06
     ac4:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     ac6:	8d 91       	ld	r24, X+
     ac8:	86 83       	std	Z+6, r24	; 0x06
     aca:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	ae 3b       	cpi	r26, 0xBE	; 190
     ad0:	b8 07       	cpc	r27, r24
     ad2:	b9 f7       	brne	.-18     	; 0xac2 <make_eth+0x6>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
}
     ad4:	08 95       	ret

00000ad6 <fill_ip_hdr_checksum>:
void fill_ip_hdr_checksum(uint8_t *buf)
{
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	8c 01       	movw	r16, r24
        uint16_t ck;
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
     adc:	fc 01       	movw	r30, r24
     ade:	10 8e       	std	Z+24, r1	; 0x18
        buf[IP_CHECKSUM_P+1]=0;
     ae0:	11 8e       	std	Z+25, r1	; 0x19
        buf[IP_FLAGS_P]=0x40; // don't fragment
     ae2:	80 e4       	ldi	r24, 0x40	; 64
     ae4:	84 8b       	std	Z+20, r24	; 0x14
        buf[IP_FLAGS_P+1]=0;  // fragement offset
     ae6:	15 8a       	std	Z+21, r1	; 0x15
        buf[IP_TTL_P]=64; // ttl
     ae8:	86 8b       	std	Z+22, r24	; 0x16
        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
     aea:	c8 01       	movw	r24, r16
     aec:	0e 96       	adiw	r24, 0x0e	; 14
     aee:	64 e1       	ldi	r22, 0x14	; 20
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	0e 94 69 04 	call	0x8d2	; 0x8d2 <checksum>
        buf[IP_CHECKSUM_P]=ck>>8;
     af8:	f8 01       	movw	r30, r16
     afa:	90 8f       	std	Z+24, r25	; 0x18
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
     afc:	81 8f       	std	Z+25, r24	; 0x19
}
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	08 95       	ret

00000b04 <make_ip>:

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
     b04:	ac 01       	movw	r20, r24
     b06:	fc 01       	movw	r30, r24
     b08:	ae eb       	ldi	r26, 0xBE	; 190
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
        uint8_t i=0;
        while(i<4){
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
     b0c:	82 8d       	ldd	r24, Z+26	; 0x1a
     b0e:	86 8f       	std	Z+30, r24	; 0x1e
                buf[IP_SRC_P+i]=ipaddr[i];
     b10:	8d 91       	ld	r24, X+
     b12:	82 8f       	std	Z+26, r24	; 0x1a
     b14:	31 96       	adiw	r30, 0x01	; 1

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	a2 3c       	cpi	r26, 0xC2	; 194
     b1a:	b8 07       	cpc	r27, r24
     b1c:	b9 f7       	brne	.-18     	; 0xb0c <make_ip+0x8>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        fill_ip_hdr_checksum(buf);
     b1e:	ca 01       	movw	r24, r20
     b20:	0e 94 6b 05 	call	0xad6	; 0xad6 <fill_ip_hdr_checksum>
}
     b24:	08 95       	ret

00000b26 <step_seq>:

// swap seq and ack number and count ack number up
void step_seq(uint8_t *buf,uint16_t rel_ack_num,uint8_t cp_seq)
{
     b26:	fc 01       	movw	r30, r24
     b28:	b9 96       	adiw	r30, 0x29	; 41
     b2a:	94 e0       	ldi	r25, 0x04	; 4
        uint8_t tseq;
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
                rel_ack_num=buf[TCP_SEQ_H_P+i-1]+rel_ack_num;
     b2c:	80 81       	ld	r24, Z
     b2e:	68 0f       	add	r22, r24
     b30:	71 1d       	adc	r23, r1
                tseq=buf[TCP_SEQACK_H_P+i-1];
     b32:	84 81       	ldd	r24, Z+4	; 0x04
                buf[TCP_SEQACK_H_P+i-1]=0xff&rel_ack_num;
     b34:	64 83       	std	Z+4, r22	; 0x04
                if (cp_seq){
     b36:	44 23       	and	r20, r20
     b38:	11 f0       	breq	.+4      	; 0xb3e <step_seq+0x18>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
     b3a:	80 83       	st	Z, r24
     b3c:	01 c0       	rjmp	.+2      	; 0xb40 <step_seq+0x1a>
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset value
     b3e:	10 82       	st	Z, r1
                }
                rel_ack_num=rel_ack_num>>8;
                i--;
     b40:	91 50       	subi	r25, 0x01	; 1
     b42:	31 97       	sbiw	r30, 0x01	; 1
        uint8_t i;
        uint8_t tseq;
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
     b44:	99 23       	and	r25, r25
     b46:	19 f0       	breq	.+6      	; 0xb4e <step_seq+0x28>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset value
                }
                rel_ack_num=rel_ack_num>>8;
     b48:	67 2f       	mov	r22, r23
     b4a:	77 27       	eor	r23, r23
     b4c:	ef cf       	rjmp	.-34     	; 0xb2c <step_seq+0x6>
     b4e:	08 95       	ret

00000b50 <make_tcphead>:
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t cp_seq)
{
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	8c 01       	movw	r16, r24
        uint8_t i;
        // copy ports:
        i=buf[TCP_DST_PORT_H_P];
     b56:	fc 01       	movw	r30, r24
     b58:	94 a1       	ldd	r25, Z+36	; 0x24
        buf[TCP_DST_PORT_H_P]=buf[TCP_SRC_PORT_H_P];
     b5a:	82 a1       	ldd	r24, Z+34	; 0x22
     b5c:	84 a3       	std	Z+36, r24	; 0x24
        buf[TCP_SRC_PORT_H_P]=i;
     b5e:	92 a3       	std	Z+34, r25	; 0x22
        //
        i=buf[TCP_DST_PORT_L_P];
     b60:	95 a1       	ldd	r25, Z+37	; 0x25
        buf[TCP_DST_PORT_L_P]=buf[TCP_SRC_PORT_L_P];
     b62:	83 a1       	ldd	r24, Z+35	; 0x23
     b64:	85 a3       	std	Z+37, r24	; 0x25
        buf[TCP_SRC_PORT_L_P]=i;
     b66:	93 a3       	std	Z+35, r25	; 0x23
        step_seq(buf,rel_ack_num,cp_seq);
     b68:	c8 01       	movw	r24, r16
     b6a:	0e 94 93 05 	call	0xb26	; 0xb26 <step_seq>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
     b6e:	f8 01       	movw	r30, r16
     b70:	12 aa       	std	Z+50, r1	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
     b72:	13 aa       	std	Z+51, r1	; 0x33
        // no options:
        // 20 bytes:
        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes.
        // E.g 20 bytes: 20/4=6 => 0x50=header len field
        buf[TCP_HEADER_LEN_P]=0x50;
     b74:	80 e5       	ldi	r24, 0x50	; 80
     b76:	86 a7       	std	Z+46, r24	; 0x2e
}
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	08 95       	ret

00000b7e <make_arp_answer_from_request>:

void make_arp_answer_from_request(uint8_t *buf)
{
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	ac 01       	movw	r20, r24
     b84:	ec 01       	movw	r28, r24
     b86:	28 eb       	ldi	r18, 0xB8	; 184
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	fc 01       	movw	r30, r24
     b8c:	d9 01       	movw	r26, r18
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     b8e:	86 81       	ldd	r24, Z+6	; 0x06
     b90:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     b92:	8d 91       	ld	r24, X+
     b94:	86 83       	std	Z+6, r24	; 0x06
     b96:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	ae 3b       	cpi	r26, 0xBE	; 190
     b9c:	b8 07       	cpc	r27, r24
     b9e:	b9 f7       	brne	.-18     	; 0xb8e <make_arp_answer_from_request+0x10>
void make_arp_answer_from_request(uint8_t *buf)
{
        uint8_t i=0;
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
     ba0:	fa 01       	movw	r30, r20
     ba2:	14 8a       	std	Z+20, r1	; 0x14
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	85 8b       	std	Z+21, r24	; 0x15
        // fill the mac addresses:
        while(i<6){
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
     ba8:	8e 89       	ldd	r24, Y+22	; 0x16
     baa:	88 a3       	std	Y+32, r24	; 0x20
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
     bac:	f9 01       	movw	r30, r18
     bae:	81 91       	ld	r24, Z+
     bb0:	9f 01       	movw	r18, r30
     bb2:	8e 8b       	std	Y+22, r24	; 0x16
     bb4:	21 96       	adiw	r28, 0x01	; 1
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
        // fill the mac addresses:
        while(i<6){
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	2e 3b       	cpi	r18, 0xBE	; 190
     bba:	3f 07       	cpc	r19, r31
     bbc:	a9 f7       	brne	.-22     	; 0xba8 <make_arp_answer_from_request+0x2a>
     bbe:	fa 01       	movw	r30, r20
     bc0:	7c 96       	adiw	r30, 0x1c	; 28
     bc2:	ae eb       	ldi	r26, 0xBE	; 190
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
     bc6:	80 81       	ld	r24, Z
     bc8:	82 87       	std	Z+10, r24	; 0x0a
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
     bca:	8d 91       	ld	r24, X+
     bcc:	81 93       	st	Z+, r24
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	a2 3c       	cpi	r26, 0xC2	; 194
     bd2:	b8 07       	cpc	r27, r24
     bd4:	c1 f7       	brne	.-16     	; 0xbc6 <make_arp_answer_from_request+0x48>
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf); 
     bd6:	8a e2       	ldi	r24, 0x2A	; 42
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	ba 01       	movw	r22, r20
     bdc:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enc28j60PacketSend>
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <make_echo_reply_from_request>:

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	ec 01       	movw	r28, r24
     bf0:	8b 01       	movw	r16, r22
     bf2:	fc 01       	movw	r30, r24
     bf4:	a8 eb       	ldi	r26, 0xB8	; 184
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     bf8:	86 81       	ldd	r24, Z+6	; 0x06
     bfa:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     bfc:	8d 91       	ld	r24, X+
     bfe:	86 83       	std	Z+6, r24	; 0x06
     c00:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	ae 3b       	cpi	r26, 0xBE	; 190
     c06:	b8 07       	cpc	r27, r24
     c08:	b9 f7       	brne	.-18     	; 0xbf8 <make_echo_reply_from_request+0x12>
}

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
        make_eth(buf);
        make_ip(buf);
     c0a:	ce 01       	movw	r24, r28
     c0c:	0e 94 82 05 	call	0xb04	; 0xb04 <make_ip>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
     c10:	1a a2       	std	Y+34, r1	; 0x22
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
     c12:	8c a1       	ldd	r24, Y+36	; 0x24
     c14:	88 3f       	cpi	r24, 0xF8	; 248
     c16:	18 f0       	brcs	.+6      	; 0xc1e <make_echo_reply_from_request+0x38>
                buf[ICMP_CHECKSUM_P+1]++;
     c18:	8d a1       	ldd	r24, Y+37	; 0x25
     c1a:	8f 5f       	subi	r24, 0xFF	; 255
     c1c:	8d a3       	std	Y+37, r24	; 0x25
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
     c1e:	8c a1       	ldd	r24, Y+36	; 0x24
     c20:	88 5f       	subi	r24, 0xF8	; 248
     c22:	8c a3       	std	Y+36, r24	; 0x24
        //
        enc28j60PacketSend(len,buf);
     c24:	c8 01       	movw	r24, r16
     c26:	be 01       	movw	r22, r28
     c28:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enc28j60PacketSend>
}
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	08 95       	ret

00000c36 <make_udp_reply_from_request>:

// you can send a max of 220 bytes of data
void make_udp_reply_from_request(uint8_t *buf,char *data,uint8_t datalen,uint16_t port)
{
     c36:	df 92       	push	r13
     c38:	ef 92       	push	r14
     c3a:	ff 92       	push	r15
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	ec 01       	movw	r28, r24
     c46:	7b 01       	movw	r14, r22
     c48:	d2 2e       	mov	r13, r18
     c4a:	13 2f       	mov	r17, r19
     c4c:	fc 01       	movw	r30, r24
     c4e:	a8 eb       	ldi	r26, 0xB8	; 184
     c50:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     c52:	86 81       	ldd	r24, Z+6	; 0x06
     c54:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     c56:	8d 91       	ld	r24, X+
     c58:	86 83       	std	Z+6, r24	; 0x06
     c5a:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	ae 3b       	cpi	r26, 0xBE	; 190
     c60:	b8 07       	cpc	r27, r24
     c62:	b9 f7       	brne	.-18     	; 0xc52 <make_udp_reply_from_request+0x1c>
     c64:	04 2f       	mov	r16, r20
     c66:	4d 3d       	cpi	r20, 0xDD	; 221
     c68:	08 f0       	brcs	.+2      	; 0xc6c <make_udp_reply_from_request+0x36>
     c6a:	0c ed       	ldi	r16, 0xDC	; 220
        make_eth(buf);
        if (datalen>220){
                datalen=220;
        }
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
     c6c:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
     c6e:	04 5e       	subi	r16, 0xE4	; 228
     c70:	09 8b       	std	Y+17, r16	; 0x11
        make_ip(buf);
     c72:	ce 01       	movw	r24, r28
     c74:	0e 94 82 05 	call	0xb04	; 0xb04 <make_ip>
        // send to port:
        //buf[UDP_DST_PORT_H_P]=port>>8;
        //buf[UDP_DST_PORT_L_P]=port & 0xff;
        // sent to port of sender and use "port" as own source:
        buf[UDP_DST_PORT_H_P]=buf[UDP_SRC_PORT_H_P];
     c78:	8a a1       	ldd	r24, Y+34	; 0x22
     c7a:	8c a3       	std	Y+36, r24	; 0x24
        buf[UDP_DST_PORT_L_P]= buf[UDP_SRC_PORT_L_P];
     c7c:	8b a1       	ldd	r24, Y+35	; 0x23
     c7e:	8d a3       	std	Y+37, r24	; 0x25
        buf[UDP_SRC_PORT_H_P]=port>>8;
     c80:	1a a3       	std	Y+34, r17	; 0x22
        buf[UDP_SRC_PORT_L_P]=port & 0xff;
     c82:	db a2       	std	Y+35, r13	; 0x23
        // calculte the udp length:
        buf[UDP_LEN_H_P]=0;
     c84:	1e a2       	std	Y+38, r1	; 0x26
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
     c86:	04 51       	subi	r16, 0x14	; 20
     c88:	0f a3       	std	Y+39, r16	; 0x27
     c8a:	08 50       	subi	r16, 0x08	; 8
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
     c8c:	18 a6       	std	Y+40, r1	; 0x28
        buf[UDP_CHECKSUM_L_P]=0;
     c8e:	19 a6       	std	Y+41, r1	; 0x29
     c90:	de 01       	movw	r26, r28
     c92:	9a 96       	adiw	r26, 0x2a	; 42
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	07 c0       	rjmp	.+14     	; 0xca8 <make_udp_reply_from_request+0x72>
        // copy the data:
        while(i<datalen){
                buf[UDP_DATA_P+i]=data[i];
     c9a:	f7 01       	movw	r30, r14
     c9c:	e2 0f       	add	r30, r18
     c9e:	f3 1f       	adc	r31, r19
     ca0:	80 81       	ld	r24, Z
     ca2:	8d 93       	st	X+, r24
     ca4:	2f 5f       	subi	r18, 0xFF	; 255
     ca6:	3f 4f       	sbci	r19, 0xFF	; 255
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
        buf[UDP_CHECKSUM_L_P]=0;
        // copy the data:
        while(i<datalen){
     ca8:	20 17       	cp	r18, r16
     caa:	b8 f3       	brcs	.-18     	; 0xc9a <make_udp_reply_from_request+0x64>
                buf[UDP_DATA_P+i]=data[i];
                i++;
        }
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
     cac:	10 e0       	ldi	r17, 0x00	; 0
     cae:	00 5f       	subi	r16, 0xF0	; 240
     cb0:	1f 4f       	sbci	r17, 0xFF	; 255
     cb2:	ce 01       	movw	r24, r28
     cb4:	4a 96       	adiw	r24, 0x1a	; 26
     cb6:	b8 01       	movw	r22, r16
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 69 04 	call	0x8d2	; 0x8d2 <checksum>
        buf[UDP_CHECKSUM_H_P]=ck>>8;
     cbe:	98 a7       	std	Y+40, r25	; 0x28
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
     cc0:	89 a7       	std	Y+41, r24	; 0x29
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
     cc2:	c8 01       	movw	r24, r16
     cc4:	4a 96       	adiw	r24, 0x1a	; 26
     cc6:	be 01       	movw	r22, r28
     cc8:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enc28j60PacketSend>
}
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	df 90       	pop	r13
     cda:	08 95       	ret

00000cdc <make_tcp_synack_from_syn>:

// this is for the server not the client:
void make_tcp_synack_from_syn(uint8_t *buf)
{
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	ec 01       	movw	r28, r24
     ce2:	fc 01       	movw	r30, r24
     ce4:	a8 eb       	ldi	r26, 0xB8	; 184
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     ce8:	86 81       	ldd	r24, Z+6	; 0x06
     cea:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     cec:	8d 91       	ld	r24, X+
     cee:	86 83       	std	Z+6, r24	; 0x06
     cf0:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	ae 3b       	cpi	r26, 0xBE	; 190
     cf6:	b8 07       	cpc	r27, r24
     cf8:	b9 f7       	brne	.-18     	; 0xce8 <make_tcp_synack_from_syn+0xc>
{
        uint16_t ck;
        make_eth(buf);
        // total length field in the IP header must be set:
        // 20 bytes IP + 24 bytes (20tcp+4tcp options)
        buf[IP_TOTLEN_H_P]=0;
     cfa:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
     cfc:	8c e2       	ldi	r24, 0x2C	; 44
     cfe:	89 8b       	std	Y+17, r24	; 0x11
        make_ip(buf);
     d00:	ce 01       	movw	r24, r28
     d02:	0e 94 82 05 	call	0xb04	; 0xb04 <make_ip>
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYNACK_V;
     d06:	82 e1       	ldi	r24, 0x12	; 18
     d08:	8f a7       	std	Y+47, r24	; 0x2f
        make_tcphead(buf,1,0);
     d0a:	ce 01       	movw	r24, r28
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	0e 94 a8 05 	call	0xb50	; 0xb50 <make_tcphead>
        // put an inital seq number
        buf[TCP_SEQ_H_P+0]= 0;
     d16:	1e a2       	std	Y+38, r1	; 0x26
        buf[TCP_SEQ_H_P+1]= 0;
     d18:	1f a2       	std	Y+39, r1	; 0x27
        // we step only the second byte, this allows us to send packts 
        // with 255 bytes, 512  or 765 (step by 3) without generating
        // overlapping numbers.
        buf[TCP_SEQ_H_P+2]= seqnum; 
     d1a:	80 91 82 00 	lds	r24, 0x0082
     d1e:	88 a7       	std	Y+40, r24	; 0x28
        buf[TCP_SEQ_H_P+3]= 0;
     d20:	19 a6       	std	Y+41, r1	; 0x29
        // step the inititial seq num by something we will not use
        // during this tcp session:
        seqnum+=3;
     d22:	8d 5f       	subi	r24, 0xFD	; 253
     d24:	80 93 82 00 	sts	0x0082, r24
        // add an mss options field with MSS to 1280:
        // 1280 in hex is 0x500
        buf[TCP_OPTIONS_P]=2;
     d28:	82 e0       	ldi	r24, 0x02	; 2
     d2a:	8e ab       	std	Y+54, r24	; 0x36
        buf[TCP_OPTIONS_P+1]=4;
     d2c:	84 e0       	ldi	r24, 0x04	; 4
     d2e:	8f ab       	std	Y+55, r24	; 0x37
        buf[TCP_OPTIONS_P+2]=0x05;
     d30:	95 e0       	ldi	r25, 0x05	; 5
     d32:	98 af       	std	Y+56, r25	; 0x38
        buf[TCP_OPTIONS_P+3]=0x0;
     d34:	19 ae       	std	Y+57, r1	; 0x39
        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes.
        // E.g 24 bytes: 24/4=6 => 0x60=header len field
        buf[TCP_HEADER_LEN_P]=0x60;
     d36:	80 e6       	ldi	r24, 0x60	; 96
     d38:	8e a7       	std	Y+46, r24	; 0x2e
        // here we must just be sure that the web browser contacting us
        // will send only one get packet
        buf[TCP_WIN_SIZE]=0x5; // 1400=0x578
     d3a:	98 ab       	std	Y+48, r25	; 0x30
        buf[TCP_WIN_SIZE+1]=0x78;
     d3c:	88 e7       	ldi	r24, 0x78	; 120
     d3e:	89 ab       	std	Y+49, r24	; 0x31
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + 4 (one option: mss)
        ck=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+4,2);
     d40:	ce 01       	movw	r24, r28
     d42:	4a 96       	adiw	r24, 0x1a	; 26
     d44:	60 e2       	ldi	r22, 0x20	; 32
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	42 e0       	ldi	r20, 0x02	; 2
     d4a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <checksum>
        buf[TCP_CHECKSUM_H_P]=ck>>8;
     d4e:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
     d50:	8b ab       	std	Y+51, r24	; 0x33
        // add 4 for option mss:
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN,buf);
     d52:	8a e3       	ldi	r24, 0x3A	; 58
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	be 01       	movw	r22, r28
     d58:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enc28j60PacketSend>
}
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	08 95       	ret

00000d62 <get_tcp_data_len>:

// do some basic length calculations 
uint16_t get_tcp_data_len(uint8_t *buf)
{
     d62:	fc 01       	movw	r30, r24
        int16_t i;
        i=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
     d64:	90 89       	ldd	r25, Z+16	; 0x10
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	21 89       	ldd	r18, Z+17	; 0x11
     d6a:	42 2f       	mov	r20, r18
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	48 2b       	or	r20, r24
     d70:	59 2b       	or	r21, r25
        i-=IP_HEADER_LEN;
     d72:	26 a5       	ldd	r18, Z+46	; 0x2e
     d74:	82 2f       	mov	r24, r18
     d76:	82 95       	swap	r24
     d78:	8f 70       	andi	r24, 0x0F	; 15
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	48 1b       	sub	r20, r24
     d86:	59 0b       	sbc	r21, r25
        i-=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
     d88:	44 51       	subi	r20, 0x14	; 20
     d8a:	50 40       	sbci	r21, 0x00	; 0
     d8c:	57 ff       	sbrs	r21, 7
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <get_tcp_data_len+0x32>
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	50 e0       	ldi	r21, 0x00	; 0
        if (i<=0){
                i=0;
        }
        return((uint16_t)i);
}
     d94:	ca 01       	movw	r24, r20
     d96:	08 95       	ret

00000d98 <fill_tcp_data_p>:

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data_p(uint8_t *buf,uint16_t pos, const prog_char *progmem_s)
{
     d98:	6a 5c       	subi	r22, 0xCA	; 202
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	dc 01       	movw	r26, r24
     d9e:	a6 0f       	add	r26, r22
     da0:	b7 1f       	adc	r27, r23
     da2:	66 53       	subi	r22, 0x36	; 54
     da4:	70 40       	sbci	r23, 0x00	; 0
     da6:	03 c0       	rjmp	.+6      	; 0xdae <fill_tcp_data_p+0x16>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     da8:	8d 93       	st	X+, r24
                pos++;
     daa:	6f 5f       	subi	r22, 0xFF	; 255
     dac:	7f 4f       	sbci	r23, 0xFF	; 255
     dae:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     db0:	4f 5f       	subi	r20, 0xFF	; 255
     db2:	5f 4f       	sbci	r21, 0xFF	; 255
     db4:	84 91       	lpm	r24, Z+
     db6:	88 23       	and	r24, r24
     db8:	b9 f7       	brne	.-18     	; 0xda8 <fill_tcp_data_p+0x10>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
                pos++;
        }
        return(pos);
}
     dba:	cb 01       	movw	r24, r22
     dbc:	08 95       	ret

00000dbe <fill_tcp_data_len>:

// fill a binary string of len data into the tcp packet
uint16_t fill_tcp_data_len(uint8_t *buf,uint16_t pos, const uint8_t *s, uint8_t len)
{
     dbe:	da 01       	movw	r26, r20
     dc0:	6a 5c       	subi	r22, 0xCA	; 202
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255
     dc4:	fc 01       	movw	r30, r24
     dc6:	e6 0f       	add	r30, r22
     dc8:	f7 1f       	adc	r31, r23
     dca:	66 53       	subi	r22, 0x36	; 54
     dcc:	70 40       	sbci	r23, 0x00	; 0
     dce:	92 2f       	mov	r25, r18
     dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <fill_tcp_data_len+0x1a>
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
     dd2:	8d 91       	ld	r24, X+
     dd4:	81 93       	st	Z+, r24
                pos++;
                s++;
                len--;
     dd6:	91 50       	subi	r25, 0x01	; 1
uint16_t fill_tcp_data_len(uint8_t *buf,uint16_t pos, const uint8_t *s, uint8_t len)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
     dd8:	99 23       	and	r25, r25
     dda:	d9 f7       	brne	.-10     	; 0xdd2 <fill_tcp_data_len+0x14>
     ddc:	cb 01       	movw	r24, r22
     dde:	82 0f       	add	r24, r18
     de0:	91 1d       	adc	r25, r1
                pos++;
                s++;
                len--;
        }
        return(pos);
}
     de2:	08 95       	ret

00000de4 <make_tcp_ack_from_any>:
}

// Make just an ack packet with no tcp data inside
// This will modify the eth/ip/tcp header 
void make_tcp_ack_from_any(uint8_t *buf,int16_t datlentoack,uint8_t addflags)
{
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	ec 01       	movw	r28, r24
     dea:	fc 01       	movw	r30, r24
     dec:	a8 eb       	ldi	r26, 0xB8	; 184
     dee:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     df0:	86 81       	ldd	r24, Z+6	; 0x06
     df2:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     df4:	8d 91       	ld	r24, X+
     df6:	86 83       	std	Z+6, r24	; 0x06
     df8:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	ae 3b       	cpi	r26, 0xBE	; 190
     dfe:	b8 07       	cpc	r27, r24
     e00:	b9 f7       	brne	.-18     	; 0xdf0 <make_tcp_ack_from_any+0xc>
void make_tcp_ack_from_any(uint8_t *buf,int16_t datlentoack,uint8_t addflags)
{
        uint16_t j;
        make_eth(buf);
        // fill the header:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|addflags;
     e02:	84 2f       	mov	r24, r20
     e04:	80 61       	ori	r24, 0x10	; 16
     e06:	8f a7       	std	Y+47, r24	; 0x2f
        if (addflags==TCP_FLAGS_RST_V){
     e08:	44 30       	cpi	r20, 0x04	; 4
     e0a:	29 f0       	breq	.+10     	; 0xe16 <make_tcp_ack_from_any+0x32>
                make_tcphead(buf,datlentoack,1); 
        }else{
                if (datlentoack==0){
     e0c:	61 15       	cp	r22, r1
     e0e:	71 05       	cpc	r23, r1
     e10:	11 f4       	brne	.+4      	; 0xe16 <make_tcp_ack_from_any+0x32>
     e12:	61 e0       	ldi	r22, 0x01	; 1
     e14:	70 e0       	ldi	r23, 0x00	; 0
                        // if there is no data then we must still acknoledge one packet
                        datlentoack=1;
                }
                // normal case, ack the data:
                make_tcphead(buf,datlentoack,1); // no options
     e16:	ce 01       	movw	r24, r28
     e18:	41 e0       	ldi	r20, 0x01	; 1
     e1a:	0e 94 a8 05 	call	0xb50	; 0xb50 <make_tcphead>
        }
        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) 
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
        buf[IP_TOTLEN_H_P]=j>>8;
     e1e:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=j& 0xff;
     e20:	88 e2       	ldi	r24, 0x28	; 40
     e22:	89 8b       	std	Y+17, r24	; 0x11
        make_ip(buf);
     e24:	ce 01       	movw	r24, r28
     e26:	0e 94 82 05 	call	0xb04	; 0xb04 <make_ip>
        // use a low window size otherwise we have to have
        // timers and can not just react on every packet.
        buf[TCP_WIN_SIZE]=0x4; // 1024=0x400, 1280=0x500 2048=0x800 768=0x300
     e2a:	84 e0       	ldi	r24, 0x04	; 4
     e2c:	88 ab       	std	Y+48, r24	; 0x30
        buf[TCP_WIN_SIZE+1]=0;
     e2e:	19 aa       	std	Y+49, r1	; 0x31
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN,2);
     e30:	ce 01       	movw	r24, r28
     e32:	4a 96       	adiw	r24, 0x1a	; 26
     e34:	6c e1       	ldi	r22, 0x1C	; 28
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	42 e0       	ldi	r20, 0x02	; 2
     e3a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
     e3e:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
     e40:	8b ab       	std	Y+51, r24	; 0x33
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN,buf);
     e42:	86 e3       	ldi	r24, 0x36	; 54
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	be 01       	movw	r22, r28
     e48:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enc28j60PacketSend>
}
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <make_tcp_ack_with_data_noflags>:
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
// You must set TCP_FLAGS before calling this
void make_tcp_ack_with_data_noflags(uint8_t *buf,uint16_t dlen)
{
     e52:	ef 92       	push	r14
     e54:	ff 92       	push	r15
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	8c 01       	movw	r16, r24
     e5c:	7b 01       	movw	r14, r22
        uint16_t j;
        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) + len of data
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
     e5e:	cb 01       	movw	r24, r22
     e60:	88 96       	adiw	r24, 0x28	; 40
        buf[IP_TOTLEN_H_P]=j>>8;
     e62:	f8 01       	movw	r30, r16
     e64:	90 8b       	std	Z+16, r25	; 0x10
        buf[IP_TOTLEN_L_P]=j& 0xff;
     e66:	81 8b       	std	Z+17, r24	; 0x11
        fill_ip_hdr_checksum(buf);
     e68:	c8 01       	movw	r24, r16
     e6a:	0e 94 6b 05 	call	0xad6	; 0xad6 <fill_ip_hdr_checksum>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
     e6e:	f8 01       	movw	r30, r16
     e70:	12 aa       	std	Z+50, r1	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
     e72:	13 aa       	std	Z+51, r1	; 0x33
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+dlen,2);
     e74:	8c e1       	ldi	r24, 0x1C	; 28
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	e8 0e       	add	r14, r24
     e7a:	f9 1e       	adc	r15, r25
     e7c:	c8 01       	movw	r24, r16
     e7e:	4a 96       	adiw	r24, 0x1a	; 26
     e80:	b7 01       	movw	r22, r14
     e82:	42 e0       	ldi	r20, 0x02	; 2
     e84:	0e 94 69 04 	call	0x8d2	; 0x8d2 <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
     e88:	f8 01       	movw	r30, r16
     e8a:	92 ab       	std	Z+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
     e8c:	83 ab       	std	Z+51, r24	; 0x33
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
     e8e:	c7 01       	movw	r24, r14
     e90:	4a 96       	adiw	r24, 0x1a	; 26
     e92:	b8 01       	movw	r22, r16
     e94:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enc28j60PacketSend>
}
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	ff 90       	pop	r15
     e9e:	ef 90       	pop	r14
     ea0:	08 95       	ret

00000ea2 <www_server_reply>:
// dlen is the amount of tcp data (http data) we send in this packet
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
void www_server_reply(uint8_t *buf,uint16_t dlen)
{
     ea2:	ef 92       	push	r14
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	8c 01       	movw	r16, r24
     eac:	7b 01       	movw	r14, r22
        make_tcp_ack_from_any(buf,info_data_len,0); // send ack for http get
     eae:	60 91 95 00 	lds	r22, 0x0095
     eb2:	70 91 96 00 	lds	r23, 0x0096
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	0e 94 f2 06 	call	0xde4	; 0xde4 <make_tcp_ack_from_any>
        // fill the header:
        // This code requires that we send only one data packet
        // because we keep no state information. We must therefore set
        // the fin here:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V;
     ebc:	89 e1       	ldi	r24, 0x19	; 25
     ebe:	f8 01       	movw	r30, r16
     ec0:	87 a7       	std	Z+47, r24	; 0x2f
        make_tcp_ack_with_data_noflags(buf,dlen); // send data
     ec2:	c8 01       	movw	r24, r16
     ec4:	b7 01       	movw	r22, r14
     ec6:	0e 94 29 07 	call	0xe52	; 0xe52 <make_tcp_ack_with_data_noflags>
}
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	08 95       	ret

00000ed4 <fill_buf_p>:

#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const prog_char *progmem_s)
{
     ed4:	dc 01       	movw	r26, r24
     ed6:	fa 01       	movw	r30, r20
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <fill_buf_p+0x10>
        while (len){
                *buf= pgm_read_byte(progmem_s);
     eda:	84 91       	lpm	r24, Z+
     edc:	8d 93       	st	X+, r24
                buf++;
                progmem_s++;
     ede:	31 96       	adiw	r30, 0x01	; 1
                len--;
     ee0:	61 50       	subi	r22, 0x01	; 1
     ee2:	70 40       	sbci	r23, 0x00	; 0

#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const prog_char *progmem_s)
{
        while (len){
     ee4:	61 15       	cp	r22, r1
     ee6:	71 05       	cpc	r23, r1
     ee8:	c1 f7       	brne	.-16     	; 0xeda <fill_buf_p+0x6>
                *buf= pgm_read_byte(progmem_s);
                buf++;
                progmem_s++;
                len--;
        }
}
     eea:	08 95       	ret

00000eec <send_udp_prepare>:
// 2) You just allocate a large enough buffer for you data and you call send_udp and nothing else
// needs to be done.
//
// send_udp sends via gwip, you must call client_set_gwip at startu
void send_udp_prepare(uint8_t *buf,uint16_t sport, uint8_t *dip, uint16_t dport)
{
     eec:	ff 92       	push	r15
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	ec 01       	movw	r28, r24
     ef8:	f6 2e       	mov	r15, r22
     efa:	07 2f       	mov	r16, r23
     efc:	ba 01       	movw	r22, r20
     efe:	12 2f       	mov	r17, r18
     f00:	93 2f       	mov	r25, r19
     f02:	ae 01       	movw	r20, r28
     f04:	9e 01       	movw	r18, r28
     f06:	a0 e0       	ldi	r26, 0x00	; 0
     f08:	b0 e0       	ldi	r27, 0x00	; 0
        uint8_t i=0;
        //
        while(i<6){
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
     f0a:	fd 01       	movw	r30, r26
     f0c:	ee 54       	subi	r30, 0x4E	; 78
     f0e:	ff 4f       	sbci	r31, 0xFF	; 255
     f10:	80 81       	ld	r24, Z
     f12:	f9 01       	movw	r30, r18
     f14:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     f16:	fd 01       	movw	r30, r26
     f18:	e8 54       	subi	r30, 0x48	; 72
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	80 81       	ld	r24, Z
     f1e:	f9 01       	movw	r30, r18
     f20:	86 83       	std	Z+6, r24	; 0x06
     f22:	11 96       	adiw	r26, 0x01	; 1
     f24:	2f 5f       	subi	r18, 0xFF	; 255
     f26:	3f 4f       	sbci	r19, 0xFF	; 255
// send_udp sends via gwip, you must call client_set_gwip at startu
void send_udp_prepare(uint8_t *buf,uint16_t sport, uint8_t *dip, uint16_t dport)
{
        uint8_t i=0;
        //
        while(i<6){
     f28:	a6 30       	cpi	r26, 0x06	; 6
     f2a:	b1 05       	cpc	r27, r1
     f2c:	71 f7       	brne	.-36     	; 0xf0a <send_udp_prepare+0x1e>
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
     f2e:	88 e0       	ldi	r24, 0x08	; 8
     f30:	8c 87       	std	Y+12, r24	; 0x0c
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
     f32:	1d 86       	std	Y+13, r1	; 0x0d
     f34:	de 01       	movw	r26, r28
     f36:	ec e5       	ldi	r30, 0x5C	; 92
     f38:	f0 e0       	ldi	r31, 0x00	; 0
#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const prog_char *progmem_s)
{
        while (len){
                *buf= pgm_read_byte(progmem_s);
     f3a:	84 91       	lpm	r24, Z+
     f3c:	1e 96       	adiw	r26, 0x0e	; 14
     f3e:	8c 93       	st	X, r24
     f40:	1e 97       	sbiw	r26, 0x0e	; 14
                buf++;
                progmem_s++;
     f42:	31 96       	adiw	r30, 0x01	; 1
     f44:	11 96       	adiw	r26, 0x01	; 1

#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const prog_char *progmem_s)
{
        while (len){
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	e5 36       	cpi	r30, 0x65	; 101
     f4a:	f8 07       	cpc	r31, r24
     f4c:	b1 f7       	brne	.-20     	; 0xf3a <send_udp_prepare+0x4e>
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
        fill_buf_p(&buf[IP_P],9,iphdr);
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
     f4e:	18 8a       	std	Y+16, r1	; 0x10
        // done in transmit: buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
     f50:	81 e1       	ldi	r24, 0x11	; 17
     f52:	8f 8b       	std	Y+23, r24	; 0x17
     f54:	a0 e0       	ldi	r26, 0x00	; 0
     f56:	b0 e0       	ldi	r27, 0x00	; 0
        i=0;
        while(i<4){
                buf[IP_DST_P+i]=dip[i];
     f58:	fb 01       	movw	r30, r22
     f5a:	ea 0f       	add	r30, r26
     f5c:	fb 1f       	adc	r31, r27
     f5e:	80 81       	ld	r24, Z
     f60:	fa 01       	movw	r30, r20
     f62:	86 8f       	std	Z+30, r24	; 0x1e
                buf[IP_SRC_P+i]=ipaddr[i];
     f64:	fd 01       	movw	r30, r26
     f66:	e2 54       	subi	r30, 0x42	; 66
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	80 81       	ld	r24, Z
     f6c:	fa 01       	movw	r30, r20
     f6e:	82 8f       	std	Z+26, r24	; 0x1a
     f70:	11 96       	adiw	r26, 0x01	; 1
     f72:	4f 5f       	subi	r20, 0xFF	; 255
     f74:	5f 4f       	sbci	r21, 0xFF	; 255
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
        // done in transmit: buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
        i=0;
        while(i<4){
     f76:	a4 30       	cpi	r26, 0x04	; 4
     f78:	b1 05       	cpc	r27, r1
     f7a:	71 f7       	brne	.-36     	; 0xf58 <send_udp_prepare+0x6c>
                buf[IP_DST_P+i]=dip[i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        // done in transmit: fill_ip_hdr_checksum(buf);
        buf[UDP_DST_PORT_H_P]=(dport>>8);
     f7c:	9c a3       	std	Y+36, r25	; 0x24
        buf[UDP_DST_PORT_L_P]=0xff&dport; 
     f7e:	1d a3       	std	Y+37, r17	; 0x25
        buf[UDP_SRC_PORT_H_P]=(sport>>8);
     f80:	0a a3       	std	Y+34, r16	; 0x22
        buf[UDP_SRC_PORT_L_P]=sport&0xff; 
     f82:	fb a2       	std	Y+35, r15	; 0x23
        buf[UDP_LEN_H_P]=0;
     f84:	1e a2       	std	Y+38, r1	; 0x26
        // done in transmit: buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
     f86:	18 a6       	std	Y+40, r1	; 0x28
        buf[UDP_CHECKSUM_L_P]=0;
     f88:	19 a6       	std	Y+41, r1	; 0x29
        // copy the data:
        // now starting with the first byte at buf[UDP_DATA_P]
        //
}
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	ff 90       	pop	r15
     f94:	08 95       	ret

00000f96 <send_udp_transmit>:

void send_udp_transmit(uint8_t *buf,uint8_t datalen)
{
     f96:	ef 92       	push	r14
     f98:	ff 92       	push	r15
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	7c 01       	movw	r14, r24
     fa0:	06 2f       	mov	r16, r22
        uint16_t ck;
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
     fa2:	04 5e       	subi	r16, 0xE4	; 228
     fa4:	fc 01       	movw	r30, r24
     fa6:	01 8b       	std	Z+17, r16	; 0x11
        fill_ip_hdr_checksum(buf);
     fa8:	0e 94 6b 05 	call	0xad6	; 0xad6 <fill_ip_hdr_checksum>
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
     fac:	04 51       	subi	r16, 0x14	; 20
     fae:	f7 01       	movw	r30, r14
     fb0:	07 a3       	std	Z+39, r16	; 0x27
     fb2:	08 50       	subi	r16, 0x08	; 8
        //
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
     fb4:	10 e0       	ldi	r17, 0x00	; 0
     fb6:	00 5f       	subi	r16, 0xF0	; 240
     fb8:	1f 4f       	sbci	r17, 0xFF	; 255
     fba:	c7 01       	movw	r24, r14
     fbc:	4a 96       	adiw	r24, 0x1a	; 26
     fbe:	b8 01       	movw	r22, r16
     fc0:	41 e0       	ldi	r20, 0x01	; 1
     fc2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <checksum>
        buf[UDP_CHECKSUM_H_P]=ck>>8;
     fc6:	f7 01       	movw	r30, r14
     fc8:	90 a7       	std	Z+40, r25	; 0x28
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
     fca:	81 a7       	std	Z+41, r24	; 0x29
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
     fcc:	c8 01       	movw	r24, r16
     fce:	4a 96       	adiw	r24, 0x1a	; 26
     fd0:	b7 01       	movw	r22, r14
     fd2:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enc28j60PacketSend>
}
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	ff 90       	pop	r15
     fdc:	ef 90       	pop	r14
     fde:	08 95       	ret

00000fe0 <send_udp>:

void send_udp(uint8_t *buf,char *data,uint8_t datalen,uint16_t sport, uint8_t *dip, uint16_t dport)
{
     fe0:	af 92       	push	r10
     fe2:	bf 92       	push	r11
     fe4:	df 92       	push	r13
     fe6:	ef 92       	push	r14
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	ec 01       	movw	r28, r24
     ff4:	5b 01       	movw	r10, r22
     ff6:	d4 2e       	mov	r13, r20
     ff8:	a8 01       	movw	r20, r16
        send_udp_prepare(buf,sport, dip, dport);
     ffa:	b9 01       	movw	r22, r18
     ffc:	97 01       	movw	r18, r14
     ffe:	0e 94 76 07 	call	0xeec	; 0xeec <send_udp_prepare>
    1002:	6d 2d       	mov	r22, r13
    1004:	6d 3d       	cpi	r22, 0xDD	; 221
    1006:	08 f0       	brcs	.+2      	; 0x100a <send_udp+0x2a>
    1008:	6c ed       	ldi	r22, 0xDC	; 220
    100a:	de 01       	movw	r26, r28
    100c:	9a 96       	adiw	r26, 0x2a	; 42
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	07 c0       	rjmp	.+14     	; 0x1022 <send_udp+0x42>
                datalen=220;
        }
        // copy the data:
        i=0;
        while(i<datalen){
                buf[UDP_DATA_P+i]=data[i];
    1014:	f5 01       	movw	r30, r10
    1016:	e2 0f       	add	r30, r18
    1018:	f3 1f       	adc	r31, r19
    101a:	80 81       	ld	r24, Z
    101c:	8d 93       	st	X+, r24
    101e:	2f 5f       	subi	r18, 0xFF	; 255
    1020:	3f 4f       	sbci	r19, 0xFF	; 255
        if (datalen>220){
                datalen=220;
        }
        // copy the data:
        i=0;
        while(i<datalen){
    1022:	26 17       	cp	r18, r22
    1024:	b8 f3       	brcs	.-18     	; 0x1014 <send_udp+0x34>
                buf[UDP_DATA_P+i]=data[i];
                i++;
        }
        //
        send_udp_transmit(buf,datalen);
    1026:	ce 01       	movw	r24, r28
    1028:	0e 94 cb 07 	call	0xf96	; 0xf96 <send_udp_transmit>
}
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	df 90       	pop	r13
    103a:	bf 90       	pop	r11
    103c:	af 90       	pop	r10
    103e:	08 95       	ret

00001040 <client_arp_whohas>:
#endif // WOL_client

#if defined (NTP_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// make a arp request
void client_arp_whohas(uint8_t *buf,uint8_t *ip_we_search)
{
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	ec 01       	movw	r28, r24
    1046:	ac 01       	movw	r20, r24
    1048:	28 eb       	ldi	r18, 0xB8	; 184
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	fc 01       	movw	r30, r24
    104e:	d9 01       	movw	r26, r18
        uint8_t i=0;
        //
        while(i<6){
                buf[ETH_DST_MAC +i]=0xff;
    1050:	9f ef       	ldi	r25, 0xFF	; 255
    1052:	90 83       	st	Z, r25
                buf[ETH_SRC_MAC +i]=macaddr[i];
    1054:	8d 91       	ld	r24, X+
    1056:	86 83       	std	Z+6, r24	; 0x06
    1058:	31 96       	adiw	r30, 0x01	; 1
// make a arp request
void client_arp_whohas(uint8_t *buf,uint8_t *ip_we_search)
{
        uint8_t i=0;
        //
        while(i<6){
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	ae 3b       	cpi	r26, 0xBE	; 190
    105e:	b8 07       	cpc	r27, r24
    1060:	c1 f7       	brne	.-16     	; 0x1052 <client_arp_whohas+0x12>
                buf[ETH_DST_MAC +i]=0xff;
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
    1062:	88 e0       	ldi	r24, 0x08	; 8
    1064:	8c 87       	std	Y+12, r24	; 0x0c
        buf[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
    1066:	86 e0       	ldi	r24, 0x06	; 6
    1068:	8d 87       	std	Y+13, r24	; 0x0d
    106a:	de 01       	movw	r26, r28
    106c:	e4 e5       	ldi	r30, 0x54	; 84
    106e:	f0 e0       	ldi	r31, 0x00	; 0
#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const prog_char *progmem_s)
{
        while (len){
                *buf= pgm_read_byte(progmem_s);
    1070:	84 91       	lpm	r24, Z+
    1072:	1e 96       	adiw	r26, 0x0e	; 14
    1074:	8c 93       	st	X, r24
    1076:	1e 97       	sbiw	r26, 0x0e	; 14
                buf++;
                progmem_s++;
    1078:	31 96       	adiw	r30, 0x01	; 1
    107a:	11 96       	adiw	r26, 0x01	; 1

#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const prog_char *progmem_s)
{
        while (len){
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	ec 35       	cpi	r30, 0x5C	; 92
    1080:	f8 07       	cpc	r31, r24
    1082:	b1 f7       	brne	.-20     	; 0x1070 <client_arp_whohas+0x30>
        buf[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
        buf[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
        fill_buf_p(&buf[ETH_ARP_P],8,arpreqhdr);
        i=0;
        while(i<6){
                buf[ETH_ARP_SRC_MAC_P +i]=macaddr[i];
    1084:	f9 01       	movw	r30, r18
    1086:	81 91       	ld	r24, Z+
    1088:	9f 01       	movw	r18, r30
    108a:	fa 01       	movw	r30, r20
    108c:	86 8b       	std	Z+22, r24	; 0x16
                buf[ETH_ARP_DST_MAC_P+i]=0;
    108e:	10 a2       	std	Z+32, r1	; 0x20
    1090:	4f 5f       	subi	r20, 0xFF	; 255
    1092:	5f 4f       	sbci	r21, 0xFF	; 255
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
        buf[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
        fill_buf_p(&buf[ETH_ARP_P],8,arpreqhdr);
        i=0;
        while(i<6){
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	2e 3b       	cpi	r18, 0xBE	; 190
    1098:	3f 07       	cpc	r19, r31
    109a:	a1 f7       	brne	.-24     	; 0x1084 <client_arp_whohas+0x44>
    109c:	de 01       	movw	r26, r28
    109e:	5c 96       	adiw	r26, 0x1c	; 28
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
                buf[ETH_ARP_DST_MAC_P+i]=0;
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=*(ip_we_search +i);
    10a4:	fb 01       	movw	r30, r22
    10a6:	e2 0f       	add	r30, r18
    10a8:	f3 1f       	adc	r31, r19
    10aa:	80 81       	ld	r24, Z
    10ac:	1a 96       	adiw	r26, 0x0a	; 10
    10ae:	8c 93       	st	X, r24
    10b0:	1a 97       	sbiw	r26, 0x0a	; 10
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
    10b2:	f9 01       	movw	r30, r18
    10b4:	e2 54       	subi	r30, 0x42	; 66
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	80 81       	ld	r24, Z
    10ba:	8d 93       	st	X+, r24
    10bc:	2f 5f       	subi	r18, 0xFF	; 255
    10be:	3f 4f       	sbci	r19, 0xFF	; 255
                buf[ETH_ARP_SRC_MAC_P +i]=macaddr[i];
                buf[ETH_ARP_DST_MAC_P+i]=0;
                i++;
        }
        i=0;
        while(i<4){
    10c0:	24 30       	cpi	r18, 0x04	; 4
    10c2:	31 05       	cpc	r19, r1
    10c4:	79 f7       	brne	.-34     	; 0x10a4 <client_arp_whohas+0x64>
                buf[ETH_ARP_DST_IP_P+i]=*(ip_we_search +i);
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
        waitgwmac|=WGW_ACCEPT_ARP_REPLY;
    10c6:	80 91 8d 00 	lds	r24, 0x008D
    10ca:	88 60       	ori	r24, 0x08	; 8
    10cc:	80 93 8d 00 	sts	0x008D, r24
        // 0x2a=42=len of packet
        enc28j60PacketSend(0x2a,buf);
    10d0:	8a e2       	ldi	r24, 0x2A	; 42
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	be 01       	movw	r22, r28
    10d6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enc28j60PacketSend>
}
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <client_waiting_gw>:

uint8_t client_waiting_gw(void)
{
    10e0:	80 91 8d 00 	lds	r24, 0x008D
    10e4:	86 95       	lsr	r24
    10e6:	80 95       	com	r24
        if (waitgwmac & WGW_HAVE_GW_MAC){
                return(0);
        }
        return(1);
}
    10e8:	81 70       	andi	r24, 0x01	; 1
    10ea:	08 95       	ret

000010ec <client_store_gw_mac>:

// store the mac addr from an arp reply
// no len check here, you must first call eth_type_is_arp_and_my_ip
uint8_t client_store_gw_mac(uint8_t *buf)
{
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	ec 01       	movw	r28, r24
    10f2:	e6 e7       	ldi	r30, 0x76	; 118
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	dc 01       	movw	r26, r24
        uint8_t i=0;
        while(i<4){
                if(buf[ETH_ARP_SRC_IP_P+i]!=gwip[i]){
    10f8:	5c 96       	adiw	r26, 0x1c	; 28
    10fa:	9c 91       	ld	r25, X
    10fc:	5c 97       	sbiw	r26, 0x1c	; 28
    10fe:	80 81       	ld	r24, Z
    1100:	98 17       	cp	r25, r24
    1102:	11 f0       	breq	.+4      	; 0x1108 <client_store_gw_mac+0x1c>
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	10 c0       	rjmp	.+32     	; 0x1128 <client_store_gw_mac+0x3c>
    1108:	11 96       	adiw	r26, 0x01	; 1
    110a:	31 96       	adiw	r30, 0x01	; 1
// store the mac addr from an arp reply
// no len check here, you must first call eth_type_is_arp_and_my_ip
uint8_t client_store_gw_mac(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	ea 37       	cpi	r30, 0x7A	; 122
    1110:	f8 07       	cpc	r31, r24
    1112:	91 f7       	brne	.-28     	; 0x10f8 <client_store_gw_mac+0xc>
    1114:	e2 eb       	ldi	r30, 0xB2	; 178
    1116:	f0 e0       	ldi	r31, 0x00	; 0
                }
                i++;
        }
        i=0;
        while(i<6){
                gwmacaddr[i]=buf[ETH_ARP_SRC_MAC_P +i];
    1118:	8e 89       	ldd	r24, Y+22	; 0x16
    111a:	81 93       	st	Z+, r24
    111c:	21 96       	adiw	r28, 0x01	; 1
                        return(0);
                }
                i++;
        }
        i=0;
        while(i<6){
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	e8 3b       	cpi	r30, 0xB8	; 184
    1122:	f8 07       	cpc	r31, r24
    1124:	c9 f7       	brne	.-14     	; 0x1118 <client_store_gw_mac+0x2c>
    1126:	81 e0       	ldi	r24, 0x01	; 1
                gwmacaddr[i]=buf[ETH_ARP_SRC_MAC_P +i];
                i++;
        }
        return(1);
}
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	08 95       	ret

0000112e <client_gw_arp_refresh>:

void client_gw_arp_refresh(void) {
        if (waitgwmac & WGW_HAVE_GW_MAC){
    112e:	80 91 8d 00 	lds	r24, 0x008D
    1132:	81 ff       	sbrs	r24, 1
    1134:	03 c0       	rjmp	.+6      	; 0x113c <client_gw_arp_refresh+0xe>
                waitgwmac|=WGW_REFRESHING;
    1136:	84 60       	ori	r24, 0x04	; 4
    1138:	80 93 8d 00 	sts	0x008D, r24
    113c:	08 95       	ret

0000113e <client_set_gwip>:
        }
}

void client_set_gwip(uint8_t *gwipaddr)
{
    113e:	ac 01       	movw	r20, r24
        uint8_t i=0;
        waitgwmac=WGW_INITIAL_ARP; // causes an arp request in the packet loop
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	80 93 8d 00 	sts	0x008D, r24
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
        while(i<4){
                gwip[i]=gwipaddr[i];
    114a:	f9 01       	movw	r30, r18
    114c:	ea 58       	subi	r30, 0x8A	; 138
    114e:	ff 4f       	sbci	r31, 0xFF	; 255
    1150:	da 01       	movw	r26, r20
    1152:	a2 0f       	add	r26, r18
    1154:	b3 1f       	adc	r27, r19
    1156:	8c 91       	ld	r24, X
    1158:	80 83       	st	Z, r24
    115a:	2f 5f       	subi	r18, 0xFF	; 255
    115c:	3f 4f       	sbci	r19, 0xFF	; 255

void client_set_gwip(uint8_t *gwipaddr)
{
        uint8_t i=0;
        waitgwmac=WGW_INITIAL_ARP; // causes an arp request in the packet loop
        while(i<4){
    115e:	24 30       	cpi	r18, 0x04	; 4
    1160:	31 05       	cpc	r19, r1
    1162:	99 f7       	brne	.-26     	; 0x114a <client_set_gwip+0xc>
                gwip[i]=gwipaddr[i];
                i++;
        }
}
    1164:	08 95       	ret

00001166 <client_tcp_set_serverip>:
#endif // NTP_client || UDP_client || TCP_client || PING_client

#if defined (TCP_client)
void client_tcp_set_serverip(uint8_t *ipaddr)
{
    1166:	ac 01       	movw	r20, r24
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
        uint8_t i=0;
        while(i<4){
                tcpsrvip[i]=ipaddr[i];
    116c:	f9 01       	movw	r30, r18
    116e:	e4 56       	subi	r30, 0x64	; 100
    1170:	ff 4f       	sbci	r31, 0xFF	; 255
    1172:	da 01       	movw	r26, r20
    1174:	a2 0f       	add	r26, r18
    1176:	b3 1f       	adc	r27, r19
    1178:	8c 91       	ld	r24, X
    117a:	80 83       	st	Z, r24
    117c:	2f 5f       	subi	r18, 0xFF	; 255
    117e:	3f 4f       	sbci	r19, 0xFF	; 255

#if defined (TCP_client)
void client_tcp_set_serverip(uint8_t *ipaddr)
{
        uint8_t i=0;
        while(i<4){
    1180:	24 30       	cpi	r18, 0x04	; 4
    1182:	31 05       	cpc	r19, r1
    1184:	99 f7       	brne	.-26     	; 0x116c <client_tcp_set_serverip+0x6>
                tcpsrvip[i]=ipaddr[i];
                i++;
        }
}
    1186:	08 95       	ret

00001188 <client_syn>:
#endif // TCP_client

#if defined (TCP_client)
// Make a tcp syn packet
void client_syn(uint8_t *buf,uint8_t srcport,uint8_t dstport_h,uint8_t dstport_l)
{
    1188:	ff 92       	push	r15
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	ec 01       	movw	r28, r24
    1194:	f6 2e       	mov	r15, r22
    1196:	14 2f       	mov	r17, r20
    1198:	02 2f       	mov	r16, r18
    119a:	ac 01       	movw	r20, r24
    119c:	dc 01       	movw	r26, r24
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
        uint16_t ck;
        uint8_t i=0;
        // -- make the main part of the eth/IP/tcp header:
        while(i<6){
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
    11a2:	f9 01       	movw	r30, r18
    11a4:	ee 54       	subi	r30, 0x4E	; 78
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	80 81       	ld	r24, Z
    11aa:	8c 93       	st	X, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
    11ac:	f9 01       	movw	r30, r18
    11ae:	e8 54       	subi	r30, 0x48	; 72
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	80 81       	ld	r24, Z
    11b4:	16 96       	adiw	r26, 0x06	; 6
    11b6:	8c 93       	st	X, r24
    11b8:	16 97       	sbiw	r26, 0x06	; 6
    11ba:	2f 5f       	subi	r18, 0xFF	; 255
    11bc:	3f 4f       	sbci	r19, 0xFF	; 255
    11be:	11 96       	adiw	r26, 0x01	; 1
void client_syn(uint8_t *buf,uint8_t srcport,uint8_t dstport_h,uint8_t dstport_l)
{
        uint16_t ck;
        uint8_t i=0;
        // -- make the main part of the eth/IP/tcp header:
        while(i<6){
    11c0:	26 30       	cpi	r18, 0x06	; 6
    11c2:	31 05       	cpc	r19, r1
    11c4:	71 f7       	brne	.-36     	; 0x11a2 <client_syn+0x1a>
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
    11c6:	88 e0       	ldi	r24, 0x08	; 8
    11c8:	8c 87       	std	Y+12, r24	; 0x0c
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
    11ca:	1d 86       	std	Y+13, r1	; 0x0d
    11cc:	de 01       	movw	r26, r28
    11ce:	ec e5       	ldi	r30, 0x5C	; 92
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const prog_char *progmem_s)
{
        while (len){
                *buf= pgm_read_byte(progmem_s);
    11d2:	84 91       	lpm	r24, Z+
    11d4:	1e 96       	adiw	r26, 0x0e	; 14
    11d6:	8c 93       	st	X, r24
    11d8:	1e 97       	sbiw	r26, 0x0e	; 14
                buf++;
                progmem_s++;
    11da:	31 96       	adiw	r30, 0x01	; 1
    11dc:	11 96       	adiw	r26, 0x01	; 1

#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const prog_char *progmem_s)
{
        while (len){
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	e5 36       	cpi	r30, 0x65	; 101
    11e2:	f8 07       	cpc	r31, r24
    11e4:	b1 f7       	brne	.-20     	; 0x11d2 <client_syn+0x4a>
                i++;
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
        fill_buf_p(&buf[IP_P],9,iphdr);
        buf[IP_TOTLEN_L_P]=44; // good for syn
    11e6:	8c e2       	ldi	r24, 0x2C	; 44
    11e8:	89 8b       	std	Y+17, r24	; 0x11
        buf[IP_PROTO_P]=IP_PROTO_TCP_V;
    11ea:	86 e0       	ldi	r24, 0x06	; 6
    11ec:	8f 8b       	std	Y+23, r24	; 0x17
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
        i=0;
        while(i<4){
                buf[IP_DST_P+i]=tcpsrvip[i];
    11f2:	f9 01       	movw	r30, r18
    11f4:	e4 56       	subi	r30, 0x64	; 100
    11f6:	ff 4f       	sbci	r31, 0xFF	; 255
    11f8:	80 81       	ld	r24, Z
    11fa:	fa 01       	movw	r30, r20
    11fc:	86 8f       	std	Z+30, r24	; 0x1e
                buf[IP_SRC_P+i]=ipaddr[i];
    11fe:	f9 01       	movw	r30, r18
    1200:	e2 54       	subi	r30, 0x42	; 66
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	80 81       	ld	r24, Z
    1206:	fa 01       	movw	r30, r20
    1208:	82 8f       	std	Z+26, r24	; 0x1a
    120a:	2f 5f       	subi	r18, 0xFF	; 255
    120c:	3f 4f       	sbci	r19, 0xFF	; 255
    120e:	4f 5f       	subi	r20, 0xFF	; 255
    1210:	5f 4f       	sbci	r21, 0xFF	; 255
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
        fill_buf_p(&buf[IP_P],9,iphdr);
        buf[IP_TOTLEN_L_P]=44; // good for syn
        buf[IP_PROTO_P]=IP_PROTO_TCP_V;
        i=0;
        while(i<4){
    1212:	24 30       	cpi	r18, 0x04	; 4
    1214:	31 05       	cpc	r19, r1
    1216:	69 f7       	brne	.-38     	; 0x11f2 <client_syn+0x6a>
                buf[IP_DST_P+i]=tcpsrvip[i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        fill_ip_hdr_checksum(buf);
    1218:	ce 01       	movw	r24, r28
    121a:	0e 94 6b 05 	call	0xad6	; 0xad6 <fill_ip_hdr_checksum>
        buf[TCP_DST_PORT_H_P]=dstport_h;
    121e:	1c a3       	std	Y+36, r17	; 0x24
        buf[TCP_DST_PORT_L_P]=dstport_l;
    1220:	0d a3       	std	Y+37, r16	; 0x25
        buf[TCP_SRC_PORT_H_P]=TCPCLIENT_SRC_PORT_H;
    1222:	8b e0       	ldi	r24, 0x0B	; 11
    1224:	8a a3       	std	Y+34, r24	; 0x22
        buf[TCP_SRC_PORT_L_P]=srcport; // lower 8 bit of src port
    1226:	fb a2       	std	Y+35, r15	; 0x23
    1228:	fe 01       	movw	r30, r28
    122a:	b6 96       	adiw	r30, 0x26	; 38
    122c:	80 e0       	ldi	r24, 0x00	; 0
        i=0;
        // zero out sequence number and acknowledgement number
        while(i<8){
                buf[TCP_SEQ_H_P+i]=0;
    122e:	11 92       	st	Z+, r1
                i++;
    1230:	8f 5f       	subi	r24, 0xFF	; 255
        buf[TCP_DST_PORT_L_P]=dstport_l;
        buf[TCP_SRC_PORT_H_P]=TCPCLIENT_SRC_PORT_H;
        buf[TCP_SRC_PORT_L_P]=srcport; // lower 8 bit of src port
        i=0;
        // zero out sequence number and acknowledgement number
        while(i<8){
    1232:	88 30       	cpi	r24, 0x08	; 8
    1234:	e1 f7       	brne	.-8      	; 0x122e <client_syn+0xa6>
        // -- header ready 
        // put inital seq number
        // we step only the second byte, this allows us to send packts 
        // with 255 bytes 512 (if we step the initial seqnum by 2)
        // or 765 (step by 3)
        buf[TCP_SEQ_H_P+2]= seqnum; 
    1236:	80 91 82 00 	lds	r24, 0x0082
    123a:	88 a7       	std	Y+40, r24	; 0x28
        // step the inititial seq num by something we will not use
        // during this tcp session:
        seqnum+=3;
    123c:	8d 5f       	subi	r24, 0xFD	; 253
    123e:	80 93 82 00 	sts	0x0082, r24
        buf[TCP_HEADER_LEN_P]=0x60; // 0x60=24 len: (0x60>>4) * 4
    1242:	80 e6       	ldi	r24, 0x60	; 96
    1244:	8e a7       	std	Y+46, r24	; 0x2e
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYN_V;
    1246:	92 e0       	ldi	r25, 0x02	; 2
    1248:	9f a7       	std	Y+47, r25	; 0x2f
        // use a low window size otherwise we have to have
        // timers and can not just react on every packet.
        buf[TCP_WIN_SIZE]=0x3; // 1024=0x400 768=0x300, initial window
    124a:	83 e0       	ldi	r24, 0x03	; 3
    124c:	88 ab       	std	Y+48, r24	; 0x30
        buf[TCP_WIN_SIZE+1]=0x0;
    124e:	19 aa       	std	Y+49, r1	; 0x31
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
    1250:	1a aa       	std	Y+50, r1	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
    1252:	1b aa       	std	Y+51, r1	; 0x33
        // urgent pointer
        buf[TCP_CHECKSUM_L_P+1]=0;
    1254:	1c aa       	std	Y+52, r1	; 0x34
        buf[TCP_CHECKSUM_L_P+2]=0;
    1256:	1d aa       	std	Y+53, r1	; 0x35
        // MSS= max IP len that we want to have:
        buf[TCP_OPTIONS_P]=2;
    1258:	9e ab       	std	Y+54, r25	; 0x36
        buf[TCP_OPTIONS_P+1]=4;
    125a:	84 e0       	ldi	r24, 0x04	; 4
    125c:	8f ab       	std	Y+55, r24	; 0x37
        buf[TCP_OPTIONS_P+2]=(CLIENTMSS>>8);
    125e:	98 af       	std	Y+56, r25	; 0x38
        buf[TCP_OPTIONS_P+3]=CLIENTMSS & 0xff;
    1260:	86 e2       	ldi	r24, 0x26	; 38
    1262:	89 af       	std	Y+57, r24	; 0x39
        ck=checksum(&buf[IP_SRC_P], 8 +TCP_HEADER_LEN_PLAIN+4,2);
    1264:	ce 01       	movw	r24, r28
    1266:	4a 96       	adiw	r24, 0x1a	; 26
    1268:	60 e2       	ldi	r22, 0x20	; 32
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	42 e0       	ldi	r20, 0x02	; 2
    126e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <checksum>
        buf[TCP_CHECKSUM_H_P]=ck>>8;
    1272:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
    1274:	8b ab       	std	Y+51, r24	; 0x33
        // 4 is the tcp mss option:
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4,buf);
    1276:	8a e3       	ldi	r24, 0x3A	; 58
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	be 01       	movw	r22, r28
    127c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enc28j60PacketSend>
}
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ff 90       	pop	r15
    128a:	08 95       	ret

0000128c <client_tcp_req>:
// We use callback functions because that saves memory and a uC is very
// limited in memory
//
uint8_t client_tcp_req(uint8_t (*result_callback)(uint8_t fd,uint8_t statuscode,uint16_t data_start_pos_in_buf, uint16_t len_of_data),uint16_t (*datafill_callback)(uint8_t fd),uint16_t port)
{
        client_tcp_result_callback=result_callback;
    128c:	90 93 a1 00 	sts	0x00A1, r25
    1290:	80 93 a0 00 	sts	0x00A0, r24
        client_tcp_datafill_callback=datafill_callback;
    1294:	70 93 a3 00 	sts	0x00A3, r23
    1298:	60 93 a2 00 	sts	0x00A2, r22
        tcp_client_port_h=(port>>8) & 0xff;
    129c:	50 93 90 00 	sts	0x0090, r21
        tcp_client_port_l=(port & 0xff);
    12a0:	40 93 91 00 	sts	0x0091, r20
        tcp_client_state=1; // send a syn
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	80 93 8e 00 	sts	0x008E, r24
        tcp_fd++;
    12aa:	80 91 8f 00 	lds	r24, 0x008F
    12ae:	8f 5f       	subi	r24, 0xFF	; 255
    12b0:	80 93 8f 00 	sts	0x008F, r24
        if (tcp_fd>7){
    12b4:	88 30       	cpi	r24, 0x08	; 8
    12b6:	10 f0       	brcs	.+4      	; 0x12bc <client_tcp_req+0x30>
                tcp_fd=0;
    12b8:	10 92 8f 00 	sts	0x008F, r1
        }
        return(tcp_fd);
}
    12bc:	80 91 8f 00 	lds	r24, 0x008F
    12c0:	08 95       	ret

000012c2 <client_browse_url>:
// statuscode==1 means there is a valid tcp data but not a "200 OK"
// answer. Any other statuscode than 0 and 1 is a total communication failure.
//
void client_browse_url(prog_char *urlbuf, char *urlbuf_varpart, prog_char *hoststr,void (*callback)(uint8_t,uint16_t,uint16_t))
{
        client_urlbuf=urlbuf;
    12c2:	90 93 ab 00 	sts	0x00AB, r25
    12c6:	80 93 aa 00 	sts	0x00AA, r24
        client_urlbuf_var=urlbuf_varpart;
    12ca:	70 93 ad 00 	sts	0x00AD, r23
    12ce:	60 93 ac 00 	sts	0x00AC, r22
        client_hoststr=hoststr;
    12d2:	50 93 af 00 	sts	0x00AF, r21
    12d6:	40 93 ae 00 	sts	0x00AE, r20
        browsertype=0;
    12da:	10 92 97 00 	sts	0x0097, r1
        client_browser_callback=callback;
    12de:	30 93 a5 00 	sts	0x00A5, r19
    12e2:	20 93 a4 00 	sts	0x00A4, r18
// We use callback functions because that saves memory and a uC is very
// limited in memory
//
uint8_t client_tcp_req(uint8_t (*result_callback)(uint8_t fd,uint8_t statuscode,uint16_t data_start_pos_in_buf, uint16_t len_of_data),uint16_t (*datafill_callback)(uint8_t fd),uint16_t port)
{
        client_tcp_result_callback=result_callback;
    12e6:	85 e9       	ldi	r24, 0x95	; 149
    12e8:	9d e0       	ldi	r25, 0x0D	; 13
    12ea:	90 93 a1 00 	sts	0x00A1, r25
    12ee:	80 93 a0 00 	sts	0x00A0, r24
        client_tcp_datafill_callback=datafill_callback;
    12f2:	84 e3       	ldi	r24, 0x34	; 52
    12f4:	91 e1       	ldi	r25, 0x11	; 17
    12f6:	90 93 a3 00 	sts	0x00A3, r25
    12fa:	80 93 a2 00 	sts	0x00A2, r24
        tcp_client_port_h=(port>>8) & 0xff;
    12fe:	10 92 90 00 	sts	0x0090, r1
        tcp_client_port_l=(port & 0xff);
    1302:	80 e5       	ldi	r24, 0x50	; 80
    1304:	80 93 91 00 	sts	0x0091, r24
        tcp_client_state=1; // send a syn
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	80 93 8e 00 	sts	0x008E, r24
        tcp_fd++;
    130e:	80 91 8f 00 	lds	r24, 0x008F
    1312:	8f 5f       	subi	r24, 0xFF	; 255
    1314:	80 93 8f 00 	sts	0x008F, r24
        if (tcp_fd>7){
    1318:	88 30       	cpi	r24, 0x08	; 8
    131a:	10 f0       	brcs	.+4      	; 0x1320 <client_browse_url+0x5e>
                tcp_fd=0;
    131c:	10 92 8f 00 	sts	0x008F, r1
        client_urlbuf=urlbuf;
        client_urlbuf_var=urlbuf_varpart;
        client_hoststr=hoststr;
        browsertype=0;
        client_browser_callback=callback;
        www_fd=client_tcp_req(&www_client_internal_result_callback,&www_client_internal_datafill_callback,80);
    1320:	80 91 8f 00 	lds	r24, 0x008F
    1324:	80 93 98 00 	sts	0x0098, r24
}
    1328:	08 95       	ret

0000132a <client_http_post>:
// additionalheaderline must be set to NULL if not used.
// postval is a string buffer which can only be de-allocated by the caller 
// when the post operation was really done (e.g when callback was executed).
// postval must be urlencoded.
void client_http_post(prog_char *urlbuf, prog_char *hoststr, prog_char *additionalheaderline,char *postval,void (*callback)(uint8_t,uint16_t,uint16_t))
{
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
        client_urlbuf=urlbuf;
    132e:	90 93 ab 00 	sts	0x00AB, r25
    1332:	80 93 aa 00 	sts	0x00AA, r24
        client_hoststr=hoststr;
    1336:	70 93 af 00 	sts	0x00AF, r23
    133a:	60 93 ae 00 	sts	0x00AE, r22
        client_additionalheaderline=additionalheaderline;
    133e:	50 93 a7 00 	sts	0x00A7, r21
    1342:	40 93 a6 00 	sts	0x00A6, r20
        client_postval=postval;
    1346:	30 93 a9 00 	sts	0x00A9, r19
    134a:	20 93 a8 00 	sts	0x00A8, r18
        browsertype=1;
    134e:	21 e0       	ldi	r18, 0x01	; 1
    1350:	20 93 97 00 	sts	0x0097, r18
        client_browser_callback=callback;
    1354:	10 93 a5 00 	sts	0x00A5, r17
    1358:	00 93 a4 00 	sts	0x00A4, r16
// We use callback functions because that saves memory and a uC is very
// limited in memory
//
uint8_t client_tcp_req(uint8_t (*result_callback)(uint8_t fd,uint8_t statuscode,uint16_t data_start_pos_in_buf, uint16_t len_of_data),uint16_t (*datafill_callback)(uint8_t fd),uint16_t port)
{
        client_tcp_result_callback=result_callback;
    135c:	85 e9       	ldi	r24, 0x95	; 149
    135e:	9d e0       	ldi	r25, 0x0D	; 13
    1360:	90 93 a1 00 	sts	0x00A1, r25
    1364:	80 93 a0 00 	sts	0x00A0, r24
        client_tcp_datafill_callback=datafill_callback;
    1368:	84 e3       	ldi	r24, 0x34	; 52
    136a:	91 e1       	ldi	r25, 0x11	; 17
    136c:	90 93 a3 00 	sts	0x00A3, r25
    1370:	80 93 a2 00 	sts	0x00A2, r24
        tcp_client_port_h=(port>>8) & 0xff;
    1374:	10 92 90 00 	sts	0x0090, r1
        tcp_client_port_l=(port & 0xff);
    1378:	80 e5       	ldi	r24, 0x50	; 80
    137a:	80 93 91 00 	sts	0x0091, r24
        tcp_client_state=1; // send a syn
    137e:	20 93 8e 00 	sts	0x008E, r18
        tcp_fd++;
    1382:	80 91 8f 00 	lds	r24, 0x008F
    1386:	8f 5f       	subi	r24, 0xFF	; 255
    1388:	80 93 8f 00 	sts	0x008F, r24
        if (tcp_fd>7){
    138c:	88 30       	cpi	r24, 0x08	; 8
    138e:	10 f0       	brcs	.+4      	; 0x1394 <client_http_post+0x6a>
                tcp_fd=0;
    1390:	10 92 8f 00 	sts	0x008F, r1
        client_hoststr=hoststr;
        client_additionalheaderline=additionalheaderline;
        client_postval=postval;
        browsertype=1;
        client_browser_callback=callback;
        www_fd=client_tcp_req(&www_client_internal_result_callback,&www_client_internal_datafill_callback,80);
    1394:	80 91 8f 00 	lds	r24, 0x008F
    1398:	80 93 98 00 	sts	0x0098, r24
}
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	08 95       	ret

000013a2 <register_ping_rec_callback>:
#endif // WWW_client

void register_ping_rec_callback(void (*callback)(uint8_t *srcip))
{
        icmp_callback=callback;
    13a2:	90 93 b1 00 	sts	0x00B1, r25
    13a6:	80 93 b0 00 	sts	0x00B0, r24
}
    13aa:	08 95       	ret

000013ac <packetloop_icmp_tcp>:


// return 0 to just continue in the packet loop and return the position 
// of the tcp data if there is tcp data part
uint16_t packetloop_icmp_tcp(uint8_t *buf,uint16_t plen)
{
    13ac:	cf 92       	push	r12
    13ae:	df 92       	push	r13
    13b0:	ef 92       	push	r14
    13b2:	ff 92       	push	r15
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	7c 01       	movw	r14, r24
    13be:	6b 01       	movw	r12, r22
        uint16_t save_len;
#endif
        //plen will be unequal to zero if there is a valid 
        // packet (without crc error):
#if defined (NTP_client) ||  defined (UDP_client) || defined (TCP_client) || defined (PING_client)
        if(plen==0){
    13c0:	61 15       	cp	r22, r1
    13c2:	71 05       	cpc	r23, r1
    13c4:	e1 f5       	brne	.+120    	; 0x143e <packetloop_icmp_tcp+0x92>
                if ((waitgwmac & WGW_INITIAL_ARP||waitgwmac & WGW_REFRESHING) && delaycnt==0&& enc28j60linkup()){
    13c6:	80 91 8d 00 	lds	r24, 0x008D
    13ca:	85 70       	andi	r24, 0x05	; 5
    13cc:	79 f0       	breq	.+30     	; 0x13ec <packetloop_icmp_tcp+0x40>
    13ce:	80 91 7e 00 	lds	r24, 0x007E
    13d2:	90 91 7f 00 	lds	r25, 0x007F
    13d6:	89 2b       	or	r24, r25
    13d8:	49 f4       	brne	.+18     	; 0x13ec <packetloop_icmp_tcp+0x40>
    13da:	0e 94 54 03 	call	0x6a8	; 0x6a8 <enc28j60linkup>
    13de:	88 23       	and	r24, r24
    13e0:	29 f0       	breq	.+10     	; 0x13ec <packetloop_icmp_tcp+0x40>
                        client_arp_whohas(buf,gwip);
    13e2:	c7 01       	movw	r24, r14
    13e4:	66 e7       	ldi	r22, 0x76	; 118
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	0e 94 20 08 	call	0x1040	; 0x1040 <client_arp_whohas>
                }
                delaycnt++;
    13ec:	80 91 7e 00 	lds	r24, 0x007E
    13f0:	90 91 7f 00 	lds	r25, 0x007F
    13f4:	01 96       	adiw	r24, 0x01	; 1
    13f6:	90 93 7f 00 	sts	0x007F, r25
    13fa:	80 93 7e 00 	sts	0x007E, r24
#if defined (TCP_client)
                if (tcp_client_state==1 && (waitgwmac & WGW_HAVE_GW_MAC)){ // send a syn
    13fe:	80 91 8e 00 	lds	r24, 0x008E
    1402:	81 30       	cpi	r24, 0x01	; 1
    1404:	09 f0       	breq	.+2      	; 0x1408 <packetloop_icmp_tcp+0x5c>
    1406:	99 c1       	rjmp	.+818    	; 0x173a <packetloop_icmp_tcp+0x38e>
    1408:	80 91 8d 00 	lds	r24, 0x008D
    140c:	81 ff       	sbrs	r24, 1
    140e:	95 c1       	rjmp	.+810    	; 0x173a <packetloop_icmp_tcp+0x38e>
                        tcp_client_state=2;
    1410:	82 e0       	ldi	r24, 0x02	; 2
    1412:	80 93 8e 00 	sts	0x008E, r24
                        tcpclient_src_port_l++; // allocate a new port
    1416:	80 91 80 00 	lds	r24, 0x0080
    141a:	8f 5f       	subi	r24, 0xFF	; 255
    141c:	80 93 80 00 	sts	0x0080, r24
                        // we encode our 3 bit fd into the src port this
                        // way we get it back in every message that comes
                        // from the server:
                        client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
    1420:	8f 71       	andi	r24, 0x1F	; 31
    1422:	60 91 8f 00 	lds	r22, 0x008F
    1426:	62 95       	swap	r22
    1428:	66 0f       	add	r22, r22
    142a:	60 7e       	andi	r22, 0xE0	; 224
    142c:	68 2b       	or	r22, r24
    142e:	c7 01       	movw	r24, r14
    1430:	40 91 90 00 	lds	r20, 0x0090
    1434:	20 91 91 00 	lds	r18, 0x0091
    1438:	0e 94 c4 08 	call	0x1188	; 0x1188 <client_syn>
    143c:	7e c1       	rjmp	.+764    	; 0x173a <packetloop_icmp_tcp+0x38e>
        }
#endif // NTP_client||UDP_client||TCP_client||PING_client
        // arp is broadcast if unknown but a host may also
        // verify the mac address by sending it to 
        // a unicast address.
        if(eth_type_is_arp_and_my_ip(buf,plen)){
    143e:	0e 94 22 05 	call	0xa44	; 0xa44 <eth_type_is_arp_and_my_ip>
    1442:	88 23       	and	r24, r24
    1444:	61 f1       	breq	.+88     	; 0x149e <packetloop_icmp_tcp+0xf2>
                if (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V){
    1446:	d7 01       	movw	r26, r14
    1448:	55 96       	adiw	r26, 0x15	; 21
    144a:	8c 91       	ld	r24, X
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	19 f4       	brne	.+6      	; 0x1456 <packetloop_icmp_tcp+0xaa>
                        // is it an arp request 
                        make_arp_answer_from_request(buf);
    1450:	c7 01       	movw	r24, r14
    1452:	0e 94 bf 05 	call	0xb7e	; 0xb7e <make_arp_answer_from_request>
                }
#if defined (NTP_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
                if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
    1456:	80 91 8d 00 	lds	r24, 0x008D
    145a:	83 ff       	sbrs	r24, 3
    145c:	6e c1       	rjmp	.+732    	; 0x173a <packetloop_icmp_tcp+0x38e>
    145e:	f7 01       	movw	r30, r14
    1460:	85 89       	ldd	r24, Z+21	; 0x15
    1462:	82 30       	cpi	r24, 0x02	; 2
    1464:	09 f0       	breq	.+2      	; 0x1468 <packetloop_icmp_tcp+0xbc>
    1466:	69 c1       	rjmp	.+722    	; 0x173a <packetloop_icmp_tcp+0x38e>
    1468:	e7 01       	movw	r28, r14
    146a:	e6 e7       	ldi	r30, 0x76	; 118
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	d7 01       	movw	r26, r14
// no len check here, you must first call eth_type_is_arp_and_my_ip
uint8_t client_store_gw_mac(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
                if(buf[ETH_ARP_SRC_IP_P+i]!=gwip[i]){
    1470:	5c 96       	adiw	r26, 0x1c	; 28
    1472:	9c 91       	ld	r25, X
    1474:	5c 97       	sbiw	r26, 0x1c	; 28
    1476:	80 81       	ld	r24, Z
    1478:	98 17       	cp	r25, r24
    147a:	09 f0       	breq	.+2      	; 0x147e <packetloop_icmp_tcp+0xd2>
    147c:	5e c1       	rjmp	.+700    	; 0x173a <packetloop_icmp_tcp+0x38e>
    147e:	11 96       	adiw	r26, 0x01	; 1
    1480:	31 96       	adiw	r30, 0x01	; 1
// store the mac addr from an arp reply
// no len check here, you must first call eth_type_is_arp_and_my_ip
uint8_t client_store_gw_mac(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	ea 37       	cpi	r30, 0x7A	; 122
    1486:	f8 07       	cpc	r31, r24
    1488:	99 f7       	brne	.-26     	; 0x1470 <packetloop_icmp_tcp+0xc4>
    148a:	e2 eb       	ldi	r30, 0xB2	; 178
    148c:	f0 e0       	ldi	r31, 0x00	; 0
                }
                i++;
        }
        i=0;
        while(i<6){
                gwmacaddr[i]=buf[ETH_ARP_SRC_MAC_P +i];
    148e:	8e 89       	ldd	r24, Y+22	; 0x16
    1490:	81 93       	st	Z+, r24
    1492:	21 96       	adiw	r28, 0x01	; 1
                        return(0);
                }
                i++;
        }
        i=0;
        while(i<6){
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	e8 3b       	cpi	r30, 0xB8	; 184
    1498:	f9 07       	cpc	r31, r25
    149a:	c9 f7       	brne	.-14     	; 0x148e <packetloop_icmp_tcp+0xe2>
    149c:	5a c1       	rjmp	.+692    	; 0x1752 <packetloop_icmp_tcp+0x3a6>
#endif // NTP_client||UDP_client||TCP_client||PING_client
                return(0);

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
    149e:	c7 01       	movw	r24, r14
    14a0:	b6 01       	movw	r22, r12
    14a2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <eth_type_is_ip_and_my_ip>
    14a6:	88 23       	and	r24, r24
    14a8:	09 f4       	brne	.+2      	; 0x14ac <packetloop_icmp_tcp+0x100>
    14aa:	47 c1       	rjmp	.+654    	; 0x173a <packetloop_icmp_tcp+0x38e>
                return(0);
        }
        if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
    14ac:	d7 01       	movw	r26, r14
    14ae:	57 96       	adiw	r26, 0x17	; 23
    14b0:	9c 91       	ld	r25, X
    14b2:	57 97       	sbiw	r26, 0x17	; 23
    14b4:	91 30       	cpi	r25, 0x01	; 1
    14b6:	91 f4       	brne	.+36     	; 0x14dc <packetloop_icmp_tcp+0x130>
    14b8:	92 96       	adiw	r26, 0x22	; 34
    14ba:	8c 91       	ld	r24, X
    14bc:	88 30       	cpi	r24, 0x08	; 8
    14be:	71 f4       	brne	.+28     	; 0x14dc <packetloop_icmp_tcp+0x130>
                if (icmp_callback){
    14c0:	e0 91 b0 00 	lds	r30, 0x00B0
    14c4:	f0 91 b1 00 	lds	r31, 0x00B1
    14c8:	30 97       	sbiw	r30, 0x00	; 0
    14ca:	19 f0       	breq	.+6      	; 0x14d2 <packetloop_icmp_tcp+0x126>
                        (*icmp_callback)(&(buf[IP_SRC_P]));
    14cc:	c7 01       	movw	r24, r14
    14ce:	4a 96       	adiw	r24, 0x1a	; 26
    14d0:	09 95       	icall
                }
                // a ping packet, let's send pong
                make_echo_reply_from_request(buf,plen);
    14d2:	c7 01       	movw	r24, r14
    14d4:	b6 01       	movw	r22, r12
    14d6:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <make_echo_reply_from_request>
    14da:	2f c1       	rjmp	.+606    	; 0x173a <packetloop_icmp_tcp+0x38e>
                return(0);
        }
        if (plen<54 && buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
    14dc:	b6 e3       	ldi	r27, 0x36	; 54
    14de:	cb 16       	cp	r12, r27
    14e0:	d1 04       	cpc	r13, r1
    14e2:	18 f4       	brcc	.+6      	; 0x14ea <packetloop_icmp_tcp+0x13e>
    14e4:	96 30       	cpi	r25, 0x06	; 6
    14e6:	09 f0       	breq	.+2      	; 0x14ea <packetloop_icmp_tcp+0x13e>
    14e8:	28 c1       	rjmp	.+592    	; 0x173a <packetloop_icmp_tcp+0x38e>
                // smaller than the smallest TCP packet and not tcp port
                return(0);
        }
#if defined (TCP_client)
        // a message for the tcp client, tcp_client_state is zero if client was never used
        if ( buf[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H){
    14ea:	f7 01       	movw	r30, r14
    14ec:	94 a1       	ldd	r25, Z+36	; 0x24
    14ee:	9b 30       	cpi	r25, 0x0B	; 11
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <packetloop_icmp_tcp+0x148>
    14f2:	ce c0       	rjmp	.+412    	; 0x1690 <packetloop_icmp_tcp+0x2e4>
#if defined (WWW_client)
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
    14f4:	f0 92 93 00 	sts	0x0093, r15
    14f8:	e0 92 92 00 	sts	0x0092, r14
    14fc:	d7 01       	movw	r26, r14
    14fe:	ec e9       	ldi	r30, 0x9C	; 156
    1500:	f0 e0       	ldi	r31, 0x00	; 0

uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
        uint8_t i=0;
        while(i<4){
                if(buf[IP_SRC_P+i]!=ip[i]){
    1502:	5a 96       	adiw	r26, 0x1a	; 26
    1504:	9c 91       	ld	r25, X
    1506:	5a 97       	sbiw	r26, 0x1a	; 26
    1508:	80 81       	ld	r24, Z
    150a:	98 17       	cp	r25, r24
    150c:	09 f0       	breq	.+2      	; 0x1510 <packetloop_icmp_tcp+0x164>
    150e:	15 c1       	rjmp	.+554    	; 0x173a <packetloop_icmp_tcp+0x38e>
    1510:	11 96       	adiw	r26, 0x01	; 1
    1512:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
        uint8_t i=0;
        while(i<4){
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	e0 3a       	cpi	r30, 0xA0	; 160
    1518:	f8 07       	cpc	r31, r24
    151a:	99 f7       	brne	.-26     	; 0x1502 <packetloop_icmp_tcp+0x156>
    151c:	1e c1       	rjmp	.+572    	; 0x175a <packetloop_icmp_tcp+0x3ae>
                if (check_ip_message_is_from(buf,tcpsrvip)==0){
                        return(0);
                }
                // if we get a reset:
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_RST_V){
                        if (client_tcp_result_callback){
    151e:	e0 91 a0 00 	lds	r30, 0x00A0
    1522:	f0 91 a1 00 	lds	r31, 0x00A1
    1526:	30 97       	sbiw	r30, 0x00	; 0
    1528:	09 f4       	brne	.+2      	; 0x152c <packetloop_icmp_tcp+0x180>
    152a:	a7 c0       	rjmp	.+334    	; 0x167a <packetloop_icmp_tcp+0x2ce>
                                // parameters in client_tcp_result_callback: fd, status, buf_start, len
                                (*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
    152c:	d7 01       	movw	r26, r14
    152e:	95 96       	adiw	r26, 0x25	; 37
    1530:	8c 91       	ld	r24, X
    1532:	82 95       	swap	r24
    1534:	86 95       	lsr	r24
    1536:	87 70       	andi	r24, 0x07	; 7
    1538:	63 e0       	ldi	r22, 0x03	; 3
    153a:	40 e0       	ldi	r20, 0x00	; 0
    153c:	50 e0       	ldi	r21, 0x00	; 0
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	09 95       	icall
    1544:	9a c0       	rjmp	.+308    	; 0x167a <packetloop_icmp_tcp+0x2ce>

// do some basic length calculations 
uint16_t get_tcp_data_len(uint8_t *buf)
{
        int16_t i;
        i=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
    1546:	f7 01       	movw	r30, r14
    1548:	90 89       	ldd	r25, Z+16	; 0x10
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	21 89       	ldd	r18, Z+17	; 0x11
    154e:	02 2f       	mov	r16, r18
    1550:	10 e0       	ldi	r17, 0x00	; 0
    1552:	08 2b       	or	r16, r24
    1554:	19 2b       	or	r17, r25
        i-=IP_HEADER_LEN;
    1556:	26 a5       	ldd	r18, Z+46	; 0x2e
    1558:	82 2f       	mov	r24, r18
    155a:	82 95       	swap	r24
    155c:	8f 70       	andi	r24, 0x0F	; 15
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	08 1b       	sub	r16, r24
    156a:	19 0b       	sbc	r17, r25
        i-=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
    156c:	04 51       	subi	r16, 0x14	; 20
    156e:	10 40       	sbci	r17, 0x00	; 0
    1570:	17 ff       	sbrs	r17, 7
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <packetloop_icmp_tcp+0x1cc>
    1574:	00 e0       	ldi	r16, 0x00	; 0
    1576:	10 e0       	ldi	r17, 0x00	; 0
        if (i<=0){
                i=0;
        }
        return((uint16_t)i);
    1578:	e8 01       	movw	r28, r16
                        }
                        tcp_client_state=5;
                        return(0);
                }
                len=get_tcp_data_len(buf);
                if (tcp_client_state==2){
    157a:	80 91 8e 00 	lds	r24, 0x008E
    157e:	82 30       	cpi	r24, 0x02	; 2
    1580:	b1 f5       	brne	.+108    	; 0x15ee <packetloop_icmp_tcp+0x242>
                        if ((buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (buf[TCP_FLAGS_P] &TCP_FLAGS_ACK_V)){
    1582:	31 ff       	sbrs	r19, 1
    1584:	24 c0       	rjmp	.+72     	; 0x15ce <packetloop_icmp_tcp+0x222>
    1586:	34 ff       	sbrs	r19, 4
    1588:	22 c0       	rjmp	.+68     	; 0x15ce <packetloop_icmp_tcp+0x222>
                                // synack, answer with ack
                                make_tcp_ack_from_any(buf,0,0);
    158a:	c7 01       	movw	r24, r14
    158c:	60 e0       	ldi	r22, 0x00	; 0
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	40 e0       	ldi	r20, 0x00	; 0
    1592:	0e 94 f2 06 	call	0xde4	; 0xde4 <make_tcp_ack_from_any>
                                buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
    1596:	88 e1       	ldi	r24, 0x18	; 24
    1598:	d7 01       	movw	r26, r14
    159a:	9f 96       	adiw	r26, 0x2f	; 47
    159c:	8c 93       	st	X, r24

                                // Make a tcp message with data. When calling this function we must
                                // still have a valid tcp-ack in the buffer. In other words
                                // you have just called make_tcp_ack_from_any(buf,0).
                                if (client_tcp_datafill_callback){
    159e:	e0 91 a2 00 	lds	r30, 0x00A2
    15a2:	f0 91 a3 00 	lds	r31, 0x00A3
    15a6:	30 97       	sbiw	r30, 0x00	; 0
    15a8:	19 f4       	brne	.+6      	; 0x15b0 <packetloop_icmp_tcp+0x204>
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	08 c0       	rjmp	.+16     	; 0x15c0 <packetloop_icmp_tcp+0x214>
                                        // in this case it is src port because the above 
                                        // make_tcp_ack_from_any swaps the dst and src port:
                                        len=(*client_tcp_datafill_callback)((buf[TCP_SRC_PORT_L_P]>>5)&0x7);
    15b0:	d7 01       	movw	r26, r14
    15b2:	93 96       	adiw	r26, 0x23	; 35
    15b4:	8c 91       	ld	r24, X
    15b6:	82 95       	swap	r24
    15b8:	86 95       	lsr	r24
    15ba:	87 70       	andi	r24, 0x07	; 7
    15bc:	09 95       	icall
    15be:	bc 01       	movw	r22, r24
                                }else{
                                        // this is just to prevent a crash
                                        len=0;
                                }
                                tcp_client_state=3;
    15c0:	83 e0       	ldi	r24, 0x03	; 3
    15c2:	80 93 8e 00 	sts	0x008E, r24
                                make_tcp_ack_with_data_noflags(buf,len);
    15c6:	c7 01       	movw	r24, r14
    15c8:	0e 94 29 07 	call	0xe52	; 0xe52 <make_tcp_ack_with_data_noflags>
    15cc:	b6 c0       	rjmp	.+364    	; 0x173a <packetloop_icmp_tcp+0x38e>
                        }else{
                                // reset only if we have sent a syn and don't get syn-ack back.
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	80 93 8e 00 	sts	0x008E, r24
                                // do not inform application layer as we retry.
                                len++;
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    15d4:	f7 01       	movw	r30, r14
    15d6:	87 a5       	ldd	r24, Z+47	; 0x2f
    15d8:	84 ff       	sbrs	r24, 4
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <packetloop_icmp_tcp+0x236>
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	03 c0       	rjmp	.+6      	; 0x15e8 <packetloop_icmp_tcp+0x23c>
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
                                // do not inform application layer as we retry.
                                len++;
    15e2:	b8 01       	movw	r22, r16
    15e4:	6f 5f       	subi	r22, 0xFF	; 255
    15e6:	7f 4f       	sbci	r23, 0xFF	; 255
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
                                        // if packet was an ack then do not step the ack number
                                        len=0;
                                }
                                // refuse and reset the connection
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
    15e8:	c7 01       	movw	r24, r14
    15ea:	44 e0       	ldi	r20, 0x04	; 4
    15ec:	91 c0       	rjmp	.+290    	; 0x1710 <packetloop_icmp_tcp+0x364>
                                return(0);
                        }
                }
                // in tcp_client_state==3 we will normally first get an empty
                // ack-packet and then a ack-packet with data.
                if (tcp_client_state==3 && len>0){ 
    15ee:	83 30       	cpi	r24, 0x03	; 3
    15f0:	a1 f5       	brne	.+104    	; 0x165a <packetloop_icmp_tcp+0x2ae>
    15f2:	01 15       	cp	r16, r1
    15f4:	11 05       	cpc	r17, r1
    15f6:	89 f1       	breq	.+98     	; 0x165a <packetloop_icmp_tcp+0x2ae>
                        // our first real data packet
                        tcp_client_state=4;
    15f8:	84 e0       	ldi	r24, 0x04	; 4
    15fa:	80 93 8e 00 	sts	0x008E, r24
                        // return the data we received
                        if (client_tcp_result_callback){
    15fe:	e0 91 a0 00 	lds	r30, 0x00A0
    1602:	f0 91 a1 00 	lds	r31, 0x00A1
    1606:	30 97       	sbiw	r30, 0x00	; 0
    1608:	41 f1       	breq	.+80     	; 0x165a <packetloop_icmp_tcp+0x2ae>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
    160a:	d7 01       	movw	r26, r14
    160c:	9e 96       	adiw	r26, 0x2e	; 46
    160e:	8c 91       	ld	r24, X
    1610:	82 95       	swap	r24
    1612:	8f 70       	andi	r24, 0x0F	; 15
    1614:	48 2f       	mov	r20, r24
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	44 0f       	add	r20, r20
    161a:	55 1f       	adc	r21, r21
    161c:	44 0f       	add	r20, r20
    161e:	55 1f       	adc	r21, r21
    1620:	c6 01       	movw	r24, r12
    1622:	08 97       	sbiw	r24, 0x08	; 8
    1624:	4e 5d       	subi	r20, 0xDE	; 222
    1626:	5f 4f       	sbci	r21, 0xFF	; 255
    1628:	84 17       	cp	r24, r20
    162a:	95 07       	cpc	r25, r21
    162c:	08 f4       	brcc	.+2      	; 0x1630 <packetloop_icmp_tcp+0x284>
    162e:	ac 01       	movw	r20, r24
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
                                        tcpstart=plen-8; // dummy but save
                                }
                                save_len=len;
                                if (tcpstart+len>plen){
    1630:	c8 01       	movw	r24, r16
    1632:	84 0f       	add	r24, r20
    1634:	95 1f       	adc	r25, r21
    1636:	c8 16       	cp	r12, r24
    1638:	d9 06       	cpc	r13, r25
    163a:	10 f0       	brcs	.+4      	; 0x1640 <packetloop_icmp_tcp+0x294>
    163c:	98 01       	movw	r18, r16
    163e:	03 c0       	rjmp	.+6      	; 0x1646 <packetloop_icmp_tcp+0x29a>
                                        save_len=plen-tcpstart;
    1640:	96 01       	movw	r18, r12
    1642:	24 1b       	sub	r18, r20
    1644:	35 0b       	sbc	r19, r21
                                }
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
    1646:	d7 01       	movw	r26, r14
    1648:	95 96       	adiw	r26, 0x25	; 37
    164a:	8c 91       	ld	r24, X
    164c:	82 95       	swap	r24
    164e:	86 95       	lsr	r24
    1650:	87 70       	andi	r24, 0x07	; 7
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	09 95       	icall
                        }
                        if (send_fin){
    1656:	88 23       	and	r24, r24
    1658:	59 f4       	brne	.+22     	; 0x1670 <packetloop_icmp_tcp+0x2c4>
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
                                tcp_client_state=5;
                                return(0);
                        }
                }
                if(tcp_client_state==5){
    165a:	80 91 8e 00 	lds	r24, 0x008E
    165e:	85 30       	cpi	r24, 0x05	; 5
    1660:	09 f4       	brne	.+2      	; 0x1664 <packetloop_icmp_tcp+0x2b8>
    1662:	6b c0       	rjmp	.+214    	; 0x173a <packetloop_icmp_tcp+0x38e>
                        // no more ack
                        return(0);
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    1664:	f7 01       	movw	r30, r14
    1666:	87 a5       	ldd	r24, Z+47	; 0x2f
    1668:	80 ff       	sbrs	r24, 0
    166a:	0b c0       	rjmp	.+22     	; 0x1682 <packetloop_icmp_tcp+0x2d6>
                        make_tcp_ack_from_any(buf,len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    166c:	0f 5f       	subi	r16, 0xFF	; 255
    166e:	1f 4f       	sbci	r17, 0xFF	; 255
    1670:	c7 01       	movw	r24, r14
    1672:	b8 01       	movw	r22, r16
    1674:	49 e0       	ldi	r20, 0x09	; 9
    1676:	0e 94 f2 06 	call	0xde4	; 0xde4 <make_tcp_ack_from_any>
                        tcp_client_state=5; // connection terminated
    167a:	85 e0       	ldi	r24, 0x05	; 5
    167c:	80 93 8e 00 	sts	0x008E, r24
    1680:	5c c0       	rjmp	.+184    	; 0x173a <packetloop_icmp_tcp+0x38e>
                        return(0);
                }
                // ack all data (the web page may be long):
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
    1682:	01 15       	cp	r16, r1
    1684:	11 05       	cpc	r17, r1
    1686:	09 f4       	brne	.+2      	; 0x168a <packetloop_icmp_tcp+0x2de>
    1688:	5a c0       	rjmp	.+180    	; 0x173e <packetloop_icmp_tcp+0x392>
                        make_tcp_ack_from_any(buf,len,0);
    168a:	c7 01       	movw	r24, r14
    168c:	b8 01       	movw	r22, r16
    168e:	3f c0       	rjmp	.+126    	; 0x170e <packetloop_icmp_tcp+0x362>
                return(0);
        }
#endif // WWW_client||TCP_client
        //
        // tcp port web server start
        if (buf[TCP_DST_PORT_H_P]==wwwport_h && buf[TCP_DST_PORT_L_P]==wwwport_l){
    1690:	80 91 94 00 	lds	r24, 0x0094
    1694:	98 17       	cp	r25, r24
    1696:	09 f0       	breq	.+2      	; 0x169a <packetloop_icmp_tcp+0x2ee>
    1698:	50 c0       	rjmp	.+160    	; 0x173a <packetloop_icmp_tcp+0x38e>
    169a:	d7 01       	movw	r26, r14
    169c:	95 96       	adiw	r26, 0x25	; 37
    169e:	9c 91       	ld	r25, X
    16a0:	95 97       	sbiw	r26, 0x25	; 37
    16a2:	80 91 81 00 	lds	r24, 0x0081
    16a6:	98 17       	cp	r25, r24
    16a8:	09 f0       	breq	.+2      	; 0x16ac <packetloop_icmp_tcp+0x300>
    16aa:	47 c0       	rjmp	.+142    	; 0x173a <packetloop_icmp_tcp+0x38e>
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
    16ac:	9f 96       	adiw	r26, 0x2f	; 47
    16ae:	8c 91       	ld	r24, X
    16b0:	81 ff       	sbrs	r24, 1
    16b2:	04 c0       	rjmp	.+8      	; 0x16bc <packetloop_icmp_tcp+0x310>
                        make_tcp_synack_from_syn(buf);
    16b4:	c7 01       	movw	r24, r14
    16b6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <make_tcp_synack_from_syn>
    16ba:	3f c0       	rjmp	.+126    	; 0x173a <packetloop_icmp_tcp+0x38e>
                        // make_tcp_synack_from_syn does already send the syn,ack
                        return(0);
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    16bc:	84 ff       	sbrs	r24, 4
    16be:	3d c0       	rjmp	.+122    	; 0x173a <packetloop_icmp_tcp+0x38e>

// do some basic length calculations 
uint16_t get_tcp_data_len(uint8_t *buf)
{
        int16_t i;
        i=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
    16c0:	f7 01       	movw	r30, r14
    16c2:	90 89       	ldd	r25, Z+16	; 0x10
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	21 89       	ldd	r18, Z+17	; 0x11
    16c8:	42 2f       	mov	r20, r18
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	48 2b       	or	r20, r24
    16ce:	59 2b       	or	r21, r25
        i-=IP_HEADER_LEN;
    16d0:	26 a5       	ldd	r18, Z+46	; 0x2e
    16d2:	82 2f       	mov	r24, r18
    16d4:	82 95       	swap	r24
    16d6:	8f 70       	andi	r24, 0x0F	; 15
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	48 1b       	sub	r20, r24
    16e4:	59 0b       	sbc	r21, r25
        i-=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
    16e6:	44 51       	subi	r20, 0x14	; 20
    16e8:	50 40       	sbci	r21, 0x00	; 0
        if (i<=0){
                i=0;
        }
        return((uint16_t)i);
    16ea:	57 ff       	sbrs	r21, 7
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <packetloop_icmp_tcp+0x346>
    16ee:	40 e0       	ldi	r20, 0x00	; 0
    16f0:	50 e0       	ldi	r21, 0x00	; 0
                        make_tcp_synack_from_syn(buf);
                        // make_tcp_synack_from_syn does already send the syn,ack
                        return(0);
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
                        info_data_len=get_tcp_data_len(buf);
    16f2:	50 93 96 00 	sts	0x0096, r21
    16f6:	40 93 95 00 	sts	0x0095, r20
                        // we can possibly have no data, just ack:
                        // Here we misuse plen for something else to save a variable.
                        // plen is now the position of start of the tcp user data.
                        if (info_data_len==0){
    16fa:	45 2b       	or	r20, r21
    16fc:	61 f4       	brne	.+24     	; 0x1716 <packetloop_icmp_tcp+0x36a>
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    16fe:	d7 01       	movw	r26, r14
    1700:	9f 96       	adiw	r26, 0x2f	; 47
    1702:	8c 91       	ld	r24, X
    1704:	80 ff       	sbrs	r24, 0
    1706:	19 c0       	rjmp	.+50     	; 0x173a <packetloop_icmp_tcp+0x38e>
                                        // finack, answer with ack
                                        make_tcp_ack_from_any(buf,0,0);
    1708:	c7 01       	movw	r24, r14
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	0e 94 f2 06 	call	0xde4	; 0xde4 <make_tcp_ack_from_any>
    1714:	12 c0       	rjmp	.+36     	; 0x173a <packetloop_icmp_tcp+0x38e>
                                }
                                // just an ack with no data, wait for next packet
                                return(0);
                        }
                        // Here we misuse len for something else to save a variable
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
    1716:	f7 01       	movw	r30, r14
    1718:	86 a5       	ldd	r24, Z+46	; 0x2e
    171a:	82 95       	swap	r24
    171c:	8f 70       	andi	r24, 0x0F	; 15
    171e:	c8 2f       	mov	r28, r24
    1720:	d0 e0       	ldi	r29, 0x00	; 0
    1722:	cc 0f       	add	r28, r28
    1724:	dd 1f       	adc	r29, r29
    1726:	cc 0f       	add	r28, r28
    1728:	dd 1f       	adc	r29, r29
    172a:	a2 96       	adiw	r28, 0x22	; 34
                        // check for data corruption
                        if (len>plen-8){
    172c:	88 ef       	ldi	r24, 0xF8	; 248
    172e:	9f ef       	ldi	r25, 0xFF	; 255
    1730:	c8 0e       	add	r12, r24
    1732:	d9 1e       	adc	r13, r25
    1734:	cc 16       	cp	r12, r28
    1736:	dd 06       	cpc	r13, r29
    1738:	10 f4       	brcc	.+4      	; 0x173e <packetloop_icmp_tcp+0x392>
    173a:	c0 e0       	ldi	r28, 0x00	; 0
    173c:	d0 e0       	ldi	r29, 0x00	; 0
                        }
                        return(len);
                }
        }
        return(0);
}
    173e:	ce 01       	movw	r24, r28
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	1f 91       	pop	r17
    1746:	0f 91       	pop	r16
    1748:	ff 90       	pop	r15
    174a:	ef 90       	pop	r14
    174c:	df 90       	pop	r13
    174e:	cf 90       	pop	r12
    1750:	08 95       	ret
                }
#if defined (NTP_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
                if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
                        // is it an arp reply 
                        if (client_store_gw_mac(buf)){
                                waitgwmac=WGW_HAVE_GW_MAC;
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	80 93 8d 00 	sts	0x008D, r24
    1758:	f0 cf       	rjmp	.-32     	; 0x173a <packetloop_icmp_tcp+0x38e>
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcpsrvip)==0){
                        return(0);
                }
                // if we get a reset:
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_RST_V){
    175a:	d7 01       	movw	r26, r14
    175c:	9f 96       	adiw	r26, 0x2f	; 47
    175e:	8c 91       	ld	r24, X
    1760:	38 2f       	mov	r19, r24
    1762:	82 fd       	sbrc	r24, 2
    1764:	dc ce       	rjmp	.-584    	; 0x151e <packetloop_icmp_tcp+0x172>
    1766:	ef ce       	rjmp	.-546    	; 0x1546 <packetloop_icmp_tcp+0x19a>

00001768 <find_key_val>:
//
// The returned value is stored in strbuf. You must allocate
// enough storage for strbuf, maxlen is the size of strbuf.
// I.e the value it is declated with: strbuf[5]-> maxlen=5
uint8_t find_key_val(char *str,char *strbuf, uint8_t maxlen,char *key)
{
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	dc 01       	movw	r26, r24
    176e:	eb 01       	movw	r28, r22
    1770:	72 2f       	mov	r23, r18
    1772:	63 2f       	mov	r22, r19
    1774:	82 2f       	mov	r24, r18
    1776:	93 2f       	mov	r25, r19
    1778:	9c 01       	movw	r18, r24
    177a:	f9 01       	movw	r30, r18
    177c:	50 e0       	ldi	r21, 0x00	; 0
    177e:	16 c0       	rjmp	.+44     	; 0x17ac <find_key_val+0x44>
        uint8_t found=0;
        uint8_t i=0;
        char *kp;
        kp=key;
        while(*str &&  *str!=' ' && *str!='\n' && found==0){
                if (*str == *kp){
    1780:	80 81       	ld	r24, Z
    1782:	98 17       	cp	r25, r24
    1784:	71 f4       	brne	.+28     	; 0x17a2 <find_key_val+0x3a>
                        kp++;
    1786:	31 96       	adiw	r30, 0x01	; 1
                        if (*kp == '\0'){
    1788:	80 81       	ld	r24, Z
    178a:	88 23       	and	r24, r24
    178c:	71 f4       	brne	.+28     	; 0x17aa <find_key_val+0x42>
                                str++;
    178e:	11 96       	adiw	r26, 0x01	; 1
                                kp=key;
                                if (*str == '='){
    1790:	8c 91       	ld	r24, X
    1792:	8d 33       	cpi	r24, 0x3D	; 61
    1794:	31 f4       	brne	.+12     	; 0x17a2 <find_key_val+0x3a>
    1796:	87 2f       	mov	r24, r23
    1798:	96 2f       	mov	r25, r22
    179a:	9c 01       	movw	r18, r24
    179c:	f9 01       	movw	r30, r18
    179e:	51 e0       	ldi	r21, 0x01	; 1
    17a0:	04 c0       	rjmp	.+8      	; 0x17aa <find_key_val+0x42>
    17a2:	87 2f       	mov	r24, r23
    17a4:	96 2f       	mov	r25, r22
    17a6:	9c 01       	movw	r18, r24
    17a8:	f9 01       	movw	r30, r18
                                }
                        }
                }else{
                        kp=key;
                }
                str++;
    17aa:	11 96       	adiw	r26, 0x01	; 1
{
        uint8_t found=0;
        uint8_t i=0;
        char *kp;
        kp=key;
        while(*str &&  *str!=' ' && *str!='\n' && found==0){
    17ac:	9c 91       	ld	r25, X
    17ae:	99 23       	and	r25, r25
    17b0:	39 f0       	breq	.+14     	; 0x17c0 <find_key_val+0x58>
    17b2:	90 32       	cpi	r25, 0x20	; 32
    17b4:	29 f0       	breq	.+10     	; 0x17c0 <find_key_val+0x58>
    17b6:	9a 30       	cpi	r25, 0x0A	; 10
    17b8:	19 f0       	breq	.+6      	; 0x17c0 <find_key_val+0x58>
    17ba:	55 23       	and	r21, r21
    17bc:	09 f3       	breq	.-62     	; 0x1780 <find_key_val+0x18>
    17be:	04 c0       	rjmp	.+8      	; 0x17c8 <find_key_val+0x60>
                }else{
                        kp=key;
                }
                str++;
        }
        if (found==1){
    17c0:	51 30       	cpi	r21, 0x01	; 1
    17c2:	11 f0       	breq	.+4      	; 0x17c8 <find_key_val+0x60>
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	18 c0       	rjmp	.+48     	; 0x17f8 <find_key_val+0x90>
    17c8:	6a 2f       	mov	r22, r26
                // copy the value to a buffer and terminate it with '\0'
                while(*str &&  *str!=' ' && *str!='\n' && *str!='&' && i<maxlen-1){
    17ca:	50 e0       	ldi	r21, 0x00	; 0
    17cc:	41 50       	subi	r20, 0x01	; 1
    17ce:	50 40       	sbci	r21, 0x00	; 0
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <find_key_val+0x6e>
                        *strbuf=*str;
    17d2:	29 93       	st	Y+, r18
                        i++;
                        str++;
    17d4:	11 96       	adiw	r26, 0x01	; 1
                        strbuf++;
    17d6:	3a 2f       	mov	r19, r26
    17d8:	36 1b       	sub	r19, r22
                }
                str++;
        }
        if (found==1){
                // copy the value to a buffer and terminate it with '\0'
                while(*str &&  *str!=' ' && *str!='\n' && *str!='&' && i<maxlen-1){
    17da:	2c 91       	ld	r18, X
    17dc:	22 23       	and	r18, r18
    17de:	59 f0       	breq	.+22     	; 0x17f6 <find_key_val+0x8e>
    17e0:	20 32       	cpi	r18, 0x20	; 32
    17e2:	49 f0       	breq	.+18     	; 0x17f6 <find_key_val+0x8e>
    17e4:	2a 30       	cpi	r18, 0x0A	; 10
    17e6:	39 f0       	breq	.+14     	; 0x17f6 <find_key_val+0x8e>
    17e8:	26 32       	cpi	r18, 0x26	; 38
    17ea:	29 f0       	breq	.+10     	; 0x17f6 <find_key_val+0x8e>
    17ec:	83 2f       	mov	r24, r19
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	84 17       	cp	r24, r20
    17f2:	95 07       	cpc	r25, r21
    17f4:	74 f3       	brlt	.-36     	; 0x17d2 <find_key_val+0x6a>
                        *strbuf=*str;
                        i++;
                        str++;
                        strbuf++;
                }
                *strbuf='\0';
    17f6:	18 82       	st	Y, r1
        }
        // return the length of the value
        return(i);
}
    17f8:	83 2f       	mov	r24, r19
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	08 95       	ret

00001800 <h2int>:

// convert a single hex digit character to its integer value
unsigned char h2int(char c)
{
    1800:	98 2f       	mov	r25, r24
        if (c >= '0' && c <='9'){
    1802:	80 53       	subi	r24, 0x30	; 48
    1804:	8a 30       	cpi	r24, 0x0A	; 10
    1806:	68 f0       	brcs	.+26     	; 0x1822 <h2int+0x22>
                return((unsigned char)c - '0');
        }
        if (c >= 'a' && c <='f'){
    1808:	81 53       	subi	r24, 0x31	; 49
    180a:	86 30       	cpi	r24, 0x06	; 6
    180c:	10 f4       	brcc	.+4      	; 0x1812 <h2int+0x12>
                return((unsigned char)c - 'a' + 10);
    180e:	86 5f       	subi	r24, 0xF6	; 246
    1810:	08 95       	ret
        }
        if (c >= 'A' && c <='F'){
    1812:	89 2f       	mov	r24, r25
    1814:	81 54       	subi	r24, 0x41	; 65
    1816:	86 30       	cpi	r24, 0x06	; 6
    1818:	10 f0       	brcs	.+4      	; 0x181e <h2int+0x1e>
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	08 95       	ret
                return((unsigned char)c - 'A' + 10);
    181e:	89 2f       	mov	r24, r25
    1820:	87 53       	subi	r24, 0x37	; 55
        }
        return(0);
}
    1822:	08 95       	ret

00001824 <urldecode>:

// decode a url string e.g "hello%20joe" or "hello+joe" becomes "hello joe"
void urldecode(char *urlbuf)
{
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	fc 01       	movw	r30, r24
    182a:	ec 01       	movw	r28, r24
    182c:	37 c0       	rjmp	.+110    	; 0x189c <urldecode+0x78>
        char c;
        char *dst;
        dst=urlbuf;
        while ((c = *urlbuf)) {
                if (c == '+') c = ' ';
    182e:	8b 32       	cpi	r24, 0x2B	; 43
    1830:	11 f4       	brne	.+4      	; 0x1836 <urldecode+0x12>
    1832:	80 e2       	ldi	r24, 0x20	; 32
    1834:	31 c0       	rjmp	.+98     	; 0x1898 <urldecode+0x74>
                if (c == '%') {
    1836:	85 32       	cpi	r24, 0x25	; 37
    1838:	79 f5       	brne	.+94     	; 0x1898 <urldecode+0x74>
                        urlbuf++;
    183a:	df 01       	movw	r26, r30
    183c:	11 96       	adiw	r26, 0x01	; 1
                        c = *urlbuf;
    183e:	91 81       	ldd	r25, Z+1	; 0x01
                        urlbuf++;
    1840:	fd 01       	movw	r30, r26
    1842:	31 96       	adiw	r30, 0x01	; 1
}

// convert a single hex digit character to its integer value
unsigned char h2int(char c)
{
        if (c >= '0' && c <='9'){
    1844:	39 2f       	mov	r19, r25
    1846:	30 53       	subi	r19, 0x30	; 48
    1848:	3a 30       	cpi	r19, 0x0A	; 10
    184a:	70 f0       	brcs	.+28     	; 0x1868 <urldecode+0x44>
                return((unsigned char)c - '0');
        }
        if (c >= 'a' && c <='f'){
    184c:	89 2f       	mov	r24, r25
    184e:	81 56       	subi	r24, 0x61	; 97
    1850:	86 30       	cpi	r24, 0x06	; 6
    1852:	10 f4       	brcc	.+4      	; 0x1858 <urldecode+0x34>
                return((unsigned char)c - 'a' + 10);
    1854:	37 52       	subi	r19, 0x27	; 39
    1856:	08 c0       	rjmp	.+16     	; 0x1868 <urldecode+0x44>
        }
        if (c >= 'A' && c <='F'){
    1858:	89 2f       	mov	r24, r25
    185a:	81 54       	subi	r24, 0x41	; 65
    185c:	86 30       	cpi	r24, 0x06	; 6
    185e:	10 f0       	brcs	.+4      	; 0x1864 <urldecode+0x40>
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <urldecode+0x44>
                return((unsigned char)c - 'A' + 10);
    1864:	39 2f       	mov	r19, r25
    1866:	37 53       	subi	r19, 0x37	; 55
                if (c == '+') c = ' ';
                if (c == '%') {
                        urlbuf++;
                        c = *urlbuf;
                        urlbuf++;
                        c = (h2int(c) << 4) | h2int(*urlbuf);
    1868:	11 96       	adiw	r26, 0x01	; 1
    186a:	2c 91       	ld	r18, X
}

// convert a single hex digit character to its integer value
unsigned char h2int(char c)
{
        if (c >= '0' && c <='9'){
    186c:	92 2f       	mov	r25, r18
    186e:	90 53       	subi	r25, 0x30	; 48
    1870:	9a 30       	cpi	r25, 0x0A	; 10
    1872:	70 f0       	brcs	.+28     	; 0x1890 <urldecode+0x6c>
                return((unsigned char)c - '0');
        }
        if (c >= 'a' && c <='f'){
    1874:	82 2f       	mov	r24, r18
    1876:	81 56       	subi	r24, 0x61	; 97
    1878:	86 30       	cpi	r24, 0x06	; 6
    187a:	10 f4       	brcc	.+4      	; 0x1880 <urldecode+0x5c>
                return((unsigned char)c - 'a' + 10);
    187c:	97 52       	subi	r25, 0x27	; 39
    187e:	08 c0       	rjmp	.+16     	; 0x1890 <urldecode+0x6c>
        }
        if (c >= 'A' && c <='F'){
    1880:	82 2f       	mov	r24, r18
    1882:	81 54       	subi	r24, 0x41	; 65
    1884:	86 30       	cpi	r24, 0x06	; 6
    1886:	10 f0       	brcs	.+4      	; 0x188c <urldecode+0x68>
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <urldecode+0x6c>
                return((unsigned char)c - 'A' + 10);
    188c:	92 2f       	mov	r25, r18
    188e:	97 53       	subi	r25, 0x37	; 55
                if (c == '+') c = ' ';
                if (c == '%') {
                        urlbuf++;
                        c = *urlbuf;
                        urlbuf++;
                        c = (h2int(c) << 4) | h2int(*urlbuf);
    1890:	83 2f       	mov	r24, r19
    1892:	82 95       	swap	r24
    1894:	80 7f       	andi	r24, 0xF0	; 240
    1896:	89 2b       	or	r24, r25
                }
                *dst = c;
    1898:	89 93       	st	Y+, r24
                dst++;
                urlbuf++;
    189a:	31 96       	adiw	r30, 0x01	; 1
void urldecode(char *urlbuf)
{
        char c;
        char *dst;
        dst=urlbuf;
        while ((c = *urlbuf)) {
    189c:	80 81       	ld	r24, Z
    189e:	88 23       	and	r24, r24
    18a0:	31 f6       	brne	.-116    	; 0x182e <urldecode+0xa>
                }
                *dst = c;
                dst++;
                urlbuf++;
        }
        *dst = '\0';
    18a2:	18 82       	st	Y, r1
}
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	08 95       	ret

000018aa <int2h>:
#ifdef URLENCODE_websrv_help

// convert a single character to a 2 digit hex str
// a terminating '\0' is added
void int2h(char c, char *hstr)
{
    18aa:	38 2f       	mov	r19, r24
    18ac:	fb 01       	movw	r30, r22
        hstr[1]=(c & 0xf)+'0';
    18ae:	28 2f       	mov	r18, r24
    18b0:	2f 70       	andi	r18, 0x0F	; 15
    18b2:	20 5d       	subi	r18, 0xD0	; 208
    18b4:	21 83       	std	Z+1, r18	; 0x01
    18b6:	20 53       	subi	r18, 0x30	; 48
        if ((c & 0xf) >9){
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	8f 70       	andi	r24, 0x0F	; 15
    18bc:	90 70       	andi	r25, 0x00	; 0
    18be:	0a 97       	sbiw	r24, 0x0a	; 10
    18c0:	14 f0       	brlt	.+4      	; 0x18c6 <int2h+0x1c>
                hstr[1]=(c & 0xf) - 10 + 'a';
    18c2:	29 5a       	subi	r18, 0xA9	; 169
    18c4:	21 83       	std	Z+1, r18	; 0x01
        }
        c=(c>>4)&0xf;
    18c6:	83 2f       	mov	r24, r19
    18c8:	82 95       	swap	r24
    18ca:	8f 70       	andi	r24, 0x0F	; 15
        hstr[0]=c+'0';
    18cc:	80 5d       	subi	r24, 0xD0	; 208
    18ce:	80 83       	st	Z, r24
    18d0:	80 53       	subi	r24, 0x30	; 48
        if (c > 9){
    18d2:	8a 30       	cpi	r24, 0x0A	; 10
    18d4:	10 f0       	brcs	.+4      	; 0x18da <int2h+0x30>
                hstr[0]=c - 10 + 'a';
    18d6:	89 5a       	subi	r24, 0xA9	; 169
    18d8:	80 83       	st	Z, r24
        }
        hstr[2]='\0';
    18da:	12 82       	std	Z+2, r1	; 0x02
}
    18dc:	08 95       	ret

000018de <dnslkup_haveanswer>:


uint8_t dnslkup_haveanswer(void)
{       
        return(haveDNSanswer);
}
    18de:	80 91 8c 00 	lds	r24, 0x008C
    18e2:	08 95       	ret

000018e4 <dnslkup_get_error_info>:

uint8_t dnslkup_get_error_info(void)
{       
        return(dns_ansError);
}
    18e4:	80 91 8b 00 	lds	r24, 0x008B
    18e8:	08 95       	ret

000018ea <dnslkup_getip>:

uint8_t *dnslkup_getip(void)
{       
        return(dns_answerip);
}
    18ea:	82 ec       	ldi	r24, 0xC2	; 194
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	08 95       	ret

000018f0 <dnslkup_request>:
// send a DNS udp request packet
// See http://www.ietf.org/rfc/rfc1034.txt 
// and http://www.ietf.org/rfc/rfc1035.txt
//
void dnslkup_request(uint8_t *buf,const prog_char *progmem_hostname)
{
    18f0:	ef 92       	push	r14
    18f2:	ff 92       	push	r15
    18f4:	1f 93       	push	r17
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	ec 01       	movw	r28, r24
    18fc:	7b 01       	movw	r14, r22
        uint8_t i,lenpos,lencnt;
        char c;
        haveDNSanswer=0;
    18fe:	10 92 8c 00 	sts	0x008C, r1
        dns_ansError=0;
    1902:	10 92 8b 00 	sts	0x008B, r1
        dnstid_l++; // increment for next request, finally wrap
    1906:	10 91 8a 00 	lds	r17, 0x008A
    190a:	1f 5f       	subi	r17, 0xFF	; 255
    190c:	10 93 8a 00 	sts	0x008A, r17
        send_udp_prepare(buf,(DNSCLIENT_SRC_PORT_H<<8)|(dnstid_l&0xff),dnsip,53);
    1910:	61 2f       	mov	r22, r17
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	70 6e       	ori	r23, 0xE0	; 224
    1916:	4a e7       	ldi	r20, 0x7A	; 122
    1918:	50 e0       	ldi	r21, 0x00	; 0
    191a:	25 e3       	ldi	r18, 0x35	; 53
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	0e 94 76 07 	call	0xeec	; 0xeec <send_udp_prepare>
        // fill tid:
        //buf[UDP_DATA_P] see below
        buf[UDP_DATA_P+1]=dnstid_l;
    1922:	1b a7       	std	Y+43, r17	; 0x2b
        buf[UDP_DATA_P+2]=1; // flags, standard recursive query
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	8c a7       	std	Y+44, r24	; 0x2c
    1928:	fe 01       	movw	r30, r28
    192a:	bd 96       	adiw	r30, 0x2d	; 45
    192c:	83 e0       	ldi	r24, 0x03	; 3
        i=3;
        // most fields are zero, here we zero everything and fill later
        while(i<10){ 
                buf[UDP_DATA_P+i]=0;
    192e:	11 92       	st	Z+, r1
                i++;
    1930:	8f 5f       	subi	r24, 0xFF	; 255
        //buf[UDP_DATA_P] see below
        buf[UDP_DATA_P+1]=dnstid_l;
        buf[UDP_DATA_P+2]=1; // flags, standard recursive query
        i=3;
        // most fields are zero, here we zero everything and fill later
        while(i<10){ 
    1932:	8a 30       	cpi	r24, 0x0A	; 10
    1934:	e1 f7       	brne	.-8      	; 0x192e <dnslkup_request+0x3e>
                buf[UDP_DATA_P+i]=0;
                i++;
        }
        buf[UDP_DATA_P+5]=1; // 1 question
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	8f a7       	std	Y+47, r24	; 0x2f
    193a:	8d e0       	ldi	r24, 0x0D	; 13
    193c:	3c e0       	ldi	r19, 0x0C	; 12
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e c0       	rjmp	.+28     	; 0x195e <dnslkup_request+0x6e>
        // the first len starts at i=12
        lenpos=12;
        i=13;
        lencnt=0;
        while ((c = pgm_read_byte(progmem_hostname++))) {
                if (c=='.'){
    1942:	2e 32       	cpi	r18, 0x2E	; 46
    1944:	31 f4       	brne	.+12     	; 0x1952 <dnslkup_request+0x62>
                        buf[UDP_DATA_P+lenpos]=lencnt;
    1946:	fe 01       	movw	r30, r28
    1948:	e3 0f       	add	r30, r19
    194a:	f1 1d       	adc	r31, r1
    194c:	92 a7       	std	Z+42, r25	; 0x2a
    194e:	38 2f       	mov	r19, r24
    1950:	90 e0       	ldi	r25, 0x00	; 0
                        lencnt=0;
                        lenpos=i;
                }
                buf[UDP_DATA_P+i]=c;
    1952:	fe 01       	movw	r30, r28
    1954:	e8 0f       	add	r30, r24
    1956:	f1 1d       	adc	r31, r1
    1958:	22 a7       	std	Z+42, r18	; 0x2a
                lencnt++;
    195a:	9f 5f       	subi	r25, 0xFF	; 255
                i++;
    195c:	8f 5f       	subi	r24, 0xFF	; 255
    195e:	f7 01       	movw	r30, r14
        // 
        // the first len starts at i=12
        lenpos=12;
        i=13;
        lencnt=0;
        while ((c = pgm_read_byte(progmem_hostname++))) {
    1960:	08 94       	sec
    1962:	e1 1c       	adc	r14, r1
    1964:	f1 1c       	adc	r15, r1
    1966:	24 91       	lpm	r18, Z+
    1968:	22 23       	and	r18, r18
    196a:	59 f7       	brne	.-42     	; 0x1942 <dnslkup_request+0x52>
                }
                buf[UDP_DATA_P+i]=c;
                lencnt++;
                i++;
        }
        buf[UDP_DATA_P+lenpos]=lencnt-1;
    196c:	fe 01       	movw	r30, r28
    196e:	e3 0f       	add	r30, r19
    1970:	f1 1d       	adc	r31, r1
    1972:	91 50       	subi	r25, 0x01	; 1
    1974:	92 a7       	std	Z+42, r25	; 0x2a
        buf[UDP_DATA_P+i]=0; // terminate with zero, means root domain.
    1976:	fe 01       	movw	r30, r28
    1978:	e8 0f       	add	r30, r24
    197a:	f1 1d       	adc	r31, r1
    197c:	12 a6       	std	Z+42, r1	; 0x2a
        i++;
    197e:	8f 5f       	subi	r24, 0xFF	; 255
        buf[UDP_DATA_P+i]=0;
    1980:	fe 01       	movw	r30, r28
    1982:	e8 0f       	add	r30, r24
    1984:	f1 1d       	adc	r31, r1
    1986:	12 a6       	std	Z+42, r1	; 0x2a
        i++;
    1988:	8f 5f       	subi	r24, 0xFF	; 255
        buf[UDP_DATA_P+i]=1; // type A
    198a:	fe 01       	movw	r30, r28
    198c:	e8 0f       	add	r30, r24
    198e:	f1 1d       	adc	r31, r1
    1990:	91 e0       	ldi	r25, 0x01	; 1
    1992:	92 a7       	std	Z+42, r25	; 0x2a
        i++;
    1994:	68 2f       	mov	r22, r24
    1996:	6f 5f       	subi	r22, 0xFF	; 255
        buf[UDP_DATA_P+i]=0; 
    1998:	fe 01       	movw	r30, r28
    199a:	e6 0f       	add	r30, r22
    199c:	f1 1d       	adc	r31, r1
    199e:	12 a6       	std	Z+42, r1	; 0x2a
        i++;
    19a0:	6f 5f       	subi	r22, 0xFF	; 255
        buf[UDP_DATA_P+i]=1; // class IN
    19a2:	fe 01       	movw	r30, r28
    19a4:	e6 0f       	add	r30, r22
    19a6:	f1 1d       	adc	r31, r1
    19a8:	92 a7       	std	Z+42, r25	; 0x2a
        i++;
    19aa:	6f 5f       	subi	r22, 0xFF	; 255
        // we encode the length into the upper byte of the TID
        // this way we can easily jump over the query section
        // of the answer:
        buf[UDP_DATA_P]=i-12;
    19ac:	89 50       	subi	r24, 0x09	; 9
    19ae:	8a a7       	std	Y+42, r24	; 0x2a
        send_udp_transmit(buf,i);
    19b0:	ce 01       	movw	r24, r28
    19b2:	0e 94 cb 07 	call	0xf96	; 0xf96 <send_udp_transmit>
}
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	1f 91       	pop	r17
    19bc:	ff 90       	pop	r15
    19be:	ef 90       	pop	r14
    19c0:	08 95       	ret

000019c2 <udp_client_check_for_dns_answer>:

// process the answer from the ntp server:
// return 1 on sucessful processing of answer.
// We set also the variable haveDNSanswer
uint8_t udp_client_check_for_dns_answer(uint8_t *buf,uint16_t plen){
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	ec 01       	movw	r28, r24
        uint8_t j,i;
        if (plen<70){
    19c8:	66 34       	cpi	r22, 0x46	; 70
    19ca:	71 05       	cpc	r23, r1
    19cc:	08 f4       	brcc	.+2      	; 0x19d0 <udp_client_check_for_dns_answer+0xe>
    19ce:	4e c0       	rjmp	.+156    	; 0x1a6c <udp_client_check_for_dns_answer+0xaa>
                return(0);
        }
        if (buf[UDP_SRC_PORT_L_P]!=53){
    19d0:	8b a1       	ldd	r24, Y+35	; 0x23
    19d2:	85 33       	cpi	r24, 0x35	; 53
    19d4:	09 f0       	breq	.+2      	; 0x19d8 <udp_client_check_for_dns_answer+0x16>
    19d6:	4a c0       	rjmp	.+148    	; 0x1a6c <udp_client_check_for_dns_answer+0xaa>
                // not from a DNS
                return(0);
        }
        if (buf[UDP_DST_PORT_H_P]!=DNSCLIENT_SRC_PORT_H){ 
    19d8:	8c a1       	ldd	r24, Y+36	; 0x24
    19da:	80 3e       	cpi	r24, 0xE0	; 224
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <udp_client_check_for_dns_answer+0x1e>
    19de:	46 c0       	rjmp	.+140    	; 0x1a6c <udp_client_check_for_dns_answer+0xaa>
                return(0);
        }
        // we use the TID also as port:
        if (buf[UDP_DST_PORT_L_P]!=dnstid_l){ 
    19e0:	9d a1       	ldd	r25, Y+37	; 0x25
    19e2:	80 91 8a 00 	lds	r24, 0x008A
    19e6:	98 17       	cp	r25, r24
    19e8:	09 f0       	breq	.+2      	; 0x19ec <udp_client_check_for_dns_answer+0x2a>
    19ea:	40 c0       	rjmp	.+128    	; 0x1a6c <udp_client_check_for_dns_answer+0xaa>
        // is the packet for my IP:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
        }
        */
        if (buf[UDP_DATA_P+1]!=dnstid_l){ 
    19ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    19ee:	89 17       	cp	r24, r25
    19f0:	e9 f5       	brne	.+122    	; 0x1a6c <udp_client_check_for_dns_answer+0xaa>
                return(0);
        }
        // check flags lower byte:
        if ((buf[UDP_DATA_P+3]&0x8F)!=0x80){ 
    19f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    19f4:	8f 78       	andi	r24, 0x8F	; 143
    19f6:	80 38       	cpi	r24, 0x80	; 128
    19f8:	11 f0       	breq	.+4      	; 0x19fe <udp_client_check_for_dns_answer+0x3c>
                // there is an error or server does not support recursive
                // queries. We can only work with servers that support recursive
                // queries.
                dns_ansError=1;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	22 c0       	rjmp	.+68     	; 0x1a42 <udp_client_check_for_dns_answer+0x80>
        //
        // UDP_DATA_P+12+querylen is first byte of first answer.
        // The answer contains again the domain name and we need to
        // jump over it to find the IP. This part can be abbreviated by
        // the use of 2 byte pointers. See RFC 1035.
        i=12+buf[UDP_DATA_P]; // we encoded the query len into tid
    19fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a00:	29 2f       	mov	r18, r25
    1a02:	24 5f       	subi	r18, 0xF4	; 244
        if (buf[UDP_DATA_P+i] & 0xc0){
    1a04:	fe 01       	movw	r30, r28
    1a06:	e2 0f       	add	r30, r18
    1a08:	f1 1d       	adc	r31, r1
    1a0a:	82 a5       	ldd	r24, Z+42	; 0x2a
    1a0c:	80 7c       	andi	r24, 0xC0	; 192
    1a0e:	59 f0       	breq	.+22     	; 0x1a26 <udp_client_check_for_dns_answer+0x64>
                // pointer
                i+=2;
    1a10:	2e 5f       	subi	r18, 0xFE	; 254
    1a12:	10 c0       	rjmp	.+32     	; 0x1a34 <udp_client_check_for_dns_answer+0x72>
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
                        i++;
    1a14:	2f 5f       	subi	r18, 0xFF	; 255
                        if (buf[UDP_DATA_P+i]==0){
    1a16:	fe 01       	movw	r30, r28
    1a18:	e2 0f       	add	r30, r18
    1a1a:	f1 1d       	adc	r31, r1
    1a1c:	82 a5       	ldd	r24, Z+42	; 0x2a
    1a1e:	88 23       	and	r24, r24
    1a20:	21 f4       	brne	.+8      	; 0x1a2a <udp_client_check_for_dns_answer+0x68>
                                i++;
    1a22:	2f 5f       	subi	r18, 0xFF	; 255
    1a24:	07 c0       	rjmp	.+14     	; 0x1a34 <udp_client_check_for_dns_answer+0x72>
                // pointer
                i+=2;
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
    1a26:	61 53       	subi	r22, 0x31	; 49
    1a28:	70 40       	sbci	r23, 0x00	; 0
    1a2a:	82 2f       	mov	r24, r18
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	86 17       	cp	r24, r22
    1a30:	97 07       	cpc	r25, r23
    1a32:	80 f3       	brcs	.-32     	; 0x1a14 <udp_client_check_for_dns_answer+0x52>
                                break;
                        }
                }
        }
        // i is now pointing to the high octet of the type field
        if (buf[UDP_DATA_P+i+9] !=4 ){
    1a34:	fe 01       	movw	r30, r28
    1a36:	e2 0f       	add	r30, r18
    1a38:	f1 1d       	adc	r31, r1
    1a3a:	83 a9       	ldd	r24, Z+51	; 0x33
    1a3c:	84 30       	cpi	r24, 0x04	; 4
    1a3e:	21 f0       	breq	.+8      	; 0x1a48 <udp_client_check_for_dns_answer+0x86>
                dns_ansError=2; // not IPv4
    1a40:	82 e0       	ldi	r24, 0x02	; 2
    1a42:	80 93 8b 00 	sts	0x008B, r24
    1a46:	12 c0       	rjmp	.+36     	; 0x1a6c <udp_client_check_for_dns_answer+0xaa>
                return(0);
    1a48:	26 5f       	subi	r18, 0xF6	; 246
    1a4a:	a2 2f       	mov	r26, r18
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	9a 96       	adiw	r26, 0x2a	; 42
    1a50:	ac 0f       	add	r26, r28
    1a52:	bd 1f       	adc	r27, r29
    1a54:	e2 ec       	ldi	r30, 0xC2	; 194
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
        }
        i+=10;
        j=0;
        while(j<4){
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
    1a58:	8d 91       	ld	r24, X+
    1a5a:	81 93       	st	Z+, r24
                dns_ansError=2; // not IPv4
                return(0);
        }
        i+=10;
        j=0;
        while(j<4){
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	e6 3c       	cpi	r30, 0xC6	; 198
    1a60:	f8 07       	cpc	r31, r24
    1a62:	d1 f7       	brne	.-12     	; 0x1a58 <udp_client_check_for_dns_answer+0x96>
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
                j++;
        }
        haveDNSanswer=1;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	80 93 8c 00 	sts	0x008C, r24
    1a6a:	01 c0       	rjmp	.+2      	; 0x1a6e <udp_client_check_for_dns_answer+0xac>
        return(1);
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
}
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	08 95       	ret

00001a74 <http200ok>:
// to test the state of the LED
#define LEDISOFF PORTA&(1<<PORTA6)
// 

uint16_t http200ok(void)
{
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	06 c0       	rjmp	.+12     	; 0x1a86 <http200ok+0x12>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1a7a:	f9 01       	movw	r30, r18
    1a7c:	e5 52       	subi	r30, 0x25	; 37
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	86 ab       	std	Z+54, r24	; 0x36
                pos++;
    1a82:	2f 5f       	subi	r18, 0xFF	; 255
    1a84:	3f 4f       	sbci	r19, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1a86:	f9 01       	movw	r30, r18
    1a88:	e4 5d       	subi	r30, 0xD4	; 212
    1a8a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a8c:	84 91       	lpm	r24, Z+
    1a8e:	88 23       	and	r24, r24
    1a90:	a1 f7       	brne	.-24     	; 0x1a7a <http200ok+0x6>
        return(fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n")));
}
    1a92:	c9 01       	movw	r24, r18
    1a94:	08 95       	ret

00001a96 <init_cnt2>:

/* setup timer T2 as an interrupt generating time base.
* You must call once sei() in the main program */
void init_cnt2(void)
{
	cnt2step=0;
    1a96:	10 92 89 00 	sts	0x0089, r1
/*anupam*/
	TCCR0=0x05;
    1a9a:	85 e0       	ldi	r24, 0x05	; 5
    1a9c:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
    1a9e:	12 be       	out	0x32, r1	; 50
	TIMSK=0x01;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	89 bf       	out	0x39, r24	; 57
}
    1aa4:	08 95       	ret

00001aa6 <__vector_9>:

// called when TCNT2==OCR2A
// that is in 50Hz intervals
ISR(TIMER0_OVF_vect){
    1aa6:	1f 92       	push	r1
    1aa8:	0f 92       	push	r0
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	0f 92       	push	r0
    1aae:	11 24       	eor	r1, r1
    1ab0:	8f 93       	push	r24
	cnt2step++;
    1ab2:	80 91 89 00 	lds	r24, 0x0089
    1ab6:	8f 5f       	subi	r24, 0xFF	; 255
    1ab8:	80 93 89 00 	sts	0x0089, r24
	if (cnt2step>60){
    1abc:	80 91 89 00 	lds	r24, 0x0089
    1ac0:	8d 33       	cpi	r24, 0x3D	; 61
    1ac2:	38 f0       	brcs	.+14     	; 0x1ad2 <__vector_9+0x2c>
                cnt2step=0;
    1ac4:	10 92 89 00 	sts	0x0089, r1
                sec++; // stepped every second
    1ac8:	80 91 85 00 	lds	r24, 0x0085
    1acc:	8f 5f       	subi	r24, 0xFF	; 255
    1ace:	80 93 85 00 	sts	0x0085, r24
	}
}
    1ad2:	8f 91       	pop	r24
    1ad4:	0f 90       	pop	r0
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	0f 90       	pop	r0
    1ada:	1f 90       	pop	r1
    1adc:	18 95       	reti

00001ade <ping_callback>:

// we were ping-ed by somebody, store the ip of the ping sender
// and trigger an upload to http://tuxgraphics.org/cgi-bin/upld
// This is just for testing and demonstration purpose
void ping_callback(uint8_t *ip){
    1ade:	ac 01       	movw	r20, r24
        uint8_t i=0;
        // trigger only first time in case we get many ping in a row:
        if (start_web_client==0){
    1ae0:	80 91 86 00 	lds	r24, 0x0086
    1ae4:	88 23       	and	r24, r24
    1ae6:	79 f4       	brne	.+30     	; 0x1b06 <ping_callback+0x28>
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
                //start_web_client=1;
                // save IP from where the ping came:
                while(i<4){
                        pingsrcip[i]=ip[i];
    1aec:	f9 01       	movw	r30, r18
    1aee:	ea 59       	subi	r30, 0x9A	; 154
    1af0:	fc 4f       	sbci	r31, 0xFC	; 252
    1af2:	da 01       	movw	r26, r20
    1af4:	a2 0f       	add	r26, r18
    1af6:	b3 1f       	adc	r27, r19
    1af8:	8c 91       	ld	r24, X
    1afa:	80 83       	st	Z, r24
    1afc:	2f 5f       	subi	r18, 0xFF	; 255
    1afe:	3f 4f       	sbci	r19, 0xFF	; 255
        uint8_t i=0;
        // trigger only first time in case we get many ping in a row:
        if (start_web_client==0){
                //start_web_client=1;
                // save IP from where the ping came:
                while(i<4){
    1b00:	24 30       	cpi	r18, 0x04	; 4
    1b02:	31 05       	cpc	r19, r1
    1b04:	99 f7       	brne	.-26     	; 0x1aec <ping_callback+0xe>
    1b06:	08 95       	ret

00001b08 <browserresult_callback>:
        }
}

void browserresult_callback(uint8_t statuscode,uint16_t datapos, uint16_t len){
        datapos=0; // supress warning about unused paramter
        if (statuscode==0){
    1b08:	88 23       	and	r24, r24
    1b0a:	31 f4       	brne	.+12     	; 0x1b18 <browserresult_callback+0x10>
                len=0; // avoid warning about unused variable
                web_client_sendok++;
    1b0c:	80 91 88 00 	lds	r24, 0x0088
    1b10:	8f 5f       	subi	r24, 0xFF	; 255
    1b12:	80 93 88 00 	sts	0x0088, r24
                LEDOFF;
    1b16:	de 9a       	sbi	0x1b, 6	; 27
    1b18:	08 95       	ret

00001b1a <trigger>:
        }
}
void trigger(void)
{
if (start_web_client==0){
    1b1a:	80 91 86 00 	lds	r24, 0x0086
    1b1e:	88 23       	and	r24, r24
    1b20:	19 f4       	brne	.+6      	; 0x1b28 <trigger+0xe>
                start_web_client=1;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	80 93 86 00 	sts	0x0086, r24
    1b28:	08 95       	ret

00001b2a <www_client_internal_result_callback>:
                return(len);
        }
        return(0);
}

uint8_t www_client_internal_result_callback(uint8_t fd, uint8_t statuscode, uint16_t datapos, uint16_t len_of_data){
    1b2a:	ef 92       	push	r14
    1b2c:	ff 92       	push	r15
    1b2e:	0f 93       	push	r16
    1b30:	1f 93       	push	r17
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	79 01       	movw	r14, r18
        if (fd!=www_fd){
    1b38:	90 91 98 00 	lds	r25, 0x0098
    1b3c:	89 17       	cp	r24, r25
    1b3e:	59 f0       	breq	.+22     	; 0x1b56 <www_client_internal_result_callback+0x2c>
                (*client_browser_callback)(4,0,0);
    1b40:	e0 91 a4 00 	lds	r30, 0x00A4
    1b44:	f0 91 a5 00 	lds	r31, 0x00A5
    1b48:	84 e0       	ldi	r24, 0x04	; 4
    1b4a:	60 e0       	ldi	r22, 0x00	; 0
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	40 e0       	ldi	r20, 0x00	; 0
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	09 95       	icall
    1b54:	36 c0       	rjmp	.+108    	; 0x1bc2 <www_client_internal_result_callback+0x98>
                return(0);
        }
        if (statuscode==0 && len_of_data>12){
    1b56:	66 23       	and	r22, r22
    1b58:	a1 f5       	brne	.+104    	; 0x1bc2 <www_client_internal_result_callback+0x98>
    1b5a:	2d 30       	cpi	r18, 0x0D	; 13
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	88 f1       	brcs	.+98     	; 0x1bc2 <www_client_internal_result_callback+0x98>
                // we might have a http status code
                if (client_browser_callback){
    1b60:	c0 91 a4 00 	lds	r28, 0x00A4
    1b64:	d0 91 a5 00 	lds	r29, 0x00A5
    1b68:	20 97       	sbiw	r28, 0x00	; 0
    1b6a:	59 f1       	breq	.+86     	; 0x1bc2 <www_client_internal_result_callback+0x98>
                        if (strncmp("200",(char *)&(bufptr[datapos+9]),3)==0){
    1b6c:	00 91 92 00 	lds	r16, 0x0092
    1b70:	10 91 93 00 	lds	r17, 0x0093
    1b74:	47 5f       	subi	r20, 0xF7	; 247
    1b76:	5f 4f       	sbci	r21, 0xFF	; 255
    1b78:	40 0f       	add	r20, r16
    1b7a:	51 1f       	adc	r21, r17
    1b7c:	80 e6       	ldi	r24, 0x60	; 96
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	ba 01       	movw	r22, r20
    1b82:	43 e0       	ldi	r20, 0x03	; 3
    1b84:	50 e0       	ldi	r21, 0x00	; 0
    1b86:	0e 94 db 12 	call	0x25b6	; 0x25b6 <strncmp>
    1b8a:	f8 01       	movw	r30, r16
    1b8c:	66 a5       	ldd	r22, Z+46	; 0x2e
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	59 f4       	brne	.+22     	; 0x1ba8 <www_client_internal_result_callback+0x7e>
                                (*client_browser_callback)(0,((uint16_t)TCP_SRC_PORT_H_P+(bufptr[TCP_HEADER_LEN_P]>>4)*4),len_of_data);
    1b92:	62 95       	swap	r22
    1b94:	6f 70       	andi	r22, 0x0F	; 15
    1b96:	70 e0       	ldi	r23, 0x00	; 0
    1b98:	66 0f       	add	r22, r22
    1b9a:	77 1f       	adc	r23, r23
    1b9c:	66 0f       	add	r22, r22
    1b9e:	77 1f       	adc	r23, r23
    1ba0:	6e 5d       	subi	r22, 0xDE	; 222
    1ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	0a c0       	rjmp	.+20     	; 0x1bbc <www_client_internal_result_callback+0x92>
                        }else{
                                (*client_browser_callback)(1,((uint16_t)TCP_SRC_PORT_H_P+(bufptr[TCP_HEADER_LEN_P]>>4)*4),len_of_data);
    1ba8:	62 95       	swap	r22
    1baa:	6f 70       	andi	r22, 0x0F	; 15
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	66 0f       	add	r22, r22
    1bb0:	77 1f       	adc	r23, r23
    1bb2:	66 0f       	add	r22, r22
    1bb4:	77 1f       	adc	r23, r23
    1bb6:	6e 5d       	subi	r22, 0xDE	; 222
    1bb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	a7 01       	movw	r20, r14
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	09 95       	icall
                        }
                }
        }
        return(0);
}
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	1f 91       	pop	r17
    1bca:	0f 91       	pop	r16
    1bcc:	ff 90       	pop	r15
    1bce:	ef 90       	pop	r14
    1bd0:	08 95       	ret

00001bd2 <mk_net_str>:
        return(1);
}

// take a byte string and convert it to a human readable display string  (base is 10 for ip and 16 for mac addr), len is 4 for IP addr and 6 for mac.
void mk_net_str(char *resultstr,uint8_t *bytestr,uint8_t len,char separator,uint8_t base)
{
    1bd2:	bf 92       	push	r11
    1bd4:	cf 92       	push	r12
    1bd6:	df 92       	push	r13
    1bd8:	ef 92       	push	r14
    1bda:	ff 92       	push	r15
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	7c 01       	movw	r14, r24
    1be6:	b4 2e       	mov	r11, r20
    1be8:	c2 2e       	mov	r12, r18
    1bea:	d0 2e       	mov	r13, r16
    1bec:	eb 01       	movw	r28, r22
    1bee:	00 e0       	ldi	r16, 0x00	; 0
    1bf0:	10 e0       	ldi	r17, 0x00	; 0
    1bf2:	17 c0       	rjmp	.+46     	; 0x1c22 <mk_net_str+0x50>
        uint8_t i=0;
        uint8_t j=0;
        while(i<len){
                itoa((int)bytestr[i],&resultstr[j],base);
    1bf4:	b7 01       	movw	r22, r14
    1bf6:	61 0f       	add	r22, r17
    1bf8:	71 1d       	adc	r23, r1
    1bfa:	88 81       	ld	r24, Y
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	4d 2d       	mov	r20, r13
    1c00:	50 e0       	ldi	r21, 0x00	; 0
    1c02:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <itoa>
    1c06:	01 c0       	rjmp	.+2      	; 0x1c0a <mk_net_str+0x38>
                // search end of str:
                while(resultstr[j]){j++;}
    1c08:	19 2f       	mov	r17, r25
    1c0a:	f7 01       	movw	r30, r14
    1c0c:	e1 0f       	add	r30, r17
    1c0e:	f1 1d       	adc	r31, r1
    1c10:	80 81       	ld	r24, Z
    1c12:	91 2f       	mov	r25, r17
    1c14:	9f 5f       	subi	r25, 0xFF	; 255
    1c16:	88 23       	and	r24, r24
    1c18:	b9 f7       	brne	.-18     	; 0x1c08 <mk_net_str+0x36>
                resultstr[j]=separator;
    1c1a:	c0 82       	st	Z, r12
                j++;
    1c1c:	19 2f       	mov	r17, r25
                i++;
    1c1e:	0f 5f       	subi	r16, 0xFF	; 255
    1c20:	21 96       	adiw	r28, 0x01	; 1
// take a byte string and convert it to a human readable display string  (base is 10 for ip and 16 for mac addr), len is 4 for IP addr and 6 for mac.
void mk_net_str(char *resultstr,uint8_t *bytestr,uint8_t len,char separator,uint8_t base)
{
        uint8_t i=0;
        uint8_t j=0;
        while(i<len){
    1c22:	0b 15       	cp	r16, r11
    1c24:	38 f3       	brcs	.-50     	; 0x1bf4 <mk_net_str+0x22>
                resultstr[j]=separator;
                j++;
                i++;
        }
        j--;
        resultstr[j]='\0';
    1c26:	11 50       	subi	r17, 0x01	; 1
    1c28:	e1 0e       	add	r14, r17
    1c2a:	f1 1c       	adc	r15, r1
    1c2c:	f7 01       	movw	r30, r14
    1c2e:	10 82       	st	Z, r1
}
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	ff 90       	pop	r15
    1c3a:	ef 90       	pop	r14
    1c3c:	df 90       	pop	r13
    1c3e:	cf 90       	pop	r12
    1c40:	bf 90       	pop	r11
    1c42:	08 95       	ret

00001c44 <parse_ip>:

#endif // URLENCODE_websrv_help

// parse a string an extract the IP to bytestr
uint8_t parse_ip(uint8_t *bytestr,char *str)
{
    1c44:	ef 92       	push	r14
    1c46:	ff 92       	push	r15
    1c48:	1f 93       	push	r17
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	7c 01       	movw	r14, r24
    1c50:	eb 01       	movw	r28, r22
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
        char *sptr;
        uint8_t i=0;
        sptr=NULL;
        while(i<4){
                bytestr[i]=0;
    1c56:	f7 01       	movw	r30, r14
    1c58:	e8 0f       	add	r30, r24
    1c5a:	f9 1f       	adc	r31, r25
    1c5c:	10 82       	st	Z, r1
    1c5e:	01 96       	adiw	r24, 0x01	; 1
uint8_t parse_ip(uint8_t *bytestr,char *str)
{
        char *sptr;
        uint8_t i=0;
        sptr=NULL;
        while(i<4){
    1c60:	84 30       	cpi	r24, 0x04	; 4
    1c62:	91 05       	cpc	r25, r1
    1c64:	c1 f7       	brne	.-16     	; 0x1c56 <parse_ip+0x12>
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	10 e0       	ldi	r17, 0x00	; 0
    1c6c:	17 c0       	rjmp	.+46     	; 0x1c9c <parse_ip+0x58>
                i++;
        }
        i=0;
        while(*str && i<4){
                // if a number then start
                if (sptr==NULL && isdigit(*str)){
    1c6e:	21 15       	cp	r18, r1
    1c70:	31 05       	cpc	r19, r1
    1c72:	31 f4       	brne	.+12     	; 0x1c80 <parse_ip+0x3c>
    1c74:	84 2f       	mov	r24, r20
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	c0 97       	sbiw	r24, 0x30	; 48
    1c7a:	0a 97       	sbiw	r24, 0x0a	; 10
    1c7c:	08 f4       	brcc	.+2      	; 0x1c80 <parse_ip+0x3c>
    1c7e:	9e 01       	movw	r18, r28
                        sptr=str;
                }
                if (*str == '.'){
    1c80:	4e 32       	cpi	r20, 0x2E	; 46
    1c82:	59 f4       	brne	.+22     	; 0x1c9a <parse_ip+0x56>
                        *str ='\0';
    1c84:	18 82       	st	Y, r1
                        bytestr[i]=(atoi(sptr)&0xff);
    1c86:	c9 01       	movw	r24, r18
    1c88:	0e 94 bd 12 	call	0x257a	; 0x257a <atoi>
    1c8c:	f7 01       	movw	r30, r14
    1c8e:	e1 0f       	add	r30, r17
    1c90:	f1 1d       	adc	r31, r1
    1c92:	80 83       	st	Z, r24
                        i++;
    1c94:	1f 5f       	subi	r17, 0xFF	; 255
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
                        sptr=NULL;
                }
                str++;
    1c9a:	21 96       	adiw	r28, 0x01	; 1
        while(i<4){
                bytestr[i]=0;
                i++;
        }
        i=0;
        while(*str && i<4){
    1c9c:	48 81       	ld	r20, Y
    1c9e:	44 23       	and	r20, r20
    1ca0:	11 f0       	breq	.+4      	; 0x1ca6 <parse_ip+0x62>
    1ca2:	14 30       	cpi	r17, 0x04	; 4
    1ca4:	20 f3       	brcs	.-56     	; 0x1c6e <parse_ip+0x2a>
                        i++;
                        sptr=NULL;
                }
                str++;
        }
        *str ='\0';
    1ca6:	18 82       	st	Y, r1
        if (i==3){
    1ca8:	13 30       	cpi	r17, 0x03	; 3
    1caa:	11 f0       	breq	.+4      	; 0x1cb0 <parse_ip+0x6c>
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	06 c0       	rjmp	.+12     	; 0x1cbc <parse_ip+0x78>
                bytestr[i]=(atoi(sptr)&0xff);
    1cb0:	c9 01       	movw	r24, r18
    1cb2:	0e 94 bd 12 	call	0x257a	; 0x257a <atoi>
    1cb6:	f7 01       	movw	r30, r14
    1cb8:	83 83       	std	Z+3, r24	; 0x03
    1cba:	80 e0       	ldi	r24, 0x00	; 0
                return(0);
        }
        return(1);
}
    1cbc:	df 91       	pop	r29
    1cbe:	cf 91       	pop	r28
    1cc0:	1f 91       	pop	r17
    1cc2:	ff 90       	pop	r15
    1cc4:	ef 90       	pop	r14
    1cc6:	08 95       	ret

00001cc8 <urlencode>:
}

// there must be enoug space in urlbuf. In the worst case that is
// 3 times the length of str
void urlencode(char *str,char *urlbuf)
{
    1cc8:	ef 92       	push	r14
    1cca:	ff 92       	push	r15
    1ccc:	0f 93       	push	r16
    1cce:	1f 93       	push	r17
    1cd0:	cf 93       	push	r28
    1cd2:	df 93       	push	r29
    1cd4:	8b 01       	movw	r16, r22
    1cd6:	ec 01       	movw	r28, r24
    1cd8:	21 96       	adiw	r28, 0x01	; 1
                        *urlbuf=c;
                        str++;
                        urlbuf++;
                        continue;
                }
                *urlbuf='%';
    1cda:	95 e2       	ldi	r25, 0x25	; 37
    1cdc:	e9 2e       	mov	r14, r25
    1cde:	1a c0       	rjmp	.+52     	; 0x1d14 <urlencode+0x4c>
// 3 times the length of str
void urlencode(char *str,char *urlbuf)
{
        char c;
        while ((c = *str)) {
                if (c == ' '||isalnum(c)){ 
    1ce0:	80 e2       	ldi	r24, 0x20	; 32
    1ce2:	f8 16       	cp	r15, r24
    1ce4:	19 f4       	brne	.+6      	; 0x1cec <urlencode+0x24>
    1ce6:	8b e2       	ldi	r24, 0x2B	; 43
    1ce8:	f8 2e       	mov	r15, r24
    1cea:	06 c0       	rjmp	.+12     	; 0x1cf8 <urlencode+0x30>
    1cec:	8f 2d       	mov	r24, r15
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 94 22 13 	call	0x2644	; 0x2644 <isalnum>
    1cf4:	89 2b       	or	r24, r25
    1cf6:	21 f0       	breq	.+8      	; 0x1d00 <urlencode+0x38>
                        if (c == ' '){ 
                                c = '+';
                        }
                        *urlbuf=c;
    1cf8:	f8 01       	movw	r30, r16
    1cfa:	f1 92       	st	Z+, r15
    1cfc:	8f 01       	movw	r16, r30
    1cfe:	09 c0       	rjmp	.+18     	; 0x1d12 <urlencode+0x4a>
                        str++;
                        urlbuf++;
                        continue;
                }
                *urlbuf='%';
    1d00:	f8 01       	movw	r30, r16
    1d02:	e1 92       	st	Z+, r14
    1d04:	8f 01       	movw	r16, r30
                urlbuf++;
                int2h(c,urlbuf);
    1d06:	8f 2d       	mov	r24, r15
    1d08:	bf 01       	movw	r22, r30
    1d0a:	0e 94 55 0c 	call	0x18aa	; 0x18aa <int2h>
                urlbuf++;
                urlbuf++;
    1d0e:	0e 5f       	subi	r16, 0xFE	; 254
    1d10:	1f 4f       	sbci	r17, 0xFF	; 255
    1d12:	21 96       	adiw	r28, 0x01	; 1
// there must be enoug space in urlbuf. In the worst case that is
// 3 times the length of str
void urlencode(char *str,char *urlbuf)
{
        char c;
        while ((c = *str)) {
    1d14:	fa 90       	ld	r15, -Y
    1d16:	21 96       	adiw	r28, 0x01	; 1
    1d18:	ff 20       	and	r15, r15
    1d1a:	11 f7       	brne	.-60     	; 0x1ce0 <urlencode+0x18>
                int2h(c,urlbuf);
                urlbuf++;
                urlbuf++;
                str++;
        }
        *urlbuf='\0';
    1d1c:	f8 01       	movw	r30, r16
    1d1e:	10 82       	st	Z, r1
}
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	1f 91       	pop	r17
    1d26:	0f 91       	pop	r16
    1d28:	ff 90       	pop	r15
    1d2a:	ef 90       	pop	r14
    1d2c:	08 95       	ret

00001d2e <fill_tcp_data>:

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
        return(fill_tcp_data_len(buf,pos,(uint8_t*)s,strlen(s)));
    1d32:	da 01       	movw	r26, r20
    1d34:	0d 90       	ld	r0, X+
    1d36:	00 20       	and	r0, r0
    1d38:	e9 f7       	brne	.-6      	; 0x1d34 <fill_tcp_data+0x6>
    1d3a:	11 97       	sbiw	r26, 0x01	; 1
    1d3c:	a4 1b       	sub	r26, r20
    1d3e:	6a 5c       	subi	r22, 0xCA	; 202
    1d40:	7f 4f       	sbci	r23, 0xFF	; 255
    1d42:	ec 01       	movw	r28, r24
    1d44:	c6 0f       	add	r28, r22
    1d46:	d7 1f       	adc	r29, r23
    1d48:	66 53       	subi	r22, 0x36	; 54
    1d4a:	70 40       	sbci	r23, 0x00	; 0
    1d4c:	fa 01       	movw	r30, r20

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
uint16_t fill_tcp_data_len(uint8_t *buf,uint16_t pos, const uint8_t *s, uint8_t len)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
    1d50:	9a 01       	movw	r18, r20
    1d52:	2a 0f       	add	r18, r26
    1d54:	3b 1f       	adc	r19, r27
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <fill_tcp_data+0x2e>
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
    1d58:	81 91       	ld	r24, Z+
    1d5a:	89 93       	st	Y+, r24
uint16_t fill_tcp_data_len(uint8_t *buf,uint16_t pos, const uint8_t *s, uint8_t len)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
    1d5c:	e2 17       	cp	r30, r18
    1d5e:	f3 07       	cpc	r31, r19
    1d60:	d9 f7       	brne	.-10     	; 0x1d58 <fill_tcp_data+0x2a>
    1d62:	9b 01       	movw	r18, r22
    1d64:	2a 0f       	add	r18, r26
    1d66:	3b 1f       	adc	r19, r27
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
        return(fill_tcp_data_len(buf,pos,(uint8_t*)s,strlen(s)));
}
    1d68:	c9 01       	movw	r24, r18
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	08 95       	ret

00001d70 <print_webpage>:
}


// prepare the webpage by writing the data to the tcp send buffer
uint16_t print_webpage(uint8_t *buf)
{
    1d70:	cf 92       	push	r12
    1d72:	df 92       	push	r13
    1d74:	ef 92       	push	r14
    1d76:	ff 92       	push	r15
    1d78:	0f 93       	push	r16
    1d7a:	1f 93       	push	r17
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <print_webpage+0x12>
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <print_webpage+0x14>
    1d84:	0f 92       	push	r0
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	6c 01       	movw	r12, r24
    1d8c:	ee 24       	eor	r14, r14
    1d8e:	ff 24       	eor	r15, r15
    1d90:	07 c0       	rjmp	.+14     	; 0x1da0 <print_webpage+0x30>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1d92:	f7 01       	movw	r30, r14
    1d94:	e5 52       	subi	r30, 0x25	; 37
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	86 ab       	std	Z+54, r24	; 0x36
                pos++;
    1d9a:	08 94       	sec
    1d9c:	e1 1c       	adc	r14, r1
    1d9e:	f1 1c       	adc	r15, r1
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1da0:	f7 01       	movw	r30, r14
    1da2:	e4 5d       	subi	r30, 0xD4	; 212
    1da4:	fd 4f       	sbci	r31, 0xFD	; 253
    1da6:	84 91       	lpm	r24, Z+
    1da8:	88 23       	and	r24, r24
    1daa:	99 f7       	brne	.-26     	; 0x1d92 <print_webpage+0x22>
    1dac:	86 e3       	ldi	r24, 0x36	; 54
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	e8 0e       	add	r14, r24
    1db2:	f9 1e       	adc	r15, r25
    1db4:	d6 01       	movw	r26, r12
    1db6:	ae 0d       	add	r26, r14
    1db8:	bf 1d       	adc	r27, r15
    1dba:	8a ec       	ldi	r24, 0xCA	; 202
    1dbc:	9f ef       	ldi	r25, 0xFF	; 255
    1dbe:	e8 0e       	add	r14, r24
    1dc0:	f9 1e       	adc	r15, r25
        uint16_t plen;
        char vstr[5];
        plen=http200ok();
        plen=fill_tcp_data_p(buf,plen,PSTR("<h2>web client status</h2>\n<pre>\n"));
    1dc2:	8a e0       	ldi	r24, 0x0A	; 10
    1dc4:	92 e0       	ldi	r25, 0x02	; 2
    1dc6:	04 c0       	rjmp	.+8      	; 0x1dd0 <print_webpage+0x60>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1dc8:	2d 93       	st	X+, r18
                pos++;
    1dca:	08 94       	sec
    1dcc:	e1 1c       	adc	r14, r1
    1dce:	f1 1c       	adc	r15, r1
    1dd0:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1dd2:	01 96       	adiw	r24, 0x01	; 1
    1dd4:	24 91       	lpm	r18, Z+
    1dd6:	22 23       	and	r18, r18
    1dd8:	b9 f7       	brne	.-18     	; 0x1dc8 <print_webpage+0x58>
        enc28j60PacketSend(0x2a,buf);
}

uint8_t client_waiting_gw(void)
{
        if (waitgwmac & WGW_HAVE_GW_MAC){
    1dda:	80 91 8d 00 	lds	r24, 0x008D
    1dde:	81 fd       	sbrc	r24, 1
    1de0:	0e c0       	rjmp	.+28     	; 0x1dfe <print_webpage+0x8e>
    1de2:	86 e3       	ldi	r24, 0x36	; 54
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	e8 0e       	add	r14, r24
    1de8:	f9 1e       	adc	r15, r25
    1dea:	d6 01       	movw	r26, r12
    1dec:	ae 0d       	add	r26, r14
    1dee:	bf 1d       	adc	r27, r15
    1df0:	8a ec       	ldi	r24, 0xCA	; 202
    1df2:	9f ef       	ldi	r25, 0xFF	; 255
    1df4:	e8 0e       	add	r14, r24
    1df6:	f9 1e       	adc	r15, r25
        if (client_waiting_gw()){
                plen=fill_tcp_data_p(buf,plen,PSTR("waiting for GW IP to answer arp.\n"));
    1df8:	88 ee       	ldi	r24, 0xE8	; 232
    1dfa:	91 e0       	ldi	r25, 0x01	; 1
    1dfc:	17 c0       	rjmp	.+46     	; 0x1e2c <print_webpage+0xbc>
                return(plen);
        }
        if (dns_state==1){
    1dfe:	80 91 84 00 	lds	r24, 0x0084
    1e02:	97 01       	movw	r18, r14
    1e04:	2a 5c       	subi	r18, 0xCA	; 202
    1e06:	3f 4f       	sbci	r19, 0xFF	; 255
    1e08:	81 30       	cpi	r24, 0x01	; 1
    1e0a:	31 f0       	breq	.+12     	; 0x1e18 <print_webpage+0xa8>
    1e0c:	d6 01       	movw	r26, r12
    1e0e:	a2 0f       	add	r26, r18
    1e10:	b3 1f       	adc	r27, r19
                plen=fill_tcp_data_p(buf,plen,PSTR("waiting for DNS answer.\n"));
                return(plen);
        }
        plen=fill_tcp_data_p(buf,plen,PSTR("Number of data uploads started by ping: "));
    1e12:	86 ea       	ldi	r24, 0xA6	; 166
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	1e c0       	rjmp	.+60     	; 0x1e54 <print_webpage+0xe4>
    1e18:	d6 01       	movw	r26, r12
    1e1a:	a2 0f       	add	r26, r18
    1e1c:	b3 1f       	adc	r27, r19
        if (client_waiting_gw()){
                plen=fill_tcp_data_p(buf,plen,PSTR("waiting for GW IP to answer arp.\n"));
                return(plen);
        }
        if (dns_state==1){
                plen=fill_tcp_data_p(buf,plen,PSTR("waiting for DNS answer.\n"));
    1e1e:	8f ec       	ldi	r24, 0xCF	; 207
    1e20:	91 e0       	ldi	r25, 0x01	; 1
    1e22:	0e c0       	rjmp	.+28     	; 0x1e40 <print_webpage+0xd0>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1e24:	2d 93       	st	X+, r18
                pos++;
    1e26:	08 94       	sec
    1e28:	e1 1c       	adc	r14, r1
    1e2a:	f1 1c       	adc	r15, r1
    1e2c:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1e2e:	01 96       	adiw	r24, 0x01	; 1
    1e30:	24 91       	lpm	r18, Z+
    1e32:	22 23       	and	r18, r18
    1e34:	b9 f7       	brne	.-18     	; 0x1e24 <print_webpage+0xb4>
    1e36:	7a c0       	rjmp	.+244    	; 0x1f2c <print_webpage+0x1bc>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1e38:	2d 93       	st	X+, r18
                pos++;
    1e3a:	08 94       	sec
    1e3c:	e1 1c       	adc	r14, r1
    1e3e:	f1 1c       	adc	r15, r1
    1e40:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1e42:	01 96       	adiw	r24, 0x01	; 1
    1e44:	24 91       	lpm	r18, Z+
    1e46:	22 23       	and	r18, r18
    1e48:	b9 f7       	brne	.-18     	; 0x1e38 <print_webpage+0xc8>
    1e4a:	70 c0       	rjmp	.+224    	; 0x1f2c <print_webpage+0x1bc>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1e4c:	2d 93       	st	X+, r18
                pos++;
    1e4e:	08 94       	sec
    1e50:	e1 1c       	adc	r14, r1
    1e52:	f1 1c       	adc	r15, r1
    1e54:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1e56:	01 96       	adiw	r24, 0x01	; 1
    1e58:	24 91       	lpm	r18, Z+
    1e5a:	22 23       	and	r18, r18
    1e5c:	b9 f7       	brne	.-18     	; 0x1e4c <print_webpage+0xdc>
                return(plen);
        }
        plen=fill_tcp_data_p(buf,plen,PSTR("Number of data uploads started by ping: "));
        // convert number to string:
        itoa(web_client_attempts,vstr,10);
    1e5e:	80 91 87 00 	lds	r24, 0x0087
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	8e 01       	movw	r16, r28
    1e66:	0f 5f       	subi	r16, 0xFF	; 255
    1e68:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6a:	b8 01       	movw	r22, r16
    1e6c:	4a e0       	ldi	r20, 0x0A	; 10
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <itoa>
        plen=fill_tcp_data(buf,plen,vstr);
    1e74:	c6 01       	movw	r24, r12
    1e76:	b7 01       	movw	r22, r14
    1e78:	a8 01       	movw	r20, r16
    1e7a:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <fill_tcp_data>
    1e7e:	7c 01       	movw	r14, r24
    1e80:	86 e3       	ldi	r24, 0x36	; 54
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	e8 0e       	add	r14, r24
    1e86:	f9 1e       	adc	r15, r25
    1e88:	d6 01       	movw	r26, r12
    1e8a:	ae 0d       	add	r26, r14
    1e8c:	bf 1d       	adc	r27, r15
    1e8e:	8a ec       	ldi	r24, 0xCA	; 202
    1e90:	9f ef       	ldi	r25, 0xFF	; 255
    1e92:	e8 0e       	add	r14, r24
    1e94:	f9 1e       	adc	r15, r25
        plen=fill_tcp_data_p(buf,plen,PSTR("\nNumber successful data uploads to web: "));
    1e96:	8d e7       	ldi	r24, 0x7D	; 125
    1e98:	91 e0       	ldi	r25, 0x01	; 1
    1e9a:	04 c0       	rjmp	.+8      	; 0x1ea4 <print_webpage+0x134>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1e9c:	2d 93       	st	X+, r18
                pos++;
    1e9e:	08 94       	sec
    1ea0:	e1 1c       	adc	r14, r1
    1ea2:	f1 1c       	adc	r15, r1
    1ea4:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1ea6:	01 96       	adiw	r24, 0x01	; 1
    1ea8:	24 91       	lpm	r18, Z+
    1eaa:	22 23       	and	r18, r18
    1eac:	b9 f7       	brne	.-18     	; 0x1e9c <print_webpage+0x12c>
        // convert number to string:
        itoa(web_client_sendok,vstr,10);
    1eae:	80 91 88 00 	lds	r24, 0x0088
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	8e 01       	movw	r16, r28
    1eb6:	0f 5f       	subi	r16, 0xFF	; 255
    1eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eba:	b8 01       	movw	r22, r16
    1ebc:	4a e0       	ldi	r20, 0x0A	; 10
    1ebe:	50 e0       	ldi	r21, 0x00	; 0
    1ec0:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <itoa>
        plen=fill_tcp_data(buf,plen,vstr);
    1ec4:	c6 01       	movw	r24, r12
    1ec6:	b7 01       	movw	r22, r14
    1ec8:	a8 01       	movw	r20, r16
    1eca:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <fill_tcp_data>
    1ece:	7c 01       	movw	r14, r24
    1ed0:	86 e3       	ldi	r24, 0x36	; 54
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	e8 0e       	add	r14, r24
    1ed6:	f9 1e       	adc	r15, r25
    1ed8:	d6 01       	movw	r26, r12
    1eda:	ae 0d       	add	r26, r14
    1edc:	bf 1d       	adc	r27, r15
    1ede:	8a ec       	ldi	r24, 0xCA	; 202
    1ee0:	9f ef       	ldi	r25, 0xFF	; 255
    1ee2:	e8 0e       	add	r14, r24
    1ee4:	f9 1e       	adc	r15, r25
        plen=fill_tcp_data_p(buf,plen,PSTR("\ncheck result: <a href=http://tuxgraphics.org/cgi-bin/upld>http://tuxgraphics.org/cgi-bin/upld</a>"));
    1ee6:	8a e1       	ldi	r24, 0x1A	; 26
    1ee8:	91 e0       	ldi	r25, 0x01	; 1
    1eea:	04 c0       	rjmp	.+8      	; 0x1ef4 <print_webpage+0x184>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1eec:	2d 93       	st	X+, r18
                pos++;
    1eee:	08 94       	sec
    1ef0:	e1 1c       	adc	r14, r1
    1ef2:	f1 1c       	adc	r15, r1
    1ef4:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1ef6:	01 96       	adiw	r24, 0x01	; 1
    1ef8:	24 91       	lpm	r18, Z+
    1efa:	22 23       	and	r18, r18
    1efc:	b9 f7       	brne	.-18     	; 0x1eec <print_webpage+0x17c>
    1efe:	86 e3       	ldi	r24, 0x36	; 54
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	e8 0e       	add	r14, r24
    1f04:	f9 1e       	adc	r15, r25
    1f06:	d6 01       	movw	r26, r12
    1f08:	ae 0d       	add	r26, r14
    1f0a:	bf 1d       	adc	r27, r15
    1f0c:	8a ec       	ldi	r24, 0xCA	; 202
    1f0e:	9f ef       	ldi	r25, 0xFF	; 255
    1f10:	e8 0e       	add	r14, r24
    1f12:	f9 1e       	adc	r15, r25
        plen=fill_tcp_data_p(buf,plen,PSTR("\n</pre><br><hr>"));
    1f14:	8a e0       	ldi	r24, 0x0A	; 10
    1f16:	91 e0       	ldi	r25, 0x01	; 1
    1f18:	04 c0       	rjmp	.+8      	; 0x1f22 <print_webpage+0x1b2>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1f1a:	2d 93       	st	X+, r18
                pos++;
    1f1c:	08 94       	sec
    1f1e:	e1 1c       	adc	r14, r1
    1f20:	f1 1c       	adc	r15, r1
    1f22:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1f24:	01 96       	adiw	r24, 0x01	; 1
    1f26:	24 91       	lpm	r18, Z+
    1f28:	22 23       	and	r18, r18
    1f2a:	b9 f7       	brne	.-18     	; 0x1f1a <print_webpage+0x1aa>
        return(plen);
}
    1f2c:	c7 01       	movw	r24, r14
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	1f 91       	pop	r17
    1f3e:	0f 91       	pop	r16
    1f40:	ff 90       	pop	r15
    1f42:	ef 90       	pop	r14
    1f44:	df 90       	pop	r13
    1f46:	cf 90       	pop	r12
    1f48:	08 95       	ret

00001f4a <main>:
if (start_web_client==0){
                start_web_client=1;
                
}
}
int main(void){
    1f4a:	2f 92       	push	r2
    1f4c:	3f 92       	push	r3
    1f4e:	4f 92       	push	r4
    1f50:	5f 92       	push	r5
    1f52:	6f 92       	push	r6
    1f54:	7f 92       	push	r7
    1f56:	8f 92       	push	r8
    1f58:	9f 92       	push	r9
    1f5a:	af 92       	push	r10
    1f5c:	bf 92       	push	r11
    1f5e:	cf 92       	push	r12
    1f60:	df 92       	push	r13
    1f62:	ef 92       	push	r14
    1f64:	ff 92       	push	r15
    1f66:	0f 93       	push	r16
    1f68:	1f 93       	push	r17
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	10 e0       	ldi	r17, 0x00	; 0
    1f70:	81 2f       	mov	r24, r17
    1f72:	8a 95       	dec	r24
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <main+0x28>
       // CLKPR=(1<<CLKPCE); // change enable
       // CLKPR=0; // "no pre-scaler"
        _delay_loop_1(0); // 60us

        /*initialize enc28j60*/
        enc28j60Init(mymac);
    1f76:	8c e6       	ldi	r24, 0x6C	; 108
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	0e 94 98 02 	call	0x530	; 0x530 <enc28j60Init>
        enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
    1f7e:	82 e0       	ldi	r24, 0x02	; 2
    1f80:	0e 94 92 02 	call	0x524	; 0x524 <enc28j60clkout>
    1f84:	1a 95       	dec	r17
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <main+0x3a>

/* setup timer T2 as an interrupt generating time base.
* You must call once sei() in the main program */
void init_cnt2(void)
{
	cnt2step=0;
    1f88:	10 92 89 00 	sts	0x0089, r1
/*anupam*/
	TCCR0=0x05;
    1f8c:	85 e0       	ldi	r24, 0x05	; 5
    1f8e:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
    1f90:	12 be       	out	0x32, r1	; 50
	TIMSK=0x01;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	89 bf       	out	0x39, r24	; 57
        enc28j60Init(mymac);
        enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
        _delay_loop_1(0); // 60us
        
        init_cnt2();
        sei();
    1f96:	78 94       	sei
        /* Magjack leds configuration, see enc28j60 datasheet, page 11 */
        // LEDB=yellow LEDA=green
        //
        // 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
        // enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
        enc28j60PhyWrite(PHLCON,0x476);
    1f98:	84 e1       	ldi	r24, 0x14	; 20
    1f9a:	66 e7       	ldi	r22, 0x76	; 118
    1f9c:	74 e0       	ldi	r23, 0x04	; 4
    1f9e:	0e 94 74 02 	call	0x4e8	; 0x4e8 <enc28j60PhyWrite>
        DDRD=0x00;
    1fa2:	11 ba       	out	0x11, r1	; 17
		PORTD=0xFF;
    1fa4:	8f ef       	ldi	r24, 0xFF	; 255
    1fa6:	82 bb       	out	0x12, r24	; 18
        DDRA|= (1<<DDA6); // LED, enable PB1, LED as output
    1fa8:	d6 9a       	sbi	0x1a, 6	; 26
        LEDOFF;
    1faa:	de 9a       	sbi	0x1b, 6	; 27

// This initializes the web server
// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint16_t port){
        uint8_t i=0;
        wwwport_h=(port>>8)&0xff;
    1fac:	10 92 94 00 	sts	0x0094, r1
        wwwport_l=(port&0xff);
    1fb0:	80 e5       	ldi	r24, 0x50	; 80
    1fb2:	80 93 81 00 	sts	0x0081, r24
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
        while(i<4){
                ipaddr[i]=myip[i];
    1fba:	f9 01       	movw	r30, r18
    1fbc:	e2 54       	subi	r30, 0x42	; 66
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	d9 01       	movw	r26, r18
    1fc2:	ae 58       	subi	r26, 0x8E	; 142
    1fc4:	bf 4f       	sbci	r27, 0xFF	; 255
    1fc6:	8c 91       	ld	r24, X
    1fc8:	80 83       	st	Z, r24
    1fca:	2f 5f       	subi	r18, 0xFF	; 255
    1fcc:	3f 4f       	sbci	r19, 0xFF	; 255
// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint16_t port){
        uint8_t i=0;
        wwwport_h=(port>>8)&0xff;
        wwwport_l=(port&0xff);
        while(i<4){
    1fce:	24 30       	cpi	r18, 0x04	; 4
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	99 f7       	brne	.-26     	; 0x1fba <main+0x70>
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
                macaddr[i]=mymac[i];
    1fd8:	f9 01       	movw	r30, r18
    1fda:	e8 54       	subi	r30, 0x48	; 72
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	d9 01       	movw	r26, r18
    1fe0:	a4 59       	subi	r26, 0x94	; 148
    1fe2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe4:	8c 91       	ld	r24, X
    1fe6:	80 83       	st	Z, r24
    1fe8:	2f 5f       	subi	r18, 0xFF	; 255
    1fea:	3f 4f       	sbci	r19, 0xFF	; 255
        while(i<4){
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
    1fec:	26 30       	cpi	r18, 0x06	; 6
    1fee:	31 05       	cpc	r19, r1
    1ff0:	99 f7       	brne	.-26     	; 0x1fd8 <main+0x8e>
}

void client_set_gwip(uint8_t *gwipaddr)
{
        uint8_t i=0;
        waitgwmac=WGW_INITIAL_ARP; // causes an arp request in the packet loop
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	80 93 8d 00 	sts	0x008D, r24
    1ff8:	86 e7       	ldi	r24, 0x76	; 118
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
        while(i<4){
                gwip[i]=gwipaddr[i];
    1ffc:	01 96       	adiw	r24, 0x01	; 1

void client_set_gwip(uint8_t *gwipaddr)
{
        uint8_t i=0;
        waitgwmac=WGW_INITIAL_ARP; // causes an arp request in the packet loop
        while(i<4){
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	8a 37       	cpi	r24, 0x7A	; 122
    2002:	92 07       	cpc	r25, r18
    2004:	d9 f7       	brne	.-10     	; 0x1ffc <main+0xb2>
}
#endif // WWW_client

void register_ping_rec_callback(void (*callback)(uint8_t *srcip))
{
        icmp_callback=callback;
    2006:	8f e6       	ldi	r24, 0x6F	; 111
    2008:	9d e0       	ldi	r25, 0x0D	; 13
    200a:	90 93 b1 00 	sts	0x00B1, r25
    200e:	80 93 b0 00 	sts	0x00B0, r24
                                LEDON;
                                sec=0;
                                start_web_client=2;
                                web_client_attempts++;
                               // mk_net_str(str,pingsrcip,4,'.',10);
                                urlencode(PSTR("ddanupam"),urlvarstr);
    2012:	e6 ec       	ldi	r30, 0xC6	; 198
    2014:	2e 2e       	mov	r2, r30
    2016:	e0 e0       	ldi	r30, 0x00	; 0
    2018:	3e 2e       	mov	r3, r30
                                client_browse_url(PSTR("/cgi-bin/upld?pingIP=chi&y="),urlvarstr,PSTR(WEBSERVER_VHOST),&browserresult_callback);
    201a:	75 ed       	ldi	r23, 0xD5	; 213
    201c:	47 2e       	mov	r4, r23
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	57 2e       	mov	r5, r23
    2022:	65 ec       	ldi	r22, 0xC5	; 197
    2024:	86 2e       	mov	r8, r22
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	96 2e       	mov	r9, r22
{
        client_urlbuf=urlbuf;
        client_urlbuf_var=urlbuf_varpart;
        client_hoststr=hoststr;
        browsertype=0;
        client_browser_callback=callback;
    202a:	54 e8       	ldi	r21, 0x84	; 132
    202c:	65 2e       	mov	r6, r21
    202e:	5d e0       	ldi	r21, 0x0D	; 13
    2030:	75 2e       	mov	r7, r21
// We use callback functions because that saves memory and a uC is very
// limited in memory
//
uint8_t client_tcp_req(uint8_t (*result_callback)(uint8_t fd,uint8_t statuscode,uint16_t data_start_pos_in_buf, uint16_t len_of_data),uint16_t (*datafill_callback)(uint8_t fd),uint16_t port)
{
        client_tcp_result_callback=result_callback;
    2032:	45 e9       	ldi	r20, 0x95	; 149
    2034:	a4 2e       	mov	r10, r20
    2036:	4d e0       	ldi	r20, 0x0D	; 13
    2038:	b4 2e       	mov	r11, r20
        client_tcp_datafill_callback=datafill_callback;
    203a:	34 e3       	ldi	r19, 0x34	; 52
    203c:	c3 2e       	mov	r12, r19
    203e:	31 e1       	ldi	r19, 0x11	; 17
    2040:	d3 2e       	mov	r13, r19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2042:	20 e9       	ldi	r18, 0x90	; 144
    2044:	e2 2e       	mov	r14, r18
    2046:	21 e0       	ldi	r18, 0x01	; 1
    2048:	f2 2e       	mov	r15, r18

        while(1){
                // handle ping and wait for a tcp packet
                //
                // handle ping and wait for a tcp packet
                plen=enc28j60PacketReceive(BUFFER_SIZE, buf);
    204a:	8a e8       	ldi	r24, 0x8A	; 138
    204c:	92 e0       	ldi	r25, 0x02	; 2
    204e:	6b ed       	ldi	r22, 0xDB	; 219
    2050:	70 e0       	ldi	r23, 0x00	; 0
    2052:	0e 94 cf 03 	call	0x79e	; 0x79e <enc28j60PacketReceive>
    2056:	ec 01       	movw	r28, r24
                dat_p=packetloop_icmp_tcp(buf,plen);
    2058:	8b ed       	ldi	r24, 0xDB	; 219
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	be 01       	movw	r22, r28
    205e:	0e 94 d6 09 	call	0x13ac	; 0x13ac <packetloop_icmp_tcp>
    2062:	8c 01       	movw	r16, r24
                if(plen==0){
    2064:	20 97       	sbiw	r28, 0x00	; 0
    2066:	09 f0       	breq	.+2      	; 0x206a <main+0x120>
    2068:	9b c0       	rjmp	.+310    	; 0x21a0 <main+0x256>
                        // we are idle here
						if((PIND&0x01)==0)
    206a:	80 99       	sbic	0x10, 0	; 16
    206c:	12 c0       	rjmp	.+36     	; 0x2092 <main+0x148>
						{
						 LEDON;_delay_ms(500);
    206e:	de 98       	cbi	0x1b, 6	; 27
    2070:	88 e8       	ldi	r24, 0x88	; 136
    2072:	93 e1       	ldi	r25, 0x13	; 19
    2074:	f7 01       	movw	r30, r14
    2076:	31 97       	sbiw	r30, 0x01	; 1
    2078:	f1 f7       	brne	.-4      	; 0x2076 <main+0x12c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207c:	d9 f7       	brne	.-10     	; 0x2074 <main+0x12a>
						 while((PIND&0x01)!=1);
    207e:	80 9b       	sbis	0x10, 0	; 16
    2080:	fe cf       	rjmp	.-4      	; 0x207e <main+0x134>
						 LEDOFF;trigger();
    2082:	de 9a       	sbi	0x1b, 6	; 27
                LEDOFF;
        }
}
void trigger(void)
{
if (start_web_client==0){
    2084:	80 91 86 00 	lds	r24, 0x0086
    2088:	88 23       	and	r24, r24
    208a:	19 f4       	brne	.+6      	; 0x2092 <main+0x148>
                start_web_client=1;
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	80 93 86 00 	sts	0x0086, r24
        enc28j60PacketSend(0x2a,buf);
}

uint8_t client_waiting_gw(void)
{
        if (waitgwmac & WGW_HAVE_GW_MAC){
    2092:	80 91 8d 00 	lds	r24, 0x008D
    2096:	81 ff       	sbrs	r24, 1
    2098:	d8 cf       	rjmp	.-80     	; 0x204a <main+0x100>
						
						}
                        if (client_waiting_gw() ){
                                continue;
                        }
                        if (dns_state==0){
    209a:	80 91 84 00 	lds	r24, 0x0084
    209e:	88 23       	and	r24, r24
    20a0:	61 f4       	brne	.+24     	; 0x20ba <main+0x170>
                                sec=0;
    20a2:	10 92 85 00 	sts	0x0085, r1
                                dns_state=1;
    20a6:	21 e0       	ldi	r18, 0x01	; 1
    20a8:	20 93 84 00 	sts	0x0084, r18
                                dnslkup_request(buf,PSTR(WEBSERVER_VHOST));
    20ac:	8b ed       	ldi	r24, 0xDB	; 219
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	6a ef       	ldi	r22, 0xFA	; 250
    20b2:	70 e0       	ldi	r23, 0x00	; 0
    20b4:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <dnslkup_request>
    20b8:	c8 cf       	rjmp	.-112    	; 0x204a <main+0x100>
                                continue;
                        }
                        if (dns_state==1 && dnslkup_haveanswer()){
    20ba:	81 30       	cpi	r24, 0x01	; 1
    20bc:	b1 f4       	brne	.+44     	; 0x20ea <main+0x1a0>
    20be:	80 91 8c 00 	lds	r24, 0x008C
    20c2:	88 23       	and	r24, r24
    20c4:	91 f0       	breq	.+36     	; 0x20ea <main+0x1a0>
                                dns_state=2;
    20c6:	82 e0       	ldi	r24, 0x02	; 2
    20c8:	80 93 84 00 	sts	0x0084, r24
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
#if defined (TCP_client)
void client_tcp_set_serverip(uint8_t *ipaddr)
{
        uint8_t i=0;
        while(i<4){
                tcpsrvip[i]=ipaddr[i];
    20d0:	f9 01       	movw	r30, r18
    20d2:	e4 56       	subi	r30, 0x64	; 100
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	d9 01       	movw	r26, r18
    20d8:	ae 53       	subi	r26, 0x3E	; 62
    20da:	bf 4f       	sbci	r27, 0xFF	; 255
    20dc:	8c 91       	ld	r24, X
    20de:	80 83       	st	Z, r24
    20e0:	2f 5f       	subi	r18, 0xFF	; 255
    20e2:	3f 4f       	sbci	r19, 0xFF	; 255

#if defined (TCP_client)
void client_tcp_set_serverip(uint8_t *ipaddr)
{
        uint8_t i=0;
        while(i<4){
    20e4:	24 30       	cpi	r18, 0x04	; 4
    20e6:	31 05       	cpc	r19, r1
    20e8:	99 f7       	brne	.-26     	; 0x20d0 <main+0x186>
                                client_set_wwwip(dnslkup_getip());
                        }
                        if (dns_state!=2){
    20ea:	80 91 84 00 	lds	r24, 0x0084
    20ee:	82 30       	cpi	r24, 0x02	; 2
    20f0:	41 f0       	breq	.+16     	; 0x2102 <main+0x1b8>
                                // retry every minute if dns-lookup failed:
                                if (sec > 60){
    20f2:	80 91 85 00 	lds	r24, 0x0085
    20f6:	8d 33       	cpi	r24, 0x3D	; 61
    20f8:	08 f4       	brcc	.+2      	; 0x20fc <main+0x1b2>
    20fa:	a7 cf       	rjmp	.-178    	; 0x204a <main+0x100>
                                        dns_state=0;
    20fc:	10 92 84 00 	sts	0x0084, r1
    2100:	a4 cf       	rjmp	.-184    	; 0x204a <main+0x100>
                                // don't try to use web client before
                                // we have a result of dns-lookup
                                continue;
                        }
                        //----------
                        if (start_web_client==1){
    2102:	10 91 86 00 	lds	r17, 0x0086
    2106:	11 30       	cpi	r17, 0x01	; 1
    2108:	f1 f5       	brne	.+124    	; 0x2186 <main+0x23c>
                                LEDON;
    210a:	de 98       	cbi	0x1b, 6	; 27
                                sec=0;
    210c:	10 92 85 00 	sts	0x0085, r1
                                start_web_client=2;
    2110:	80 93 86 00 	sts	0x0086, r24
                                web_client_attempts++;
    2114:	80 91 87 00 	lds	r24, 0x0087
    2118:	8f 5f       	subi	r24, 0xFF	; 255
    211a:	80 93 87 00 	sts	0x0087, r24
                               // mk_net_str(str,pingsrcip,4,'.',10);
                                urlencode(PSTR("ddanupam"),urlvarstr);
    211e:	81 ef       	ldi	r24, 0xF1	; 241
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	66 ec       	ldi	r22, 0xC6	; 198
    2124:	70 e0       	ldi	r23, 0x00	; 0
    2126:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <urlencode>
                                client_browse_url(PSTR("/cgi-bin/upld?pingIP=chi&y="),urlvarstr,PSTR(WEBSERVER_VHOST),&browserresult_callback);
    212a:	50 92 ab 00 	sts	0x00AB, r5
    212e:	40 92 aa 00 	sts	0x00AA, r4
// answer. Any other statuscode than 0 and 1 is a total communication failure.
//
void client_browse_url(prog_char *urlbuf, char *urlbuf_varpart, prog_char *hoststr,void (*callback)(uint8_t,uint16_t,uint16_t))
{
        client_urlbuf=urlbuf;
        client_urlbuf_var=urlbuf_varpart;
    2132:	30 92 ad 00 	sts	0x00AD, r3
    2136:	20 92 ac 00 	sts	0x00AC, r2
    213a:	90 92 af 00 	sts	0x00AF, r9
    213e:	80 92 ae 00 	sts	0x00AE, r8
        client_hoststr=hoststr;
        browsertype=0;
    2142:	10 92 97 00 	sts	0x0097, r1
        client_browser_callback=callback;
    2146:	70 92 a5 00 	sts	0x00A5, r7
    214a:	60 92 a4 00 	sts	0x00A4, r6
// We use callback functions because that saves memory and a uC is very
// limited in memory
//
uint8_t client_tcp_req(uint8_t (*result_callback)(uint8_t fd,uint8_t statuscode,uint16_t data_start_pos_in_buf, uint16_t len_of_data),uint16_t (*datafill_callback)(uint8_t fd),uint16_t port)
{
        client_tcp_result_callback=result_callback;
    214e:	b0 92 a1 00 	sts	0x00A1, r11
    2152:	a0 92 a0 00 	sts	0x00A0, r10
        client_tcp_datafill_callback=datafill_callback;
    2156:	d0 92 a3 00 	sts	0x00A3, r13
    215a:	c0 92 a2 00 	sts	0x00A2, r12
        tcp_client_port_h=(port>>8) & 0xff;
    215e:	10 92 90 00 	sts	0x0090, r1
        tcp_client_port_l=(port & 0xff);
    2162:	20 e5       	ldi	r18, 0x50	; 80
    2164:	20 93 91 00 	sts	0x0091, r18
        tcp_client_state=1; // send a syn
    2168:	10 93 8e 00 	sts	0x008E, r17
        tcp_fd++;
    216c:	80 91 8f 00 	lds	r24, 0x008F
    2170:	8f 5f       	subi	r24, 0xFF	; 255
    2172:	80 93 8f 00 	sts	0x008F, r24
        if (tcp_fd>7){
    2176:	88 30       	cpi	r24, 0x08	; 8
    2178:	10 f0       	brcs	.+4      	; 0x217e <main+0x234>
                tcp_fd=0;
    217a:	10 92 8f 00 	sts	0x008F, r1
        client_urlbuf=urlbuf;
        client_urlbuf_var=urlbuf_varpart;
        client_hoststr=hoststr;
        browsertype=0;
        client_browser_callback=callback;
        www_fd=client_tcp_req(&www_client_internal_result_callback,&www_client_internal_datafill_callback,80);
    217e:	80 91 8f 00 	lds	r24, 0x008F
    2182:	80 93 98 00 	sts	0x0098, r24
                        }
                        // reset after a delay to prevent permanent bouncing
                        if (sec>60 && start_web_client==2){
    2186:	80 91 85 00 	lds	r24, 0x0085
    218a:	8d 33       	cpi	r24, 0x3D	; 61
    218c:	08 f4       	brcc	.+2      	; 0x2190 <main+0x246>
    218e:	5d cf       	rjmp	.-326    	; 0x204a <main+0x100>
    2190:	80 91 86 00 	lds	r24, 0x0086
    2194:	82 30       	cpi	r24, 0x02	; 2
    2196:	09 f0       	breq	.+2      	; 0x219a <main+0x250>
    2198:	58 cf       	rjmp	.-336    	; 0x204a <main+0x100>
                                start_web_client=0;
    219a:	10 92 86 00 	sts	0x0086, r1
    219e:	55 cf       	rjmp	.-342    	; 0x204a <main+0x100>
                        }
                        continue;
                }
                if(dat_p==0){ // plen!=0
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	31 f4       	brne	.+12     	; 0x21b0 <main+0x266>
                        // check for incomming messages not processed
                        // as part of packetloop_icmp_tcp, e.g udp messages
                        udp_client_check_for_dns_answer(buf,plen);
    21a4:	8b ed       	ldi	r24, 0xDB	; 219
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	be 01       	movw	r22, r28
    21aa:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <udp_client_check_for_dns_answer>
    21ae:	4d cf       	rjmp	.-358    	; 0x204a <main+0x100>
                        continue;
                }
                        
                if (strncmp("GET ",(char *)&(buf[dat_p]),4)!=0){
    21b0:	bc 01       	movw	r22, r24
    21b2:	65 52       	subi	r22, 0x25	; 37
    21b4:	7f 4f       	sbci	r23, 0xFF	; 255
    21b6:	84 e6       	ldi	r24, 0x64	; 100
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	44 e0       	ldi	r20, 0x04	; 4
    21bc:	50 e0       	ldi	r21, 0x00	; 0
    21be:	0e 94 db 12 	call	0x25b6	; 0x25b6 <strncmp>
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	f1 f0       	breq	.+60     	; 0x2202 <main+0x2b8>
    21c6:	60 e0       	ldi	r22, 0x00	; 0
    21c8:	70 e0       	ldi	r23, 0x00	; 0
    21ca:	06 c0       	rjmp	.+12     	; 0x21d8 <main+0x28e>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    21cc:	fb 01       	movw	r30, r22
    21ce:	e5 52       	subi	r30, 0x25	; 37
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	86 ab       	std	Z+54, r24	; 0x36
                pos++;
    21d4:	6f 5f       	subi	r22, 0xFF	; 255
    21d6:	7f 4f       	sbci	r23, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    21d8:	fb 01       	movw	r30, r22
    21da:	e4 5d       	subi	r30, 0xD4	; 212
    21dc:	fd 4f       	sbci	r31, 0xFD	; 253
    21de:	84 91       	lpm	r24, Z+
    21e0:	88 23       	and	r24, r24
    21e2:	a1 f7       	brne	.-24     	; 0x21cc <main+0x282>
    21e4:	db 01       	movw	r26, r22
    21e6:	af 5e       	subi	r26, 0xEF	; 239
    21e8:	be 4f       	sbci	r27, 0xFE	; 254
                        // head, post and other methods:
                        //
                        // for possible status codes see:
                        // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
                        dat_p=http200ok();
                        dat_p=fill_tcp_data_p(buf,dat_p,PSTR("<h1>200 OK</h1>"));
    21ea:	85 eb       	ldi	r24, 0xB5	; 181
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	03 c0       	rjmp	.+6      	; 0x21f6 <main+0x2ac>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    21f0:	2d 93       	st	X+, r18
                pos++;
    21f2:	6f 5f       	subi	r22, 0xFF	; 255
    21f4:	7f 4f       	sbci	r23, 0xFF	; 255
    21f6:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    21f8:	01 96       	adiw	r24, 0x01	; 1
    21fa:	24 91       	lpm	r18, Z+
    21fc:	22 23       	and	r18, r18
    21fe:	c1 f7       	brne	.-16     	; 0x21f0 <main+0x2a6>
    2200:	2e c0       	rjmp	.+92     	; 0x225e <main+0x314>
                        goto SENDTCP;
                }
                if (strncmp("/ ",(char *)&(buf[dat_p+4]),2)==0){
    2202:	01 52       	subi	r16, 0x21	; 33
    2204:	1f 4f       	sbci	r17, 0xFF	; 255
    2206:	89 e6       	ldi	r24, 0x69	; 105
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	b8 01       	movw	r22, r16
    220c:	42 e0       	ldi	r20, 0x02	; 2
    220e:	50 e0       	ldi	r21, 0x00	; 0
    2210:	0e 94 db 12 	call	0x25b6	; 0x25b6 <strncmp>
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	19 f0       	breq	.+6      	; 0x221e <main+0x2d4>
    2218:	60 e0       	ldi	r22, 0x00	; 0
    221a:	70 e0       	ldi	r23, 0x00	; 0
    221c:	1a c0       	rjmp	.+52     	; 0x2252 <main+0x308>
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	05 c0       	rjmp	.+10     	; 0x222e <main+0x2e4>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    2224:	fc 01       	movw	r30, r24
    2226:	e5 52       	subi	r30, 0x25	; 37
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	26 ab       	std	Z+54, r18	; 0x36
                pos++;
    222c:	01 96       	adiw	r24, 0x01	; 1
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    222e:	fc 01       	movw	r30, r24
    2230:	e4 5d       	subi	r30, 0xD4	; 212
    2232:	fd 4f       	sbci	r31, 0xFD	; 253
    2234:	24 91       	lpm	r18, Z+
    2236:	22 23       	and	r18, r18
    2238:	a9 f7       	brne	.-22     	; 0x2224 <main+0x2da>
                        dat_p=http200ok();
                        dat_p=print_webpage(buf);
    223a:	8b ed       	ldi	r24, 0xDB	; 219
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <print_webpage>
    2242:	bc 01       	movw	r22, r24
    2244:	0c c0       	rjmp	.+24     	; 0x225e <main+0x314>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    2246:	fb 01       	movw	r30, r22
    2248:	e5 52       	subi	r30, 0x25	; 37
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	86 ab       	std	Z+54, r24	; 0x36
                pos++;
    224e:	6f 5f       	subi	r22, 0xFF	; 255
    2250:	7f 4f       	sbci	r23, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    2252:	fb 01       	movw	r30, r22
    2254:	eb 59       	subi	r30, 0x9B	; 155
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	84 91       	lpm	r24, Z+
    225a:	88 23       	and	r24, r24
    225c:	a1 f7       	brne	.-24     	; 0x2246 <main+0x2fc>
                        dat_p=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 401 Unauthorized\r\nContent-Type: text/html\r\n\r\n<h1>401 Unauthorized</h1>"));
                        goto SENDTCP;
                }
                //
SENDTCP:
                www_server_reply(buf,dat_p); // send data
    225e:	8b ed       	ldi	r24, 0xDB	; 219
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	0e 94 51 07 	call	0xea2	; 0xea2 <www_server_reply>
    2266:	f1 ce       	rjmp	.-542    	; 0x204a <main+0x100>

00002268 <www_client_internal_datafill_callback>:
        return(tcp_fd);
}
#endif //  TCP_client

#if defined (WWW_client) 
uint16_t www_client_internal_datafill_callback(uint8_t fd){
    2268:	cf 92       	push	r12
    226a:	df 92       	push	r13
    226c:	ef 92       	push	r14
    226e:	ff 92       	push	r15
    2270:	0f 93       	push	r16
    2272:	1f 93       	push	r17
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	00 d0       	rcall	.+0      	; 0x227a <www_client_internal_datafill_callback+0x12>
    227a:	00 d0       	rcall	.+0      	; 0x227c <www_client_internal_datafill_callback+0x14>
    227c:	0f 92       	push	r0
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
        char strbuf[5];
        uint16_t len=0;
        if (fd==www_fd){
    2282:	90 91 98 00 	lds	r25, 0x0098
    2286:	89 17       	cp	r24, r25
    2288:	19 f0       	breq	.+6      	; 0x2290 <www_client_internal_datafill_callback+0x28>
    228a:	40 e0       	ldi	r20, 0x00	; 0
    228c:	50 e0       	ldi	r21, 0x00	; 0
    228e:	66 c1       	rjmp	.+716    	; 0x255c <www_client_internal_datafill_callback+0x2f4>
                if (browsertype==0){
    2290:	80 91 97 00 	lds	r24, 0x0097
    2294:	00 91 92 00 	lds	r16, 0x0092
    2298:	10 91 93 00 	lds	r17, 0x0093
    229c:	88 23       	and	r24, r24
    229e:	09 f0       	breq	.+2      	; 0x22a2 <www_client_internal_datafill_callback+0x3a>
    22a0:	67 c0       	rjmp	.+206    	; 0x2370 <www_client_internal_datafill_callback+0x108>
                        // GET
                        len=fill_tcp_data_p(bufptr,0,PSTR("GET "));
    22a2:	d8 01       	movw	r26, r16
    22a4:	d6 96       	adiw	r26, 0x36	; 54
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	70 e0       	ldi	r23, 0x00	; 0
    22aa:	03 c0       	rjmp	.+6      	; 0x22b2 <www_client_internal_datafill_callback+0x4a>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    22ac:	8d 93       	st	X+, r24
                pos++;
    22ae:	6f 5f       	subi	r22, 0xFF	; 255
    22b0:	7f 4f       	sbci	r23, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    22b2:	fb 01       	movw	r30, r22
    22b4:	e9 5a       	subi	r30, 0xA9	; 169
    22b6:	fc 4f       	sbci	r31, 0xFC	; 252
    22b8:	84 91       	lpm	r24, Z+
    22ba:	88 23       	and	r24, r24
    22bc:	b9 f7       	brne	.-18     	; 0x22ac <www_client_internal_datafill_callback+0x44>
        uint16_t len=0;
        if (fd==www_fd){
                if (browsertype==0){
                        // GET
                        len=fill_tcp_data_p(bufptr,0,PSTR("GET "));
                        len=fill_tcp_data_p(bufptr,len,client_urlbuf);
    22be:	6a 5c       	subi	r22, 0xCA	; 202
    22c0:	7f 4f       	sbci	r23, 0xFF	; 255
    22c2:	d8 01       	movw	r26, r16
    22c4:	a6 0f       	add	r26, r22
    22c6:	b7 1f       	adc	r27, r23
    22c8:	66 53       	subi	r22, 0x36	; 54
    22ca:	70 40       	sbci	r23, 0x00	; 0
    22cc:	80 91 aa 00 	lds	r24, 0x00AA
    22d0:	90 91 ab 00 	lds	r25, 0x00AB
    22d4:	9c 01       	movw	r18, r24
    22d6:	03 c0       	rjmp	.+6      	; 0x22de <www_client_internal_datafill_callback+0x76>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    22d8:	8d 93       	st	X+, r24
                pos++;
    22da:	6f 5f       	subi	r22, 0xFF	; 255
    22dc:	7f 4f       	sbci	r23, 0xFF	; 255
    22de:	f9 01       	movw	r30, r18
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    22e0:	2f 5f       	subi	r18, 0xFF	; 255
    22e2:	3f 4f       	sbci	r19, 0xFF	; 255
    22e4:	84 91       	lpm	r24, Z+
    22e6:	88 23       	and	r24, r24
    22e8:	b9 f7       	brne	.-18     	; 0x22d8 <www_client_internal_datafill_callback+0x70>
        if (fd==www_fd){
                if (browsertype==0){
                        // GET
                        len=fill_tcp_data_p(bufptr,0,PSTR("GET "));
                        len=fill_tcp_data_p(bufptr,len,client_urlbuf);
                        len=fill_tcp_data(bufptr,len,client_urlbuf_var);
    22ea:	40 91 ac 00 	lds	r20, 0x00AC
    22ee:	50 91 ad 00 	lds	r21, 0x00AD
    22f2:	c8 01       	movw	r24, r16
    22f4:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <fill_tcp_data>
    22f8:	ac 01       	movw	r20, r24
    22fa:	4a 5c       	subi	r20, 0xCA	; 202
    22fc:	5f 4f       	sbci	r21, 0xFF	; 255
    22fe:	d8 01       	movw	r26, r16
    2300:	a4 0f       	add	r26, r20
    2302:	b5 1f       	adc	r27, r21
    2304:	46 53       	subi	r20, 0x36	; 54
    2306:	50 40       	sbci	r21, 0x00	; 0
                        // I would prefer http/1.0 but there is a funny
                        // bug in some apache webservers which causes
                        // them to send two packets (fragmented PDU)
                        // if we don't use HTTP/1.1 + Connection: close
                        len=fill_tcp_data_p(bufptr,len,PSTR(" HTTP/1.1\r\nHost: "));
    2308:	85 e4       	ldi	r24, 0x45	; 69
    230a:	93 e0       	ldi	r25, 0x03	; 3
    230c:	03 c0       	rjmp	.+6      	; 0x2314 <www_client_internal_datafill_callback+0xac>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    230e:	2d 93       	st	X+, r18
                pos++;
    2310:	4f 5f       	subi	r20, 0xFF	; 255
    2312:	5f 4f       	sbci	r21, 0xFF	; 255
    2314:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    2316:	01 96       	adiw	r24, 0x01	; 1
    2318:	24 91       	lpm	r18, Z+
    231a:	22 23       	and	r18, r18
    231c:	c1 f7       	brne	.-16     	; 0x230e <www_client_internal_datafill_callback+0xa6>
                        // I would prefer http/1.0 but there is a funny
                        // bug in some apache webservers which causes
                        // them to send two packets (fragmented PDU)
                        // if we don't use HTTP/1.1 + Connection: close
                        len=fill_tcp_data_p(bufptr,len,PSTR(" HTTP/1.1\r\nHost: "));
                        len=fill_tcp_data_p(bufptr,len,client_hoststr);
    231e:	4a 5c       	subi	r20, 0xCA	; 202
    2320:	5f 4f       	sbci	r21, 0xFF	; 255
    2322:	d8 01       	movw	r26, r16
    2324:	a4 0f       	add	r26, r20
    2326:	b5 1f       	adc	r27, r21
    2328:	46 53       	subi	r20, 0x36	; 54
    232a:	50 40       	sbci	r21, 0x00	; 0
    232c:	80 91 ae 00 	lds	r24, 0x00AE
    2330:	90 91 af 00 	lds	r25, 0x00AF
    2334:	9c 01       	movw	r18, r24
    2336:	03 c0       	rjmp	.+6      	; 0x233e <www_client_internal_datafill_callback+0xd6>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    2338:	8d 93       	st	X+, r24
                pos++;
    233a:	4f 5f       	subi	r20, 0xFF	; 255
    233c:	5f 4f       	sbci	r21, 0xFF	; 255
    233e:	f9 01       	movw	r30, r18
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    2340:	2f 5f       	subi	r18, 0xFF	; 255
    2342:	3f 4f       	sbci	r19, 0xFF	; 255
    2344:	84 91       	lpm	r24, Z+
    2346:	88 23       	and	r24, r24
    2348:	b9 f7       	brne	.-18     	; 0x2338 <www_client_internal_datafill_callback+0xd0>
    234a:	4a 5c       	subi	r20, 0xCA	; 202
    234c:	5f 4f       	sbci	r21, 0xFF	; 255
    234e:	d8 01       	movw	r26, r16
    2350:	a4 0f       	add	r26, r20
    2352:	b5 1f       	adc	r27, r21
    2354:	46 53       	subi	r20, 0x36	; 54
    2356:	50 40       	sbci	r21, 0x00	; 0
                        // bug in some apache webservers which causes
                        // them to send two packets (fragmented PDU)
                        // if we don't use HTTP/1.1 + Connection: close
                        len=fill_tcp_data_p(bufptr,len,PSTR(" HTTP/1.1\r\nHost: "));
                        len=fill_tcp_data_p(bufptr,len,client_hoststr);
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nUser-Agent: tgr/1.0\r\nAccept: text/html\r\nConnection: close\r\n\r\n"));
    2358:	85 e0       	ldi	r24, 0x05	; 5
    235a:	93 e0       	ldi	r25, 0x03	; 3
    235c:	03 c0       	rjmp	.+6      	; 0x2364 <www_client_internal_datafill_callback+0xfc>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    235e:	2d 93       	st	X+, r18
                pos++;
    2360:	4f 5f       	subi	r20, 0xFF	; 255
    2362:	5f 4f       	sbci	r21, 0xFF	; 255
    2364:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    2366:	01 96       	adiw	r24, 0x01	; 1
    2368:	24 91       	lpm	r18, Z+
    236a:	22 23       	and	r18, r18
    236c:	c1 f7       	brne	.-16     	; 0x235e <www_client_internal_datafill_callback+0xf6>
    236e:	f6 c0       	rjmp	.+492    	; 0x255c <www_client_internal_datafill_callback+0x2f4>
                        len=fill_tcp_data_p(bufptr,len,PSTR(" HTTP/1.1\r\nHost: "));
                        len=fill_tcp_data_p(bufptr,len,client_hoststr);
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nUser-Agent: tgr/1.0\r\nAccept: text/html\r\nConnection: close\r\n\r\n"));
                }else{
                        // POST
                        len=fill_tcp_data_p(bufptr,0,PSTR("POST "));
    2370:	d8 01       	movw	r26, r16
    2372:	d6 96       	adiw	r26, 0x36	; 54
    2374:	ee 24       	eor	r14, r14
    2376:	ff 24       	eor	r15, r15
    2378:	04 c0       	rjmp	.+8      	; 0x2382 <www_client_internal_datafill_callback+0x11a>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    237a:	8d 93       	st	X+, r24
                pos++;
    237c:	08 94       	sec
    237e:	e1 1c       	adc	r14, r1
    2380:	f1 1c       	adc	r15, r1
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    2382:	f7 01       	movw	r30, r14
    2384:	e1 50       	subi	r30, 0x01	; 1
    2386:	fd 4f       	sbci	r31, 0xFD	; 253
    2388:	84 91       	lpm	r24, Z+
    238a:	88 23       	and	r24, r24
    238c:	b1 f7       	brne	.-20     	; 0x237a <www_client_internal_datafill_callback+0x112>
                        len=fill_tcp_data_p(bufptr,len,client_hoststr);
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nUser-Agent: tgr/1.0\r\nAccept: text/html\r\nConnection: close\r\n\r\n"));
                }else{
                        // POST
                        len=fill_tcp_data_p(bufptr,0,PSTR("POST "));
                        len=fill_tcp_data_p(bufptr,len,client_urlbuf);
    238e:	86 e3       	ldi	r24, 0x36	; 54
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	e8 0e       	add	r14, r24
    2394:	f9 1e       	adc	r15, r25
    2396:	d8 01       	movw	r26, r16
    2398:	ae 0d       	add	r26, r14
    239a:	bf 1d       	adc	r27, r15
    239c:	8a ec       	ldi	r24, 0xCA	; 202
    239e:	9f ef       	ldi	r25, 0xFF	; 255
    23a0:	e8 0e       	add	r14, r24
    23a2:	f9 1e       	adc	r15, r25
    23a4:	80 91 aa 00 	lds	r24, 0x00AA
    23a8:	90 91 ab 00 	lds	r25, 0x00AB
    23ac:	9c 01       	movw	r18, r24
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <www_client_internal_datafill_callback+0x150>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    23b0:	8d 93       	st	X+, r24
                pos++;
    23b2:	08 94       	sec
    23b4:	e1 1c       	adc	r14, r1
    23b6:	f1 1c       	adc	r15, r1
    23b8:	f9 01       	movw	r30, r18
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    23ba:	2f 5f       	subi	r18, 0xFF	; 255
    23bc:	3f 4f       	sbci	r19, 0xFF	; 255
    23be:	84 91       	lpm	r24, Z+
    23c0:	88 23       	and	r24, r24
    23c2:	b1 f7       	brne	.-20     	; 0x23b0 <www_client_internal_datafill_callback+0x148>
    23c4:	86 e3       	ldi	r24, 0x36	; 54
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	e8 0e       	add	r14, r24
    23ca:	f9 1e       	adc	r15, r25
    23cc:	d8 01       	movw	r26, r16
    23ce:	ae 0d       	add	r26, r14
    23d0:	bf 1d       	adc	r27, r15
    23d2:	8a ec       	ldi	r24, 0xCA	; 202
    23d4:	9f ef       	ldi	r25, 0xFF	; 255
    23d6:	e8 0e       	add	r14, r24
    23d8:	f9 1e       	adc	r15, r25
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nUser-Agent: tgr/1.0\r\nAccept: text/html\r\nConnection: close\r\n\r\n"));
                }else{
                        // POST
                        len=fill_tcp_data_p(bufptr,0,PSTR("POST "));
                        len=fill_tcp_data_p(bufptr,len,client_urlbuf);
                        len=fill_tcp_data_p(bufptr,len,PSTR(" HTTP/1.1\r\nHost: "));
    23da:	8d ee       	ldi	r24, 0xED	; 237
    23dc:	92 e0       	ldi	r25, 0x02	; 2
    23de:	04 c0       	rjmp	.+8      	; 0x23e8 <www_client_internal_datafill_callback+0x180>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    23e0:	2d 93       	st	X+, r18
                pos++;
    23e2:	08 94       	sec
    23e4:	e1 1c       	adc	r14, r1
    23e6:	f1 1c       	adc	r15, r1
    23e8:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    23ea:	01 96       	adiw	r24, 0x01	; 1
    23ec:	24 91       	lpm	r18, Z+
    23ee:	22 23       	and	r18, r18
    23f0:	b9 f7       	brne	.-18     	; 0x23e0 <www_client_internal_datafill_callback+0x178>
                }else{
                        // POST
                        len=fill_tcp_data_p(bufptr,0,PSTR("POST "));
                        len=fill_tcp_data_p(bufptr,len,client_urlbuf);
                        len=fill_tcp_data_p(bufptr,len,PSTR(" HTTP/1.1\r\nHost: "));
                        len=fill_tcp_data_p(bufptr,len,client_hoststr);
    23f2:	86 e3       	ldi	r24, 0x36	; 54
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	e8 0e       	add	r14, r24
    23f8:	f9 1e       	adc	r15, r25
    23fa:	d8 01       	movw	r26, r16
    23fc:	ae 0d       	add	r26, r14
    23fe:	bf 1d       	adc	r27, r15
    2400:	8a ec       	ldi	r24, 0xCA	; 202
    2402:	9f ef       	ldi	r25, 0xFF	; 255
    2404:	e8 0e       	add	r14, r24
    2406:	f9 1e       	adc	r15, r25
    2408:	80 91 ae 00 	lds	r24, 0x00AE
    240c:	90 91 af 00 	lds	r25, 0x00AF
    2410:	9c 01       	movw	r18, r24
    2412:	04 c0       	rjmp	.+8      	; 0x241c <www_client_internal_datafill_callback+0x1b4>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    2414:	8d 93       	st	X+, r24
                pos++;
    2416:	08 94       	sec
    2418:	e1 1c       	adc	r14, r1
    241a:	f1 1c       	adc	r15, r1
    241c:	f9 01       	movw	r30, r18
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    241e:	2f 5f       	subi	r18, 0xFF	; 255
    2420:	3f 4f       	sbci	r19, 0xFF	; 255
    2422:	84 91       	lpm	r24, Z+
    2424:	88 23       	and	r24, r24
    2426:	b1 f7       	brne	.-20     	; 0x2414 <www_client_internal_datafill_callback+0x1ac>
                        // POST
                        len=fill_tcp_data_p(bufptr,0,PSTR("POST "));
                        len=fill_tcp_data_p(bufptr,len,client_urlbuf);
                        len=fill_tcp_data_p(bufptr,len,PSTR(" HTTP/1.1\r\nHost: "));
                        len=fill_tcp_data_p(bufptr,len,client_hoststr);
                        if (client_additionalheaderline){
    2428:	40 91 a6 00 	lds	r20, 0x00A6
    242c:	50 91 a7 00 	lds	r21, 0x00A7
    2430:	41 15       	cp	r20, r1
    2432:	51 05       	cpc	r21, r1
    2434:	69 f1       	breq	.+90     	; 0x2490 <www_client_internal_datafill_callback+0x228>
    2436:	86 e3       	ldi	r24, 0x36	; 54
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	e8 0e       	add	r14, r24
    243c:	f9 1e       	adc	r15, r25
    243e:	d8 01       	movw	r26, r16
    2440:	ae 0d       	add	r26, r14
    2442:	bf 1d       	adc	r27, r15
    2444:	8a ec       	ldi	r24, 0xCA	; 202
    2446:	9f ef       	ldi	r25, 0xFF	; 255
    2448:	e8 0e       	add	r14, r24
    244a:	f9 1e       	adc	r15, r25
                                len=fill_tcp_data_p(bufptr,len,PSTR("\r\n"));
    244c:	8a ee       	ldi	r24, 0xEA	; 234
    244e:	92 e0       	ldi	r25, 0x02	; 2
    2450:	04 c0       	rjmp	.+8      	; 0x245a <www_client_internal_datafill_callback+0x1f2>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    2452:	2d 93       	st	X+, r18
                pos++;
    2454:	08 94       	sec
    2456:	e1 1c       	adc	r14, r1
    2458:	f1 1c       	adc	r15, r1
    245a:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    245c:	01 96       	adiw	r24, 0x01	; 1
    245e:	24 91       	lpm	r18, Z+
    2460:	22 23       	and	r18, r18
    2462:	b9 f7       	brne	.-18     	; 0x2452 <www_client_internal_datafill_callback+0x1ea>
    2464:	86 e3       	ldi	r24, 0x36	; 54
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	e8 0e       	add	r14, r24
    246a:	f9 1e       	adc	r15, r25
    246c:	d8 01       	movw	r26, r16
    246e:	ae 0d       	add	r26, r14
    2470:	bf 1d       	adc	r27, r15
    2472:	8a ec       	ldi	r24, 0xCA	; 202
    2474:	9f ef       	ldi	r25, 0xFF	; 255
    2476:	e8 0e       	add	r14, r24
    2478:	f9 1e       	adc	r15, r25
    247a:	ca 01       	movw	r24, r20
    247c:	04 c0       	rjmp	.+8      	; 0x2486 <www_client_internal_datafill_callback+0x21e>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    247e:	2d 93       	st	X+, r18
                pos++;
    2480:	08 94       	sec
    2482:	e1 1c       	adc	r14, r1
    2484:	f1 1c       	adc	r15, r1
    2486:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    2488:	01 96       	adiw	r24, 0x01	; 1
    248a:	24 91       	lpm	r18, Z+
    248c:	22 23       	and	r18, r18
    248e:	b9 f7       	brne	.-18     	; 0x247e <www_client_internal_datafill_callback+0x216>
    2490:	86 e3       	ldi	r24, 0x36	; 54
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	e8 0e       	add	r14, r24
    2496:	f9 1e       	adc	r15, r25
    2498:	d8 01       	movw	r26, r16
    249a:	ae 0d       	add	r26, r14
    249c:	bf 1d       	adc	r27, r15
    249e:	8a ec       	ldi	r24, 0xCA	; 202
    24a0:	9f ef       	ldi	r25, 0xFF	; 255
    24a2:	e8 0e       	add	r14, r24
    24a4:	f9 1e       	adc	r15, r25
                        len=fill_tcp_data_p(bufptr,len,client_hoststr);
                        if (client_additionalheaderline){
                                len=fill_tcp_data_p(bufptr,len,PSTR("\r\n"));
                                len=fill_tcp_data_p(bufptr,len,client_additionalheaderline);
                        }
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nUser-Agent: tgr/1.1\r\nAccept: */*\r\nConnection: close\r\n"));
    24a6:	82 eb       	ldi	r24, 0xB2	; 178
    24a8:	92 e0       	ldi	r25, 0x02	; 2
    24aa:	04 c0       	rjmp	.+8      	; 0x24b4 <www_client_internal_datafill_callback+0x24c>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    24ac:	2d 93       	st	X+, r18
                pos++;
    24ae:	08 94       	sec
    24b0:	e1 1c       	adc	r14, r1
    24b2:	f1 1c       	adc	r15, r1
    24b4:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    24b6:	01 96       	adiw	r24, 0x01	; 1
    24b8:	24 91       	lpm	r18, Z+
    24ba:	22 23       	and	r18, r18
    24bc:	b9 f7       	brne	.-18     	; 0x24ac <www_client_internal_datafill_callback+0x244>
    24be:	86 e3       	ldi	r24, 0x36	; 54
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	e8 0e       	add	r14, r24
    24c4:	f9 1e       	adc	r15, r25
    24c6:	d8 01       	movw	r26, r16
    24c8:	ae 0d       	add	r26, r14
    24ca:	bf 1d       	adc	r27, r15
    24cc:	8a ec       	ldi	r24, 0xCA	; 202
    24ce:	9f ef       	ldi	r25, 0xFF	; 255
    24d0:	e8 0e       	add	r14, r24
    24d2:	f9 1e       	adc	r15, r25
                        if (client_additionalheaderline){
                                len=fill_tcp_data_p(bufptr,len,PSTR("\r\n"));
                                len=fill_tcp_data_p(bufptr,len,client_additionalheaderline);
                        }
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nUser-Agent: tgr/1.1\r\nAccept: */*\r\nConnection: close\r\n"));
                        len=fill_tcp_data_p(bufptr,len,PSTR("Content-Length: "));
    24d4:	81 ea       	ldi	r24, 0xA1	; 161
    24d6:	92 e0       	ldi	r25, 0x02	; 2
    24d8:	04 c0       	rjmp	.+8      	; 0x24e2 <www_client_internal_datafill_callback+0x27a>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    24da:	2d 93       	st	X+, r18
                pos++;
    24dc:	08 94       	sec
    24de:	e1 1c       	adc	r14, r1
    24e0:	f1 1c       	adc	r15, r1
    24e2:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    24e4:	01 96       	adiw	r24, 0x01	; 1
    24e6:	24 91       	lpm	r18, Z+
    24e8:	22 23       	and	r18, r18
    24ea:	b9 f7       	brne	.-18     	; 0x24da <www_client_internal_datafill_callback+0x272>
                                len=fill_tcp_data_p(bufptr,len,PSTR("\r\n"));
                                len=fill_tcp_data_p(bufptr,len,client_additionalheaderline);
                        }
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nUser-Agent: tgr/1.1\r\nAccept: */*\r\nConnection: close\r\n"));
                        len=fill_tcp_data_p(bufptr,len,PSTR("Content-Length: "));
                        itoa(strlen(client_postval),strbuf,10);
    24ec:	e0 91 a8 00 	lds	r30, 0x00A8
    24f0:	f0 91 a9 00 	lds	r31, 0x00A9
    24f4:	df 01       	movw	r26, r30
    24f6:	0d 90       	ld	r0, X+
    24f8:	00 20       	and	r0, r0
    24fa:	e9 f7       	brne	.-6      	; 0x24f6 <www_client_internal_datafill_callback+0x28e>
    24fc:	11 97       	sbiw	r26, 0x01	; 1
    24fe:	cd 01       	movw	r24, r26
    2500:	8e 1b       	sub	r24, r30
    2502:	9f 0b       	sbc	r25, r31
    2504:	8e 01       	movw	r16, r28
    2506:	0f 5f       	subi	r16, 0xFF	; 255
    2508:	1f 4f       	sbci	r17, 0xFF	; 255
    250a:	b8 01       	movw	r22, r16
    250c:	4a e0       	ldi	r20, 0x0A	; 10
    250e:	50 e0       	ldi	r21, 0x00	; 0
    2510:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <itoa>
                        len=fill_tcp_data(bufptr,len,strbuf);
    2514:	c0 90 92 00 	lds	r12, 0x0092
    2518:	d0 90 93 00 	lds	r13, 0x0093
    251c:	c6 01       	movw	r24, r12
    251e:	b7 01       	movw	r22, r14
    2520:	a8 01       	movw	r20, r16
    2522:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <fill_tcp_data>
    2526:	bc 01       	movw	r22, r24
    2528:	6a 5c       	subi	r22, 0xCA	; 202
    252a:	7f 4f       	sbci	r23, 0xFF	; 255
    252c:	d6 01       	movw	r26, r12
    252e:	a6 0f       	add	r26, r22
    2530:	b7 1f       	adc	r27, r23
    2532:	66 53       	subi	r22, 0x36	; 54
    2534:	70 40       	sbci	r23, 0x00	; 0
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nContent-Type: application/x-www-form-urlencoded\r\n\r\n"));
    2536:	8b e6       	ldi	r24, 0x6B	; 107
    2538:	92 e0       	ldi	r25, 0x02	; 2
    253a:	03 c0       	rjmp	.+6      	; 0x2542 <www_client_internal_datafill_callback+0x2da>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    253c:	2d 93       	st	X+, r18
                pos++;
    253e:	6f 5f       	subi	r22, 0xFF	; 255
    2540:	7f 4f       	sbci	r23, 0xFF	; 255
    2542:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    2544:	01 96       	adiw	r24, 0x01	; 1
    2546:	24 91       	lpm	r18, Z+
    2548:	22 23       	and	r18, r18
    254a:	c1 f7       	brne	.-16     	; 0x253c <www_client_internal_datafill_callback+0x2d4>
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nUser-Agent: tgr/1.1\r\nAccept: */*\r\nConnection: close\r\n"));
                        len=fill_tcp_data_p(bufptr,len,PSTR("Content-Length: "));
                        itoa(strlen(client_postval),strbuf,10);
                        len=fill_tcp_data(bufptr,len,strbuf);
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nContent-Type: application/x-www-form-urlencoded\r\n\r\n"));
                        len=fill_tcp_data(bufptr,len,client_postval);
    254c:	40 91 a8 00 	lds	r20, 0x00A8
    2550:	50 91 a9 00 	lds	r21, 0x00A9
    2554:	c6 01       	movw	r24, r12
    2556:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <fill_tcp_data>
    255a:	ac 01       	movw	r20, r24
                }
                return(len);
        }
        return(0);
}
    255c:	ca 01       	movw	r24, r20
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	cf 91       	pop	r28
    256a:	df 91       	pop	r29
    256c:	1f 91       	pop	r17
    256e:	0f 91       	pop	r16
    2570:	ff 90       	pop	r15
    2572:	ef 90       	pop	r14
    2574:	df 90       	pop	r13
    2576:	cf 90       	pop	r12
    2578:	08 95       	ret

0000257a <atoi>:
    257a:	fc 01       	movw	r30, r24
    257c:	88 27       	eor	r24, r24
    257e:	99 27       	eor	r25, r25
    2580:	e8 94       	clt
    2582:	21 91       	ld	r18, Z+
    2584:	20 32       	cpi	r18, 0x20	; 32
    2586:	e9 f3       	breq	.-6      	; 0x2582 <atoi+0x8>
    2588:	29 30       	cpi	r18, 0x09	; 9
    258a:	10 f0       	brcs	.+4      	; 0x2590 <atoi+0x16>
    258c:	2e 30       	cpi	r18, 0x0E	; 14
    258e:	c8 f3       	brcs	.-14     	; 0x2582 <atoi+0x8>
    2590:	2b 32       	cpi	r18, 0x2B	; 43
    2592:	41 f0       	breq	.+16     	; 0x25a4 <atoi+0x2a>
    2594:	2d 32       	cpi	r18, 0x2D	; 45
    2596:	39 f4       	brne	.+14     	; 0x25a6 <atoi+0x2c>
    2598:	68 94       	set
    259a:	04 c0       	rjmp	.+8      	; 0x25a4 <atoi+0x2a>
    259c:	0e 94 0a 13 	call	0x2614	; 0x2614 <__mulhi_const_10>
    25a0:	82 0f       	add	r24, r18
    25a2:	91 1d       	adc	r25, r1
    25a4:	21 91       	ld	r18, Z+
    25a6:	20 53       	subi	r18, 0x30	; 48
    25a8:	2a 30       	cpi	r18, 0x0A	; 10
    25aa:	c0 f3       	brcs	.-16     	; 0x259c <atoi+0x22>
    25ac:	1e f4       	brtc	.+6      	; 0x25b4 <atoi+0x3a>
    25ae:	90 95       	com	r25
    25b0:	81 95       	neg	r24
    25b2:	9f 4f       	sbci	r25, 0xFF	; 255
    25b4:	08 95       	ret

000025b6 <strncmp>:
    25b6:	fb 01       	movw	r30, r22
    25b8:	dc 01       	movw	r26, r24
    25ba:	41 50       	subi	r20, 0x01	; 1
    25bc:	50 40       	sbci	r21, 0x00	; 0
    25be:	30 f0       	brcs	.+12     	; 0x25cc <strncmp+0x16>
    25c0:	8d 91       	ld	r24, X+
    25c2:	01 90       	ld	r0, Z+
    25c4:	80 19       	sub	r24, r0
    25c6:	19 f4       	brne	.+6      	; 0x25ce <strncmp+0x18>
    25c8:	00 20       	and	r0, r0
    25ca:	b9 f7       	brne	.-18     	; 0x25ba <strncmp+0x4>
    25cc:	88 1b       	sub	r24, r24
    25ce:	99 0b       	sbc	r25, r25
    25d0:	08 95       	ret

000025d2 <itoa>:
    25d2:	fb 01       	movw	r30, r22
    25d4:	9f 01       	movw	r18, r30
    25d6:	e8 94       	clt
    25d8:	42 30       	cpi	r20, 0x02	; 2
    25da:	c4 f0       	brlt	.+48     	; 0x260c <itoa+0x3a>
    25dc:	45 32       	cpi	r20, 0x25	; 37
    25de:	b4 f4       	brge	.+44     	; 0x260c <itoa+0x3a>
    25e0:	4a 30       	cpi	r20, 0x0A	; 10
    25e2:	29 f4       	brne	.+10     	; 0x25ee <itoa+0x1c>
    25e4:	97 fb       	bst	r25, 7
    25e6:	1e f4       	brtc	.+6      	; 0x25ee <itoa+0x1c>
    25e8:	90 95       	com	r25
    25ea:	81 95       	neg	r24
    25ec:	9f 4f       	sbci	r25, 0xFF	; 255
    25ee:	64 2f       	mov	r22, r20
    25f0:	77 27       	eor	r23, r23
    25f2:	0e 94 36 13 	call	0x266c	; 0x266c <__udivmodhi4>
    25f6:	80 5d       	subi	r24, 0xD0	; 208
    25f8:	8a 33       	cpi	r24, 0x3A	; 58
    25fa:	0c f0       	brlt	.+2      	; 0x25fe <itoa+0x2c>
    25fc:	89 5d       	subi	r24, 0xD9	; 217
    25fe:	81 93       	st	Z+, r24
    2600:	cb 01       	movw	r24, r22
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	a1 f7       	brne	.-24     	; 0x25ee <itoa+0x1c>
    2606:	16 f4       	brtc	.+4      	; 0x260c <itoa+0x3a>
    2608:	5d e2       	ldi	r21, 0x2D	; 45
    260a:	51 93       	st	Z+, r21
    260c:	10 82       	st	Z, r1
    260e:	c9 01       	movw	r24, r18
    2610:	0c 94 12 13 	jmp	0x2624	; 0x2624 <strrev>

00002614 <__mulhi_const_10>:
    2614:	7a e0       	ldi	r23, 0x0A	; 10
    2616:	97 9f       	mul	r25, r23
    2618:	90 2d       	mov	r25, r0
    261a:	87 9f       	mul	r24, r23
    261c:	80 2d       	mov	r24, r0
    261e:	91 0d       	add	r25, r1
    2620:	11 24       	eor	r1, r1
    2622:	08 95       	ret

00002624 <strrev>:
    2624:	dc 01       	movw	r26, r24
    2626:	fc 01       	movw	r30, r24
    2628:	67 2f       	mov	r22, r23
    262a:	71 91       	ld	r23, Z+
    262c:	77 23       	and	r23, r23
    262e:	e1 f7       	brne	.-8      	; 0x2628 <strrev+0x4>
    2630:	32 97       	sbiw	r30, 0x02	; 2
    2632:	04 c0       	rjmp	.+8      	; 0x263c <strrev+0x18>
    2634:	7c 91       	ld	r23, X
    2636:	6d 93       	st	X+, r22
    2638:	70 83       	st	Z, r23
    263a:	62 91       	ld	r22, -Z
    263c:	ae 17       	cp	r26, r30
    263e:	bf 07       	cpc	r27, r31
    2640:	c8 f3       	brcs	.-14     	; 0x2634 <strrev+0x10>
    2642:	08 95       	ret

00002644 <isalnum>:
    2644:	91 11       	cpse	r25, r1
    2646:	06 c0       	rjmp	.+12     	; 0x2654 <__ctype_isfalse>
    2648:	80 53       	subi	r24, 0x30	; 48
    264a:	8a 50       	subi	r24, 0x0A	; 10
    264c:	10 f0       	brcs	.+4      	; 0x2652 <isalnum+0xe>
    264e:	86 5c       	subi	r24, 0xC6	; 198
    2650:	06 c0       	rjmp	.+12     	; 0x265e <isalpha>
    2652:	08 95       	ret

00002654 <__ctype_isfalse>:
    2654:	99 27       	eor	r25, r25
    2656:	88 27       	eor	r24, r24

00002658 <__ctype_istrue>:
    2658:	08 95       	ret

0000265a <isupper>:
    265a:	85 fd       	sbrc	r24, 5
    265c:	fb cf       	rjmp	.-10     	; 0x2654 <__ctype_isfalse>

0000265e <isalpha>:
    265e:	80 62       	ori	r24, 0x20	; 32

00002660 <islower>:
    2660:	91 11       	cpse	r25, r1
    2662:	f8 cf       	rjmp	.-16     	; 0x2654 <__ctype_isfalse>
    2664:	81 56       	subi	r24, 0x61	; 97
    2666:	8a 51       	subi	r24, 0x1A	; 26
    2668:	e0 f7       	brcc	.-8      	; 0x2662 <islower+0x2>
    266a:	08 95       	ret

0000266c <__udivmodhi4>:
    266c:	aa 1b       	sub	r26, r26
    266e:	bb 1b       	sub	r27, r27
    2670:	51 e1       	ldi	r21, 0x11	; 17
    2672:	07 c0       	rjmp	.+14     	; 0x2682 <__udivmodhi4_ep>

00002674 <__udivmodhi4_loop>:
    2674:	aa 1f       	adc	r26, r26
    2676:	bb 1f       	adc	r27, r27
    2678:	a6 17       	cp	r26, r22
    267a:	b7 07       	cpc	r27, r23
    267c:	10 f0       	brcs	.+4      	; 0x2682 <__udivmodhi4_ep>
    267e:	a6 1b       	sub	r26, r22
    2680:	b7 0b       	sbc	r27, r23

00002682 <__udivmodhi4_ep>:
    2682:	88 1f       	adc	r24, r24
    2684:	99 1f       	adc	r25, r25
    2686:	5a 95       	dec	r21
    2688:	a9 f7       	brne	.-22     	; 0x2674 <__udivmodhi4_loop>
    268a:	80 95       	com	r24
    268c:	90 95       	com	r25
    268e:	bc 01       	movw	r22, r24
    2690:	cd 01       	movw	r24, r26
    2692:	08 95       	ret

00002694 <_exit>:
    2694:	f8 94       	cli

00002696 <__stop_program>:
    2696:	ff cf       	rjmp	.-2      	; 0x2696 <__stop_program>
