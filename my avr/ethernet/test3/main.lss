
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  000013d0  00001464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000238  008000a8  008000a8  000014ac  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000014ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000353  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017a9  00000000  00000000  0000181f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000339  00000000  00000000  00002fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001505  00000000  00000000  00003301  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  00004808  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049a  00000000  00000000  00004a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f9a  00000000  00000000  00004f22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00005ebc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__ctors_end>
       4:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
       8:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
       c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      10:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      14:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      18:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      1c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      20:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      24:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      28:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      2c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      30:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      34:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      38:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      3c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      40:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      44:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      48:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      4c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      50:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>

00000054 <__c.2362>:
      54:	48 54 54 50 2f 31 2e 30 20 34 30 31 20 55 6e 61     HTTP/1.0 401 Una
      64:	75 74 68 6f 72 69 7a 65 64 0d 0a 43 6f 6e 74 65     uthorized..Conte
      74:	6e 74 2d 54 79 70 65 3a 20 74 65 78 74 2f 68 74     nt-Type: text/ht
      84:	6d 6c 0d 0a 0d 0a 3c 68 31 3e 34 30 31 20 55 6e     ml....<h1>401 Un
      94:	61 75 74 68 6f 72 69 7a 65 64 3c 2f 68 31 3e 00     authorized</h1>.

000000a4 <__c.2360>:
      a4:	3c 70 3e 55 73 61 67 65 3a 20 68 74 74 70 3a 2f     <p>Usage: http:/
      b4:	2f 68 6f 73 74 5f 6f 72 5f 69 70 2f 70 61 73 73     /host_or_ip/pass
      c4:	77 6f 72 64 3c 2f 70 3e 0a 00                       word</p>..

000000ce <__c.2358>:
      ce:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
      de:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
      ee:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

000000fb <__c.2355>:
      fb:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     10b:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     11b:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 3c 68 31 3e     ext/html....<h1>
     12b:	32 30 30 20 4f 4b 3c 2f 68 31 3e 00                 200 OK</h1>.

00000137 <__c.2332>:
     137:	3c 2f 63 65 6e 74 65 72 3e 3c 68 72 3e 3c 62 72     </center><hr><br
     147:	3e 76 65 72 73 69 6f 6e 20 31 2e 30 2c 20 61 69     >version 1.0, ai
     157:	6d 73 69 6e 74 65 72 61 63 74 69 76 65 2e 6f 72     msinteractive.or
     167:	67 0a 00                                            g..

0000016a <__c.2330>:
     16a:	2f 31 22 3e 53 77 69 74 63 68 20 6f 6e 3c 2f 61     /1">Switch on</a
     17a:	3e 3c 70 3e 00                                      ><p>.

0000017f <__c.2328>:
     17f:	2f 30 22 3e 53 77 69 74 63 68 20 6f 66 66 3c 2f     /0">Switch off</
     18f:	61 3e 3c 70 3e 00                                   a><p>.

00000195 <__c.2326>:
     195:	20 3c 73 6d 61 6c 6c 3e 3c 61 20 68 72 65 66 3d      <small><a href=
     1a5:	22 2e 22 3e 5b 72 65 66 72 65 73 68 20 73 74 61     ".">[refresh sta
     1b5:	74 75 73 5d 3c 2f 61 3e 3c 2f 73 6d 61 6c 6c 3e     tus]</a></small>
     1c5:	3c 2f 70 3e 0a 3c 70 3e 3c 61 20 68 72 65 66 3d     </p>.<p><a href=
     1d5:	22 2e 00                                            "..

000001d8 <__c.2324>:
     1d8:	4f 46 46 00                                         OFF.

000001dc <__c.2322>:
     1dc:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 23 30 30     <font color="#00
     1ec:	46 46 30 30 22 3e 20 4f 4e 3c 2f 66 6f 6e 74 3e     FF00"> ON</font>
     1fc:	00                                                  .

000001fd <__c.2320>:
     1fd:	3c 63 65 6e 74 65 72 3e 3c 70 3e 4f 75 74 70 75     <center><p>Outpu
     20d:	74 20 69 73 3a 20 00                                t is: .

00000214 <__c.2318>:
     214:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     224:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     234:	65 78 74 2f 68 74 6d 6c 0d 0a 50 72 61 67 6d 61     ext/html..Pragma
     244:	3a 20 6e 6f 2d 63 61 63 68 65 0d 0a 0d 0a 00        : no-cache.....

00000253 <__c.2305>:
     253:	61 64 64 20 61 20 74 72 61 69 6c 69 6e 67 20 73     add a trailing s
     263:	6c 61 73 68 20 74 6f 20 74 68 65 20 75 72 6c 0a     lash to the url.
     273:	00                                                  .

00000274 <__c.2303>:
     274:	3c 68 31 3e 33 30 31 20 4d 6f 76 65 64 20 50 65     <h1>301 Moved Pe
     284:	72 6d 61 6e 65 6e 74 6c 79 3c 2f 68 31 3e 0a 00     rmanently</h1>..

00000294 <__c.2301>:
     294:	2f 0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a     /..Content-Type:
     2a4:	20 74 65 78 74 2f 68 74 6d 6c 0d 0a 50 72 61 67      text/html..Prag
     2b4:	6d 61 3a 20 6e 6f 2d 63 61 63 68 65 0d 0a 0d 0a     ma: no-cache....
     2c4:	00                                                  .

000002c5 <__c.2299>:
     2c5:	48 54 54 50 2f 31 2e 30 20 33 30 31 20 4d 6f 76     HTTP/1.0 301 Mov
     2d5:	65 64 20 50 65 72 6d 61 6e 65 6e 74 6c 79 0d 0a     ed Permanently..
     2e5:	4c 6f 63 61 74 69 6f 6e 3a 20 00                    Location: .

000002f0 <__ctors_end>:
     2f0:	11 24       	eor	r1, r1
     2f2:	1f be       	out	0x3f, r1	; 63
     2f4:	cf e5       	ldi	r28, 0x5F	; 95
     2f6:	d4 e0       	ldi	r29, 0x04	; 4
     2f8:	de bf       	out	0x3e, r29	; 62
     2fa:	cd bf       	out	0x3d, r28	; 61

000002fc <__do_copy_data>:
     2fc:	10 e0       	ldi	r17, 0x00	; 0
     2fe:	a0 e6       	ldi	r26, 0x60	; 96
     300:	b0 e0       	ldi	r27, 0x00	; 0
     302:	e0 ed       	ldi	r30, 0xD0	; 208
     304:	f3 e1       	ldi	r31, 0x13	; 19
     306:	02 c0       	rjmp	.+4      	; 0x30c <.do_copy_data_start>

00000308 <.do_copy_data_loop>:
     308:	05 90       	lpm	r0, Z+
     30a:	0d 92       	st	X+, r0

0000030c <.do_copy_data_start>:
     30c:	a8 3a       	cpi	r26, 0xA8	; 168
     30e:	b1 07       	cpc	r27, r17
     310:	d9 f7       	brne	.-10     	; 0x308 <.do_copy_data_loop>

00000312 <__do_clear_bss>:
     312:	12 e0       	ldi	r17, 0x02	; 2
     314:	a8 ea       	ldi	r26, 0xA8	; 168
     316:	b0 e0       	ldi	r27, 0x00	; 0
     318:	01 c0       	rjmp	.+2      	; 0x31c <.do_clear_bss_start>

0000031a <.do_clear_bss_loop>:
     31a:	1d 92       	st	X+, r1

0000031c <.do_clear_bss_start>:
     31c:	a0 3e       	cpi	r26, 0xE0	; 224
     31e:	b1 07       	cpc	r27, r17
     320:	e1 f7       	brne	.-8      	; 0x31a <.do_clear_bss_loop>
     322:	0e 94 30 08 	call	0x1060	; 0x1060 <main>
     326:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <_exit>

0000032a <__bad_interrupt>:
     32a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000032e <enc28j60ReadOp>:
//
#define waitspi() while(!(SPSR&(1<<SPIF)))

uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
{
        CSACTIVE;
     32e:	c4 98       	cbi	0x18, 4	; 24
        // issue read command
        SPDR = op | (address & ADDR_MASK);
     330:	96 2f       	mov	r25, r22
     332:	9f 71       	andi	r25, 0x1F	; 31
     334:	98 2b       	or	r25, r24
     336:	9f b9       	out	0x0f, r25	; 15
        waitspi();
     338:	77 9b       	sbis	0x0e, 7	; 14
     33a:	fe cf       	rjmp	.-4      	; 0x338 <enc28j60ReadOp+0xa>
        // read data
        SPDR = 0x00;
     33c:	1f b8       	out	0x0f, r1	; 15
        waitspi();
     33e:	77 9b       	sbis	0x0e, 7	; 14
     340:	fe cf       	rjmp	.-4      	; 0x33e <enc28j60ReadOp+0x10>
        // do dummy read if needed (for mac and mii, see datasheet page 29)
        if(address & 0x80)
     342:	67 ff       	sbrs	r22, 7
     344:	03 c0       	rjmp	.+6      	; 0x34c <enc28j60ReadOp+0x1e>
        {
                SPDR = 0x00;
     346:	1f b8       	out	0x0f, r1	; 15
                waitspi();
     348:	77 9b       	sbis	0x0e, 7	; 14
     34a:	fe cf       	rjmp	.-4      	; 0x348 <enc28j60ReadOp+0x1a>
        }
        // release CS
        CSPASSIVE;
     34c:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
     34e:	8f b1       	in	r24, 0x0f	; 15
}
     350:	08 95       	ret

00000352 <enc28j60WriteOp>:

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     352:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     354:	6f 71       	andi	r22, 0x1F	; 31
     356:	68 2b       	or	r22, r24
     358:	6f b9       	out	0x0f, r22	; 15
        waitspi();
     35a:	77 9b       	sbis	0x0e, 7	; 14
     35c:	fe cf       	rjmp	.-4      	; 0x35a <enc28j60WriteOp+0x8>
        // write data
        SPDR = data;
     35e:	4f b9       	out	0x0f, r20	; 15
        waitspi();
     360:	77 9b       	sbis	0x0e, 7	; 14
     362:	fe cf       	rjmp	.-4      	; 0x360 <enc28j60WriteOp+0xe>
        CSPASSIVE;
     364:	c4 9a       	sbi	0x18, 4	; 24
}
     366:	08 95       	ret

00000368 <enc28j60ReadBuffer>:

void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
{
     368:	ac 01       	movw	r20, r24
     36a:	fb 01       	movw	r30, r22
        CSACTIVE;
     36c:	c4 98       	cbi	0x18, 4	; 24
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
     36e:	8a e3       	ldi	r24, 0x3A	; 58
     370:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     372:	77 9b       	sbis	0x0e, 7	; 14
     374:	fe cf       	rjmp	.-4      	; 0x372 <enc28j60ReadBuffer+0xa>
     376:	9a 01       	movw	r18, r20
     378:	df 01       	movw	r26, r30
     37a:	07 c0       	rjmp	.+14     	; 0x38a <enc28j60ReadBuffer+0x22>
        while(len)
        {
                len--;
                // read data
                SPDR = 0x00;
     37c:	1f b8       	out	0x0f, r1	; 15
                waitspi();
     37e:	77 9b       	sbis	0x0e, 7	; 14
     380:	fe cf       	rjmp	.-4      	; 0x37e <enc28j60ReadBuffer+0x16>
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     382:	21 50       	subi	r18, 0x01	; 1
     384:	30 40       	sbci	r19, 0x00	; 0
                // read data
                SPDR = 0x00;
                waitspi();
                *data = SPDR;
     386:	8f b1       	in	r24, 0x0f	; 15
     388:	8d 93       	st	X+, r24
{
        CSACTIVE;
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
        waitspi();
        while(len)
     38a:	21 15       	cp	r18, r1
     38c:	31 05       	cpc	r19, r1
     38e:	b1 f7       	brne	.-20     	; 0x37c <enc28j60ReadBuffer+0x14>
                SPDR = 0x00;
                waitspi();
                *data = SPDR;
                data++;
        }
        *data='\0';
     390:	e4 0f       	add	r30, r20
     392:	f5 1f       	adc	r31, r21
     394:	10 82       	st	Z, r1
        CSPASSIVE;
     396:	c4 9a       	sbi	0x18, 4	; 24
}
     398:	08 95       	ret

0000039a <enc28j60WriteBuffer>:

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
     39a:	9c 01       	movw	r18, r24
     39c:	fb 01       	movw	r30, r22
        CSACTIVE;
     39e:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
     3a0:	8a e7       	ldi	r24, 0x7A	; 122
     3a2:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     3a4:	77 9b       	sbis	0x0e, 7	; 14
     3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <enc28j60WriteBuffer+0xa>
     3a8:	07 c0       	rjmp	.+14     	; 0x3b8 <enc28j60WriteBuffer+0x1e>
        while(len)
        {
                len--;
                // write data
                SPDR = *data;
     3aa:	80 81       	ld	r24, Z
     3ac:	8f b9       	out	0x0f, r24	; 15
                data++;
                waitspi();
     3ae:	77 9b       	sbis	0x0e, 7	; 14
     3b0:	fe cf       	rjmp	.-4      	; 0x3ae <enc28j60WriteBuffer+0x14>
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     3b2:	21 50       	subi	r18, 0x01	; 1
     3b4:	30 40       	sbci	r19, 0x00	; 0
                // write data
                SPDR = *data;
                data++;
     3b6:	31 96       	adiw	r30, 0x01	; 1
{
        CSACTIVE;
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
     3b8:	21 15       	cp	r18, r1
     3ba:	31 05       	cpc	r19, r1
     3bc:	b1 f7       	brne	.-20     	; 0x3aa <enc28j60WriteBuffer+0x10>
                // write data
                SPDR = *data;
                data++;
                waitspi();
        }
        CSPASSIVE;
     3be:	c4 9a       	sbi	0x18, 4	; 24
}
     3c0:	08 95       	ret

000003c2 <enc28j60SetBank>:

void enc28j60SetBank(uint8_t address)
{
     3c2:	48 2f       	mov	r20, r24
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
     3c4:	28 2f       	mov	r18, r24
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	20 76       	andi	r18, 0x60	; 96
     3ca:	30 70       	andi	r19, 0x00	; 0
     3cc:	80 91 ac 00 	lds	r24, 0x00AC
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	28 17       	cp	r18, r24
     3d4:	39 07       	cpc	r19, r25
     3d6:	d9 f0       	breq	.+54     	; 0x40e <enc28j60SetBank+0x4c>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     3d8:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     3da:	8f eb       	ldi	r24, 0xBF	; 191
     3dc:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     3de:	77 9b       	sbis	0x0e, 7	; 14
     3e0:	fe cf       	rjmp	.-4      	; 0x3de <enc28j60SetBank+0x1c>
        // write data
        SPDR = data;
     3e2:	83 e0       	ldi	r24, 0x03	; 3
     3e4:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     3e6:	77 9b       	sbis	0x0e, 7	; 14
     3e8:	fe cf       	rjmp	.-4      	; 0x3e6 <enc28j60SetBank+0x24>
        CSPASSIVE;
     3ea:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     3ec:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     3ee:	8f e9       	ldi	r24, 0x9F	; 159
     3f0:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     3f2:	77 9b       	sbis	0x0e, 7	; 14
     3f4:	fe cf       	rjmp	.-4      	; 0x3f2 <enc28j60SetBank+0x30>
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
     3f6:	85 e0       	ldi	r24, 0x05	; 5
     3f8:	35 95       	asr	r19
     3fa:	27 95       	ror	r18
     3fc:	8a 95       	dec	r24
     3fe:	e1 f7       	brne	.-8      	; 0x3f8 <enc28j60SetBank+0x36>
        CSACTIVE;
        // issue write command
        SPDR = op | (address & ADDR_MASK);
        waitspi();
        // write data
        SPDR = data;
     400:	2f b9       	out	0x0f, r18	; 15
        waitspi();
     402:	77 9b       	sbis	0x0e, 7	; 14
     404:	fe cf       	rjmp	.-4      	; 0x402 <enc28j60SetBank+0x40>
        CSPASSIVE;
     406:	c4 9a       	sbi	0x18, 4	; 24
        if((address & BANK_MASK) != Enc28j60Bank)
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
                Enc28j60Bank = (address & BANK_MASK);
     408:	40 76       	andi	r20, 0x60	; 96
     40a:	40 93 ac 00 	sts	0x00AC, r20
     40e:	08 95       	ret

00000410 <enc28j60Read>:
        }
}

uint8_t enc28j60Read(uint8_t address)
{
     410:	1f 93       	push	r17
     412:	18 2f       	mov	r17, r24
        // set the bank
        enc28j60SetBank(address);
     414:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enc28j60SetBank>
        // do the read
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	61 2f       	mov	r22, r17
     41c:	0e 94 97 01 	call	0x32e	; 0x32e <enc28j60ReadOp>
}
     420:	1f 91       	pop	r17
     422:	08 95       	ret

00000424 <enc28j60Write>:
	
	return (enc28j60Read(MIRDH));
}

void enc28j60Write(uint8_t address, uint8_t data)
{
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	18 2f       	mov	r17, r24
     42a:	06 2f       	mov	r16, r22
        // set the bank
        enc28j60SetBank(address);
     42c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enc28j60SetBank>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     430:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     432:	1f 71       	andi	r17, 0x1F	; 31
     434:	10 64       	ori	r17, 0x40	; 64
     436:	1f b9       	out	0x0f, r17	; 15
        waitspi();
     438:	77 9b       	sbis	0x0e, 7	; 14
     43a:	fe cf       	rjmp	.-4      	; 0x438 <enc28j60Write+0x14>
        // write data
        SPDR = data;
     43c:	0f b9       	out	0x0f, r16	; 15
        waitspi();
     43e:	77 9b       	sbis	0x0e, 7	; 14
     440:	fe cf       	rjmp	.-4      	; 0x43e <enc28j60Write+0x1a>
        CSPASSIVE;
     442:	c4 9a       	sbi	0x18, 4	; 24
{
        // set the bank
        enc28j60SetBank(address);
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
}
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	08 95       	ret

0000044a <enc28j60PhyReadH>:
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
}

// read upper 8 bits
uint16_t enc28j60PhyReadH(uint8_t address)
{
     44a:	68 2f       	mov	r22, r24

	// Set the right address and start the register read operation
	enc28j60Write(MIREGADR, address);
     44c:	84 ed       	ldi	r24, 0xD4	; 212
     44e:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	enc28j60Write(MICMD, MICMD_MIIRD);
     452:	82 ed       	ldi	r24, 0xD2	; 210
     454:	61 e0       	ldi	r22, 0x01	; 1
     456:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     45a:	80 e5       	ldi	r24, 0x50	; 80
     45c:	8a 95       	dec	r24
     45e:	f1 f7       	brne	.-4      	; 0x45c <enc28j60PhyReadH+0x12>
        _delay_us(15);

	// wait until the PHY read completes
	while(enc28j60Read(MISTAT) & MISTAT_BUSY);
     460:	8a ee       	ldi	r24, 0xEA	; 234
     462:	0e 94 08 02 	call	0x410	; 0x410 <enc28j60Read>
     466:	80 fd       	sbrc	r24, 0
     468:	fb cf       	rjmp	.-10     	; 0x460 <__stack+0x1>

	// reset reading bit
	enc28j60Write(MICMD, 0x00);
     46a:	82 ed       	ldi	r24, 0xD2	; 210
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	
	return (enc28j60Read(MIRDH));
     472:	89 ed       	ldi	r24, 0xD9	; 217
     474:	0e 94 08 02 	call	0x410	; 0x410 <enc28j60Read>
}
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	08 95       	ret

0000047c <enc28j60PhyWrite>:
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
}

void enc28j60PhyWrite(uint8_t address, uint16_t data)
{
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	98 2f       	mov	r25, r24
     482:	16 2f       	mov	r17, r22
     484:	07 2f       	mov	r16, r23
        // set the PHY register address
        enc28j60Write(MIREGADR, address);
     486:	84 ed       	ldi	r24, 0xD4	; 212
     488:	69 2f       	mov	r22, r25
     48a:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
        // write the PHY data
        enc28j60Write(MIWRL, data);
     48e:	86 ed       	ldi	r24, 0xD6	; 214
     490:	61 2f       	mov	r22, r17
     492:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
        enc28j60Write(MIWRH, data>>8);
     496:	87 ed       	ldi	r24, 0xD7	; 215
     498:	60 2f       	mov	r22, r16
     49a:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
     49e:	10 e5       	ldi	r17, 0x50	; 80
     4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <enc28j60PhyWrite+0x2c>
     4a2:	81 2f       	mov	r24, r17
     4a4:	8a 95       	dec	r24
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <enc28j60PhyWrite+0x28>
        // wait until the PHY write completes
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
     4a8:	8a ee       	ldi	r24, 0xEA	; 234
     4aa:	0e 94 08 02 	call	0x410	; 0x410 <enc28j60Read>
     4ae:	80 fd       	sbrc	r24, 0
     4b0:	f8 cf       	rjmp	.-16     	; 0x4a2 <enc28j60PhyWrite+0x26>
                _delay_us(15);
        }
}
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	08 95       	ret

000004b8 <enc28j60clkout>:

void enc28j60clkout(uint8_t clk)
{
        //setup clkout: 2 is 12.5MHz:
	enc28j60Write(ECOCON, clk & 0x7);
     4b8:	68 2f       	mov	r22, r24
     4ba:	67 70       	andi	r22, 0x07	; 7
     4bc:	85 e7       	ldi	r24, 0x75	; 117
     4be:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
}
     4c2:	08 95       	ret

000004c4 <enc28j60Init>:

void enc28j60Init(uint8_t* macaddr)
{
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	ec 01       	movw	r28, r24
	// initialize I/O
        // ss as output:
	ENC28J60_CONTROL_DDR |= 1<<ENC28J60_CONTROL_CS;
     4ca:	bc 9a       	sbi	0x17, 4	; 23
	CSPASSIVE; // ss=0
     4cc:	c4 9a       	sbi	0x18, 4	; 24
        //	
	ENC28J60_CONTROL_DDR  |= 1<<ENC28J60_CONTROL_SI | 1<<ENC28J60_CONTROL_SCK; // mosi, sck output
     4ce:	87 b3       	in	r24, 0x17	; 23
     4d0:	80 6a       	ori	r24, 0xA0	; 160
     4d2:	87 bb       	out	0x17, r24	; 23
	cbi(ENC28J60_CONTROL_DDR,ENC28J60_CONTROL_SO); // MISO is input
     4d4:	be 98       	cbi	0x17, 6	; 23
        //
        cbi(ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_SI); // MOSI low
     4d6:	c5 98       	cbi	0x18, 5	; 24
        cbi(ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_SCK); // SCK low
     4d8:	c7 98       	cbi	0x18, 7	; 24
	//
	// initialize SPI interface
	// master mode and Fosc/2 clock:
        SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//SPCR = (1<<SPE)|(1<<MSTR);
     4da:	81 e5       	ldi	r24, 0x51	; 81
     4dc:	8d b9       	out	0x0d, r24	; 13
        SPSR |= (1<<SPI2X);
     4de:	70 9a       	sbi	0x0e, 0	; 14
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     4e0:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     4e6:	77 9b       	sbis	0x0e, 7	; 14
     4e8:	fe cf       	rjmp	.-4      	; 0x4e6 <enc28j60Init+0x22>
        // write data
        SPDR = data;
     4ea:	8f ef       	ldi	r24, 0xFF	; 255
     4ec:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     4ee:	77 9b       	sbis	0x0e, 7	; 14
     4f0:	fe cf       	rjmp	.-4      	; 0x4ee <enc28j60Init+0x2a>
        CSPASSIVE;
     4f2:	c4 9a       	sbi	0x18, 4	; 24
     4f4:	8d ec       	ldi	r24, 0xCD	; 205
     4f6:	8a 95       	dec	r24
     4f8:	f1 f7       	brne	.-4      	; 0x4f6 <enc28j60Init+0x32>
	//while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	gNextPacketPtr = RXSTART_INIT;
     4fa:	10 92 ae 00 	sts	0x00AE, r1
     4fe:	10 92 ad 00 	sts	0x00AD, r1
        // Rx start
	enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
     502:	88 e0       	ldi	r24, 0x08	; 8
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	enc28j60Write(ERXSTH, RXSTART_INIT>>8);
     50a:	89 e0       	ldi	r24, 0x09	; 9
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	// set receive pointer address
	enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
     512:	8c e0       	ldi	r24, 0x0C	; 12
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
     51a:	8d e0       	ldi	r24, 0x0D	; 13
     51c:	60 e0       	ldi	r22, 0x00	; 0
     51e:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	// RX end
	enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
     522:	8a e0       	ldi	r24, 0x0A	; 10
     524:	6e ef       	ldi	r22, 0xFE	; 254
     526:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
     52a:	8b e0       	ldi	r24, 0x0B	; 11
     52c:	69 e1       	ldi	r22, 0x19	; 25
     52e:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	// TX start
	enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
     532:	84 e0       	ldi	r24, 0x04	; 4
     534:	6f ef       	ldi	r22, 0xFF	; 255
     536:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	enc28j60Write(ETXSTH, TXSTART_INIT>>8);
     53a:	85 e0       	ldi	r24, 0x05	; 5
     53c:	69 e1       	ldi	r22, 0x19	; 25
     53e:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	// TX end
	enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
     542:	86 e0       	ldi	r24, 0x06	; 6
     544:	6f ef       	ldi	r22, 0xFF	; 255
     546:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
     54a:	87 e0       	ldi	r24, 0x07	; 7
     54c:	6f e1       	ldi	r22, 0x1F	; 31
     54e:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
        // Type     ETH.DST
        // ARP      BROADCAST
        // 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
        // in binary these poitions are:11 0000 0011 1111
        // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
	enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
     552:	88 e3       	ldi	r24, 0x38	; 56
     554:	60 eb       	ldi	r22, 0xB0	; 176
     556:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	enc28j60Write(EPMM0, 0x3f);
     55a:	88 e2       	ldi	r24, 0x28	; 40
     55c:	6f e3       	ldi	r22, 0x3F	; 63
     55e:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	enc28j60Write(EPMM1, 0x30);
     562:	89 e2       	ldi	r24, 0x29	; 41
     564:	60 e3       	ldi	r22, 0x30	; 48
     566:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	enc28j60Write(EPMCSL, 0xf9);
     56a:	80 e3       	ldi	r24, 0x30	; 48
     56c:	69 ef       	ldi	r22, 0xF9	; 249
     56e:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	enc28j60Write(EPMCSH, 0xf7);
     572:	81 e3       	ldi	r24, 0x31	; 49
     574:	67 ef       	ldi	r22, 0xF7	; 247
     576:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
        //
        //
	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
     57a:	80 ec       	ldi	r24, 0xC0	; 192
     57c:	6d e0       	ldi	r22, 0x0D	; 13
     57e:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
     582:	81 ec       	ldi	r24, 0xC1	; 193
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     58a:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     58c:	82 e8       	ldi	r24, 0x82	; 130
     58e:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     590:	77 9b       	sbis	0x0e, 7	; 14
     592:	fe cf       	rjmp	.-4      	; 0x590 <enc28j60Init+0xcc>
        // write data
        SPDR = data;
     594:	82 e3       	ldi	r24, 0x32	; 50
     596:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     598:	77 9b       	sbis	0x0e, 7	; 14
     59a:	fe cf       	rjmp	.-4      	; 0x598 <enc28j60Init+0xd4>
        CSPASSIVE;
     59c:	c4 9a       	sbi	0x18, 4	; 24
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
	// enable automatic padding to 60bytes and CRC operations
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
	// set inter-frame gap (non-back-to-back)
	enc28j60Write(MAIPGL, 0x12);
     59e:	86 ec       	ldi	r24, 0xC6	; 198
     5a0:	62 e1       	ldi	r22, 0x12	; 18
     5a2:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	enc28j60Write(MAIPGH, 0x0C);
     5a6:	87 ec       	ldi	r24, 0xC7	; 199
     5a8:	6c e0       	ldi	r22, 0x0C	; 12
     5aa:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
     5ae:	84 ec       	ldi	r24, 0xC4	; 196
     5b0:	62 e1       	ldi	r22, 0x12	; 18
     5b2:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	// Set the maximum packet size which the controller will accept
        // Do not send packets longer than MAX_FRAMELEN:
	enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
     5b6:	8a ec       	ldi	r24, 0xCA	; 202
     5b8:	6c ed       	ldi	r22, 0xDC	; 220
     5ba:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
     5be:	8b ec       	ldi	r24, 0xCB	; 203
     5c0:	65 e0       	ldi	r22, 0x05	; 5
     5c2:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	// do bank 3 stuff
        // write MAC address
        // NOTE: MAC address in ENC28J60 is byte-backward
        enc28j60Write(MAADR5, macaddr[0]);
     5c6:	84 ee       	ldi	r24, 0xE4	; 228
     5c8:	68 81       	ld	r22, Y
     5ca:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
        enc28j60Write(MAADR4, macaddr[1]);
     5ce:	85 ee       	ldi	r24, 0xE5	; 229
     5d0:	69 81       	ldd	r22, Y+1	; 0x01
     5d2:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
        enc28j60Write(MAADR3, macaddr[2]);
     5d6:	82 ee       	ldi	r24, 0xE2	; 226
     5d8:	6a 81       	ldd	r22, Y+2	; 0x02
     5da:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
        enc28j60Write(MAADR2, macaddr[3]);
     5de:	83 ee       	ldi	r24, 0xE3	; 227
     5e0:	6b 81       	ldd	r22, Y+3	; 0x03
     5e2:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
        enc28j60Write(MAADR1, macaddr[4]);
     5e6:	80 ee       	ldi	r24, 0xE0	; 224
     5e8:	6c 81       	ldd	r22, Y+4	; 0x04
     5ea:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
        enc28j60Write(MAADR0, macaddr[5]);
     5ee:	81 ee       	ldi	r24, 0xE1	; 225
     5f0:	6d 81       	ldd	r22, Y+5	; 0x05
     5f2:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
     5f6:	80 e1       	ldi	r24, 0x10	; 16
     5f8:	60 e0       	ldi	r22, 0x00	; 0
     5fa:	71 e0       	ldi	r23, 0x01	; 1
     5fc:	0e 94 3e 02 	call	0x47c	; 0x47c <enc28j60PhyWrite>
	// switch to bank 0
	enc28j60SetBank(ECON1);
     600:	8f e1       	ldi	r24, 0x1F	; 31
     602:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enc28j60SetBank>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     606:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     608:	8b e9       	ldi	r24, 0x9B	; 155
     60a:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     60c:	77 9b       	sbis	0x0e, 7	; 14
     60e:	fe cf       	rjmp	.-4      	; 0x60c <enc28j60Init+0x148>
        // write data
        SPDR = data;
     610:	80 ec       	ldi	r24, 0xC0	; 192
     612:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     614:	77 9b       	sbis	0x0e, 7	; 14
     616:	fe cf       	rjmp	.-4      	; 0x614 <enc28j60Init+0x150>
        CSPASSIVE;
     618:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     61a:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     61c:	8f e9       	ldi	r24, 0x9F	; 159
     61e:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     620:	77 9b       	sbis	0x0e, 7	; 14
     622:	fe cf       	rjmp	.-4      	; 0x620 <enc28j60Init+0x15c>
        // write data
        SPDR = data;
     624:	84 e0       	ldi	r24, 0x04	; 4
     626:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     628:	77 9b       	sbis	0x0e, 7	; 14
     62a:	fe cf       	rjmp	.-4      	; 0x628 <enc28j60Init+0x164>
        CSPASSIVE;
     62c:	c4 9a       	sbi	0x18, 4	; 24
	enc28j60SetBank(ECON1);
	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
}
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <enc28j60getrev>:

// read the revision of the chip:
uint8_t enc28j60getrev(void)
{
	return(enc28j60Read(EREVID));
     634:	82 e7       	ldi	r24, 0x72	; 114
     636:	0e 94 08 02 	call	0x410	; 0x410 <enc28j60Read>
}
     63a:	08 95       	ret

0000063c <enc28j60linkup>:

// link status
uint8_t enc28j60linkup(void)
{
        // bit 10 (= bit 3 in upper reg)
	return(enc28j60PhyReadH(PHSTAT2) && 4);
     63c:	81 e1       	ldi	r24, 0x11	; 17
     63e:	0e 94 25 02 	call	0x44a	; 0x44a <enc28j60PhyReadH>
     642:	20 e0       	ldi	r18, 0x00	; 0
     644:	89 2b       	or	r24, r25
     646:	09 f0       	breq	.+2      	; 0x64a <enc28j60linkup+0xe>
     648:	21 e0       	ldi	r18, 0x01	; 1
}
     64a:	82 2f       	mov	r24, r18
     64c:	08 95       	ret

0000064e <enc28j60PacketSend>:

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	ec 01       	movw	r28, r24
     65e:	8b 01       	movw	r16, r22

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     660:	3f e9       	ldi	r19, 0x9F	; 159
     662:	d3 2e       	mov	r13, r19
        waitspi();
        // write data
        SPDR = data;
     664:	20 e8       	ldi	r18, 0x80	; 128
     666:	f2 2e       	mov	r15, r18

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     668:	9f eb       	ldi	r25, 0xBF	; 191
     66a:	e9 2e       	mov	r14, r25
     66c:	15 c0       	rjmp	.+42     	; 0x698 <enc28j60PacketSend+0x4a>
{
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
        {
                // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
                if( (enc28j60Read(EIR) & EIR_TXERIF) ) {
     66e:	8c e1       	ldi	r24, 0x1C	; 28
     670:	0e 94 08 02 	call	0x410	; 0x410 <enc28j60Read>
     674:	81 ff       	sbrs	r24, 1
     676:	10 c0       	rjmp	.+32     	; 0x698 <enc28j60PacketSend+0x4a>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     678:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     67a:	df b8       	out	0x0f, r13	; 15
        waitspi();
     67c:	77 9b       	sbis	0x0e, 7	; 14
     67e:	fe cf       	rjmp	.-4      	; 0x67c <enc28j60PacketSend+0x2e>
        // write data
        SPDR = data;
     680:	ff b8       	out	0x0f, r15	; 15
        waitspi();
     682:	77 9b       	sbis	0x0e, 7	; 14
     684:	fe cf       	rjmp	.-4      	; 0x682 <enc28j60PacketSend+0x34>
        CSPASSIVE;
     686:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     688:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     68a:	ef b8       	out	0x0f, r14	; 15
        waitspi();
     68c:	77 9b       	sbis	0x0e, 7	; 14
     68e:	fe cf       	rjmp	.-4      	; 0x68c <enc28j60PacketSend+0x3e>
        // write data
        SPDR = data;
     690:	ff b8       	out	0x0f, r15	; 15
        waitspi();
     692:	77 9b       	sbis	0x0e, 7	; 14
     694:	fe cf       	rjmp	.-4      	; 0x692 <enc28j60PacketSend+0x44>
        CSPASSIVE;
     696:	c4 9a       	sbi	0x18, 4	; 24
}

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	6f e1       	ldi	r22, 0x1F	; 31
     69c:	0e 94 97 01 	call	0x32e	; 0x32e <enc28j60ReadOp>
     6a0:	83 fd       	sbrc	r24, 3
     6a2:	e5 cf       	rjmp	.-54     	; 0x66e <enc28j60PacketSend+0x20>
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
                }
        }
	// Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	6f ef       	ldi	r22, 0xFF	; 255
     6a8:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
     6ac:	83 e0       	ldi	r24, 0x03	; 3
     6ae:	69 e1       	ldi	r22, 0x19	; 25
     6b0:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
     6b4:	ce 01       	movw	r24, r28
     6b6:	81 50       	subi	r24, 0x01	; 1
     6b8:	68 2f       	mov	r22, r24
     6ba:	86 e0       	ldi	r24, 0x06	; 6
     6bc:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
     6c0:	9e 01       	movw	r18, r28
     6c2:	21 50       	subi	r18, 0x01	; 1
     6c4:	36 4e       	sbci	r19, 0xE6	; 230
     6c6:	87 e0       	ldi	r24, 0x07	; 7
     6c8:	63 2f       	mov	r22, r19
     6ca:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     6ce:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     6d0:	8a e7       	ldi	r24, 0x7A	; 122
     6d2:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     6d4:	77 9b       	sbis	0x0e, 7	; 14
     6d6:	fe cf       	rjmp	.-4      	; 0x6d4 <enc28j60PacketSend+0x86>
        // write data
        SPDR = data;
     6d8:	1f b8       	out	0x0f, r1	; 15
        waitspi();
     6da:	77 9b       	sbis	0x0e, 7	; 14
     6dc:	fe cf       	rjmp	.-4      	; 0x6da <enc28j60PacketSend+0x8c>
        CSPASSIVE;
     6de:	c4 9a       	sbi	0x18, 4	; 24
        CSPASSIVE;
}

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
        CSACTIVE;
     6e0:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
     6e2:	8a e7       	ldi	r24, 0x7A	; 122
     6e4:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     6e6:	77 9b       	sbis	0x0e, 7	; 14
     6e8:	fe cf       	rjmp	.-4      	; 0x6e6 <enc28j60PacketSend+0x98>
     6ea:	08 c0       	rjmp	.+16     	; 0x6fc <enc28j60PacketSend+0xae>
        while(len)
        {
                len--;
                // write data
                SPDR = *data;
     6ec:	f8 01       	movw	r30, r16
     6ee:	80 81       	ld	r24, Z
     6f0:	8f b9       	out	0x0f, r24	; 15
                data++;
                waitspi();
     6f2:	77 9b       	sbis	0x0e, 7	; 14
     6f4:	fe cf       	rjmp	.-4      	; 0x6f2 <enc28j60PacketSend+0xa4>
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     6f6:	21 97       	sbiw	r28, 0x01	; 1
                // write data
                SPDR = *data;
                data++;
     6f8:	0f 5f       	subi	r16, 0xFF	; 255
     6fa:	1f 4f       	sbci	r17, 0xFF	; 255
{
        CSACTIVE;
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
     6fc:	20 97       	sbiw	r28, 0x00	; 0
     6fe:	b1 f7       	brne	.-20     	; 0x6ec <enc28j60PacketSend+0x9e>
                // write data
                SPDR = *data;
                data++;
                waitspi();
        }
        CSPASSIVE;
     700:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     702:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     704:	8f e9       	ldi	r24, 0x9F	; 159
     706:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     708:	77 9b       	sbis	0x0e, 7	; 14
     70a:	fe cf       	rjmp	.-4      	; 0x708 <enc28j60PacketSend+0xba>
        // write data
        SPDR = data;
     70c:	88 e0       	ldi	r24, 0x08	; 8
     70e:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     710:	77 9b       	sbis	0x0e, 7	; 14
     712:	fe cf       	rjmp	.-4      	; 0x710 <enc28j60PacketSend+0xc2>
        CSPASSIVE;
     714:	c4 9a       	sbi	0x18, 4	; 24
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
}
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	df 90       	pop	r13
     724:	08 95       	ret

00000726 <enc28j60hasRxPkt>:

// just probe if there might be a packet
uint8_t enc28j60hasRxPkt(void)
{
	if( enc28j60Read(EPKTCNT) ==0 ){
     726:	89 e3       	ldi	r24, 0x39	; 57
     728:	0e 94 08 02 	call	0x410	; 0x410 <enc28j60Read>
     72c:	81 11       	cpse	r24, r1
     72e:	81 e0       	ldi	r24, 0x01	; 1
		return(0);
        }
        return(1);
}
     730:	08 95       	ret

00000732 <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
     732:	8f 92       	push	r8
     734:	9f 92       	push	r9
     736:	af 92       	push	r10
     738:	bf 92       	push	r11
     73a:	cf 92       	push	r12
     73c:	df 92       	push	r13
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	5c 01       	movw	r10, r24
     74c:	4b 01       	movw	r8, r22
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
     74e:	89 e3       	ldi	r24, 0x39	; 57
     750:	0e 94 08 02 	call	0x410	; 0x410 <enc28j60Read>
     754:	88 23       	and	r24, r24
     756:	19 f4       	brne	.+6      	; 0x75e <enc28j60PacketReceive+0x2c>
     758:	c0 e0       	ldi	r28, 0x00	; 0
     75a:	d0 e0       	ldi	r29, 0x00	; 0
     75c:	76 c0       	rjmp	.+236    	; 0x84a <enc28j60PacketReceive+0x118>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
     75e:	60 91 ad 00 	lds	r22, 0x00AD
     762:	10 91 ae 00 	lds	r17, 0x00AE
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	61 2f       	mov	r22, r17
     770:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     774:	8a e3       	ldi	r24, 0x3A	; 58
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	0e 94 97 01 	call	0x32e	; 0x32e <enc28j60ReadOp>
     77c:	18 2f       	mov	r17, r24
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     77e:	8a e3       	ldi	r24, 0x3A	; 58
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	0e 94 97 01 	call	0x32e	; 0x32e <enc28j60ReadOp>
     786:	38 2f       	mov	r19, r24
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	e1 2e       	mov	r14, r17
     78c:	ff 24       	eor	r15, r15
     78e:	e2 2a       	or	r14, r18
     790:	f3 2a       	or	r15, r19
     792:	f0 92 ae 00 	sts	0x00AE, r15
     796:	e0 92 ad 00 	sts	0x00AD, r14
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     79a:	8a e3       	ldi	r24, 0x3A	; 58
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	0e 94 97 01 	call	0x32e	; 0x32e <enc28j60ReadOp>
     7a2:	c8 2e       	mov	r12, r24
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     7a4:	8a e3       	ldi	r24, 0x3A	; 58
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	0e 94 97 01 	call	0x32e	; 0x32e <enc28j60ReadOp>
     7ac:	d8 2e       	mov	r13, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     7ae:	8a e3       	ldi	r24, 0x3A	; 58
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	0e 94 97 01 	call	0x32e	; 0x32e <enc28j60ReadOp>
     7b6:	08 2f       	mov	r16, r24
     7b8:	10 e0       	ldi	r17, 0x00	; 0
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
     7ba:	8a e3       	ldi	r24, 0x3A	; 58
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	0e 94 97 01 	call	0x32e	; 0x32e <enc28j60ReadOp>
                len=maxlen-1;
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
     7c2:	38 2f       	mov	r19, r24
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	20 2b       	or	r18, r16
     7c8:	31 2b       	or	r19, r17
     7ca:	27 fd       	sbrc	r18, 7
     7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <enc28j60PacketReceive+0xa2>
     7ce:	c0 e0       	ldi	r28, 0x00	; 0
     7d0:	d0 e0       	ldi	r29, 0x00	; 0
     7d2:	11 c0       	rjmp	.+34     	; 0x7f6 <enc28j60PacketReceive+0xc4>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     7d4:	cc 2d       	mov	r28, r12
     7d6:	d0 e0       	ldi	r29, 0x00	; 0
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     7d8:	9d 2d       	mov	r25, r13
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	c8 2b       	or	r28, r24
     7de:	d9 2b       	or	r29, r25
        len-=4; //remove the CRC count
     7e0:	c5 01       	movw	r24, r10
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	24 97       	sbiw	r28, 0x04	; 4
     7e6:	8c 17       	cp	r24, r28
     7e8:	9d 07       	cpc	r25, r29
     7ea:	08 f4       	brcc	.+2      	; 0x7ee <enc28j60PacketReceive+0xbc>
     7ec:	ec 01       	movw	r28, r24
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
     7ee:	ce 01       	movw	r24, r28
     7f0:	b4 01       	movw	r22, r8
     7f2:	0e 94 b4 01 	call	0x368	; 0x368 <enc28j60ReadBuffer>
        }
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
     7f6:	de 2c       	mov	r13, r14
     7f8:	8c e0       	ldi	r24, 0x0C	; 12
     7fa:	6e 2d       	mov	r22, r14
     7fc:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
	enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
     800:	8d e0       	ldi	r24, 0x0D	; 13
     802:	6f 2d       	mov	r22, r15
     804:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
        // Move the RX read pointer to the start of the next received packet
        // This frees the memory we just read out.
        // However, compensate for the errata point 13, rev B4: enver write an even address!
        if ((gNextPacketPtr - 1 < RXSTART_INIT)
     808:	87 01       	movw	r16, r14
     80a:	01 50       	subi	r16, 0x01	; 1
     80c:	10 40       	sbci	r17, 0x00	; 0
     80e:	89 e1       	ldi	r24, 0x19	; 25
     810:	0f 3f       	cpi	r16, 0xFF	; 255
     812:	18 07       	cpc	r17, r24
     814:	38 f0       	brcs	.+14     	; 0x824 <enc28j60PacketReceive+0xf2>
                || (gNextPacketPtr -1 > RXSTOP_INIT)) {
                enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
     816:	8c e0       	ldi	r24, 0x0C	; 12
     818:	6e ef       	ldi	r22, 0xFE	; 254
     81a:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
                enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
     81e:	8d e0       	ldi	r24, 0x0D	; 13
     820:	69 e1       	ldi	r22, 0x19	; 25
     822:	07 c0       	rjmp	.+14     	; 0x832 <enc28j60PacketReceive+0x100>
        } else {
                enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
     824:	da 94       	dec	r13
     826:	8c e0       	ldi	r24, 0x0C	; 12
     828:	6d 2d       	mov	r22, r13
     82a:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
     82e:	8d e0       	ldi	r24, 0x0D	; 13
     830:	61 2f       	mov	r22, r17
     832:	0e 94 12 02 	call	0x424	; 0x424 <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     836:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     838:	8e e9       	ldi	r24, 0x9E	; 158
     83a:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     83c:	77 9b       	sbis	0x0e, 7	; 14
     83e:	fe cf       	rjmp	.-4      	; 0x83c <enc28j60PacketReceive+0x10a>
        // write data
        SPDR = data;
     840:	80 e4       	ldi	r24, 0x40	; 64
     842:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     844:	77 9b       	sbis	0x0e, 7	; 14
     846:	fe cf       	rjmp	.-4      	; 0x844 <enc28j60PacketReceive+0x112>
        CSPASSIVE;
     848:	c4 9a       	sbi	0x18, 4	; 24
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
}
     84a:	ce 01       	movw	r24, r28
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	1f 91       	pop	r17
     852:	0f 91       	pop	r16
     854:	ff 90       	pop	r15
     856:	ef 90       	pop	r14
     858:	df 90       	pop	r13
     85a:	cf 90       	pop	r12
     85c:	bf 90       	pop	r11
     85e:	af 90       	pop	r10
     860:	9f 90       	pop	r9
     862:	8f 90       	pop	r8
     864:	08 95       	ret

00000866 <checksum>:
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
     866:	cf 92       	push	r12
     868:	df 92       	push	r13
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	6c 01       	movw	r12, r24
        uint32_t sum = 0;

        //if(type==0){
        //        // do not add anything
        //}
        if(type==1){
     878:	41 30       	cpi	r20, 0x01	; 1
     87a:	81 f4       	brne	.+32     	; 0x89c <checksum+0x36>
                sum+=IP_PROTO_UDP_V; // protocol udp
                // the length here is the length of udp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
     87c:	68 50       	subi	r22, 0x08	; 8
     87e:	70 40       	sbci	r23, 0x00	; 0
     880:	7b 01       	movw	r14, r22
     882:	00 e0       	ldi	r16, 0x00	; 0
     884:	10 e0       	ldi	r17, 0x00	; 0
     886:	68 5f       	subi	r22, 0xF8	; 248
     888:	7f 4f       	sbci	r23, 0xFF	; 255
     88a:	21 e1       	ldi	r18, 0x11	; 17
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	40 e0       	ldi	r20, 0x00	; 0
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	e2 0e       	add	r14, r18
     894:	f3 1e       	adc	r15, r19
     896:	04 1f       	adc	r16, r20
     898:	15 1f       	adc	r17, r21
     89a:	15 c0       	rjmp	.+42     	; 0x8c6 <checksum+0x60>
        }
        if(type==2){
     89c:	42 30       	cpi	r20, 0x02	; 2
     89e:	21 f0       	breq	.+8      	; 0x8a8 <checksum+0x42>
     8a0:	ee 24       	eor	r14, r14
     8a2:	ff 24       	eor	r15, r15
     8a4:	87 01       	movw	r16, r14
     8a6:	0f c0       	rjmp	.+30     	; 0x8c6 <checksum+0x60>
                sum+=IP_PROTO_TCP_V; 
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
     8a8:	68 50       	subi	r22, 0x08	; 8
     8aa:	70 40       	sbci	r23, 0x00	; 0
     8ac:	7b 01       	movw	r14, r22
     8ae:	00 e0       	ldi	r16, 0x00	; 0
     8b0:	10 e0       	ldi	r17, 0x00	; 0
     8b2:	68 5f       	subi	r22, 0xF8	; 248
     8b4:	7f 4f       	sbci	r23, 0xFF	; 255
     8b6:	86 e0       	ldi	r24, 0x06	; 6
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	a0 e0       	ldi	r26, 0x00	; 0
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	e8 0e       	add	r14, r24
     8c0:	f9 1e       	adc	r15, r25
     8c2:	0a 1f       	adc	r16, r26
     8c4:	1b 1f       	adc	r17, r27
     8c6:	f6 01       	movw	r30, r12
     8c8:	eb 01       	movw	r28, r22
     8ca:	16 c0       	rjmp	.+44     	; 0x8f8 <checksum+0x92>
        }
        // build the sum of 16bit words
        while(len >1){
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
     8cc:	80 81       	ld	r24, Z
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	a0 e0       	ldi	r26, 0x00	; 0
     8d2:	b0 e0       	ldi	r27, 0x00	; 0
     8d4:	ba 2f       	mov	r27, r26
     8d6:	a9 2f       	mov	r26, r25
     8d8:	98 2f       	mov	r25, r24
     8da:	88 27       	eor	r24, r24
     8dc:	21 81       	ldd	r18, Z+1	; 0x01
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	40 e0       	ldi	r20, 0x00	; 0
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	82 2b       	or	r24, r18
     8e6:	93 2b       	or	r25, r19
     8e8:	a4 2b       	or	r26, r20
     8ea:	b5 2b       	or	r27, r21
     8ec:	e8 0e       	add	r14, r24
     8ee:	f9 1e       	adc	r15, r25
     8f0:	0a 1f       	adc	r16, r26
     8f2:	1b 1f       	adc	r17, r27
                buf+=2;
     8f4:	32 96       	adiw	r30, 0x02	; 2
                len-=2;
     8f6:	22 97       	sbiw	r28, 0x02	; 2
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
        }
        // build the sum of 16bit words
        while(len >1){
     8f8:	c2 30       	cpi	r28, 0x02	; 2
     8fa:	d1 05       	cpc	r29, r1
     8fc:	38 f7       	brcc	.-50     	; 0x8cc <checksum+0x66>
     8fe:	fb 01       	movw	r30, r22
     900:	ee 7f       	andi	r30, 0xFE	; 254
     902:	ec 0d       	add	r30, r12
     904:	fd 1d       	adc	r31, r13
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
                buf+=2;
                len-=2;
        }
        // if there is a byte left then add it (padded with zero)
        if (len){
     906:	60 ff       	sbrs	r22, 0
     908:	15 c0       	rjmp	.+42     	; 0x934 <checksum+0xce>
                sum += ((uint32_t)(0xFF & *buf))<<8;
     90a:	80 81       	ld	r24, Z
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	a0 e0       	ldi	r26, 0x00	; 0
     910:	b0 e0       	ldi	r27, 0x00	; 0
     912:	ba 2f       	mov	r27, r26
     914:	a9 2f       	mov	r26, r25
     916:	98 2f       	mov	r25, r24
     918:	88 27       	eor	r24, r24
     91a:	08 c0       	rjmp	.+16     	; 0x92c <checksum+0xc6>
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
                sum = (sum & 0xFFFF)+(sum >> 16);
     91c:	2f ef       	ldi	r18, 0xFF	; 255
     91e:	3f ef       	ldi	r19, 0xFF	; 255
     920:	40 e0       	ldi	r20, 0x00	; 0
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	e2 22       	and	r14, r18
     926:	f3 22       	and	r15, r19
     928:	04 23       	and	r16, r20
     92a:	15 23       	and	r17, r21
     92c:	e8 0e       	add	r14, r24
     92e:	f9 1e       	adc	r15, r25
     930:	0a 1f       	adc	r16, r26
     932:	1b 1f       	adc	r17, r27
        if (len){
                sum += ((uint32_t)(0xFF & *buf))<<8;
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
     934:	c8 01       	movw	r24, r16
     936:	aa 27       	eor	r26, r26
     938:	bb 27       	eor	r27, r27
     93a:	00 97       	sbiw	r24, 0x00	; 0
     93c:	a1 05       	cpc	r26, r1
     93e:	b1 05       	cpc	r27, r1
     940:	69 f7       	brne	.-38     	; 0x91c <checksum+0xb6>
     942:	97 01       	movw	r18, r14
     944:	20 95       	com	r18
     946:	30 95       	com	r19
                sum = (sum & 0xFFFF)+(sum >> 16);
        }
        // build 1's complement:
        return( (uint16_t) sum ^ 0xFFFF);
}
     948:	c9 01       	movw	r24, r18
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	08 95       	ret

0000095c <init_ip_arp_udp_tcp>:

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	ec 01       	movw	r28, r24
        uint8_t i=0;
        wwwport=wwwp;
     962:	40 93 a5 00 	sts	0x00A5, r20
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
        while(i<4){
                ipaddr[i]=myip[i];
     96a:	f9 01       	movw	r30, r18
     96c:	eb 54       	subi	r30, 0x4B	; 75
     96e:	ff 4f       	sbci	r31, 0xFF	; 255
     970:	db 01       	movw	r26, r22
     972:	a2 0f       	add	r26, r18
     974:	b3 1f       	adc	r27, r19
     976:	8c 91       	ld	r24, X
     978:	80 83       	st	Z, r24
     97a:	2f 5f       	subi	r18, 0xFF	; 255
     97c:	3f 4f       	sbci	r19, 0xFF	; 255

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
        uint8_t i=0;
        wwwport=wwwp;
        while(i<4){
     97e:	24 30       	cpi	r18, 0x04	; 4
     980:	31 05       	cpc	r19, r1
     982:	99 f7       	brne	.-26     	; 0x96a <init_ip_arp_udp_tcp+0xe>
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
                macaddr[i]=mymac[i];
     988:	f9 01       	movw	r30, r18
     98a:	e1 55       	subi	r30, 0x51	; 81
     98c:	ff 4f       	sbci	r31, 0xFF	; 255
     98e:	de 01       	movw	r26, r28
     990:	a2 0f       	add	r26, r18
     992:	b3 1f       	adc	r27, r19
     994:	8c 91       	ld	r24, X
     996:	80 83       	st	Z, r24
     998:	2f 5f       	subi	r18, 0xFF	; 255
     99a:	3f 4f       	sbci	r19, 0xFF	; 255
        while(i<4){
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
     99c:	26 30       	cpi	r18, 0x06	; 6
     99e:	31 05       	cpc	r19, r1
     9a0:	99 f7       	brne	.-26     	; 0x988 <init_ip_arp_udp_tcp+0x2c>
                macaddr[i]=mymac[i];
                i++;
        }
}
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <eth_type_is_arp_and_my_ip>:

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
     9a8:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //  
        if (len<41){
     9aa:	69 32       	cpi	r22, 0x29	; 41
     9ac:	71 05       	cpc	r23, r1
     9ae:	b0 f0       	brcs	.+44     	; 0x9dc <eth_type_is_arp_and_my_ip+0x34>
                return(0);
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
     9b0:	84 85       	ldd	r24, Z+12	; 0x0c
     9b2:	88 30       	cpi	r24, 0x08	; 8
     9b4:	99 f4       	brne	.+38     	; 0x9dc <eth_type_is_arp_and_my_ip+0x34>
     9b6:	85 85       	ldd	r24, Z+13	; 0x0d
     9b8:	86 30       	cpi	r24, 0x06	; 6
     9ba:	81 f4       	brne	.+32     	; 0x9dc <eth_type_is_arp_and_my_ip+0x34>
     9bc:	df 01       	movw	r26, r30
     9be:	96 96       	adiw	r26, 0x26	; 38
     9c0:	e5 eb       	ldi	r30, 0xB5	; 181
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
     9c4:	9c 91       	ld	r25, X
     9c6:	80 81       	ld	r24, Z
     9c8:	98 17       	cp	r25, r24
     9ca:	41 f4       	brne	.+16     	; 0x9dc <eth_type_is_arp_and_my_ip+0x34>
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	31 96       	adiw	r30, 0x01	; 1
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	e9 3b       	cpi	r30, 0xB9	; 185
     9d4:	f8 07       	cpc	r31, r24
     9d6:	b1 f7       	brne	.-20     	; 0x9c4 <eth_type_is_arp_and_my_ip+0x1c>
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	08 95       	ret
     9dc:	80 e0       	ldi	r24, 0x00	; 0
                        return(0);
                }
                i++;
        }
        return(1);
}
     9de:	08 95       	ret

000009e0 <eth_type_is_ip_and_my_ip>:

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
     9e0:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
     9e2:	6a 32       	cpi	r22, 0x2A	; 42
     9e4:	71 05       	cpc	r23, r1
     9e6:	d0 f0       	brcs	.+52     	; 0xa1c <eth_type_is_ip_and_my_ip+0x3c>
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
     9e8:	84 85       	ldd	r24, Z+12	; 0x0c
     9ea:	88 30       	cpi	r24, 0x08	; 8
     9ec:	b9 f4       	brne	.+46     	; 0xa1c <eth_type_is_ip_and_my_ip+0x3c>
     9ee:	85 85       	ldd	r24, Z+13	; 0x0d
     9f0:	88 23       	and	r24, r24
     9f2:	a1 f4       	brne	.+40     	; 0xa1c <eth_type_is_ip_and_my_ip+0x3c>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
                return(0);
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
     9f4:	86 85       	ldd	r24, Z+14	; 0x0e
     9f6:	85 34       	cpi	r24, 0x45	; 69
     9f8:	89 f4       	brne	.+34     	; 0xa1c <eth_type_is_ip_and_my_ip+0x3c>
     9fa:	df 01       	movw	r26, r30
     9fc:	e5 eb       	ldi	r30, 0xB5	; 181
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
                if(buf[IP_DST_P+i]!=ipaddr[i]){
     a00:	5e 96       	adiw	r26, 0x1e	; 30
     a02:	9c 91       	ld	r25, X
     a04:	5e 97       	sbiw	r26, 0x1e	; 30
     a06:	80 81       	ld	r24, Z
     a08:	98 17       	cp	r25, r24
     a0a:	41 f4       	brne	.+16     	; 0xa1c <eth_type_is_ip_and_my_ip+0x3c>
     a0c:	11 96       	adiw	r26, 0x01	; 1
     a0e:	31 96       	adiw	r30, 0x01	; 1
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	e9 3b       	cpi	r30, 0xB9	; 185
     a14:	f8 07       	cpc	r31, r24
     a16:	a1 f7       	brne	.-24     	; 0xa00 <eth_type_is_ip_and_my_ip+0x20>
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	08 95       	ret
     a1c:	80 e0       	ldi	r24, 0x00	; 0
                        return(0);
                }
                i++;
        }
        return(1);
}
     a1e:	08 95       	ret

00000a20 <make_eth>:
// make a return eth header from a received eth packet
void make_eth(uint8_t *buf)
{
     a20:	fc 01       	movw	r30, r24
     a22:	af ea       	ldi	r26, 0xAF	; 175
     a24:	b0 e0       	ldi	r27, 0x00	; 0
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     a26:	86 81       	ldd	r24, Z+6	; 0x06
     a28:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     a2a:	8d 91       	ld	r24, X+
     a2c:	86 83       	std	Z+6, r24	; 0x06
     a2e:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	a5 3b       	cpi	r26, 0xB5	; 181
     a34:	b8 07       	cpc	r27, r24
     a36:	b9 f7       	brne	.-18     	; 0xa26 <make_eth+0x6>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
}
     a38:	08 95       	ret

00000a3a <fill_ip_hdr_checksum>:
void fill_ip_hdr_checksum(uint8_t *buf)
{
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	8c 01       	movw	r16, r24
        uint16_t ck;
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
     a40:	fc 01       	movw	r30, r24
     a42:	10 8e       	std	Z+24, r1	; 0x18
        buf[IP_CHECKSUM_P+1]=0;
     a44:	11 8e       	std	Z+25, r1	; 0x19
        buf[IP_FLAGS_P]=0x40; // don't fragment
     a46:	80 e4       	ldi	r24, 0x40	; 64
     a48:	84 8b       	std	Z+20, r24	; 0x14
        buf[IP_FLAGS_P+1]=0;  // fragement offset
     a4a:	15 8a       	std	Z+21, r1	; 0x15
        buf[IP_TTL_P]=64; // ttl
     a4c:	86 8b       	std	Z+22, r24	; 0x16
        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
     a4e:	c8 01       	movw	r24, r16
     a50:	0e 96       	adiw	r24, 0x0e	; 14
     a52:	64 e1       	ldi	r22, 0x14	; 20
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	40 e0       	ldi	r20, 0x00	; 0
     a58:	0e 94 33 04 	call	0x866	; 0x866 <checksum>
        buf[IP_CHECKSUM_P]=ck>>8;
     a5c:	f8 01       	movw	r30, r16
     a5e:	90 8f       	std	Z+24, r25	; 0x18
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
     a60:	81 8f       	std	Z+25, r24	; 0x19
}
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	08 95       	ret

00000a68 <make_ip>:

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
     a68:	ac 01       	movw	r20, r24
     a6a:	fc 01       	movw	r30, r24
     a6c:	a5 eb       	ldi	r26, 0xB5	; 181
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
        uint8_t i=0;
        while(i<4){
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
     a70:	82 8d       	ldd	r24, Z+26	; 0x1a
     a72:	86 8f       	std	Z+30, r24	; 0x1e
                buf[IP_SRC_P+i]=ipaddr[i];
     a74:	8d 91       	ld	r24, X+
     a76:	82 8f       	std	Z+26, r24	; 0x1a
     a78:	31 96       	adiw	r30, 0x01	; 1

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	a9 3b       	cpi	r26, 0xB9	; 185
     a7e:	b8 07       	cpc	r27, r24
     a80:	b9 f7       	brne	.-18     	; 0xa70 <make_ip+0x8>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        fill_ip_hdr_checksum(buf);
     a82:	ca 01       	movw	r24, r20
     a84:	0e 94 1d 05 	call	0xa3a	; 0xa3a <fill_ip_hdr_checksum>
}
     a88:	08 95       	ret

00000a8a <make_tcphead>:
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t mss,uint8_t cp_seq)
{
     a8a:	fc 01       	movw	r30, r24
        uint8_t i=0;
        uint8_t tseq;
        while(i<2){
                buf[TCP_DST_PORT_H_P+i]=buf[TCP_SRC_PORT_H_P+i];
     a8c:	82 a1       	ldd	r24, Z+34	; 0x22
     a8e:	84 a3       	std	Z+36, r24	; 0x24
                buf[TCP_SRC_PORT_H_P+i]=0; // clear source port
     a90:	12 a2       	std	Z+34, r1	; 0x22
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t mss,uint8_t cp_seq)
{
        uint8_t i=0;
        uint8_t tseq;
        while(i<2){
                buf[TCP_DST_PORT_H_P+i]=buf[TCP_SRC_PORT_H_P+i];
     a92:	83 a1       	ldd	r24, Z+35	; 0x23
     a94:	85 a3       	std	Z+37, r24	; 0x25
                buf[TCP_SRC_PORT_H_P+i]=0; // clear source port
     a96:	13 a2       	std	Z+35, r1	; 0x23
                i++;
        }
        // set source port  (http):
        buf[TCP_SRC_PORT_L_P]=wwwport;
     a98:	80 91 a5 00 	lds	r24, 0x00A5
     a9c:	83 a3       	std	Z+35, r24	; 0x23
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t mss,uint8_t cp_seq)
{
     a9e:	df 01       	movw	r26, r30
     aa0:	99 96       	adiw	r26, 0x29	; 41
     aa2:	94 e0       	ldi	r25, 0x04	; 4
        buf[TCP_SRC_PORT_L_P]=wwwport;
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
                rel_ack_num=buf[TCP_SEQ_H_P+i-1]+rel_ack_num;
     aa4:	8c 91       	ld	r24, X
     aa6:	68 0f       	add	r22, r24
     aa8:	71 1d       	adc	r23, r1
                tseq=buf[TCP_SEQACK_H_P+i-1];
     aaa:	14 96       	adiw	r26, 0x04	; 4
     aac:	8c 91       	ld	r24, X
     aae:	14 97       	sbiw	r26, 0x04	; 4
                buf[TCP_SEQACK_H_P+i-1]=0xff&rel_ack_num;
     ab0:	14 96       	adiw	r26, 0x04	; 4
     ab2:	6c 93       	st	X, r22
     ab4:	14 97       	sbiw	r26, 0x04	; 4
                if (cp_seq){
     ab6:	22 23       	and	r18, r18
     ab8:	11 f0       	breq	.+4      	; 0xabe <make_tcphead+0x34>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
     aba:	8c 93       	st	X, r24
     abc:	01 c0       	rjmp	.+2      	; 0xac0 <make_tcphead+0x36>
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
     abe:	1c 92       	st	X, r1
                }
                rel_ack_num=rel_ack_num>>8;
                i--;
     ac0:	91 50       	subi	r25, 0x01	; 1
     ac2:	11 97       	sbiw	r26, 0x01	; 1
        // set source port  (http):
        buf[TCP_SRC_PORT_L_P]=wwwport;
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
     ac4:	99 23       	and	r25, r25
     ac6:	19 f0       	breq	.+6      	; 0xace <make_tcphead+0x44>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
                }
                rel_ack_num=rel_ack_num>>8;
     ac8:	67 2f       	mov	r22, r23
     aca:	77 27       	eor	r23, r23
     acc:	eb cf       	rjmp	.-42     	; 0xaa4 <make_tcphead+0x1a>
                i--;
        }
        if (cp_seq==0){
     ace:	22 23       	and	r18, r18
     ad0:	49 f4       	brne	.+18     	; 0xae4 <make_tcphead+0x5a>
                // put inital seq number
                buf[TCP_SEQ_H_P+0]= 0;
     ad2:	16 a2       	std	Z+38, r1	; 0x26
                buf[TCP_SEQ_H_P+1]= 0;
     ad4:	17 a2       	std	Z+39, r1	; 0x27
                // we step only the second byte, this allows us to send packts 
                // with 255 bytes or 512 (if we step the initial seqnum by 2)
                buf[TCP_SEQ_H_P+2]= seqnum; 
     ad6:	80 91 a6 00 	lds	r24, 0x00A6
     ada:	80 a7       	std	Z+40, r24	; 0x28
                buf[TCP_SEQ_H_P+3]= 0;
     adc:	11 a6       	std	Z+41, r1	; 0x29
                // step the inititial seq num by something we will not use
                // during this tcp session:
                seqnum+=2;
     ade:	8e 5f       	subi	r24, 0xFE	; 254
     ae0:	80 93 a6 00 	sts	0x00A6, r24
        }
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
     ae4:	12 aa       	std	Z+50, r1	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
     ae6:	13 aa       	std	Z+51, r1	; 0x33

        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes. 
        // E.g 24 bytes: 24/4=6 => 0x60=header len field
        //buf[TCP_HEADER_LEN_P]=(((TCP_HEADER_LEN_PLAIN+4)/4)) <<4; // 0x60
        if (mss){
     ae8:	44 23       	and	r20, r20
     aea:	51 f0       	breq	.+20     	; 0xb00 <make_tcphead+0x76>
                // the only option we set is MSS to 1408:
                // 1408 in hex is 0x580
                buf[TCP_OPTIONS_P]=2;
     aec:	82 e0       	ldi	r24, 0x02	; 2
     aee:	86 ab       	std	Z+54, r24	; 0x36
                buf[TCP_OPTIONS_P+1]=4;
     af0:	84 e0       	ldi	r24, 0x04	; 4
     af2:	87 ab       	std	Z+55, r24	; 0x37
                buf[TCP_OPTIONS_P+2]=0x05; 
     af4:	85 e0       	ldi	r24, 0x05	; 5
     af6:	80 af       	std	Z+56, r24	; 0x38
                buf[TCP_OPTIONS_P+3]=0x80;
     af8:	80 e8       	ldi	r24, 0x80	; 128
     afa:	81 af       	std	Z+57, r24	; 0x39
                // 24 bytes:
                buf[TCP_HEADER_LEN_P]=0x60;
     afc:	80 e6       	ldi	r24, 0x60	; 96
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <make_tcphead+0x78>
        }else{
                // no options:
                // 20 bytes:
                buf[TCP_HEADER_LEN_P]=0x50;
     b00:	80 e5       	ldi	r24, 0x50	; 80
     b02:	86 a7       	std	Z+46, r24	; 0x2e
     b04:	08 95       	ret

00000b06 <make_arp_answer_from_request>:
        }
}

void make_arp_answer_from_request(uint8_t *buf)
{
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	ac 01       	movw	r20, r24
     b0c:	ec 01       	movw	r28, r24
     b0e:	2f ea       	ldi	r18, 0xAF	; 175
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	fc 01       	movw	r30, r24
     b14:	d9 01       	movw	r26, r18
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     b16:	86 81       	ldd	r24, Z+6	; 0x06
     b18:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     b1a:	8d 91       	ld	r24, X+
     b1c:	86 83       	std	Z+6, r24	; 0x06
     b1e:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	a5 3b       	cpi	r26, 0xB5	; 181
     b24:	b8 07       	cpc	r27, r24
     b26:	b9 f7       	brne	.-18     	; 0xb16 <make_arp_answer_from_request+0x10>
void make_arp_answer_from_request(uint8_t *buf)
{
        uint8_t i=0;
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
     b28:	fa 01       	movw	r30, r20
     b2a:	14 8a       	std	Z+20, r1	; 0x14
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	85 8b       	std	Z+21, r24	; 0x15
        // fill the mac addresses:
        while(i<6){
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
     b30:	8e 89       	ldd	r24, Y+22	; 0x16
     b32:	88 a3       	std	Y+32, r24	; 0x20
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
     b34:	f9 01       	movw	r30, r18
     b36:	81 91       	ld	r24, Z+
     b38:	9f 01       	movw	r18, r30
     b3a:	8e 8b       	std	Y+22, r24	; 0x16
     b3c:	21 96       	adiw	r28, 0x01	; 1
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
        // fill the mac addresses:
        while(i<6){
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	25 3b       	cpi	r18, 0xB5	; 181
     b42:	3f 07       	cpc	r19, r31
     b44:	a9 f7       	brne	.-22     	; 0xb30 <make_arp_answer_from_request+0x2a>
     b46:	fa 01       	movw	r30, r20
     b48:	7c 96       	adiw	r30, 0x1c	; 28
     b4a:	a5 eb       	ldi	r26, 0xB5	; 181
     b4c:	b0 e0       	ldi	r27, 0x00	; 0
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
     b4e:	80 81       	ld	r24, Z
     b50:	82 87       	std	Z+10, r24	; 0x0a
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
     b52:	8d 91       	ld	r24, X+
     b54:	81 93       	st	Z+, r24
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	a9 3b       	cpi	r26, 0xB9	; 185
     b5a:	b8 07       	cpc	r27, r24
     b5c:	c1 f7       	brne	.-16     	; 0xb4e <make_arp_answer_from_request+0x48>
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf); 
     b5e:	8a e2       	ldi	r24, 0x2A	; 42
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	ba 01       	movw	r22, r20
     b64:	0e 94 27 03 	call	0x64e	; 0x64e <enc28j60PacketSend>
}
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	08 95       	ret

00000b6e <make_echo_reply_from_request>:

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	ec 01       	movw	r28, r24
     b78:	8b 01       	movw	r16, r22
     b7a:	fc 01       	movw	r30, r24
     b7c:	af ea       	ldi	r26, 0xAF	; 175
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     b80:	86 81       	ldd	r24, Z+6	; 0x06
     b82:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     b84:	8d 91       	ld	r24, X+
     b86:	86 83       	std	Z+6, r24	; 0x06
     b88:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	a5 3b       	cpi	r26, 0xB5	; 181
     b8e:	b8 07       	cpc	r27, r24
     b90:	b9 f7       	brne	.-18     	; 0xb80 <make_echo_reply_from_request+0x12>
}

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
        make_eth(buf);
        make_ip(buf);
     b92:	ce 01       	movw	r24, r28
     b94:	0e 94 34 05 	call	0xa68	; 0xa68 <make_ip>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
     b98:	1a a2       	std	Y+34, r1	; 0x22
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
     b9a:	8c a1       	ldd	r24, Y+36	; 0x24
     b9c:	88 3f       	cpi	r24, 0xF8	; 248
     b9e:	18 f0       	brcs	.+6      	; 0xba6 <make_echo_reply_from_request+0x38>
                buf[ICMP_CHECKSUM_P+1]++;
     ba0:	8d a1       	ldd	r24, Y+37	; 0x25
     ba2:	8f 5f       	subi	r24, 0xFF	; 255
     ba4:	8d a3       	std	Y+37, r24	; 0x25
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
     ba6:	8c a1       	ldd	r24, Y+36	; 0x24
     ba8:	88 5f       	subi	r24, 0xF8	; 248
     baa:	8c a3       	std	Y+36, r24	; 0x24
        //
        enc28j60PacketSend(len,buf);
     bac:	c8 01       	movw	r24, r16
     bae:	be 01       	movw	r22, r28
     bb0:	0e 94 27 03 	call	0x64e	; 0x64e <enc28j60PacketSend>
}
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	08 95       	ret

00000bbe <make_udp_reply_from_request>:

// you can send a max of 220 bytes of data
void make_udp_reply_from_request(uint8_t *buf,char *data,uint8_t datalen,uint16_t port)
{
     bbe:	df 92       	push	r13
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	ec 01       	movw	r28, r24
     bce:	7b 01       	movw	r14, r22
     bd0:	d2 2e       	mov	r13, r18
     bd2:	13 2f       	mov	r17, r19
     bd4:	fc 01       	movw	r30, r24
     bd6:	af ea       	ldi	r26, 0xAF	; 175
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     bda:	86 81       	ldd	r24, Z+6	; 0x06
     bdc:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     bde:	8d 91       	ld	r24, X+
     be0:	86 83       	std	Z+6, r24	; 0x06
     be2:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	a5 3b       	cpi	r26, 0xB5	; 181
     be8:	b8 07       	cpc	r27, r24
     bea:	b9 f7       	brne	.-18     	; 0xbda <make_udp_reply_from_request+0x1c>
     bec:	04 2f       	mov	r16, r20
     bee:	4d 3d       	cpi	r20, 0xDD	; 221
     bf0:	08 f0       	brcs	.+2      	; 0xbf4 <make_udp_reply_from_request+0x36>
     bf2:	0c ed       	ldi	r16, 0xDC	; 220
        make_eth(buf);
        if (datalen>220){
                datalen=220;
        }
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
     bf4:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
     bf6:	04 5e       	subi	r16, 0xE4	; 228
     bf8:	09 8b       	std	Y+17, r16	; 0x11
        make_ip(buf);
     bfa:	ce 01       	movw	r24, r28
     bfc:	0e 94 34 05 	call	0xa68	; 0xa68 <make_ip>
        // send to port:
        //buf[UDP_DST_PORT_H_P]=port>>8;
        //buf[UDP_DST_PORT_L_P]=port & 0xff;
        // sent to port of sender and use "port" as own source:
        buf[UDP_DST_PORT_H_P]=buf[UDP_SRC_PORT_H_P];
     c00:	8a a1       	ldd	r24, Y+34	; 0x22
     c02:	8c a3       	std	Y+36, r24	; 0x24
        buf[UDP_DST_PORT_L_P]= buf[UDP_SRC_PORT_L_P];
     c04:	8b a1       	ldd	r24, Y+35	; 0x23
     c06:	8d a3       	std	Y+37, r24	; 0x25
        buf[UDP_SRC_PORT_H_P]=port>>8;
     c08:	1a a3       	std	Y+34, r17	; 0x22
        buf[UDP_SRC_PORT_L_P]=port & 0xff;
     c0a:	db a2       	std	Y+35, r13	; 0x23
        // calculte the udp length:
        buf[UDP_LEN_H_P]=0;
     c0c:	1e a2       	std	Y+38, r1	; 0x26
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
     c0e:	04 51       	subi	r16, 0x14	; 20
     c10:	0f a3       	std	Y+39, r16	; 0x27
     c12:	08 50       	subi	r16, 0x08	; 8
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
     c14:	18 a6       	std	Y+40, r1	; 0x28
        buf[UDP_CHECKSUM_L_P]=0;
     c16:	19 a6       	std	Y+41, r1	; 0x29
     c18:	de 01       	movw	r26, r28
     c1a:	9a 96       	adiw	r26, 0x2a	; 42
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	07 c0       	rjmp	.+14     	; 0xc30 <make_udp_reply_from_request+0x72>
        // copy the data:
        while(i<datalen){
                buf[UDP_DATA_P+i]=data[i];
     c22:	f7 01       	movw	r30, r14
     c24:	e2 0f       	add	r30, r18
     c26:	f3 1f       	adc	r31, r19
     c28:	80 81       	ld	r24, Z
     c2a:	8d 93       	st	X+, r24
     c2c:	2f 5f       	subi	r18, 0xFF	; 255
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
        buf[UDP_CHECKSUM_L_P]=0;
        // copy the data:
        while(i<datalen){
     c30:	20 17       	cp	r18, r16
     c32:	b8 f3       	brcs	.-18     	; 0xc22 <make_udp_reply_from_request+0x64>
                buf[UDP_DATA_P+i]=data[i];
                i++;
        }
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
     c34:	10 e0       	ldi	r17, 0x00	; 0
     c36:	00 5f       	subi	r16, 0xF0	; 240
     c38:	1f 4f       	sbci	r17, 0xFF	; 255
     c3a:	ce 01       	movw	r24, r28
     c3c:	4a 96       	adiw	r24, 0x1a	; 26
     c3e:	b8 01       	movw	r22, r16
     c40:	41 e0       	ldi	r20, 0x01	; 1
     c42:	0e 94 33 04 	call	0x866	; 0x866 <checksum>
        buf[UDP_CHECKSUM_H_P]=ck>>8;
     c46:	98 a7       	std	Y+40, r25	; 0x28
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
     c48:	89 a7       	std	Y+41, r24	; 0x29
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
     c4a:	c8 01       	movw	r24, r16
     c4c:	4a 96       	adiw	r24, 0x1a	; 26
     c4e:	be 01       	movw	r22, r28
     c50:	0e 94 27 03 	call	0x64e	; 0x64e <enc28j60PacketSend>
}
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	df 90       	pop	r13
     c62:	08 95       	ret

00000c64 <make_tcp_synack_from_syn>:

void make_tcp_synack_from_syn(uint8_t *buf)
{
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	ec 01       	movw	r28, r24
     c6a:	fc 01       	movw	r30, r24
     c6c:	af ea       	ldi	r26, 0xAF	; 175
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     c70:	86 81       	ldd	r24, Z+6	; 0x06
     c72:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     c74:	8d 91       	ld	r24, X+
     c76:	86 83       	std	Z+6, r24	; 0x06
     c78:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	a5 3b       	cpi	r26, 0xB5	; 181
     c7e:	b8 07       	cpc	r27, r24
     c80:	b9 f7       	brne	.-18     	; 0xc70 <make_tcp_synack_from_syn+0xc>
{
        uint16_t ck;
        make_eth(buf);
        // total length field in the IP header must be set:
        // 20 bytes IP + 24 bytes (20tcp+4tcp options)
        buf[IP_TOTLEN_H_P]=0;
     c82:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
     c84:	8c e2       	ldi	r24, 0x2C	; 44
     c86:	89 8b       	std	Y+17, r24	; 0x11
        make_ip(buf);
     c88:	ce 01       	movw	r24, r28
     c8a:	0e 94 34 05 	call	0xa68	; 0xa68 <make_ip>
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYNACK_V;
     c8e:	82 e1       	ldi	r24, 0x12	; 18
     c90:	8f a7       	std	Y+47, r24	; 0x2f
        make_tcphead(buf,1,1,0);
     c92:	ce 01       	movw	r24, r28
     c94:	61 e0       	ldi	r22, 0x01	; 1
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	41 e0       	ldi	r20, 0x01	; 1
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	0e 94 45 05 	call	0xa8a	; 0xa8a <make_tcphead>
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + 4 (one option: mss)
        ck=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+4,2);
     ca0:	ce 01       	movw	r24, r28
     ca2:	4a 96       	adiw	r24, 0x1a	; 26
     ca4:	60 e2       	ldi	r22, 0x20	; 32
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	42 e0       	ldi	r20, 0x02	; 2
     caa:	0e 94 33 04 	call	0x866	; 0x866 <checksum>
        buf[TCP_CHECKSUM_H_P]=ck>>8;
     cae:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
     cb0:	8b ab       	std	Y+51, r24	; 0x33
        // add 4 for option mss:
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN,buf);
     cb2:	8a e3       	ldi	r24, 0x3A	; 58
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	be 01       	movw	r22, r28
     cb8:	0e 94 27 03 	call	0x64e	; 0x64e <enc28j60PacketSend>
}
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	08 95       	ret

00000cc2 <get_tcp_data_pointer>:
// get a pointer to the start of tcp data in buf
// Returns 0 if there is no data
// You must call init_len_info once before calling this function
uint16_t get_tcp_data_pointer(void)
{
        if (info_data_len){
     cc2:	80 91 a8 00 	lds	r24, 0x00A8
     cc6:	90 91 a9 00 	lds	r25, 0x00A9
     cca:	89 2b       	or	r24, r25
     ccc:	19 f4       	brne	.+6      	; 0xcd4 <get_tcp_data_pointer+0x12>
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	06 c0       	rjmp	.+12     	; 0xce0 <get_tcp_data_pointer+0x1e>
                return((uint16_t)TCP_SRC_PORT_H_P+info_hdr_len);
     cd4:	20 91 aa 00 	lds	r18, 0x00AA
     cd8:	30 91 ab 00 	lds	r19, 0x00AB
     cdc:	2e 5d       	subi	r18, 0xDE	; 222
     cde:	3f 4f       	sbci	r19, 0xFF	; 255
        }else{
                return(0);
        }
}
     ce0:	c9 01       	movw	r24, r18
     ce2:	08 95       	ret

00000ce4 <init_len_info>:

// do some basic length calculations and store the result in static varibales
void init_len_info(uint8_t *buf)
{
     ce4:	fc 01       	movw	r30, r24
        info_data_len=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
     ce6:	90 89       	ldd	r25, Z+16	; 0x10
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	21 89       	ldd	r18, Z+17	; 0x11
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	28 2b       	or	r18, r24
     cf0:	39 2b       	or	r19, r25
        info_data_len-=IP_HEADER_LEN;
        info_hdr_len=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
     cf2:	86 a5       	ldd	r24, Z+46	; 0x2e
     cf4:	82 95       	swap	r24
     cf6:	8f 70       	andi	r24, 0x0F	; 15
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	90 93 ab 00 	sts	0x00AB, r25
     d06:	80 93 aa 00 	sts	0x00AA, r24
        info_data_len-=info_hdr_len;
     d0a:	24 51       	subi	r18, 0x14	; 20
     d0c:	30 40       	sbci	r19, 0x00	; 0
     d0e:	28 1b       	sub	r18, r24
     d10:	39 0b       	sbc	r19, r25
     d12:	30 93 a9 00 	sts	0x00A9, r19
     d16:	20 93 a8 00 	sts	0x00A8, r18
        if (info_data_len<=0){
     d1a:	12 16       	cp	r1, r18
     d1c:	13 06       	cpc	r1, r19
     d1e:	24 f0       	brlt	.+8      	; 0xd28 <init_len_info+0x44>
                info_data_len=0;
     d20:	10 92 a9 00 	sts	0x00A9, r1
     d24:	10 92 a8 00 	sts	0x00A8, r1
     d28:	08 95       	ret

00000d2a <fill_tcp_data_p>:

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data_p(uint8_t *buf,uint16_t pos, const prog_char *progmem_s)
{
     d2a:	6a 5c       	subi	r22, 0xCA	; 202
     d2c:	7f 4f       	sbci	r23, 0xFF	; 255
     d2e:	dc 01       	movw	r26, r24
     d30:	a6 0f       	add	r26, r22
     d32:	b7 1f       	adc	r27, r23
     d34:	66 53       	subi	r22, 0x36	; 54
     d36:	70 40       	sbci	r23, 0x00	; 0
     d38:	03 c0       	rjmp	.+6      	; 0xd40 <fill_tcp_data_p+0x16>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     d3a:	8d 93       	st	X+, r24
                pos++;
     d3c:	6f 5f       	subi	r22, 0xFF	; 255
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
     d40:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     d42:	4f 5f       	subi	r20, 0xFF	; 255
     d44:	5f 4f       	sbci	r21, 0xFF	; 255
     d46:	84 91       	lpm	r24, Z+
     d48:	88 23       	and	r24, r24
     d4a:	b9 f7       	brne	.-18     	; 0xd3a <fill_tcp_data_p+0x10>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
                pos++;
        }
        return(pos);
}
     d4c:	cb 01       	movw	r24, r22
     d4e:	08 95       	ret

00000d50 <fill_tcp_data>:

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
     d50:	fa 01       	movw	r30, r20
     d52:	6a 5c       	subi	r22, 0xCA	; 202
     d54:	7f 4f       	sbci	r23, 0xFF	; 255
     d56:	dc 01       	movw	r26, r24
     d58:	a6 0f       	add	r26, r22
     d5a:	b7 1f       	adc	r27, r23
     d5c:	66 53       	subi	r22, 0x36	; 54
     d5e:	70 40       	sbci	r23, 0x00	; 0
     d60:	04 c0       	rjmp	.+8      	; 0xd6a <fill_tcp_data+0x1a>
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
     d62:	8d 93       	st	X+, r24
                pos++;
     d64:	6f 5f       	subi	r22, 0xFF	; 255
     d66:	7f 4f       	sbci	r23, 0xFF	; 255
                s++;
     d68:	31 96       	adiw	r30, 0x01	; 1
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
     d6a:	80 81       	ld	r24, Z
     d6c:	88 23       	and	r24, r24
     d6e:	c9 f7       	brne	.-14     	; 0xd62 <fill_tcp_data+0x12>
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
                pos++;
                s++;
        }
        return(pos);
}
     d70:	cb 01       	movw	r24, r22
     d72:	08 95       	ret

00000d74 <make_tcp_ack_from_any>:

// Make just an ack packet with no tcp data inside
// This will modify the eth/ip/tcp header 
void make_tcp_ack_from_any(uint8_t *buf)
{
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	ec 01       	movw	r28, r24
     d7a:	fc 01       	movw	r30, r24
     d7c:	af ea       	ldi	r26, 0xAF	; 175
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     d80:	86 81       	ldd	r24, Z+6	; 0x06
     d82:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     d84:	8d 91       	ld	r24, X+
     d86:	86 83       	std	Z+6, r24	; 0x06
     d88:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	a5 3b       	cpi	r26, 0xB5	; 181
     d8e:	b8 07       	cpc	r27, r24
     d90:	b9 f7       	brne	.-18     	; 0xd80 <make_tcp_ack_from_any+0xc>
void make_tcp_ack_from_any(uint8_t *buf)
{
        uint16_t j;
        make_eth(buf);
        // fill the header:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V;
     d92:	80 e1       	ldi	r24, 0x10	; 16
     d94:	8f a7       	std	Y+47, r24	; 0x2f
        if (info_data_len==0){
     d96:	60 91 a8 00 	lds	r22, 0x00A8
     d9a:	70 91 a9 00 	lds	r23, 0x00A9
     d9e:	61 15       	cp	r22, r1
     da0:	71 05       	cpc	r23, r1
     da2:	21 f4       	brne	.+8      	; 0xdac <make_tcp_ack_from_any+0x38>
                // if there is no data then we must still acknoledge one packet
                make_tcphead(buf,1,0,1); // no options
     da4:	ce 01       	movw	r24, r28
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	01 c0       	rjmp	.+2      	; 0xdae <make_tcp_ack_from_any+0x3a>
        }else{
                make_tcphead(buf,info_data_len,0,1); // no options
     dac:	ce 01       	movw	r24, r28
     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	21 e0       	ldi	r18, 0x01	; 1
     db2:	0e 94 45 05 	call	0xa8a	; 0xa8a <make_tcphead>
        }

        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) 
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
        buf[IP_TOTLEN_H_P]=j>>8;
     db6:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=j& 0xff;
     db8:	88 e2       	ldi	r24, 0x28	; 40
     dba:	89 8b       	std	Y+17, r24	; 0x11
        make_ip(buf);
     dbc:	ce 01       	movw	r24, r28
     dbe:	0e 94 34 05 	call	0xa68	; 0xa68 <make_ip>
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN,2);
     dc2:	ce 01       	movw	r24, r28
     dc4:	4a 96       	adiw	r24, 0x1a	; 26
     dc6:	6c e1       	ldi	r22, 0x1C	; 28
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	42 e0       	ldi	r20, 0x02	; 2
     dcc:	0e 94 33 04 	call	0x866	; 0x866 <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
     dd0:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
     dd2:	8b ab       	std	Y+51, r24	; 0x33
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN,buf);
     dd4:	86 e3       	ldi	r24, 0x36	; 54
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	be 01       	movw	r22, r28
     dda:	0e 94 27 03 	call	0x64e	; 0x64e <enc28j60PacketSend>
}
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	08 95       	ret

00000de4 <make_tcp_ack_with_data>:
// dlen is the amount of tcp data (http data) we send in this packet
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
void make_tcp_ack_with_data(uint8_t *buf,uint16_t dlen)
{
     de4:	ef 92       	push	r14
     de6:	ff 92       	push	r15
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	8c 01       	movw	r16, r24
     dee:	7b 01       	movw	r14, r22
        uint16_t j;
        // fill the header:
        // This code requires that we send only one data packet
        // because we keep no state information. We must therefore set
        // the fin here:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V;
     df0:	89 e1       	ldi	r24, 0x19	; 25
     df2:	f8 01       	movw	r30, r16
     df4:	87 a7       	std	Z+47, r24	; 0x2f

        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) + len of data
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
     df6:	cb 01       	movw	r24, r22
     df8:	88 96       	adiw	r24, 0x28	; 40
        buf[IP_TOTLEN_H_P]=j>>8;
     dfa:	90 8b       	std	Z+16, r25	; 0x10
        buf[IP_TOTLEN_L_P]=j& 0xff;
     dfc:	81 8b       	std	Z+17, r24	; 0x11
        fill_ip_hdr_checksum(buf);
     dfe:	c8 01       	movw	r24, r16
     e00:	0e 94 1d 05 	call	0xa3a	; 0xa3a <fill_ip_hdr_checksum>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
     e04:	f8 01       	movw	r30, r16
     e06:	12 aa       	std	Z+50, r1	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
     e08:	13 aa       	std	Z+51, r1	; 0x33
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+dlen,2);
     e0a:	8c e1       	ldi	r24, 0x1C	; 28
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	e8 0e       	add	r14, r24
     e10:	f9 1e       	adc	r15, r25
     e12:	c8 01       	movw	r24, r16
     e14:	4a 96       	adiw	r24, 0x1a	; 26
     e16:	b7 01       	movw	r22, r14
     e18:	42 e0       	ldi	r20, 0x02	; 2
     e1a:	0e 94 33 04 	call	0x866	; 0x866 <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
     e1e:	f8 01       	movw	r30, r16
     e20:	92 ab       	std	Z+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
     e22:	83 ab       	std	Z+51, r24	; 0x33
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
     e24:	c7 01       	movw	r24, r14
     e26:	4a 96       	adiw	r24, 0x1a	; 26
     e28:	b8 01       	movw	r22, r16
     e2a:	0e 94 27 03 	call	0x64e	; 0x64e <enc28j60PacketSend>
}
     e2e:	1f 91       	pop	r17
     e30:	0f 91       	pop	r16
     e32:	ff 90       	pop	r15
     e34:	ef 90       	pop	r14
     e36:	08 95       	ret

00000e38 <analyse_get_url>:
// takes a string of the form password/commandNumber and analyse it
// return values: -1 invalid password, otherwise command number
//                -2 no command given but password valid
//                -3 valid password, no command and no trailing "/"
int8_t analyse_get_url(char *str)
{
     e38:	58 2f       	mov	r21, r24
     e3a:	28 2f       	mov	r18, r24
     e3c:	39 2f       	mov	r19, r25
     e3e:	d9 01       	movw	r26, r18
     e40:	05 c0       	rjmp	.+10     	; 0xe4c <analyse_get_url+0x14>
        uint8_t loop=1;
        uint8_t i=0;
        while(loop){
                if(password[i]){
                        if(*str==password[i]){
     e42:	8e 17       	cp	r24, r30
     e44:	11 f0       	breq	.+4      	; 0xe4a <analyse_get_url+0x12>
     e46:	8f ef       	ldi	r24, 0xFF	; 255
     e48:	08 95       	ret
                                str++;
     e4a:	11 96       	adiw	r26, 0x01	; 1
int8_t analyse_get_url(char *str)
{
        uint8_t loop=1;
        uint8_t i=0;
        while(loop){
                if(password[i]){
     e4c:	ea 2f       	mov	r30, r26
     e4e:	e5 1b       	sub	r30, r21
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	e2 56       	subi	r30, 0x62	; 98
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	e0 81       	ld	r30, Z
     e58:	8c 91       	ld	r24, X
     e5a:	ee 23       	and	r30, r30
     e5c:	91 f7       	brne	.-28     	; 0xe42 <analyse_get_url+0xa>
                        // end of password
                        loop=0;
                }
        }
        // is is now one char after the password
        if (*str == '/'){
     e5e:	8f 32       	cpi	r24, 0x2F	; 47
     e60:	11 f0       	breq	.+4      	; 0xe66 <analyse_get_url+0x2e>
     e62:	8d ef       	ldi	r24, 0xFD	; 253
     e64:	08 95       	ret
                str++;
        }else{
                return(-3);
        }
        // check the first char, garbage after this is ignored (including a slash)
        if (*str < 0x3a && *str > 0x2f){
     e66:	11 96       	adiw	r26, 0x01	; 1
     e68:	8c 91       	ld	r24, X
     e6a:	80 53       	subi	r24, 0x30	; 48
     e6c:	8a 30       	cpi	r24, 0x0A	; 10
     e6e:	08 f0       	brcs	.+2      	; 0xe72 <analyse_get_url+0x3a>
     e70:	8e ef       	ldi	r24, 0xFE	; 254
                // is a ASCII number, return it
                return(*str-0x30);
        }
        return(-2);
}
     e72:	08 95       	ret

00000e74 <moved_perm>:

// answer HTTP/1.0 301 Moved Permanently\r\nLocation: password/\r\n\r\n
// to redirect to the url ending in a slash
uint16_t moved_perm(uint8_t *buf)
{
     e74:	dc 01       	movw	r26, r24
     e76:	d6 96       	adiw	r26, 0x36	; 54
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	03 c0       	rjmp	.+6      	; 0xe84 <moved_perm+0x10>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     e7e:	4d 93       	st	X+, r20
                pos++;
     e80:	2f 5f       	subi	r18, 0xFF	; 255
     e82:	3f 4f       	sbci	r19, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     e84:	f9 01       	movw	r30, r18
     e86:	eb 53       	subi	r30, 0x3B	; 59
     e88:	fd 4f       	sbci	r31, 0xFD	; 253
     e8a:	44 91       	lpm	r20, Z+
     e8c:	44 23       	and	r20, r20
     e8e:	b9 f7       	brne	.-18     	; 0xe7e <moved_perm+0xa>
     e90:	2a 5c       	subi	r18, 0xCA	; 202
     e92:	3f 4f       	sbci	r19, 0xFF	; 255
     e94:	dc 01       	movw	r26, r24
     e96:	a2 0f       	add	r26, r18
     e98:	b3 1f       	adc	r27, r19
     e9a:	26 53       	subi	r18, 0x36	; 54
     e9c:	30 40       	sbci	r19, 0x00	; 0
     e9e:	ee e9       	ldi	r30, 0x9E	; 158
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	04 c0       	rjmp	.+8      	; 0xeac <moved_perm+0x38>
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
     ea4:	4d 93       	st	X+, r20
                pos++;
     ea6:	2f 5f       	subi	r18, 0xFF	; 255
     ea8:	3f 4f       	sbci	r19, 0xFF	; 255
                s++;
     eaa:	31 96       	adiw	r30, 0x01	; 1
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
     eac:	40 81       	ld	r20, Z
     eae:	44 23       	and	r20, r20
     eb0:	c9 f7       	brne	.-14     	; 0xea4 <moved_perm+0x30>
     eb2:	2a 5c       	subi	r18, 0xCA	; 202
     eb4:	3f 4f       	sbci	r19, 0xFF	; 255
     eb6:	dc 01       	movw	r26, r24
     eb8:	a2 0f       	add	r26, r18
     eba:	b3 1f       	adc	r27, r19
     ebc:	26 53       	subi	r18, 0x36	; 54
     ebe:	30 40       	sbci	r19, 0x00	; 0
        uint16_t plen;
        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 301 Moved Permanently\r\nLocation: "));
        plen=fill_tcp_data(buf,plen,password);
        plen=fill_tcp_data_p(buf,plen,PSTR("/\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n"));
     ec0:	44 e9       	ldi	r20, 0x94	; 148
     ec2:	52 e0       	ldi	r21, 0x02	; 2
     ec4:	03 c0       	rjmp	.+6      	; 0xecc <moved_perm+0x58>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     ec6:	6d 93       	st	X+, r22
                pos++;
     ec8:	2f 5f       	subi	r18, 0xFF	; 255
     eca:	3f 4f       	sbci	r19, 0xFF	; 255
     ecc:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     ece:	4f 5f       	subi	r20, 0xFF	; 255
     ed0:	5f 4f       	sbci	r21, 0xFF	; 255
     ed2:	64 91       	lpm	r22, Z+
     ed4:	66 23       	and	r22, r22
     ed6:	b9 f7       	brne	.-18     	; 0xec6 <moved_perm+0x52>
     ed8:	2a 5c       	subi	r18, 0xCA	; 202
     eda:	3f 4f       	sbci	r19, 0xFF	; 255
     edc:	dc 01       	movw	r26, r24
     ede:	a2 0f       	add	r26, r18
     ee0:	b3 1f       	adc	r27, r19
     ee2:	26 53       	subi	r18, 0x36	; 54
     ee4:	30 40       	sbci	r19, 0x00	; 0
        plen=fill_tcp_data_p(buf,plen,PSTR("<h1>301 Moved Permanently</h1>\n"));
     ee6:	44 e7       	ldi	r20, 0x74	; 116
     ee8:	52 e0       	ldi	r21, 0x02	; 2
     eea:	03 c0       	rjmp	.+6      	; 0xef2 <moved_perm+0x7e>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     eec:	6d 93       	st	X+, r22
                pos++;
     eee:	2f 5f       	subi	r18, 0xFF	; 255
     ef0:	3f 4f       	sbci	r19, 0xFF	; 255
     ef2:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     ef4:	4f 5f       	subi	r20, 0xFF	; 255
     ef6:	5f 4f       	sbci	r21, 0xFF	; 255
     ef8:	64 91       	lpm	r22, Z+
     efa:	66 23       	and	r22, r22
     efc:	b9 f7       	brne	.-18     	; 0xeec <moved_perm+0x78>
     efe:	2a 5c       	subi	r18, 0xCA	; 202
     f00:	3f 4f       	sbci	r19, 0xFF	; 255
     f02:	dc 01       	movw	r26, r24
     f04:	a2 0f       	add	r26, r18
     f06:	b3 1f       	adc	r27, r19
     f08:	26 53       	subi	r18, 0x36	; 54
     f0a:	30 40       	sbci	r19, 0x00	; 0
        plen=fill_tcp_data_p(buf,plen,PSTR("add a trailing slash to the url\n"));
     f0c:	83 e5       	ldi	r24, 0x53	; 83
     f0e:	92 e0       	ldi	r25, 0x02	; 2
     f10:	03 c0       	rjmp	.+6      	; 0xf18 <moved_perm+0xa4>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     f12:	4d 93       	st	X+, r20
                pos++;
     f14:	2f 5f       	subi	r18, 0xFF	; 255
     f16:	3f 4f       	sbci	r19, 0xFF	; 255
     f18:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	44 91       	lpm	r20, Z+
     f1e:	44 23       	and	r20, r20
     f20:	c1 f7       	brne	.-16     	; 0xf12 <moved_perm+0x9e>
        return(plen);
}
     f22:	c9 01       	movw	r24, r18
     f24:	08 95       	ret

00000f26 <print_webpage>:


// prepare the webpage by writing the data to the tcp send buffer
uint16_t print_webpage(uint8_t *buf,uint8_t on_off)
{
     f26:	dc 01       	movw	r26, r24
     f28:	d6 96       	adiw	r26, 0x36	; 54
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <print_webpage+0x10>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     f30:	4d 93       	st	X+, r20
                pos++;
     f32:	2f 5f       	subi	r18, 0xFF	; 255
     f34:	3f 4f       	sbci	r19, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     f36:	f9 01       	movw	r30, r18
     f38:	ec 5e       	subi	r30, 0xEC	; 236
     f3a:	fd 4f       	sbci	r31, 0xFD	; 253
     f3c:	44 91       	lpm	r20, Z+
     f3e:	44 23       	and	r20, r20
     f40:	b9 f7       	brne	.-18     	; 0xf30 <print_webpage+0xa>
     f42:	2a 5c       	subi	r18, 0xCA	; 202
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	dc 01       	movw	r26, r24
     f48:	a2 0f       	add	r26, r18
     f4a:	b3 1f       	adc	r27, r19
     f4c:	26 53       	subi	r18, 0x36	; 54
     f4e:	30 40       	sbci	r19, 0x00	; 0
        uint16_t plen;
        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n"));
        plen=fill_tcp_data_p(buf,plen,PSTR("<center><p>Output is: "));
     f50:	4d ef       	ldi	r20, 0xFD	; 253
     f52:	51 e0       	ldi	r21, 0x01	; 1
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <print_webpage+0x36>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     f56:	7d 93       	st	X+, r23
                pos++;
     f58:	2f 5f       	subi	r18, 0xFF	; 255
     f5a:	3f 4f       	sbci	r19, 0xFF	; 255
     f5c:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     f5e:	4f 5f       	subi	r20, 0xFF	; 255
     f60:	5f 4f       	sbci	r21, 0xFF	; 255
     f62:	74 91       	lpm	r23, Z+
     f64:	77 23       	and	r23, r23
     f66:	b9 f7       	brne	.-18     	; 0xf56 <print_webpage+0x30>
     f68:	a9 01       	movw	r20, r18
     f6a:	4a 5c       	subi	r20, 0xCA	; 202
     f6c:	5f 4f       	sbci	r21, 0xFF	; 255
        if (on_off){
     f6e:	66 23       	and	r22, r22
     f70:	31 f4       	brne	.+12     	; 0xf7e <print_webpage+0x58>
     f72:	dc 01       	movw	r26, r24
     f74:	a4 0f       	add	r26, r20
     f76:	b5 1f       	adc	r27, r21
                plen=fill_tcp_data_p(buf,plen,PSTR("<font color=\"#00FF00\"> ON</font>"));
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("OFF"));
     f78:	48 ed       	ldi	r20, 0xD8	; 216
     f7a:	51 e0       	ldi	r21, 0x01	; 1
     f7c:	1c c0       	rjmp	.+56     	; 0xfb6 <print_webpage+0x90>
     f7e:	dc 01       	movw	r26, r24
     f80:	a4 0f       	add	r26, r20
     f82:	b5 1f       	adc	r27, r21
{
        uint16_t plen;
        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n"));
        plen=fill_tcp_data_p(buf,plen,PSTR("<center><p>Output is: "));
        if (on_off){
                plen=fill_tcp_data_p(buf,plen,PSTR("<font color=\"#00FF00\"> ON</font>"));
     f84:	4c ed       	ldi	r20, 0xDC	; 220
     f86:	51 e0       	ldi	r21, 0x01	; 1
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <print_webpage+0x6a>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     f8a:	7d 93       	st	X+, r23
                pos++;
     f8c:	2f 5f       	subi	r18, 0xFF	; 255
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
     f90:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     f92:	4f 5f       	subi	r20, 0xFF	; 255
     f94:	5f 4f       	sbci	r21, 0xFF	; 255
     f96:	74 91       	lpm	r23, Z+
     f98:	77 23       	and	r23, r23
     f9a:	b9 f7       	brne	.-18     	; 0xf8a <print_webpage+0x64>
     f9c:	2a 5c       	subi	r18, 0xCA	; 202
     f9e:	3f 4f       	sbci	r19, 0xFF	; 255
     fa0:	dc 01       	movw	r26, r24
     fa2:	a2 0f       	add	r26, r18
     fa4:	b3 1f       	adc	r27, r19
     fa6:	26 53       	subi	r18, 0x36	; 54
     fa8:	30 40       	sbci	r19, 0x00	; 0
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("OFF"));
        }
        plen=fill_tcp_data_p(buf,plen,PSTR(" <small><a href=\".\">[refresh status]</a></small></p>\n<p><a href=\"."));
     faa:	45 e9       	ldi	r20, 0x95	; 149
     fac:	51 e0       	ldi	r21, 0x01	; 1
     fae:	0d c0       	rjmp	.+26     	; 0xfca <print_webpage+0xa4>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     fb0:	7d 93       	st	X+, r23
                pos++;
     fb2:	2f 5f       	subi	r18, 0xFF	; 255
     fb4:	3f 4f       	sbci	r19, 0xFF	; 255
     fb6:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     fb8:	4f 5f       	subi	r20, 0xFF	; 255
     fba:	5f 4f       	sbci	r21, 0xFF	; 255
     fbc:	74 91       	lpm	r23, Z+
     fbe:	77 23       	and	r23, r23
     fc0:	b9 f7       	brne	.-18     	; 0xfb0 <print_webpage+0x8a>
     fc2:	ec cf       	rjmp	.-40     	; 0xf9c <print_webpage+0x76>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     fc4:	7d 93       	st	X+, r23
                pos++;
     fc6:	2f 5f       	subi	r18, 0xFF	; 255
     fc8:	3f 4f       	sbci	r19, 0xFF	; 255
     fca:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     fcc:	4f 5f       	subi	r20, 0xFF	; 255
     fce:	5f 4f       	sbci	r21, 0xFF	; 255
     fd0:	74 91       	lpm	r23, Z+
     fd2:	77 23       	and	r23, r23
     fd4:	b9 f7       	brne	.-18     	; 0xfc4 <print_webpage+0x9e>
     fd6:	a9 01       	movw	r20, r18
     fd8:	4a 5c       	subi	r20, 0xCA	; 202
     fda:	5f 4f       	sbci	r21, 0xFF	; 255
        if (on_off){
     fdc:	66 23       	and	r22, r22
     fde:	31 f4       	brne	.+12     	; 0xfec <print_webpage+0xc6>
     fe0:	dc 01       	movw	r26, r24
     fe2:	a4 0f       	add	r26, r20
     fe4:	b5 1f       	adc	r27, r21
                plen=fill_tcp_data_p(buf,plen,PSTR("/0\">Switch off</a><p>"));
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("/1\">Switch on</a><p>"));
     fe6:	4a e6       	ldi	r20, 0x6A	; 106
     fe8:	51 e0       	ldi	r21, 0x01	; 1
     fea:	1c c0       	rjmp	.+56     	; 0x1024 <print_webpage+0xfe>
     fec:	dc 01       	movw	r26, r24
     fee:	a4 0f       	add	r26, r20
     ff0:	b5 1f       	adc	r27, r21
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("OFF"));
        }
        plen=fill_tcp_data_p(buf,plen,PSTR(" <small><a href=\".\">[refresh status]</a></small></p>\n<p><a href=\"."));
        if (on_off){
                plen=fill_tcp_data_p(buf,plen,PSTR("/0\">Switch off</a><p>"));
     ff2:	4f e7       	ldi	r20, 0x7F	; 127
     ff4:	51 e0       	ldi	r21, 0x01	; 1
     ff6:	03 c0       	rjmp	.+6      	; 0xffe <print_webpage+0xd8>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     ff8:	6d 93       	st	X+, r22
                pos++;
     ffa:	2f 5f       	subi	r18, 0xFF	; 255
     ffc:	3f 4f       	sbci	r19, 0xFF	; 255
     ffe:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1000:	4f 5f       	subi	r20, 0xFF	; 255
    1002:	5f 4f       	sbci	r21, 0xFF	; 255
    1004:	64 91       	lpm	r22, Z+
    1006:	66 23       	and	r22, r22
    1008:	b9 f7       	brne	.-18     	; 0xff8 <print_webpage+0xd2>
    100a:	2a 5c       	subi	r18, 0xCA	; 202
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	dc 01       	movw	r26, r24
    1010:	a2 0f       	add	r26, r18
    1012:	b3 1f       	adc	r27, r19
    1014:	26 53       	subi	r18, 0x36	; 54
    1016:	30 40       	sbci	r19, 0x00	; 0
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("/1\">Switch on</a><p>"));
        }
        plen=fill_tcp_data_p(buf,plen,PSTR("</center><hr><br>version 1.0, aimsinteractive.org\n"));
    1018:	87 e3       	ldi	r24, 0x37	; 55
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	0d c0       	rjmp	.+26     	; 0x1038 <print_webpage+0x112>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    101e:	6d 93       	st	X+, r22
                pos++;
    1020:	2f 5f       	subi	r18, 0xFF	; 255
    1022:	3f 4f       	sbci	r19, 0xFF	; 255
    1024:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1026:	4f 5f       	subi	r20, 0xFF	; 255
    1028:	5f 4f       	sbci	r21, 0xFF	; 255
    102a:	64 91       	lpm	r22, Z+
    102c:	66 23       	and	r22, r22
    102e:	b9 f7       	brne	.-18     	; 0x101e <print_webpage+0xf8>
    1030:	ec cf       	rjmp	.-40     	; 0x100a <print_webpage+0xe4>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1032:	4d 93       	st	X+, r20
                pos++;
    1034:	2f 5f       	subi	r18, 0xFF	; 255
    1036:	3f 4f       	sbci	r19, 0xFF	; 255
    1038:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	44 91       	lpm	r20, Z+
    103e:	44 23       	and	r20, r20
    1040:	c1 f7       	brne	.-16     	; 0x1032 <print_webpage+0x10c>
        return(plen);
}
    1042:	c9 01       	movw	r24, r18
    1044:	08 95       	ret

00001046 <verify_password>:
// the password string (only the first 5 char checked), (only a-z,0-9,_ characters):
static char password[]="secret"; // must not be longer than 9 char

// 
uint8_t verify_password(char *str)
{
    1046:	bc 01       	movw	r22, r24
        // the first characters of the received string are
        // a simple password/cookie:
        if (strncmp(password,str,5)==0){
    1048:	8e e9       	ldi	r24, 0x9E	; 158
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	45 e0       	ldi	r20, 0x05	; 5
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <strncmp>
    1054:	9c 01       	movw	r18, r24
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	23 2b       	or	r18, r19
    105a:	09 f4       	brne	.+2      	; 0x105e <verify_password+0x18>
    105c:	81 e0       	ldi	r24, 0x01	; 1
                return(1);
        }
        return(0);
}
    105e:	08 95       	ret

00001060 <main>:
        plen=fill_tcp_data_p(buf,plen,PSTR("</center><hr><br>version 1.0, aimsinteractive.org\n"));
        return(plen);
}


int main(void){
    1060:	bf 92       	push	r11
    1062:	cf 92       	push	r12
    1064:	df 92       	push	r13
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	6e 97       	sbiw	r28, 0x1e	; 30
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	12 e3       	ldi	r17, 0x32	; 50
    1084:	81 2f       	mov	r24, r17
    1086:	8a 95       	dec	r24
    1088:	f1 f7       	brne	.-4      	; 0x1086 <main+0x26>
//        CLKPR=(1<<CLKPCE); // change enable
//        CLKPR=0; // "no pre-scaler"
        _delay_loop_1(50); // 12ms

        /* enable PD2/INT0, as input */
        DDRD&= ~(1<<DDD2);
    108a:	8a 98       	cbi	0x11, 2	; 17

        /*initialize enc28j60*/
        enc28j60Init(mymac);
    108c:	84 e9       	ldi	r24, 0x94	; 148
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 62 02 	call	0x4c4	; 0x4c4 <enc28j60Init>
        enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
    1094:	82 e0       	ldi	r24, 0x02	; 2
    1096:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enc28j60clkout>
    109a:	81 2f       	mov	r24, r17
    109c:	8a 95       	dec	r24
    109e:	f1 f7       	brne	.-4      	; 0x109c <main+0x3c>
        _delay_loop_1(50); // 12ms
        
        // LED
        /* enable PB1, LED as output */
        DDRB|= (1<<DDB1);
    10a0:	b9 9a       	sbi	0x17, 1	; 23

        /* set output to Vcc, LED off */
        PORTB|= (1<<PORTB1);
    10a2:	c1 9a       	sbi	0x18, 1	; 24

        // the transistor on PD7
        DDRD|= (1<<DDD7);DDRA|= (1<<7);
    10a4:	8f 9a       	sbi	0x11, 7	; 17
    10a6:	d7 9a       	sbi	0x1a, 7	; 26
        PORTD &= ~(1<<PORTD7);// transistor off
    10a8:	97 98       	cbi	0x12, 7	; 18
        PORTA &= ~(1<<7);// transistor off
    10aa:	df 98       	cbi	0x1b, 7	; 27
        /* Magjack leds configuration, see enc28j60 datasheet, page 11 */
        // LEDB=yellow LEDA=green
        //
        // 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
        // enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
        enc28j60PhyWrite(PHLCON,0x476);
    10ac:	84 e1       	ldi	r24, 0x14	; 20
    10ae:	66 e7       	ldi	r22, 0x76	; 118
    10b0:	74 e0       	ldi	r23, 0x04	; 4
    10b2:	0e 94 3e 02 	call	0x47c	; 0x47c <enc28j60PhyWrite>
    10b6:	1a 95       	dec	r17
    10b8:	f1 f7       	brne	.-4      	; 0x10b6 <main+0x56>
        _delay_loop_1(50); // 12ms
        
        /* set output to GND, red LED on */
        PORTB &= ~(1<<PORTB1);
    10ba:	c1 98       	cbi	0x18, 1	; 24
}

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
        uint8_t i=0;
        wwwport=wwwp;
    10bc:	80 e5       	ldi	r24, 0x50	; 80
    10be:	80 93 a5 00 	sts	0x00A5, r24
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
        while(i<4){
                ipaddr[i]=myip[i];
    10c6:	f9 01       	movw	r30, r18
    10c8:	eb 54       	subi	r30, 0x4B	; 75
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	d9 01       	movw	r26, r18
    10ce:	a6 56       	subi	r26, 0x66	; 102
    10d0:	bf 4f       	sbci	r27, 0xFF	; 255
    10d2:	8c 91       	ld	r24, X
    10d4:	80 83       	st	Z, r24
    10d6:	2f 5f       	subi	r18, 0xFF	; 255
    10d8:	3f 4f       	sbci	r19, 0xFF	; 255

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
        uint8_t i=0;
        wwwport=wwwp;
        while(i<4){
    10da:	24 30       	cpi	r18, 0x04	; 4
    10dc:	31 05       	cpc	r19, r1
    10de:	99 f7       	brne	.-26     	; 0x10c6 <main+0x66>
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
                macaddr[i]=mymac[i];
    10e4:	f9 01       	movw	r30, r18
    10e6:	e1 55       	subi	r30, 0x51	; 81
    10e8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ea:	d9 01       	movw	r26, r18
    10ec:	ac 56       	subi	r26, 0x6C	; 108
    10ee:	bf 4f       	sbci	r27, 0xFF	; 255
    10f0:	8c 91       	ld	r24, X
    10f2:	80 83       	st	Z, r24
    10f4:	2f 5f       	subi	r18, 0xFF	; 255
    10f6:	3f 4f       	sbci	r19, 0xFF	; 255
        while(i<4){
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
    10f8:	26 30       	cpi	r18, 0x06	; 6
    10fa:	31 05       	cpc	r19, r1
    10fc:	99 f7       	brne	.-26     	; 0x10e4 <main+0x84>
    10fe:	bb 24       	eor	r11, r11
    1100:	b3 94       	inc	r11
                                strcpy(str,"e=no_such_cmd");
                                goto ANSWER;
                        }
                        strcpy(str,"e=invalid_pw");
ANSWER:
                        make_udp_reply_from_request(buf,str,strlen(str),MYUDPPORT);
    1102:	6e 01       	movw	r12, r28
    1104:	08 94       	sec
    1106:	c1 1c       	adc	r12, r1
    1108:	d1 1c       	adc	r13, r1
        //init the ethernet/ip layer:
        init_ip_arp_udp_tcp(mymac,myip,MYWWWPORT);

        while(1){
                // get the next new packet:
                plen = enc28j60PacketReceive(BUFFER_SIZE, buf);
    110a:	86 e2       	ldi	r24, 0x26	; 38
    110c:	92 e0       	ldi	r25, 0x02	; 2
    110e:	69 eb       	ldi	r22, 0xB9	; 185
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	0e 94 99 03 	call	0x732	; 0x732 <enc28j60PacketReceive>
    1116:	8c 01       	movw	r16, r24

                /*plen will ne unequal to zero if there is a valid 
                 * packet (without crc error) */
                if(plen==0){
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	b9 f3       	breq	.-18     	; 0x110a <main+0xaa>
                }
                        
                // arp is broadcast if unknown but a host may also
                // verify the mac address by sending it to 
                // a unicast address.
                if(eth_type_is_arp_and_my_ip(buf,plen)){
    111c:	89 eb       	ldi	r24, 0xB9	; 185
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	b8 01       	movw	r22, r16
    1122:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <eth_type_is_arp_and_my_ip>
    1126:	88 23       	and	r24, r24
    1128:	29 f0       	breq	.+10     	; 0x1134 <main+0xd4>
                        make_arp_answer_from_request(buf);
    112a:	89 eb       	ldi	r24, 0xB9	; 185
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 83 05 	call	0xb06	; 0xb06 <make_arp_answer_from_request>
    1132:	eb cf       	rjmp	.-42     	; 0x110a <main+0xaa>
                        continue;
                }

                // check if ip packets are for us:
                if(eth_type_is_ip_and_my_ip(buf,plen)==0){
    1134:	89 eb       	ldi	r24, 0xB9	; 185
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	b8 01       	movw	r22, r16
    113a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <eth_type_is_ip_and_my_ip>
    113e:	88 23       	and	r24, r24
    1140:	21 f3       	breq	.-56     	; 0x110a <main+0xaa>
                        continue;
                }
                // led----------
                if (i){
    1142:	bb 20       	and	r11, r11
    1144:	19 f0       	breq	.+6      	; 0x114c <main+0xec>
                        /* set output to Vcc, LED off */
                        PORTB|= (1<<PORTB1);
    1146:	c1 9a       	sbi	0x18, 1	; 24
    1148:	bb 24       	eor	r11, r11
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <main+0xf2>
                        i=0;
                }else{
                        /* set output to GND, LED on */
                        PORTB &= ~(1<<PORTB1);
    114c:	c1 98       	cbi	0x18, 1	; 24
    114e:	bb 24       	eor	r11, r11
    1150:	b3 94       	inc	r11
                        i=1;
                }
                
                if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
    1152:	80 91 d0 00 	lds	r24, 0x00D0
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	51 f4       	brne	.+20     	; 0x116e <main+0x10e>
    115a:	80 91 db 00 	lds	r24, 0x00DB
    115e:	88 30       	cpi	r24, 0x08	; 8
    1160:	a1 f6       	brne	.-88     	; 0x110a <main+0xaa>
                        // a ping packet, let's send pong
                        make_echo_reply_from_request(buf,plen);
    1162:	89 eb       	ldi	r24, 0xB9	; 185
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	b8 01       	movw	r22, r16
    1168:	0e 94 b7 05 	call	0xb6e	; 0xb6e <make_echo_reply_from_request>
    116c:	ce cf       	rjmp	.-100    	; 0x110a <main+0xaa>
                        continue;
                }
                // tcp port www start, compare only the lower byte
                if (buf[IP_PROTO_P]==IP_PROTO_TCP_V&&buf[TCP_DST_PORT_H_P]==0&&buf[TCP_DST_PORT_L_P]==MYWWWPORT){
    116e:	86 30       	cpi	r24, 0x06	; 6
    1170:	09 f0       	breq	.+2      	; 0x1174 <main+0x114>
    1172:	af c0       	rjmp	.+350    	; 0x12d2 <main+0x272>
    1174:	80 91 dd 00 	lds	r24, 0x00DD
    1178:	88 23       	and	r24, r24
    117a:	39 f6       	brne	.-114    	; 0x110a <main+0xaa>
    117c:	80 91 de 00 	lds	r24, 0x00DE
    1180:	80 35       	cpi	r24, 0x50	; 80
    1182:	19 f6       	brne	.-122    	; 0x110a <main+0xaa>
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
    1184:	80 91 e8 00 	lds	r24, 0x00E8
    1188:	81 ff       	sbrs	r24, 1
    118a:	05 c0       	rjmp	.+10     	; 0x1196 <main+0x136>
                                make_tcp_synack_from_syn(buf);
    118c:	89 eb       	ldi	r24, 0xB9	; 185
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 32 06 	call	0xc64	; 0xc64 <make_tcp_synack_from_syn>
    1194:	ba cf       	rjmp	.-140    	; 0x110a <main+0xaa>
                                // make_tcp_synack_from_syn does already send the syn,ack
                                continue;
                        }
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    1196:	84 ff       	sbrs	r24, 4
    1198:	b8 cf       	rjmp	.-144    	; 0x110a <main+0xaa>
                                init_len_info(buf); // init some data structures
    119a:	89 eb       	ldi	r24, 0xB9	; 185
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 72 06 	call	0xce4	; 0xce4 <init_len_info>
// get a pointer to the start of tcp data in buf
// Returns 0 if there is no data
// You must call init_len_info once before calling this function
uint16_t get_tcp_data_pointer(void)
{
        if (info_data_len){
    11a2:	80 91 a8 00 	lds	r24, 0x00A8
    11a6:	90 91 a9 00 	lds	r25, 0x00A9
    11aa:	89 2b       	or	r24, r25
    11ac:	61 f0       	breq	.+24     	; 0x11c6 <main+0x166>
                return((uint16_t)TCP_SRC_PORT_H_P+info_hdr_len);
    11ae:	00 91 aa 00 	lds	r16, 0x00AA
    11b2:	10 91 ab 00 	lds	r17, 0x00AB
    11b6:	52 e2       	ldi	r21, 0x22	; 34
    11b8:	e5 2e       	mov	r14, r21
    11ba:	f1 2c       	mov	r15, r1
    11bc:	e0 0e       	add	r14, r16
    11be:	f1 1e       	adc	r15, r17
                                // we can possibly have no data, just ack:
                                dat_p=get_tcp_data_pointer();
                                if (dat_p==0){
    11c0:	e1 14       	cp	r14, r1
    11c2:	f1 04       	cpc	r15, r1
    11c4:	49 f4       	brne	.+18     	; 0x11d8 <main+0x178>
                                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    11c6:	80 91 e8 00 	lds	r24, 0x00E8
    11ca:	80 ff       	sbrs	r24, 0
    11cc:	9e cf       	rjmp	.-196    	; 0x110a <main+0xaa>
                                                // finack, answer with ack
                                                make_tcp_ack_from_any(buf);
    11ce:	89 eb       	ldi	r24, 0xB9	; 185
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 ba 06 	call	0xd74	; 0xd74 <make_tcp_ack_from_any>
    11d6:	99 cf       	rjmp	.-206    	; 0x110a <main+0xaa>
                                        }
                                        // just an ack with no data, wait for next packet
                                        continue;
                                }
                                if (strncmp("GET ",(char *)&(buf[dat_p]),4)!=0){
    11d8:	b7 01       	movw	r22, r14
    11da:	67 54       	subi	r22, 0x47	; 71
    11dc:	7f 4f       	sbci	r23, 0xFF	; 255
    11de:	80 e6       	ldi	r24, 0x60	; 96
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	44 e0       	ldi	r20, 0x04	; 4
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <strncmp>
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	81 f0       	breq	.+32     	; 0x120e <main+0x1ae>
    11ee:	00 e0       	ldi	r16, 0x00	; 0
    11f0:	10 e0       	ldi	r17, 0x00	; 0
    11f2:	06 c0       	rjmp	.+12     	; 0x1200 <main+0x1a0>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    11f4:	f8 01       	movw	r30, r16
    11f6:	e7 54       	subi	r30, 0x47	; 71
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	86 ab       	std	Z+54, r24	; 0x36
                pos++;
    11fc:	0f 5f       	subi	r16, 0xFF	; 255
    11fe:	1f 4f       	sbci	r17, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1200:	f8 01       	movw	r30, r16
    1202:	e5 50       	subi	r30, 0x05	; 5
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	84 91       	lpm	r24, Z+
    1208:	88 23       	and	r24, r24
    120a:	a1 f7       	brne	.-24     	; 0x11f4 <main+0x194>
    120c:	58 c0       	rjmp	.+176    	; 0x12be <main+0x25e>
                                        // for possible status codes see:
                                        // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
                                        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n<h1>200 OK</h1>"));
                                        goto SENDTCP;
                                }
                                if (strncmp("/ ",(char *)&(buf[dat_p+4]),2)==0){
    120e:	01 52       	subi	r16, 0x21	; 33
    1210:	1f 4f       	sbci	r17, 0xFF	; 255
    1212:	85 e6       	ldi	r24, 0x65	; 101
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	b8 01       	movw	r22, r16
    1218:	42 e0       	ldi	r20, 0x02	; 2
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <strncmp>
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	f1 f4       	brne	.+60     	; 0x1260 <main+0x200>
    1224:	00 e0       	ldi	r16, 0x00	; 0
    1226:	10 e0       	ldi	r17, 0x00	; 0
    1228:	06 c0       	rjmp	.+12     	; 0x1236 <main+0x1d6>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    122a:	f8 01       	movw	r30, r16
    122c:	e7 54       	subi	r30, 0x47	; 71
    122e:	ff 4f       	sbci	r31, 0xFF	; 255
    1230:	86 ab       	std	Z+54, r24	; 0x36
                pos++;
    1232:	0f 5f       	subi	r16, 0xFF	; 255
    1234:	1f 4f       	sbci	r17, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1236:	f8 01       	movw	r30, r16
    1238:	e2 53       	subi	r30, 0x32	; 50
    123a:	ff 4f       	sbci	r31, 0xFF	; 255
    123c:	84 91       	lpm	r24, Z+
    123e:	88 23       	and	r24, r24
    1240:	a1 f7       	brne	.-24     	; 0x122a <main+0x1ca>
    1242:	d8 01       	movw	r26, r16
    1244:	a1 51       	subi	r26, 0x11	; 17
    1246:	bf 4f       	sbci	r27, 0xFF	; 255
                                        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n"));
                                        plen=fill_tcp_data_p(buf,plen,PSTR("<p>Usage: http://host_or_ip/password</p>\n"));
    1248:	84 ea       	ldi	r24, 0xA4	; 164
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	03 c0       	rjmp	.+6      	; 0x1254 <main+0x1f4>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    124e:	2d 93       	st	X+, r18
                pos++;
    1250:	0f 5f       	subi	r16, 0xFF	; 255
    1252:	1f 4f       	sbci	r17, 0xFF	; 255
    1254:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1256:	01 96       	adiw	r24, 0x01	; 1
    1258:	24 91       	lpm	r18, Z+
    125a:	22 23       	and	r18, r18
    125c:	c1 f7       	brne	.-16     	; 0x124e <main+0x1ee>
    125e:	2f c0       	rjmp	.+94     	; 0x12be <main+0x25e>
                                        goto SENDTCP;
                                }
                                cmd=analyse_get_url((char *)&(buf[dat_p+5]));
    1260:	c7 01       	movw	r24, r14
    1262:	82 54       	subi	r24, 0x42	; 66
    1264:	9f 4f       	sbci	r25, 0xFF	; 255
    1266:	0e 94 1c 07 	call	0xe38	; 0xe38 <analyse_get_url>
                                // for possible status codes see:
                                // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
                                if (cmd==-1){
    126a:	8f 3f       	cpi	r24, 0xFF	; 255
    126c:	81 f4       	brne	.+32     	; 0x128e <main+0x22e>
    126e:	00 e0       	ldi	r16, 0x00	; 0
    1270:	10 e0       	ldi	r17, 0x00	; 0
    1272:	06 c0       	rjmp	.+12     	; 0x1280 <main+0x220>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1274:	f8 01       	movw	r30, r16
    1276:	e7 54       	subi	r30, 0x47	; 71
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	86 ab       	std	Z+54, r24	; 0x36
                pos++;
    127c:	0f 5f       	subi	r16, 0xFF	; 255
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1280:	f8 01       	movw	r30, r16
    1282:	ec 5a       	subi	r30, 0xAC	; 172
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	84 91       	lpm	r24, Z+
    1288:	88 23       	and	r24, r24
    128a:	a1 f7       	brne	.-24     	; 0x1274 <main+0x214>
    128c:	18 c0       	rjmp	.+48     	; 0x12be <main+0x25e>
                                        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 401 Unauthorized\r\nContent-Type: text/html\r\n\r\n<h1>401 Unauthorized</h1>"));
                                        goto SENDTCP;
                                }
                                if (cmd==1){
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	19 f4       	brne	.+6      	; 0x1298 <main+0x238>
                                        PORTD|= (1<<PORTD7);// transistor on
    1292:	97 9a       	sbi	0x12, 7	; 18
										PORTA|= (1<<7);// transistor on
    1294:	df 9a       	sbi	0x1b, 7	; 27
    1296:	0c c0       	rjmp	.+24     	; 0x12b0 <main+0x250>
                                }
                                if (cmd==0){
    1298:	88 23       	and	r24, r24
    129a:	19 f4       	brne	.+6      	; 0x12a2 <main+0x242>
                                        PORTD &= ~(1<<PORTD7);// transistor off
    129c:	97 98       	cbi	0x12, 7	; 18
                                        PORTA &= ~(1<<7);// transistor off
    129e:	df 98       	cbi	0x1b, 7	; 27
    12a0:	07 c0       	rjmp	.+14     	; 0x12b0 <main+0x250>
                                }
                                if (cmd==-3){
    12a2:	8d 3f       	cpi	r24, 0xFD	; 253
    12a4:	29 f4       	brne	.+10     	; 0x12b0 <main+0x250>
                                        // redirect to add a trailing slash
                                        plen=moved_perm(buf);
    12a6:	89 eb       	ldi	r24, 0xB9	; 185
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 3a 07 	call	0xe74	; 0xe74 <moved_perm>
    12ae:	06 c0       	rjmp	.+12     	; 0x12bc <main+0x25c>
                                        goto SENDTCP;
                                }
                                // if (cmd==-2) or any other value
                                // just display the status:
                                plen=print_webpage(buf,(PORTD & (1<<PORTD7)));
    12b0:	62 b3       	in	r22, 0x12	; 18
    12b2:	60 78       	andi	r22, 0x80	; 128
    12b4:	89 eb       	ldi	r24, 0xB9	; 185
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 93 07 	call	0xf26	; 0xf26 <print_webpage>
    12bc:	8c 01       	movw	r16, r24
                                //
SENDTCP:
                                make_tcp_ack_from_any(buf); // send ack for http get
    12be:	89 eb       	ldi	r24, 0xB9	; 185
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 ba 06 	call	0xd74	; 0xd74 <make_tcp_ack_from_any>
                                make_tcp_ack_with_data(buf,plen); // send data
    12c6:	89 eb       	ldi	r24, 0xB9	; 185
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	b8 01       	movw	r22, r16
    12cc:	0e 94 f2 06 	call	0xde4	; 0xde4 <make_tcp_ack_with_data>
    12d0:	1c cf       	rjmp	.-456    	; 0x110a <main+0xaa>

                }
                // tcp port www end
                //
                // udp start, we listen on udp port 1200=0x4B0
                if (buf[IP_PROTO_P]==IP_PROTO_UDP_V&&buf[UDP_DST_PORT_H_P]==4&&buf[UDP_DST_PORT_L_P]==0xb0){
    12d2:	81 31       	cpi	r24, 0x11	; 17
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <main+0x278>
    12d6:	19 cf       	rjmp	.-462    	; 0x110a <main+0xaa>
    12d8:	80 91 dd 00 	lds	r24, 0x00DD
    12dc:	84 30       	cpi	r24, 0x04	; 4
    12de:	09 f0       	breq	.+2      	; 0x12e2 <main+0x282>
    12e0:	14 cf       	rjmp	.-472    	; 0x110a <main+0xaa>
    12e2:	80 91 de 00 	lds	r24, 0x00DE
    12e6:	80 3b       	cpi	r24, 0xB0	; 176
    12e8:	09 f0       	breq	.+2      	; 0x12ec <main+0x28c>
    12ea:	0f cf       	rjmp	.-482    	; 0x110a <main+0xaa>
                        payloadlen=buf[UDP_LEN_L_P]-UDP_HEADER_LEN;
    12ec:	10 91 e0 00 	lds	r17, 0x00E0
    12f0:	18 50       	subi	r17, 0x08	; 8
                        // you must sent a string starting with v
                        // e.g udpcom version 10.0.0.24
                        if (verify_password((char *)&(buf[UDP_DATA_P]))){
    12f2:	83 ee       	ldi	r24, 0xE3	; 227
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	0e 94 23 08 	call	0x1046	; 0x1046 <verify_password>
    12fa:	88 23       	and	r24, r24
    12fc:	59 f4       	brne	.+22     	; 0x1314 <main+0x2b4>
    12fe:	3c c0       	rjmp	.+120    	; 0x1378 <main+0x318>
                                // find the first comma which indicates 
                                // the start of a command:
                                cmd_pos=0;
                                while(cmd_pos<payloadlen){
                                        cmd_pos++;
    1300:	9f 5f       	subi	r25, 0xFF	; 255
                                        if (buf[UDP_DATA_P+cmd_pos]==','){
    1302:	e9 2f       	mov	r30, r25
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	e7 54       	subi	r30, 0x47	; 71
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	82 a5       	ldd	r24, Z+42	; 0x2a
    130c:	8c 32       	cpi	r24, 0x2C	; 44
    130e:	19 f4       	brne	.+6      	; 0x1316 <main+0x2b6>
                                                cmd_pos++; // put on start of cmd
    1310:	9f 5f       	subi	r25, 0xFF	; 255
    1312:	03 c0       	rjmp	.+6      	; 0x131a <main+0x2ba>
                                                break;
    1314:	90 e0       	ldi	r25, 0x00	; 0
                        // e.g udpcom version 10.0.0.24
                        if (verify_password((char *)&(buf[UDP_DATA_P]))){
                                // find the first comma which indicates 
                                // the start of a command:
                                cmd_pos=0;
                                while(cmd_pos<payloadlen){
    1316:	91 17       	cp	r25, r17
    1318:	98 f3       	brcs	.-26     	; 0x1300 <main+0x2a0>
                                        }
                                }
                                // a command is one char and a value. At
                                // least 3 characters long. It has an '=' on
                                // position 2:
                                if (cmd_pos<2 || cmd_pos>payloadlen-3 || buf[UDP_DATA_P+cmd_pos+1]!='='){
    131a:	92 30       	cpi	r25, 0x02	; 2
    131c:	68 f0       	brcs	.+26     	; 0x1338 <main+0x2d8>
    131e:	e9 2f       	mov	r30, r25
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	81 2f       	mov	r24, r17
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 97       	sbiw	r24, 0x02	; 2
    1328:	e8 17       	cp	r30, r24
    132a:	f9 07       	cpc	r31, r25
    132c:	2c f4       	brge	.+10     	; 0x1338 <main+0x2d8>
    132e:	e7 54       	subi	r30, 0x47	; 71
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	83 a5       	ldd	r24, Z+43	; 0x2b
    1334:	8d 33       	cpi	r24, 0x3D	; 61
    1336:	21 f0       	breq	.+8      	; 0x1340 <main+0x2e0>
                                        strcpy(str,"e=no_cmd");
    1338:	c6 01       	movw	r24, r12
    133a:	68 e6       	ldi	r22, 0x68	; 104
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	1f c0       	rjmp	.+62     	; 0x137e <main+0x31e>
                                        goto ANSWER;
                                }
                                // supported commands are
                                // t=1 t=0 t=?
                                if (buf[UDP_DATA_P+cmd_pos]=='t'){
    1340:	82 a5       	ldd	r24, Z+42	; 0x2a
    1342:	84 37       	cpi	r24, 0x74	; 116
    1344:	a9 f4       	brne	.+42     	; 0x1370 <main+0x310>
                                        cmdval=buf[UDP_DATA_P+cmd_pos+2];
    1346:	e4 a5       	ldd	r30, Z+44	; 0x2c
                                        if(cmdval=='1'){
    1348:	e1 33       	cpi	r30, 0x31	; 49
    134a:	11 f4       	brne	.+4      	; 0x1350 <main+0x2f0>
                                                PORTD|= (1<<PORTD7);// transistor on
    134c:	97 9a       	sbi	0x12, 7	; 18
    134e:	08 c0       	rjmp	.+16     	; 0x1360 <main+0x300>
                                                strcpy(str,"t=1");
                                                goto ANSWER;
                                        }else if(cmdval=='0'){
    1350:	e0 33       	cpi	r30, 0x30	; 48
    1352:	11 f4       	brne	.+4      	; 0x1358 <main+0x2f8>
                                                PORTD &= ~(1<<PORTD7);// transistor off
    1354:	97 98       	cbi	0x12, 7	; 18
    1356:	08 c0       	rjmp	.+16     	; 0x1368 <main+0x308>
                                                strcpy(str,"t=0");
                                                goto ANSWER;
                                        }else if(cmdval=='?'){
    1358:	ef 33       	cpi	r30, 0x3F	; 63
    135a:	51 f4       	brne	.+20     	; 0x1370 <main+0x310>
                                                if (PORTD & (1<<PORTD7)){
    135c:	97 9b       	sbis	0x12, 7	; 18
    135e:	04 c0       	rjmp	.+8      	; 0x1368 <main+0x308>
                                                        strcpy(str,"t=1");
    1360:	c6 01       	movw	r24, r12
    1362:	61 e7       	ldi	r22, 0x71	; 113
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	0b c0       	rjmp	.+22     	; 0x137e <main+0x31e>
                                                        goto ANSWER;
                                                }
                                                strcpy(str,"t=0");
    1368:	c6 01       	movw	r24, r12
    136a:	65 e7       	ldi	r22, 0x75	; 117
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	07 c0       	rjmp	.+14     	; 0x137e <main+0x31e>
                                                goto ANSWER;
                                        }
                                }
                                strcpy(str,"e=no_such_cmd");
    1370:	c6 01       	movw	r24, r12
    1372:	69 e7       	ldi	r22, 0x79	; 121
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	03 c0       	rjmp	.+6      	; 0x137e <main+0x31e>
                                goto ANSWER;
                        }
                        strcpy(str,"e=invalid_pw");
    1378:	c6 01       	movw	r24, r12
    137a:	67 e8       	ldi	r22, 0x87	; 135
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <strcpy>
ANSWER:
                        make_udp_reply_from_request(buf,str,strlen(str),MYUDPPORT);
    1382:	f6 01       	movw	r30, r12
    1384:	01 90       	ld	r0, Z+
    1386:	00 20       	and	r0, r0
    1388:	e9 f7       	brne	.-6      	; 0x1384 <main+0x324>
    138a:	31 97       	sbiw	r30, 0x01	; 1
    138c:	ec 19       	sub	r30, r12
    138e:	fd 09       	sbc	r31, r13
    1390:	89 eb       	ldi	r24, 0xB9	; 185
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	b6 01       	movw	r22, r12
    1396:	4e 2f       	mov	r20, r30
    1398:	20 eb       	ldi	r18, 0xB0	; 176
    139a:	34 e0       	ldi	r19, 0x04	; 4
    139c:	0e 94 df 05 	call	0xbbe	; 0xbbe <make_udp_reply_from_request>
    13a0:	b4 ce       	rjmp	.-664    	; 0x110a <main+0xaa>

000013a2 <strcpy>:
    13a2:	fb 01       	movw	r30, r22
    13a4:	dc 01       	movw	r26, r24
    13a6:	01 90       	ld	r0, Z+
    13a8:	0d 92       	st	X+, r0
    13aa:	00 20       	and	r0, r0
    13ac:	e1 f7       	brne	.-8      	; 0x13a6 <strcpy+0x4>
    13ae:	08 95       	ret

000013b0 <strncmp>:
    13b0:	fb 01       	movw	r30, r22
    13b2:	dc 01       	movw	r26, r24
    13b4:	41 50       	subi	r20, 0x01	; 1
    13b6:	50 40       	sbci	r21, 0x00	; 0
    13b8:	30 f0       	brcs	.+12     	; 0x13c6 <strncmp+0x16>
    13ba:	8d 91       	ld	r24, X+
    13bc:	01 90       	ld	r0, Z+
    13be:	80 19       	sub	r24, r0
    13c0:	19 f4       	brne	.+6      	; 0x13c8 <strncmp+0x18>
    13c2:	00 20       	and	r0, r0
    13c4:	b9 f7       	brne	.-18     	; 0x13b4 <strncmp+0x4>
    13c6:	88 1b       	sub	r24, r24
    13c8:	99 0b       	sbc	r25, r25
    13ca:	08 95       	ret

000013cc <_exit>:
    13cc:	f8 94       	cli

000013ce <__stop_program>:
    13ce:	ff cf       	rjmp	.-2      	; 0x13ce <__stop_program>
