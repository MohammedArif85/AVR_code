
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002674  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00002674  00002708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002e6  00800084  00800084  0000272c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000272c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000657  00000000  00000000  0000274c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002cd4  00000000  00000000  00002da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000442  00000000  00000000  00005a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002528  00000000  00000000  00005eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004b0  00000000  00000000  000083e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009a5  00000000  00000000  00008894  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000021e1  00000000  00000000  00009239  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000b41a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__ctors_end>
       4:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
       8:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
       c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      10:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      14:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      18:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      1c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      20:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      24:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__vector_9>
      28:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      2c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      30:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      34:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      38:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      3c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      40:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      44:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      48:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      4c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>
      50:	0c 94 c4 01 	jmp	0x388	; 0x388 <__bad_interrupt>

00000054 <arpreqhdr>:
      54:	00 01 08 00 06 04 00 01                             ........

0000005c <iphdr>:
      5c:	45 00 00 82 00 00 40 00 20                          E.....@. 

00000065 <__c.3200>:
      65:	48 54 54 50 2f 31 2e 30 20 34 30 31 20 55 6e 61     HTTP/1.0 401 Una
      75:	75 74 68 6f 72 69 7a 65 64 0d 0a 43 6f 6e 74 65     uthorized..Conte
      85:	6e 74 2d 54 79 70 65 3a 20 74 65 78 74 2f 68 74     nt-Type: text/ht
      95:	6d 6c 0d 0a 0d 0a 3c 68 31 3e 34 30 31 20 55 6e     ml....<h1>401 Un
      a5:	61 75 74 68 6f 72 69 7a 65 64 3c 2f 68 31 3e 00     authorized</h1>.

000000b5 <__c.3197>:
      b5:	3c 68 31 3e 32 30 30 20 4f 4b 3c 2f 68 31 3e 00     <h1>200 OK</h1>.

000000c5 <__c.3195>:
      c5:	74 75 78 67 72 61 70 68 69 63 73 2e 6f 72 67 00     tuxgraphics.org.

000000d5 <__c.3193>:
      d5:	2f 63 67 69 2d 62 69 6e 2f 75 70 6c 64 3f 70 69     /cgi-bin/upld?pi
      e5:	6e 67 49 50 3d 00                                   ngIP=.

000000eb <__c.3191>:
      eb:	74 75 78 67 72 61 70 68 69 63 73 2e 6f 72 67 00     tuxgraphics.org.

000000fb <__c.3127>:
      fb:	0a 3c 2f 70 72 65 3e 3c 62 72 3e 3c 68 72 3e 00     .</pre><br><hr>.

0000010b <__c.3125>:
     10b:	0a 63 68 65 63 6b 20 72 65 73 75 6c 74 3a 20 3c     .check result: <
     11b:	61 20 68 72 65 66 3d 68 74 74 70 3a 2f 2f 74 75     a href=http://tu
     12b:	78 67 72 61 70 68 69 63 73 2e 6f 72 67 2f 63 67     xgraphics.org/cg
     13b:	69 2d 62 69 6e 2f 75 70 6c 64 3e 68 74 74 70 3a     i-bin/upld>http:
     14b:	2f 2f 74 75 78 67 72 61 70 68 69 63 73 2e 6f 72     //tuxgraphics.or
     15b:	67 2f 63 67 69 2d 62 69 6e 2f 75 70 6c 64 3c 2f     g/cgi-bin/upld</
     16b:	61 3e 00                                            a>.

0000016e <__c.3123>:
     16e:	0a 4e 75 6d 62 65 72 20 73 75 63 63 65 73 73 66     .Number successf
     17e:	75 6c 20 64 61 74 61 20 75 70 6c 6f 61 64 73 20     ul data uploads 
     18e:	74 6f 20 77 65 62 3a 20 00                          to web: .

00000197 <__c.3121>:
     197:	4e 75 6d 62 65 72 20 6f 66 20 64 61 74 61 20 75     Number of data u
     1a7:	70 6c 6f 61 64 73 20 73 74 61 72 74 65 64 20 62     ploads started b
     1b7:	79 20 70 69 6e 67 3a 20 00                          y ping: .

000001c0 <__c.3119>:
     1c0:	77 61 69 74 69 6e 67 20 66 6f 72 20 44 4e 53 20     waiting for DNS 
     1d0:	61 6e 73 77 65 72 2e 0a 00                          answer...

000001d9 <__c.3117>:
     1d9:	77 61 69 74 69 6e 67 20 66 6f 72 20 47 57 20 49     waiting for GW I
     1e9:	50 20 74 6f 20 61 6e 73 77 65 72 20 61 72 70 2e     P to answer arp.
     1f9:	0a 00                                               ..

000001fb <__c.3115>:
     1fb:	3c 68 32 3e 77 65 62 20 63 6c 69 65 6e 74 20 73     <h2>web client s
     20b:	74 61 74 75 73 3c 2f 68 32 3e 0a 3c 70 72 65 3e     tatus</h2>.<pre>
     21b:	0a 00                                               ..

0000021d <__c.3106>:
     21d:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     22d:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     23d:	65 78 74 2f 68 74 6d 6c 0d 0a 50 72 61 67 6d 61     ext/html..Pragma
     24d:	3a 20 6e 6f 2d 63 61 63 68 65 0d 0a 0d 0a 00        : no-cache.....

0000025c <__c.2659>:
     25c:	0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20     ..Content-Type: 
     26c:	61 70 70 6c 69 63 61 74 69 6f 6e 2f 78 2d 77 77     application/x-ww
     27c:	77 2d 66 6f 72 6d 2d 75 72 6c 65 6e 63 6f 64 65     w-form-urlencode
     28c:	64 0d 0a 0d 0a 00                                   d.....

00000292 <__c.2657>:
     292:	43 6f 6e 74 65 6e 74 2d 4c 65 6e 67 74 68 3a 20     Content-Length: 
     2a2:	00                                                  .

000002a3 <__c.2655>:
     2a3:	0d 0a 55 73 65 72 2d 41 67 65 6e 74 3a 20 74 67     ..User-Agent: tg
     2b3:	72 2f 31 2e 31 0d 0a 41 63 63 65 70 74 3a 20 2a     r/1.1..Accept: *
     2c3:	2f 2a 0d 0a 43 6f 6e 6e 65 63 74 69 6f 6e 3a 20     /*..Connection: 
     2d3:	63 6c 6f 73 65 0d 0a 00                             close...

000002db <__c.2653>:
     2db:	0d 0a 00                                            ...

000002de <__c.2651>:
     2de:	20 48 54 54 50 2f 31 2e 31 0d 0a 48 6f 73 74 3a      HTTP/1.1..Host:
     2ee:	20 00                                                .

000002f0 <__c.2649>:
     2f0:	50 4f 53 54 20 00                                   POST .

000002f6 <__c.2647>:
     2f6:	0d 0a 55 73 65 72 2d 41 67 65 6e 74 3a 20 74 67     ..User-Agent: tg
     306:	72 2f 31 2e 30 0d 0a 41 63 63 65 70 74 3a 20 74     r/1.0..Accept: t
     316:	65 78 74 2f 68 74 6d 6c 0d 0a 43 6f 6e 6e 65 63     ext/html..Connec
     326:	74 69 6f 6e 3a 20 63 6c 6f 73 65 0d 0a 0d 0a 00     tion: close.....

00000336 <__c.2645>:
     336:	20 48 54 54 50 2f 31 2e 31 0d 0a 48 6f 73 74 3a      HTTP/1.1..Host:
     346:	20 00                                                .

00000348 <__c.2643>:
     348:	47 45 54 20 00 00                                   GET ..

0000034e <__ctors_end>:
     34e:	11 24       	eor	r1, r1
     350:	1f be       	out	0x3f, r1	; 63
     352:	cf e5       	ldi	r28, 0x5F	; 95
     354:	d4 e0       	ldi	r29, 0x04	; 4
     356:	de bf       	out	0x3e, r29	; 62
     358:	cd bf       	out	0x3d, r28	; 61

0000035a <__do_copy_data>:
     35a:	10 e0       	ldi	r17, 0x00	; 0
     35c:	a0 e6       	ldi	r26, 0x60	; 96
     35e:	b0 e0       	ldi	r27, 0x00	; 0
     360:	e4 e7       	ldi	r30, 0x74	; 116
     362:	f6 e2       	ldi	r31, 0x26	; 38
     364:	02 c0       	rjmp	.+4      	; 0x36a <.do_copy_data_start>

00000366 <.do_copy_data_loop>:
     366:	05 90       	lpm	r0, Z+
     368:	0d 92       	st	X+, r0

0000036a <.do_copy_data_start>:
     36a:	a4 38       	cpi	r26, 0x84	; 132
     36c:	b1 07       	cpc	r27, r17
     36e:	d9 f7       	brne	.-10     	; 0x366 <.do_copy_data_loop>

00000370 <__do_clear_bss>:
     370:	13 e0       	ldi	r17, 0x03	; 3
     372:	a4 e8       	ldi	r26, 0x84	; 132
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	01 c0       	rjmp	.+2      	; 0x37a <.do_clear_bss_start>

00000378 <.do_clear_bss_loop>:
     378:	1d 92       	st	X+, r1

0000037a <.do_clear_bss_start>:
     37a:	aa 36       	cpi	r26, 0x6A	; 106
     37c:	b1 07       	cpc	r27, r17
     37e:	e1 f7       	brne	.-8      	; 0x378 <.do_clear_bss_loop>
     380:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <main>
     384:	0c 94 38 13 	jmp	0x2670	; 0x2670 <_exit>

00000388 <__bad_interrupt>:
     388:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000038c <enc28j60ReadOp>:
//
#define waitspi() while(!(SPSR&(1<<SPIF)))

uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
{
        CSACTIVE;
     38c:	c4 98       	cbi	0x18, 4	; 24
        // issue read command
        SPDR = op | (address & ADDR_MASK);
     38e:	96 2f       	mov	r25, r22
     390:	9f 71       	andi	r25, 0x1F	; 31
     392:	98 2b       	or	r25, r24
     394:	9f b9       	out	0x0f, r25	; 15
        waitspi();
     396:	77 9b       	sbis	0x0e, 7	; 14
     398:	fe cf       	rjmp	.-4      	; 0x396 <enc28j60ReadOp+0xa>
        // read data
        SPDR = 0x00;
     39a:	1f b8       	out	0x0f, r1	; 15
        waitspi();
     39c:	77 9b       	sbis	0x0e, 7	; 14
     39e:	fe cf       	rjmp	.-4      	; 0x39c <enc28j60ReadOp+0x10>
        // do dummy read if needed (for mac and mii, see datasheet page 29)
        if(address & 0x80)
     3a0:	67 ff       	sbrs	r22, 7
     3a2:	03 c0       	rjmp	.+6      	; 0x3aa <enc28j60ReadOp+0x1e>
        {
                SPDR = 0x00;
     3a4:	1f b8       	out	0x0f, r1	; 15
                waitspi();
     3a6:	77 9b       	sbis	0x0e, 7	; 14
     3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <enc28j60ReadOp+0x1a>
        }
        // release CS
        CSPASSIVE;
     3aa:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
     3ac:	8f b1       	in	r24, 0x0f	; 15
}
     3ae:	08 95       	ret

000003b0 <enc28j60WriteOp>:

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     3b0:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     3b2:	6f 71       	andi	r22, 0x1F	; 31
     3b4:	68 2b       	or	r22, r24
     3b6:	6f b9       	out	0x0f, r22	; 15
        waitspi();
     3b8:	77 9b       	sbis	0x0e, 7	; 14
     3ba:	fe cf       	rjmp	.-4      	; 0x3b8 <enc28j60WriteOp+0x8>
        // write data
        SPDR = data;
     3bc:	4f b9       	out	0x0f, r20	; 15
        waitspi();
     3be:	77 9b       	sbis	0x0e, 7	; 14
     3c0:	fe cf       	rjmp	.-4      	; 0x3be <enc28j60WriteOp+0xe>
        CSPASSIVE;
     3c2:	c4 9a       	sbi	0x18, 4	; 24
}
     3c4:	08 95       	ret

000003c6 <enc28j60ReadBuffer>:

void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
{
     3c6:	ac 01       	movw	r20, r24
     3c8:	fb 01       	movw	r30, r22
        CSACTIVE;
     3ca:	c4 98       	cbi	0x18, 4	; 24
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
     3cc:	8a e3       	ldi	r24, 0x3A	; 58
     3ce:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     3d0:	77 9b       	sbis	0x0e, 7	; 14
     3d2:	fe cf       	rjmp	.-4      	; 0x3d0 <enc28j60ReadBuffer+0xa>
     3d4:	9a 01       	movw	r18, r20
     3d6:	df 01       	movw	r26, r30
     3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <enc28j60ReadBuffer+0x22>
        while(len)
        {
                len--;
                // read data
                SPDR = 0x00;
     3da:	1f b8       	out	0x0f, r1	; 15
                waitspi();
     3dc:	77 9b       	sbis	0x0e, 7	; 14
     3de:	fe cf       	rjmp	.-4      	; 0x3dc <enc28j60ReadBuffer+0x16>
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     3e0:	21 50       	subi	r18, 0x01	; 1
     3e2:	30 40       	sbci	r19, 0x00	; 0
                // read data
                SPDR = 0x00;
                waitspi();
                *data = SPDR;
     3e4:	8f b1       	in	r24, 0x0f	; 15
     3e6:	8d 93       	st	X+, r24
{
        CSACTIVE;
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
        waitspi();
        while(len)
     3e8:	21 15       	cp	r18, r1
     3ea:	31 05       	cpc	r19, r1
     3ec:	b1 f7       	brne	.-20     	; 0x3da <enc28j60ReadBuffer+0x14>
                SPDR = 0x00;
                waitspi();
                *data = SPDR;
                data++;
        }
        *data='\0';
     3ee:	e4 0f       	add	r30, r20
     3f0:	f5 1f       	adc	r31, r21
     3f2:	10 82       	st	Z, r1
        CSPASSIVE;
     3f4:	c4 9a       	sbi	0x18, 4	; 24
}
     3f6:	08 95       	ret

000003f8 <enc28j60WriteBuffer>:

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
     3f8:	9c 01       	movw	r18, r24
     3fa:	fb 01       	movw	r30, r22
        CSACTIVE;
     3fc:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
     3fe:	8a e7       	ldi	r24, 0x7A	; 122
     400:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     402:	77 9b       	sbis	0x0e, 7	; 14
     404:	fe cf       	rjmp	.-4      	; 0x402 <enc28j60WriteBuffer+0xa>
     406:	07 c0       	rjmp	.+14     	; 0x416 <enc28j60WriteBuffer+0x1e>
        while(len)
        {
                len--;
                // write data
                SPDR = *data;
     408:	80 81       	ld	r24, Z
     40a:	8f b9       	out	0x0f, r24	; 15
                data++;
                waitspi();
     40c:	77 9b       	sbis	0x0e, 7	; 14
     40e:	fe cf       	rjmp	.-4      	; 0x40c <enc28j60WriteBuffer+0x14>
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     410:	21 50       	subi	r18, 0x01	; 1
     412:	30 40       	sbci	r19, 0x00	; 0
                // write data
                SPDR = *data;
                data++;
     414:	31 96       	adiw	r30, 0x01	; 1
{
        CSACTIVE;
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
     416:	21 15       	cp	r18, r1
     418:	31 05       	cpc	r19, r1
     41a:	b1 f7       	brne	.-20     	; 0x408 <enc28j60WriteBuffer+0x10>
                // write data
                SPDR = *data;
                data++;
                waitspi();
        }
        CSPASSIVE;
     41c:	c4 9a       	sbi	0x18, 4	; 24
}
     41e:	08 95       	ret

00000420 <enc28j60SetBank>:

void enc28j60SetBank(uint8_t address)
{
     420:	48 2f       	mov	r20, r24
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
     422:	28 2f       	mov	r18, r24
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	20 76       	andi	r18, 0x60	; 96
     428:	30 70       	andi	r19, 0x00	; 0
     42a:	80 91 99 00 	lds	r24, 0x0099
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	28 17       	cp	r18, r24
     432:	39 07       	cpc	r19, r25
     434:	d9 f0       	breq	.+54     	; 0x46c <__stack+0xd>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     436:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     438:	8f eb       	ldi	r24, 0xBF	; 191
     43a:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     43c:	77 9b       	sbis	0x0e, 7	; 14
     43e:	fe cf       	rjmp	.-4      	; 0x43c <enc28j60SetBank+0x1c>
        // write data
        SPDR = data;
     440:	83 e0       	ldi	r24, 0x03	; 3
     442:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     444:	77 9b       	sbis	0x0e, 7	; 14
     446:	fe cf       	rjmp	.-4      	; 0x444 <enc28j60SetBank+0x24>
        CSPASSIVE;
     448:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     44a:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     44c:	8f e9       	ldi	r24, 0x9F	; 159
     44e:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     450:	77 9b       	sbis	0x0e, 7	; 14
     452:	fe cf       	rjmp	.-4      	; 0x450 <enc28j60SetBank+0x30>
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
     454:	85 e0       	ldi	r24, 0x05	; 5
     456:	35 95       	asr	r19
     458:	27 95       	ror	r18
     45a:	8a 95       	dec	r24
     45c:	e1 f7       	brne	.-8      	; 0x456 <enc28j60SetBank+0x36>
        CSACTIVE;
        // issue write command
        SPDR = op | (address & ADDR_MASK);
        waitspi();
        // write data
        SPDR = data;
     45e:	2f b9       	out	0x0f, r18	; 15
        waitspi();
     460:	77 9b       	sbis	0x0e, 7	; 14
     462:	fe cf       	rjmp	.-4      	; 0x460 <__stack+0x1>
        CSPASSIVE;
     464:	c4 9a       	sbi	0x18, 4	; 24
        if((address & BANK_MASK) != Enc28j60Bank)
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
                Enc28j60Bank = (address & BANK_MASK);
     466:	40 76       	andi	r20, 0x60	; 96
     468:	40 93 99 00 	sts	0x0099, r20
     46c:	08 95       	ret

0000046e <enc28j60Read>:
        }
}

uint8_t enc28j60Read(uint8_t address)
{
     46e:	1f 93       	push	r17
     470:	18 2f       	mov	r17, r24
        // set the bank
        enc28j60SetBank(address);
     472:	0e 94 10 02 	call	0x420	; 0x420 <enc28j60SetBank>
        // do the read
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	61 2f       	mov	r22, r17
     47a:	0e 94 c6 01 	call	0x38c	; 0x38c <enc28j60ReadOp>
}
     47e:	1f 91       	pop	r17
     480:	08 95       	ret

00000482 <enc28j60Write>:
	
	return (enc28j60Read(MIRDH));
}

void enc28j60Write(uint8_t address, uint8_t data)
{
     482:	0f 93       	push	r16
     484:	1f 93       	push	r17
     486:	18 2f       	mov	r17, r24
     488:	06 2f       	mov	r16, r22
        // set the bank
        enc28j60SetBank(address);
     48a:	0e 94 10 02 	call	0x420	; 0x420 <enc28j60SetBank>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     48e:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     490:	1f 71       	andi	r17, 0x1F	; 31
     492:	10 64       	ori	r17, 0x40	; 64
     494:	1f b9       	out	0x0f, r17	; 15
        waitspi();
     496:	77 9b       	sbis	0x0e, 7	; 14
     498:	fe cf       	rjmp	.-4      	; 0x496 <enc28j60Write+0x14>
        // write data
        SPDR = data;
     49a:	0f b9       	out	0x0f, r16	; 15
        waitspi();
     49c:	77 9b       	sbis	0x0e, 7	; 14
     49e:	fe cf       	rjmp	.-4      	; 0x49c <enc28j60Write+0x1a>
        CSPASSIVE;
     4a0:	c4 9a       	sbi	0x18, 4	; 24
{
        // set the bank
        enc28j60SetBank(address);
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
}
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	08 95       	ret

000004a8 <enc28j60PhyReadH>:
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
}

// read upper 8 bits
uint16_t enc28j60PhyReadH(uint8_t address)
{
     4a8:	68 2f       	mov	r22, r24

	// Set the right address and start the register read operation
	enc28j60Write(MIREGADR, address);
     4aa:	84 ed       	ldi	r24, 0xD4	; 212
     4ac:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	enc28j60Write(MICMD, MICMD_MIIRD);
     4b0:	82 ed       	ldi	r24, 0xD2	; 210
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4b8:	80 e5       	ldi	r24, 0x50	; 80
     4ba:	8a 95       	dec	r24
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <enc28j60PhyReadH+0x12>
        _delay_us(15);

	// wait until the PHY read completes
	while(enc28j60Read(MISTAT) & MISTAT_BUSY);
     4be:	8a ee       	ldi	r24, 0xEA	; 234
     4c0:	0e 94 37 02 	call	0x46e	; 0x46e <enc28j60Read>
     4c4:	80 fd       	sbrc	r24, 0
     4c6:	fb cf       	rjmp	.-10     	; 0x4be <enc28j60PhyReadH+0x16>

	// reset reading bit
	enc28j60Write(MICMD, 0x00);
     4c8:	82 ed       	ldi	r24, 0xD2	; 210
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	
	return (enc28j60Read(MIRDH));
     4d0:	89 ed       	ldi	r24, 0xD9	; 217
     4d2:	0e 94 37 02 	call	0x46e	; 0x46e <enc28j60Read>
}
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	08 95       	ret

000004da <enc28j60PhyWrite>:
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
}

void enc28j60PhyWrite(uint8_t address, uint16_t data)
{
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	98 2f       	mov	r25, r24
     4e0:	16 2f       	mov	r17, r22
     4e2:	07 2f       	mov	r16, r23
        // set the PHY register address
        enc28j60Write(MIREGADR, address);
     4e4:	84 ed       	ldi	r24, 0xD4	; 212
     4e6:	69 2f       	mov	r22, r25
     4e8:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
        // write the PHY data
        enc28j60Write(MIWRL, data);
     4ec:	86 ed       	ldi	r24, 0xD6	; 214
     4ee:	61 2f       	mov	r22, r17
     4f0:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
        enc28j60Write(MIWRH, data>>8);
     4f4:	87 ed       	ldi	r24, 0xD7	; 215
     4f6:	60 2f       	mov	r22, r16
     4f8:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
     4fc:	10 e5       	ldi	r17, 0x50	; 80
     4fe:	03 c0       	rjmp	.+6      	; 0x506 <enc28j60PhyWrite+0x2c>
     500:	81 2f       	mov	r24, r17
     502:	8a 95       	dec	r24
     504:	f1 f7       	brne	.-4      	; 0x502 <enc28j60PhyWrite+0x28>
        // wait until the PHY write completes
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
     506:	8a ee       	ldi	r24, 0xEA	; 234
     508:	0e 94 37 02 	call	0x46e	; 0x46e <enc28j60Read>
     50c:	80 fd       	sbrc	r24, 0
     50e:	f8 cf       	rjmp	.-16     	; 0x500 <enc28j60PhyWrite+0x26>
                _delay_us(15);
        }
}
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	08 95       	ret

00000516 <enc28j60clkout>:

void enc28j60clkout(uint8_t clk)
{
        //setup clkout: 2 is 12.5MHz:
	enc28j60Write(ECOCON, clk & 0x7);
     516:	68 2f       	mov	r22, r24
     518:	67 70       	andi	r22, 0x07	; 7
     51a:	85 e7       	ldi	r24, 0x75	; 117
     51c:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
}
     520:	08 95       	ret

00000522 <enc28j60Init>:

void enc28j60Init(uint8_t* macaddr)
{
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	ec 01       	movw	r28, r24
	// initialize I/O
        // ss as output:
	ENC28J60_CONTROL_DDR |= 1<<ENC28J60_CONTROL_CS;
     528:	bc 9a       	sbi	0x17, 4	; 23
	CSPASSIVE; // ss=0
     52a:	c4 9a       	sbi	0x18, 4	; 24
        //	
	ENC28J60_CONTROL_DDR  |= 1<<ENC28J60_CONTROL_SI | 1<<ENC28J60_CONTROL_SCK; // mosi, sck output
     52c:	87 b3       	in	r24, 0x17	; 23
     52e:	80 6a       	ori	r24, 0xA0	; 160
     530:	87 bb       	out	0x17, r24	; 23
	cbi(ENC28J60_CONTROL_DDR,ENC28J60_CONTROL_SO); // MISO is input
     532:	be 98       	cbi	0x17, 6	; 23
        //
        cbi(ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_SI); // MOSI low
     534:	c5 98       	cbi	0x18, 5	; 24
        cbi(ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_SCK); // SCK low
     536:	c7 98       	cbi	0x18, 7	; 24
	//
	// initialize SPI interface
	// master mode and Fosc/2 clock:
        SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//SPCR = (1<<SPE)|(1<<MSTR);
     538:	81 e5       	ldi	r24, 0x51	; 81
     53a:	8d b9       	out	0x0d, r24	; 13
        SPSR |= (1<<SPI2X);
     53c:	70 9a       	sbi	0x0e, 0	; 14
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     53e:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     540:	8f ef       	ldi	r24, 0xFF	; 255
     542:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     544:	77 9b       	sbis	0x0e, 7	; 14
     546:	fe cf       	rjmp	.-4      	; 0x544 <enc28j60Init+0x22>
        // write data
        SPDR = data;
     548:	8f ef       	ldi	r24, 0xFF	; 255
     54a:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     54c:	77 9b       	sbis	0x0e, 7	; 14
     54e:	fe cf       	rjmp	.-4      	; 0x54c <enc28j60Init+0x2a>
        CSPASSIVE;
     550:	c4 9a       	sbi	0x18, 4	; 24
     552:	8d ec       	ldi	r24, 0xCD	; 205
     554:	8a 95       	dec	r24
     556:	f1 f7       	brne	.-4      	; 0x554 <enc28j60Init+0x32>
	//while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	gNextPacketPtr = RXSTART_INIT;
     558:	10 92 9b 00 	sts	0x009B, r1
     55c:	10 92 9a 00 	sts	0x009A, r1
        // Rx start
	enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
     560:	88 e0       	ldi	r24, 0x08	; 8
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	enc28j60Write(ERXSTH, RXSTART_INIT>>8);
     568:	89 e0       	ldi	r24, 0x09	; 9
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	// set receive pointer address
	enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
     570:	8c e0       	ldi	r24, 0x0C	; 12
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
     578:	8d e0       	ldi	r24, 0x0D	; 13
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	// RX end
	enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
     580:	8a e0       	ldi	r24, 0x0A	; 10
     582:	6e ef       	ldi	r22, 0xFE	; 254
     584:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
     588:	8b e0       	ldi	r24, 0x0B	; 11
     58a:	69 e1       	ldi	r22, 0x19	; 25
     58c:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	// TX start
	enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
     590:	84 e0       	ldi	r24, 0x04	; 4
     592:	6f ef       	ldi	r22, 0xFF	; 255
     594:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	enc28j60Write(ETXSTH, TXSTART_INIT>>8);
     598:	85 e0       	ldi	r24, 0x05	; 5
     59a:	69 e1       	ldi	r22, 0x19	; 25
     59c:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	// TX end
	enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
     5a0:	86 e0       	ldi	r24, 0x06	; 6
     5a2:	6f ef       	ldi	r22, 0xFF	; 255
     5a4:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
     5a8:	87 e0       	ldi	r24, 0x07	; 7
     5aa:	6f e1       	ldi	r22, 0x1F	; 31
     5ac:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
        // Type     ETH.DST
        // ARP      BROADCAST
        // 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
        // in binary these poitions are:11 0000 0011 1111
        // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
	enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
     5b0:	88 e3       	ldi	r24, 0x38	; 56
     5b2:	60 eb       	ldi	r22, 0xB0	; 176
     5b4:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	enc28j60Write(EPMM0, 0x3f);
     5b8:	88 e2       	ldi	r24, 0x28	; 40
     5ba:	6f e3       	ldi	r22, 0x3F	; 63
     5bc:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	enc28j60Write(EPMM1, 0x30);
     5c0:	89 e2       	ldi	r24, 0x29	; 41
     5c2:	60 e3       	ldi	r22, 0x30	; 48
     5c4:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	enc28j60Write(EPMCSL, 0xf9);
     5c8:	80 e3       	ldi	r24, 0x30	; 48
     5ca:	69 ef       	ldi	r22, 0xF9	; 249
     5cc:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	enc28j60Write(EPMCSH, 0xf7);
     5d0:	81 e3       	ldi	r24, 0x31	; 49
     5d2:	67 ef       	ldi	r22, 0xF7	; 247
     5d4:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
        //
        //
	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
     5d8:	80 ec       	ldi	r24, 0xC0	; 192
     5da:	6d e0       	ldi	r22, 0x0D	; 13
     5dc:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
     5e0:	81 ec       	ldi	r24, 0xC1	; 193
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     5e8:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     5ea:	82 e8       	ldi	r24, 0x82	; 130
     5ec:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     5ee:	77 9b       	sbis	0x0e, 7	; 14
     5f0:	fe cf       	rjmp	.-4      	; 0x5ee <enc28j60Init+0xcc>
        // write data
        SPDR = data;
     5f2:	82 e3       	ldi	r24, 0x32	; 50
     5f4:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     5f6:	77 9b       	sbis	0x0e, 7	; 14
     5f8:	fe cf       	rjmp	.-4      	; 0x5f6 <enc28j60Init+0xd4>
        CSPASSIVE;
     5fa:	c4 9a       	sbi	0x18, 4	; 24
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
	// enable automatic padding to 60bytes and CRC operations
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
	// set inter-frame gap (non-back-to-back)
	enc28j60Write(MAIPGL, 0x12);
     5fc:	86 ec       	ldi	r24, 0xC6	; 198
     5fe:	62 e1       	ldi	r22, 0x12	; 18
     600:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	enc28j60Write(MAIPGH, 0x0C);
     604:	87 ec       	ldi	r24, 0xC7	; 199
     606:	6c e0       	ldi	r22, 0x0C	; 12
     608:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
     60c:	84 ec       	ldi	r24, 0xC4	; 196
     60e:	62 e1       	ldi	r22, 0x12	; 18
     610:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	// Set the maximum packet size which the controller will accept
        // Do not send packets longer than MAX_FRAMELEN:
	enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
     614:	8a ec       	ldi	r24, 0xCA	; 202
     616:	6c ed       	ldi	r22, 0xDC	; 220
     618:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
     61c:	8b ec       	ldi	r24, 0xCB	; 203
     61e:	65 e0       	ldi	r22, 0x05	; 5
     620:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	// do bank 3 stuff
        // write MAC address
        // NOTE: MAC address in ENC28J60 is byte-backward
        enc28j60Write(MAADR5, macaddr[0]);
     624:	84 ee       	ldi	r24, 0xE4	; 228
     626:	68 81       	ld	r22, Y
     628:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
        enc28j60Write(MAADR4, macaddr[1]);
     62c:	85 ee       	ldi	r24, 0xE5	; 229
     62e:	69 81       	ldd	r22, Y+1	; 0x01
     630:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
        enc28j60Write(MAADR3, macaddr[2]);
     634:	82 ee       	ldi	r24, 0xE2	; 226
     636:	6a 81       	ldd	r22, Y+2	; 0x02
     638:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
        enc28j60Write(MAADR2, macaddr[3]);
     63c:	83 ee       	ldi	r24, 0xE3	; 227
     63e:	6b 81       	ldd	r22, Y+3	; 0x03
     640:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
        enc28j60Write(MAADR1, macaddr[4]);
     644:	80 ee       	ldi	r24, 0xE0	; 224
     646:	6c 81       	ldd	r22, Y+4	; 0x04
     648:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
        enc28j60Write(MAADR0, macaddr[5]);
     64c:	81 ee       	ldi	r24, 0xE1	; 225
     64e:	6d 81       	ldd	r22, Y+5	; 0x05
     650:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
     654:	80 e1       	ldi	r24, 0x10	; 16
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	71 e0       	ldi	r23, 0x01	; 1
     65a:	0e 94 6d 02 	call	0x4da	; 0x4da <enc28j60PhyWrite>
	// switch to bank 0
	enc28j60SetBank(ECON1);
     65e:	8f e1       	ldi	r24, 0x1F	; 31
     660:	0e 94 10 02 	call	0x420	; 0x420 <enc28j60SetBank>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     664:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     666:	8b e9       	ldi	r24, 0x9B	; 155
     668:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     66a:	77 9b       	sbis	0x0e, 7	; 14
     66c:	fe cf       	rjmp	.-4      	; 0x66a <enc28j60Init+0x148>
        // write data
        SPDR = data;
     66e:	80 ec       	ldi	r24, 0xC0	; 192
     670:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     672:	77 9b       	sbis	0x0e, 7	; 14
     674:	fe cf       	rjmp	.-4      	; 0x672 <enc28j60Init+0x150>
        CSPASSIVE;
     676:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     678:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     67a:	8f e9       	ldi	r24, 0x9F	; 159
     67c:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     67e:	77 9b       	sbis	0x0e, 7	; 14
     680:	fe cf       	rjmp	.-4      	; 0x67e <enc28j60Init+0x15c>
        // write data
        SPDR = data;
     682:	84 e0       	ldi	r24, 0x04	; 4
     684:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     686:	77 9b       	sbis	0x0e, 7	; 14
     688:	fe cf       	rjmp	.-4      	; 0x686 <enc28j60Init+0x164>
        CSPASSIVE;
     68a:	c4 9a       	sbi	0x18, 4	; 24
	enc28j60SetBank(ECON1);
	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <enc28j60getrev>:

// read the revision of the chip:
uint8_t enc28j60getrev(void)
{
	return(enc28j60Read(EREVID));
     692:	82 e7       	ldi	r24, 0x72	; 114
     694:	0e 94 37 02 	call	0x46e	; 0x46e <enc28j60Read>
}
     698:	08 95       	ret

0000069a <enc28j60linkup>:

// link status
uint8_t enc28j60linkup(void)
{
        // bit 10 (= bit 3 in upper reg)
	return(enc28j60PhyReadH(PHSTAT2) && 4);
     69a:	81 e1       	ldi	r24, 0x11	; 17
     69c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <enc28j60PhyReadH>
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	89 2b       	or	r24, r25
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <enc28j60linkup+0xe>
     6a6:	21 e0       	ldi	r18, 0x01	; 1
}
     6a8:	82 2f       	mov	r24, r18
     6aa:	08 95       	ret

000006ac <enc28j60PacketSend>:

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
     6ac:	df 92       	push	r13
     6ae:	ef 92       	push	r14
     6b0:	ff 92       	push	r15
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	ec 01       	movw	r28, r24
     6bc:	8b 01       	movw	r16, r22

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     6be:	3f e9       	ldi	r19, 0x9F	; 159
     6c0:	d3 2e       	mov	r13, r19
        waitspi();
        // write data
        SPDR = data;
     6c2:	20 e8       	ldi	r18, 0x80	; 128
     6c4:	f2 2e       	mov	r15, r18

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     6c6:	9f eb       	ldi	r25, 0xBF	; 191
     6c8:	e9 2e       	mov	r14, r25
     6ca:	15 c0       	rjmp	.+42     	; 0x6f6 <enc28j60PacketSend+0x4a>
{
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
        {
                // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
                if( (enc28j60Read(EIR) & EIR_TXERIF) ) {
     6cc:	8c e1       	ldi	r24, 0x1C	; 28
     6ce:	0e 94 37 02 	call	0x46e	; 0x46e <enc28j60Read>
     6d2:	81 ff       	sbrs	r24, 1
     6d4:	10 c0       	rjmp	.+32     	; 0x6f6 <enc28j60PacketSend+0x4a>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     6d6:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     6d8:	df b8       	out	0x0f, r13	; 15
        waitspi();
     6da:	77 9b       	sbis	0x0e, 7	; 14
     6dc:	fe cf       	rjmp	.-4      	; 0x6da <enc28j60PacketSend+0x2e>
        // write data
        SPDR = data;
     6de:	ff b8       	out	0x0f, r15	; 15
        waitspi();
     6e0:	77 9b       	sbis	0x0e, 7	; 14
     6e2:	fe cf       	rjmp	.-4      	; 0x6e0 <enc28j60PacketSend+0x34>
        CSPASSIVE;
     6e4:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     6e6:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     6e8:	ef b8       	out	0x0f, r14	; 15
        waitspi();
     6ea:	77 9b       	sbis	0x0e, 7	; 14
     6ec:	fe cf       	rjmp	.-4      	; 0x6ea <enc28j60PacketSend+0x3e>
        // write data
        SPDR = data;
     6ee:	ff b8       	out	0x0f, r15	; 15
        waitspi();
     6f0:	77 9b       	sbis	0x0e, 7	; 14
     6f2:	fe cf       	rjmp	.-4      	; 0x6f0 <enc28j60PacketSend+0x44>
        CSPASSIVE;
     6f4:	c4 9a       	sbi	0x18, 4	; 24
}

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	6f e1       	ldi	r22, 0x1F	; 31
     6fa:	0e 94 c6 01 	call	0x38c	; 0x38c <enc28j60ReadOp>
     6fe:	83 fd       	sbrc	r24, 3
     700:	e5 cf       	rjmp	.-54     	; 0x6cc <enc28j60PacketSend+0x20>
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
                }
        }
	// Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
     702:	82 e0       	ldi	r24, 0x02	; 2
     704:	6f ef       	ldi	r22, 0xFF	; 255
     706:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
     70a:	83 e0       	ldi	r24, 0x03	; 3
     70c:	69 e1       	ldi	r22, 0x19	; 25
     70e:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
     712:	ce 01       	movw	r24, r28
     714:	81 50       	subi	r24, 0x01	; 1
     716:	68 2f       	mov	r22, r24
     718:	86 e0       	ldi	r24, 0x06	; 6
     71a:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
     71e:	9e 01       	movw	r18, r28
     720:	21 50       	subi	r18, 0x01	; 1
     722:	36 4e       	sbci	r19, 0xE6	; 230
     724:	87 e0       	ldi	r24, 0x07	; 7
     726:	63 2f       	mov	r22, r19
     728:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     72c:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     72e:	8a e7       	ldi	r24, 0x7A	; 122
     730:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     732:	77 9b       	sbis	0x0e, 7	; 14
     734:	fe cf       	rjmp	.-4      	; 0x732 <enc28j60PacketSend+0x86>
        // write data
        SPDR = data;
     736:	1f b8       	out	0x0f, r1	; 15
        waitspi();
     738:	77 9b       	sbis	0x0e, 7	; 14
     73a:	fe cf       	rjmp	.-4      	; 0x738 <enc28j60PacketSend+0x8c>
        CSPASSIVE;
     73c:	c4 9a       	sbi	0x18, 4	; 24
        CSPASSIVE;
}

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
        CSACTIVE;
     73e:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
     740:	8a e7       	ldi	r24, 0x7A	; 122
     742:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     744:	77 9b       	sbis	0x0e, 7	; 14
     746:	fe cf       	rjmp	.-4      	; 0x744 <enc28j60PacketSend+0x98>
     748:	08 c0       	rjmp	.+16     	; 0x75a <enc28j60PacketSend+0xae>
        while(len)
        {
                len--;
                // write data
                SPDR = *data;
     74a:	f8 01       	movw	r30, r16
     74c:	80 81       	ld	r24, Z
     74e:	8f b9       	out	0x0f, r24	; 15
                data++;
                waitspi();
     750:	77 9b       	sbis	0x0e, 7	; 14
     752:	fe cf       	rjmp	.-4      	; 0x750 <enc28j60PacketSend+0xa4>
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     754:	21 97       	sbiw	r28, 0x01	; 1
                // write data
                SPDR = *data;
                data++;
     756:	0f 5f       	subi	r16, 0xFF	; 255
     758:	1f 4f       	sbci	r17, 0xFF	; 255
{
        CSACTIVE;
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
     75a:	20 97       	sbiw	r28, 0x00	; 0
     75c:	b1 f7       	brne	.-20     	; 0x74a <enc28j60PacketSend+0x9e>
                // write data
                SPDR = *data;
                data++;
                waitspi();
        }
        CSPASSIVE;
     75e:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     760:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     762:	8f e9       	ldi	r24, 0x9F	; 159
     764:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     766:	77 9b       	sbis	0x0e, 7	; 14
     768:	fe cf       	rjmp	.-4      	; 0x766 <enc28j60PacketSend+0xba>
        // write data
        SPDR = data;
     76a:	88 e0       	ldi	r24, 0x08	; 8
     76c:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     76e:	77 9b       	sbis	0x0e, 7	; 14
     770:	fe cf       	rjmp	.-4      	; 0x76e <enc28j60PacketSend+0xc2>
        CSPASSIVE;
     772:	c4 9a       	sbi	0x18, 4	; 24
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
}
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	0f 91       	pop	r16
     77c:	ff 90       	pop	r15
     77e:	ef 90       	pop	r14
     780:	df 90       	pop	r13
     782:	08 95       	ret

00000784 <enc28j60hasRxPkt>:

// just probe if there might be a packet
uint8_t enc28j60hasRxPkt(void)
{
	if( enc28j60Read(EPKTCNT) ==0 ){
     784:	89 e3       	ldi	r24, 0x39	; 57
     786:	0e 94 37 02 	call	0x46e	; 0x46e <enc28j60Read>
     78a:	81 11       	cpse	r24, r1
     78c:	81 e0       	ldi	r24, 0x01	; 1
		return(0);
        }
        return(1);
}
     78e:	08 95       	ret

00000790 <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
     790:	8f 92       	push	r8
     792:	9f 92       	push	r9
     794:	af 92       	push	r10
     796:	bf 92       	push	r11
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	5c 01       	movw	r10, r24
     7aa:	4b 01       	movw	r8, r22
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
     7ac:	89 e3       	ldi	r24, 0x39	; 57
     7ae:	0e 94 37 02 	call	0x46e	; 0x46e <enc28j60Read>
     7b2:	88 23       	and	r24, r24
     7b4:	19 f4       	brne	.+6      	; 0x7bc <enc28j60PacketReceive+0x2c>
     7b6:	c0 e0       	ldi	r28, 0x00	; 0
     7b8:	d0 e0       	ldi	r29, 0x00	; 0
     7ba:	76 c0       	rjmp	.+236    	; 0x8a8 <enc28j60PacketReceive+0x118>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
     7bc:	60 91 9a 00 	lds	r22, 0x009A
     7c0:	10 91 9b 00 	lds	r17, 0x009B
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	61 2f       	mov	r22, r17
     7ce:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     7d2:	8a e3       	ldi	r24, 0x3A	; 58
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	0e 94 c6 01 	call	0x38c	; 0x38c <enc28j60ReadOp>
     7da:	18 2f       	mov	r17, r24
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     7dc:	8a e3       	ldi	r24, 0x3A	; 58
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	0e 94 c6 01 	call	0x38c	; 0x38c <enc28j60ReadOp>
     7e4:	38 2f       	mov	r19, r24
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	e1 2e       	mov	r14, r17
     7ea:	ff 24       	eor	r15, r15
     7ec:	e2 2a       	or	r14, r18
     7ee:	f3 2a       	or	r15, r19
     7f0:	f0 92 9b 00 	sts	0x009B, r15
     7f4:	e0 92 9a 00 	sts	0x009A, r14
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     7f8:	8a e3       	ldi	r24, 0x3A	; 58
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	0e 94 c6 01 	call	0x38c	; 0x38c <enc28j60ReadOp>
     800:	c8 2e       	mov	r12, r24
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     802:	8a e3       	ldi	r24, 0x3A	; 58
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	0e 94 c6 01 	call	0x38c	; 0x38c <enc28j60ReadOp>
     80a:	d8 2e       	mov	r13, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     80c:	8a e3       	ldi	r24, 0x3A	; 58
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	0e 94 c6 01 	call	0x38c	; 0x38c <enc28j60ReadOp>
     814:	08 2f       	mov	r16, r24
     816:	10 e0       	ldi	r17, 0x00	; 0
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
     818:	8a e3       	ldi	r24, 0x3A	; 58
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	0e 94 c6 01 	call	0x38c	; 0x38c <enc28j60ReadOp>
                len=maxlen-1;
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
     820:	38 2f       	mov	r19, r24
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	20 2b       	or	r18, r16
     826:	31 2b       	or	r19, r17
     828:	27 fd       	sbrc	r18, 7
     82a:	03 c0       	rjmp	.+6      	; 0x832 <enc28j60PacketReceive+0xa2>
     82c:	c0 e0       	ldi	r28, 0x00	; 0
     82e:	d0 e0       	ldi	r29, 0x00	; 0
     830:	11 c0       	rjmp	.+34     	; 0x854 <enc28j60PacketReceive+0xc4>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     832:	cc 2d       	mov	r28, r12
     834:	d0 e0       	ldi	r29, 0x00	; 0
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     836:	9d 2d       	mov	r25, r13
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	c8 2b       	or	r28, r24
     83c:	d9 2b       	or	r29, r25
        len-=4; //remove the CRC count
     83e:	c5 01       	movw	r24, r10
     840:	01 97       	sbiw	r24, 0x01	; 1
     842:	24 97       	sbiw	r28, 0x04	; 4
     844:	8c 17       	cp	r24, r28
     846:	9d 07       	cpc	r25, r29
     848:	08 f4       	brcc	.+2      	; 0x84c <enc28j60PacketReceive+0xbc>
     84a:	ec 01       	movw	r28, r24
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
     84c:	ce 01       	movw	r24, r28
     84e:	b4 01       	movw	r22, r8
     850:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <enc28j60ReadBuffer>
        }
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
     854:	de 2c       	mov	r13, r14
     856:	8c e0       	ldi	r24, 0x0C	; 12
     858:	6e 2d       	mov	r22, r14
     85a:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
	enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
     85e:	8d e0       	ldi	r24, 0x0D	; 13
     860:	6f 2d       	mov	r22, r15
     862:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
        // Move the RX read pointer to the start of the next received packet
        // This frees the memory we just read out.
        // However, compensate for the errata point 13, rev B4: enver write an even address!
        if ((gNextPacketPtr - 1 < RXSTART_INIT)
     866:	87 01       	movw	r16, r14
     868:	01 50       	subi	r16, 0x01	; 1
     86a:	10 40       	sbci	r17, 0x00	; 0
     86c:	89 e1       	ldi	r24, 0x19	; 25
     86e:	0f 3f       	cpi	r16, 0xFF	; 255
     870:	18 07       	cpc	r17, r24
     872:	38 f0       	brcs	.+14     	; 0x882 <enc28j60PacketReceive+0xf2>
                || (gNextPacketPtr -1 > RXSTOP_INIT)) {
                enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
     874:	8c e0       	ldi	r24, 0x0C	; 12
     876:	6e ef       	ldi	r22, 0xFE	; 254
     878:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
                enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
     87c:	8d e0       	ldi	r24, 0x0D	; 13
     87e:	69 e1       	ldi	r22, 0x19	; 25
     880:	07 c0       	rjmp	.+14     	; 0x890 <enc28j60PacketReceive+0x100>
        } else {
                enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
     882:	da 94       	dec	r13
     884:	8c e0       	ldi	r24, 0x0C	; 12
     886:	6d 2d       	mov	r22, r13
     888:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
     88c:	8d e0       	ldi	r24, 0x0D	; 13
     88e:	61 2f       	mov	r22, r17
     890:	0e 94 41 02 	call	0x482	; 0x482 <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     894:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     896:	8e e9       	ldi	r24, 0x9E	; 158
     898:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     89a:	77 9b       	sbis	0x0e, 7	; 14
     89c:	fe cf       	rjmp	.-4      	; 0x89a <enc28j60PacketReceive+0x10a>
        // write data
        SPDR = data;
     89e:	80 e4       	ldi	r24, 0x40	; 64
     8a0:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     8a2:	77 9b       	sbis	0x0e, 7	; 14
     8a4:	fe cf       	rjmp	.-4      	; 0x8a2 <enc28j60PacketReceive+0x112>
        CSPASSIVE;
     8a6:	c4 9a       	sbi	0x18, 4	; 24
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
}
     8a8:	ce 01       	movw	r24, r28
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	1f 91       	pop	r17
     8b0:	0f 91       	pop	r16
     8b2:	ff 90       	pop	r15
     8b4:	ef 90       	pop	r14
     8b6:	df 90       	pop	r13
     8b8:	cf 90       	pop	r12
     8ba:	bf 90       	pop	r11
     8bc:	af 90       	pop	r10
     8be:	9f 90       	pop	r9
     8c0:	8f 90       	pop	r8
     8c2:	08 95       	ret

000008c4 <checksum>:
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
     8c4:	cf 92       	push	r12
     8c6:	df 92       	push	r13
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	6c 01       	movw	r12, r24

        //if(type==0){    
        //        // do not add anything, standard IP checksum as described above
        //        // Usable for ICMP and IP header
        //}
        if(type==1){
     8d6:	41 30       	cpi	r20, 0x01	; 1
     8d8:	81 f4       	brne	.+32     	; 0x8fa <checksum+0x36>
                sum+=IP_PROTO_UDP_V; // protocol udp
                // the length here is the length of udp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real udp len
     8da:	68 50       	subi	r22, 0x08	; 8
     8dc:	70 40       	sbci	r23, 0x00	; 0
     8de:	7b 01       	movw	r14, r22
     8e0:	00 e0       	ldi	r16, 0x00	; 0
     8e2:	10 e0       	ldi	r17, 0x00	; 0
     8e4:	68 5f       	subi	r22, 0xF8	; 248
     8e6:	7f 4f       	sbci	r23, 0xFF	; 255
     8e8:	21 e1       	ldi	r18, 0x11	; 17
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	e2 0e       	add	r14, r18
     8f2:	f3 1e       	adc	r15, r19
     8f4:	04 1f       	adc	r16, r20
     8f6:	15 1f       	adc	r17, r21
     8f8:	15 c0       	rjmp	.+42     	; 0x924 <checksum+0x60>
        }
        if(type==2){
     8fa:	42 30       	cpi	r20, 0x02	; 2
     8fc:	21 f0       	breq	.+8      	; 0x906 <checksum+0x42>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	0f c0       	rjmp	.+30     	; 0x924 <checksum+0x60>
                sum+=IP_PROTO_TCP_V; 
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
     906:	68 50       	subi	r22, 0x08	; 8
     908:	70 40       	sbci	r23, 0x00	; 0
     90a:	7b 01       	movw	r14, r22
     90c:	00 e0       	ldi	r16, 0x00	; 0
     90e:	10 e0       	ldi	r17, 0x00	; 0
     910:	68 5f       	subi	r22, 0xF8	; 248
     912:	7f 4f       	sbci	r23, 0xFF	; 255
     914:	86 e0       	ldi	r24, 0x06	; 6
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	a0 e0       	ldi	r26, 0x00	; 0
     91a:	b0 e0       	ldi	r27, 0x00	; 0
     91c:	e8 0e       	add	r14, r24
     91e:	f9 1e       	adc	r15, r25
     920:	0a 1f       	adc	r16, r26
     922:	1b 1f       	adc	r17, r27
     924:	f6 01       	movw	r30, r12
     926:	eb 01       	movw	r28, r22
     928:	16 c0       	rjmp	.+44     	; 0x956 <checksum+0x92>
        }
        // build the sum of 16bit words
        while(len >1){
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
     92a:	80 81       	ld	r24, Z
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	a0 e0       	ldi	r26, 0x00	; 0
     930:	b0 e0       	ldi	r27, 0x00	; 0
     932:	ba 2f       	mov	r27, r26
     934:	a9 2f       	mov	r26, r25
     936:	98 2f       	mov	r25, r24
     938:	88 27       	eor	r24, r24
     93a:	21 81       	ldd	r18, Z+1	; 0x01
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	82 2b       	or	r24, r18
     944:	93 2b       	or	r25, r19
     946:	a4 2b       	or	r26, r20
     948:	b5 2b       	or	r27, r21
     94a:	e8 0e       	add	r14, r24
     94c:	f9 1e       	adc	r15, r25
     94e:	0a 1f       	adc	r16, r26
     950:	1b 1f       	adc	r17, r27
                buf+=2;
     952:	32 96       	adiw	r30, 0x02	; 2
                len-=2;
     954:	22 97       	sbiw	r28, 0x02	; 2
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
        }
        // build the sum of 16bit words
        while(len >1){
     956:	c2 30       	cpi	r28, 0x02	; 2
     958:	d1 05       	cpc	r29, r1
     95a:	38 f7       	brcc	.-50     	; 0x92a <checksum+0x66>
     95c:	fb 01       	movw	r30, r22
     95e:	ee 7f       	andi	r30, 0xFE	; 254
     960:	ec 0d       	add	r30, r12
     962:	fd 1d       	adc	r31, r13
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
                buf+=2;
                len-=2;
        }
        // if there is a byte left then add it (padded with zero)
        if (len){
     964:	60 ff       	sbrs	r22, 0
     966:	15 c0       	rjmp	.+42     	; 0x992 <checksum+0xce>
                sum += ((uint32_t)(0xFF & *buf))<<8;
     968:	80 81       	ld	r24, Z
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	ba 2f       	mov	r27, r26
     972:	a9 2f       	mov	r26, r25
     974:	98 2f       	mov	r25, r24
     976:	88 27       	eor	r24, r24
     978:	08 c0       	rjmp	.+16     	; 0x98a <checksum+0xc6>
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
                sum = (sum & 0xFFFF)+(sum >> 16);
     97a:	2f ef       	ldi	r18, 0xFF	; 255
     97c:	3f ef       	ldi	r19, 0xFF	; 255
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	e2 22       	and	r14, r18
     984:	f3 22       	and	r15, r19
     986:	04 23       	and	r16, r20
     988:	15 23       	and	r17, r21
     98a:	e8 0e       	add	r14, r24
     98c:	f9 1e       	adc	r15, r25
     98e:	0a 1f       	adc	r16, r26
     990:	1b 1f       	adc	r17, r27
        if (len){
                sum += ((uint32_t)(0xFF & *buf))<<8;
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
     992:	c8 01       	movw	r24, r16
     994:	aa 27       	eor	r26, r26
     996:	bb 27       	eor	r27, r27
     998:	00 97       	sbiw	r24, 0x00	; 0
     99a:	a1 05       	cpc	r26, r1
     99c:	b1 05       	cpc	r27, r1
     99e:	69 f7       	brne	.-38     	; 0x97a <checksum+0xb6>
     9a0:	97 01       	movw	r18, r14
     9a2:	20 95       	com	r18
     9a4:	30 95       	com	r19
                sum = (sum & 0xFFFF)+(sum >> 16);
        }
        // build 1's complement:
        return( (uint16_t) sum ^ 0xFFFF);
}
     9a6:	c9 01       	movw	r24, r18
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	ff 90       	pop	r15
     9b2:	ef 90       	pop	r14
     9b4:	df 90       	pop	r13
     9b6:	cf 90       	pop	r12
     9b8:	08 95       	ret

000009ba <init_ip_arp_udp_tcp>:

// This initializes the web server
// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint16_t port){
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	ec 01       	movw	r28, r24
        uint8_t i=0;
        wwwport_h=(port>>8)&0xff;
     9c0:	50 93 94 00 	sts	0x0094, r21
        wwwport_l=(port&0xff);
     9c4:	40 93 81 00 	sts	0x0081, r20
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
        while(i<4){
                ipaddr[i]=myip[i];
     9cc:	f9 01       	movw	r30, r18
     9ce:	e2 54       	subi	r30, 0x42	; 66
     9d0:	ff 4f       	sbci	r31, 0xFF	; 255
     9d2:	db 01       	movw	r26, r22
     9d4:	a2 0f       	add	r26, r18
     9d6:	b3 1f       	adc	r27, r19
     9d8:	8c 91       	ld	r24, X
     9da:	80 83       	st	Z, r24
     9dc:	2f 5f       	subi	r18, 0xFF	; 255
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint16_t port){
        uint8_t i=0;
        wwwport_h=(port>>8)&0xff;
        wwwport_l=(port&0xff);
        while(i<4){
     9e0:	24 30       	cpi	r18, 0x04	; 4
     9e2:	31 05       	cpc	r19, r1
     9e4:	99 f7       	brne	.-26     	; 0x9cc <init_ip_arp_udp_tcp+0x12>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
                macaddr[i]=mymac[i];
     9ea:	f9 01       	movw	r30, r18
     9ec:	e8 54       	subi	r30, 0x48	; 72
     9ee:	ff 4f       	sbci	r31, 0xFF	; 255
     9f0:	de 01       	movw	r26, r28
     9f2:	a2 0f       	add	r26, r18
     9f4:	b3 1f       	adc	r27, r19
     9f6:	8c 91       	ld	r24, X
     9f8:	80 83       	st	Z, r24
     9fa:	2f 5f       	subi	r18, 0xFF	; 255
     9fc:	3f 4f       	sbci	r19, 0xFF	; 255
        while(i<4){
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
     9fe:	26 30       	cpi	r18, 0x06	; 6
     a00:	31 05       	cpc	r19, r1
     a02:	99 f7       	brne	.-26     	; 0x9ea <init_ip_arp_udp_tcp+0x30>
                macaddr[i]=mymac[i];
                i++;
        }
}
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <check_ip_message_is_from>:

uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
     a0a:	dc 01       	movw	r26, r24
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	30 e0       	ldi	r19, 0x00	; 0
        uint8_t i=0;
        while(i<4){
                if(buf[IP_SRC_P+i]!=ip[i]){
     a10:	fb 01       	movw	r30, r22
     a12:	e2 0f       	add	r30, r18
     a14:	f3 1f       	adc	r31, r19
     a16:	5a 96       	adiw	r26, 0x1a	; 26
     a18:	9c 91       	ld	r25, X
     a1a:	5a 97       	sbiw	r26, 0x1a	; 26
     a1c:	80 81       	ld	r24, Z
     a1e:	98 17       	cp	r25, r24
     a20:	11 f0       	breq	.+4      	; 0xa26 <check_ip_message_is_from+0x1c>
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	08 95       	ret
     a26:	2f 5f       	subi	r18, 0xFF	; 255
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	11 96       	adiw	r26, 0x01	; 1
}

uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
        uint8_t i=0;
        while(i<4){
     a2c:	24 30       	cpi	r18, 0x04	; 4
     a2e:	31 05       	cpc	r19, r1
     a30:	79 f7       	brne	.-34     	; 0xa10 <check_ip_message_is_from+0x6>
     a32:	81 e0       	ldi	r24, 0x01	; 1
                        return(0);
                }
                i++;
        }
        return(1);
}
     a34:	08 95       	ret

00000a36 <eth_type_is_arp_and_my_ip>:

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
     a36:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //  
        if (len<41){
     a38:	69 32       	cpi	r22, 0x29	; 41
     a3a:	71 05       	cpc	r23, r1
     a3c:	b0 f0       	brcs	.+44     	; 0xa6a <eth_type_is_arp_and_my_ip+0x34>
                return(0);
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
     a3e:	84 85       	ldd	r24, Z+12	; 0x0c
     a40:	88 30       	cpi	r24, 0x08	; 8
     a42:	99 f4       	brne	.+38     	; 0xa6a <eth_type_is_arp_and_my_ip+0x34>
     a44:	85 85       	ldd	r24, Z+13	; 0x0d
     a46:	86 30       	cpi	r24, 0x06	; 6
     a48:	81 f4       	brne	.+32     	; 0xa6a <eth_type_is_arp_and_my_ip+0x34>
     a4a:	df 01       	movw	r26, r30
     a4c:	96 96       	adiw	r26, 0x26	; 38
     a4e:	ee eb       	ldi	r30, 0xBE	; 190
     a50:	f0 e0       	ldi	r31, 0x00	; 0
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
     a52:	9c 91       	ld	r25, X
     a54:	80 81       	ld	r24, Z
     a56:	98 17       	cp	r25, r24
     a58:	41 f4       	brne	.+16     	; 0xa6a <eth_type_is_arp_and_my_ip+0x34>
     a5a:	11 96       	adiw	r26, 0x01	; 1
     a5c:	31 96       	adiw	r30, 0x01	; 1
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	e2 3c       	cpi	r30, 0xC2	; 194
     a62:	f8 07       	cpc	r31, r24
     a64:	b1 f7       	brne	.-20     	; 0xa52 <eth_type_is_arp_and_my_ip+0x1c>
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	08 95       	ret
     a6a:	80 e0       	ldi	r24, 0x00	; 0
                        return(0);
                }
                i++;
        }
        return(1);
}
     a6c:	08 95       	ret

00000a6e <eth_type_is_ip_and_my_ip>:

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
     a6e:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
     a70:	6a 32       	cpi	r22, 0x2A	; 42
     a72:	71 05       	cpc	r23, r1
     a74:	d0 f0       	brcs	.+52     	; 0xaaa <eth_type_is_ip_and_my_ip+0x3c>
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
     a76:	84 85       	ldd	r24, Z+12	; 0x0c
     a78:	88 30       	cpi	r24, 0x08	; 8
     a7a:	b9 f4       	brne	.+46     	; 0xaaa <eth_type_is_ip_and_my_ip+0x3c>
     a7c:	85 85       	ldd	r24, Z+13	; 0x0d
     a7e:	88 23       	and	r24, r24
     a80:	a1 f4       	brne	.+40     	; 0xaaa <eth_type_is_ip_and_my_ip+0x3c>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
                return(0);
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
     a82:	86 85       	ldd	r24, Z+14	; 0x0e
     a84:	85 34       	cpi	r24, 0x45	; 69
     a86:	89 f4       	brne	.+34     	; 0xaaa <eth_type_is_ip_and_my_ip+0x3c>
     a88:	df 01       	movw	r26, r30
     a8a:	ee eb       	ldi	r30, 0xBE	; 190
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
                if(buf[IP_DST_P+i]!=ipaddr[i]){
     a8e:	5e 96       	adiw	r26, 0x1e	; 30
     a90:	9c 91       	ld	r25, X
     a92:	5e 97       	sbiw	r26, 0x1e	; 30
     a94:	80 81       	ld	r24, Z
     a96:	98 17       	cp	r25, r24
     a98:	41 f4       	brne	.+16     	; 0xaaa <eth_type_is_ip_and_my_ip+0x3c>
     a9a:	11 96       	adiw	r26, 0x01	; 1
     a9c:	31 96       	adiw	r30, 0x01	; 1
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	e2 3c       	cpi	r30, 0xC2	; 194
     aa2:	f8 07       	cpc	r31, r24
     aa4:	a1 f7       	brne	.-24     	; 0xa8e <eth_type_is_ip_and_my_ip+0x20>
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	08 95       	ret
     aaa:	80 e0       	ldi	r24, 0x00	; 0
                        return(0);
                }
                i++;
        }
        return(1);
}
     aac:	08 95       	ret

00000aae <make_eth>:
// make a return eth header from a received eth packet
void make_eth(uint8_t *buf)
{
     aae:	fc 01       	movw	r30, r24
     ab0:	a8 eb       	ldi	r26, 0xB8	; 184
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     ab4:	86 81       	ldd	r24, Z+6	; 0x06
     ab6:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     ab8:	8d 91       	ld	r24, X+
     aba:	86 83       	std	Z+6, r24	; 0x06
     abc:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	ae 3b       	cpi	r26, 0xBE	; 190
     ac2:	b8 07       	cpc	r27, r24
     ac4:	b9 f7       	brne	.-18     	; 0xab4 <make_eth+0x6>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
}
     ac6:	08 95       	ret

00000ac8 <fill_ip_hdr_checksum>:
void fill_ip_hdr_checksum(uint8_t *buf)
{
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	8c 01       	movw	r16, r24
        uint16_t ck;
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
     ace:	fc 01       	movw	r30, r24
     ad0:	10 8e       	std	Z+24, r1	; 0x18
        buf[IP_CHECKSUM_P+1]=0;
     ad2:	11 8e       	std	Z+25, r1	; 0x19
        buf[IP_FLAGS_P]=0x40; // don't fragment
     ad4:	80 e4       	ldi	r24, 0x40	; 64
     ad6:	84 8b       	std	Z+20, r24	; 0x14
        buf[IP_FLAGS_P+1]=0;  // fragement offset
     ad8:	15 8a       	std	Z+21, r1	; 0x15
        buf[IP_TTL_P]=64; // ttl
     ada:	86 8b       	std	Z+22, r24	; 0x16
        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
     adc:	c8 01       	movw	r24, r16
     ade:	0e 96       	adiw	r24, 0x0e	; 14
     ae0:	64 e1       	ldi	r22, 0x14	; 20
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	0e 94 62 04 	call	0x8c4	; 0x8c4 <checksum>
        buf[IP_CHECKSUM_P]=ck>>8;
     aea:	f8 01       	movw	r30, r16
     aec:	90 8f       	std	Z+24, r25	; 0x18
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
     aee:	81 8f       	std	Z+25, r24	; 0x19
}
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	08 95       	ret

00000af6 <make_ip>:

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
     af6:	ac 01       	movw	r20, r24
     af8:	fc 01       	movw	r30, r24
     afa:	ae eb       	ldi	r26, 0xBE	; 190
     afc:	b0 e0       	ldi	r27, 0x00	; 0
        uint8_t i=0;
        while(i<4){
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
     afe:	82 8d       	ldd	r24, Z+26	; 0x1a
     b00:	86 8f       	std	Z+30, r24	; 0x1e
                buf[IP_SRC_P+i]=ipaddr[i];
     b02:	8d 91       	ld	r24, X+
     b04:	82 8f       	std	Z+26, r24	; 0x1a
     b06:	31 96       	adiw	r30, 0x01	; 1

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	a2 3c       	cpi	r26, 0xC2	; 194
     b0c:	b8 07       	cpc	r27, r24
     b0e:	b9 f7       	brne	.-18     	; 0xafe <make_ip+0x8>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        fill_ip_hdr_checksum(buf);
     b10:	ca 01       	movw	r24, r20
     b12:	0e 94 64 05 	call	0xac8	; 0xac8 <fill_ip_hdr_checksum>
}
     b16:	08 95       	ret

00000b18 <step_seq>:

// swap seq and ack number and count ack number up
void step_seq(uint8_t *buf,uint16_t rel_ack_num,uint8_t cp_seq)
{
     b18:	fc 01       	movw	r30, r24
     b1a:	b9 96       	adiw	r30, 0x29	; 41
     b1c:	94 e0       	ldi	r25, 0x04	; 4
        uint8_t tseq;
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
                rel_ack_num=buf[TCP_SEQ_H_P+i-1]+rel_ack_num;
     b1e:	80 81       	ld	r24, Z
     b20:	68 0f       	add	r22, r24
     b22:	71 1d       	adc	r23, r1
                tseq=buf[TCP_SEQACK_H_P+i-1];
     b24:	84 81       	ldd	r24, Z+4	; 0x04
                buf[TCP_SEQACK_H_P+i-1]=0xff&rel_ack_num;
     b26:	64 83       	std	Z+4, r22	; 0x04
                if (cp_seq){
     b28:	44 23       	and	r20, r20
     b2a:	11 f0       	breq	.+4      	; 0xb30 <step_seq+0x18>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
     b2c:	80 83       	st	Z, r24
     b2e:	01 c0       	rjmp	.+2      	; 0xb32 <step_seq+0x1a>
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset value
     b30:	10 82       	st	Z, r1
                }
                rel_ack_num=rel_ack_num>>8;
                i--;
     b32:	91 50       	subi	r25, 0x01	; 1
     b34:	31 97       	sbiw	r30, 0x01	; 1
        uint8_t i;
        uint8_t tseq;
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
     b36:	99 23       	and	r25, r25
     b38:	19 f0       	breq	.+6      	; 0xb40 <step_seq+0x28>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset value
                }
                rel_ack_num=rel_ack_num>>8;
     b3a:	67 2f       	mov	r22, r23
     b3c:	77 27       	eor	r23, r23
     b3e:	ef cf       	rjmp	.-34     	; 0xb1e <step_seq+0x6>
     b40:	08 95       	ret

00000b42 <make_tcphead>:
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t cp_seq)
{
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	8c 01       	movw	r16, r24
        uint8_t i;
        // copy ports:
        i=buf[TCP_DST_PORT_H_P];
     b48:	fc 01       	movw	r30, r24
     b4a:	94 a1       	ldd	r25, Z+36	; 0x24
        buf[TCP_DST_PORT_H_P]=buf[TCP_SRC_PORT_H_P];
     b4c:	82 a1       	ldd	r24, Z+34	; 0x22
     b4e:	84 a3       	std	Z+36, r24	; 0x24
        buf[TCP_SRC_PORT_H_P]=i;
     b50:	92 a3       	std	Z+34, r25	; 0x22
        //
        i=buf[TCP_DST_PORT_L_P];
     b52:	95 a1       	ldd	r25, Z+37	; 0x25
        buf[TCP_DST_PORT_L_P]=buf[TCP_SRC_PORT_L_P];
     b54:	83 a1       	ldd	r24, Z+35	; 0x23
     b56:	85 a3       	std	Z+37, r24	; 0x25
        buf[TCP_SRC_PORT_L_P]=i;
     b58:	93 a3       	std	Z+35, r25	; 0x23
        step_seq(buf,rel_ack_num,cp_seq);
     b5a:	c8 01       	movw	r24, r16
     b5c:	0e 94 8c 05 	call	0xb18	; 0xb18 <step_seq>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
     b60:	f8 01       	movw	r30, r16
     b62:	12 aa       	std	Z+50, r1	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
     b64:	13 aa       	std	Z+51, r1	; 0x33
        // no options:
        // 20 bytes:
        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes.
        // E.g 20 bytes: 20/4=6 => 0x50=header len field
        buf[TCP_HEADER_LEN_P]=0x50;
     b66:	80 e5       	ldi	r24, 0x50	; 80
     b68:	86 a7       	std	Z+46, r24	; 0x2e
}
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	08 95       	ret

00000b70 <make_arp_answer_from_request>:

void make_arp_answer_from_request(uint8_t *buf)
{
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	ac 01       	movw	r20, r24
     b76:	ec 01       	movw	r28, r24
     b78:	28 eb       	ldi	r18, 0xB8	; 184
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	fc 01       	movw	r30, r24
     b7e:	d9 01       	movw	r26, r18
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     b80:	86 81       	ldd	r24, Z+6	; 0x06
     b82:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     b84:	8d 91       	ld	r24, X+
     b86:	86 83       	std	Z+6, r24	; 0x06
     b88:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	ae 3b       	cpi	r26, 0xBE	; 190
     b8e:	b8 07       	cpc	r27, r24
     b90:	b9 f7       	brne	.-18     	; 0xb80 <make_arp_answer_from_request+0x10>
void make_arp_answer_from_request(uint8_t *buf)
{
        uint8_t i=0;
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
     b92:	fa 01       	movw	r30, r20
     b94:	14 8a       	std	Z+20, r1	; 0x14
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
     b96:	82 e0       	ldi	r24, 0x02	; 2
     b98:	85 8b       	std	Z+21, r24	; 0x15
        // fill the mac addresses:
        while(i<6){
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
     b9a:	8e 89       	ldd	r24, Y+22	; 0x16
     b9c:	88 a3       	std	Y+32, r24	; 0x20
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
     b9e:	f9 01       	movw	r30, r18
     ba0:	81 91       	ld	r24, Z+
     ba2:	9f 01       	movw	r18, r30
     ba4:	8e 8b       	std	Y+22, r24	; 0x16
     ba6:	21 96       	adiw	r28, 0x01	; 1
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
        // fill the mac addresses:
        while(i<6){
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	2e 3b       	cpi	r18, 0xBE	; 190
     bac:	3f 07       	cpc	r19, r31
     bae:	a9 f7       	brne	.-22     	; 0xb9a <make_arp_answer_from_request+0x2a>
     bb0:	fa 01       	movw	r30, r20
     bb2:	7c 96       	adiw	r30, 0x1c	; 28
     bb4:	ae eb       	ldi	r26, 0xBE	; 190
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
     bb8:	80 81       	ld	r24, Z
     bba:	82 87       	std	Z+10, r24	; 0x0a
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
     bbc:	8d 91       	ld	r24, X+
     bbe:	81 93       	st	Z+, r24
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	a2 3c       	cpi	r26, 0xC2	; 194
     bc4:	b8 07       	cpc	r27, r24
     bc6:	c1 f7       	brne	.-16     	; 0xbb8 <make_arp_answer_from_request+0x48>
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf); 
     bc8:	8a e2       	ldi	r24, 0x2A	; 42
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	ba 01       	movw	r22, r20
     bce:	0e 94 56 03 	call	0x6ac	; 0x6ac <enc28j60PacketSend>
}
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <make_echo_reply_from_request>:

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	ec 01       	movw	r28, r24
     be2:	8b 01       	movw	r16, r22
     be4:	fc 01       	movw	r30, r24
     be6:	a8 eb       	ldi	r26, 0xB8	; 184
     be8:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     bea:	86 81       	ldd	r24, Z+6	; 0x06
     bec:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     bee:	8d 91       	ld	r24, X+
     bf0:	86 83       	std	Z+6, r24	; 0x06
     bf2:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	ae 3b       	cpi	r26, 0xBE	; 190
     bf8:	b8 07       	cpc	r27, r24
     bfa:	b9 f7       	brne	.-18     	; 0xbea <make_echo_reply_from_request+0x12>
}

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
        make_eth(buf);
        make_ip(buf);
     bfc:	ce 01       	movw	r24, r28
     bfe:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <make_ip>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
     c02:	1a a2       	std	Y+34, r1	; 0x22
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
     c04:	8c a1       	ldd	r24, Y+36	; 0x24
     c06:	88 3f       	cpi	r24, 0xF8	; 248
     c08:	18 f0       	brcs	.+6      	; 0xc10 <make_echo_reply_from_request+0x38>
                buf[ICMP_CHECKSUM_P+1]++;
     c0a:	8d a1       	ldd	r24, Y+37	; 0x25
     c0c:	8f 5f       	subi	r24, 0xFF	; 255
     c0e:	8d a3       	std	Y+37, r24	; 0x25
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
     c10:	8c a1       	ldd	r24, Y+36	; 0x24
     c12:	88 5f       	subi	r24, 0xF8	; 248
     c14:	8c a3       	std	Y+36, r24	; 0x24
        //
        enc28j60PacketSend(len,buf);
     c16:	c8 01       	movw	r24, r16
     c18:	be 01       	movw	r22, r28
     c1a:	0e 94 56 03 	call	0x6ac	; 0x6ac <enc28j60PacketSend>
}
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	08 95       	ret

00000c28 <make_udp_reply_from_request>:

// you can send a max of 220 bytes of data
void make_udp_reply_from_request(uint8_t *buf,char *data,uint8_t datalen,uint16_t port)
{
     c28:	df 92       	push	r13
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	ec 01       	movw	r28, r24
     c38:	7b 01       	movw	r14, r22
     c3a:	d2 2e       	mov	r13, r18
     c3c:	13 2f       	mov	r17, r19
     c3e:	fc 01       	movw	r30, r24
     c40:	a8 eb       	ldi	r26, 0xB8	; 184
     c42:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     c44:	86 81       	ldd	r24, Z+6	; 0x06
     c46:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     c48:	8d 91       	ld	r24, X+
     c4a:	86 83       	std	Z+6, r24	; 0x06
     c4c:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	ae 3b       	cpi	r26, 0xBE	; 190
     c52:	b8 07       	cpc	r27, r24
     c54:	b9 f7       	brne	.-18     	; 0xc44 <make_udp_reply_from_request+0x1c>
     c56:	04 2f       	mov	r16, r20
     c58:	4d 3d       	cpi	r20, 0xDD	; 221
     c5a:	08 f0       	brcs	.+2      	; 0xc5e <make_udp_reply_from_request+0x36>
     c5c:	0c ed       	ldi	r16, 0xDC	; 220
        make_eth(buf);
        if (datalen>220){
                datalen=220;
        }
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
     c5e:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
     c60:	04 5e       	subi	r16, 0xE4	; 228
     c62:	09 8b       	std	Y+17, r16	; 0x11
        make_ip(buf);
     c64:	ce 01       	movw	r24, r28
     c66:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <make_ip>
        // send to port:
        //buf[UDP_DST_PORT_H_P]=port>>8;
        //buf[UDP_DST_PORT_L_P]=port & 0xff;
        // sent to port of sender and use "port" as own source:
        buf[UDP_DST_PORT_H_P]=buf[UDP_SRC_PORT_H_P];
     c6a:	8a a1       	ldd	r24, Y+34	; 0x22
     c6c:	8c a3       	std	Y+36, r24	; 0x24
        buf[UDP_DST_PORT_L_P]= buf[UDP_SRC_PORT_L_P];
     c6e:	8b a1       	ldd	r24, Y+35	; 0x23
     c70:	8d a3       	std	Y+37, r24	; 0x25
        buf[UDP_SRC_PORT_H_P]=port>>8;
     c72:	1a a3       	std	Y+34, r17	; 0x22
        buf[UDP_SRC_PORT_L_P]=port & 0xff;
     c74:	db a2       	std	Y+35, r13	; 0x23
        // calculte the udp length:
        buf[UDP_LEN_H_P]=0;
     c76:	1e a2       	std	Y+38, r1	; 0x26
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
     c78:	04 51       	subi	r16, 0x14	; 20
     c7a:	0f a3       	std	Y+39, r16	; 0x27
     c7c:	08 50       	subi	r16, 0x08	; 8
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
     c7e:	18 a6       	std	Y+40, r1	; 0x28
        buf[UDP_CHECKSUM_L_P]=0;
     c80:	19 a6       	std	Y+41, r1	; 0x29
     c82:	de 01       	movw	r26, r28
     c84:	9a 96       	adiw	r26, 0x2a	; 42
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	07 c0       	rjmp	.+14     	; 0xc9a <make_udp_reply_from_request+0x72>
        // copy the data:
        while(i<datalen){
                buf[UDP_DATA_P+i]=data[i];
     c8c:	f7 01       	movw	r30, r14
     c8e:	e2 0f       	add	r30, r18
     c90:	f3 1f       	adc	r31, r19
     c92:	80 81       	ld	r24, Z
     c94:	8d 93       	st	X+, r24
     c96:	2f 5f       	subi	r18, 0xFF	; 255
     c98:	3f 4f       	sbci	r19, 0xFF	; 255
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
        buf[UDP_CHECKSUM_L_P]=0;
        // copy the data:
        while(i<datalen){
     c9a:	20 17       	cp	r18, r16
     c9c:	b8 f3       	brcs	.-18     	; 0xc8c <make_udp_reply_from_request+0x64>
                buf[UDP_DATA_P+i]=data[i];
                i++;
        }
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
     c9e:	10 e0       	ldi	r17, 0x00	; 0
     ca0:	00 5f       	subi	r16, 0xF0	; 240
     ca2:	1f 4f       	sbci	r17, 0xFF	; 255
     ca4:	ce 01       	movw	r24, r28
     ca6:	4a 96       	adiw	r24, 0x1a	; 26
     ca8:	b8 01       	movw	r22, r16
     caa:	41 e0       	ldi	r20, 0x01	; 1
     cac:	0e 94 62 04 	call	0x8c4	; 0x8c4 <checksum>
        buf[UDP_CHECKSUM_H_P]=ck>>8;
     cb0:	98 a7       	std	Y+40, r25	; 0x28
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
     cb2:	89 a7       	std	Y+41, r24	; 0x29
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
     cb4:	c8 01       	movw	r24, r16
     cb6:	4a 96       	adiw	r24, 0x1a	; 26
     cb8:	be 01       	movw	r22, r28
     cba:	0e 94 56 03 	call	0x6ac	; 0x6ac <enc28j60PacketSend>
}
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	ff 90       	pop	r15
     cc8:	ef 90       	pop	r14
     cca:	df 90       	pop	r13
     ccc:	08 95       	ret

00000cce <make_tcp_synack_from_syn>:

// this is for the server not the client:
void make_tcp_synack_from_syn(uint8_t *buf)
{
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	ec 01       	movw	r28, r24
     cd4:	fc 01       	movw	r30, r24
     cd6:	a8 eb       	ldi	r26, 0xB8	; 184
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     cda:	86 81       	ldd	r24, Z+6	; 0x06
     cdc:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     cde:	8d 91       	ld	r24, X+
     ce0:	86 83       	std	Z+6, r24	; 0x06
     ce2:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	ae 3b       	cpi	r26, 0xBE	; 190
     ce8:	b8 07       	cpc	r27, r24
     cea:	b9 f7       	brne	.-18     	; 0xcda <make_tcp_synack_from_syn+0xc>
{
        uint16_t ck;
        make_eth(buf);
        // total length field in the IP header must be set:
        // 20 bytes IP + 24 bytes (20tcp+4tcp options)
        buf[IP_TOTLEN_H_P]=0;
     cec:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
     cee:	8c e2       	ldi	r24, 0x2C	; 44
     cf0:	89 8b       	std	Y+17, r24	; 0x11
        make_ip(buf);
     cf2:	ce 01       	movw	r24, r28
     cf4:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <make_ip>
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYNACK_V;
     cf8:	82 e1       	ldi	r24, 0x12	; 18
     cfa:	8f a7       	std	Y+47, r24	; 0x2f
        make_tcphead(buf,1,0);
     cfc:	ce 01       	movw	r24, r28
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	0e 94 a1 05 	call	0xb42	; 0xb42 <make_tcphead>
        // put an inital seq number
        buf[TCP_SEQ_H_P+0]= 0;
     d08:	1e a2       	std	Y+38, r1	; 0x26
        buf[TCP_SEQ_H_P+1]= 0;
     d0a:	1f a2       	std	Y+39, r1	; 0x27
        // we step only the second byte, this allows us to send packts 
        // with 255 bytes, 512  or 765 (step by 3) without generating
        // overlapping numbers.
        buf[TCP_SEQ_H_P+2]= seqnum; 
     d0c:	80 91 82 00 	lds	r24, 0x0082
     d10:	88 a7       	std	Y+40, r24	; 0x28
        buf[TCP_SEQ_H_P+3]= 0;
     d12:	19 a6       	std	Y+41, r1	; 0x29
        // step the inititial seq num by something we will not use
        // during this tcp session:
        seqnum+=3;
     d14:	8d 5f       	subi	r24, 0xFD	; 253
     d16:	80 93 82 00 	sts	0x0082, r24
        // add an mss options field with MSS to 1280:
        // 1280 in hex is 0x500
        buf[TCP_OPTIONS_P]=2;
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	8e ab       	std	Y+54, r24	; 0x36
        buf[TCP_OPTIONS_P+1]=4;
     d1e:	84 e0       	ldi	r24, 0x04	; 4
     d20:	8f ab       	std	Y+55, r24	; 0x37
        buf[TCP_OPTIONS_P+2]=0x05;
     d22:	95 e0       	ldi	r25, 0x05	; 5
     d24:	98 af       	std	Y+56, r25	; 0x38
        buf[TCP_OPTIONS_P+3]=0x0;
     d26:	19 ae       	std	Y+57, r1	; 0x39
        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes.
        // E.g 24 bytes: 24/4=6 => 0x60=header len field
        buf[TCP_HEADER_LEN_P]=0x60;
     d28:	80 e6       	ldi	r24, 0x60	; 96
     d2a:	8e a7       	std	Y+46, r24	; 0x2e
        // here we must just be sure that the web browser contacting us
        // will send only one get packet
        buf[TCP_WIN_SIZE]=0x5; // 1400=0x578
     d2c:	98 ab       	std	Y+48, r25	; 0x30
        buf[TCP_WIN_SIZE+1]=0x78;
     d2e:	88 e7       	ldi	r24, 0x78	; 120
     d30:	89 ab       	std	Y+49, r24	; 0x31
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + 4 (one option: mss)
        ck=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+4,2);
     d32:	ce 01       	movw	r24, r28
     d34:	4a 96       	adiw	r24, 0x1a	; 26
     d36:	60 e2       	ldi	r22, 0x20	; 32
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	42 e0       	ldi	r20, 0x02	; 2
     d3c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <checksum>
        buf[TCP_CHECKSUM_H_P]=ck>>8;
     d40:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
     d42:	8b ab       	std	Y+51, r24	; 0x33
        // add 4 for option mss:
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN,buf);
     d44:	8a e3       	ldi	r24, 0x3A	; 58
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	be 01       	movw	r22, r28
     d4a:	0e 94 56 03 	call	0x6ac	; 0x6ac <enc28j60PacketSend>
}
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	08 95       	ret

00000d54 <get_tcp_data_len>:

// do some basic length calculations 
uint16_t get_tcp_data_len(uint8_t *buf)
{
     d54:	fc 01       	movw	r30, r24
        int16_t i;
        i=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
     d56:	90 89       	ldd	r25, Z+16	; 0x10
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	21 89       	ldd	r18, Z+17	; 0x11
     d5c:	42 2f       	mov	r20, r18
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	48 2b       	or	r20, r24
     d62:	59 2b       	or	r21, r25
        i-=IP_HEADER_LEN;
     d64:	26 a5       	ldd	r18, Z+46	; 0x2e
     d66:	82 2f       	mov	r24, r18
     d68:	82 95       	swap	r24
     d6a:	8f 70       	andi	r24, 0x0F	; 15
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	48 1b       	sub	r20, r24
     d78:	59 0b       	sbc	r21, r25
        i-=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
     d7a:	44 51       	subi	r20, 0x14	; 20
     d7c:	50 40       	sbci	r21, 0x00	; 0
     d7e:	57 ff       	sbrs	r21, 7
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <get_tcp_data_len+0x32>
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	50 e0       	ldi	r21, 0x00	; 0
        if (i<=0){
                i=0;
        }
        return((uint16_t)i);
}
     d86:	ca 01       	movw	r24, r20
     d88:	08 95       	ret

00000d8a <fill_tcp_data_p>:

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data_p(uint8_t *buf,uint16_t pos, const prog_char *progmem_s)
{
     d8a:	6a 5c       	subi	r22, 0xCA	; 202
     d8c:	7f 4f       	sbci	r23, 0xFF	; 255
     d8e:	dc 01       	movw	r26, r24
     d90:	a6 0f       	add	r26, r22
     d92:	b7 1f       	adc	r27, r23
     d94:	66 53       	subi	r22, 0x36	; 54
     d96:	70 40       	sbci	r23, 0x00	; 0
     d98:	03 c0       	rjmp	.+6      	; 0xda0 <fill_tcp_data_p+0x16>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     d9a:	8d 93       	st	X+, r24
                pos++;
     d9c:	6f 5f       	subi	r22, 0xFF	; 255
     d9e:	7f 4f       	sbci	r23, 0xFF	; 255
     da0:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     da2:	4f 5f       	subi	r20, 0xFF	; 255
     da4:	5f 4f       	sbci	r21, 0xFF	; 255
     da6:	84 91       	lpm	r24, Z+
     da8:	88 23       	and	r24, r24
     daa:	b9 f7       	brne	.-18     	; 0xd9a <fill_tcp_data_p+0x10>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
                pos++;
        }
        return(pos);
}
     dac:	cb 01       	movw	r24, r22
     dae:	08 95       	ret

00000db0 <fill_tcp_data_len>:

// fill a binary string of len data into the tcp packet
uint16_t fill_tcp_data_len(uint8_t *buf,uint16_t pos, const uint8_t *s, uint8_t len)
{
     db0:	da 01       	movw	r26, r20
     db2:	6a 5c       	subi	r22, 0xCA	; 202
     db4:	7f 4f       	sbci	r23, 0xFF	; 255
     db6:	fc 01       	movw	r30, r24
     db8:	e6 0f       	add	r30, r22
     dba:	f7 1f       	adc	r31, r23
     dbc:	66 53       	subi	r22, 0x36	; 54
     dbe:	70 40       	sbci	r23, 0x00	; 0
     dc0:	92 2f       	mov	r25, r18
     dc2:	03 c0       	rjmp	.+6      	; 0xdca <fill_tcp_data_len+0x1a>
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
     dc4:	8d 91       	ld	r24, X+
     dc6:	81 93       	st	Z+, r24
                pos++;
                s++;
                len--;
     dc8:	91 50       	subi	r25, 0x01	; 1
uint16_t fill_tcp_data_len(uint8_t *buf,uint16_t pos, const uint8_t *s, uint8_t len)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
     dca:	99 23       	and	r25, r25
     dcc:	d9 f7       	brne	.-10     	; 0xdc4 <fill_tcp_data_len+0x14>
     dce:	cb 01       	movw	r24, r22
     dd0:	82 0f       	add	r24, r18
     dd2:	91 1d       	adc	r25, r1
                pos++;
                s++;
                len--;
        }
        return(pos);
}
     dd4:	08 95       	ret

00000dd6 <make_tcp_ack_from_any>:
}

// Make just an ack packet with no tcp data inside
// This will modify the eth/ip/tcp header 
void make_tcp_ack_from_any(uint8_t *buf,int16_t datlentoack,uint8_t addflags)
{
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	ec 01       	movw	r28, r24
     ddc:	fc 01       	movw	r30, r24
     dde:	a8 eb       	ldi	r26, 0xB8	; 184
     de0:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     de2:	86 81       	ldd	r24, Z+6	; 0x06
     de4:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     de6:	8d 91       	ld	r24, X+
     de8:	86 83       	std	Z+6, r24	; 0x06
     dea:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	ae 3b       	cpi	r26, 0xBE	; 190
     df0:	b8 07       	cpc	r27, r24
     df2:	b9 f7       	brne	.-18     	; 0xde2 <make_tcp_ack_from_any+0xc>
void make_tcp_ack_from_any(uint8_t *buf,int16_t datlentoack,uint8_t addflags)
{
        uint16_t j;
        make_eth(buf);
        // fill the header:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|addflags;
     df4:	84 2f       	mov	r24, r20
     df6:	80 61       	ori	r24, 0x10	; 16
     df8:	8f a7       	std	Y+47, r24	; 0x2f
        if (addflags==TCP_FLAGS_RST_V){
     dfa:	44 30       	cpi	r20, 0x04	; 4
     dfc:	29 f0       	breq	.+10     	; 0xe08 <make_tcp_ack_from_any+0x32>
                make_tcphead(buf,datlentoack,1); 
        }else{
                if (datlentoack==0){
     dfe:	61 15       	cp	r22, r1
     e00:	71 05       	cpc	r23, r1
     e02:	11 f4       	brne	.+4      	; 0xe08 <make_tcp_ack_from_any+0x32>
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	70 e0       	ldi	r23, 0x00	; 0
                        // if there is no data then we must still acknoledge one packet
                        datlentoack=1;
                }
                // normal case, ack the data:
                make_tcphead(buf,datlentoack,1); // no options
     e08:	ce 01       	movw	r24, r28
     e0a:	41 e0       	ldi	r20, 0x01	; 1
     e0c:	0e 94 a1 05 	call	0xb42	; 0xb42 <make_tcphead>
        }
        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) 
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
        buf[IP_TOTLEN_H_P]=j>>8;
     e10:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=j& 0xff;
     e12:	88 e2       	ldi	r24, 0x28	; 40
     e14:	89 8b       	std	Y+17, r24	; 0x11
        make_ip(buf);
     e16:	ce 01       	movw	r24, r28
     e18:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <make_ip>
        // use a low window size otherwise we have to have
        // timers and can not just react on every packet.
        buf[TCP_WIN_SIZE]=0x4; // 1024=0x400, 1280=0x500 2048=0x800 768=0x300
     e1c:	84 e0       	ldi	r24, 0x04	; 4
     e1e:	88 ab       	std	Y+48, r24	; 0x30
        buf[TCP_WIN_SIZE+1]=0;
     e20:	19 aa       	std	Y+49, r1	; 0x31
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN,2);
     e22:	ce 01       	movw	r24, r28
     e24:	4a 96       	adiw	r24, 0x1a	; 26
     e26:	6c e1       	ldi	r22, 0x1C	; 28
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	42 e0       	ldi	r20, 0x02	; 2
     e2c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
     e30:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
     e32:	8b ab       	std	Y+51, r24	; 0x33
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN,buf);
     e34:	86 e3       	ldi	r24, 0x36	; 54
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	be 01       	movw	r22, r28
     e3a:	0e 94 56 03 	call	0x6ac	; 0x6ac <enc28j60PacketSend>
}
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	08 95       	ret

00000e44 <make_tcp_ack_with_data_noflags>:
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
// You must set TCP_FLAGS before calling this
void make_tcp_ack_with_data_noflags(uint8_t *buf,uint16_t dlen)
{
     e44:	ef 92       	push	r14
     e46:	ff 92       	push	r15
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	8c 01       	movw	r16, r24
     e4e:	7b 01       	movw	r14, r22
        uint16_t j;
        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) + len of data
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
     e50:	cb 01       	movw	r24, r22
     e52:	88 96       	adiw	r24, 0x28	; 40
        buf[IP_TOTLEN_H_P]=j>>8;
     e54:	f8 01       	movw	r30, r16
     e56:	90 8b       	std	Z+16, r25	; 0x10
        buf[IP_TOTLEN_L_P]=j& 0xff;
     e58:	81 8b       	std	Z+17, r24	; 0x11
        fill_ip_hdr_checksum(buf);
     e5a:	c8 01       	movw	r24, r16
     e5c:	0e 94 64 05 	call	0xac8	; 0xac8 <fill_ip_hdr_checksum>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
     e60:	f8 01       	movw	r30, r16
     e62:	12 aa       	std	Z+50, r1	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
     e64:	13 aa       	std	Z+51, r1	; 0x33
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+dlen,2);
     e66:	8c e1       	ldi	r24, 0x1C	; 28
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	e8 0e       	add	r14, r24
     e6c:	f9 1e       	adc	r15, r25
     e6e:	c8 01       	movw	r24, r16
     e70:	4a 96       	adiw	r24, 0x1a	; 26
     e72:	b7 01       	movw	r22, r14
     e74:	42 e0       	ldi	r20, 0x02	; 2
     e76:	0e 94 62 04 	call	0x8c4	; 0x8c4 <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
     e7a:	f8 01       	movw	r30, r16
     e7c:	92 ab       	std	Z+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
     e7e:	83 ab       	std	Z+51, r24	; 0x33
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
     e80:	c7 01       	movw	r24, r14
     e82:	4a 96       	adiw	r24, 0x1a	; 26
     e84:	b8 01       	movw	r22, r16
     e86:	0e 94 56 03 	call	0x6ac	; 0x6ac <enc28j60PacketSend>
}
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	ff 90       	pop	r15
     e90:	ef 90       	pop	r14
     e92:	08 95       	ret

00000e94 <www_server_reply>:
// dlen is the amount of tcp data (http data) we send in this packet
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
void www_server_reply(uint8_t *buf,uint16_t dlen)
{
     e94:	ef 92       	push	r14
     e96:	ff 92       	push	r15
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	8c 01       	movw	r16, r24
     e9e:	7b 01       	movw	r14, r22
        make_tcp_ack_from_any(buf,info_data_len,0); // send ack for http get
     ea0:	60 91 95 00 	lds	r22, 0x0095
     ea4:	70 91 96 00 	lds	r23, 0x0096
     ea8:	40 e0       	ldi	r20, 0x00	; 0
     eaa:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <make_tcp_ack_from_any>
        // fill the header:
        // This code requires that we send only one data packet
        // because we keep no state information. We must therefore set
        // the fin here:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V;
     eae:	89 e1       	ldi	r24, 0x19	; 25
     eb0:	f8 01       	movw	r30, r16
     eb2:	87 a7       	std	Z+47, r24	; 0x2f
        make_tcp_ack_with_data_noflags(buf,dlen); // send data
     eb4:	c8 01       	movw	r24, r16
     eb6:	b7 01       	movw	r22, r14
     eb8:	0e 94 22 07 	call	0xe44	; 0xe44 <make_tcp_ack_with_data_noflags>
}
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	ff 90       	pop	r15
     ec2:	ef 90       	pop	r14
     ec4:	08 95       	ret

00000ec6 <fill_buf_p>:

#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const prog_char *progmem_s)
{
     ec6:	dc 01       	movw	r26, r24
     ec8:	fa 01       	movw	r30, r20
     eca:	05 c0       	rjmp	.+10     	; 0xed6 <fill_buf_p+0x10>
        while (len){
                *buf= pgm_read_byte(progmem_s);
     ecc:	84 91       	lpm	r24, Z+
     ece:	8d 93       	st	X+, r24
                buf++;
                progmem_s++;
     ed0:	31 96       	adiw	r30, 0x01	; 1
                len--;
     ed2:	61 50       	subi	r22, 0x01	; 1
     ed4:	70 40       	sbci	r23, 0x00	; 0

#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const prog_char *progmem_s)
{
        while (len){
     ed6:	61 15       	cp	r22, r1
     ed8:	71 05       	cpc	r23, r1
     eda:	c1 f7       	brne	.-16     	; 0xecc <fill_buf_p+0x6>
                *buf= pgm_read_byte(progmem_s);
                buf++;
                progmem_s++;
                len--;
        }
}
     edc:	08 95       	ret

00000ede <send_udp_prepare>:
// 2) You just allocate a large enough buffer for you data and you call send_udp and nothing else
// needs to be done.
//
// send_udp sends via gwip, you must call client_set_gwip at startu
void send_udp_prepare(uint8_t *buf,uint16_t sport, uint8_t *dip, uint16_t dport)
{
     ede:	ff 92       	push	r15
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	ec 01       	movw	r28, r24
     eea:	f6 2e       	mov	r15, r22
     eec:	07 2f       	mov	r16, r23
     eee:	ba 01       	movw	r22, r20
     ef0:	12 2f       	mov	r17, r18
     ef2:	93 2f       	mov	r25, r19
     ef4:	ae 01       	movw	r20, r28
     ef6:	9e 01       	movw	r18, r28
     ef8:	a0 e0       	ldi	r26, 0x00	; 0
     efa:	b0 e0       	ldi	r27, 0x00	; 0
        uint8_t i=0;
        //
        while(i<6){
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
     efc:	fd 01       	movw	r30, r26
     efe:	ee 54       	subi	r30, 0x4E	; 78
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	80 81       	ld	r24, Z
     f04:	f9 01       	movw	r30, r18
     f06:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     f08:	fd 01       	movw	r30, r26
     f0a:	e8 54       	subi	r30, 0x48	; 72
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	80 81       	ld	r24, Z
     f10:	f9 01       	movw	r30, r18
     f12:	86 83       	std	Z+6, r24	; 0x06
     f14:	11 96       	adiw	r26, 0x01	; 1
     f16:	2f 5f       	subi	r18, 0xFF	; 255
     f18:	3f 4f       	sbci	r19, 0xFF	; 255
// send_udp sends via gwip, you must call client_set_gwip at startu
void send_udp_prepare(uint8_t *buf,uint16_t sport, uint8_t *dip, uint16_t dport)
{
        uint8_t i=0;
        //
        while(i<6){
     f1a:	a6 30       	cpi	r26, 0x06	; 6
     f1c:	b1 05       	cpc	r27, r1
     f1e:	71 f7       	brne	.-36     	; 0xefc <send_udp_prepare+0x1e>
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
     f20:	88 e0       	ldi	r24, 0x08	; 8
     f22:	8c 87       	std	Y+12, r24	; 0x0c
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
     f24:	1d 86       	std	Y+13, r1	; 0x0d
     f26:	de 01       	movw	r26, r28
     f28:	ec e5       	ldi	r30, 0x5C	; 92
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const prog_char *progmem_s)
{
        while (len){
                *buf= pgm_read_byte(progmem_s);
     f2c:	84 91       	lpm	r24, Z+
     f2e:	1e 96       	adiw	r26, 0x0e	; 14
     f30:	8c 93       	st	X, r24
     f32:	1e 97       	sbiw	r26, 0x0e	; 14
                buf++;
                progmem_s++;
     f34:	31 96       	adiw	r30, 0x01	; 1
     f36:	11 96       	adiw	r26, 0x01	; 1

#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const prog_char *progmem_s)
{
        while (len){
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	e5 36       	cpi	r30, 0x65	; 101
     f3c:	f8 07       	cpc	r31, r24
     f3e:	b1 f7       	brne	.-20     	; 0xf2c <send_udp_prepare+0x4e>
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
        fill_buf_p(&buf[IP_P],9,iphdr);
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
     f40:	18 8a       	std	Y+16, r1	; 0x10
        // done in transmit: buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
     f42:	81 e1       	ldi	r24, 0x11	; 17
     f44:	8f 8b       	std	Y+23, r24	; 0x17
     f46:	a0 e0       	ldi	r26, 0x00	; 0
     f48:	b0 e0       	ldi	r27, 0x00	; 0
        i=0;
        while(i<4){
                buf[IP_DST_P+i]=dip[i];
     f4a:	fb 01       	movw	r30, r22
     f4c:	ea 0f       	add	r30, r26
     f4e:	fb 1f       	adc	r31, r27
     f50:	80 81       	ld	r24, Z
     f52:	fa 01       	movw	r30, r20
     f54:	86 8f       	std	Z+30, r24	; 0x1e
                buf[IP_SRC_P+i]=ipaddr[i];
     f56:	fd 01       	movw	r30, r26
     f58:	e2 54       	subi	r30, 0x42	; 66
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	80 81       	ld	r24, Z
     f5e:	fa 01       	movw	r30, r20
     f60:	82 8f       	std	Z+26, r24	; 0x1a
     f62:	11 96       	adiw	r26, 0x01	; 1
     f64:	4f 5f       	subi	r20, 0xFF	; 255
     f66:	5f 4f       	sbci	r21, 0xFF	; 255
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
        // done in transmit: buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
        i=0;
        while(i<4){
     f68:	a4 30       	cpi	r26, 0x04	; 4
     f6a:	b1 05       	cpc	r27, r1
     f6c:	71 f7       	brne	.-36     	; 0xf4a <send_udp_prepare+0x6c>
                buf[IP_DST_P+i]=dip[i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        // done in transmit: fill_ip_hdr_checksum(buf);
        buf[UDP_DST_PORT_H_P]=(dport>>8);
     f6e:	9c a3       	std	Y+36, r25	; 0x24
        buf[UDP_DST_PORT_L_P]=0xff&dport; 
     f70:	1d a3       	std	Y+37, r17	; 0x25
        buf[UDP_SRC_PORT_H_P]=(sport>>8);
     f72:	0a a3       	std	Y+34, r16	; 0x22
        buf[UDP_SRC_PORT_L_P]=sport&0xff; 
     f74:	fb a2       	std	Y+35, r15	; 0x23
        buf[UDP_LEN_H_P]=0;
     f76:	1e a2       	std	Y+38, r1	; 0x26
        // done in transmit: buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
     f78:	18 a6       	std	Y+40, r1	; 0x28
        buf[UDP_CHECKSUM_L_P]=0;
     f7a:	19 a6       	std	Y+41, r1	; 0x29
        // copy the data:
        // now starting with the first byte at buf[UDP_DATA_P]
        //
}
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	ff 90       	pop	r15
     f86:	08 95       	ret

00000f88 <send_udp_transmit>:

void send_udp_transmit(uint8_t *buf,uint8_t datalen)
{
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	7c 01       	movw	r14, r24
     f92:	06 2f       	mov	r16, r22
        uint16_t ck;
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
     f94:	04 5e       	subi	r16, 0xE4	; 228
     f96:	fc 01       	movw	r30, r24
     f98:	01 8b       	std	Z+17, r16	; 0x11
        fill_ip_hdr_checksum(buf);
     f9a:	0e 94 64 05 	call	0xac8	; 0xac8 <fill_ip_hdr_checksum>
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
     f9e:	04 51       	subi	r16, 0x14	; 20
     fa0:	f7 01       	movw	r30, r14
     fa2:	07 a3       	std	Z+39, r16	; 0x27
     fa4:	08 50       	subi	r16, 0x08	; 8
        //
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
     fa6:	10 e0       	ldi	r17, 0x00	; 0
     fa8:	00 5f       	subi	r16, 0xF0	; 240
     faa:	1f 4f       	sbci	r17, 0xFF	; 255
     fac:	c7 01       	movw	r24, r14
     fae:	4a 96       	adiw	r24, 0x1a	; 26
     fb0:	b8 01       	movw	r22, r16
     fb2:	41 e0       	ldi	r20, 0x01	; 1
     fb4:	0e 94 62 04 	call	0x8c4	; 0x8c4 <checksum>
        buf[UDP_CHECKSUM_H_P]=ck>>8;
     fb8:	f7 01       	movw	r30, r14
     fba:	90 a7       	std	Z+40, r25	; 0x28
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
     fbc:	81 a7       	std	Z+41, r24	; 0x29
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
     fbe:	c8 01       	movw	r24, r16
     fc0:	4a 96       	adiw	r24, 0x1a	; 26
     fc2:	b7 01       	movw	r22, r14
     fc4:	0e 94 56 03 	call	0x6ac	; 0x6ac <enc28j60PacketSend>
}
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	ff 90       	pop	r15
     fce:	ef 90       	pop	r14
     fd0:	08 95       	ret

00000fd2 <send_udp>:

void send_udp(uint8_t *buf,char *data,uint8_t datalen,uint16_t sport, uint8_t *dip, uint16_t dport)
{
     fd2:	af 92       	push	r10
     fd4:	bf 92       	push	r11
     fd6:	df 92       	push	r13
     fd8:	ef 92       	push	r14
     fda:	ff 92       	push	r15
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	ec 01       	movw	r28, r24
     fe6:	5b 01       	movw	r10, r22
     fe8:	d4 2e       	mov	r13, r20
     fea:	a8 01       	movw	r20, r16
        send_udp_prepare(buf,sport, dip, dport);
     fec:	b9 01       	movw	r22, r18
     fee:	97 01       	movw	r18, r14
     ff0:	0e 94 6f 07 	call	0xede	; 0xede <send_udp_prepare>
     ff4:	6d 2d       	mov	r22, r13
     ff6:	6d 3d       	cpi	r22, 0xDD	; 221
     ff8:	08 f0       	brcs	.+2      	; 0xffc <send_udp+0x2a>
     ffa:	6c ed       	ldi	r22, 0xDC	; 220
     ffc:	de 01       	movw	r26, r28
     ffe:	9a 96       	adiw	r26, 0x2a	; 42
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	07 c0       	rjmp	.+14     	; 0x1014 <send_udp+0x42>
                datalen=220;
        }
        // copy the data:
        i=0;
        while(i<datalen){
                buf[UDP_DATA_P+i]=data[i];
    1006:	f5 01       	movw	r30, r10
    1008:	e2 0f       	add	r30, r18
    100a:	f3 1f       	adc	r31, r19
    100c:	80 81       	ld	r24, Z
    100e:	8d 93       	st	X+, r24
    1010:	2f 5f       	subi	r18, 0xFF	; 255
    1012:	3f 4f       	sbci	r19, 0xFF	; 255
        if (datalen>220){
                datalen=220;
        }
        // copy the data:
        i=0;
        while(i<datalen){
    1014:	26 17       	cp	r18, r22
    1016:	b8 f3       	brcs	.-18     	; 0x1006 <send_udp+0x34>
                buf[UDP_DATA_P+i]=data[i];
                i++;
        }
        //
        send_udp_transmit(buf,datalen);
    1018:	ce 01       	movw	r24, r28
    101a:	0e 94 c4 07 	call	0xf88	; 0xf88 <send_udp_transmit>
}
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	df 90       	pop	r13
    102c:	bf 90       	pop	r11
    102e:	af 90       	pop	r10
    1030:	08 95       	ret

00001032 <client_arp_whohas>:
#endif // WOL_client

#if defined (NTP_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// make a arp request
void client_arp_whohas(uint8_t *buf,uint8_t *ip_we_search)
{
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	ec 01       	movw	r28, r24
    1038:	ac 01       	movw	r20, r24
    103a:	28 eb       	ldi	r18, 0xB8	; 184
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	fc 01       	movw	r30, r24
    1040:	d9 01       	movw	r26, r18
        uint8_t i=0;
        //
        while(i<6){
                buf[ETH_DST_MAC +i]=0xff;
    1042:	9f ef       	ldi	r25, 0xFF	; 255
    1044:	90 83       	st	Z, r25
                buf[ETH_SRC_MAC +i]=macaddr[i];
    1046:	8d 91       	ld	r24, X+
    1048:	86 83       	std	Z+6, r24	; 0x06
    104a:	31 96       	adiw	r30, 0x01	; 1
// make a arp request
void client_arp_whohas(uint8_t *buf,uint8_t *ip_we_search)
{
        uint8_t i=0;
        //
        while(i<6){
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	ae 3b       	cpi	r26, 0xBE	; 190
    1050:	b8 07       	cpc	r27, r24
    1052:	c1 f7       	brne	.-16     	; 0x1044 <client_arp_whohas+0x12>
                buf[ETH_DST_MAC +i]=0xff;
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
    1054:	88 e0       	ldi	r24, 0x08	; 8
    1056:	8c 87       	std	Y+12, r24	; 0x0c
        buf[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
    1058:	86 e0       	ldi	r24, 0x06	; 6
    105a:	8d 87       	std	Y+13, r24	; 0x0d
    105c:	de 01       	movw	r26, r28
    105e:	e4 e5       	ldi	r30, 0x54	; 84
    1060:	f0 e0       	ldi	r31, 0x00	; 0
#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const prog_char *progmem_s)
{
        while (len){
                *buf= pgm_read_byte(progmem_s);
    1062:	84 91       	lpm	r24, Z+
    1064:	1e 96       	adiw	r26, 0x0e	; 14
    1066:	8c 93       	st	X, r24
    1068:	1e 97       	sbiw	r26, 0x0e	; 14
                buf++;
                progmem_s++;
    106a:	31 96       	adiw	r30, 0x01	; 1
    106c:	11 96       	adiw	r26, 0x01	; 1

#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const prog_char *progmem_s)
{
        while (len){
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	ec 35       	cpi	r30, 0x5C	; 92
    1072:	f8 07       	cpc	r31, r24
    1074:	b1 f7       	brne	.-20     	; 0x1062 <client_arp_whohas+0x30>
        buf[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
        buf[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
        fill_buf_p(&buf[ETH_ARP_P],8,arpreqhdr);
        i=0;
        while(i<6){
                buf[ETH_ARP_SRC_MAC_P +i]=macaddr[i];
    1076:	f9 01       	movw	r30, r18
    1078:	81 91       	ld	r24, Z+
    107a:	9f 01       	movw	r18, r30
    107c:	fa 01       	movw	r30, r20
    107e:	86 8b       	std	Z+22, r24	; 0x16
                buf[ETH_ARP_DST_MAC_P+i]=0;
    1080:	10 a2       	std	Z+32, r1	; 0x20
    1082:	4f 5f       	subi	r20, 0xFF	; 255
    1084:	5f 4f       	sbci	r21, 0xFF	; 255
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
        buf[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
        fill_buf_p(&buf[ETH_ARP_P],8,arpreqhdr);
        i=0;
        while(i<6){
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	2e 3b       	cpi	r18, 0xBE	; 190
    108a:	3f 07       	cpc	r19, r31
    108c:	a1 f7       	brne	.-24     	; 0x1076 <client_arp_whohas+0x44>
    108e:	de 01       	movw	r26, r28
    1090:	5c 96       	adiw	r26, 0x1c	; 28
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
                buf[ETH_ARP_DST_MAC_P+i]=0;
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=*(ip_we_search +i);
    1096:	fb 01       	movw	r30, r22
    1098:	e2 0f       	add	r30, r18
    109a:	f3 1f       	adc	r31, r19
    109c:	80 81       	ld	r24, Z
    109e:	1a 96       	adiw	r26, 0x0a	; 10
    10a0:	8c 93       	st	X, r24
    10a2:	1a 97       	sbiw	r26, 0x0a	; 10
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
    10a4:	f9 01       	movw	r30, r18
    10a6:	e2 54       	subi	r30, 0x42	; 66
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	80 81       	ld	r24, Z
    10ac:	8d 93       	st	X+, r24
    10ae:	2f 5f       	subi	r18, 0xFF	; 255
    10b0:	3f 4f       	sbci	r19, 0xFF	; 255
                buf[ETH_ARP_SRC_MAC_P +i]=macaddr[i];
                buf[ETH_ARP_DST_MAC_P+i]=0;
                i++;
        }
        i=0;
        while(i<4){
    10b2:	24 30       	cpi	r18, 0x04	; 4
    10b4:	31 05       	cpc	r19, r1
    10b6:	79 f7       	brne	.-34     	; 0x1096 <client_arp_whohas+0x64>
                buf[ETH_ARP_DST_IP_P+i]=*(ip_we_search +i);
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
        waitgwmac|=WGW_ACCEPT_ARP_REPLY;
    10b8:	80 91 8d 00 	lds	r24, 0x008D
    10bc:	88 60       	ori	r24, 0x08	; 8
    10be:	80 93 8d 00 	sts	0x008D, r24
        // 0x2a=42=len of packet
        enc28j60PacketSend(0x2a,buf);
    10c2:	8a e2       	ldi	r24, 0x2A	; 42
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	be 01       	movw	r22, r28
    10c8:	0e 94 56 03 	call	0x6ac	; 0x6ac <enc28j60PacketSend>
}
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	08 95       	ret

000010d2 <client_waiting_gw>:

uint8_t client_waiting_gw(void)
{
    10d2:	80 91 8d 00 	lds	r24, 0x008D
    10d6:	86 95       	lsr	r24
    10d8:	80 95       	com	r24
        if (waitgwmac & WGW_HAVE_GW_MAC){
                return(0);
        }
        return(1);
}
    10da:	81 70       	andi	r24, 0x01	; 1
    10dc:	08 95       	ret

000010de <client_store_gw_mac>:

// store the mac addr from an arp reply
// no len check here, you must first call eth_type_is_arp_and_my_ip
uint8_t client_store_gw_mac(uint8_t *buf)
{
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	ec 01       	movw	r28, r24
    10e4:	e6 e7       	ldi	r30, 0x76	; 118
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	dc 01       	movw	r26, r24
        uint8_t i=0;
        while(i<4){
                if(buf[ETH_ARP_SRC_IP_P+i]!=gwip[i]){
    10ea:	5c 96       	adiw	r26, 0x1c	; 28
    10ec:	9c 91       	ld	r25, X
    10ee:	5c 97       	sbiw	r26, 0x1c	; 28
    10f0:	80 81       	ld	r24, Z
    10f2:	98 17       	cp	r25, r24
    10f4:	11 f0       	breq	.+4      	; 0x10fa <client_store_gw_mac+0x1c>
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	10 c0       	rjmp	.+32     	; 0x111a <client_store_gw_mac+0x3c>
    10fa:	11 96       	adiw	r26, 0x01	; 1
    10fc:	31 96       	adiw	r30, 0x01	; 1
// store the mac addr from an arp reply
// no len check here, you must first call eth_type_is_arp_and_my_ip
uint8_t client_store_gw_mac(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	ea 37       	cpi	r30, 0x7A	; 122
    1102:	f8 07       	cpc	r31, r24
    1104:	91 f7       	brne	.-28     	; 0x10ea <client_store_gw_mac+0xc>
    1106:	e2 eb       	ldi	r30, 0xB2	; 178
    1108:	f0 e0       	ldi	r31, 0x00	; 0
                }
                i++;
        }
        i=0;
        while(i<6){
                gwmacaddr[i]=buf[ETH_ARP_SRC_MAC_P +i];
    110a:	8e 89       	ldd	r24, Y+22	; 0x16
    110c:	81 93       	st	Z+, r24
    110e:	21 96       	adiw	r28, 0x01	; 1
                        return(0);
                }
                i++;
        }
        i=0;
        while(i<6){
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	e8 3b       	cpi	r30, 0xB8	; 184
    1114:	f8 07       	cpc	r31, r24
    1116:	c9 f7       	brne	.-14     	; 0x110a <client_store_gw_mac+0x2c>
    1118:	81 e0       	ldi	r24, 0x01	; 1
                gwmacaddr[i]=buf[ETH_ARP_SRC_MAC_P +i];
                i++;
        }
        return(1);
}
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	08 95       	ret

00001120 <client_gw_arp_refresh>:

void client_gw_arp_refresh(void) {
        if (waitgwmac & WGW_HAVE_GW_MAC){
    1120:	80 91 8d 00 	lds	r24, 0x008D
    1124:	81 ff       	sbrs	r24, 1
    1126:	03 c0       	rjmp	.+6      	; 0x112e <client_gw_arp_refresh+0xe>
                waitgwmac|=WGW_REFRESHING;
    1128:	84 60       	ori	r24, 0x04	; 4
    112a:	80 93 8d 00 	sts	0x008D, r24
    112e:	08 95       	ret

00001130 <client_set_gwip>:
        }
}

void client_set_gwip(uint8_t *gwipaddr)
{
    1130:	ac 01       	movw	r20, r24
        uint8_t i=0;
        waitgwmac=WGW_INITIAL_ARP; // causes an arp request in the packet loop
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	80 93 8d 00 	sts	0x008D, r24
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
        while(i<4){
                gwip[i]=gwipaddr[i];
    113c:	f9 01       	movw	r30, r18
    113e:	ea 58       	subi	r30, 0x8A	; 138
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	da 01       	movw	r26, r20
    1144:	a2 0f       	add	r26, r18
    1146:	b3 1f       	adc	r27, r19
    1148:	8c 91       	ld	r24, X
    114a:	80 83       	st	Z, r24
    114c:	2f 5f       	subi	r18, 0xFF	; 255
    114e:	3f 4f       	sbci	r19, 0xFF	; 255

void client_set_gwip(uint8_t *gwipaddr)
{
        uint8_t i=0;
        waitgwmac=WGW_INITIAL_ARP; // causes an arp request in the packet loop
        while(i<4){
    1150:	24 30       	cpi	r18, 0x04	; 4
    1152:	31 05       	cpc	r19, r1
    1154:	99 f7       	brne	.-26     	; 0x113c <client_set_gwip+0xc>
                gwip[i]=gwipaddr[i];
                i++;
        }
}
    1156:	08 95       	ret

00001158 <client_tcp_set_serverip>:
#endif // NTP_client || UDP_client || TCP_client || PING_client

#if defined (TCP_client)
void client_tcp_set_serverip(uint8_t *ipaddr)
{
    1158:	ac 01       	movw	r20, r24
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
        uint8_t i=0;
        while(i<4){
                tcpsrvip[i]=ipaddr[i];
    115e:	f9 01       	movw	r30, r18
    1160:	e4 56       	subi	r30, 0x64	; 100
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	da 01       	movw	r26, r20
    1166:	a2 0f       	add	r26, r18
    1168:	b3 1f       	adc	r27, r19
    116a:	8c 91       	ld	r24, X
    116c:	80 83       	st	Z, r24
    116e:	2f 5f       	subi	r18, 0xFF	; 255
    1170:	3f 4f       	sbci	r19, 0xFF	; 255

#if defined (TCP_client)
void client_tcp_set_serverip(uint8_t *ipaddr)
{
        uint8_t i=0;
        while(i<4){
    1172:	24 30       	cpi	r18, 0x04	; 4
    1174:	31 05       	cpc	r19, r1
    1176:	99 f7       	brne	.-26     	; 0x115e <client_tcp_set_serverip+0x6>
                tcpsrvip[i]=ipaddr[i];
                i++;
        }
}
    1178:	08 95       	ret

0000117a <client_syn>:
#endif // TCP_client

#if defined (TCP_client)
// Make a tcp syn packet
void client_syn(uint8_t *buf,uint8_t srcport,uint8_t dstport_h,uint8_t dstport_l)
{
    117a:	ff 92       	push	r15
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	ec 01       	movw	r28, r24
    1186:	f6 2e       	mov	r15, r22
    1188:	14 2f       	mov	r17, r20
    118a:	02 2f       	mov	r16, r18
    118c:	ac 01       	movw	r20, r24
    118e:	dc 01       	movw	r26, r24
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
        uint16_t ck;
        uint8_t i=0;
        // -- make the main part of the eth/IP/tcp header:
        while(i<6){
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
    1194:	f9 01       	movw	r30, r18
    1196:	ee 54       	subi	r30, 0x4E	; 78
    1198:	ff 4f       	sbci	r31, 0xFF	; 255
    119a:	80 81       	ld	r24, Z
    119c:	8c 93       	st	X, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
    119e:	f9 01       	movw	r30, r18
    11a0:	e8 54       	subi	r30, 0x48	; 72
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	80 81       	ld	r24, Z
    11a6:	16 96       	adiw	r26, 0x06	; 6
    11a8:	8c 93       	st	X, r24
    11aa:	16 97       	sbiw	r26, 0x06	; 6
    11ac:	2f 5f       	subi	r18, 0xFF	; 255
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	11 96       	adiw	r26, 0x01	; 1
void client_syn(uint8_t *buf,uint8_t srcport,uint8_t dstport_h,uint8_t dstport_l)
{
        uint16_t ck;
        uint8_t i=0;
        // -- make the main part of the eth/IP/tcp header:
        while(i<6){
    11b2:	26 30       	cpi	r18, 0x06	; 6
    11b4:	31 05       	cpc	r19, r1
    11b6:	71 f7       	brne	.-36     	; 0x1194 <client_syn+0x1a>
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
    11b8:	88 e0       	ldi	r24, 0x08	; 8
    11ba:	8c 87       	std	Y+12, r24	; 0x0c
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
    11bc:	1d 86       	std	Y+13, r1	; 0x0d
    11be:	de 01       	movw	r26, r28
    11c0:	ec e5       	ldi	r30, 0x5C	; 92
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const prog_char *progmem_s)
{
        while (len){
                *buf= pgm_read_byte(progmem_s);
    11c4:	84 91       	lpm	r24, Z+
    11c6:	1e 96       	adiw	r26, 0x0e	; 14
    11c8:	8c 93       	st	X, r24
    11ca:	1e 97       	sbiw	r26, 0x0e	; 14
                buf++;
                progmem_s++;
    11cc:	31 96       	adiw	r30, 0x01	; 1
    11ce:	11 96       	adiw	r26, 0x01	; 1

#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const prog_char *progmem_s)
{
        while (len){
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	e5 36       	cpi	r30, 0x65	; 101
    11d4:	f8 07       	cpc	r31, r24
    11d6:	b1 f7       	brne	.-20     	; 0x11c4 <client_syn+0x4a>
                i++;
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
        fill_buf_p(&buf[IP_P],9,iphdr);
        buf[IP_TOTLEN_L_P]=44; // good for syn
    11d8:	8c e2       	ldi	r24, 0x2C	; 44
    11da:	89 8b       	std	Y+17, r24	; 0x11
        buf[IP_PROTO_P]=IP_PROTO_TCP_V;
    11dc:	86 e0       	ldi	r24, 0x06	; 6
    11de:	8f 8b       	std	Y+23, r24	; 0x17
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
        i=0;
        while(i<4){
                buf[IP_DST_P+i]=tcpsrvip[i];
    11e4:	f9 01       	movw	r30, r18
    11e6:	e4 56       	subi	r30, 0x64	; 100
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	80 81       	ld	r24, Z
    11ec:	fa 01       	movw	r30, r20
    11ee:	86 8f       	std	Z+30, r24	; 0x1e
                buf[IP_SRC_P+i]=ipaddr[i];
    11f0:	f9 01       	movw	r30, r18
    11f2:	e2 54       	subi	r30, 0x42	; 66
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	80 81       	ld	r24, Z
    11f8:	fa 01       	movw	r30, r20
    11fa:	82 8f       	std	Z+26, r24	; 0x1a
    11fc:	2f 5f       	subi	r18, 0xFF	; 255
    11fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1200:	4f 5f       	subi	r20, 0xFF	; 255
    1202:	5f 4f       	sbci	r21, 0xFF	; 255
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
        fill_buf_p(&buf[IP_P],9,iphdr);
        buf[IP_TOTLEN_L_P]=44; // good for syn
        buf[IP_PROTO_P]=IP_PROTO_TCP_V;
        i=0;
        while(i<4){
    1204:	24 30       	cpi	r18, 0x04	; 4
    1206:	31 05       	cpc	r19, r1
    1208:	69 f7       	brne	.-38     	; 0x11e4 <client_syn+0x6a>
                buf[IP_DST_P+i]=tcpsrvip[i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        fill_ip_hdr_checksum(buf);
    120a:	ce 01       	movw	r24, r28
    120c:	0e 94 64 05 	call	0xac8	; 0xac8 <fill_ip_hdr_checksum>
        buf[TCP_DST_PORT_H_P]=dstport_h;
    1210:	1c a3       	std	Y+36, r17	; 0x24
        buf[TCP_DST_PORT_L_P]=dstport_l;
    1212:	0d a3       	std	Y+37, r16	; 0x25
        buf[TCP_SRC_PORT_H_P]=TCPCLIENT_SRC_PORT_H;
    1214:	8b e0       	ldi	r24, 0x0B	; 11
    1216:	8a a3       	std	Y+34, r24	; 0x22
        buf[TCP_SRC_PORT_L_P]=srcport; // lower 8 bit of src port
    1218:	fb a2       	std	Y+35, r15	; 0x23
    121a:	fe 01       	movw	r30, r28
    121c:	b6 96       	adiw	r30, 0x26	; 38
    121e:	80 e0       	ldi	r24, 0x00	; 0
        i=0;
        // zero out sequence number and acknowledgement number
        while(i<8){
                buf[TCP_SEQ_H_P+i]=0;
    1220:	11 92       	st	Z+, r1
                i++;
    1222:	8f 5f       	subi	r24, 0xFF	; 255
        buf[TCP_DST_PORT_L_P]=dstport_l;
        buf[TCP_SRC_PORT_H_P]=TCPCLIENT_SRC_PORT_H;
        buf[TCP_SRC_PORT_L_P]=srcport; // lower 8 bit of src port
        i=0;
        // zero out sequence number and acknowledgement number
        while(i<8){
    1224:	88 30       	cpi	r24, 0x08	; 8
    1226:	e1 f7       	brne	.-8      	; 0x1220 <client_syn+0xa6>
        // -- header ready 
        // put inital seq number
        // we step only the second byte, this allows us to send packts 
        // with 255 bytes 512 (if we step the initial seqnum by 2)
        // or 765 (step by 3)
        buf[TCP_SEQ_H_P+2]= seqnum; 
    1228:	80 91 82 00 	lds	r24, 0x0082
    122c:	88 a7       	std	Y+40, r24	; 0x28
        // step the inititial seq num by something we will not use
        // during this tcp session:
        seqnum+=3;
    122e:	8d 5f       	subi	r24, 0xFD	; 253
    1230:	80 93 82 00 	sts	0x0082, r24
        buf[TCP_HEADER_LEN_P]=0x60; // 0x60=24 len: (0x60>>4) * 4
    1234:	80 e6       	ldi	r24, 0x60	; 96
    1236:	8e a7       	std	Y+46, r24	; 0x2e
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYN_V;
    1238:	92 e0       	ldi	r25, 0x02	; 2
    123a:	9f a7       	std	Y+47, r25	; 0x2f
        // use a low window size otherwise we have to have
        // timers and can not just react on every packet.
        buf[TCP_WIN_SIZE]=0x3; // 1024=0x400 768=0x300, initial window
    123c:	83 e0       	ldi	r24, 0x03	; 3
    123e:	88 ab       	std	Y+48, r24	; 0x30
        buf[TCP_WIN_SIZE+1]=0x0;
    1240:	19 aa       	std	Y+49, r1	; 0x31
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
    1242:	1a aa       	std	Y+50, r1	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
    1244:	1b aa       	std	Y+51, r1	; 0x33
        // urgent pointer
        buf[TCP_CHECKSUM_L_P+1]=0;
    1246:	1c aa       	std	Y+52, r1	; 0x34
        buf[TCP_CHECKSUM_L_P+2]=0;
    1248:	1d aa       	std	Y+53, r1	; 0x35
        // MSS= max IP len that we want to have:
        buf[TCP_OPTIONS_P]=2;
    124a:	9e ab       	std	Y+54, r25	; 0x36
        buf[TCP_OPTIONS_P+1]=4;
    124c:	84 e0       	ldi	r24, 0x04	; 4
    124e:	8f ab       	std	Y+55, r24	; 0x37
        buf[TCP_OPTIONS_P+2]=(CLIENTMSS>>8);
    1250:	98 af       	std	Y+56, r25	; 0x38
        buf[TCP_OPTIONS_P+3]=CLIENTMSS & 0xff;
    1252:	86 e2       	ldi	r24, 0x26	; 38
    1254:	89 af       	std	Y+57, r24	; 0x39
        ck=checksum(&buf[IP_SRC_P], 8 +TCP_HEADER_LEN_PLAIN+4,2);
    1256:	ce 01       	movw	r24, r28
    1258:	4a 96       	adiw	r24, 0x1a	; 26
    125a:	60 e2       	ldi	r22, 0x20	; 32
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	42 e0       	ldi	r20, 0x02	; 2
    1260:	0e 94 62 04 	call	0x8c4	; 0x8c4 <checksum>
        buf[TCP_CHECKSUM_H_P]=ck>>8;
    1264:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
    1266:	8b ab       	std	Y+51, r24	; 0x33
        // 4 is the tcp mss option:
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4,buf);
    1268:	8a e3       	ldi	r24, 0x3A	; 58
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	be 01       	movw	r22, r28
    126e:	0e 94 56 03 	call	0x6ac	; 0x6ac <enc28j60PacketSend>
}
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	1f 91       	pop	r17
    1278:	0f 91       	pop	r16
    127a:	ff 90       	pop	r15
    127c:	08 95       	ret

0000127e <client_tcp_req>:
// We use callback functions because that saves memory and a uC is very
// limited in memory
//
uint8_t client_tcp_req(uint8_t (*result_callback)(uint8_t fd,uint8_t statuscode,uint16_t data_start_pos_in_buf, uint16_t len_of_data),uint16_t (*datafill_callback)(uint8_t fd),uint16_t port)
{
        client_tcp_result_callback=result_callback;
    127e:	90 93 a1 00 	sts	0x00A1, r25
    1282:	80 93 a0 00 	sts	0x00A0, r24
        client_tcp_datafill_callback=datafill_callback;
    1286:	70 93 a3 00 	sts	0x00A3, r23
    128a:	60 93 a2 00 	sts	0x00A2, r22
        tcp_client_port_h=(port>>8) & 0xff;
    128e:	50 93 90 00 	sts	0x0090, r21
        tcp_client_port_l=(port & 0xff);
    1292:	40 93 91 00 	sts	0x0091, r20
        tcp_client_state=1; // send a syn
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	80 93 8e 00 	sts	0x008E, r24
        tcp_fd++;
    129c:	80 91 8f 00 	lds	r24, 0x008F
    12a0:	8f 5f       	subi	r24, 0xFF	; 255
    12a2:	80 93 8f 00 	sts	0x008F, r24
        if (tcp_fd>7){
    12a6:	88 30       	cpi	r24, 0x08	; 8
    12a8:	10 f0       	brcs	.+4      	; 0x12ae <client_tcp_req+0x30>
                tcp_fd=0;
    12aa:	10 92 8f 00 	sts	0x008F, r1
        }
        return(tcp_fd);
}
    12ae:	80 91 8f 00 	lds	r24, 0x008F
    12b2:	08 95       	ret

000012b4 <client_browse_url>:
// statuscode==1 means there is a valid tcp data but not a "200 OK"
// answer. Any other statuscode than 0 and 1 is a total communication failure.
//
void client_browse_url(prog_char *urlbuf, char *urlbuf_varpart, prog_char *hoststr,void (*callback)(uint8_t,uint16_t,uint16_t))
{
        client_urlbuf=urlbuf;
    12b4:	90 93 ab 00 	sts	0x00AB, r25
    12b8:	80 93 aa 00 	sts	0x00AA, r24
        client_urlbuf_var=urlbuf_varpart;
    12bc:	70 93 ad 00 	sts	0x00AD, r23
    12c0:	60 93 ac 00 	sts	0x00AC, r22
        client_hoststr=hoststr;
    12c4:	50 93 af 00 	sts	0x00AF, r21
    12c8:	40 93 ae 00 	sts	0x00AE, r20
        browsertype=0;
    12cc:	10 92 97 00 	sts	0x0097, r1
        client_browser_callback=callback;
    12d0:	30 93 a5 00 	sts	0x00A5, r19
    12d4:	20 93 a4 00 	sts	0x00A4, r18
// We use callback functions because that saves memory and a uC is very
// limited in memory
//
uint8_t client_tcp_req(uint8_t (*result_callback)(uint8_t fd,uint8_t statuscode,uint16_t data_start_pos_in_buf, uint16_t len_of_data),uint16_t (*datafill_callback)(uint8_t fd),uint16_t port)
{
        client_tcp_result_callback=result_callback;
    12d8:	89 e8       	ldi	r24, 0x89	; 137
    12da:	9d e0       	ldi	r25, 0x0D	; 13
    12dc:	90 93 a1 00 	sts	0x00A1, r25
    12e0:	80 93 a0 00 	sts	0x00A0, r24
        client_tcp_datafill_callback=datafill_callback;
    12e4:	82 e2       	ldi	r24, 0x22	; 34
    12e6:	91 e1       	ldi	r25, 0x11	; 17
    12e8:	90 93 a3 00 	sts	0x00A3, r25
    12ec:	80 93 a2 00 	sts	0x00A2, r24
        tcp_client_port_h=(port>>8) & 0xff;
    12f0:	10 92 90 00 	sts	0x0090, r1
        tcp_client_port_l=(port & 0xff);
    12f4:	80 e5       	ldi	r24, 0x50	; 80
    12f6:	80 93 91 00 	sts	0x0091, r24
        tcp_client_state=1; // send a syn
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	80 93 8e 00 	sts	0x008E, r24
        tcp_fd++;
    1300:	80 91 8f 00 	lds	r24, 0x008F
    1304:	8f 5f       	subi	r24, 0xFF	; 255
    1306:	80 93 8f 00 	sts	0x008F, r24
        if (tcp_fd>7){
    130a:	88 30       	cpi	r24, 0x08	; 8
    130c:	10 f0       	brcs	.+4      	; 0x1312 <client_browse_url+0x5e>
                tcp_fd=0;
    130e:	10 92 8f 00 	sts	0x008F, r1
        client_urlbuf=urlbuf;
        client_urlbuf_var=urlbuf_varpart;
        client_hoststr=hoststr;
        browsertype=0;
        client_browser_callback=callback;
        www_fd=client_tcp_req(&www_client_internal_result_callback,&www_client_internal_datafill_callback,80);
    1312:	80 91 8f 00 	lds	r24, 0x008F
    1316:	80 93 98 00 	sts	0x0098, r24
}
    131a:	08 95       	ret

0000131c <client_http_post>:
// additionalheaderline must be set to NULL if not used.
// postval is a string buffer which can only be de-allocated by the caller 
// when the post operation was really done (e.g when callback was executed).
// postval must be urlencoded.
void client_http_post(prog_char *urlbuf, prog_char *hoststr, prog_char *additionalheaderline,char *postval,void (*callback)(uint8_t,uint16_t,uint16_t))
{
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
        client_urlbuf=urlbuf;
    1320:	90 93 ab 00 	sts	0x00AB, r25
    1324:	80 93 aa 00 	sts	0x00AA, r24
        client_hoststr=hoststr;
    1328:	70 93 af 00 	sts	0x00AF, r23
    132c:	60 93 ae 00 	sts	0x00AE, r22
        client_additionalheaderline=additionalheaderline;
    1330:	50 93 a7 00 	sts	0x00A7, r21
    1334:	40 93 a6 00 	sts	0x00A6, r20
        client_postval=postval;
    1338:	30 93 a9 00 	sts	0x00A9, r19
    133c:	20 93 a8 00 	sts	0x00A8, r18
        browsertype=1;
    1340:	21 e0       	ldi	r18, 0x01	; 1
    1342:	20 93 97 00 	sts	0x0097, r18
        client_browser_callback=callback;
    1346:	10 93 a5 00 	sts	0x00A5, r17
    134a:	00 93 a4 00 	sts	0x00A4, r16
// We use callback functions because that saves memory and a uC is very
// limited in memory
//
uint8_t client_tcp_req(uint8_t (*result_callback)(uint8_t fd,uint8_t statuscode,uint16_t data_start_pos_in_buf, uint16_t len_of_data),uint16_t (*datafill_callback)(uint8_t fd),uint16_t port)
{
        client_tcp_result_callback=result_callback;
    134e:	89 e8       	ldi	r24, 0x89	; 137
    1350:	9d e0       	ldi	r25, 0x0D	; 13
    1352:	90 93 a1 00 	sts	0x00A1, r25
    1356:	80 93 a0 00 	sts	0x00A0, r24
        client_tcp_datafill_callback=datafill_callback;
    135a:	82 e2       	ldi	r24, 0x22	; 34
    135c:	91 e1       	ldi	r25, 0x11	; 17
    135e:	90 93 a3 00 	sts	0x00A3, r25
    1362:	80 93 a2 00 	sts	0x00A2, r24
        tcp_client_port_h=(port>>8) & 0xff;
    1366:	10 92 90 00 	sts	0x0090, r1
        tcp_client_port_l=(port & 0xff);
    136a:	80 e5       	ldi	r24, 0x50	; 80
    136c:	80 93 91 00 	sts	0x0091, r24
        tcp_client_state=1; // send a syn
    1370:	20 93 8e 00 	sts	0x008E, r18
        tcp_fd++;
    1374:	80 91 8f 00 	lds	r24, 0x008F
    1378:	8f 5f       	subi	r24, 0xFF	; 255
    137a:	80 93 8f 00 	sts	0x008F, r24
        if (tcp_fd>7){
    137e:	88 30       	cpi	r24, 0x08	; 8
    1380:	10 f0       	brcs	.+4      	; 0x1386 <client_http_post+0x6a>
                tcp_fd=0;
    1382:	10 92 8f 00 	sts	0x008F, r1
        client_hoststr=hoststr;
        client_additionalheaderline=additionalheaderline;
        client_postval=postval;
        browsertype=1;
        client_browser_callback=callback;
        www_fd=client_tcp_req(&www_client_internal_result_callback,&www_client_internal_datafill_callback,80);
    1386:	80 91 8f 00 	lds	r24, 0x008F
    138a:	80 93 98 00 	sts	0x0098, r24
}
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	08 95       	ret

00001394 <register_ping_rec_callback>:
#endif // WWW_client

void register_ping_rec_callback(void (*callback)(uint8_t *srcip))
{
        icmp_callback=callback;
    1394:	90 93 b1 00 	sts	0x00B1, r25
    1398:	80 93 b0 00 	sts	0x00B0, r24
}
    139c:	08 95       	ret

0000139e <packetloop_icmp_tcp>:


// return 0 to just continue in the packet loop and return the position 
// of the tcp data if there is tcp data part
uint16_t packetloop_icmp_tcp(uint8_t *buf,uint16_t plen)
{
    139e:	cf 92       	push	r12
    13a0:	df 92       	push	r13
    13a2:	ef 92       	push	r14
    13a4:	ff 92       	push	r15
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	7c 01       	movw	r14, r24
    13b0:	6b 01       	movw	r12, r22
        uint16_t save_len;
#endif
        //plen will be unequal to zero if there is a valid 
        // packet (without crc error):
#if defined (NTP_client) ||  defined (UDP_client) || defined (TCP_client) || defined (PING_client)
        if(plen==0){
    13b2:	61 15       	cp	r22, r1
    13b4:	71 05       	cpc	r23, r1
    13b6:	e1 f5       	brne	.+120    	; 0x1430 <packetloop_icmp_tcp+0x92>
                if ((waitgwmac & WGW_INITIAL_ARP||waitgwmac & WGW_REFRESHING) && delaycnt==0&& enc28j60linkup()){
    13b8:	80 91 8d 00 	lds	r24, 0x008D
    13bc:	85 70       	andi	r24, 0x05	; 5
    13be:	79 f0       	breq	.+30     	; 0x13de <packetloop_icmp_tcp+0x40>
    13c0:	80 91 7e 00 	lds	r24, 0x007E
    13c4:	90 91 7f 00 	lds	r25, 0x007F
    13c8:	89 2b       	or	r24, r25
    13ca:	49 f4       	brne	.+18     	; 0x13de <packetloop_icmp_tcp+0x40>
    13cc:	0e 94 4d 03 	call	0x69a	; 0x69a <enc28j60linkup>
    13d0:	88 23       	and	r24, r24
    13d2:	29 f0       	breq	.+10     	; 0x13de <packetloop_icmp_tcp+0x40>
                        client_arp_whohas(buf,gwip);
    13d4:	c7 01       	movw	r24, r14
    13d6:	66 e7       	ldi	r22, 0x76	; 118
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	0e 94 19 08 	call	0x1032	; 0x1032 <client_arp_whohas>
                }
                delaycnt++;
    13de:	80 91 7e 00 	lds	r24, 0x007E
    13e2:	90 91 7f 00 	lds	r25, 0x007F
    13e6:	01 96       	adiw	r24, 0x01	; 1
    13e8:	90 93 7f 00 	sts	0x007F, r25
    13ec:	80 93 7e 00 	sts	0x007E, r24
#if defined (TCP_client)
                if (tcp_client_state==1 && (waitgwmac & WGW_HAVE_GW_MAC)){ // send a syn
    13f0:	80 91 8e 00 	lds	r24, 0x008E
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	09 f0       	breq	.+2      	; 0x13fa <packetloop_icmp_tcp+0x5c>
    13f8:	99 c1       	rjmp	.+818    	; 0x172c <packetloop_icmp_tcp+0x38e>
    13fa:	80 91 8d 00 	lds	r24, 0x008D
    13fe:	81 ff       	sbrs	r24, 1
    1400:	95 c1       	rjmp	.+810    	; 0x172c <packetloop_icmp_tcp+0x38e>
                        tcp_client_state=2;
    1402:	82 e0       	ldi	r24, 0x02	; 2
    1404:	80 93 8e 00 	sts	0x008E, r24
                        tcpclient_src_port_l++; // allocate a new port
    1408:	80 91 80 00 	lds	r24, 0x0080
    140c:	8f 5f       	subi	r24, 0xFF	; 255
    140e:	80 93 80 00 	sts	0x0080, r24
                        // we encode our 3 bit fd into the src port this
                        // way we get it back in every message that comes
                        // from the server:
                        client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
    1412:	8f 71       	andi	r24, 0x1F	; 31
    1414:	60 91 8f 00 	lds	r22, 0x008F
    1418:	62 95       	swap	r22
    141a:	66 0f       	add	r22, r22
    141c:	60 7e       	andi	r22, 0xE0	; 224
    141e:	68 2b       	or	r22, r24
    1420:	c7 01       	movw	r24, r14
    1422:	40 91 90 00 	lds	r20, 0x0090
    1426:	20 91 91 00 	lds	r18, 0x0091
    142a:	0e 94 bd 08 	call	0x117a	; 0x117a <client_syn>
    142e:	7e c1       	rjmp	.+764    	; 0x172c <packetloop_icmp_tcp+0x38e>
        }
#endif // NTP_client||UDP_client||TCP_client||PING_client
        // arp is broadcast if unknown but a host may also
        // verify the mac address by sending it to 
        // a unicast address.
        if(eth_type_is_arp_and_my_ip(buf,plen)){
    1430:	0e 94 1b 05 	call	0xa36	; 0xa36 <eth_type_is_arp_and_my_ip>
    1434:	88 23       	and	r24, r24
    1436:	61 f1       	breq	.+88     	; 0x1490 <packetloop_icmp_tcp+0xf2>
                if (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V){
    1438:	d7 01       	movw	r26, r14
    143a:	55 96       	adiw	r26, 0x15	; 21
    143c:	8c 91       	ld	r24, X
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	19 f4       	brne	.+6      	; 0x1448 <packetloop_icmp_tcp+0xaa>
                        // is it an arp request 
                        make_arp_answer_from_request(buf);
    1442:	c7 01       	movw	r24, r14
    1444:	0e 94 b8 05 	call	0xb70	; 0xb70 <make_arp_answer_from_request>
                }
#if defined (NTP_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
                if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
    1448:	80 91 8d 00 	lds	r24, 0x008D
    144c:	83 ff       	sbrs	r24, 3
    144e:	6e c1       	rjmp	.+732    	; 0x172c <packetloop_icmp_tcp+0x38e>
    1450:	f7 01       	movw	r30, r14
    1452:	85 89       	ldd	r24, Z+21	; 0x15
    1454:	82 30       	cpi	r24, 0x02	; 2
    1456:	09 f0       	breq	.+2      	; 0x145a <packetloop_icmp_tcp+0xbc>
    1458:	69 c1       	rjmp	.+722    	; 0x172c <packetloop_icmp_tcp+0x38e>
    145a:	e7 01       	movw	r28, r14
    145c:	e6 e7       	ldi	r30, 0x76	; 118
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	d7 01       	movw	r26, r14
// no len check here, you must first call eth_type_is_arp_and_my_ip
uint8_t client_store_gw_mac(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
                if(buf[ETH_ARP_SRC_IP_P+i]!=gwip[i]){
    1462:	5c 96       	adiw	r26, 0x1c	; 28
    1464:	9c 91       	ld	r25, X
    1466:	5c 97       	sbiw	r26, 0x1c	; 28
    1468:	80 81       	ld	r24, Z
    146a:	98 17       	cp	r25, r24
    146c:	09 f0       	breq	.+2      	; 0x1470 <packetloop_icmp_tcp+0xd2>
    146e:	5e c1       	rjmp	.+700    	; 0x172c <packetloop_icmp_tcp+0x38e>
    1470:	11 96       	adiw	r26, 0x01	; 1
    1472:	31 96       	adiw	r30, 0x01	; 1
// store the mac addr from an arp reply
// no len check here, you must first call eth_type_is_arp_and_my_ip
uint8_t client_store_gw_mac(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	ea 37       	cpi	r30, 0x7A	; 122
    1478:	f8 07       	cpc	r31, r24
    147a:	99 f7       	brne	.-26     	; 0x1462 <packetloop_icmp_tcp+0xc4>
    147c:	e2 eb       	ldi	r30, 0xB2	; 178
    147e:	f0 e0       	ldi	r31, 0x00	; 0
                }
                i++;
        }
        i=0;
        while(i<6){
                gwmacaddr[i]=buf[ETH_ARP_SRC_MAC_P +i];
    1480:	8e 89       	ldd	r24, Y+22	; 0x16
    1482:	81 93       	st	Z+, r24
    1484:	21 96       	adiw	r28, 0x01	; 1
                        return(0);
                }
                i++;
        }
        i=0;
        while(i<6){
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	e8 3b       	cpi	r30, 0xB8	; 184
    148a:	f9 07       	cpc	r31, r25
    148c:	c9 f7       	brne	.-14     	; 0x1480 <packetloop_icmp_tcp+0xe2>
    148e:	5a c1       	rjmp	.+692    	; 0x1744 <packetloop_icmp_tcp+0x3a6>
#endif // NTP_client||UDP_client||TCP_client||PING_client
                return(0);

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
    1490:	c7 01       	movw	r24, r14
    1492:	b6 01       	movw	r22, r12
    1494:	0e 94 37 05 	call	0xa6e	; 0xa6e <eth_type_is_ip_and_my_ip>
    1498:	88 23       	and	r24, r24
    149a:	09 f4       	brne	.+2      	; 0x149e <packetloop_icmp_tcp+0x100>
    149c:	47 c1       	rjmp	.+654    	; 0x172c <packetloop_icmp_tcp+0x38e>
                return(0);
        }
        if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
    149e:	d7 01       	movw	r26, r14
    14a0:	57 96       	adiw	r26, 0x17	; 23
    14a2:	9c 91       	ld	r25, X
    14a4:	57 97       	sbiw	r26, 0x17	; 23
    14a6:	91 30       	cpi	r25, 0x01	; 1
    14a8:	91 f4       	brne	.+36     	; 0x14ce <packetloop_icmp_tcp+0x130>
    14aa:	92 96       	adiw	r26, 0x22	; 34
    14ac:	8c 91       	ld	r24, X
    14ae:	88 30       	cpi	r24, 0x08	; 8
    14b0:	71 f4       	brne	.+28     	; 0x14ce <packetloop_icmp_tcp+0x130>
                if (icmp_callback){
    14b2:	e0 91 b0 00 	lds	r30, 0x00B0
    14b6:	f0 91 b1 00 	lds	r31, 0x00B1
    14ba:	30 97       	sbiw	r30, 0x00	; 0
    14bc:	19 f0       	breq	.+6      	; 0x14c4 <packetloop_icmp_tcp+0x126>
                        (*icmp_callback)(&(buf[IP_SRC_P]));
    14be:	c7 01       	movw	r24, r14
    14c0:	4a 96       	adiw	r24, 0x1a	; 26
    14c2:	09 95       	icall
                }
                // a ping packet, let's send pong
                make_echo_reply_from_request(buf,plen);
    14c4:	c7 01       	movw	r24, r14
    14c6:	b6 01       	movw	r22, r12
    14c8:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <make_echo_reply_from_request>
    14cc:	2f c1       	rjmp	.+606    	; 0x172c <packetloop_icmp_tcp+0x38e>
                return(0);
        }
        if (plen<54 && buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
    14ce:	b6 e3       	ldi	r27, 0x36	; 54
    14d0:	cb 16       	cp	r12, r27
    14d2:	d1 04       	cpc	r13, r1
    14d4:	18 f4       	brcc	.+6      	; 0x14dc <packetloop_icmp_tcp+0x13e>
    14d6:	96 30       	cpi	r25, 0x06	; 6
    14d8:	09 f0       	breq	.+2      	; 0x14dc <packetloop_icmp_tcp+0x13e>
    14da:	28 c1       	rjmp	.+592    	; 0x172c <packetloop_icmp_tcp+0x38e>
                // smaller than the smallest TCP packet and not tcp port
                return(0);
        }
#if defined (TCP_client)
        // a message for the tcp client, tcp_client_state is zero if client was never used
        if ( buf[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H){
    14dc:	f7 01       	movw	r30, r14
    14de:	94 a1       	ldd	r25, Z+36	; 0x24
    14e0:	9b 30       	cpi	r25, 0x0B	; 11
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <packetloop_icmp_tcp+0x148>
    14e4:	ce c0       	rjmp	.+412    	; 0x1682 <packetloop_icmp_tcp+0x2e4>
#if defined (WWW_client)
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
    14e6:	f0 92 93 00 	sts	0x0093, r15
    14ea:	e0 92 92 00 	sts	0x0092, r14
    14ee:	d7 01       	movw	r26, r14
    14f0:	ec e9       	ldi	r30, 0x9C	; 156
    14f2:	f0 e0       	ldi	r31, 0x00	; 0

uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
        uint8_t i=0;
        while(i<4){
                if(buf[IP_SRC_P+i]!=ip[i]){
    14f4:	5a 96       	adiw	r26, 0x1a	; 26
    14f6:	9c 91       	ld	r25, X
    14f8:	5a 97       	sbiw	r26, 0x1a	; 26
    14fa:	80 81       	ld	r24, Z
    14fc:	98 17       	cp	r25, r24
    14fe:	09 f0       	breq	.+2      	; 0x1502 <packetloop_icmp_tcp+0x164>
    1500:	15 c1       	rjmp	.+554    	; 0x172c <packetloop_icmp_tcp+0x38e>
    1502:	11 96       	adiw	r26, 0x01	; 1
    1504:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
        uint8_t i=0;
        while(i<4){
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	e0 3a       	cpi	r30, 0xA0	; 160
    150a:	f8 07       	cpc	r31, r24
    150c:	99 f7       	brne	.-26     	; 0x14f4 <packetloop_icmp_tcp+0x156>
    150e:	1e c1       	rjmp	.+572    	; 0x174c <packetloop_icmp_tcp+0x3ae>
                if (check_ip_message_is_from(buf,tcpsrvip)==0){
                        return(0);
                }
                // if we get a reset:
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_RST_V){
                        if (client_tcp_result_callback){
    1510:	e0 91 a0 00 	lds	r30, 0x00A0
    1514:	f0 91 a1 00 	lds	r31, 0x00A1
    1518:	30 97       	sbiw	r30, 0x00	; 0
    151a:	09 f4       	brne	.+2      	; 0x151e <packetloop_icmp_tcp+0x180>
    151c:	a7 c0       	rjmp	.+334    	; 0x166c <packetloop_icmp_tcp+0x2ce>
                                // parameters in client_tcp_result_callback: fd, status, buf_start, len
                                (*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
    151e:	d7 01       	movw	r26, r14
    1520:	95 96       	adiw	r26, 0x25	; 37
    1522:	8c 91       	ld	r24, X
    1524:	82 95       	swap	r24
    1526:	86 95       	lsr	r24
    1528:	87 70       	andi	r24, 0x07	; 7
    152a:	63 e0       	ldi	r22, 0x03	; 3
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	09 95       	icall
    1536:	9a c0       	rjmp	.+308    	; 0x166c <packetloop_icmp_tcp+0x2ce>

// do some basic length calculations 
uint16_t get_tcp_data_len(uint8_t *buf)
{
        int16_t i;
        i=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
    1538:	f7 01       	movw	r30, r14
    153a:	90 89       	ldd	r25, Z+16	; 0x10
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	21 89       	ldd	r18, Z+17	; 0x11
    1540:	02 2f       	mov	r16, r18
    1542:	10 e0       	ldi	r17, 0x00	; 0
    1544:	08 2b       	or	r16, r24
    1546:	19 2b       	or	r17, r25
        i-=IP_HEADER_LEN;
    1548:	26 a5       	ldd	r18, Z+46	; 0x2e
    154a:	82 2f       	mov	r24, r18
    154c:	82 95       	swap	r24
    154e:	8f 70       	andi	r24, 0x0F	; 15
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	08 1b       	sub	r16, r24
    155c:	19 0b       	sbc	r17, r25
        i-=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
    155e:	04 51       	subi	r16, 0x14	; 20
    1560:	10 40       	sbci	r17, 0x00	; 0
    1562:	17 ff       	sbrs	r17, 7
    1564:	02 c0       	rjmp	.+4      	; 0x156a <packetloop_icmp_tcp+0x1cc>
    1566:	00 e0       	ldi	r16, 0x00	; 0
    1568:	10 e0       	ldi	r17, 0x00	; 0
        if (i<=0){
                i=0;
        }
        return((uint16_t)i);
    156a:	e8 01       	movw	r28, r16
                        }
                        tcp_client_state=5;
                        return(0);
                }
                len=get_tcp_data_len(buf);
                if (tcp_client_state==2){
    156c:	80 91 8e 00 	lds	r24, 0x008E
    1570:	82 30       	cpi	r24, 0x02	; 2
    1572:	b1 f5       	brne	.+108    	; 0x15e0 <packetloop_icmp_tcp+0x242>
                        if ((buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (buf[TCP_FLAGS_P] &TCP_FLAGS_ACK_V)){
    1574:	31 ff       	sbrs	r19, 1
    1576:	24 c0       	rjmp	.+72     	; 0x15c0 <packetloop_icmp_tcp+0x222>
    1578:	34 ff       	sbrs	r19, 4
    157a:	22 c0       	rjmp	.+68     	; 0x15c0 <packetloop_icmp_tcp+0x222>
                                // synack, answer with ack
                                make_tcp_ack_from_any(buf,0,0);
    157c:	c7 01       	movw	r24, r14
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	70 e0       	ldi	r23, 0x00	; 0
    1582:	40 e0       	ldi	r20, 0x00	; 0
    1584:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <make_tcp_ack_from_any>
                                buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
    1588:	88 e1       	ldi	r24, 0x18	; 24
    158a:	d7 01       	movw	r26, r14
    158c:	9f 96       	adiw	r26, 0x2f	; 47
    158e:	8c 93       	st	X, r24

                                // Make a tcp message with data. When calling this function we must
                                // still have a valid tcp-ack in the buffer. In other words
                                // you have just called make_tcp_ack_from_any(buf,0).
                                if (client_tcp_datafill_callback){
    1590:	e0 91 a2 00 	lds	r30, 0x00A2
    1594:	f0 91 a3 00 	lds	r31, 0x00A3
    1598:	30 97       	sbiw	r30, 0x00	; 0
    159a:	19 f4       	brne	.+6      	; 0x15a2 <packetloop_icmp_tcp+0x204>
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	08 c0       	rjmp	.+16     	; 0x15b2 <packetloop_icmp_tcp+0x214>
                                        // in this case it is src port because the above 
                                        // make_tcp_ack_from_any swaps the dst and src port:
                                        len=(*client_tcp_datafill_callback)((buf[TCP_SRC_PORT_L_P]>>5)&0x7);
    15a2:	d7 01       	movw	r26, r14
    15a4:	93 96       	adiw	r26, 0x23	; 35
    15a6:	8c 91       	ld	r24, X
    15a8:	82 95       	swap	r24
    15aa:	86 95       	lsr	r24
    15ac:	87 70       	andi	r24, 0x07	; 7
    15ae:	09 95       	icall
    15b0:	bc 01       	movw	r22, r24
                                }else{
                                        // this is just to prevent a crash
                                        len=0;
                                }
                                tcp_client_state=3;
    15b2:	83 e0       	ldi	r24, 0x03	; 3
    15b4:	80 93 8e 00 	sts	0x008E, r24
                                make_tcp_ack_with_data_noflags(buf,len);
    15b8:	c7 01       	movw	r24, r14
    15ba:	0e 94 22 07 	call	0xe44	; 0xe44 <make_tcp_ack_with_data_noflags>
    15be:	b6 c0       	rjmp	.+364    	; 0x172c <packetloop_icmp_tcp+0x38e>
                        }else{
                                // reset only if we have sent a syn and don't get syn-ack back.
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	80 93 8e 00 	sts	0x008E, r24
                                // do not inform application layer as we retry.
                                len++;
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    15c6:	f7 01       	movw	r30, r14
    15c8:	87 a5       	ldd	r24, Z+47	; 0x2f
    15ca:	84 ff       	sbrs	r24, 4
    15cc:	03 c0       	rjmp	.+6      	; 0x15d4 <packetloop_icmp_tcp+0x236>
    15ce:	60 e0       	ldi	r22, 0x00	; 0
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	03 c0       	rjmp	.+6      	; 0x15da <packetloop_icmp_tcp+0x23c>
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
                                // do not inform application layer as we retry.
                                len++;
    15d4:	b8 01       	movw	r22, r16
    15d6:	6f 5f       	subi	r22, 0xFF	; 255
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
                                        // if packet was an ack then do not step the ack number
                                        len=0;
                                }
                                // refuse and reset the connection
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
    15da:	c7 01       	movw	r24, r14
    15dc:	44 e0       	ldi	r20, 0x04	; 4
    15de:	91 c0       	rjmp	.+290    	; 0x1702 <packetloop_icmp_tcp+0x364>
                                return(0);
                        }
                }
                // in tcp_client_state==3 we will normally first get an empty
                // ack-packet and then a ack-packet with data.
                if (tcp_client_state==3 && len>0){ 
    15e0:	83 30       	cpi	r24, 0x03	; 3
    15e2:	a1 f5       	brne	.+104    	; 0x164c <packetloop_icmp_tcp+0x2ae>
    15e4:	01 15       	cp	r16, r1
    15e6:	11 05       	cpc	r17, r1
    15e8:	89 f1       	breq	.+98     	; 0x164c <packetloop_icmp_tcp+0x2ae>
                        // our first real data packet
                        tcp_client_state=4;
    15ea:	84 e0       	ldi	r24, 0x04	; 4
    15ec:	80 93 8e 00 	sts	0x008E, r24
                        // return the data we received
                        if (client_tcp_result_callback){
    15f0:	e0 91 a0 00 	lds	r30, 0x00A0
    15f4:	f0 91 a1 00 	lds	r31, 0x00A1
    15f8:	30 97       	sbiw	r30, 0x00	; 0
    15fa:	41 f1       	breq	.+80     	; 0x164c <packetloop_icmp_tcp+0x2ae>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
    15fc:	d7 01       	movw	r26, r14
    15fe:	9e 96       	adiw	r26, 0x2e	; 46
    1600:	8c 91       	ld	r24, X
    1602:	82 95       	swap	r24
    1604:	8f 70       	andi	r24, 0x0F	; 15
    1606:	48 2f       	mov	r20, r24
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	44 0f       	add	r20, r20
    160c:	55 1f       	adc	r21, r21
    160e:	44 0f       	add	r20, r20
    1610:	55 1f       	adc	r21, r21
    1612:	c6 01       	movw	r24, r12
    1614:	08 97       	sbiw	r24, 0x08	; 8
    1616:	4e 5d       	subi	r20, 0xDE	; 222
    1618:	5f 4f       	sbci	r21, 0xFF	; 255
    161a:	84 17       	cp	r24, r20
    161c:	95 07       	cpc	r25, r21
    161e:	08 f4       	brcc	.+2      	; 0x1622 <packetloop_icmp_tcp+0x284>
    1620:	ac 01       	movw	r20, r24
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
                                        tcpstart=plen-8; // dummy but save
                                }
                                save_len=len;
                                if (tcpstart+len>plen){
    1622:	c8 01       	movw	r24, r16
    1624:	84 0f       	add	r24, r20
    1626:	95 1f       	adc	r25, r21
    1628:	c8 16       	cp	r12, r24
    162a:	d9 06       	cpc	r13, r25
    162c:	10 f0       	brcs	.+4      	; 0x1632 <packetloop_icmp_tcp+0x294>
    162e:	98 01       	movw	r18, r16
    1630:	03 c0       	rjmp	.+6      	; 0x1638 <packetloop_icmp_tcp+0x29a>
                                        save_len=plen-tcpstart;
    1632:	96 01       	movw	r18, r12
    1634:	24 1b       	sub	r18, r20
    1636:	35 0b       	sbc	r19, r21
                                }
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
    1638:	d7 01       	movw	r26, r14
    163a:	95 96       	adiw	r26, 0x25	; 37
    163c:	8c 91       	ld	r24, X
    163e:	82 95       	swap	r24
    1640:	86 95       	lsr	r24
    1642:	87 70       	andi	r24, 0x07	; 7
    1644:	60 e0       	ldi	r22, 0x00	; 0
    1646:	09 95       	icall
                        }
                        if (send_fin){
    1648:	88 23       	and	r24, r24
    164a:	59 f4       	brne	.+22     	; 0x1662 <packetloop_icmp_tcp+0x2c4>
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
                                tcp_client_state=5;
                                return(0);
                        }
                }
                if(tcp_client_state==5){
    164c:	80 91 8e 00 	lds	r24, 0x008E
    1650:	85 30       	cpi	r24, 0x05	; 5
    1652:	09 f4       	brne	.+2      	; 0x1656 <packetloop_icmp_tcp+0x2b8>
    1654:	6b c0       	rjmp	.+214    	; 0x172c <packetloop_icmp_tcp+0x38e>
                        // no more ack
                        return(0);
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    1656:	f7 01       	movw	r30, r14
    1658:	87 a5       	ldd	r24, Z+47	; 0x2f
    165a:	80 ff       	sbrs	r24, 0
    165c:	0b c0       	rjmp	.+22     	; 0x1674 <packetloop_icmp_tcp+0x2d6>
                        make_tcp_ack_from_any(buf,len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    165e:	0f 5f       	subi	r16, 0xFF	; 255
    1660:	1f 4f       	sbci	r17, 0xFF	; 255
    1662:	c7 01       	movw	r24, r14
    1664:	b8 01       	movw	r22, r16
    1666:	49 e0       	ldi	r20, 0x09	; 9
    1668:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <make_tcp_ack_from_any>
                        tcp_client_state=5; // connection terminated
    166c:	85 e0       	ldi	r24, 0x05	; 5
    166e:	80 93 8e 00 	sts	0x008E, r24
    1672:	5c c0       	rjmp	.+184    	; 0x172c <packetloop_icmp_tcp+0x38e>
                        return(0);
                }
                // ack all data (the web page may be long):
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
    1674:	01 15       	cp	r16, r1
    1676:	11 05       	cpc	r17, r1
    1678:	09 f4       	brne	.+2      	; 0x167c <packetloop_icmp_tcp+0x2de>
    167a:	5a c0       	rjmp	.+180    	; 0x1730 <packetloop_icmp_tcp+0x392>
                        make_tcp_ack_from_any(buf,len,0);
    167c:	c7 01       	movw	r24, r14
    167e:	b8 01       	movw	r22, r16
    1680:	3f c0       	rjmp	.+126    	; 0x1700 <packetloop_icmp_tcp+0x362>
                return(0);
        }
#endif // WWW_client||TCP_client
        //
        // tcp port web server start
        if (buf[TCP_DST_PORT_H_P]==wwwport_h && buf[TCP_DST_PORT_L_P]==wwwport_l){
    1682:	80 91 94 00 	lds	r24, 0x0094
    1686:	98 17       	cp	r25, r24
    1688:	09 f0       	breq	.+2      	; 0x168c <packetloop_icmp_tcp+0x2ee>
    168a:	50 c0       	rjmp	.+160    	; 0x172c <packetloop_icmp_tcp+0x38e>
    168c:	d7 01       	movw	r26, r14
    168e:	95 96       	adiw	r26, 0x25	; 37
    1690:	9c 91       	ld	r25, X
    1692:	95 97       	sbiw	r26, 0x25	; 37
    1694:	80 91 81 00 	lds	r24, 0x0081
    1698:	98 17       	cp	r25, r24
    169a:	09 f0       	breq	.+2      	; 0x169e <packetloop_icmp_tcp+0x300>
    169c:	47 c0       	rjmp	.+142    	; 0x172c <packetloop_icmp_tcp+0x38e>
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
    169e:	9f 96       	adiw	r26, 0x2f	; 47
    16a0:	8c 91       	ld	r24, X
    16a2:	81 ff       	sbrs	r24, 1
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <packetloop_icmp_tcp+0x310>
                        make_tcp_synack_from_syn(buf);
    16a6:	c7 01       	movw	r24, r14
    16a8:	0e 94 67 06 	call	0xcce	; 0xcce <make_tcp_synack_from_syn>
    16ac:	3f c0       	rjmp	.+126    	; 0x172c <packetloop_icmp_tcp+0x38e>
                        // make_tcp_synack_from_syn does already send the syn,ack
                        return(0);
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    16ae:	84 ff       	sbrs	r24, 4
    16b0:	3d c0       	rjmp	.+122    	; 0x172c <packetloop_icmp_tcp+0x38e>

// do some basic length calculations 
uint16_t get_tcp_data_len(uint8_t *buf)
{
        int16_t i;
        i=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
    16b2:	f7 01       	movw	r30, r14
    16b4:	90 89       	ldd	r25, Z+16	; 0x10
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	21 89       	ldd	r18, Z+17	; 0x11
    16ba:	42 2f       	mov	r20, r18
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	48 2b       	or	r20, r24
    16c0:	59 2b       	or	r21, r25
        i-=IP_HEADER_LEN;
    16c2:	26 a5       	ldd	r18, Z+46	; 0x2e
    16c4:	82 2f       	mov	r24, r18
    16c6:	82 95       	swap	r24
    16c8:	8f 70       	andi	r24, 0x0F	; 15
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	48 1b       	sub	r20, r24
    16d6:	59 0b       	sbc	r21, r25
        i-=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
    16d8:	44 51       	subi	r20, 0x14	; 20
    16da:	50 40       	sbci	r21, 0x00	; 0
        if (i<=0){
                i=0;
        }
        return((uint16_t)i);
    16dc:	57 ff       	sbrs	r21, 7
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <packetloop_icmp_tcp+0x346>
    16e0:	40 e0       	ldi	r20, 0x00	; 0
    16e2:	50 e0       	ldi	r21, 0x00	; 0
                        make_tcp_synack_from_syn(buf);
                        // make_tcp_synack_from_syn does already send the syn,ack
                        return(0);
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
                        info_data_len=get_tcp_data_len(buf);
    16e4:	50 93 96 00 	sts	0x0096, r21
    16e8:	40 93 95 00 	sts	0x0095, r20
                        // we can possibly have no data, just ack:
                        // Here we misuse plen for something else to save a variable.
                        // plen is now the position of start of the tcp user data.
                        if (info_data_len==0){
    16ec:	45 2b       	or	r20, r21
    16ee:	61 f4       	brne	.+24     	; 0x1708 <packetloop_icmp_tcp+0x36a>
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    16f0:	d7 01       	movw	r26, r14
    16f2:	9f 96       	adiw	r26, 0x2f	; 47
    16f4:	8c 91       	ld	r24, X
    16f6:	80 ff       	sbrs	r24, 0
    16f8:	19 c0       	rjmp	.+50     	; 0x172c <packetloop_icmp_tcp+0x38e>
                                        // finack, answer with ack
                                        make_tcp_ack_from_any(buf,0,0);
    16fa:	c7 01       	movw	r24, r14
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	40 e0       	ldi	r20, 0x00	; 0
    1702:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <make_tcp_ack_from_any>
    1706:	12 c0       	rjmp	.+36     	; 0x172c <packetloop_icmp_tcp+0x38e>
                                }
                                // just an ack with no data, wait for next packet
                                return(0);
                        }
                        // Here we misuse len for something else to save a variable
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
    1708:	f7 01       	movw	r30, r14
    170a:	86 a5       	ldd	r24, Z+46	; 0x2e
    170c:	82 95       	swap	r24
    170e:	8f 70       	andi	r24, 0x0F	; 15
    1710:	c8 2f       	mov	r28, r24
    1712:	d0 e0       	ldi	r29, 0x00	; 0
    1714:	cc 0f       	add	r28, r28
    1716:	dd 1f       	adc	r29, r29
    1718:	cc 0f       	add	r28, r28
    171a:	dd 1f       	adc	r29, r29
    171c:	a2 96       	adiw	r28, 0x22	; 34
                        // check for data corruption
                        if (len>plen-8){
    171e:	88 ef       	ldi	r24, 0xF8	; 248
    1720:	9f ef       	ldi	r25, 0xFF	; 255
    1722:	c8 0e       	add	r12, r24
    1724:	d9 1e       	adc	r13, r25
    1726:	cc 16       	cp	r12, r28
    1728:	dd 06       	cpc	r13, r29
    172a:	10 f4       	brcc	.+4      	; 0x1730 <packetloop_icmp_tcp+0x392>
    172c:	c0 e0       	ldi	r28, 0x00	; 0
    172e:	d0 e0       	ldi	r29, 0x00	; 0
                        }
                        return(len);
                }
        }
        return(0);
}
    1730:	ce 01       	movw	r24, r28
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	1f 91       	pop	r17
    1738:	0f 91       	pop	r16
    173a:	ff 90       	pop	r15
    173c:	ef 90       	pop	r14
    173e:	df 90       	pop	r13
    1740:	cf 90       	pop	r12
    1742:	08 95       	ret
                }
#if defined (NTP_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
                if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
                        // is it an arp reply 
                        if (client_store_gw_mac(buf)){
                                waitgwmac=WGW_HAVE_GW_MAC;
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	80 93 8d 00 	sts	0x008D, r24
    174a:	f0 cf       	rjmp	.-32     	; 0x172c <packetloop_icmp_tcp+0x38e>
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcpsrvip)==0){
                        return(0);
                }
                // if we get a reset:
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_RST_V){
    174c:	d7 01       	movw	r26, r14
    174e:	9f 96       	adiw	r26, 0x2f	; 47
    1750:	8c 91       	ld	r24, X
    1752:	38 2f       	mov	r19, r24
    1754:	82 fd       	sbrc	r24, 2
    1756:	dc ce       	rjmp	.-584    	; 0x1510 <packetloop_icmp_tcp+0x172>
    1758:	ef ce       	rjmp	.-546    	; 0x1538 <packetloop_icmp_tcp+0x19a>

0000175a <find_key_val>:
//
// The returned value is stored in strbuf. You must allocate
// enough storage for strbuf, maxlen is the size of strbuf.
// I.e the value it is declated with: strbuf[5]-> maxlen=5
uint8_t find_key_val(char *str,char *strbuf, uint8_t maxlen,char *key)
{
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	dc 01       	movw	r26, r24
    1760:	eb 01       	movw	r28, r22
    1762:	72 2f       	mov	r23, r18
    1764:	63 2f       	mov	r22, r19
    1766:	82 2f       	mov	r24, r18
    1768:	93 2f       	mov	r25, r19
    176a:	9c 01       	movw	r18, r24
    176c:	f9 01       	movw	r30, r18
    176e:	50 e0       	ldi	r21, 0x00	; 0
    1770:	16 c0       	rjmp	.+44     	; 0x179e <find_key_val+0x44>
        uint8_t found=0;
        uint8_t i=0;
        char *kp;
        kp=key;
        while(*str &&  *str!=' ' && *str!='\n' && found==0){
                if (*str == *kp){
    1772:	80 81       	ld	r24, Z
    1774:	98 17       	cp	r25, r24
    1776:	71 f4       	brne	.+28     	; 0x1794 <find_key_val+0x3a>
                        kp++;
    1778:	31 96       	adiw	r30, 0x01	; 1
                        if (*kp == '\0'){
    177a:	80 81       	ld	r24, Z
    177c:	88 23       	and	r24, r24
    177e:	71 f4       	brne	.+28     	; 0x179c <find_key_val+0x42>
                                str++;
    1780:	11 96       	adiw	r26, 0x01	; 1
                                kp=key;
                                if (*str == '='){
    1782:	8c 91       	ld	r24, X
    1784:	8d 33       	cpi	r24, 0x3D	; 61
    1786:	31 f4       	brne	.+12     	; 0x1794 <find_key_val+0x3a>
    1788:	87 2f       	mov	r24, r23
    178a:	96 2f       	mov	r25, r22
    178c:	9c 01       	movw	r18, r24
    178e:	f9 01       	movw	r30, r18
    1790:	51 e0       	ldi	r21, 0x01	; 1
    1792:	04 c0       	rjmp	.+8      	; 0x179c <find_key_val+0x42>
    1794:	87 2f       	mov	r24, r23
    1796:	96 2f       	mov	r25, r22
    1798:	9c 01       	movw	r18, r24
    179a:	f9 01       	movw	r30, r18
                                }
                        }
                }else{
                        kp=key;
                }
                str++;
    179c:	11 96       	adiw	r26, 0x01	; 1
{
        uint8_t found=0;
        uint8_t i=0;
        char *kp;
        kp=key;
        while(*str &&  *str!=' ' && *str!='\n' && found==0){
    179e:	9c 91       	ld	r25, X
    17a0:	99 23       	and	r25, r25
    17a2:	39 f0       	breq	.+14     	; 0x17b2 <find_key_val+0x58>
    17a4:	90 32       	cpi	r25, 0x20	; 32
    17a6:	29 f0       	breq	.+10     	; 0x17b2 <find_key_val+0x58>
    17a8:	9a 30       	cpi	r25, 0x0A	; 10
    17aa:	19 f0       	breq	.+6      	; 0x17b2 <find_key_val+0x58>
    17ac:	55 23       	and	r21, r21
    17ae:	09 f3       	breq	.-62     	; 0x1772 <find_key_val+0x18>
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <find_key_val+0x60>
                }else{
                        kp=key;
                }
                str++;
        }
        if (found==1){
    17b2:	51 30       	cpi	r21, 0x01	; 1
    17b4:	11 f0       	breq	.+4      	; 0x17ba <find_key_val+0x60>
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	18 c0       	rjmp	.+48     	; 0x17ea <find_key_val+0x90>
    17ba:	6a 2f       	mov	r22, r26
                // copy the value to a buffer and terminate it with '\0'
                while(*str &&  *str!=' ' && *str!='\n' && *str!='&' && i<maxlen-1){
    17bc:	50 e0       	ldi	r21, 0x00	; 0
    17be:	41 50       	subi	r20, 0x01	; 1
    17c0:	50 40       	sbci	r21, 0x00	; 0
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <find_key_val+0x6e>
                        *strbuf=*str;
    17c4:	29 93       	st	Y+, r18
                        i++;
                        str++;
    17c6:	11 96       	adiw	r26, 0x01	; 1
                        strbuf++;
    17c8:	3a 2f       	mov	r19, r26
    17ca:	36 1b       	sub	r19, r22
                }
                str++;
        }
        if (found==1){
                // copy the value to a buffer and terminate it with '\0'
                while(*str &&  *str!=' ' && *str!='\n' && *str!='&' && i<maxlen-1){
    17cc:	2c 91       	ld	r18, X
    17ce:	22 23       	and	r18, r18
    17d0:	59 f0       	breq	.+22     	; 0x17e8 <find_key_val+0x8e>
    17d2:	20 32       	cpi	r18, 0x20	; 32
    17d4:	49 f0       	breq	.+18     	; 0x17e8 <find_key_val+0x8e>
    17d6:	2a 30       	cpi	r18, 0x0A	; 10
    17d8:	39 f0       	breq	.+14     	; 0x17e8 <find_key_val+0x8e>
    17da:	26 32       	cpi	r18, 0x26	; 38
    17dc:	29 f0       	breq	.+10     	; 0x17e8 <find_key_val+0x8e>
    17de:	83 2f       	mov	r24, r19
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	84 17       	cp	r24, r20
    17e4:	95 07       	cpc	r25, r21
    17e6:	74 f3       	brlt	.-36     	; 0x17c4 <find_key_val+0x6a>
                        *strbuf=*str;
                        i++;
                        str++;
                        strbuf++;
                }
                *strbuf='\0';
    17e8:	18 82       	st	Y, r1
        }
        // return the length of the value
        return(i);
}
    17ea:	83 2f       	mov	r24, r19
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	08 95       	ret

000017f2 <h2int>:

// convert a single hex digit character to its integer value
unsigned char h2int(char c)
{
    17f2:	98 2f       	mov	r25, r24
        if (c >= '0' && c <='9'){
    17f4:	80 53       	subi	r24, 0x30	; 48
    17f6:	8a 30       	cpi	r24, 0x0A	; 10
    17f8:	68 f0       	brcs	.+26     	; 0x1814 <h2int+0x22>
                return((unsigned char)c - '0');
        }
        if (c >= 'a' && c <='f'){
    17fa:	81 53       	subi	r24, 0x31	; 49
    17fc:	86 30       	cpi	r24, 0x06	; 6
    17fe:	10 f4       	brcc	.+4      	; 0x1804 <h2int+0x12>
                return((unsigned char)c - 'a' + 10);
    1800:	86 5f       	subi	r24, 0xF6	; 246
    1802:	08 95       	ret
        }
        if (c >= 'A' && c <='F'){
    1804:	89 2f       	mov	r24, r25
    1806:	81 54       	subi	r24, 0x41	; 65
    1808:	86 30       	cpi	r24, 0x06	; 6
    180a:	10 f0       	brcs	.+4      	; 0x1810 <h2int+0x1e>
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	08 95       	ret
                return((unsigned char)c - 'A' + 10);
    1810:	89 2f       	mov	r24, r25
    1812:	87 53       	subi	r24, 0x37	; 55
        }
        return(0);
}
    1814:	08 95       	ret

00001816 <urldecode>:

// decode a url string e.g "hello%20joe" or "hello+joe" becomes "hello joe"
void urldecode(char *urlbuf)
{
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	fc 01       	movw	r30, r24
    181c:	ec 01       	movw	r28, r24
    181e:	37 c0       	rjmp	.+110    	; 0x188e <urldecode+0x78>
        char c;
        char *dst;
        dst=urlbuf;
        while ((c = *urlbuf)) {
                if (c == '+') c = ' ';
    1820:	8b 32       	cpi	r24, 0x2B	; 43
    1822:	11 f4       	brne	.+4      	; 0x1828 <urldecode+0x12>
    1824:	80 e2       	ldi	r24, 0x20	; 32
    1826:	31 c0       	rjmp	.+98     	; 0x188a <urldecode+0x74>
                if (c == '%') {
    1828:	85 32       	cpi	r24, 0x25	; 37
    182a:	79 f5       	brne	.+94     	; 0x188a <urldecode+0x74>
                        urlbuf++;
    182c:	df 01       	movw	r26, r30
    182e:	11 96       	adiw	r26, 0x01	; 1
                        c = *urlbuf;
    1830:	91 81       	ldd	r25, Z+1	; 0x01
                        urlbuf++;
    1832:	fd 01       	movw	r30, r26
    1834:	31 96       	adiw	r30, 0x01	; 1
}

// convert a single hex digit character to its integer value
unsigned char h2int(char c)
{
        if (c >= '0' && c <='9'){
    1836:	39 2f       	mov	r19, r25
    1838:	30 53       	subi	r19, 0x30	; 48
    183a:	3a 30       	cpi	r19, 0x0A	; 10
    183c:	70 f0       	brcs	.+28     	; 0x185a <urldecode+0x44>
                return((unsigned char)c - '0');
        }
        if (c >= 'a' && c <='f'){
    183e:	89 2f       	mov	r24, r25
    1840:	81 56       	subi	r24, 0x61	; 97
    1842:	86 30       	cpi	r24, 0x06	; 6
    1844:	10 f4       	brcc	.+4      	; 0x184a <urldecode+0x34>
                return((unsigned char)c - 'a' + 10);
    1846:	37 52       	subi	r19, 0x27	; 39
    1848:	08 c0       	rjmp	.+16     	; 0x185a <urldecode+0x44>
        }
        if (c >= 'A' && c <='F'){
    184a:	89 2f       	mov	r24, r25
    184c:	81 54       	subi	r24, 0x41	; 65
    184e:	86 30       	cpi	r24, 0x06	; 6
    1850:	10 f0       	brcs	.+4      	; 0x1856 <urldecode+0x40>
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	02 c0       	rjmp	.+4      	; 0x185a <urldecode+0x44>
                return((unsigned char)c - 'A' + 10);
    1856:	39 2f       	mov	r19, r25
    1858:	37 53       	subi	r19, 0x37	; 55
                if (c == '+') c = ' ';
                if (c == '%') {
                        urlbuf++;
                        c = *urlbuf;
                        urlbuf++;
                        c = (h2int(c) << 4) | h2int(*urlbuf);
    185a:	11 96       	adiw	r26, 0x01	; 1
    185c:	2c 91       	ld	r18, X
}

// convert a single hex digit character to its integer value
unsigned char h2int(char c)
{
        if (c >= '0' && c <='9'){
    185e:	92 2f       	mov	r25, r18
    1860:	90 53       	subi	r25, 0x30	; 48
    1862:	9a 30       	cpi	r25, 0x0A	; 10
    1864:	70 f0       	brcs	.+28     	; 0x1882 <urldecode+0x6c>
                return((unsigned char)c - '0');
        }
        if (c >= 'a' && c <='f'){
    1866:	82 2f       	mov	r24, r18
    1868:	81 56       	subi	r24, 0x61	; 97
    186a:	86 30       	cpi	r24, 0x06	; 6
    186c:	10 f4       	brcc	.+4      	; 0x1872 <urldecode+0x5c>
                return((unsigned char)c - 'a' + 10);
    186e:	97 52       	subi	r25, 0x27	; 39
    1870:	08 c0       	rjmp	.+16     	; 0x1882 <urldecode+0x6c>
        }
        if (c >= 'A' && c <='F'){
    1872:	82 2f       	mov	r24, r18
    1874:	81 54       	subi	r24, 0x41	; 65
    1876:	86 30       	cpi	r24, 0x06	; 6
    1878:	10 f0       	brcs	.+4      	; 0x187e <urldecode+0x68>
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <urldecode+0x6c>
                return((unsigned char)c - 'A' + 10);
    187e:	92 2f       	mov	r25, r18
    1880:	97 53       	subi	r25, 0x37	; 55
                if (c == '+') c = ' ';
                if (c == '%') {
                        urlbuf++;
                        c = *urlbuf;
                        urlbuf++;
                        c = (h2int(c) << 4) | h2int(*urlbuf);
    1882:	83 2f       	mov	r24, r19
    1884:	82 95       	swap	r24
    1886:	80 7f       	andi	r24, 0xF0	; 240
    1888:	89 2b       	or	r24, r25
                }
                *dst = c;
    188a:	89 93       	st	Y+, r24
                dst++;
                urlbuf++;
    188c:	31 96       	adiw	r30, 0x01	; 1
void urldecode(char *urlbuf)
{
        char c;
        char *dst;
        dst=urlbuf;
        while ((c = *urlbuf)) {
    188e:	80 81       	ld	r24, Z
    1890:	88 23       	and	r24, r24
    1892:	31 f6       	brne	.-116    	; 0x1820 <urldecode+0xa>
                }
                *dst = c;
                dst++;
                urlbuf++;
        }
        *dst = '\0';
    1894:	18 82       	st	Y, r1
}
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	08 95       	ret

0000189c <int2h>:
#ifdef URLENCODE_websrv_help

// convert a single character to a 2 digit hex str
// a terminating '\0' is added
void int2h(char c, char *hstr)
{
    189c:	38 2f       	mov	r19, r24
    189e:	fb 01       	movw	r30, r22
        hstr[1]=(c & 0xf)+'0';
    18a0:	28 2f       	mov	r18, r24
    18a2:	2f 70       	andi	r18, 0x0F	; 15
    18a4:	20 5d       	subi	r18, 0xD0	; 208
    18a6:	21 83       	std	Z+1, r18	; 0x01
    18a8:	20 53       	subi	r18, 0x30	; 48
        if ((c & 0xf) >9){
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	8f 70       	andi	r24, 0x0F	; 15
    18ae:	90 70       	andi	r25, 0x00	; 0
    18b0:	0a 97       	sbiw	r24, 0x0a	; 10
    18b2:	14 f0       	brlt	.+4      	; 0x18b8 <int2h+0x1c>
                hstr[1]=(c & 0xf) - 10 + 'a';
    18b4:	29 5a       	subi	r18, 0xA9	; 169
    18b6:	21 83       	std	Z+1, r18	; 0x01
        }
        c=(c>>4)&0xf;
    18b8:	83 2f       	mov	r24, r19
    18ba:	82 95       	swap	r24
    18bc:	8f 70       	andi	r24, 0x0F	; 15
        hstr[0]=c+'0';
    18be:	80 5d       	subi	r24, 0xD0	; 208
    18c0:	80 83       	st	Z, r24
    18c2:	80 53       	subi	r24, 0x30	; 48
        if (c > 9){
    18c4:	8a 30       	cpi	r24, 0x0A	; 10
    18c6:	10 f0       	brcs	.+4      	; 0x18cc <int2h+0x30>
                hstr[0]=c - 10 + 'a';
    18c8:	89 5a       	subi	r24, 0xA9	; 169
    18ca:	80 83       	st	Z, r24
        }
        hstr[2]='\0';
    18cc:	12 82       	std	Z+2, r1	; 0x02
}
    18ce:	08 95       	ret

000018d0 <dnslkup_haveanswer>:


uint8_t dnslkup_haveanswer(void)
{       
        return(haveDNSanswer);
}
    18d0:	80 91 8c 00 	lds	r24, 0x008C
    18d4:	08 95       	ret

000018d6 <dnslkup_get_error_info>:

uint8_t dnslkup_get_error_info(void)
{       
        return(dns_ansError);
}
    18d6:	80 91 8b 00 	lds	r24, 0x008B
    18da:	08 95       	ret

000018dc <dnslkup_getip>:

uint8_t *dnslkup_getip(void)
{       
        return(dns_answerip);
}
    18dc:	82 ec       	ldi	r24, 0xC2	; 194
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	08 95       	ret

000018e2 <dnslkup_request>:
// send a DNS udp request packet
// See http://www.ietf.org/rfc/rfc1034.txt 
// and http://www.ietf.org/rfc/rfc1035.txt
//
void dnslkup_request(uint8_t *buf,const prog_char *progmem_hostname)
{
    18e2:	ef 92       	push	r14
    18e4:	ff 92       	push	r15
    18e6:	1f 93       	push	r17
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	ec 01       	movw	r28, r24
    18ee:	7b 01       	movw	r14, r22
        uint8_t i,lenpos,lencnt;
        char c;
        haveDNSanswer=0;
    18f0:	10 92 8c 00 	sts	0x008C, r1
        dns_ansError=0;
    18f4:	10 92 8b 00 	sts	0x008B, r1
        dnstid_l++; // increment for next request, finally wrap
    18f8:	10 91 8a 00 	lds	r17, 0x008A
    18fc:	1f 5f       	subi	r17, 0xFF	; 255
    18fe:	10 93 8a 00 	sts	0x008A, r17
        send_udp_prepare(buf,(DNSCLIENT_SRC_PORT_H<<8)|(dnstid_l&0xff),dnsip,53);
    1902:	61 2f       	mov	r22, r17
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	70 6e       	ori	r23, 0xE0	; 224
    1908:	4a e7       	ldi	r20, 0x7A	; 122
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	25 e3       	ldi	r18, 0x35	; 53
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	0e 94 6f 07 	call	0xede	; 0xede <send_udp_prepare>
        // fill tid:
        //buf[UDP_DATA_P] see below
        buf[UDP_DATA_P+1]=dnstid_l;
    1914:	1b a7       	std	Y+43, r17	; 0x2b
        buf[UDP_DATA_P+2]=1; // flags, standard recursive query
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	8c a7       	std	Y+44, r24	; 0x2c
    191a:	fe 01       	movw	r30, r28
    191c:	bd 96       	adiw	r30, 0x2d	; 45
    191e:	83 e0       	ldi	r24, 0x03	; 3
        i=3;
        // most fields are zero, here we zero everything and fill later
        while(i<10){ 
                buf[UDP_DATA_P+i]=0;
    1920:	11 92       	st	Z+, r1
                i++;
    1922:	8f 5f       	subi	r24, 0xFF	; 255
        //buf[UDP_DATA_P] see below
        buf[UDP_DATA_P+1]=dnstid_l;
        buf[UDP_DATA_P+2]=1; // flags, standard recursive query
        i=3;
        // most fields are zero, here we zero everything and fill later
        while(i<10){ 
    1924:	8a 30       	cpi	r24, 0x0A	; 10
    1926:	e1 f7       	brne	.-8      	; 0x1920 <dnslkup_request+0x3e>
                buf[UDP_DATA_P+i]=0;
                i++;
        }
        buf[UDP_DATA_P+5]=1; // 1 question
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	8f a7       	std	Y+47, r24	; 0x2f
    192c:	8d e0       	ldi	r24, 0x0D	; 13
    192e:	3c e0       	ldi	r19, 0x0C	; 12
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e c0       	rjmp	.+28     	; 0x1950 <dnslkup_request+0x6e>
        // the first len starts at i=12
        lenpos=12;
        i=13;
        lencnt=0;
        while ((c = pgm_read_byte(progmem_hostname++))) {
                if (c=='.'){
    1934:	2e 32       	cpi	r18, 0x2E	; 46
    1936:	31 f4       	brne	.+12     	; 0x1944 <dnslkup_request+0x62>
                        buf[UDP_DATA_P+lenpos]=lencnt;
    1938:	fe 01       	movw	r30, r28
    193a:	e3 0f       	add	r30, r19
    193c:	f1 1d       	adc	r31, r1
    193e:	92 a7       	std	Z+42, r25	; 0x2a
    1940:	38 2f       	mov	r19, r24
    1942:	90 e0       	ldi	r25, 0x00	; 0
                        lencnt=0;
                        lenpos=i;
                }
                buf[UDP_DATA_P+i]=c;
    1944:	fe 01       	movw	r30, r28
    1946:	e8 0f       	add	r30, r24
    1948:	f1 1d       	adc	r31, r1
    194a:	22 a7       	std	Z+42, r18	; 0x2a
                lencnt++;
    194c:	9f 5f       	subi	r25, 0xFF	; 255
                i++;
    194e:	8f 5f       	subi	r24, 0xFF	; 255
    1950:	f7 01       	movw	r30, r14
        // 
        // the first len starts at i=12
        lenpos=12;
        i=13;
        lencnt=0;
        while ((c = pgm_read_byte(progmem_hostname++))) {
    1952:	08 94       	sec
    1954:	e1 1c       	adc	r14, r1
    1956:	f1 1c       	adc	r15, r1
    1958:	24 91       	lpm	r18, Z+
    195a:	22 23       	and	r18, r18
    195c:	59 f7       	brne	.-42     	; 0x1934 <dnslkup_request+0x52>
                }
                buf[UDP_DATA_P+i]=c;
                lencnt++;
                i++;
        }
        buf[UDP_DATA_P+lenpos]=lencnt-1;
    195e:	fe 01       	movw	r30, r28
    1960:	e3 0f       	add	r30, r19
    1962:	f1 1d       	adc	r31, r1
    1964:	91 50       	subi	r25, 0x01	; 1
    1966:	92 a7       	std	Z+42, r25	; 0x2a
        buf[UDP_DATA_P+i]=0; // terminate with zero, means root domain.
    1968:	fe 01       	movw	r30, r28
    196a:	e8 0f       	add	r30, r24
    196c:	f1 1d       	adc	r31, r1
    196e:	12 a6       	std	Z+42, r1	; 0x2a
        i++;
    1970:	8f 5f       	subi	r24, 0xFF	; 255
        buf[UDP_DATA_P+i]=0;
    1972:	fe 01       	movw	r30, r28
    1974:	e8 0f       	add	r30, r24
    1976:	f1 1d       	adc	r31, r1
    1978:	12 a6       	std	Z+42, r1	; 0x2a
        i++;
    197a:	8f 5f       	subi	r24, 0xFF	; 255
        buf[UDP_DATA_P+i]=1; // type A
    197c:	fe 01       	movw	r30, r28
    197e:	e8 0f       	add	r30, r24
    1980:	f1 1d       	adc	r31, r1
    1982:	91 e0       	ldi	r25, 0x01	; 1
    1984:	92 a7       	std	Z+42, r25	; 0x2a
        i++;
    1986:	68 2f       	mov	r22, r24
    1988:	6f 5f       	subi	r22, 0xFF	; 255
        buf[UDP_DATA_P+i]=0; 
    198a:	fe 01       	movw	r30, r28
    198c:	e6 0f       	add	r30, r22
    198e:	f1 1d       	adc	r31, r1
    1990:	12 a6       	std	Z+42, r1	; 0x2a
        i++;
    1992:	6f 5f       	subi	r22, 0xFF	; 255
        buf[UDP_DATA_P+i]=1; // class IN
    1994:	fe 01       	movw	r30, r28
    1996:	e6 0f       	add	r30, r22
    1998:	f1 1d       	adc	r31, r1
    199a:	92 a7       	std	Z+42, r25	; 0x2a
        i++;
    199c:	6f 5f       	subi	r22, 0xFF	; 255
        // we encode the length into the upper byte of the TID
        // this way we can easily jump over the query section
        // of the answer:
        buf[UDP_DATA_P]=i-12;
    199e:	89 50       	subi	r24, 0x09	; 9
    19a0:	8a a7       	std	Y+42, r24	; 0x2a
        send_udp_transmit(buf,i);
    19a2:	ce 01       	movw	r24, r28
    19a4:	0e 94 c4 07 	call	0xf88	; 0xf88 <send_udp_transmit>
}
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	ff 90       	pop	r15
    19b0:	ef 90       	pop	r14
    19b2:	08 95       	ret

000019b4 <udp_client_check_for_dns_answer>:

// process the answer from the ntp server:
// return 1 on sucessful processing of answer.
// We set also the variable haveDNSanswer
uint8_t udp_client_check_for_dns_answer(uint8_t *buf,uint16_t plen){
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	ec 01       	movw	r28, r24
        uint8_t j,i;
        if (plen<70){
    19ba:	66 34       	cpi	r22, 0x46	; 70
    19bc:	71 05       	cpc	r23, r1
    19be:	08 f4       	brcc	.+2      	; 0x19c2 <udp_client_check_for_dns_answer+0xe>
    19c0:	4e c0       	rjmp	.+156    	; 0x1a5e <udp_client_check_for_dns_answer+0xaa>
                return(0);
        }
        if (buf[UDP_SRC_PORT_L_P]!=53){
    19c2:	8b a1       	ldd	r24, Y+35	; 0x23
    19c4:	85 33       	cpi	r24, 0x35	; 53
    19c6:	09 f0       	breq	.+2      	; 0x19ca <udp_client_check_for_dns_answer+0x16>
    19c8:	4a c0       	rjmp	.+148    	; 0x1a5e <udp_client_check_for_dns_answer+0xaa>
                // not from a DNS
                return(0);
        }
        if (buf[UDP_DST_PORT_H_P]!=DNSCLIENT_SRC_PORT_H){ 
    19ca:	8c a1       	ldd	r24, Y+36	; 0x24
    19cc:	80 3e       	cpi	r24, 0xE0	; 224
    19ce:	09 f0       	breq	.+2      	; 0x19d2 <udp_client_check_for_dns_answer+0x1e>
    19d0:	46 c0       	rjmp	.+140    	; 0x1a5e <udp_client_check_for_dns_answer+0xaa>
                return(0);
        }
        // we use the TID also as port:
        if (buf[UDP_DST_PORT_L_P]!=dnstid_l){ 
    19d2:	9d a1       	ldd	r25, Y+37	; 0x25
    19d4:	80 91 8a 00 	lds	r24, 0x008A
    19d8:	98 17       	cp	r25, r24
    19da:	09 f0       	breq	.+2      	; 0x19de <udp_client_check_for_dns_answer+0x2a>
    19dc:	40 c0       	rjmp	.+128    	; 0x1a5e <udp_client_check_for_dns_answer+0xaa>
        // is the packet for my IP:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
        }
        */
        if (buf[UDP_DATA_P+1]!=dnstid_l){ 
    19de:	8b a5       	ldd	r24, Y+43	; 0x2b
    19e0:	89 17       	cp	r24, r25
    19e2:	e9 f5       	brne	.+122    	; 0x1a5e <udp_client_check_for_dns_answer+0xaa>
                return(0);
        }
        // check flags lower byte:
        if ((buf[UDP_DATA_P+3]&0x8F)!=0x80){ 
    19e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    19e6:	8f 78       	andi	r24, 0x8F	; 143
    19e8:	80 38       	cpi	r24, 0x80	; 128
    19ea:	11 f0       	breq	.+4      	; 0x19f0 <udp_client_check_for_dns_answer+0x3c>
                // there is an error or server does not support recursive
                // queries. We can only work with servers that support recursive
                // queries.
                dns_ansError=1;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	22 c0       	rjmp	.+68     	; 0x1a34 <udp_client_check_for_dns_answer+0x80>
        //
        // UDP_DATA_P+12+querylen is first byte of first answer.
        // The answer contains again the domain name and we need to
        // jump over it to find the IP. This part can be abbreviated by
        // the use of 2 byte pointers. See RFC 1035.
        i=12+buf[UDP_DATA_P]; // we encoded the query len into tid
    19f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    19f2:	29 2f       	mov	r18, r25
    19f4:	24 5f       	subi	r18, 0xF4	; 244
        if (buf[UDP_DATA_P+i] & 0xc0){
    19f6:	fe 01       	movw	r30, r28
    19f8:	e2 0f       	add	r30, r18
    19fa:	f1 1d       	adc	r31, r1
    19fc:	82 a5       	ldd	r24, Z+42	; 0x2a
    19fe:	80 7c       	andi	r24, 0xC0	; 192
    1a00:	59 f0       	breq	.+22     	; 0x1a18 <udp_client_check_for_dns_answer+0x64>
                // pointer
                i+=2;
    1a02:	2e 5f       	subi	r18, 0xFE	; 254
    1a04:	10 c0       	rjmp	.+32     	; 0x1a26 <udp_client_check_for_dns_answer+0x72>
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
                        i++;
    1a06:	2f 5f       	subi	r18, 0xFF	; 255
                        if (buf[UDP_DATA_P+i]==0){
    1a08:	fe 01       	movw	r30, r28
    1a0a:	e2 0f       	add	r30, r18
    1a0c:	f1 1d       	adc	r31, r1
    1a0e:	82 a5       	ldd	r24, Z+42	; 0x2a
    1a10:	88 23       	and	r24, r24
    1a12:	21 f4       	brne	.+8      	; 0x1a1c <udp_client_check_for_dns_answer+0x68>
                                i++;
    1a14:	2f 5f       	subi	r18, 0xFF	; 255
    1a16:	07 c0       	rjmp	.+14     	; 0x1a26 <udp_client_check_for_dns_answer+0x72>
                // pointer
                i+=2;
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
    1a18:	61 53       	subi	r22, 0x31	; 49
    1a1a:	70 40       	sbci	r23, 0x00	; 0
    1a1c:	82 2f       	mov	r24, r18
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	86 17       	cp	r24, r22
    1a22:	97 07       	cpc	r25, r23
    1a24:	80 f3       	brcs	.-32     	; 0x1a06 <udp_client_check_for_dns_answer+0x52>
                                break;
                        }
                }
        }
        // i is now pointing to the high octet of the type field
        if (buf[UDP_DATA_P+i+9] !=4 ){
    1a26:	fe 01       	movw	r30, r28
    1a28:	e2 0f       	add	r30, r18
    1a2a:	f1 1d       	adc	r31, r1
    1a2c:	83 a9       	ldd	r24, Z+51	; 0x33
    1a2e:	84 30       	cpi	r24, 0x04	; 4
    1a30:	21 f0       	breq	.+8      	; 0x1a3a <udp_client_check_for_dns_answer+0x86>
                dns_ansError=2; // not IPv4
    1a32:	82 e0       	ldi	r24, 0x02	; 2
    1a34:	80 93 8b 00 	sts	0x008B, r24
    1a38:	12 c0       	rjmp	.+36     	; 0x1a5e <udp_client_check_for_dns_answer+0xaa>
                return(0);
    1a3a:	26 5f       	subi	r18, 0xF6	; 246
    1a3c:	a2 2f       	mov	r26, r18
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	9a 96       	adiw	r26, 0x2a	; 42
    1a42:	ac 0f       	add	r26, r28
    1a44:	bd 1f       	adc	r27, r29
    1a46:	e2 ec       	ldi	r30, 0xC2	; 194
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
        }
        i+=10;
        j=0;
        while(j<4){
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
    1a4a:	8d 91       	ld	r24, X+
    1a4c:	81 93       	st	Z+, r24
                dns_ansError=2; // not IPv4
                return(0);
        }
        i+=10;
        j=0;
        while(j<4){
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	e6 3c       	cpi	r30, 0xC6	; 198
    1a52:	f8 07       	cpc	r31, r24
    1a54:	d1 f7       	brne	.-12     	; 0x1a4a <udp_client_check_for_dns_answer+0x96>
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
                j++;
        }
        haveDNSanswer=1;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	80 93 8c 00 	sts	0x008C, r24
    1a5c:	01 c0       	rjmp	.+2      	; 0x1a60 <udp_client_check_for_dns_answer+0xac>
        return(1);
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
}
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	08 95       	ret

00001a66 <http200ok>:
// to test the state of the LED
#define LEDISOFF PORTA&(1<<PORTA6)
// 

uint16_t http200ok(void)
{
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	06 c0       	rjmp	.+12     	; 0x1a78 <http200ok+0x12>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1a6c:	f9 01       	movw	r30, r18
    1a6e:	e5 52       	subi	r30, 0x25	; 37
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	86 ab       	std	Z+54, r24	; 0x36
                pos++;
    1a74:	2f 5f       	subi	r18, 0xFF	; 255
    1a76:	3f 4f       	sbci	r19, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1a78:	f9 01       	movw	r30, r18
    1a7a:	e3 5e       	subi	r30, 0xE3	; 227
    1a7c:	fd 4f       	sbci	r31, 0xFD	; 253
    1a7e:	84 91       	lpm	r24, Z+
    1a80:	88 23       	and	r24, r24
    1a82:	a1 f7       	brne	.-24     	; 0x1a6c <http200ok+0x6>
        return(fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n")));
}
    1a84:	c9 01       	movw	r24, r18
    1a86:	08 95       	ret

00001a88 <init_cnt2>:

/* setup timer T2 as an interrupt generating time base.
* You must call once sei() in the main program */
void init_cnt2(void)
{
	cnt2step=0;
    1a88:	10 92 89 00 	sts	0x0089, r1
/*anupam*/
	TCCR0=0x05;
    1a8c:	85 e0       	ldi	r24, 0x05	; 5
    1a8e:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
    1a90:	12 be       	out	0x32, r1	; 50
	TIMSK=0x01;
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	89 bf       	out	0x39, r24	; 57
}
    1a96:	08 95       	ret

00001a98 <__vector_9>:

// called when TCNT2==OCR2A
// that is in 50Hz intervals
ISR(TIMER0_OVF_vect){
    1a98:	1f 92       	push	r1
    1a9a:	0f 92       	push	r0
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	0f 92       	push	r0
    1aa0:	11 24       	eor	r1, r1
    1aa2:	8f 93       	push	r24
	cnt2step++;
    1aa4:	80 91 89 00 	lds	r24, 0x0089
    1aa8:	8f 5f       	subi	r24, 0xFF	; 255
    1aaa:	80 93 89 00 	sts	0x0089, r24
	if (cnt2step>60){
    1aae:	80 91 89 00 	lds	r24, 0x0089
    1ab2:	8d 33       	cpi	r24, 0x3D	; 61
    1ab4:	38 f0       	brcs	.+14     	; 0x1ac4 <__vector_9+0x2c>
                cnt2step=0;
    1ab6:	10 92 89 00 	sts	0x0089, r1
                sec++; // stepped every second
    1aba:	80 91 85 00 	lds	r24, 0x0085
    1abe:	8f 5f       	subi	r24, 0xFF	; 255
    1ac0:	80 93 85 00 	sts	0x0085, r24
	}
}
    1ac4:	8f 91       	pop	r24
    1ac6:	0f 90       	pop	r0
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	0f 90       	pop	r0
    1acc:	1f 90       	pop	r1
    1ace:	18 95       	reti

00001ad0 <ping_callback>:

// we were ping-ed by somebody, store the ip of the ping sender
// and trigger an upload to http://tuxgraphics.org/cgi-bin/upld
// This is just for testing and demonstration purpose
void ping_callback(uint8_t *ip){
    1ad0:	ac 01       	movw	r20, r24
        uint8_t i=0;
        // trigger only first time in case we get many ping in a row:
        if (start_web_client==0){
    1ad2:	80 91 86 00 	lds	r24, 0x0086
    1ad6:	88 23       	and	r24, r24
    1ad8:	91 f4       	brne	.+36     	; 0x1afe <ping_callback+0x2e>
                start_web_client=1;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	80 93 86 00 	sts	0x0086, r24
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
                // save IP from where the ping came:
                while(i<4){
                        pingsrcip[i]=ip[i];
    1ae4:	f9 01       	movw	r30, r18
    1ae6:	ea 59       	subi	r30, 0x9A	; 154
    1ae8:	fc 4f       	sbci	r31, 0xFC	; 252
    1aea:	da 01       	movw	r26, r20
    1aec:	a2 0f       	add	r26, r18
    1aee:	b3 1f       	adc	r27, r19
    1af0:	8c 91       	ld	r24, X
    1af2:	80 83       	st	Z, r24
    1af4:	2f 5f       	subi	r18, 0xFF	; 255
    1af6:	3f 4f       	sbci	r19, 0xFF	; 255
        uint8_t i=0;
        // trigger only first time in case we get many ping in a row:
        if (start_web_client==0){
                start_web_client=1;
                // save IP from where the ping came:
                while(i<4){
    1af8:	24 30       	cpi	r18, 0x04	; 4
    1afa:	31 05       	cpc	r19, r1
    1afc:	99 f7       	brne	.-26     	; 0x1ae4 <ping_callback+0x14>
    1afe:	08 95       	ret

00001b00 <browserresult_callback>:
        }
}

void browserresult_callback(uint8_t statuscode,uint16_t datapos, uint16_t len){
        datapos=0; // supress warning about unused paramter
        if (statuscode==0){
    1b00:	88 23       	and	r24, r24
    1b02:	31 f4       	brne	.+12     	; 0x1b10 <browserresult_callback+0x10>
                len=0; // avoid warning about unused variable
                web_client_sendok++;
    1b04:	80 91 88 00 	lds	r24, 0x0088
    1b08:	8f 5f       	subi	r24, 0xFF	; 255
    1b0a:	80 93 88 00 	sts	0x0088, r24
                LEDOFF;
    1b0e:	de 9a       	sbi	0x1b, 6	; 27
    1b10:	08 95       	ret

00001b12 <www_client_internal_result_callback>:
                return(len);
        }
        return(0);
}

uint8_t www_client_internal_result_callback(uint8_t fd, uint8_t statuscode, uint16_t datapos, uint16_t len_of_data){
    1b12:	ef 92       	push	r14
    1b14:	ff 92       	push	r15
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	79 01       	movw	r14, r18
        if (fd!=www_fd){
    1b20:	90 91 98 00 	lds	r25, 0x0098
    1b24:	89 17       	cp	r24, r25
    1b26:	59 f0       	breq	.+22     	; 0x1b3e <www_client_internal_result_callback+0x2c>
                (*client_browser_callback)(4,0,0);
    1b28:	e0 91 a4 00 	lds	r30, 0x00A4
    1b2c:	f0 91 a5 00 	lds	r31, 0x00A5
    1b30:	84 e0       	ldi	r24, 0x04	; 4
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	70 e0       	ldi	r23, 0x00	; 0
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	50 e0       	ldi	r21, 0x00	; 0
    1b3a:	09 95       	icall
    1b3c:	36 c0       	rjmp	.+108    	; 0x1baa <www_client_internal_result_callback+0x98>
                return(0);
        }
        if (statuscode==0 && len_of_data>12){
    1b3e:	66 23       	and	r22, r22
    1b40:	a1 f5       	brne	.+104    	; 0x1baa <www_client_internal_result_callback+0x98>
    1b42:	2d 30       	cpi	r18, 0x0D	; 13
    1b44:	31 05       	cpc	r19, r1
    1b46:	88 f1       	brcs	.+98     	; 0x1baa <www_client_internal_result_callback+0x98>
                // we might have a http status code
                if (client_browser_callback){
    1b48:	c0 91 a4 00 	lds	r28, 0x00A4
    1b4c:	d0 91 a5 00 	lds	r29, 0x00A5
    1b50:	20 97       	sbiw	r28, 0x00	; 0
    1b52:	59 f1       	breq	.+86     	; 0x1baa <www_client_internal_result_callback+0x98>
                        if (strncmp("200",(char *)&(bufptr[datapos+9]),3)==0){
    1b54:	00 91 92 00 	lds	r16, 0x0092
    1b58:	10 91 93 00 	lds	r17, 0x0093
    1b5c:	47 5f       	subi	r20, 0xF7	; 247
    1b5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b60:	40 0f       	add	r20, r16
    1b62:	51 1f       	adc	r21, r17
    1b64:	80 e6       	ldi	r24, 0x60	; 96
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	ba 01       	movw	r22, r20
    1b6a:	43 e0       	ldi	r20, 0x03	; 3
    1b6c:	50 e0       	ldi	r21, 0x00	; 0
    1b6e:	0e 94 c9 12 	call	0x2592	; 0x2592 <strncmp>
    1b72:	f8 01       	movw	r30, r16
    1b74:	66 a5       	ldd	r22, Z+46	; 0x2e
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	59 f4       	brne	.+22     	; 0x1b90 <www_client_internal_result_callback+0x7e>
                                (*client_browser_callback)(0,((uint16_t)TCP_SRC_PORT_H_P+(bufptr[TCP_HEADER_LEN_P]>>4)*4),len_of_data);
    1b7a:	62 95       	swap	r22
    1b7c:	6f 70       	andi	r22, 0x0F	; 15
    1b7e:	70 e0       	ldi	r23, 0x00	; 0
    1b80:	66 0f       	add	r22, r22
    1b82:	77 1f       	adc	r23, r23
    1b84:	66 0f       	add	r22, r22
    1b86:	77 1f       	adc	r23, r23
    1b88:	6e 5d       	subi	r22, 0xDE	; 222
    1b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	0a c0       	rjmp	.+20     	; 0x1ba4 <www_client_internal_result_callback+0x92>
                        }else{
                                (*client_browser_callback)(1,((uint16_t)TCP_SRC_PORT_H_P+(bufptr[TCP_HEADER_LEN_P]>>4)*4),len_of_data);
    1b90:	62 95       	swap	r22
    1b92:	6f 70       	andi	r22, 0x0F	; 15
    1b94:	70 e0       	ldi	r23, 0x00	; 0
    1b96:	66 0f       	add	r22, r22
    1b98:	77 1f       	adc	r23, r23
    1b9a:	66 0f       	add	r22, r22
    1b9c:	77 1f       	adc	r23, r23
    1b9e:	6e 5d       	subi	r22, 0xDE	; 222
    1ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	a7 01       	movw	r20, r14
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	09 95       	icall
                        }
                }
        }
        return(0);
}
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	ff 90       	pop	r15
    1bb6:	ef 90       	pop	r14
    1bb8:	08 95       	ret

00001bba <mk_net_str>:
        return(1);
}

// take a byte string and convert it to a human readable display string  (base is 10 for ip and 16 for mac addr), len is 4 for IP addr and 6 for mac.
void mk_net_str(char *resultstr,uint8_t *bytestr,uint8_t len,char separator,uint8_t base)
{
    1bba:	bf 92       	push	r11
    1bbc:	cf 92       	push	r12
    1bbe:	df 92       	push	r13
    1bc0:	ef 92       	push	r14
    1bc2:	ff 92       	push	r15
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	7c 01       	movw	r14, r24
    1bce:	b4 2e       	mov	r11, r20
    1bd0:	c2 2e       	mov	r12, r18
    1bd2:	d0 2e       	mov	r13, r16
    1bd4:	eb 01       	movw	r28, r22
    1bd6:	00 e0       	ldi	r16, 0x00	; 0
    1bd8:	10 e0       	ldi	r17, 0x00	; 0
    1bda:	17 c0       	rjmp	.+46     	; 0x1c0a <mk_net_str+0x50>
        uint8_t i=0;
        uint8_t j=0;
        while(i<len){
                itoa((int)bytestr[i],&resultstr[j],base);
    1bdc:	b7 01       	movw	r22, r14
    1bde:	61 0f       	add	r22, r17
    1be0:	71 1d       	adc	r23, r1
    1be2:	88 81       	ld	r24, Y
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	4d 2d       	mov	r20, r13
    1be8:	50 e0       	ldi	r21, 0x00	; 0
    1bea:	0e 94 d7 12 	call	0x25ae	; 0x25ae <itoa>
    1bee:	01 c0       	rjmp	.+2      	; 0x1bf2 <mk_net_str+0x38>
                // search end of str:
                while(resultstr[j]){j++;}
    1bf0:	19 2f       	mov	r17, r25
    1bf2:	f7 01       	movw	r30, r14
    1bf4:	e1 0f       	add	r30, r17
    1bf6:	f1 1d       	adc	r31, r1
    1bf8:	80 81       	ld	r24, Z
    1bfa:	91 2f       	mov	r25, r17
    1bfc:	9f 5f       	subi	r25, 0xFF	; 255
    1bfe:	88 23       	and	r24, r24
    1c00:	b9 f7       	brne	.-18     	; 0x1bf0 <mk_net_str+0x36>
                resultstr[j]=separator;
    1c02:	c0 82       	st	Z, r12
                j++;
    1c04:	19 2f       	mov	r17, r25
                i++;
    1c06:	0f 5f       	subi	r16, 0xFF	; 255
    1c08:	21 96       	adiw	r28, 0x01	; 1
// take a byte string and convert it to a human readable display string  (base is 10 for ip and 16 for mac addr), len is 4 for IP addr and 6 for mac.
void mk_net_str(char *resultstr,uint8_t *bytestr,uint8_t len,char separator,uint8_t base)
{
        uint8_t i=0;
        uint8_t j=0;
        while(i<len){
    1c0a:	0b 15       	cp	r16, r11
    1c0c:	38 f3       	brcs	.-50     	; 0x1bdc <mk_net_str+0x22>
                resultstr[j]=separator;
                j++;
                i++;
        }
        j--;
        resultstr[j]='\0';
    1c0e:	11 50       	subi	r17, 0x01	; 1
    1c10:	e1 0e       	add	r14, r17
    1c12:	f1 1c       	adc	r15, r1
    1c14:	f7 01       	movw	r30, r14
    1c16:	10 82       	st	Z, r1
}
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	ff 90       	pop	r15
    1c22:	ef 90       	pop	r14
    1c24:	df 90       	pop	r13
    1c26:	cf 90       	pop	r12
    1c28:	bf 90       	pop	r11
    1c2a:	08 95       	ret

00001c2c <parse_ip>:

#endif // URLENCODE_websrv_help

// parse a string an extract the IP to bytestr
uint8_t parse_ip(uint8_t *bytestr,char *str)
{
    1c2c:	ef 92       	push	r14
    1c2e:	ff 92       	push	r15
    1c30:	1f 93       	push	r17
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	7c 01       	movw	r14, r24
    1c38:	eb 01       	movw	r28, r22
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
        char *sptr;
        uint8_t i=0;
        sptr=NULL;
        while(i<4){
                bytestr[i]=0;
    1c3e:	f7 01       	movw	r30, r14
    1c40:	e8 0f       	add	r30, r24
    1c42:	f9 1f       	adc	r31, r25
    1c44:	10 82       	st	Z, r1
    1c46:	01 96       	adiw	r24, 0x01	; 1
uint8_t parse_ip(uint8_t *bytestr,char *str)
{
        char *sptr;
        uint8_t i=0;
        sptr=NULL;
        while(i<4){
    1c48:	84 30       	cpi	r24, 0x04	; 4
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	c1 f7       	brne	.-16     	; 0x1c3e <parse_ip+0x12>
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	10 e0       	ldi	r17, 0x00	; 0
    1c54:	17 c0       	rjmp	.+46     	; 0x1c84 <parse_ip+0x58>
                i++;
        }
        i=0;
        while(*str && i<4){
                // if a number then start
                if (sptr==NULL && isdigit(*str)){
    1c56:	21 15       	cp	r18, r1
    1c58:	31 05       	cpc	r19, r1
    1c5a:	31 f4       	brne	.+12     	; 0x1c68 <parse_ip+0x3c>
    1c5c:	84 2f       	mov	r24, r20
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	c0 97       	sbiw	r24, 0x30	; 48
    1c62:	0a 97       	sbiw	r24, 0x0a	; 10
    1c64:	08 f4       	brcc	.+2      	; 0x1c68 <parse_ip+0x3c>
    1c66:	9e 01       	movw	r18, r28
                        sptr=str;
                }
                if (*str == '.'){
    1c68:	4e 32       	cpi	r20, 0x2E	; 46
    1c6a:	59 f4       	brne	.+22     	; 0x1c82 <parse_ip+0x56>
                        *str ='\0';
    1c6c:	18 82       	st	Y, r1
                        bytestr[i]=(atoi(sptr)&0xff);
    1c6e:	c9 01       	movw	r24, r18
    1c70:	0e 94 ab 12 	call	0x2556	; 0x2556 <atoi>
    1c74:	f7 01       	movw	r30, r14
    1c76:	e1 0f       	add	r30, r17
    1c78:	f1 1d       	adc	r31, r1
    1c7a:	80 83       	st	Z, r24
                        i++;
    1c7c:	1f 5f       	subi	r17, 0xFF	; 255
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
                        sptr=NULL;
                }
                str++;
    1c82:	21 96       	adiw	r28, 0x01	; 1
        while(i<4){
                bytestr[i]=0;
                i++;
        }
        i=0;
        while(*str && i<4){
    1c84:	48 81       	ld	r20, Y
    1c86:	44 23       	and	r20, r20
    1c88:	11 f0       	breq	.+4      	; 0x1c8e <parse_ip+0x62>
    1c8a:	14 30       	cpi	r17, 0x04	; 4
    1c8c:	20 f3       	brcs	.-56     	; 0x1c56 <parse_ip+0x2a>
                        i++;
                        sptr=NULL;
                }
                str++;
        }
        *str ='\0';
    1c8e:	18 82       	st	Y, r1
        if (i==3){
    1c90:	13 30       	cpi	r17, 0x03	; 3
    1c92:	11 f0       	breq	.+4      	; 0x1c98 <parse_ip+0x6c>
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	06 c0       	rjmp	.+12     	; 0x1ca4 <parse_ip+0x78>
                bytestr[i]=(atoi(sptr)&0xff);
    1c98:	c9 01       	movw	r24, r18
    1c9a:	0e 94 ab 12 	call	0x2556	; 0x2556 <atoi>
    1c9e:	f7 01       	movw	r30, r14
    1ca0:	83 83       	std	Z+3, r24	; 0x03
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
                return(0);
        }
        return(1);
}
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	1f 91       	pop	r17
    1caa:	ff 90       	pop	r15
    1cac:	ef 90       	pop	r14
    1cae:	08 95       	ret

00001cb0 <urlencode>:
}

// there must be enoug space in urlbuf. In the worst case that is
// 3 times the length of str
void urlencode(char *str,char *urlbuf)
{
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	8b 01       	movw	r16, r22
    1cbe:	ec 01       	movw	r28, r24
    1cc0:	21 96       	adiw	r28, 0x01	; 1
                        *urlbuf=c;
                        str++;
                        urlbuf++;
                        continue;
                }
                *urlbuf='%';
    1cc2:	95 e2       	ldi	r25, 0x25	; 37
    1cc4:	e9 2e       	mov	r14, r25
    1cc6:	1a c0       	rjmp	.+52     	; 0x1cfc <urlencode+0x4c>
// 3 times the length of str
void urlencode(char *str,char *urlbuf)
{
        char c;
        while ((c = *str)) {
                if (c == ' '||isalnum(c)){ 
    1cc8:	80 e2       	ldi	r24, 0x20	; 32
    1cca:	f8 16       	cp	r15, r24
    1ccc:	19 f4       	brne	.+6      	; 0x1cd4 <urlencode+0x24>
    1cce:	8b e2       	ldi	r24, 0x2B	; 43
    1cd0:	f8 2e       	mov	r15, r24
    1cd2:	06 c0       	rjmp	.+12     	; 0x1ce0 <urlencode+0x30>
    1cd4:	8f 2d       	mov	r24, r15
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	0e 94 10 13 	call	0x2620	; 0x2620 <isalnum>
    1cdc:	89 2b       	or	r24, r25
    1cde:	21 f0       	breq	.+8      	; 0x1ce8 <urlencode+0x38>
                        if (c == ' '){ 
                                c = '+';
                        }
                        *urlbuf=c;
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	f1 92       	st	Z+, r15
    1ce4:	8f 01       	movw	r16, r30
    1ce6:	09 c0       	rjmp	.+18     	; 0x1cfa <urlencode+0x4a>
                        str++;
                        urlbuf++;
                        continue;
                }
                *urlbuf='%';
    1ce8:	f8 01       	movw	r30, r16
    1cea:	e1 92       	st	Z+, r14
    1cec:	8f 01       	movw	r16, r30
                urlbuf++;
                int2h(c,urlbuf);
    1cee:	8f 2d       	mov	r24, r15
    1cf0:	bf 01       	movw	r22, r30
    1cf2:	0e 94 4e 0c 	call	0x189c	; 0x189c <int2h>
                urlbuf++;
                urlbuf++;
    1cf6:	0e 5f       	subi	r16, 0xFE	; 254
    1cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfa:	21 96       	adiw	r28, 0x01	; 1
// there must be enoug space in urlbuf. In the worst case that is
// 3 times the length of str
void urlencode(char *str,char *urlbuf)
{
        char c;
        while ((c = *str)) {
    1cfc:	fa 90       	ld	r15, -Y
    1cfe:	21 96       	adiw	r28, 0x01	; 1
    1d00:	ff 20       	and	r15, r15
    1d02:	11 f7       	brne	.-60     	; 0x1cc8 <urlencode+0x18>
                int2h(c,urlbuf);
                urlbuf++;
                urlbuf++;
                str++;
        }
        *urlbuf='\0';
    1d04:	f8 01       	movw	r30, r16
    1d06:	10 82       	st	Z, r1
}
    1d08:	df 91       	pop	r29
    1d0a:	cf 91       	pop	r28
    1d0c:	1f 91       	pop	r17
    1d0e:	0f 91       	pop	r16
    1d10:	ff 90       	pop	r15
    1d12:	ef 90       	pop	r14
    1d14:	08 95       	ret

00001d16 <fill_tcp_data>:

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
        return(fill_tcp_data_len(buf,pos,(uint8_t*)s,strlen(s)));
    1d1a:	da 01       	movw	r26, r20
    1d1c:	0d 90       	ld	r0, X+
    1d1e:	00 20       	and	r0, r0
    1d20:	e9 f7       	brne	.-6      	; 0x1d1c <fill_tcp_data+0x6>
    1d22:	11 97       	sbiw	r26, 0x01	; 1
    1d24:	a4 1b       	sub	r26, r20
    1d26:	6a 5c       	subi	r22, 0xCA	; 202
    1d28:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2a:	ec 01       	movw	r28, r24
    1d2c:	c6 0f       	add	r28, r22
    1d2e:	d7 1f       	adc	r29, r23
    1d30:	66 53       	subi	r22, 0x36	; 54
    1d32:	70 40       	sbci	r23, 0x00	; 0
    1d34:	fa 01       	movw	r30, r20

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
uint16_t fill_tcp_data_len(uint8_t *buf,uint16_t pos, const uint8_t *s, uint8_t len)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
    1d38:	9a 01       	movw	r18, r20
    1d3a:	2a 0f       	add	r18, r26
    1d3c:	3b 1f       	adc	r19, r27
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <fill_tcp_data+0x2e>
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
    1d40:	81 91       	ld	r24, Z+
    1d42:	89 93       	st	Y+, r24
uint16_t fill_tcp_data_len(uint8_t *buf,uint16_t pos, const uint8_t *s, uint8_t len)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
    1d44:	e2 17       	cp	r30, r18
    1d46:	f3 07       	cpc	r31, r19
    1d48:	d9 f7       	brne	.-10     	; 0x1d40 <fill_tcp_data+0x2a>
    1d4a:	9b 01       	movw	r18, r22
    1d4c:	2a 0f       	add	r18, r26
    1d4e:	3b 1f       	adc	r19, r27
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
        return(fill_tcp_data_len(buf,pos,(uint8_t*)s,strlen(s)));
}
    1d50:	c9 01       	movw	r24, r18
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	08 95       	ret

00001d58 <print_webpage>:
}


// prepare the webpage by writing the data to the tcp send buffer
uint16_t print_webpage(uint8_t *buf)
{
    1d58:	cf 92       	push	r12
    1d5a:	df 92       	push	r13
    1d5c:	ef 92       	push	r14
    1d5e:	ff 92       	push	r15
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <print_webpage+0x12>
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <print_webpage+0x14>
    1d6c:	0f 92       	push	r0
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    1d72:	6c 01       	movw	r12, r24
    1d74:	ee 24       	eor	r14, r14
    1d76:	ff 24       	eor	r15, r15
    1d78:	07 c0       	rjmp	.+14     	; 0x1d88 <print_webpage+0x30>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1d7a:	f7 01       	movw	r30, r14
    1d7c:	e5 52       	subi	r30, 0x25	; 37
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	86 ab       	std	Z+54, r24	; 0x36
                pos++;
    1d82:	08 94       	sec
    1d84:	e1 1c       	adc	r14, r1
    1d86:	f1 1c       	adc	r15, r1
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1d88:	f7 01       	movw	r30, r14
    1d8a:	e3 5e       	subi	r30, 0xE3	; 227
    1d8c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d8e:	84 91       	lpm	r24, Z+
    1d90:	88 23       	and	r24, r24
    1d92:	99 f7       	brne	.-26     	; 0x1d7a <print_webpage+0x22>
    1d94:	86 e3       	ldi	r24, 0x36	; 54
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	e8 0e       	add	r14, r24
    1d9a:	f9 1e       	adc	r15, r25
    1d9c:	d6 01       	movw	r26, r12
    1d9e:	ae 0d       	add	r26, r14
    1da0:	bf 1d       	adc	r27, r15
    1da2:	8a ec       	ldi	r24, 0xCA	; 202
    1da4:	9f ef       	ldi	r25, 0xFF	; 255
    1da6:	e8 0e       	add	r14, r24
    1da8:	f9 1e       	adc	r15, r25
        uint16_t plen;
        char vstr[5];
        plen=http200ok();
        plen=fill_tcp_data_p(buf,plen,PSTR("<h2>web client status</h2>\n<pre>\n"));
    1daa:	8b ef       	ldi	r24, 0xFB	; 251
    1dac:	91 e0       	ldi	r25, 0x01	; 1
    1dae:	04 c0       	rjmp	.+8      	; 0x1db8 <print_webpage+0x60>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1db0:	2d 93       	st	X+, r18
                pos++;
    1db2:	08 94       	sec
    1db4:	e1 1c       	adc	r14, r1
    1db6:	f1 1c       	adc	r15, r1
    1db8:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	24 91       	lpm	r18, Z+
    1dbe:	22 23       	and	r18, r18
    1dc0:	b9 f7       	brne	.-18     	; 0x1db0 <print_webpage+0x58>
        enc28j60PacketSend(0x2a,buf);
}

uint8_t client_waiting_gw(void)
{
        if (waitgwmac & WGW_HAVE_GW_MAC){
    1dc2:	80 91 8d 00 	lds	r24, 0x008D
    1dc6:	81 fd       	sbrc	r24, 1
    1dc8:	0e c0       	rjmp	.+28     	; 0x1de6 <print_webpage+0x8e>
    1dca:	86 e3       	ldi	r24, 0x36	; 54
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	e8 0e       	add	r14, r24
    1dd0:	f9 1e       	adc	r15, r25
    1dd2:	d6 01       	movw	r26, r12
    1dd4:	ae 0d       	add	r26, r14
    1dd6:	bf 1d       	adc	r27, r15
    1dd8:	8a ec       	ldi	r24, 0xCA	; 202
    1dda:	9f ef       	ldi	r25, 0xFF	; 255
    1ddc:	e8 0e       	add	r14, r24
    1dde:	f9 1e       	adc	r15, r25
        if (client_waiting_gw()){
                plen=fill_tcp_data_p(buf,plen,PSTR("waiting for GW IP to answer arp.\n"));
    1de0:	89 ed       	ldi	r24, 0xD9	; 217
    1de2:	91 e0       	ldi	r25, 0x01	; 1
    1de4:	17 c0       	rjmp	.+46     	; 0x1e14 <print_webpage+0xbc>
                return(plen);
        }
        if (dns_state==1){
    1de6:	80 91 84 00 	lds	r24, 0x0084
    1dea:	97 01       	movw	r18, r14
    1dec:	2a 5c       	subi	r18, 0xCA	; 202
    1dee:	3f 4f       	sbci	r19, 0xFF	; 255
    1df0:	81 30       	cpi	r24, 0x01	; 1
    1df2:	31 f0       	breq	.+12     	; 0x1e00 <print_webpage+0xa8>
    1df4:	d6 01       	movw	r26, r12
    1df6:	a2 0f       	add	r26, r18
    1df8:	b3 1f       	adc	r27, r19
                plen=fill_tcp_data_p(buf,plen,PSTR("waiting for DNS answer.\n"));
                return(plen);
        }
        plen=fill_tcp_data_p(buf,plen,PSTR("Number of data uploads started by ping: "));
    1dfa:	87 e9       	ldi	r24, 0x97	; 151
    1dfc:	91 e0       	ldi	r25, 0x01	; 1
    1dfe:	1e c0       	rjmp	.+60     	; 0x1e3c <print_webpage+0xe4>
    1e00:	d6 01       	movw	r26, r12
    1e02:	a2 0f       	add	r26, r18
    1e04:	b3 1f       	adc	r27, r19
        if (client_waiting_gw()){
                plen=fill_tcp_data_p(buf,plen,PSTR("waiting for GW IP to answer arp.\n"));
                return(plen);
        }
        if (dns_state==1){
                plen=fill_tcp_data_p(buf,plen,PSTR("waiting for DNS answer.\n"));
    1e06:	80 ec       	ldi	r24, 0xC0	; 192
    1e08:	91 e0       	ldi	r25, 0x01	; 1
    1e0a:	0e c0       	rjmp	.+28     	; 0x1e28 <print_webpage+0xd0>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1e0c:	2d 93       	st	X+, r18
                pos++;
    1e0e:	08 94       	sec
    1e10:	e1 1c       	adc	r14, r1
    1e12:	f1 1c       	adc	r15, r1
    1e14:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1e16:	01 96       	adiw	r24, 0x01	; 1
    1e18:	24 91       	lpm	r18, Z+
    1e1a:	22 23       	and	r18, r18
    1e1c:	b9 f7       	brne	.-18     	; 0x1e0c <print_webpage+0xb4>
    1e1e:	7a c0       	rjmp	.+244    	; 0x1f14 <print_webpage+0x1bc>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1e20:	2d 93       	st	X+, r18
                pos++;
    1e22:	08 94       	sec
    1e24:	e1 1c       	adc	r14, r1
    1e26:	f1 1c       	adc	r15, r1
    1e28:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1e2a:	01 96       	adiw	r24, 0x01	; 1
    1e2c:	24 91       	lpm	r18, Z+
    1e2e:	22 23       	and	r18, r18
    1e30:	b9 f7       	brne	.-18     	; 0x1e20 <print_webpage+0xc8>
    1e32:	70 c0       	rjmp	.+224    	; 0x1f14 <print_webpage+0x1bc>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1e34:	2d 93       	st	X+, r18
                pos++;
    1e36:	08 94       	sec
    1e38:	e1 1c       	adc	r14, r1
    1e3a:	f1 1c       	adc	r15, r1
    1e3c:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1e3e:	01 96       	adiw	r24, 0x01	; 1
    1e40:	24 91       	lpm	r18, Z+
    1e42:	22 23       	and	r18, r18
    1e44:	b9 f7       	brne	.-18     	; 0x1e34 <print_webpage+0xdc>
                return(plen);
        }
        plen=fill_tcp_data_p(buf,plen,PSTR("Number of data uploads started by ping: "));
        // convert number to string:
        itoa(web_client_attempts,vstr,10);
    1e46:	80 91 87 00 	lds	r24, 0x0087
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	8e 01       	movw	r16, r28
    1e4e:	0f 5f       	subi	r16, 0xFF	; 255
    1e50:	1f 4f       	sbci	r17, 0xFF	; 255
    1e52:	b8 01       	movw	r22, r16
    1e54:	4a e0       	ldi	r20, 0x0A	; 10
    1e56:	50 e0       	ldi	r21, 0x00	; 0
    1e58:	0e 94 d7 12 	call	0x25ae	; 0x25ae <itoa>
        plen=fill_tcp_data(buf,plen,vstr);
    1e5c:	c6 01       	movw	r24, r12
    1e5e:	b7 01       	movw	r22, r14
    1e60:	a8 01       	movw	r20, r16
    1e62:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <fill_tcp_data>
    1e66:	7c 01       	movw	r14, r24
    1e68:	86 e3       	ldi	r24, 0x36	; 54
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	e8 0e       	add	r14, r24
    1e6e:	f9 1e       	adc	r15, r25
    1e70:	d6 01       	movw	r26, r12
    1e72:	ae 0d       	add	r26, r14
    1e74:	bf 1d       	adc	r27, r15
    1e76:	8a ec       	ldi	r24, 0xCA	; 202
    1e78:	9f ef       	ldi	r25, 0xFF	; 255
    1e7a:	e8 0e       	add	r14, r24
    1e7c:	f9 1e       	adc	r15, r25
        plen=fill_tcp_data_p(buf,plen,PSTR("\nNumber successful data uploads to web: "));
    1e7e:	8e e6       	ldi	r24, 0x6E	; 110
    1e80:	91 e0       	ldi	r25, 0x01	; 1
    1e82:	04 c0       	rjmp	.+8      	; 0x1e8c <print_webpage+0x134>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1e84:	2d 93       	st	X+, r18
                pos++;
    1e86:	08 94       	sec
    1e88:	e1 1c       	adc	r14, r1
    1e8a:	f1 1c       	adc	r15, r1
    1e8c:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1e8e:	01 96       	adiw	r24, 0x01	; 1
    1e90:	24 91       	lpm	r18, Z+
    1e92:	22 23       	and	r18, r18
    1e94:	b9 f7       	brne	.-18     	; 0x1e84 <print_webpage+0x12c>
        // convert number to string:
        itoa(web_client_sendok,vstr,10);
    1e96:	80 91 88 00 	lds	r24, 0x0088
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	8e 01       	movw	r16, r28
    1e9e:	0f 5f       	subi	r16, 0xFF	; 255
    1ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea2:	b8 01       	movw	r22, r16
    1ea4:	4a e0       	ldi	r20, 0x0A	; 10
    1ea6:	50 e0       	ldi	r21, 0x00	; 0
    1ea8:	0e 94 d7 12 	call	0x25ae	; 0x25ae <itoa>
        plen=fill_tcp_data(buf,plen,vstr);
    1eac:	c6 01       	movw	r24, r12
    1eae:	b7 01       	movw	r22, r14
    1eb0:	a8 01       	movw	r20, r16
    1eb2:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <fill_tcp_data>
    1eb6:	7c 01       	movw	r14, r24
    1eb8:	86 e3       	ldi	r24, 0x36	; 54
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	e8 0e       	add	r14, r24
    1ebe:	f9 1e       	adc	r15, r25
    1ec0:	d6 01       	movw	r26, r12
    1ec2:	ae 0d       	add	r26, r14
    1ec4:	bf 1d       	adc	r27, r15
    1ec6:	8a ec       	ldi	r24, 0xCA	; 202
    1ec8:	9f ef       	ldi	r25, 0xFF	; 255
    1eca:	e8 0e       	add	r14, r24
    1ecc:	f9 1e       	adc	r15, r25
        plen=fill_tcp_data_p(buf,plen,PSTR("\ncheck result: <a href=http://tuxgraphics.org/cgi-bin/upld>http://tuxgraphics.org/cgi-bin/upld</a>"));
    1ece:	8b e0       	ldi	r24, 0x0B	; 11
    1ed0:	91 e0       	ldi	r25, 0x01	; 1
    1ed2:	04 c0       	rjmp	.+8      	; 0x1edc <print_webpage+0x184>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1ed4:	2d 93       	st	X+, r18
                pos++;
    1ed6:	08 94       	sec
    1ed8:	e1 1c       	adc	r14, r1
    1eda:	f1 1c       	adc	r15, r1
    1edc:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	24 91       	lpm	r18, Z+
    1ee2:	22 23       	and	r18, r18
    1ee4:	b9 f7       	brne	.-18     	; 0x1ed4 <print_webpage+0x17c>
    1ee6:	86 e3       	ldi	r24, 0x36	; 54
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	e8 0e       	add	r14, r24
    1eec:	f9 1e       	adc	r15, r25
    1eee:	d6 01       	movw	r26, r12
    1ef0:	ae 0d       	add	r26, r14
    1ef2:	bf 1d       	adc	r27, r15
    1ef4:	8a ec       	ldi	r24, 0xCA	; 202
    1ef6:	9f ef       	ldi	r25, 0xFF	; 255
    1ef8:	e8 0e       	add	r14, r24
    1efa:	f9 1e       	adc	r15, r25
        plen=fill_tcp_data_p(buf,plen,PSTR("\n</pre><br><hr>"));
    1efc:	8b ef       	ldi	r24, 0xFB	; 251
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	04 c0       	rjmp	.+8      	; 0x1f0a <print_webpage+0x1b2>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1f02:	2d 93       	st	X+, r18
                pos++;
    1f04:	08 94       	sec
    1f06:	e1 1c       	adc	r14, r1
    1f08:	f1 1c       	adc	r15, r1
    1f0a:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1f0c:	01 96       	adiw	r24, 0x01	; 1
    1f0e:	24 91       	lpm	r18, Z+
    1f10:	22 23       	and	r18, r18
    1f12:	b9 f7       	brne	.-18     	; 0x1f02 <print_webpage+0x1aa>
        return(plen);
}
    1f14:	c7 01       	movw	r24, r14
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	1f 91       	pop	r17
    1f26:	0f 91       	pop	r16
    1f28:	ff 90       	pop	r15
    1f2a:	ef 90       	pop	r14
    1f2c:	df 90       	pop	r13
    1f2e:	cf 90       	pop	r12
    1f30:	08 95       	ret

00001f32 <main>:
                web_client_sendok++;
                LEDOFF;
        }
}

int main(void){
    1f32:	2f 92       	push	r2
    1f34:	3f 92       	push	r3
    1f36:	4f 92       	push	r4
    1f38:	5f 92       	push	r5
    1f3a:	6f 92       	push	r6
    1f3c:	7f 92       	push	r7
    1f3e:	8f 92       	push	r8
    1f40:	9f 92       	push	r9
    1f42:	af 92       	push	r10
    1f44:	bf 92       	push	r11
    1f46:	cf 92       	push	r12
    1f48:	df 92       	push	r13
    1f4a:	ef 92       	push	r14
    1f4c:	ff 92       	push	r15
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	64 97       	sbiw	r28, 0x14	; 20
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	10 e0       	ldi	r17, 0x00	; 0
    1f68:	81 2f       	mov	r24, r17
    1f6a:	8a 95       	dec	r24
    1f6c:	f1 f7       	brne	.-4      	; 0x1f6a <main+0x38>
       // CLKPR=(1<<CLKPCE); // change enable
       // CLKPR=0; // "no pre-scaler"
        _delay_loop_1(0); // 60us

        /*initialize enc28j60*/
        enc28j60Init(mymac);
    1f6e:	8c e6       	ldi	r24, 0x6C	; 108
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	0e 94 91 02 	call	0x522	; 0x522 <enc28j60Init>
        enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
    1f76:	82 e0       	ldi	r24, 0x02	; 2
    1f78:	0e 94 8b 02 	call	0x516	; 0x516 <enc28j60clkout>
    1f7c:	1a 95       	dec	r17
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <main+0x4a>

/* setup timer T2 as an interrupt generating time base.
* You must call once sei() in the main program */
void init_cnt2(void)
{
	cnt2step=0;
    1f80:	10 92 89 00 	sts	0x0089, r1
/*anupam*/
	TCCR0=0x05;
    1f84:	85 e0       	ldi	r24, 0x05	; 5
    1f86:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
    1f88:	12 be       	out	0x32, r1	; 50
	TIMSK=0x01;
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	89 bf       	out	0x39, r24	; 57
        enc28j60Init(mymac);
        enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
        _delay_loop_1(0); // 60us
        
        init_cnt2();
        sei();
    1f8e:	78 94       	sei
        /* Magjack leds configuration, see enc28j60 datasheet, page 11 */
        // LEDB=yellow LEDA=green
        //
        // 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
        // enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
        enc28j60PhyWrite(PHLCON,0x476);
    1f90:	84 e1       	ldi	r24, 0x14	; 20
    1f92:	66 e7       	ldi	r22, 0x76	; 118
    1f94:	74 e0       	ldi	r23, 0x04	; 4
    1f96:	0e 94 6d 02 	call	0x4da	; 0x4da <enc28j60PhyWrite>

        DDRA|= (1<<DDA6); // LED, enable PB1, LED as output
    1f9a:	d6 9a       	sbi	0x1a, 6	; 26
        LEDOFF;
    1f9c:	de 9a       	sbi	0x1b, 6	; 27

// This initializes the web server
// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint16_t port){
        uint8_t i=0;
        wwwport_h=(port>>8)&0xff;
    1f9e:	10 92 94 00 	sts	0x0094, r1
        wwwport_l=(port&0xff);
    1fa2:	80 e5       	ldi	r24, 0x50	; 80
    1fa4:	80 93 81 00 	sts	0x0081, r24
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
        while(i<4){
                ipaddr[i]=myip[i];
    1fac:	f9 01       	movw	r30, r18
    1fae:	e2 54       	subi	r30, 0x42	; 66
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	d9 01       	movw	r26, r18
    1fb4:	ae 58       	subi	r26, 0x8E	; 142
    1fb6:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb8:	8c 91       	ld	r24, X
    1fba:	80 83       	st	Z, r24
    1fbc:	2f 5f       	subi	r18, 0xFF	; 255
    1fbe:	3f 4f       	sbci	r19, 0xFF	; 255
// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint16_t port){
        uint8_t i=0;
        wwwport_h=(port>>8)&0xff;
        wwwport_l=(port&0xff);
        while(i<4){
    1fc0:	24 30       	cpi	r18, 0x04	; 4
    1fc2:	31 05       	cpc	r19, r1
    1fc4:	99 f7       	brne	.-26     	; 0x1fac <main+0x7a>
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
                macaddr[i]=mymac[i];
    1fca:	f9 01       	movw	r30, r18
    1fcc:	e8 54       	subi	r30, 0x48	; 72
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	d9 01       	movw	r26, r18
    1fd2:	a4 59       	subi	r26, 0x94	; 148
    1fd4:	bf 4f       	sbci	r27, 0xFF	; 255
    1fd6:	8c 91       	ld	r24, X
    1fd8:	80 83       	st	Z, r24
    1fda:	2f 5f       	subi	r18, 0xFF	; 255
    1fdc:	3f 4f       	sbci	r19, 0xFF	; 255
        while(i<4){
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
    1fde:	26 30       	cpi	r18, 0x06	; 6
    1fe0:	31 05       	cpc	r19, r1
    1fe2:	99 f7       	brne	.-26     	; 0x1fca <main+0x98>
}

void client_set_gwip(uint8_t *gwipaddr)
{
        uint8_t i=0;
        waitgwmac=WGW_INITIAL_ARP; // causes an arp request in the packet loop
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	80 93 8d 00 	sts	0x008D, r24
    1fea:	86 e7       	ldi	r24, 0x76	; 118
    1fec:	90 e0       	ldi	r25, 0x00	; 0
        while(i<4){
                gwip[i]=gwipaddr[i];
    1fee:	01 96       	adiw	r24, 0x01	; 1

void client_set_gwip(uint8_t *gwipaddr)
{
        uint8_t i=0;
        waitgwmac=WGW_INITIAL_ARP; // causes an arp request in the packet loop
        while(i<4){
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	8a 37       	cpi	r24, 0x7A	; 122
    1ff4:	92 07       	cpc	r25, r18
    1ff6:	d9 f7       	brne	.-10     	; 0x1fee <main+0xbc>
}
#endif // WWW_client

void register_ping_rec_callback(void (*callback)(uint8_t *srcip))
{
        icmp_callback=callback;
    1ff8:	88 e6       	ldi	r24, 0x68	; 104
    1ffa:	9d e0       	ldi	r25, 0x0D	; 13
    1ffc:	90 93 b1 00 	sts	0x00B1, r25
    2000:	80 93 b0 00 	sts	0x00B0, r24
                        if (start_web_client==1){
                                LEDON;
                                sec=0;
                                start_web_client=2;
                                web_client_attempts++;
                                mk_net_str(str,pingsrcip,4,'.',10);
    2004:	6e 01       	movw	r12, r28
    2006:	08 94       	sec
    2008:	c1 1c       	adc	r12, r1
    200a:	d1 1c       	adc	r13, r1
                                urlencode(str,urlvarstr);
    200c:	66 ec       	ldi	r22, 0xC6	; 198
    200e:	26 2e       	mov	r2, r22
    2010:	60 e0       	ldi	r22, 0x00	; 0
    2012:	36 2e       	mov	r3, r22
                                client_browse_url(PSTR("/cgi-bin/upld?pingIP="),urlvarstr,PSTR(WEBSERVER_VHOST),&browserresult_callback);
    2014:	55 ec       	ldi	r21, 0xC5	; 197
    2016:	45 2e       	mov	r4, r21
    2018:	50 e0       	ldi	r21, 0x00	; 0
    201a:	55 2e       	mov	r5, r21
{
        client_urlbuf=urlbuf;
        client_urlbuf_var=urlbuf_varpart;
        client_hoststr=hoststr;
        browsertype=0;
        client_browser_callback=callback;
    201c:	40 e8       	ldi	r20, 0x80	; 128
    201e:	84 2e       	mov	r8, r20
    2020:	4d e0       	ldi	r20, 0x0D	; 13
    2022:	94 2e       	mov	r9, r20
// We use callback functions because that saves memory and a uC is very
// limited in memory
//
uint8_t client_tcp_req(uint8_t (*result_callback)(uint8_t fd,uint8_t statuscode,uint16_t data_start_pos_in_buf, uint16_t len_of_data),uint16_t (*datafill_callback)(uint8_t fd),uint16_t port)
{
        client_tcp_result_callback=result_callback;
    2024:	39 e8       	ldi	r19, 0x89	; 137
    2026:	63 2e       	mov	r6, r19
    2028:	3d e0       	ldi	r19, 0x0D	; 13
    202a:	73 2e       	mov	r7, r19
        client_tcp_datafill_callback=datafill_callback;
    202c:	22 e2       	ldi	r18, 0x22	; 34
    202e:	a2 2e       	mov	r10, r18
    2030:	21 e1       	ldi	r18, 0x11	; 17
    2032:	b2 2e       	mov	r11, r18

        while(1){
                // handle ping and wait for a tcp packet
                //
                // handle ping and wait for a tcp packet
                plen=enc28j60PacketReceive(BUFFER_SIZE, buf);
    2034:	8a e8       	ldi	r24, 0x8A	; 138
    2036:	92 e0       	ldi	r25, 0x02	; 2
    2038:	6b ed       	ldi	r22, 0xDB	; 219
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	0e 94 c8 03 	call	0x790	; 0x790 <enc28j60PacketReceive>
    2040:	8c 01       	movw	r16, r24
                dat_p=packetloop_icmp_tcp(buf,plen);
    2042:	8b ed       	ldi	r24, 0xDB	; 219
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	b8 01       	movw	r22, r16
    2048:	0e 94 cf 09 	call	0x139e	; 0x139e <packetloop_icmp_tcp>
    204c:	7c 01       	movw	r14, r24
                if(plen==0){
    204e:	01 15       	cp	r16, r1
    2050:	11 05       	cpc	r17, r1
    2052:	09 f0       	breq	.+2      	; 0x2056 <main+0x124>
    2054:	91 c0       	rjmp	.+290    	; 0x2178 <main+0x246>
        enc28j60PacketSend(0x2a,buf);
}

uint8_t client_waiting_gw(void)
{
        if (waitgwmac & WGW_HAVE_GW_MAC){
    2056:	80 91 8d 00 	lds	r24, 0x008D
    205a:	81 ff       	sbrs	r24, 1
    205c:	eb cf       	rjmp	.-42     	; 0x2034 <main+0x102>
                        // we are idle here
                        if (client_waiting_gw() ){
                                continue;
                        }
                        if (dns_state==0){
    205e:	80 91 84 00 	lds	r24, 0x0084
    2062:	88 23       	and	r24, r24
    2064:	61 f4       	brne	.+24     	; 0x207e <main+0x14c>
                                sec=0;
    2066:	10 92 85 00 	sts	0x0085, r1
                                dns_state=1;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	80 93 84 00 	sts	0x0084, r24
                                dnslkup_request(buf,PSTR(WEBSERVER_VHOST));
    2070:	8b ed       	ldi	r24, 0xDB	; 219
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	6b ee       	ldi	r22, 0xEB	; 235
    2076:	70 e0       	ldi	r23, 0x00	; 0
    2078:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <dnslkup_request>
    207c:	db cf       	rjmp	.-74     	; 0x2034 <main+0x102>
                                continue;
                        }
                        if (dns_state==1 && dnslkup_haveanswer()){
    207e:	81 30       	cpi	r24, 0x01	; 1
    2080:	b1 f4       	brne	.+44     	; 0x20ae <main+0x17c>
    2082:	80 91 8c 00 	lds	r24, 0x008C
    2086:	88 23       	and	r24, r24
    2088:	91 f0       	breq	.+36     	; 0x20ae <main+0x17c>
                                dns_state=2;
    208a:	92 e0       	ldi	r25, 0x02	; 2
    208c:	90 93 84 00 	sts	0x0084, r25
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
#if defined (TCP_client)
void client_tcp_set_serverip(uint8_t *ipaddr)
{
        uint8_t i=0;
        while(i<4){
                tcpsrvip[i]=ipaddr[i];
    2094:	f9 01       	movw	r30, r18
    2096:	e4 56       	subi	r30, 0x64	; 100
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	d9 01       	movw	r26, r18
    209c:	ae 53       	subi	r26, 0x3E	; 62
    209e:	bf 4f       	sbci	r27, 0xFF	; 255
    20a0:	8c 91       	ld	r24, X
    20a2:	80 83       	st	Z, r24
    20a4:	2f 5f       	subi	r18, 0xFF	; 255
    20a6:	3f 4f       	sbci	r19, 0xFF	; 255

#if defined (TCP_client)
void client_tcp_set_serverip(uint8_t *ipaddr)
{
        uint8_t i=0;
        while(i<4){
    20a8:	24 30       	cpi	r18, 0x04	; 4
    20aa:	31 05       	cpc	r19, r1
    20ac:	99 f7       	brne	.-26     	; 0x2094 <main+0x162>
                                client_set_wwwip(dnslkup_getip());
                        }
                        if (dns_state!=2){
    20ae:	80 91 84 00 	lds	r24, 0x0084
    20b2:	82 30       	cpi	r24, 0x02	; 2
    20b4:	41 f0       	breq	.+16     	; 0x20c6 <main+0x194>
                                // retry every minute if dns-lookup failed:
                                if (sec > 60){
    20b6:	80 91 85 00 	lds	r24, 0x0085
    20ba:	8d 33       	cpi	r24, 0x3D	; 61
    20bc:	08 f4       	brcc	.+2      	; 0x20c0 <main+0x18e>
    20be:	ba cf       	rjmp	.-140    	; 0x2034 <main+0x102>
                                        dns_state=0;
    20c0:	10 92 84 00 	sts	0x0084, r1
    20c4:	b7 cf       	rjmp	.-146    	; 0x2034 <main+0x102>
                                // don't try to use web client before
                                // we have a result of dns-lookup
                                continue;
                        }
                        //----------
                        if (start_web_client==1){
    20c6:	10 91 86 00 	lds	r17, 0x0086
    20ca:	11 30       	cpi	r17, 0x01	; 1
    20cc:	09 f0       	breq	.+2      	; 0x20d0 <main+0x19e>
    20ce:	47 c0       	rjmp	.+142    	; 0x215e <main+0x22c>
                                LEDON;
    20d0:	de 98       	cbi	0x1b, 6	; 27
                                sec=0;
    20d2:	10 92 85 00 	sts	0x0085, r1
                                start_web_client=2;
    20d6:	80 93 86 00 	sts	0x0086, r24
                                web_client_attempts++;
    20da:	80 91 87 00 	lds	r24, 0x0087
    20de:	8f 5f       	subi	r24, 0xFF	; 255
    20e0:	80 93 87 00 	sts	0x0087, r24
                                mk_net_str(str,pingsrcip,4,'.',10);
    20e4:	c6 01       	movw	r24, r12
    20e6:	66 e6       	ldi	r22, 0x66	; 102
    20e8:	73 e0       	ldi	r23, 0x03	; 3
    20ea:	44 e0       	ldi	r20, 0x04	; 4
    20ec:	2e e2       	ldi	r18, 0x2E	; 46
    20ee:	0a e0       	ldi	r16, 0x0A	; 10
    20f0:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <mk_net_str>
                                urlencode(str,urlvarstr);
    20f4:	c6 01       	movw	r24, r12
    20f6:	66 ec       	ldi	r22, 0xC6	; 198
    20f8:	70 e0       	ldi	r23, 0x00	; 0
    20fa:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <urlencode>
                                client_browse_url(PSTR("/cgi-bin/upld?pingIP="),urlvarstr,PSTR(WEBSERVER_VHOST),&browserresult_callback);
    20fe:	85 ed       	ldi	r24, 0xD5	; 213
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	90 93 ab 00 	sts	0x00AB, r25
    2106:	80 93 aa 00 	sts	0x00AA, r24
// answer. Any other statuscode than 0 and 1 is a total communication failure.
//
void client_browse_url(prog_char *urlbuf, char *urlbuf_varpart, prog_char *hoststr,void (*callback)(uint8_t,uint16_t,uint16_t))
{
        client_urlbuf=urlbuf;
        client_urlbuf_var=urlbuf_varpart;
    210a:	30 92 ad 00 	sts	0x00AD, r3
    210e:	20 92 ac 00 	sts	0x00AC, r2
    2112:	50 92 af 00 	sts	0x00AF, r5
    2116:	40 92 ae 00 	sts	0x00AE, r4
        client_hoststr=hoststr;
        browsertype=0;
    211a:	10 92 97 00 	sts	0x0097, r1
        client_browser_callback=callback;
    211e:	90 92 a5 00 	sts	0x00A5, r9
    2122:	80 92 a4 00 	sts	0x00A4, r8
// We use callback functions because that saves memory and a uC is very
// limited in memory
//
uint8_t client_tcp_req(uint8_t (*result_callback)(uint8_t fd,uint8_t statuscode,uint16_t data_start_pos_in_buf, uint16_t len_of_data),uint16_t (*datafill_callback)(uint8_t fd),uint16_t port)
{
        client_tcp_result_callback=result_callback;
    2126:	70 92 a1 00 	sts	0x00A1, r7
    212a:	60 92 a0 00 	sts	0x00A0, r6
        client_tcp_datafill_callback=datafill_callback;
    212e:	b0 92 a3 00 	sts	0x00A3, r11
    2132:	a0 92 a2 00 	sts	0x00A2, r10
        tcp_client_port_h=(port>>8) & 0xff;
    2136:	10 92 90 00 	sts	0x0090, r1
        tcp_client_port_l=(port & 0xff);
    213a:	90 e5       	ldi	r25, 0x50	; 80
    213c:	90 93 91 00 	sts	0x0091, r25
        tcp_client_state=1; // send a syn
    2140:	10 93 8e 00 	sts	0x008E, r17
        tcp_fd++;
    2144:	80 91 8f 00 	lds	r24, 0x008F
    2148:	8f 5f       	subi	r24, 0xFF	; 255
    214a:	80 93 8f 00 	sts	0x008F, r24
        if (tcp_fd>7){
    214e:	88 30       	cpi	r24, 0x08	; 8
    2150:	10 f0       	brcs	.+4      	; 0x2156 <main+0x224>
                tcp_fd=0;
    2152:	10 92 8f 00 	sts	0x008F, r1
        client_urlbuf=urlbuf;
        client_urlbuf_var=urlbuf_varpart;
        client_hoststr=hoststr;
        browsertype=0;
        client_browser_callback=callback;
        www_fd=client_tcp_req(&www_client_internal_result_callback,&www_client_internal_datafill_callback,80);
    2156:	80 91 8f 00 	lds	r24, 0x008F
    215a:	80 93 98 00 	sts	0x0098, r24
                        }
                        // reset after a delay to prevent permanent bouncing
                        if (sec>60 && start_web_client==2){
    215e:	80 91 85 00 	lds	r24, 0x0085
    2162:	8d 33       	cpi	r24, 0x3D	; 61
    2164:	08 f4       	brcc	.+2      	; 0x2168 <main+0x236>
    2166:	66 cf       	rjmp	.-308    	; 0x2034 <main+0x102>
    2168:	80 91 86 00 	lds	r24, 0x0086
    216c:	82 30       	cpi	r24, 0x02	; 2
    216e:	09 f0       	breq	.+2      	; 0x2172 <main+0x240>
    2170:	61 cf       	rjmp	.-318    	; 0x2034 <main+0x102>
                                start_web_client=0;
    2172:	10 92 86 00 	sts	0x0086, r1
    2176:	5e cf       	rjmp	.-324    	; 0x2034 <main+0x102>
                        }
                        continue;
                }
                if(dat_p==0){ // plen!=0
    2178:	00 97       	sbiw	r24, 0x00	; 0
    217a:	31 f4       	brne	.+12     	; 0x2188 <main+0x256>
                        // check for incomming messages not processed
                        // as part of packetloop_icmp_tcp, e.g udp messages
                        udp_client_check_for_dns_answer(buf,plen);
    217c:	8b ed       	ldi	r24, 0xDB	; 219
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	b8 01       	movw	r22, r16
    2182:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <udp_client_check_for_dns_answer>
    2186:	56 cf       	rjmp	.-340    	; 0x2034 <main+0x102>
                        continue;
                }
                        
                if (strncmp("GET ",(char *)&(buf[dat_p]),4)!=0){
    2188:	bc 01       	movw	r22, r24
    218a:	65 52       	subi	r22, 0x25	; 37
    218c:	7f 4f       	sbci	r23, 0xFF	; 255
    218e:	84 e6       	ldi	r24, 0x64	; 100
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	44 e0       	ldi	r20, 0x04	; 4
    2194:	50 e0       	ldi	r21, 0x00	; 0
    2196:	0e 94 c9 12 	call	0x2592	; 0x2592 <strncmp>
    219a:	00 97       	sbiw	r24, 0x00	; 0
    219c:	f1 f0       	breq	.+60     	; 0x21da <main+0x2a8>
    219e:	60 e0       	ldi	r22, 0x00	; 0
    21a0:	70 e0       	ldi	r23, 0x00	; 0
    21a2:	06 c0       	rjmp	.+12     	; 0x21b0 <main+0x27e>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    21a4:	fb 01       	movw	r30, r22
    21a6:	e5 52       	subi	r30, 0x25	; 37
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	86 ab       	std	Z+54, r24	; 0x36
                pos++;
    21ac:	6f 5f       	subi	r22, 0xFF	; 255
    21ae:	7f 4f       	sbci	r23, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    21b0:	fb 01       	movw	r30, r22
    21b2:	e3 5e       	subi	r30, 0xE3	; 227
    21b4:	fd 4f       	sbci	r31, 0xFD	; 253
    21b6:	84 91       	lpm	r24, Z+
    21b8:	88 23       	and	r24, r24
    21ba:	a1 f7       	brne	.-24     	; 0x21a4 <main+0x272>
    21bc:	db 01       	movw	r26, r22
    21be:	af 5e       	subi	r26, 0xEF	; 239
    21c0:	be 4f       	sbci	r27, 0xFE	; 254
                        // head, post and other methods:
                        //
                        // for possible status codes see:
                        // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
                        dat_p=http200ok();
                        dat_p=fill_tcp_data_p(buf,dat_p,PSTR("<h1>200 OK</h1>"));
    21c2:	85 eb       	ldi	r24, 0xB5	; 181
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	03 c0       	rjmp	.+6      	; 0x21ce <main+0x29c>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    21c8:	2d 93       	st	X+, r18
                pos++;
    21ca:	6f 5f       	subi	r22, 0xFF	; 255
    21cc:	7f 4f       	sbci	r23, 0xFF	; 255
    21ce:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    21d0:	01 96       	adiw	r24, 0x01	; 1
    21d2:	24 91       	lpm	r18, Z+
    21d4:	22 23       	and	r18, r18
    21d6:	c1 f7       	brne	.-16     	; 0x21c8 <main+0x296>
    21d8:	30 c0       	rjmp	.+96     	; 0x223a <main+0x308>
                        goto SENDTCP;
                }
                if (strncmp("/ ",(char *)&(buf[dat_p+4]),2)==0){
    21da:	8f ed       	ldi	r24, 0xDF	; 223
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	e8 0e       	add	r14, r24
    21e0:	f9 1e       	adc	r15, r25
    21e2:	89 e6       	ldi	r24, 0x69	; 105
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	b7 01       	movw	r22, r14
    21e8:	42 e0       	ldi	r20, 0x02	; 2
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	0e 94 c9 12 	call	0x2592	; 0x2592 <strncmp>
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	19 f0       	breq	.+6      	; 0x21fa <main+0x2c8>
    21f4:	60 e0       	ldi	r22, 0x00	; 0
    21f6:	70 e0       	ldi	r23, 0x00	; 0
    21f8:	1a c0       	rjmp	.+52     	; 0x222e <main+0x2fc>
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	05 c0       	rjmp	.+10     	; 0x220a <main+0x2d8>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    2200:	fc 01       	movw	r30, r24
    2202:	e5 52       	subi	r30, 0x25	; 37
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	26 ab       	std	Z+54, r18	; 0x36
                pos++;
    2208:	01 96       	adiw	r24, 0x01	; 1
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    220a:	fc 01       	movw	r30, r24
    220c:	e3 5e       	subi	r30, 0xE3	; 227
    220e:	fd 4f       	sbci	r31, 0xFD	; 253
    2210:	24 91       	lpm	r18, Z+
    2212:	22 23       	and	r18, r18
    2214:	a9 f7       	brne	.-22     	; 0x2200 <main+0x2ce>
                        dat_p=http200ok();
                        dat_p=print_webpage(buf);
    2216:	8b ed       	ldi	r24, 0xDB	; 219
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <print_webpage>
    221e:	bc 01       	movw	r22, r24
    2220:	0c c0       	rjmp	.+24     	; 0x223a <main+0x308>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    2222:	fb 01       	movw	r30, r22
    2224:	e5 52       	subi	r30, 0x25	; 37
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	86 ab       	std	Z+54, r24	; 0x36
                pos++;
    222a:	6f 5f       	subi	r22, 0xFF	; 255
    222c:	7f 4f       	sbci	r23, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    222e:	fb 01       	movw	r30, r22
    2230:	eb 59       	subi	r30, 0x9B	; 155
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	84 91       	lpm	r24, Z+
    2236:	88 23       	and	r24, r24
    2238:	a1 f7       	brne	.-24     	; 0x2222 <main+0x2f0>
                        dat_p=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 401 Unauthorized\r\nContent-Type: text/html\r\n\r\n<h1>401 Unauthorized</h1>"));
                        goto SENDTCP;
                }
                //
SENDTCP:
                www_server_reply(buf,dat_p); // send data
    223a:	8b ed       	ldi	r24, 0xDB	; 219
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	0e 94 4a 07 	call	0xe94	; 0xe94 <www_server_reply>
    2242:	f8 ce       	rjmp	.-528    	; 0x2034 <main+0x102>

00002244 <www_client_internal_datafill_callback>:
        return(tcp_fd);
}
#endif //  TCP_client

#if defined (WWW_client) 
uint16_t www_client_internal_datafill_callback(uint8_t fd){
    2244:	cf 92       	push	r12
    2246:	df 92       	push	r13
    2248:	ef 92       	push	r14
    224a:	ff 92       	push	r15
    224c:	0f 93       	push	r16
    224e:	1f 93       	push	r17
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	00 d0       	rcall	.+0      	; 0x2256 <www_client_internal_datafill_callback+0x12>
    2256:	00 d0       	rcall	.+0      	; 0x2258 <www_client_internal_datafill_callback+0x14>
    2258:	0f 92       	push	r0
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
        char strbuf[5];
        uint16_t len=0;
        if (fd==www_fd){
    225e:	90 91 98 00 	lds	r25, 0x0098
    2262:	89 17       	cp	r24, r25
    2264:	19 f0       	breq	.+6      	; 0x226c <www_client_internal_datafill_callback+0x28>
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	50 e0       	ldi	r21, 0x00	; 0
    226a:	66 c1       	rjmp	.+716    	; 0x2538 <www_client_internal_datafill_callback+0x2f4>
                if (browsertype==0){
    226c:	80 91 97 00 	lds	r24, 0x0097
    2270:	00 91 92 00 	lds	r16, 0x0092
    2274:	10 91 93 00 	lds	r17, 0x0093
    2278:	88 23       	and	r24, r24
    227a:	09 f0       	breq	.+2      	; 0x227e <www_client_internal_datafill_callback+0x3a>
    227c:	67 c0       	rjmp	.+206    	; 0x234c <www_client_internal_datafill_callback+0x108>
                        // GET
                        len=fill_tcp_data_p(bufptr,0,PSTR("GET "));
    227e:	d8 01       	movw	r26, r16
    2280:	d6 96       	adiw	r26, 0x36	; 54
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	70 e0       	ldi	r23, 0x00	; 0
    2286:	03 c0       	rjmp	.+6      	; 0x228e <www_client_internal_datafill_callback+0x4a>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    2288:	8d 93       	st	X+, r24
                pos++;
    228a:	6f 5f       	subi	r22, 0xFF	; 255
    228c:	7f 4f       	sbci	r23, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    228e:	fb 01       	movw	r30, r22
    2290:	e8 5b       	subi	r30, 0xB8	; 184
    2292:	fc 4f       	sbci	r31, 0xFC	; 252
    2294:	84 91       	lpm	r24, Z+
    2296:	88 23       	and	r24, r24
    2298:	b9 f7       	brne	.-18     	; 0x2288 <www_client_internal_datafill_callback+0x44>
        uint16_t len=0;
        if (fd==www_fd){
                if (browsertype==0){
                        // GET
                        len=fill_tcp_data_p(bufptr,0,PSTR("GET "));
                        len=fill_tcp_data_p(bufptr,len,client_urlbuf);
    229a:	6a 5c       	subi	r22, 0xCA	; 202
    229c:	7f 4f       	sbci	r23, 0xFF	; 255
    229e:	d8 01       	movw	r26, r16
    22a0:	a6 0f       	add	r26, r22
    22a2:	b7 1f       	adc	r27, r23
    22a4:	66 53       	subi	r22, 0x36	; 54
    22a6:	70 40       	sbci	r23, 0x00	; 0
    22a8:	80 91 aa 00 	lds	r24, 0x00AA
    22ac:	90 91 ab 00 	lds	r25, 0x00AB
    22b0:	9c 01       	movw	r18, r24
    22b2:	03 c0       	rjmp	.+6      	; 0x22ba <www_client_internal_datafill_callback+0x76>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    22b4:	8d 93       	st	X+, r24
                pos++;
    22b6:	6f 5f       	subi	r22, 0xFF	; 255
    22b8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ba:	f9 01       	movw	r30, r18
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    22bc:	2f 5f       	subi	r18, 0xFF	; 255
    22be:	3f 4f       	sbci	r19, 0xFF	; 255
    22c0:	84 91       	lpm	r24, Z+
    22c2:	88 23       	and	r24, r24
    22c4:	b9 f7       	brne	.-18     	; 0x22b4 <www_client_internal_datafill_callback+0x70>
        if (fd==www_fd){
                if (browsertype==0){
                        // GET
                        len=fill_tcp_data_p(bufptr,0,PSTR("GET "));
                        len=fill_tcp_data_p(bufptr,len,client_urlbuf);
                        len=fill_tcp_data(bufptr,len,client_urlbuf_var);
    22c6:	40 91 ac 00 	lds	r20, 0x00AC
    22ca:	50 91 ad 00 	lds	r21, 0x00AD
    22ce:	c8 01       	movw	r24, r16
    22d0:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <fill_tcp_data>
    22d4:	ac 01       	movw	r20, r24
    22d6:	4a 5c       	subi	r20, 0xCA	; 202
    22d8:	5f 4f       	sbci	r21, 0xFF	; 255
    22da:	d8 01       	movw	r26, r16
    22dc:	a4 0f       	add	r26, r20
    22de:	b5 1f       	adc	r27, r21
    22e0:	46 53       	subi	r20, 0x36	; 54
    22e2:	50 40       	sbci	r21, 0x00	; 0
                        // I would prefer http/1.0 but there is a funny
                        // bug in some apache webservers which causes
                        // them to send two packets (fragmented PDU)
                        // if we don't use HTTP/1.1 + Connection: close
                        len=fill_tcp_data_p(bufptr,len,PSTR(" HTTP/1.1\r\nHost: "));
    22e4:	86 e3       	ldi	r24, 0x36	; 54
    22e6:	93 e0       	ldi	r25, 0x03	; 3
    22e8:	03 c0       	rjmp	.+6      	; 0x22f0 <www_client_internal_datafill_callback+0xac>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    22ea:	2d 93       	st	X+, r18
                pos++;
    22ec:	4f 5f       	subi	r20, 0xFF	; 255
    22ee:	5f 4f       	sbci	r21, 0xFF	; 255
    22f0:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    22f2:	01 96       	adiw	r24, 0x01	; 1
    22f4:	24 91       	lpm	r18, Z+
    22f6:	22 23       	and	r18, r18
    22f8:	c1 f7       	brne	.-16     	; 0x22ea <www_client_internal_datafill_callback+0xa6>
                        // I would prefer http/1.0 but there is a funny
                        // bug in some apache webservers which causes
                        // them to send two packets (fragmented PDU)
                        // if we don't use HTTP/1.1 + Connection: close
                        len=fill_tcp_data_p(bufptr,len,PSTR(" HTTP/1.1\r\nHost: "));
                        len=fill_tcp_data_p(bufptr,len,client_hoststr);
    22fa:	4a 5c       	subi	r20, 0xCA	; 202
    22fc:	5f 4f       	sbci	r21, 0xFF	; 255
    22fe:	d8 01       	movw	r26, r16
    2300:	a4 0f       	add	r26, r20
    2302:	b5 1f       	adc	r27, r21
    2304:	46 53       	subi	r20, 0x36	; 54
    2306:	50 40       	sbci	r21, 0x00	; 0
    2308:	80 91 ae 00 	lds	r24, 0x00AE
    230c:	90 91 af 00 	lds	r25, 0x00AF
    2310:	9c 01       	movw	r18, r24
    2312:	03 c0       	rjmp	.+6      	; 0x231a <www_client_internal_datafill_callback+0xd6>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    2314:	8d 93       	st	X+, r24
                pos++;
    2316:	4f 5f       	subi	r20, 0xFF	; 255
    2318:	5f 4f       	sbci	r21, 0xFF	; 255
    231a:	f9 01       	movw	r30, r18
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    231c:	2f 5f       	subi	r18, 0xFF	; 255
    231e:	3f 4f       	sbci	r19, 0xFF	; 255
    2320:	84 91       	lpm	r24, Z+
    2322:	88 23       	and	r24, r24
    2324:	b9 f7       	brne	.-18     	; 0x2314 <www_client_internal_datafill_callback+0xd0>
    2326:	4a 5c       	subi	r20, 0xCA	; 202
    2328:	5f 4f       	sbci	r21, 0xFF	; 255
    232a:	d8 01       	movw	r26, r16
    232c:	a4 0f       	add	r26, r20
    232e:	b5 1f       	adc	r27, r21
    2330:	46 53       	subi	r20, 0x36	; 54
    2332:	50 40       	sbci	r21, 0x00	; 0
                        // bug in some apache webservers which causes
                        // them to send two packets (fragmented PDU)
                        // if we don't use HTTP/1.1 + Connection: close
                        len=fill_tcp_data_p(bufptr,len,PSTR(" HTTP/1.1\r\nHost: "));
                        len=fill_tcp_data_p(bufptr,len,client_hoststr);
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nUser-Agent: tgr/1.0\r\nAccept: text/html\r\nConnection: close\r\n\r\n"));
    2334:	86 ef       	ldi	r24, 0xF6	; 246
    2336:	92 e0       	ldi	r25, 0x02	; 2
    2338:	03 c0       	rjmp	.+6      	; 0x2340 <www_client_internal_datafill_callback+0xfc>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    233a:	2d 93       	st	X+, r18
                pos++;
    233c:	4f 5f       	subi	r20, 0xFF	; 255
    233e:	5f 4f       	sbci	r21, 0xFF	; 255
    2340:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    2342:	01 96       	adiw	r24, 0x01	; 1
    2344:	24 91       	lpm	r18, Z+
    2346:	22 23       	and	r18, r18
    2348:	c1 f7       	brne	.-16     	; 0x233a <www_client_internal_datafill_callback+0xf6>
    234a:	f6 c0       	rjmp	.+492    	; 0x2538 <www_client_internal_datafill_callback+0x2f4>
                        len=fill_tcp_data_p(bufptr,len,PSTR(" HTTP/1.1\r\nHost: "));
                        len=fill_tcp_data_p(bufptr,len,client_hoststr);
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nUser-Agent: tgr/1.0\r\nAccept: text/html\r\nConnection: close\r\n\r\n"));
                }else{
                        // POST
                        len=fill_tcp_data_p(bufptr,0,PSTR("POST "));
    234c:	d8 01       	movw	r26, r16
    234e:	d6 96       	adiw	r26, 0x36	; 54
    2350:	ee 24       	eor	r14, r14
    2352:	ff 24       	eor	r15, r15
    2354:	04 c0       	rjmp	.+8      	; 0x235e <www_client_internal_datafill_callback+0x11a>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    2356:	8d 93       	st	X+, r24
                pos++;
    2358:	08 94       	sec
    235a:	e1 1c       	adc	r14, r1
    235c:	f1 1c       	adc	r15, r1
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    235e:	f7 01       	movw	r30, r14
    2360:	e0 51       	subi	r30, 0x10	; 16
    2362:	fd 4f       	sbci	r31, 0xFD	; 253
    2364:	84 91       	lpm	r24, Z+
    2366:	88 23       	and	r24, r24
    2368:	b1 f7       	brne	.-20     	; 0x2356 <www_client_internal_datafill_callback+0x112>
                        len=fill_tcp_data_p(bufptr,len,client_hoststr);
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nUser-Agent: tgr/1.0\r\nAccept: text/html\r\nConnection: close\r\n\r\n"));
                }else{
                        // POST
                        len=fill_tcp_data_p(bufptr,0,PSTR("POST "));
                        len=fill_tcp_data_p(bufptr,len,client_urlbuf);
    236a:	86 e3       	ldi	r24, 0x36	; 54
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	e8 0e       	add	r14, r24
    2370:	f9 1e       	adc	r15, r25
    2372:	d8 01       	movw	r26, r16
    2374:	ae 0d       	add	r26, r14
    2376:	bf 1d       	adc	r27, r15
    2378:	8a ec       	ldi	r24, 0xCA	; 202
    237a:	9f ef       	ldi	r25, 0xFF	; 255
    237c:	e8 0e       	add	r14, r24
    237e:	f9 1e       	adc	r15, r25
    2380:	80 91 aa 00 	lds	r24, 0x00AA
    2384:	90 91 ab 00 	lds	r25, 0x00AB
    2388:	9c 01       	movw	r18, r24
    238a:	04 c0       	rjmp	.+8      	; 0x2394 <www_client_internal_datafill_callback+0x150>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    238c:	8d 93       	st	X+, r24
                pos++;
    238e:	08 94       	sec
    2390:	e1 1c       	adc	r14, r1
    2392:	f1 1c       	adc	r15, r1
    2394:	f9 01       	movw	r30, r18
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    2396:	2f 5f       	subi	r18, 0xFF	; 255
    2398:	3f 4f       	sbci	r19, 0xFF	; 255
    239a:	84 91       	lpm	r24, Z+
    239c:	88 23       	and	r24, r24
    239e:	b1 f7       	brne	.-20     	; 0x238c <www_client_internal_datafill_callback+0x148>
    23a0:	86 e3       	ldi	r24, 0x36	; 54
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	e8 0e       	add	r14, r24
    23a6:	f9 1e       	adc	r15, r25
    23a8:	d8 01       	movw	r26, r16
    23aa:	ae 0d       	add	r26, r14
    23ac:	bf 1d       	adc	r27, r15
    23ae:	8a ec       	ldi	r24, 0xCA	; 202
    23b0:	9f ef       	ldi	r25, 0xFF	; 255
    23b2:	e8 0e       	add	r14, r24
    23b4:	f9 1e       	adc	r15, r25
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nUser-Agent: tgr/1.0\r\nAccept: text/html\r\nConnection: close\r\n\r\n"));
                }else{
                        // POST
                        len=fill_tcp_data_p(bufptr,0,PSTR("POST "));
                        len=fill_tcp_data_p(bufptr,len,client_urlbuf);
                        len=fill_tcp_data_p(bufptr,len,PSTR(" HTTP/1.1\r\nHost: "));
    23b6:	8e ed       	ldi	r24, 0xDE	; 222
    23b8:	92 e0       	ldi	r25, 0x02	; 2
    23ba:	04 c0       	rjmp	.+8      	; 0x23c4 <www_client_internal_datafill_callback+0x180>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    23bc:	2d 93       	st	X+, r18
                pos++;
    23be:	08 94       	sec
    23c0:	e1 1c       	adc	r14, r1
    23c2:	f1 1c       	adc	r15, r1
    23c4:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    23c6:	01 96       	adiw	r24, 0x01	; 1
    23c8:	24 91       	lpm	r18, Z+
    23ca:	22 23       	and	r18, r18
    23cc:	b9 f7       	brne	.-18     	; 0x23bc <www_client_internal_datafill_callback+0x178>
                }else{
                        // POST
                        len=fill_tcp_data_p(bufptr,0,PSTR("POST "));
                        len=fill_tcp_data_p(bufptr,len,client_urlbuf);
                        len=fill_tcp_data_p(bufptr,len,PSTR(" HTTP/1.1\r\nHost: "));
                        len=fill_tcp_data_p(bufptr,len,client_hoststr);
    23ce:	86 e3       	ldi	r24, 0x36	; 54
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	e8 0e       	add	r14, r24
    23d4:	f9 1e       	adc	r15, r25
    23d6:	d8 01       	movw	r26, r16
    23d8:	ae 0d       	add	r26, r14
    23da:	bf 1d       	adc	r27, r15
    23dc:	8a ec       	ldi	r24, 0xCA	; 202
    23de:	9f ef       	ldi	r25, 0xFF	; 255
    23e0:	e8 0e       	add	r14, r24
    23e2:	f9 1e       	adc	r15, r25
    23e4:	80 91 ae 00 	lds	r24, 0x00AE
    23e8:	90 91 af 00 	lds	r25, 0x00AF
    23ec:	9c 01       	movw	r18, r24
    23ee:	04 c0       	rjmp	.+8      	; 0x23f8 <www_client_internal_datafill_callback+0x1b4>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    23f0:	8d 93       	st	X+, r24
                pos++;
    23f2:	08 94       	sec
    23f4:	e1 1c       	adc	r14, r1
    23f6:	f1 1c       	adc	r15, r1
    23f8:	f9 01       	movw	r30, r18
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    23fa:	2f 5f       	subi	r18, 0xFF	; 255
    23fc:	3f 4f       	sbci	r19, 0xFF	; 255
    23fe:	84 91       	lpm	r24, Z+
    2400:	88 23       	and	r24, r24
    2402:	b1 f7       	brne	.-20     	; 0x23f0 <www_client_internal_datafill_callback+0x1ac>
                        // POST
                        len=fill_tcp_data_p(bufptr,0,PSTR("POST "));
                        len=fill_tcp_data_p(bufptr,len,client_urlbuf);
                        len=fill_tcp_data_p(bufptr,len,PSTR(" HTTP/1.1\r\nHost: "));
                        len=fill_tcp_data_p(bufptr,len,client_hoststr);
                        if (client_additionalheaderline){
    2404:	40 91 a6 00 	lds	r20, 0x00A6
    2408:	50 91 a7 00 	lds	r21, 0x00A7
    240c:	41 15       	cp	r20, r1
    240e:	51 05       	cpc	r21, r1
    2410:	69 f1       	breq	.+90     	; 0x246c <www_client_internal_datafill_callback+0x228>
    2412:	86 e3       	ldi	r24, 0x36	; 54
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	e8 0e       	add	r14, r24
    2418:	f9 1e       	adc	r15, r25
    241a:	d8 01       	movw	r26, r16
    241c:	ae 0d       	add	r26, r14
    241e:	bf 1d       	adc	r27, r15
    2420:	8a ec       	ldi	r24, 0xCA	; 202
    2422:	9f ef       	ldi	r25, 0xFF	; 255
    2424:	e8 0e       	add	r14, r24
    2426:	f9 1e       	adc	r15, r25
                                len=fill_tcp_data_p(bufptr,len,PSTR("\r\n"));
    2428:	8b ed       	ldi	r24, 0xDB	; 219
    242a:	92 e0       	ldi	r25, 0x02	; 2
    242c:	04 c0       	rjmp	.+8      	; 0x2436 <www_client_internal_datafill_callback+0x1f2>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    242e:	2d 93       	st	X+, r18
                pos++;
    2430:	08 94       	sec
    2432:	e1 1c       	adc	r14, r1
    2434:	f1 1c       	adc	r15, r1
    2436:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    2438:	01 96       	adiw	r24, 0x01	; 1
    243a:	24 91       	lpm	r18, Z+
    243c:	22 23       	and	r18, r18
    243e:	b9 f7       	brne	.-18     	; 0x242e <www_client_internal_datafill_callback+0x1ea>
    2440:	86 e3       	ldi	r24, 0x36	; 54
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	e8 0e       	add	r14, r24
    2446:	f9 1e       	adc	r15, r25
    2448:	d8 01       	movw	r26, r16
    244a:	ae 0d       	add	r26, r14
    244c:	bf 1d       	adc	r27, r15
    244e:	8a ec       	ldi	r24, 0xCA	; 202
    2450:	9f ef       	ldi	r25, 0xFF	; 255
    2452:	e8 0e       	add	r14, r24
    2454:	f9 1e       	adc	r15, r25
    2456:	ca 01       	movw	r24, r20
    2458:	04 c0       	rjmp	.+8      	; 0x2462 <www_client_internal_datafill_callback+0x21e>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    245a:	2d 93       	st	X+, r18
                pos++;
    245c:	08 94       	sec
    245e:	e1 1c       	adc	r14, r1
    2460:	f1 1c       	adc	r15, r1
    2462:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    2464:	01 96       	adiw	r24, 0x01	; 1
    2466:	24 91       	lpm	r18, Z+
    2468:	22 23       	and	r18, r18
    246a:	b9 f7       	brne	.-18     	; 0x245a <www_client_internal_datafill_callback+0x216>
    246c:	86 e3       	ldi	r24, 0x36	; 54
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	e8 0e       	add	r14, r24
    2472:	f9 1e       	adc	r15, r25
    2474:	d8 01       	movw	r26, r16
    2476:	ae 0d       	add	r26, r14
    2478:	bf 1d       	adc	r27, r15
    247a:	8a ec       	ldi	r24, 0xCA	; 202
    247c:	9f ef       	ldi	r25, 0xFF	; 255
    247e:	e8 0e       	add	r14, r24
    2480:	f9 1e       	adc	r15, r25
                        len=fill_tcp_data_p(bufptr,len,client_hoststr);
                        if (client_additionalheaderline){
                                len=fill_tcp_data_p(bufptr,len,PSTR("\r\n"));
                                len=fill_tcp_data_p(bufptr,len,client_additionalheaderline);
                        }
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nUser-Agent: tgr/1.1\r\nAccept: */*\r\nConnection: close\r\n"));
    2482:	83 ea       	ldi	r24, 0xA3	; 163
    2484:	92 e0       	ldi	r25, 0x02	; 2
    2486:	04 c0       	rjmp	.+8      	; 0x2490 <www_client_internal_datafill_callback+0x24c>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    2488:	2d 93       	st	X+, r18
                pos++;
    248a:	08 94       	sec
    248c:	e1 1c       	adc	r14, r1
    248e:	f1 1c       	adc	r15, r1
    2490:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    2492:	01 96       	adiw	r24, 0x01	; 1
    2494:	24 91       	lpm	r18, Z+
    2496:	22 23       	and	r18, r18
    2498:	b9 f7       	brne	.-18     	; 0x2488 <www_client_internal_datafill_callback+0x244>
    249a:	86 e3       	ldi	r24, 0x36	; 54
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	e8 0e       	add	r14, r24
    24a0:	f9 1e       	adc	r15, r25
    24a2:	d8 01       	movw	r26, r16
    24a4:	ae 0d       	add	r26, r14
    24a6:	bf 1d       	adc	r27, r15
    24a8:	8a ec       	ldi	r24, 0xCA	; 202
    24aa:	9f ef       	ldi	r25, 0xFF	; 255
    24ac:	e8 0e       	add	r14, r24
    24ae:	f9 1e       	adc	r15, r25
                        if (client_additionalheaderline){
                                len=fill_tcp_data_p(bufptr,len,PSTR("\r\n"));
                                len=fill_tcp_data_p(bufptr,len,client_additionalheaderline);
                        }
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nUser-Agent: tgr/1.1\r\nAccept: */*\r\nConnection: close\r\n"));
                        len=fill_tcp_data_p(bufptr,len,PSTR("Content-Length: "));
    24b0:	82 e9       	ldi	r24, 0x92	; 146
    24b2:	92 e0       	ldi	r25, 0x02	; 2
    24b4:	04 c0       	rjmp	.+8      	; 0x24be <www_client_internal_datafill_callback+0x27a>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    24b6:	2d 93       	st	X+, r18
                pos++;
    24b8:	08 94       	sec
    24ba:	e1 1c       	adc	r14, r1
    24bc:	f1 1c       	adc	r15, r1
    24be:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    24c0:	01 96       	adiw	r24, 0x01	; 1
    24c2:	24 91       	lpm	r18, Z+
    24c4:	22 23       	and	r18, r18
    24c6:	b9 f7       	brne	.-18     	; 0x24b6 <www_client_internal_datafill_callback+0x272>
                                len=fill_tcp_data_p(bufptr,len,PSTR("\r\n"));
                                len=fill_tcp_data_p(bufptr,len,client_additionalheaderline);
                        }
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nUser-Agent: tgr/1.1\r\nAccept: */*\r\nConnection: close\r\n"));
                        len=fill_tcp_data_p(bufptr,len,PSTR("Content-Length: "));
                        itoa(strlen(client_postval),strbuf,10);
    24c8:	e0 91 a8 00 	lds	r30, 0x00A8
    24cc:	f0 91 a9 00 	lds	r31, 0x00A9
    24d0:	df 01       	movw	r26, r30
    24d2:	0d 90       	ld	r0, X+
    24d4:	00 20       	and	r0, r0
    24d6:	e9 f7       	brne	.-6      	; 0x24d2 <www_client_internal_datafill_callback+0x28e>
    24d8:	11 97       	sbiw	r26, 0x01	; 1
    24da:	cd 01       	movw	r24, r26
    24dc:	8e 1b       	sub	r24, r30
    24de:	9f 0b       	sbc	r25, r31
    24e0:	8e 01       	movw	r16, r28
    24e2:	0f 5f       	subi	r16, 0xFF	; 255
    24e4:	1f 4f       	sbci	r17, 0xFF	; 255
    24e6:	b8 01       	movw	r22, r16
    24e8:	4a e0       	ldi	r20, 0x0A	; 10
    24ea:	50 e0       	ldi	r21, 0x00	; 0
    24ec:	0e 94 d7 12 	call	0x25ae	; 0x25ae <itoa>
                        len=fill_tcp_data(bufptr,len,strbuf);
    24f0:	c0 90 92 00 	lds	r12, 0x0092
    24f4:	d0 90 93 00 	lds	r13, 0x0093
    24f8:	c6 01       	movw	r24, r12
    24fa:	b7 01       	movw	r22, r14
    24fc:	a8 01       	movw	r20, r16
    24fe:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <fill_tcp_data>
    2502:	bc 01       	movw	r22, r24
    2504:	6a 5c       	subi	r22, 0xCA	; 202
    2506:	7f 4f       	sbci	r23, 0xFF	; 255
    2508:	d6 01       	movw	r26, r12
    250a:	a6 0f       	add	r26, r22
    250c:	b7 1f       	adc	r27, r23
    250e:	66 53       	subi	r22, 0x36	; 54
    2510:	70 40       	sbci	r23, 0x00	; 0
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nContent-Type: application/x-www-form-urlencoded\r\n\r\n"));
    2512:	8c e5       	ldi	r24, 0x5C	; 92
    2514:	92 e0       	ldi	r25, 0x02	; 2
    2516:	03 c0       	rjmp	.+6      	; 0x251e <www_client_internal_datafill_callback+0x2da>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    2518:	2d 93       	st	X+, r18
                pos++;
    251a:	6f 5f       	subi	r22, 0xFF	; 255
    251c:	7f 4f       	sbci	r23, 0xFF	; 255
    251e:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    2520:	01 96       	adiw	r24, 0x01	; 1
    2522:	24 91       	lpm	r18, Z+
    2524:	22 23       	and	r18, r18
    2526:	c1 f7       	brne	.-16     	; 0x2518 <www_client_internal_datafill_callback+0x2d4>
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nUser-Agent: tgr/1.1\r\nAccept: */*\r\nConnection: close\r\n"));
                        len=fill_tcp_data_p(bufptr,len,PSTR("Content-Length: "));
                        itoa(strlen(client_postval),strbuf,10);
                        len=fill_tcp_data(bufptr,len,strbuf);
                        len=fill_tcp_data_p(bufptr,len,PSTR("\r\nContent-Type: application/x-www-form-urlencoded\r\n\r\n"));
                        len=fill_tcp_data(bufptr,len,client_postval);
    2528:	40 91 a8 00 	lds	r20, 0x00A8
    252c:	50 91 a9 00 	lds	r21, 0x00A9
    2530:	c6 01       	movw	r24, r12
    2532:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <fill_tcp_data>
    2536:	ac 01       	movw	r20, r24
                }
                return(len);
        }
        return(0);
}
    2538:	ca 01       	movw	r24, r20
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	0f 90       	pop	r0
    2544:	cf 91       	pop	r28
    2546:	df 91       	pop	r29
    2548:	1f 91       	pop	r17
    254a:	0f 91       	pop	r16
    254c:	ff 90       	pop	r15
    254e:	ef 90       	pop	r14
    2550:	df 90       	pop	r13
    2552:	cf 90       	pop	r12
    2554:	08 95       	ret

00002556 <atoi>:
    2556:	fc 01       	movw	r30, r24
    2558:	88 27       	eor	r24, r24
    255a:	99 27       	eor	r25, r25
    255c:	e8 94       	clt
    255e:	21 91       	ld	r18, Z+
    2560:	20 32       	cpi	r18, 0x20	; 32
    2562:	e9 f3       	breq	.-6      	; 0x255e <atoi+0x8>
    2564:	29 30       	cpi	r18, 0x09	; 9
    2566:	10 f0       	brcs	.+4      	; 0x256c <atoi+0x16>
    2568:	2e 30       	cpi	r18, 0x0E	; 14
    256a:	c8 f3       	brcs	.-14     	; 0x255e <atoi+0x8>
    256c:	2b 32       	cpi	r18, 0x2B	; 43
    256e:	41 f0       	breq	.+16     	; 0x2580 <atoi+0x2a>
    2570:	2d 32       	cpi	r18, 0x2D	; 45
    2572:	39 f4       	brne	.+14     	; 0x2582 <atoi+0x2c>
    2574:	68 94       	set
    2576:	04 c0       	rjmp	.+8      	; 0x2580 <atoi+0x2a>
    2578:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__mulhi_const_10>
    257c:	82 0f       	add	r24, r18
    257e:	91 1d       	adc	r25, r1
    2580:	21 91       	ld	r18, Z+
    2582:	20 53       	subi	r18, 0x30	; 48
    2584:	2a 30       	cpi	r18, 0x0A	; 10
    2586:	c0 f3       	brcs	.-16     	; 0x2578 <atoi+0x22>
    2588:	1e f4       	brtc	.+6      	; 0x2590 <atoi+0x3a>
    258a:	90 95       	com	r25
    258c:	81 95       	neg	r24
    258e:	9f 4f       	sbci	r25, 0xFF	; 255
    2590:	08 95       	ret

00002592 <strncmp>:
    2592:	fb 01       	movw	r30, r22
    2594:	dc 01       	movw	r26, r24
    2596:	41 50       	subi	r20, 0x01	; 1
    2598:	50 40       	sbci	r21, 0x00	; 0
    259a:	30 f0       	brcs	.+12     	; 0x25a8 <strncmp+0x16>
    259c:	8d 91       	ld	r24, X+
    259e:	01 90       	ld	r0, Z+
    25a0:	80 19       	sub	r24, r0
    25a2:	19 f4       	brne	.+6      	; 0x25aa <strncmp+0x18>
    25a4:	00 20       	and	r0, r0
    25a6:	b9 f7       	brne	.-18     	; 0x2596 <strncmp+0x4>
    25a8:	88 1b       	sub	r24, r24
    25aa:	99 0b       	sbc	r25, r25
    25ac:	08 95       	ret

000025ae <itoa>:
    25ae:	fb 01       	movw	r30, r22
    25b0:	9f 01       	movw	r18, r30
    25b2:	e8 94       	clt
    25b4:	42 30       	cpi	r20, 0x02	; 2
    25b6:	c4 f0       	brlt	.+48     	; 0x25e8 <itoa+0x3a>
    25b8:	45 32       	cpi	r20, 0x25	; 37
    25ba:	b4 f4       	brge	.+44     	; 0x25e8 <itoa+0x3a>
    25bc:	4a 30       	cpi	r20, 0x0A	; 10
    25be:	29 f4       	brne	.+10     	; 0x25ca <itoa+0x1c>
    25c0:	97 fb       	bst	r25, 7
    25c2:	1e f4       	brtc	.+6      	; 0x25ca <itoa+0x1c>
    25c4:	90 95       	com	r25
    25c6:	81 95       	neg	r24
    25c8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ca:	64 2f       	mov	r22, r20
    25cc:	77 27       	eor	r23, r23
    25ce:	0e 94 24 13 	call	0x2648	; 0x2648 <__udivmodhi4>
    25d2:	80 5d       	subi	r24, 0xD0	; 208
    25d4:	8a 33       	cpi	r24, 0x3A	; 58
    25d6:	0c f0       	brlt	.+2      	; 0x25da <itoa+0x2c>
    25d8:	89 5d       	subi	r24, 0xD9	; 217
    25da:	81 93       	st	Z+, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	a1 f7       	brne	.-24     	; 0x25ca <itoa+0x1c>
    25e2:	16 f4       	brtc	.+4      	; 0x25e8 <itoa+0x3a>
    25e4:	5d e2       	ldi	r21, 0x2D	; 45
    25e6:	51 93       	st	Z+, r21
    25e8:	10 82       	st	Z, r1
    25ea:	c9 01       	movw	r24, r18
    25ec:	0c 94 00 13 	jmp	0x2600	; 0x2600 <strrev>

000025f0 <__mulhi_const_10>:
    25f0:	7a e0       	ldi	r23, 0x0A	; 10
    25f2:	97 9f       	mul	r25, r23
    25f4:	90 2d       	mov	r25, r0
    25f6:	87 9f       	mul	r24, r23
    25f8:	80 2d       	mov	r24, r0
    25fa:	91 0d       	add	r25, r1
    25fc:	11 24       	eor	r1, r1
    25fe:	08 95       	ret

00002600 <strrev>:
    2600:	dc 01       	movw	r26, r24
    2602:	fc 01       	movw	r30, r24
    2604:	67 2f       	mov	r22, r23
    2606:	71 91       	ld	r23, Z+
    2608:	77 23       	and	r23, r23
    260a:	e1 f7       	brne	.-8      	; 0x2604 <strrev+0x4>
    260c:	32 97       	sbiw	r30, 0x02	; 2
    260e:	04 c0       	rjmp	.+8      	; 0x2618 <strrev+0x18>
    2610:	7c 91       	ld	r23, X
    2612:	6d 93       	st	X+, r22
    2614:	70 83       	st	Z, r23
    2616:	62 91       	ld	r22, -Z
    2618:	ae 17       	cp	r26, r30
    261a:	bf 07       	cpc	r27, r31
    261c:	c8 f3       	brcs	.-14     	; 0x2610 <strrev+0x10>
    261e:	08 95       	ret

00002620 <isalnum>:
    2620:	91 11       	cpse	r25, r1
    2622:	06 c0       	rjmp	.+12     	; 0x2630 <__ctype_isfalse>
    2624:	80 53       	subi	r24, 0x30	; 48
    2626:	8a 50       	subi	r24, 0x0A	; 10
    2628:	10 f0       	brcs	.+4      	; 0x262e <isalnum+0xe>
    262a:	86 5c       	subi	r24, 0xC6	; 198
    262c:	06 c0       	rjmp	.+12     	; 0x263a <isalpha>
    262e:	08 95       	ret

00002630 <__ctype_isfalse>:
    2630:	99 27       	eor	r25, r25
    2632:	88 27       	eor	r24, r24

00002634 <__ctype_istrue>:
    2634:	08 95       	ret

00002636 <isupper>:
    2636:	85 fd       	sbrc	r24, 5
    2638:	fb cf       	rjmp	.-10     	; 0x2630 <__ctype_isfalse>

0000263a <isalpha>:
    263a:	80 62       	ori	r24, 0x20	; 32

0000263c <islower>:
    263c:	91 11       	cpse	r25, r1
    263e:	f8 cf       	rjmp	.-16     	; 0x2630 <__ctype_isfalse>
    2640:	81 56       	subi	r24, 0x61	; 97
    2642:	8a 51       	subi	r24, 0x1A	; 26
    2644:	e0 f7       	brcc	.-8      	; 0x263e <islower+0x2>
    2646:	08 95       	ret

00002648 <__udivmodhi4>:
    2648:	aa 1b       	sub	r26, r26
    264a:	bb 1b       	sub	r27, r27
    264c:	51 e1       	ldi	r21, 0x11	; 17
    264e:	07 c0       	rjmp	.+14     	; 0x265e <__udivmodhi4_ep>

00002650 <__udivmodhi4_loop>:
    2650:	aa 1f       	adc	r26, r26
    2652:	bb 1f       	adc	r27, r27
    2654:	a6 17       	cp	r26, r22
    2656:	b7 07       	cpc	r27, r23
    2658:	10 f0       	brcs	.+4      	; 0x265e <__udivmodhi4_ep>
    265a:	a6 1b       	sub	r26, r22
    265c:	b7 0b       	sbc	r27, r23

0000265e <__udivmodhi4_ep>:
    265e:	88 1f       	adc	r24, r24
    2660:	99 1f       	adc	r25, r25
    2662:	5a 95       	dec	r21
    2664:	a9 f7       	brne	.-22     	; 0x2650 <__udivmodhi4_loop>
    2666:	80 95       	com	r24
    2668:	90 95       	com	r25
    266a:	bc 01       	movw	r22, r24
    266c:	cd 01       	movw	r24, r26
    266e:	08 95       	ret

00002670 <_exit>:
    2670:	f8 94       	cli

00002672 <__stop_program>:
    2672:	ff cf       	rjmp	.-2      	; 0x2672 <__stop_program>
