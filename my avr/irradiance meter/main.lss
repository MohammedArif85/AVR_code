
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001578  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00001578  0000160c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000247  008000a8  008000a8  00001654  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000374  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019dc  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000036d  00000000  00000000  000033c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000165f  00000000  00000000  00003731  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  00004d90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bf  00000000  00000000  00005020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001108  00000000  00000000  000054df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000065e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a3 01 	jmp	0x346	; 0x346 <__ctors_end>
       4:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
       8:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
       c:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      10:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      14:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      18:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      1c:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      20:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      24:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      28:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      2c:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      30:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      34:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      38:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      3c:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      40:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      44:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      48:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      4c:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>
      50:	0c 94 c0 01 	jmp	0x380	; 0x380 <__bad_interrupt>

00000054 <__c.2395>:
      54:	48 54 54 50 2f 31 2e 30 20 34 30 31 20 55 6e 61     HTTP/1.0 401 Una
      64:	75 74 68 6f 72 69 7a 65 64 0d 0a 43 6f 6e 74 65     uthorized..Conte
      74:	6e 74 2d 54 79 70 65 3a 20 74 65 78 74 2f 68 74     nt-Type: text/ht
      84:	6d 6c 0d 0a 0d 0a 3c 68 31 3e 34 30 31 20 55 6e     ml....<h1>401 Un
      94:	61 75 74 68 6f 72 69 7a 65 64 3c 2f 68 31 3e 00     authorized</h1>.

000000a4 <__c.2393>:
      a4:	3c 70 3e 55 73 61 67 65 3a 20 68 74 74 70 3a 2f     <p>Usage: http:/
      b4:	2f 68 6f 73 74 5f 6f 72 5f 69 70 2f 70 61 73 73     /host_or_ip/pass
      c4:	77 6f 72 64 3c 2f 70 3e 0a 00                       word</p>..

000000ce <__c.2391>:
      ce:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
      de:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
      ee:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

000000fb <__c.2388>:
      fb:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     10b:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     11b:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 3c 68 31 3e     ext/html....<h1>
     12b:	32 30 30 20 4f 4b 3c 2f 68 31 3e 00                 200 OK</h1>.

00000137 <__c.2359>:
     137:	3c 2f 63 65 6e 74 65 72 3e 3c 68 72 3e 3c 62 72     </center><hr><br
     147:	3e 42 79 20 53 61 63 68 69 20 41 77 61 73 74 68     >By Sachi Awasth
     157:	69 0a 00                                            i..

0000015a <__c.2357>:
     15a:	2f 31 22 3e 53 77 69 74 63 68 20 6f 6e 3c 2f 61     /1">Switch on</a
     16a:	3e 3c 70 3e 00                                      ><p>.

0000016f <__c.2355>:
     16f:	2f 30 22 3e 53 77 69 74 63 68 20 6f 66 66 3c 2f     /0">Switch off</
     17f:	61 3e 3c 70 3e 00                                   a><p>.

00000185 <__c.2353>:
     185:	20 3c 73 6d 61 6c 6c 3e 3c 61 20 68 72 65 66 3d      <small><a href=
     195:	22 2e 22 3e 5b 72 65 66 72 65 73 68 20 73 74 61     ".">[refresh sta
     1a5:	74 75 73 5d 3c 2f 61 3e 3c 2f 73 6d 61 6c 6c 3e     tus]</a></small>
     1b5:	3c 2f 70 3e 0a 3c 70 3e 3c 61 20 68 72 65 66 3d     </p>.<p><a href=
     1c5:	22 2e 00                                            "..

000001c8 <__c.2351>:
     1c8:	4f 46 46 00                                         OFF.

000001cc <__c.2349>:
     1cc:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 23 30 30     <font color="#00
     1dc:	46 46 30 30 22 3e 20 4f 4e 3c 2f 66 6f 6e 74 3e     FF00"> ON</font>
     1ec:	00                                                  .

000001ed <__c.2347>:
     1ed:	3c 63 65 6e 74 65 72 3e 3c 70 3e 4f 75 74 70 75     <center><p>Outpu
     1fd:	74 20 69 73 3a 20 00                                t is: .

00000204 <__c.2345>:
     204:	20 4a 6f 75 6c 65 73 3c 2f 63 65 6e 74 65 72 3e      Joules</center>
     214:	3c 2f 68 32 3e 3c 2f 70 3e 00                       </h2></p>.

0000021e <__c.2343>:
     21e:	3c 63 65 6e 74 65 72 3e 3c 70 3e 3c 68 32 3e 49     <center><p><h2>I
     22e:	72 72 61 64 69 61 6e 63 65 20 69 73 3a 20 00        rradiance is: .

0000023d <__c.2341>:
     23d:	3c 48 31 3e 53 6f 6c 61 72 20 49 72 72 61 64 69     <H1>Solar Irradi
     24d:	61 6e 63 65 20 4d 65 74 65 72 3c 2f 48 31 3e 00     ance Meter</H1>.

0000025d <__c.2339>:
     25d:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     26d:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     27d:	65 78 74 2f 68 74 6d 6c 0d 0a 50 72 61 67 6d 61     ext/html..Pragma
     28d:	3a 20 6e 6f 2d 63 61 63 68 65 0d 0a 52 65 66 72     : no-cache..Refr
     29d:	65 73 68 3a 20 32 30 0d 0a 0d 0a 00                 esh: 20.....

000002a9 <__c.2326>:
     2a9:	61 64 64 20 61 20 74 72 61 69 6c 69 6e 67 20 73     add a trailing s
     2b9:	6c 61 73 68 20 74 6f 20 74 68 65 20 75 72 6c 0a     lash to the url.
     2c9:	00                                                  .

000002ca <__c.2324>:
     2ca:	3c 68 31 3e 33 30 31 20 4d 6f 76 65 64 20 50 65     <h1>301 Moved Pe
     2da:	72 6d 61 6e 65 6e 74 6c 79 3c 2f 68 31 3e 0a 00     rmanently</h1>..

000002ea <__c.2322>:
     2ea:	2f 0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a     /..Content-Type:
     2fa:	20 74 65 78 74 2f 68 74 6d 6c 0d 0a 50 72 61 67      text/html..Prag
     30a:	6d 61 3a 20 6e 6f 2d 63 61 63 68 65 0d 0a 0d 0a     ma: no-cache....
     31a:	00                                                  .

0000031b <__c.2320>:
     31b:	48 54 54 50 2f 31 2e 30 20 33 30 31 20 4d 6f 76     HTTP/1.0 301 Mov
     32b:	65 64 20 50 65 72 6d 61 6e 65 6e 74 6c 79 0d 0a     ed Permanently..
     33b:	4c 6f 63 61 74 69 6f 6e 3a 20 00                    Location: .

00000346 <__ctors_end>:
     346:	11 24       	eor	r1, r1
     348:	1f be       	out	0x3f, r1	; 63
     34a:	cf e5       	ldi	r28, 0x5F	; 95
     34c:	d8 e0       	ldi	r29, 0x08	; 8
     34e:	de bf       	out	0x3e, r29	; 62
     350:	cd bf       	out	0x3d, r28	; 61

00000352 <__do_copy_data>:
     352:	10 e0       	ldi	r17, 0x00	; 0
     354:	a0 e6       	ldi	r26, 0x60	; 96
     356:	b0 e0       	ldi	r27, 0x00	; 0
     358:	e8 e7       	ldi	r30, 0x78	; 120
     35a:	f5 e1       	ldi	r31, 0x15	; 21
     35c:	02 c0       	rjmp	.+4      	; 0x362 <.do_copy_data_start>

0000035e <.do_copy_data_loop>:
     35e:	05 90       	lpm	r0, Z+
     360:	0d 92       	st	X+, r0

00000362 <.do_copy_data_start>:
     362:	a8 3a       	cpi	r26, 0xA8	; 168
     364:	b1 07       	cpc	r27, r17
     366:	d9 f7       	brne	.-10     	; 0x35e <.do_copy_data_loop>

00000368 <__do_clear_bss>:
     368:	12 e0       	ldi	r17, 0x02	; 2
     36a:	a8 ea       	ldi	r26, 0xA8	; 168
     36c:	b0 e0       	ldi	r27, 0x00	; 0
     36e:	01 c0       	rjmp	.+2      	; 0x372 <.do_clear_bss_start>

00000370 <.do_clear_bss_loop>:
     370:	1d 92       	st	X+, r1

00000372 <.do_clear_bss_start>:
     372:	af 3e       	cpi	r26, 0xEF	; 239
     374:	b1 07       	cpc	r27, r17
     376:	e1 f7       	brne	.-8      	; 0x370 <.do_clear_bss_loop>
     378:	0e 94 a7 08 	call	0x114e	; 0x114e <main>
     37c:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <_exit>

00000380 <__bad_interrupt>:
     380:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000384 <enc28j60ReadOp>:
//
#define waitspi() while(!(SPSR&(1<<SPIF)))

uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
{
        CSACTIVE;
     384:	c4 98       	cbi	0x18, 4	; 24
        // issue read command
        SPDR = op | (address & ADDR_MASK);
     386:	96 2f       	mov	r25, r22
     388:	9f 71       	andi	r25, 0x1F	; 31
     38a:	98 2b       	or	r25, r24
     38c:	9f b9       	out	0x0f, r25	; 15
        waitspi();
     38e:	77 9b       	sbis	0x0e, 7	; 14
     390:	fe cf       	rjmp	.-4      	; 0x38e <enc28j60ReadOp+0xa>
        // read data
        SPDR = 0x00;
     392:	1f b8       	out	0x0f, r1	; 15
        waitspi();
     394:	77 9b       	sbis	0x0e, 7	; 14
     396:	fe cf       	rjmp	.-4      	; 0x394 <enc28j60ReadOp+0x10>
        // do dummy read if needed (for mac and mii, see datasheet page 29)
        if(address & 0x80)
     398:	67 ff       	sbrs	r22, 7
     39a:	03 c0       	rjmp	.+6      	; 0x3a2 <enc28j60ReadOp+0x1e>
        {
                SPDR = 0x00;
     39c:	1f b8       	out	0x0f, r1	; 15
                waitspi();
     39e:	77 9b       	sbis	0x0e, 7	; 14
     3a0:	fe cf       	rjmp	.-4      	; 0x39e <enc28j60ReadOp+0x1a>
        }
        // release CS
        CSPASSIVE;
     3a2:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
     3a4:	8f b1       	in	r24, 0x0f	; 15
}
     3a6:	08 95       	ret

000003a8 <enc28j60WriteOp>:

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     3a8:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     3aa:	6f 71       	andi	r22, 0x1F	; 31
     3ac:	68 2b       	or	r22, r24
     3ae:	6f b9       	out	0x0f, r22	; 15
        waitspi();
     3b0:	77 9b       	sbis	0x0e, 7	; 14
     3b2:	fe cf       	rjmp	.-4      	; 0x3b0 <enc28j60WriteOp+0x8>
        // write data
        SPDR = data;
     3b4:	4f b9       	out	0x0f, r20	; 15
        waitspi();
     3b6:	77 9b       	sbis	0x0e, 7	; 14
     3b8:	fe cf       	rjmp	.-4      	; 0x3b6 <enc28j60WriteOp+0xe>
        CSPASSIVE;
     3ba:	c4 9a       	sbi	0x18, 4	; 24
}
     3bc:	08 95       	ret

000003be <enc28j60ReadBuffer>:

void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
{
     3be:	ac 01       	movw	r20, r24
     3c0:	fb 01       	movw	r30, r22
        CSACTIVE;
     3c2:	c4 98       	cbi	0x18, 4	; 24
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
     3c4:	8a e3       	ldi	r24, 0x3A	; 58
     3c6:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     3c8:	77 9b       	sbis	0x0e, 7	; 14
     3ca:	fe cf       	rjmp	.-4      	; 0x3c8 <enc28j60ReadBuffer+0xa>
     3cc:	9a 01       	movw	r18, r20
     3ce:	df 01       	movw	r26, r30
     3d0:	07 c0       	rjmp	.+14     	; 0x3e0 <enc28j60ReadBuffer+0x22>
        while(len)
        {
                len--;
                // read data
                SPDR = 0x00;
     3d2:	1f b8       	out	0x0f, r1	; 15
                waitspi();
     3d4:	77 9b       	sbis	0x0e, 7	; 14
     3d6:	fe cf       	rjmp	.-4      	; 0x3d4 <enc28j60ReadBuffer+0x16>
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     3d8:	21 50       	subi	r18, 0x01	; 1
     3da:	30 40       	sbci	r19, 0x00	; 0
                // read data
                SPDR = 0x00;
                waitspi();
                *data = SPDR;
     3dc:	8f b1       	in	r24, 0x0f	; 15
     3de:	8d 93       	st	X+, r24
{
        CSACTIVE;
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
        waitspi();
        while(len)
     3e0:	21 15       	cp	r18, r1
     3e2:	31 05       	cpc	r19, r1
     3e4:	b1 f7       	brne	.-20     	; 0x3d2 <enc28j60ReadBuffer+0x14>
                SPDR = 0x00;
                waitspi();
                *data = SPDR;
                data++;
        }
        *data='\0';
     3e6:	e4 0f       	add	r30, r20
     3e8:	f5 1f       	adc	r31, r21
     3ea:	10 82       	st	Z, r1
        CSPASSIVE;
     3ec:	c4 9a       	sbi	0x18, 4	; 24
}
     3ee:	08 95       	ret

000003f0 <enc28j60WriteBuffer>:

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
     3f0:	9c 01       	movw	r18, r24
     3f2:	fb 01       	movw	r30, r22
        CSACTIVE;
     3f4:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
     3f6:	8a e7       	ldi	r24, 0x7A	; 122
     3f8:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     3fa:	77 9b       	sbis	0x0e, 7	; 14
     3fc:	fe cf       	rjmp	.-4      	; 0x3fa <enc28j60WriteBuffer+0xa>
     3fe:	07 c0       	rjmp	.+14     	; 0x40e <enc28j60WriteBuffer+0x1e>
        while(len)
        {
                len--;
                // write data
                SPDR = *data;
     400:	80 81       	ld	r24, Z
     402:	8f b9       	out	0x0f, r24	; 15
                data++;
                waitspi();
     404:	77 9b       	sbis	0x0e, 7	; 14
     406:	fe cf       	rjmp	.-4      	; 0x404 <enc28j60WriteBuffer+0x14>
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     408:	21 50       	subi	r18, 0x01	; 1
     40a:	30 40       	sbci	r19, 0x00	; 0
                // write data
                SPDR = *data;
                data++;
     40c:	31 96       	adiw	r30, 0x01	; 1
{
        CSACTIVE;
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
     40e:	21 15       	cp	r18, r1
     410:	31 05       	cpc	r19, r1
     412:	b1 f7       	brne	.-20     	; 0x400 <enc28j60WriteBuffer+0x10>
                // write data
                SPDR = *data;
                data++;
                waitspi();
        }
        CSPASSIVE;
     414:	c4 9a       	sbi	0x18, 4	; 24
}
     416:	08 95       	ret

00000418 <enc28j60SetBank>:

void enc28j60SetBank(uint8_t address)
{
     418:	48 2f       	mov	r20, r24
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
     41a:	28 2f       	mov	r18, r24
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	20 76       	andi	r18, 0x60	; 96
     420:	30 70       	andi	r19, 0x00	; 0
     422:	80 91 ac 00 	lds	r24, 0x00AC
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	28 17       	cp	r18, r24
     42a:	39 07       	cpc	r19, r25
     42c:	d9 f0       	breq	.+54     	; 0x464 <enc28j60SetBank+0x4c>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     42e:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     430:	8f eb       	ldi	r24, 0xBF	; 191
     432:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     434:	77 9b       	sbis	0x0e, 7	; 14
     436:	fe cf       	rjmp	.-4      	; 0x434 <enc28j60SetBank+0x1c>
        // write data
        SPDR = data;
     438:	83 e0       	ldi	r24, 0x03	; 3
     43a:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     43c:	77 9b       	sbis	0x0e, 7	; 14
     43e:	fe cf       	rjmp	.-4      	; 0x43c <enc28j60SetBank+0x24>
        CSPASSIVE;
     440:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     442:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     444:	8f e9       	ldi	r24, 0x9F	; 159
     446:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     448:	77 9b       	sbis	0x0e, 7	; 14
     44a:	fe cf       	rjmp	.-4      	; 0x448 <enc28j60SetBank+0x30>
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
     44c:	85 e0       	ldi	r24, 0x05	; 5
     44e:	35 95       	asr	r19
     450:	27 95       	ror	r18
     452:	8a 95       	dec	r24
     454:	e1 f7       	brne	.-8      	; 0x44e <enc28j60SetBank+0x36>
        CSACTIVE;
        // issue write command
        SPDR = op | (address & ADDR_MASK);
        waitspi();
        // write data
        SPDR = data;
     456:	2f b9       	out	0x0f, r18	; 15
        waitspi();
     458:	77 9b       	sbis	0x0e, 7	; 14
     45a:	fe cf       	rjmp	.-4      	; 0x458 <enc28j60SetBank+0x40>
        CSPASSIVE;
     45c:	c4 9a       	sbi	0x18, 4	; 24
        if((address & BANK_MASK) != Enc28j60Bank)
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
                Enc28j60Bank = (address & BANK_MASK);
     45e:	40 76       	andi	r20, 0x60	; 96
     460:	40 93 ac 00 	sts	0x00AC, r20
     464:	08 95       	ret

00000466 <enc28j60Read>:
        }
}

uint8_t enc28j60Read(uint8_t address)
{
     466:	1f 93       	push	r17
     468:	18 2f       	mov	r17, r24
        // set the bank
        enc28j60SetBank(address);
     46a:	0e 94 0c 02 	call	0x418	; 0x418 <enc28j60SetBank>
        // do the read
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	61 2f       	mov	r22, r17
     472:	0e 94 c2 01 	call	0x384	; 0x384 <enc28j60ReadOp>
}
     476:	1f 91       	pop	r17
     478:	08 95       	ret

0000047a <enc28j60Write>:
	
	return (enc28j60Read(MIRDH));
}

void enc28j60Write(uint8_t address, uint8_t data)
{
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	18 2f       	mov	r17, r24
     480:	06 2f       	mov	r16, r22
        // set the bank
        enc28j60SetBank(address);
     482:	0e 94 0c 02 	call	0x418	; 0x418 <enc28j60SetBank>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     486:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     488:	1f 71       	andi	r17, 0x1F	; 31
     48a:	10 64       	ori	r17, 0x40	; 64
     48c:	1f b9       	out	0x0f, r17	; 15
        waitspi();
     48e:	77 9b       	sbis	0x0e, 7	; 14
     490:	fe cf       	rjmp	.-4      	; 0x48e <enc28j60Write+0x14>
        // write data
        SPDR = data;
     492:	0f b9       	out	0x0f, r16	; 15
        waitspi();
     494:	77 9b       	sbis	0x0e, 7	; 14
     496:	fe cf       	rjmp	.-4      	; 0x494 <enc28j60Write+0x1a>
        CSPASSIVE;
     498:	c4 9a       	sbi	0x18, 4	; 24
{
        // set the bank
        enc28j60SetBank(address);
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
}
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	08 95       	ret

000004a0 <enc28j60PhyReadH>:
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
}

// read upper 8 bits
uint16_t enc28j60PhyReadH(uint8_t address)
{
     4a0:	68 2f       	mov	r22, r24

	// Set the right address and start the register read operation
	enc28j60Write(MIREGADR, address);
     4a2:	84 ed       	ldi	r24, 0xD4	; 212
     4a4:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	enc28j60Write(MICMD, MICMD_MIIRD);
     4a8:	82 ed       	ldi	r24, 0xD2	; 210
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4b0:	80 e5       	ldi	r24, 0x50	; 80
     4b2:	8a 95       	dec	r24
     4b4:	f1 f7       	brne	.-4      	; 0x4b2 <enc28j60PhyReadH+0x12>
        _delay_us(15);

	// wait until the PHY read completes
	while(enc28j60Read(MISTAT) & MISTAT_BUSY);
     4b6:	8a ee       	ldi	r24, 0xEA	; 234
     4b8:	0e 94 33 02 	call	0x466	; 0x466 <enc28j60Read>
     4bc:	80 fd       	sbrc	r24, 0
     4be:	fb cf       	rjmp	.-10     	; 0x4b6 <enc28j60PhyReadH+0x16>

	// reset reading bit
	enc28j60Write(MICMD, 0x00);
     4c0:	82 ed       	ldi	r24, 0xD2	; 210
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	
	return (enc28j60Read(MIRDH));
     4c8:	89 ed       	ldi	r24, 0xD9	; 217
     4ca:	0e 94 33 02 	call	0x466	; 0x466 <enc28j60Read>
}
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	08 95       	ret

000004d2 <enc28j60PhyWrite>:
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
}

void enc28j60PhyWrite(uint8_t address, uint16_t data)
{
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	98 2f       	mov	r25, r24
     4d8:	16 2f       	mov	r17, r22
     4da:	07 2f       	mov	r16, r23
        // set the PHY register address
        enc28j60Write(MIREGADR, address);
     4dc:	84 ed       	ldi	r24, 0xD4	; 212
     4de:	69 2f       	mov	r22, r25
     4e0:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
        // write the PHY data
        enc28j60Write(MIWRL, data);
     4e4:	86 ed       	ldi	r24, 0xD6	; 214
     4e6:	61 2f       	mov	r22, r17
     4e8:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
        enc28j60Write(MIWRH, data>>8);
     4ec:	87 ed       	ldi	r24, 0xD7	; 215
     4ee:	60 2f       	mov	r22, r16
     4f0:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
     4f4:	10 e5       	ldi	r17, 0x50	; 80
     4f6:	03 c0       	rjmp	.+6      	; 0x4fe <enc28j60PhyWrite+0x2c>
     4f8:	81 2f       	mov	r24, r17
     4fa:	8a 95       	dec	r24
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <enc28j60PhyWrite+0x28>
        // wait until the PHY write completes
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
     4fe:	8a ee       	ldi	r24, 0xEA	; 234
     500:	0e 94 33 02 	call	0x466	; 0x466 <enc28j60Read>
     504:	80 fd       	sbrc	r24, 0
     506:	f8 cf       	rjmp	.-16     	; 0x4f8 <enc28j60PhyWrite+0x26>
                _delay_us(15);
        }
}
     508:	1f 91       	pop	r17
     50a:	0f 91       	pop	r16
     50c:	08 95       	ret

0000050e <enc28j60clkout>:

void enc28j60clkout(uint8_t clk)
{
        //setup clkout: 2 is 12.5MHz:
	enc28j60Write(ECOCON, clk & 0x7);
     50e:	68 2f       	mov	r22, r24
     510:	67 70       	andi	r22, 0x07	; 7
     512:	85 e7       	ldi	r24, 0x75	; 117
     514:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
}
     518:	08 95       	ret

0000051a <enc28j60Init>:

void enc28j60Init(uint8_t* macaddr)
{
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	ec 01       	movw	r28, r24
	// initialize I/O
        // ss as output:
	ENC28J60_CONTROL_DDR |= 1<<ENC28J60_CONTROL_CS;
     520:	bc 9a       	sbi	0x17, 4	; 23
	CSPASSIVE; // ss=0
     522:	c4 9a       	sbi	0x18, 4	; 24
        //	
	ENC28J60_CONTROL_DDR  |= 1<<ENC28J60_CONTROL_SI | 1<<ENC28J60_CONTROL_SCK; // mosi, sck output
     524:	87 b3       	in	r24, 0x17	; 23
     526:	80 6a       	ori	r24, 0xA0	; 160
     528:	87 bb       	out	0x17, r24	; 23
	cbi(ENC28J60_CONTROL_DDR,ENC28J60_CONTROL_SO); // MISO is input
     52a:	be 98       	cbi	0x17, 6	; 23
        //
        cbi(ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_SI); // MOSI low
     52c:	c5 98       	cbi	0x18, 5	; 24
        cbi(ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_SCK); // SCK low
     52e:	c7 98       	cbi	0x18, 7	; 24
	//
	// initialize SPI interface
	// master mode and Fosc/2 clock:
        SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//SPCR = (1<<SPE)|(1<<MSTR);
     530:	81 e5       	ldi	r24, 0x51	; 81
     532:	8d b9       	out	0x0d, r24	; 13
        SPSR |= (1<<SPI2X);
     534:	70 9a       	sbi	0x0e, 0	; 14
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     536:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     538:	8f ef       	ldi	r24, 0xFF	; 255
     53a:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     53c:	77 9b       	sbis	0x0e, 7	; 14
     53e:	fe cf       	rjmp	.-4      	; 0x53c <enc28j60Init+0x22>
        // write data
        SPDR = data;
     540:	8f ef       	ldi	r24, 0xFF	; 255
     542:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     544:	77 9b       	sbis	0x0e, 7	; 14
     546:	fe cf       	rjmp	.-4      	; 0x544 <enc28j60Init+0x2a>
        CSPASSIVE;
     548:	c4 9a       	sbi	0x18, 4	; 24
     54a:	8d ec       	ldi	r24, 0xCD	; 205
     54c:	8a 95       	dec	r24
     54e:	f1 f7       	brne	.-4      	; 0x54c <enc28j60Init+0x32>
	//while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	gNextPacketPtr = RXSTART_INIT;
     550:	10 92 ae 00 	sts	0x00AE, r1
     554:	10 92 ad 00 	sts	0x00AD, r1
        // Rx start
	enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
     558:	88 e0       	ldi	r24, 0x08	; 8
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	enc28j60Write(ERXSTH, RXSTART_INIT>>8);
     560:	89 e0       	ldi	r24, 0x09	; 9
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	// set receive pointer address
	enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
     568:	8c e0       	ldi	r24, 0x0C	; 12
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
     570:	8d e0       	ldi	r24, 0x0D	; 13
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	// RX end
	enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
     578:	8a e0       	ldi	r24, 0x0A	; 10
     57a:	6e ef       	ldi	r22, 0xFE	; 254
     57c:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
     580:	8b e0       	ldi	r24, 0x0B	; 11
     582:	69 e1       	ldi	r22, 0x19	; 25
     584:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	// TX start
	enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
     588:	84 e0       	ldi	r24, 0x04	; 4
     58a:	6f ef       	ldi	r22, 0xFF	; 255
     58c:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	enc28j60Write(ETXSTH, TXSTART_INIT>>8);
     590:	85 e0       	ldi	r24, 0x05	; 5
     592:	69 e1       	ldi	r22, 0x19	; 25
     594:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	// TX end
	enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
     598:	86 e0       	ldi	r24, 0x06	; 6
     59a:	6f ef       	ldi	r22, 0xFF	; 255
     59c:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
     5a0:	87 e0       	ldi	r24, 0x07	; 7
     5a2:	6f e1       	ldi	r22, 0x1F	; 31
     5a4:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
        // Type     ETH.DST
        // ARP      BROADCAST
        // 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
        // in binary these poitions are:11 0000 0011 1111
        // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
	enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
     5a8:	88 e3       	ldi	r24, 0x38	; 56
     5aa:	60 eb       	ldi	r22, 0xB0	; 176
     5ac:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	enc28j60Write(EPMM0, 0x3f);
     5b0:	88 e2       	ldi	r24, 0x28	; 40
     5b2:	6f e3       	ldi	r22, 0x3F	; 63
     5b4:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	enc28j60Write(EPMM1, 0x30);
     5b8:	89 e2       	ldi	r24, 0x29	; 41
     5ba:	60 e3       	ldi	r22, 0x30	; 48
     5bc:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	enc28j60Write(EPMCSL, 0xf9);
     5c0:	80 e3       	ldi	r24, 0x30	; 48
     5c2:	69 ef       	ldi	r22, 0xF9	; 249
     5c4:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	enc28j60Write(EPMCSH, 0xf7);
     5c8:	81 e3       	ldi	r24, 0x31	; 49
     5ca:	67 ef       	ldi	r22, 0xF7	; 247
     5cc:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
        //
        //
	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
     5d0:	80 ec       	ldi	r24, 0xC0	; 192
     5d2:	6d e0       	ldi	r22, 0x0D	; 13
     5d4:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
     5d8:	81 ec       	ldi	r24, 0xC1	; 193
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     5e0:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     5e2:	82 e8       	ldi	r24, 0x82	; 130
     5e4:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     5e6:	77 9b       	sbis	0x0e, 7	; 14
     5e8:	fe cf       	rjmp	.-4      	; 0x5e6 <enc28j60Init+0xcc>
        // write data
        SPDR = data;
     5ea:	82 e3       	ldi	r24, 0x32	; 50
     5ec:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     5ee:	77 9b       	sbis	0x0e, 7	; 14
     5f0:	fe cf       	rjmp	.-4      	; 0x5ee <enc28j60Init+0xd4>
        CSPASSIVE;
     5f2:	c4 9a       	sbi	0x18, 4	; 24
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
	// enable automatic padding to 60bytes and CRC operations
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
	// set inter-frame gap (non-back-to-back)
	enc28j60Write(MAIPGL, 0x12);
     5f4:	86 ec       	ldi	r24, 0xC6	; 198
     5f6:	62 e1       	ldi	r22, 0x12	; 18
     5f8:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	enc28j60Write(MAIPGH, 0x0C);
     5fc:	87 ec       	ldi	r24, 0xC7	; 199
     5fe:	6c e0       	ldi	r22, 0x0C	; 12
     600:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
     604:	84 ec       	ldi	r24, 0xC4	; 196
     606:	62 e1       	ldi	r22, 0x12	; 18
     608:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	// Set the maximum packet size which the controller will accept
        // Do not send packets longer than MAX_FRAMELEN:
	enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
     60c:	8a ec       	ldi	r24, 0xCA	; 202
     60e:	6c ed       	ldi	r22, 0xDC	; 220
     610:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
     614:	8b ec       	ldi	r24, 0xCB	; 203
     616:	65 e0       	ldi	r22, 0x05	; 5
     618:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	// do bank 3 stuff
        // write MAC address
        // NOTE: MAC address in ENC28J60 is byte-backward
        enc28j60Write(MAADR5, macaddr[0]);
     61c:	84 ee       	ldi	r24, 0xE4	; 228
     61e:	68 81       	ld	r22, Y
     620:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
        enc28j60Write(MAADR4, macaddr[1]);
     624:	85 ee       	ldi	r24, 0xE5	; 229
     626:	69 81       	ldd	r22, Y+1	; 0x01
     628:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
        enc28j60Write(MAADR3, macaddr[2]);
     62c:	82 ee       	ldi	r24, 0xE2	; 226
     62e:	6a 81       	ldd	r22, Y+2	; 0x02
     630:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
        enc28j60Write(MAADR2, macaddr[3]);
     634:	83 ee       	ldi	r24, 0xE3	; 227
     636:	6b 81       	ldd	r22, Y+3	; 0x03
     638:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
        enc28j60Write(MAADR1, macaddr[4]);
     63c:	80 ee       	ldi	r24, 0xE0	; 224
     63e:	6c 81       	ldd	r22, Y+4	; 0x04
     640:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
        enc28j60Write(MAADR0, macaddr[5]);
     644:	81 ee       	ldi	r24, 0xE1	; 225
     646:	6d 81       	ldd	r22, Y+5	; 0x05
     648:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
     64c:	80 e1       	ldi	r24, 0x10	; 16
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	71 e0       	ldi	r23, 0x01	; 1
     652:	0e 94 69 02 	call	0x4d2	; 0x4d2 <enc28j60PhyWrite>
	// switch to bank 0
	enc28j60SetBank(ECON1);
     656:	8f e1       	ldi	r24, 0x1F	; 31
     658:	0e 94 0c 02 	call	0x418	; 0x418 <enc28j60SetBank>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     65c:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     65e:	8b e9       	ldi	r24, 0x9B	; 155
     660:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     662:	77 9b       	sbis	0x0e, 7	; 14
     664:	fe cf       	rjmp	.-4      	; 0x662 <enc28j60Init+0x148>
        // write data
        SPDR = data;
     666:	80 ec       	ldi	r24, 0xC0	; 192
     668:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     66a:	77 9b       	sbis	0x0e, 7	; 14
     66c:	fe cf       	rjmp	.-4      	; 0x66a <enc28j60Init+0x150>
        CSPASSIVE;
     66e:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     670:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     672:	8f e9       	ldi	r24, 0x9F	; 159
     674:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     676:	77 9b       	sbis	0x0e, 7	; 14
     678:	fe cf       	rjmp	.-4      	; 0x676 <enc28j60Init+0x15c>
        // write data
        SPDR = data;
     67a:	84 e0       	ldi	r24, 0x04	; 4
     67c:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     67e:	77 9b       	sbis	0x0e, 7	; 14
     680:	fe cf       	rjmp	.-4      	; 0x67e <enc28j60Init+0x164>
        CSPASSIVE;
     682:	c4 9a       	sbi	0x18, 4	; 24
	enc28j60SetBank(ECON1);
	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
}
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	08 95       	ret

0000068a <enc28j60getrev>:

// read the revision of the chip:
uint8_t enc28j60getrev(void)
{
	return(enc28j60Read(EREVID));
     68a:	82 e7       	ldi	r24, 0x72	; 114
     68c:	0e 94 33 02 	call	0x466	; 0x466 <enc28j60Read>
}
     690:	08 95       	ret

00000692 <enc28j60linkup>:

// link status
uint8_t enc28j60linkup(void)
{
        // bit 10 (= bit 3 in upper reg)
	return(enc28j60PhyReadH(PHSTAT2) && 4);
     692:	81 e1       	ldi	r24, 0x11	; 17
     694:	0e 94 50 02 	call	0x4a0	; 0x4a0 <enc28j60PhyReadH>
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	89 2b       	or	r24, r25
     69c:	09 f0       	breq	.+2      	; 0x6a0 <enc28j60linkup+0xe>
     69e:	21 e0       	ldi	r18, 0x01	; 1
}
     6a0:	82 2f       	mov	r24, r18
     6a2:	08 95       	ret

000006a4 <enc28j60PacketSend>:

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
     6a4:	df 92       	push	r13
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	ec 01       	movw	r28, r24
     6b4:	8b 01       	movw	r16, r22

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     6b6:	3f e9       	ldi	r19, 0x9F	; 159
     6b8:	d3 2e       	mov	r13, r19
        waitspi();
        // write data
        SPDR = data;
     6ba:	20 e8       	ldi	r18, 0x80	; 128
     6bc:	f2 2e       	mov	r15, r18

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     6be:	9f eb       	ldi	r25, 0xBF	; 191
     6c0:	e9 2e       	mov	r14, r25
     6c2:	15 c0       	rjmp	.+42     	; 0x6ee <enc28j60PacketSend+0x4a>
{
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
        {
                // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
                if( (enc28j60Read(EIR) & EIR_TXERIF) ) {
     6c4:	8c e1       	ldi	r24, 0x1C	; 28
     6c6:	0e 94 33 02 	call	0x466	; 0x466 <enc28j60Read>
     6ca:	81 ff       	sbrs	r24, 1
     6cc:	10 c0       	rjmp	.+32     	; 0x6ee <enc28j60PacketSend+0x4a>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     6ce:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     6d0:	df b8       	out	0x0f, r13	; 15
        waitspi();
     6d2:	77 9b       	sbis	0x0e, 7	; 14
     6d4:	fe cf       	rjmp	.-4      	; 0x6d2 <enc28j60PacketSend+0x2e>
        // write data
        SPDR = data;
     6d6:	ff b8       	out	0x0f, r15	; 15
        waitspi();
     6d8:	77 9b       	sbis	0x0e, 7	; 14
     6da:	fe cf       	rjmp	.-4      	; 0x6d8 <enc28j60PacketSend+0x34>
        CSPASSIVE;
     6dc:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     6de:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     6e0:	ef b8       	out	0x0f, r14	; 15
        waitspi();
     6e2:	77 9b       	sbis	0x0e, 7	; 14
     6e4:	fe cf       	rjmp	.-4      	; 0x6e2 <enc28j60PacketSend+0x3e>
        // write data
        SPDR = data;
     6e6:	ff b8       	out	0x0f, r15	; 15
        waitspi();
     6e8:	77 9b       	sbis	0x0e, 7	; 14
     6ea:	fe cf       	rjmp	.-4      	; 0x6e8 <enc28j60PacketSend+0x44>
        CSPASSIVE;
     6ec:	c4 9a       	sbi	0x18, 4	; 24
}

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	6f e1       	ldi	r22, 0x1F	; 31
     6f2:	0e 94 c2 01 	call	0x384	; 0x384 <enc28j60ReadOp>
     6f6:	83 fd       	sbrc	r24, 3
     6f8:	e5 cf       	rjmp	.-54     	; 0x6c4 <enc28j60PacketSend+0x20>
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
                }
        }
	// Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
     6fa:	82 e0       	ldi	r24, 0x02	; 2
     6fc:	6f ef       	ldi	r22, 0xFF	; 255
     6fe:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
     702:	83 e0       	ldi	r24, 0x03	; 3
     704:	69 e1       	ldi	r22, 0x19	; 25
     706:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
     70a:	ce 01       	movw	r24, r28
     70c:	81 50       	subi	r24, 0x01	; 1
     70e:	68 2f       	mov	r22, r24
     710:	86 e0       	ldi	r24, 0x06	; 6
     712:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
     716:	9e 01       	movw	r18, r28
     718:	21 50       	subi	r18, 0x01	; 1
     71a:	36 4e       	sbci	r19, 0xE6	; 230
     71c:	87 e0       	ldi	r24, 0x07	; 7
     71e:	63 2f       	mov	r22, r19
     720:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     724:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     726:	8a e7       	ldi	r24, 0x7A	; 122
     728:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     72a:	77 9b       	sbis	0x0e, 7	; 14
     72c:	fe cf       	rjmp	.-4      	; 0x72a <enc28j60PacketSend+0x86>
        // write data
        SPDR = data;
     72e:	1f b8       	out	0x0f, r1	; 15
        waitspi();
     730:	77 9b       	sbis	0x0e, 7	; 14
     732:	fe cf       	rjmp	.-4      	; 0x730 <enc28j60PacketSend+0x8c>
        CSPASSIVE;
     734:	c4 9a       	sbi	0x18, 4	; 24
        CSPASSIVE;
}

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
        CSACTIVE;
     736:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
     738:	8a e7       	ldi	r24, 0x7A	; 122
     73a:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     73c:	77 9b       	sbis	0x0e, 7	; 14
     73e:	fe cf       	rjmp	.-4      	; 0x73c <enc28j60PacketSend+0x98>
     740:	08 c0       	rjmp	.+16     	; 0x752 <enc28j60PacketSend+0xae>
        while(len)
        {
                len--;
                // write data
                SPDR = *data;
     742:	f8 01       	movw	r30, r16
     744:	80 81       	ld	r24, Z
     746:	8f b9       	out	0x0f, r24	; 15
                data++;
                waitspi();
     748:	77 9b       	sbis	0x0e, 7	; 14
     74a:	fe cf       	rjmp	.-4      	; 0x748 <enc28j60PacketSend+0xa4>
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     74c:	21 97       	sbiw	r28, 0x01	; 1
                // write data
                SPDR = *data;
                data++;
     74e:	0f 5f       	subi	r16, 0xFF	; 255
     750:	1f 4f       	sbci	r17, 0xFF	; 255
{
        CSACTIVE;
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
     752:	20 97       	sbiw	r28, 0x00	; 0
     754:	b1 f7       	brne	.-20     	; 0x742 <enc28j60PacketSend+0x9e>
                // write data
                SPDR = *data;
                data++;
                waitspi();
        }
        CSPASSIVE;
     756:	c4 9a       	sbi	0x18, 4	; 24
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     758:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     75a:	8f e9       	ldi	r24, 0x9F	; 159
     75c:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     75e:	77 9b       	sbis	0x0e, 7	; 14
     760:	fe cf       	rjmp	.-4      	; 0x75e <enc28j60PacketSend+0xba>
        // write data
        SPDR = data;
     762:	88 e0       	ldi	r24, 0x08	; 8
     764:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     766:	77 9b       	sbis	0x0e, 7	; 14
     768:	fe cf       	rjmp	.-4      	; 0x766 <enc28j60PacketSend+0xc2>
        CSPASSIVE;
     76a:	c4 9a       	sbi	0x18, 4	; 24
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
}
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	ff 90       	pop	r15
     776:	ef 90       	pop	r14
     778:	df 90       	pop	r13
     77a:	08 95       	ret

0000077c <enc28j60hasRxPkt>:

// just probe if there might be a packet
uint8_t enc28j60hasRxPkt(void)
{
	if( enc28j60Read(EPKTCNT) ==0 ){
     77c:	89 e3       	ldi	r24, 0x39	; 57
     77e:	0e 94 33 02 	call	0x466	; 0x466 <enc28j60Read>
     782:	81 11       	cpse	r24, r1
     784:	81 e0       	ldi	r24, 0x01	; 1
		return(0);
        }
        return(1);
}
     786:	08 95       	ret

00000788 <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
     788:	8f 92       	push	r8
     78a:	9f 92       	push	r9
     78c:	af 92       	push	r10
     78e:	bf 92       	push	r11
     790:	cf 92       	push	r12
     792:	df 92       	push	r13
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	5c 01       	movw	r10, r24
     7a2:	4b 01       	movw	r8, r22
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
     7a4:	89 e3       	ldi	r24, 0x39	; 57
     7a6:	0e 94 33 02 	call	0x466	; 0x466 <enc28j60Read>
     7aa:	88 23       	and	r24, r24
     7ac:	19 f4       	brne	.+6      	; 0x7b4 <enc28j60PacketReceive+0x2c>
     7ae:	c0 e0       	ldi	r28, 0x00	; 0
     7b0:	d0 e0       	ldi	r29, 0x00	; 0
     7b2:	76 c0       	rjmp	.+236    	; 0x8a0 <__stack+0x41>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
     7b4:	60 91 ad 00 	lds	r22, 0x00AD
     7b8:	10 91 ae 00 	lds	r17, 0x00AE
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	61 2f       	mov	r22, r17
     7c6:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     7ca:	8a e3       	ldi	r24, 0x3A	; 58
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	0e 94 c2 01 	call	0x384	; 0x384 <enc28j60ReadOp>
     7d2:	18 2f       	mov	r17, r24
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     7d4:	8a e3       	ldi	r24, 0x3A	; 58
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	0e 94 c2 01 	call	0x384	; 0x384 <enc28j60ReadOp>
     7dc:	38 2f       	mov	r19, r24
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	e1 2e       	mov	r14, r17
     7e2:	ff 24       	eor	r15, r15
     7e4:	e2 2a       	or	r14, r18
     7e6:	f3 2a       	or	r15, r19
     7e8:	f0 92 ae 00 	sts	0x00AE, r15
     7ec:	e0 92 ad 00 	sts	0x00AD, r14
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     7f0:	8a e3       	ldi	r24, 0x3A	; 58
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	0e 94 c2 01 	call	0x384	; 0x384 <enc28j60ReadOp>
     7f8:	c8 2e       	mov	r12, r24
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     7fa:	8a e3       	ldi	r24, 0x3A	; 58
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	0e 94 c2 01 	call	0x384	; 0x384 <enc28j60ReadOp>
     802:	d8 2e       	mov	r13, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     804:	8a e3       	ldi	r24, 0x3A	; 58
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	0e 94 c2 01 	call	0x384	; 0x384 <enc28j60ReadOp>
     80c:	08 2f       	mov	r16, r24
     80e:	10 e0       	ldi	r17, 0x00	; 0
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
     810:	8a e3       	ldi	r24, 0x3A	; 58
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	0e 94 c2 01 	call	0x384	; 0x384 <enc28j60ReadOp>
                len=maxlen-1;
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
     818:	38 2f       	mov	r19, r24
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	20 2b       	or	r18, r16
     81e:	31 2b       	or	r19, r17
     820:	27 fd       	sbrc	r18, 7
     822:	03 c0       	rjmp	.+6      	; 0x82a <enc28j60PacketReceive+0xa2>
     824:	c0 e0       	ldi	r28, 0x00	; 0
     826:	d0 e0       	ldi	r29, 0x00	; 0
     828:	11 c0       	rjmp	.+34     	; 0x84c <enc28j60PacketReceive+0xc4>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     82a:	cc 2d       	mov	r28, r12
     82c:	d0 e0       	ldi	r29, 0x00	; 0
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     82e:	9d 2d       	mov	r25, r13
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	c8 2b       	or	r28, r24
     834:	d9 2b       	or	r29, r25
        len-=4; //remove the CRC count
     836:	c5 01       	movw	r24, r10
     838:	01 97       	sbiw	r24, 0x01	; 1
     83a:	24 97       	sbiw	r28, 0x04	; 4
     83c:	8c 17       	cp	r24, r28
     83e:	9d 07       	cpc	r25, r29
     840:	08 f4       	brcc	.+2      	; 0x844 <enc28j60PacketReceive+0xbc>
     842:	ec 01       	movw	r28, r24
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
     844:	ce 01       	movw	r24, r28
     846:	b4 01       	movw	r22, r8
     848:	0e 94 df 01 	call	0x3be	; 0x3be <enc28j60ReadBuffer>
        }
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
     84c:	de 2c       	mov	r13, r14
     84e:	8c e0       	ldi	r24, 0x0C	; 12
     850:	6e 2d       	mov	r22, r14
     852:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
	enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
     856:	8d e0       	ldi	r24, 0x0D	; 13
     858:	6f 2d       	mov	r22, r15
     85a:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
        // Move the RX read pointer to the start of the next received packet
        // This frees the memory we just read out.
        // However, compensate for the errata point 13, rev B4: enver write an even address!
        if ((gNextPacketPtr - 1 < RXSTART_INIT)
     85e:	87 01       	movw	r16, r14
     860:	01 50       	subi	r16, 0x01	; 1
     862:	10 40       	sbci	r17, 0x00	; 0
     864:	89 e1       	ldi	r24, 0x19	; 25
     866:	0f 3f       	cpi	r16, 0xFF	; 255
     868:	18 07       	cpc	r17, r24
     86a:	38 f0       	brcs	.+14     	; 0x87a <__stack+0x1b>
                || (gNextPacketPtr -1 > RXSTOP_INIT)) {
                enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
     86c:	8c e0       	ldi	r24, 0x0C	; 12
     86e:	6e ef       	ldi	r22, 0xFE	; 254
     870:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
                enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
     874:	8d e0       	ldi	r24, 0x0D	; 13
     876:	69 e1       	ldi	r22, 0x19	; 25
     878:	07 c0       	rjmp	.+14     	; 0x888 <__stack+0x29>
        } else {
                enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
     87a:	da 94       	dec	r13
     87c:	8c e0       	ldi	r24, 0x0C	; 12
     87e:	6d 2d       	mov	r22, r13
     880:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
     884:	8d e0       	ldi	r24, 0x0D	; 13
     886:	61 2f       	mov	r22, r17
     888:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     88c:	c4 98       	cbi	0x18, 4	; 24
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     88e:	8e e9       	ldi	r24, 0x9E	; 158
     890:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     892:	77 9b       	sbis	0x0e, 7	; 14
     894:	fe cf       	rjmp	.-4      	; 0x892 <__stack+0x33>
        // write data
        SPDR = data;
     896:	80 e4       	ldi	r24, 0x40	; 64
     898:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     89a:	77 9b       	sbis	0x0e, 7	; 14
     89c:	fe cf       	rjmp	.-4      	; 0x89a <__stack+0x3b>
        CSPASSIVE;
     89e:	c4 9a       	sbi	0x18, 4	; 24
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
}
     8a0:	ce 01       	movw	r24, r28
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	ff 90       	pop	r15
     8ac:	ef 90       	pop	r14
     8ae:	df 90       	pop	r13
     8b0:	cf 90       	pop	r12
     8b2:	bf 90       	pop	r11
     8b4:	af 90       	pop	r10
     8b6:	9f 90       	pop	r9
     8b8:	8f 90       	pop	r8
     8ba:	08 95       	ret

000008bc <checksum>:
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
     8bc:	cf 92       	push	r12
     8be:	df 92       	push	r13
     8c0:	ef 92       	push	r14
     8c2:	ff 92       	push	r15
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	6c 01       	movw	r12, r24
        uint32_t sum = 0;

        //if(type==0){
        //        // do not add anything
        //}
        if(type==1){
     8ce:	41 30       	cpi	r20, 0x01	; 1
     8d0:	81 f4       	brne	.+32     	; 0x8f2 <checksum+0x36>
                sum+=IP_PROTO_UDP_V; // protocol udp
                // the length here is the length of udp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
     8d2:	68 50       	subi	r22, 0x08	; 8
     8d4:	70 40       	sbci	r23, 0x00	; 0
     8d6:	7b 01       	movw	r14, r22
     8d8:	00 e0       	ldi	r16, 0x00	; 0
     8da:	10 e0       	ldi	r17, 0x00	; 0
     8dc:	68 5f       	subi	r22, 0xF8	; 248
     8de:	7f 4f       	sbci	r23, 0xFF	; 255
     8e0:	21 e1       	ldi	r18, 0x11	; 17
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	e2 0e       	add	r14, r18
     8ea:	f3 1e       	adc	r15, r19
     8ec:	04 1f       	adc	r16, r20
     8ee:	15 1f       	adc	r17, r21
     8f0:	15 c0       	rjmp	.+42     	; 0x91c <checksum+0x60>
        }
        if(type==2){
     8f2:	42 30       	cpi	r20, 0x02	; 2
     8f4:	21 f0       	breq	.+8      	; 0x8fe <checksum+0x42>
     8f6:	ee 24       	eor	r14, r14
     8f8:	ff 24       	eor	r15, r15
     8fa:	87 01       	movw	r16, r14
     8fc:	0f c0       	rjmp	.+30     	; 0x91c <checksum+0x60>
                sum+=IP_PROTO_TCP_V; 
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
     8fe:	68 50       	subi	r22, 0x08	; 8
     900:	70 40       	sbci	r23, 0x00	; 0
     902:	7b 01       	movw	r14, r22
     904:	00 e0       	ldi	r16, 0x00	; 0
     906:	10 e0       	ldi	r17, 0x00	; 0
     908:	68 5f       	subi	r22, 0xF8	; 248
     90a:	7f 4f       	sbci	r23, 0xFF	; 255
     90c:	86 e0       	ldi	r24, 0x06	; 6
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	a0 e0       	ldi	r26, 0x00	; 0
     912:	b0 e0       	ldi	r27, 0x00	; 0
     914:	e8 0e       	add	r14, r24
     916:	f9 1e       	adc	r15, r25
     918:	0a 1f       	adc	r16, r26
     91a:	1b 1f       	adc	r17, r27
     91c:	f6 01       	movw	r30, r12
     91e:	eb 01       	movw	r28, r22
     920:	16 c0       	rjmp	.+44     	; 0x94e <checksum+0x92>
        }
        // build the sum of 16bit words
        while(len >1){
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
     922:	80 81       	ld	r24, Z
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	ba 2f       	mov	r27, r26
     92c:	a9 2f       	mov	r26, r25
     92e:	98 2f       	mov	r25, r24
     930:	88 27       	eor	r24, r24
     932:	21 81       	ldd	r18, Z+1	; 0x01
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	82 2b       	or	r24, r18
     93c:	93 2b       	or	r25, r19
     93e:	a4 2b       	or	r26, r20
     940:	b5 2b       	or	r27, r21
     942:	e8 0e       	add	r14, r24
     944:	f9 1e       	adc	r15, r25
     946:	0a 1f       	adc	r16, r26
     948:	1b 1f       	adc	r17, r27
                buf+=2;
     94a:	32 96       	adiw	r30, 0x02	; 2
                len-=2;
     94c:	22 97       	sbiw	r28, 0x02	; 2
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
        }
        // build the sum of 16bit words
        while(len >1){
     94e:	c2 30       	cpi	r28, 0x02	; 2
     950:	d1 05       	cpc	r29, r1
     952:	38 f7       	brcc	.-50     	; 0x922 <checksum+0x66>
     954:	fb 01       	movw	r30, r22
     956:	ee 7f       	andi	r30, 0xFE	; 254
     958:	ec 0d       	add	r30, r12
     95a:	fd 1d       	adc	r31, r13
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
                buf+=2;
                len-=2;
        }
        // if there is a byte left then add it (padded with zero)
        if (len){
     95c:	60 ff       	sbrs	r22, 0
     95e:	15 c0       	rjmp	.+42     	; 0x98a <checksum+0xce>
                sum += ((uint32_t)(0xFF & *buf))<<8;
     960:	80 81       	ld	r24, Z
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 e0       	ldi	r26, 0x00	; 0
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	ba 2f       	mov	r27, r26
     96a:	a9 2f       	mov	r26, r25
     96c:	98 2f       	mov	r25, r24
     96e:	88 27       	eor	r24, r24
     970:	08 c0       	rjmp	.+16     	; 0x982 <checksum+0xc6>
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
                sum = (sum & 0xFFFF)+(sum >> 16);
     972:	2f ef       	ldi	r18, 0xFF	; 255
     974:	3f ef       	ldi	r19, 0xFF	; 255
     976:	40 e0       	ldi	r20, 0x00	; 0
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	e2 22       	and	r14, r18
     97c:	f3 22       	and	r15, r19
     97e:	04 23       	and	r16, r20
     980:	15 23       	and	r17, r21
     982:	e8 0e       	add	r14, r24
     984:	f9 1e       	adc	r15, r25
     986:	0a 1f       	adc	r16, r26
     988:	1b 1f       	adc	r17, r27
        if (len){
                sum += ((uint32_t)(0xFF & *buf))<<8;
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
     98a:	c8 01       	movw	r24, r16
     98c:	aa 27       	eor	r26, r26
     98e:	bb 27       	eor	r27, r27
     990:	00 97       	sbiw	r24, 0x00	; 0
     992:	a1 05       	cpc	r26, r1
     994:	b1 05       	cpc	r27, r1
     996:	69 f7       	brne	.-38     	; 0x972 <checksum+0xb6>
     998:	97 01       	movw	r18, r14
     99a:	20 95       	com	r18
     99c:	30 95       	com	r19
                sum = (sum & 0xFFFF)+(sum >> 16);
        }
        // build 1's complement:
        return( (uint16_t) sum ^ 0xFFFF);
}
     99e:	c9 01       	movw	r24, r18
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	cf 90       	pop	r12
     9b0:	08 95       	ret

000009b2 <init_ip_arp_udp_tcp>:

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	ec 01       	movw	r28, r24
        uint8_t i=0;
        wwwport=wwwp;
     9b8:	40 93 a5 00 	sts	0x00A5, r20
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	30 e0       	ldi	r19, 0x00	; 0
        while(i<4){
                ipaddr[i]=myip[i];
     9c0:	f9 01       	movw	r30, r18
     9c2:	eb 54       	subi	r30, 0x4B	; 75
     9c4:	ff 4f       	sbci	r31, 0xFF	; 255
     9c6:	db 01       	movw	r26, r22
     9c8:	a2 0f       	add	r26, r18
     9ca:	b3 1f       	adc	r27, r19
     9cc:	8c 91       	ld	r24, X
     9ce:	80 83       	st	Z, r24
     9d0:	2f 5f       	subi	r18, 0xFF	; 255
     9d2:	3f 4f       	sbci	r19, 0xFF	; 255

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
        uint8_t i=0;
        wwwport=wwwp;
        while(i<4){
     9d4:	24 30       	cpi	r18, 0x04	; 4
     9d6:	31 05       	cpc	r19, r1
     9d8:	99 f7       	brne	.-26     	; 0x9c0 <init_ip_arp_udp_tcp+0xe>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
                macaddr[i]=mymac[i];
     9de:	f9 01       	movw	r30, r18
     9e0:	e1 55       	subi	r30, 0x51	; 81
     9e2:	ff 4f       	sbci	r31, 0xFF	; 255
     9e4:	de 01       	movw	r26, r28
     9e6:	a2 0f       	add	r26, r18
     9e8:	b3 1f       	adc	r27, r19
     9ea:	8c 91       	ld	r24, X
     9ec:	80 83       	st	Z, r24
     9ee:	2f 5f       	subi	r18, 0xFF	; 255
     9f0:	3f 4f       	sbci	r19, 0xFF	; 255
        while(i<4){
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
     9f2:	26 30       	cpi	r18, 0x06	; 6
     9f4:	31 05       	cpc	r19, r1
     9f6:	99 f7       	brne	.-26     	; 0x9de <init_ip_arp_udp_tcp+0x2c>
                macaddr[i]=mymac[i];
                i++;
        }
}
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	08 95       	ret

000009fe <eth_type_is_arp_and_my_ip>:

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
     9fe:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //  
        if (len<41){
     a00:	69 32       	cpi	r22, 0x29	; 41
     a02:	71 05       	cpc	r23, r1
     a04:	b0 f0       	brcs	.+44     	; 0xa32 <eth_type_is_arp_and_my_ip+0x34>
                return(0);
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
     a06:	84 85       	ldd	r24, Z+12	; 0x0c
     a08:	88 30       	cpi	r24, 0x08	; 8
     a0a:	99 f4       	brne	.+38     	; 0xa32 <eth_type_is_arp_and_my_ip+0x34>
     a0c:	85 85       	ldd	r24, Z+13	; 0x0d
     a0e:	86 30       	cpi	r24, 0x06	; 6
     a10:	81 f4       	brne	.+32     	; 0xa32 <eth_type_is_arp_and_my_ip+0x34>
     a12:	df 01       	movw	r26, r30
     a14:	96 96       	adiw	r26, 0x26	; 38
     a16:	e5 eb       	ldi	r30, 0xB5	; 181
     a18:	f0 e0       	ldi	r31, 0x00	; 0
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
     a1a:	9c 91       	ld	r25, X
     a1c:	80 81       	ld	r24, Z
     a1e:	98 17       	cp	r25, r24
     a20:	41 f4       	brne	.+16     	; 0xa32 <eth_type_is_arp_and_my_ip+0x34>
     a22:	11 96       	adiw	r26, 0x01	; 1
     a24:	31 96       	adiw	r30, 0x01	; 1
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	e9 3b       	cpi	r30, 0xB9	; 185
     a2a:	f8 07       	cpc	r31, r24
     a2c:	b1 f7       	brne	.-20     	; 0xa1a <eth_type_is_arp_and_my_ip+0x1c>
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	08 95       	ret
     a32:	80 e0       	ldi	r24, 0x00	; 0
                        return(0);
                }
                i++;
        }
        return(1);
}
     a34:	08 95       	ret

00000a36 <eth_type_is_ip_and_my_ip>:

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
     a36:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
     a38:	6a 32       	cpi	r22, 0x2A	; 42
     a3a:	71 05       	cpc	r23, r1
     a3c:	d0 f0       	brcs	.+52     	; 0xa72 <eth_type_is_ip_and_my_ip+0x3c>
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
     a3e:	84 85       	ldd	r24, Z+12	; 0x0c
     a40:	88 30       	cpi	r24, 0x08	; 8
     a42:	b9 f4       	brne	.+46     	; 0xa72 <eth_type_is_ip_and_my_ip+0x3c>
     a44:	85 85       	ldd	r24, Z+13	; 0x0d
     a46:	88 23       	and	r24, r24
     a48:	a1 f4       	brne	.+40     	; 0xa72 <eth_type_is_ip_and_my_ip+0x3c>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
                return(0);
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
     a4a:	86 85       	ldd	r24, Z+14	; 0x0e
     a4c:	85 34       	cpi	r24, 0x45	; 69
     a4e:	89 f4       	brne	.+34     	; 0xa72 <eth_type_is_ip_and_my_ip+0x3c>
     a50:	df 01       	movw	r26, r30
     a52:	e5 eb       	ldi	r30, 0xB5	; 181
     a54:	f0 e0       	ldi	r31, 0x00	; 0
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
                if(buf[IP_DST_P+i]!=ipaddr[i]){
     a56:	5e 96       	adiw	r26, 0x1e	; 30
     a58:	9c 91       	ld	r25, X
     a5a:	5e 97       	sbiw	r26, 0x1e	; 30
     a5c:	80 81       	ld	r24, Z
     a5e:	98 17       	cp	r25, r24
     a60:	41 f4       	brne	.+16     	; 0xa72 <eth_type_is_ip_and_my_ip+0x3c>
     a62:	11 96       	adiw	r26, 0x01	; 1
     a64:	31 96       	adiw	r30, 0x01	; 1
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	e9 3b       	cpi	r30, 0xB9	; 185
     a6a:	f8 07       	cpc	r31, r24
     a6c:	a1 f7       	brne	.-24     	; 0xa56 <eth_type_is_ip_and_my_ip+0x20>
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	08 95       	ret
     a72:	80 e0       	ldi	r24, 0x00	; 0
                        return(0);
                }
                i++;
        }
        return(1);
}
     a74:	08 95       	ret

00000a76 <make_eth>:
// make a return eth header from a received eth packet
void make_eth(uint8_t *buf)
{
     a76:	fc 01       	movw	r30, r24
     a78:	af ea       	ldi	r26, 0xAF	; 175
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     a7c:	86 81       	ldd	r24, Z+6	; 0x06
     a7e:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     a80:	8d 91       	ld	r24, X+
     a82:	86 83       	std	Z+6, r24	; 0x06
     a84:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	a5 3b       	cpi	r26, 0xB5	; 181
     a8a:	b8 07       	cpc	r27, r24
     a8c:	b9 f7       	brne	.-18     	; 0xa7c <make_eth+0x6>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
}
     a8e:	08 95       	ret

00000a90 <fill_ip_hdr_checksum>:
void fill_ip_hdr_checksum(uint8_t *buf)
{
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	8c 01       	movw	r16, r24
        uint16_t ck;
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
     a96:	fc 01       	movw	r30, r24
     a98:	10 8e       	std	Z+24, r1	; 0x18
        buf[IP_CHECKSUM_P+1]=0;
     a9a:	11 8e       	std	Z+25, r1	; 0x19
        buf[IP_FLAGS_P]=0x40; // don't fragment
     a9c:	80 e4       	ldi	r24, 0x40	; 64
     a9e:	84 8b       	std	Z+20, r24	; 0x14
        buf[IP_FLAGS_P+1]=0;  // fragement offset
     aa0:	15 8a       	std	Z+21, r1	; 0x15
        buf[IP_TTL_P]=64; // ttl
     aa2:	86 8b       	std	Z+22, r24	; 0x16
        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
     aa4:	c8 01       	movw	r24, r16
     aa6:	0e 96       	adiw	r24, 0x0e	; 14
     aa8:	64 e1       	ldi	r22, 0x14	; 20
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	0e 94 5e 04 	call	0x8bc	; 0x8bc <checksum>
        buf[IP_CHECKSUM_P]=ck>>8;
     ab2:	f8 01       	movw	r30, r16
     ab4:	90 8f       	std	Z+24, r25	; 0x18
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
     ab6:	81 8f       	std	Z+25, r24	; 0x19
}
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	08 95       	ret

00000abe <make_ip>:

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
     abe:	ac 01       	movw	r20, r24
     ac0:	fc 01       	movw	r30, r24
     ac2:	a5 eb       	ldi	r26, 0xB5	; 181
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
        uint8_t i=0;
        while(i<4){
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
     ac6:	82 8d       	ldd	r24, Z+26	; 0x1a
     ac8:	86 8f       	std	Z+30, r24	; 0x1e
                buf[IP_SRC_P+i]=ipaddr[i];
     aca:	8d 91       	ld	r24, X+
     acc:	82 8f       	std	Z+26, r24	; 0x1a
     ace:	31 96       	adiw	r30, 0x01	; 1

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	a9 3b       	cpi	r26, 0xB9	; 185
     ad4:	b8 07       	cpc	r27, r24
     ad6:	b9 f7       	brne	.-18     	; 0xac6 <make_ip+0x8>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        fill_ip_hdr_checksum(buf);
     ad8:	ca 01       	movw	r24, r20
     ada:	0e 94 48 05 	call	0xa90	; 0xa90 <fill_ip_hdr_checksum>
}
     ade:	08 95       	ret

00000ae0 <make_tcphead>:
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t mss,uint8_t cp_seq)
{
     ae0:	fc 01       	movw	r30, r24
        uint8_t i=0;
        uint8_t tseq;
        while(i<2){
                buf[TCP_DST_PORT_H_P+i]=buf[TCP_SRC_PORT_H_P+i];
     ae2:	82 a1       	ldd	r24, Z+34	; 0x22
     ae4:	84 a3       	std	Z+36, r24	; 0x24
                buf[TCP_SRC_PORT_H_P+i]=0; // clear source port
     ae6:	12 a2       	std	Z+34, r1	; 0x22
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t mss,uint8_t cp_seq)
{
        uint8_t i=0;
        uint8_t tseq;
        while(i<2){
                buf[TCP_DST_PORT_H_P+i]=buf[TCP_SRC_PORT_H_P+i];
     ae8:	83 a1       	ldd	r24, Z+35	; 0x23
     aea:	85 a3       	std	Z+37, r24	; 0x25
                buf[TCP_SRC_PORT_H_P+i]=0; // clear source port
     aec:	13 a2       	std	Z+35, r1	; 0x23
                i++;
        }
        // set source port  (http):
        buf[TCP_SRC_PORT_L_P]=wwwport;
     aee:	80 91 a5 00 	lds	r24, 0x00A5
     af2:	83 a3       	std	Z+35, r24	; 0x23
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t mss,uint8_t cp_seq)
{
     af4:	df 01       	movw	r26, r30
     af6:	99 96       	adiw	r26, 0x29	; 41
     af8:	94 e0       	ldi	r25, 0x04	; 4
        buf[TCP_SRC_PORT_L_P]=wwwport;
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
                rel_ack_num=buf[TCP_SEQ_H_P+i-1]+rel_ack_num;
     afa:	8c 91       	ld	r24, X
     afc:	68 0f       	add	r22, r24
     afe:	71 1d       	adc	r23, r1
                tseq=buf[TCP_SEQACK_H_P+i-1];
     b00:	14 96       	adiw	r26, 0x04	; 4
     b02:	8c 91       	ld	r24, X
     b04:	14 97       	sbiw	r26, 0x04	; 4
                buf[TCP_SEQACK_H_P+i-1]=0xff&rel_ack_num;
     b06:	14 96       	adiw	r26, 0x04	; 4
     b08:	6c 93       	st	X, r22
     b0a:	14 97       	sbiw	r26, 0x04	; 4
                if (cp_seq){
     b0c:	22 23       	and	r18, r18
     b0e:	11 f0       	breq	.+4      	; 0xb14 <make_tcphead+0x34>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
     b10:	8c 93       	st	X, r24
     b12:	01 c0       	rjmp	.+2      	; 0xb16 <make_tcphead+0x36>
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
     b14:	1c 92       	st	X, r1
                }
                rel_ack_num=rel_ack_num>>8;
                i--;
     b16:	91 50       	subi	r25, 0x01	; 1
     b18:	11 97       	sbiw	r26, 0x01	; 1
        // set source port  (http):
        buf[TCP_SRC_PORT_L_P]=wwwport;
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
     b1a:	99 23       	and	r25, r25
     b1c:	19 f0       	breq	.+6      	; 0xb24 <make_tcphead+0x44>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
                }
                rel_ack_num=rel_ack_num>>8;
     b1e:	67 2f       	mov	r22, r23
     b20:	77 27       	eor	r23, r23
     b22:	eb cf       	rjmp	.-42     	; 0xafa <make_tcphead+0x1a>
                i--;
        }
        if (cp_seq==0){
     b24:	22 23       	and	r18, r18
     b26:	49 f4       	brne	.+18     	; 0xb3a <make_tcphead+0x5a>
                // put inital seq number
                buf[TCP_SEQ_H_P+0]= 0;
     b28:	16 a2       	std	Z+38, r1	; 0x26
                buf[TCP_SEQ_H_P+1]= 0;
     b2a:	17 a2       	std	Z+39, r1	; 0x27
                // we step only the second byte, this allows us to send packts 
                // with 255 bytes or 512 (if we step the initial seqnum by 2)
                buf[TCP_SEQ_H_P+2]= seqnum; 
     b2c:	80 91 a6 00 	lds	r24, 0x00A6
     b30:	80 a7       	std	Z+40, r24	; 0x28
                buf[TCP_SEQ_H_P+3]= 0;
     b32:	11 a6       	std	Z+41, r1	; 0x29
                // step the inititial seq num by something we will not use
                // during this tcp session:
                seqnum+=2;
     b34:	8e 5f       	subi	r24, 0xFE	; 254
     b36:	80 93 a6 00 	sts	0x00A6, r24
        }
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
     b3a:	12 aa       	std	Z+50, r1	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
     b3c:	13 aa       	std	Z+51, r1	; 0x33

        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes. 
        // E.g 24 bytes: 24/4=6 => 0x60=header len field
        //buf[TCP_HEADER_LEN_P]=(((TCP_HEADER_LEN_PLAIN+4)/4)) <<4; // 0x60
        if (mss){
     b3e:	44 23       	and	r20, r20
     b40:	51 f0       	breq	.+20     	; 0xb56 <make_tcphead+0x76>
                // the only option we set is MSS to 1408:
                // 1408 in hex is 0x580
                buf[TCP_OPTIONS_P]=2;
     b42:	82 e0       	ldi	r24, 0x02	; 2
     b44:	86 ab       	std	Z+54, r24	; 0x36
                buf[TCP_OPTIONS_P+1]=4;
     b46:	84 e0       	ldi	r24, 0x04	; 4
     b48:	87 ab       	std	Z+55, r24	; 0x37
                buf[TCP_OPTIONS_P+2]=0x05; 
     b4a:	85 e0       	ldi	r24, 0x05	; 5
     b4c:	80 af       	std	Z+56, r24	; 0x38
                buf[TCP_OPTIONS_P+3]=0x80;
     b4e:	80 e8       	ldi	r24, 0x80	; 128
     b50:	81 af       	std	Z+57, r24	; 0x39
                // 24 bytes:
                buf[TCP_HEADER_LEN_P]=0x60;
     b52:	80 e6       	ldi	r24, 0x60	; 96
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <make_tcphead+0x78>
        }else{
                // no options:
                // 20 bytes:
                buf[TCP_HEADER_LEN_P]=0x50;
     b56:	80 e5       	ldi	r24, 0x50	; 80
     b58:	86 a7       	std	Z+46, r24	; 0x2e
     b5a:	08 95       	ret

00000b5c <make_arp_answer_from_request>:
        }
}

void make_arp_answer_from_request(uint8_t *buf)
{
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	ac 01       	movw	r20, r24
     b62:	ec 01       	movw	r28, r24
     b64:	2f ea       	ldi	r18, 0xAF	; 175
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	fc 01       	movw	r30, r24
     b6a:	d9 01       	movw	r26, r18
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     b6c:	86 81       	ldd	r24, Z+6	; 0x06
     b6e:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     b70:	8d 91       	ld	r24, X+
     b72:	86 83       	std	Z+6, r24	; 0x06
     b74:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	a5 3b       	cpi	r26, 0xB5	; 181
     b7a:	b8 07       	cpc	r27, r24
     b7c:	b9 f7       	brne	.-18     	; 0xb6c <make_arp_answer_from_request+0x10>
void make_arp_answer_from_request(uint8_t *buf)
{
        uint8_t i=0;
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
     b7e:	fa 01       	movw	r30, r20
     b80:	14 8a       	std	Z+20, r1	; 0x14
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	85 8b       	std	Z+21, r24	; 0x15
        // fill the mac addresses:
        while(i<6){
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
     b86:	8e 89       	ldd	r24, Y+22	; 0x16
     b88:	88 a3       	std	Y+32, r24	; 0x20
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
     b8a:	f9 01       	movw	r30, r18
     b8c:	81 91       	ld	r24, Z+
     b8e:	9f 01       	movw	r18, r30
     b90:	8e 8b       	std	Y+22, r24	; 0x16
     b92:	21 96       	adiw	r28, 0x01	; 1
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
        // fill the mac addresses:
        while(i<6){
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	25 3b       	cpi	r18, 0xB5	; 181
     b98:	3f 07       	cpc	r19, r31
     b9a:	a9 f7       	brne	.-22     	; 0xb86 <make_arp_answer_from_request+0x2a>
     b9c:	fa 01       	movw	r30, r20
     b9e:	7c 96       	adiw	r30, 0x1c	; 28
     ba0:	a5 eb       	ldi	r26, 0xB5	; 181
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
     ba4:	80 81       	ld	r24, Z
     ba6:	82 87       	std	Z+10, r24	; 0x0a
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
     ba8:	8d 91       	ld	r24, X+
     baa:	81 93       	st	Z+, r24
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	a9 3b       	cpi	r26, 0xB9	; 185
     bb0:	b8 07       	cpc	r27, r24
     bb2:	c1 f7       	brne	.-16     	; 0xba4 <make_arp_answer_from_request+0x48>
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf); 
     bb4:	8a e2       	ldi	r24, 0x2A	; 42
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	ba 01       	movw	r22, r20
     bba:	0e 94 52 03 	call	0x6a4	; 0x6a4 <enc28j60PacketSend>
}
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	08 95       	ret

00000bc4 <make_echo_reply_from_request>:

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	ec 01       	movw	r28, r24
     bce:	8b 01       	movw	r16, r22
     bd0:	fc 01       	movw	r30, r24
     bd2:	af ea       	ldi	r26, 0xAF	; 175
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     bd6:	86 81       	ldd	r24, Z+6	; 0x06
     bd8:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     bda:	8d 91       	ld	r24, X+
     bdc:	86 83       	std	Z+6, r24	; 0x06
     bde:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	a5 3b       	cpi	r26, 0xB5	; 181
     be4:	b8 07       	cpc	r27, r24
     be6:	b9 f7       	brne	.-18     	; 0xbd6 <make_echo_reply_from_request+0x12>
}

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
        make_eth(buf);
        make_ip(buf);
     be8:	ce 01       	movw	r24, r28
     bea:	0e 94 5f 05 	call	0xabe	; 0xabe <make_ip>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
     bee:	1a a2       	std	Y+34, r1	; 0x22
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
     bf0:	8c a1       	ldd	r24, Y+36	; 0x24
     bf2:	88 3f       	cpi	r24, 0xF8	; 248
     bf4:	18 f0       	brcs	.+6      	; 0xbfc <make_echo_reply_from_request+0x38>
                buf[ICMP_CHECKSUM_P+1]++;
     bf6:	8d a1       	ldd	r24, Y+37	; 0x25
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	8d a3       	std	Y+37, r24	; 0x25
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
     bfc:	8c a1       	ldd	r24, Y+36	; 0x24
     bfe:	88 5f       	subi	r24, 0xF8	; 248
     c00:	8c a3       	std	Y+36, r24	; 0x24
        //
        enc28j60PacketSend(len,buf);
     c02:	c8 01       	movw	r24, r16
     c04:	be 01       	movw	r22, r28
     c06:	0e 94 52 03 	call	0x6a4	; 0x6a4 <enc28j60PacketSend>
}
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	08 95       	ret

00000c14 <make_udp_reply_from_request>:

// you can send a max of 220 bytes of data
void make_udp_reply_from_request(uint8_t *buf,char *data,uint8_t datalen,uint16_t port)
{
     c14:	df 92       	push	r13
     c16:	ef 92       	push	r14
     c18:	ff 92       	push	r15
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	ec 01       	movw	r28, r24
     c24:	7b 01       	movw	r14, r22
     c26:	d2 2e       	mov	r13, r18
     c28:	13 2f       	mov	r17, r19
     c2a:	fc 01       	movw	r30, r24
     c2c:	af ea       	ldi	r26, 0xAF	; 175
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     c30:	86 81       	ldd	r24, Z+6	; 0x06
     c32:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     c34:	8d 91       	ld	r24, X+
     c36:	86 83       	std	Z+6, r24	; 0x06
     c38:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	a5 3b       	cpi	r26, 0xB5	; 181
     c3e:	b8 07       	cpc	r27, r24
     c40:	b9 f7       	brne	.-18     	; 0xc30 <make_udp_reply_from_request+0x1c>
     c42:	04 2f       	mov	r16, r20
     c44:	4d 3d       	cpi	r20, 0xDD	; 221
     c46:	08 f0       	brcs	.+2      	; 0xc4a <make_udp_reply_from_request+0x36>
     c48:	0c ed       	ldi	r16, 0xDC	; 220
        make_eth(buf);
        if (datalen>220){
                datalen=220;
        }
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
     c4a:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
     c4c:	04 5e       	subi	r16, 0xE4	; 228
     c4e:	09 8b       	std	Y+17, r16	; 0x11
        make_ip(buf);
     c50:	ce 01       	movw	r24, r28
     c52:	0e 94 5f 05 	call	0xabe	; 0xabe <make_ip>
        // send to port:
        //buf[UDP_DST_PORT_H_P]=port>>8;
        //buf[UDP_DST_PORT_L_P]=port & 0xff;
        // sent to port of sender and use "port" as own source:
        buf[UDP_DST_PORT_H_P]=buf[UDP_SRC_PORT_H_P];
     c56:	8a a1       	ldd	r24, Y+34	; 0x22
     c58:	8c a3       	std	Y+36, r24	; 0x24
        buf[UDP_DST_PORT_L_P]= buf[UDP_SRC_PORT_L_P];
     c5a:	8b a1       	ldd	r24, Y+35	; 0x23
     c5c:	8d a3       	std	Y+37, r24	; 0x25
        buf[UDP_SRC_PORT_H_P]=port>>8;
     c5e:	1a a3       	std	Y+34, r17	; 0x22
        buf[UDP_SRC_PORT_L_P]=port & 0xff;
     c60:	db a2       	std	Y+35, r13	; 0x23
        // calculte the udp length:
        buf[UDP_LEN_H_P]=0;
     c62:	1e a2       	std	Y+38, r1	; 0x26
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
     c64:	04 51       	subi	r16, 0x14	; 20
     c66:	0f a3       	std	Y+39, r16	; 0x27
     c68:	08 50       	subi	r16, 0x08	; 8
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
     c6a:	18 a6       	std	Y+40, r1	; 0x28
        buf[UDP_CHECKSUM_L_P]=0;
     c6c:	19 a6       	std	Y+41, r1	; 0x29
     c6e:	de 01       	movw	r26, r28
     c70:	9a 96       	adiw	r26, 0x2a	; 42
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	07 c0       	rjmp	.+14     	; 0xc86 <make_udp_reply_from_request+0x72>
        // copy the data:
        while(i<datalen){
                buf[UDP_DATA_P+i]=data[i];
     c78:	f7 01       	movw	r30, r14
     c7a:	e2 0f       	add	r30, r18
     c7c:	f3 1f       	adc	r31, r19
     c7e:	80 81       	ld	r24, Z
     c80:	8d 93       	st	X+, r24
     c82:	2f 5f       	subi	r18, 0xFF	; 255
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
        buf[UDP_CHECKSUM_L_P]=0;
        // copy the data:
        while(i<datalen){
     c86:	20 17       	cp	r18, r16
     c88:	b8 f3       	brcs	.-18     	; 0xc78 <make_udp_reply_from_request+0x64>
                buf[UDP_DATA_P+i]=data[i];
                i++;
        }
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
     c8a:	10 e0       	ldi	r17, 0x00	; 0
     c8c:	00 5f       	subi	r16, 0xF0	; 240
     c8e:	1f 4f       	sbci	r17, 0xFF	; 255
     c90:	ce 01       	movw	r24, r28
     c92:	4a 96       	adiw	r24, 0x1a	; 26
     c94:	b8 01       	movw	r22, r16
     c96:	41 e0       	ldi	r20, 0x01	; 1
     c98:	0e 94 5e 04 	call	0x8bc	; 0x8bc <checksum>
        buf[UDP_CHECKSUM_H_P]=ck>>8;
     c9c:	98 a7       	std	Y+40, r25	; 0x28
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
     c9e:	89 a7       	std	Y+41, r24	; 0x29
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
     ca0:	c8 01       	movw	r24, r16
     ca2:	4a 96       	adiw	r24, 0x1a	; 26
     ca4:	be 01       	movw	r22, r28
     ca6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <enc28j60PacketSend>
}
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	df 90       	pop	r13
     cb8:	08 95       	ret

00000cba <make_tcp_synack_from_syn>:

void make_tcp_synack_from_syn(uint8_t *buf)
{
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	ec 01       	movw	r28, r24
     cc0:	fc 01       	movw	r30, r24
     cc2:	af ea       	ldi	r26, 0xAF	; 175
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     cc6:	86 81       	ldd	r24, Z+6	; 0x06
     cc8:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     cca:	8d 91       	ld	r24, X+
     ccc:	86 83       	std	Z+6, r24	; 0x06
     cce:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	a5 3b       	cpi	r26, 0xB5	; 181
     cd4:	b8 07       	cpc	r27, r24
     cd6:	b9 f7       	brne	.-18     	; 0xcc6 <make_tcp_synack_from_syn+0xc>
{
        uint16_t ck;
        make_eth(buf);
        // total length field in the IP header must be set:
        // 20 bytes IP + 24 bytes (20tcp+4tcp options)
        buf[IP_TOTLEN_H_P]=0;
     cd8:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
     cda:	8c e2       	ldi	r24, 0x2C	; 44
     cdc:	89 8b       	std	Y+17, r24	; 0x11
        make_ip(buf);
     cde:	ce 01       	movw	r24, r28
     ce0:	0e 94 5f 05 	call	0xabe	; 0xabe <make_ip>
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYNACK_V;
     ce4:	82 e1       	ldi	r24, 0x12	; 18
     ce6:	8f a7       	std	Y+47, r24	; 0x2f
        make_tcphead(buf,1,1,0);
     ce8:	ce 01       	movw	r24, r28
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	41 e0       	ldi	r20, 0x01	; 1
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	0e 94 70 05 	call	0xae0	; 0xae0 <make_tcphead>
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + 4 (one option: mss)
        ck=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+4,2);
     cf6:	ce 01       	movw	r24, r28
     cf8:	4a 96       	adiw	r24, 0x1a	; 26
     cfa:	60 e2       	ldi	r22, 0x20	; 32
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	42 e0       	ldi	r20, 0x02	; 2
     d00:	0e 94 5e 04 	call	0x8bc	; 0x8bc <checksum>
        buf[TCP_CHECKSUM_H_P]=ck>>8;
     d04:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
     d06:	8b ab       	std	Y+51, r24	; 0x33
        // add 4 for option mss:
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN,buf);
     d08:	8a e3       	ldi	r24, 0x3A	; 58
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	be 01       	movw	r22, r28
     d0e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <enc28j60PacketSend>
}
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	08 95       	ret

00000d18 <get_tcp_data_pointer>:
// get a pointer to the start of tcp data in buf
// Returns 0 if there is no data
// You must call init_len_info once before calling this function
uint16_t get_tcp_data_pointer(void)
{
        if (info_data_len){
     d18:	80 91 a8 00 	lds	r24, 0x00A8
     d1c:	90 91 a9 00 	lds	r25, 0x00A9
     d20:	89 2b       	or	r24, r25
     d22:	19 f4       	brne	.+6      	; 0xd2a <get_tcp_data_pointer+0x12>
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	06 c0       	rjmp	.+12     	; 0xd36 <get_tcp_data_pointer+0x1e>
                return((uint16_t)TCP_SRC_PORT_H_P+info_hdr_len);
     d2a:	20 91 aa 00 	lds	r18, 0x00AA
     d2e:	30 91 ab 00 	lds	r19, 0x00AB
     d32:	2e 5d       	subi	r18, 0xDE	; 222
     d34:	3f 4f       	sbci	r19, 0xFF	; 255
        }else{
                return(0);
        }
}
     d36:	c9 01       	movw	r24, r18
     d38:	08 95       	ret

00000d3a <init_len_info>:

// do some basic length calculations and store the result in static varibales
void init_len_info(uint8_t *buf)
{
     d3a:	fc 01       	movw	r30, r24
        info_data_len=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
     d3c:	90 89       	ldd	r25, Z+16	; 0x10
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	21 89       	ldd	r18, Z+17	; 0x11
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	28 2b       	or	r18, r24
     d46:	39 2b       	or	r19, r25
        info_data_len-=IP_HEADER_LEN;
        info_hdr_len=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
     d48:	86 a5       	ldd	r24, Z+46	; 0x2e
     d4a:	82 95       	swap	r24
     d4c:	8f 70       	andi	r24, 0x0F	; 15
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	90 93 ab 00 	sts	0x00AB, r25
     d5c:	80 93 aa 00 	sts	0x00AA, r24
        info_data_len-=info_hdr_len;
     d60:	24 51       	subi	r18, 0x14	; 20
     d62:	30 40       	sbci	r19, 0x00	; 0
     d64:	28 1b       	sub	r18, r24
     d66:	39 0b       	sbc	r19, r25
     d68:	30 93 a9 00 	sts	0x00A9, r19
     d6c:	20 93 a8 00 	sts	0x00A8, r18
        if (info_data_len<=0){
     d70:	12 16       	cp	r1, r18
     d72:	13 06       	cpc	r1, r19
     d74:	24 f0       	brlt	.+8      	; 0xd7e <init_len_info+0x44>
                info_data_len=0;
     d76:	10 92 a9 00 	sts	0x00A9, r1
     d7a:	10 92 a8 00 	sts	0x00A8, r1
     d7e:	08 95       	ret

00000d80 <fill_tcp_data_p>:

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data_p(uint8_t *buf,uint16_t pos, const prog_char *progmem_s)
{
     d80:	6a 5c       	subi	r22, 0xCA	; 202
     d82:	7f 4f       	sbci	r23, 0xFF	; 255
     d84:	dc 01       	movw	r26, r24
     d86:	a6 0f       	add	r26, r22
     d88:	b7 1f       	adc	r27, r23
     d8a:	66 53       	subi	r22, 0x36	; 54
     d8c:	70 40       	sbci	r23, 0x00	; 0
     d8e:	03 c0       	rjmp	.+6      	; 0xd96 <fill_tcp_data_p+0x16>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     d90:	8d 93       	st	X+, r24
                pos++;
     d92:	6f 5f       	subi	r22, 0xFF	; 255
     d94:	7f 4f       	sbci	r23, 0xFF	; 255
     d96:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     d98:	4f 5f       	subi	r20, 0xFF	; 255
     d9a:	5f 4f       	sbci	r21, 0xFF	; 255
     d9c:	84 91       	lpm	r24, Z+
     d9e:	88 23       	and	r24, r24
     da0:	b9 f7       	brne	.-18     	; 0xd90 <fill_tcp_data_p+0x10>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
                pos++;
        }
        return(pos);
}
     da2:	cb 01       	movw	r24, r22
     da4:	08 95       	ret

00000da6 <fill_tcp_data>:

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
     da6:	fa 01       	movw	r30, r20
     da8:	6a 5c       	subi	r22, 0xCA	; 202
     daa:	7f 4f       	sbci	r23, 0xFF	; 255
     dac:	dc 01       	movw	r26, r24
     dae:	a6 0f       	add	r26, r22
     db0:	b7 1f       	adc	r27, r23
     db2:	66 53       	subi	r22, 0x36	; 54
     db4:	70 40       	sbci	r23, 0x00	; 0
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <fill_tcp_data+0x1a>
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
     db8:	8d 93       	st	X+, r24
                pos++;
     dba:	6f 5f       	subi	r22, 0xFF	; 255
     dbc:	7f 4f       	sbci	r23, 0xFF	; 255
                s++;
     dbe:	31 96       	adiw	r30, 0x01	; 1
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
     dc0:	80 81       	ld	r24, Z
     dc2:	88 23       	and	r24, r24
     dc4:	c9 f7       	brne	.-14     	; 0xdb8 <fill_tcp_data+0x12>
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
                pos++;
                s++;
        }
        return(pos);
}
     dc6:	cb 01       	movw	r24, r22
     dc8:	08 95       	ret

00000dca <make_tcp_ack_from_any>:

// Make just an ack packet with no tcp data inside
// This will modify the eth/ip/tcp header 
void make_tcp_ack_from_any(uint8_t *buf)
{
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	ec 01       	movw	r28, r24
     dd0:	fc 01       	movw	r30, r24
     dd2:	af ea       	ldi	r26, 0xAF	; 175
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     dd6:	86 81       	ldd	r24, Z+6	; 0x06
     dd8:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     dda:	8d 91       	ld	r24, X+
     ddc:	86 83       	std	Z+6, r24	; 0x06
     dde:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	a5 3b       	cpi	r26, 0xB5	; 181
     de4:	b8 07       	cpc	r27, r24
     de6:	b9 f7       	brne	.-18     	; 0xdd6 <make_tcp_ack_from_any+0xc>
void make_tcp_ack_from_any(uint8_t *buf)
{
        uint16_t j;
        make_eth(buf);
        // fill the header:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V;
     de8:	80 e1       	ldi	r24, 0x10	; 16
     dea:	8f a7       	std	Y+47, r24	; 0x2f
        if (info_data_len==0){
     dec:	60 91 a8 00 	lds	r22, 0x00A8
     df0:	70 91 a9 00 	lds	r23, 0x00A9
     df4:	61 15       	cp	r22, r1
     df6:	71 05       	cpc	r23, r1
     df8:	21 f4       	brne	.+8      	; 0xe02 <make_tcp_ack_from_any+0x38>
                // if there is no data then we must still acknoledge one packet
                make_tcphead(buf,1,0,1); // no options
     dfa:	ce 01       	movw	r24, r28
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	01 c0       	rjmp	.+2      	; 0xe04 <make_tcp_ack_from_any+0x3a>
        }else{
                make_tcphead(buf,info_data_len,0,1); // no options
     e02:	ce 01       	movw	r24, r28
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	21 e0       	ldi	r18, 0x01	; 1
     e08:	0e 94 70 05 	call	0xae0	; 0xae0 <make_tcphead>
        }

        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) 
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
        buf[IP_TOTLEN_H_P]=j>>8;
     e0c:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=j& 0xff;
     e0e:	88 e2       	ldi	r24, 0x28	; 40
     e10:	89 8b       	std	Y+17, r24	; 0x11
        make_ip(buf);
     e12:	ce 01       	movw	r24, r28
     e14:	0e 94 5f 05 	call	0xabe	; 0xabe <make_ip>
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN,2);
     e18:	ce 01       	movw	r24, r28
     e1a:	4a 96       	adiw	r24, 0x1a	; 26
     e1c:	6c e1       	ldi	r22, 0x1C	; 28
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	42 e0       	ldi	r20, 0x02	; 2
     e22:	0e 94 5e 04 	call	0x8bc	; 0x8bc <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
     e26:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
     e28:	8b ab       	std	Y+51, r24	; 0x33
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN,buf);
     e2a:	86 e3       	ldi	r24, 0x36	; 54
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	be 01       	movw	r22, r28
     e30:	0e 94 52 03 	call	0x6a4	; 0x6a4 <enc28j60PacketSend>
}
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	08 95       	ret

00000e3a <make_tcp_ack_with_data>:
// dlen is the amount of tcp data (http data) we send in this packet
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
void make_tcp_ack_with_data(uint8_t *buf,uint16_t dlen)
{
     e3a:	ef 92       	push	r14
     e3c:	ff 92       	push	r15
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	8c 01       	movw	r16, r24
     e44:	7b 01       	movw	r14, r22
        uint16_t j;
        // fill the header:
        // This code requires that we send only one data packet
        // because we keep no state information. We must therefore set
        // the fin here:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V;
     e46:	89 e1       	ldi	r24, 0x19	; 25
     e48:	f8 01       	movw	r30, r16
     e4a:	87 a7       	std	Z+47, r24	; 0x2f

        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) + len of data
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
     e4c:	cb 01       	movw	r24, r22
     e4e:	88 96       	adiw	r24, 0x28	; 40
        buf[IP_TOTLEN_H_P]=j>>8;
     e50:	90 8b       	std	Z+16, r25	; 0x10
        buf[IP_TOTLEN_L_P]=j& 0xff;
     e52:	81 8b       	std	Z+17, r24	; 0x11
        fill_ip_hdr_checksum(buf);
     e54:	c8 01       	movw	r24, r16
     e56:	0e 94 48 05 	call	0xa90	; 0xa90 <fill_ip_hdr_checksum>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
     e5a:	f8 01       	movw	r30, r16
     e5c:	12 aa       	std	Z+50, r1	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
     e5e:	13 aa       	std	Z+51, r1	; 0x33
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+dlen,2);
     e60:	8c e1       	ldi	r24, 0x1C	; 28
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	e8 0e       	add	r14, r24
     e66:	f9 1e       	adc	r15, r25
     e68:	c8 01       	movw	r24, r16
     e6a:	4a 96       	adiw	r24, 0x1a	; 26
     e6c:	b7 01       	movw	r22, r14
     e6e:	42 e0       	ldi	r20, 0x02	; 2
     e70:	0e 94 5e 04 	call	0x8bc	; 0x8bc <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
     e74:	f8 01       	movw	r30, r16
     e76:	92 ab       	std	Z+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
     e78:	83 ab       	std	Z+51, r24	; 0x33
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
     e7a:	c7 01       	movw	r24, r14
     e7c:	4a 96       	adiw	r24, 0x1a	; 26
     e7e:	b8 01       	movw	r22, r16
     e80:	0e 94 52 03 	call	0x6a4	; 0x6a4 <enc28j60PacketSend>
}
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	ff 90       	pop	r15
     e8a:	ef 90       	pop	r14
     e8c:	08 95       	ret

00000e8e <analyse_get_url>:
// takes a string of the form password/commandNumber and analyse it
// return values: -1 invalid password, otherwise command number
//                -2 no command given but password valid
//                -3 valid password, no command and no trailing "/"
int8_t analyse_get_url(char *str)
{
     e8e:	58 2f       	mov	r21, r24
     e90:	28 2f       	mov	r18, r24
     e92:	39 2f       	mov	r19, r25
     e94:	d9 01       	movw	r26, r18
     e96:	05 c0       	rjmp	.+10     	; 0xea2 <analyse_get_url+0x14>
        uint8_t loop=1;
        uint8_t i=0;
        while(loop){
                if(password[i]){
                        if(*str==password[i]){
     e98:	8e 17       	cp	r24, r30
     e9a:	11 f0       	breq	.+4      	; 0xea0 <analyse_get_url+0x12>
     e9c:	8f ef       	ldi	r24, 0xFF	; 255
     e9e:	08 95       	ret
                                str++;
     ea0:	11 96       	adiw	r26, 0x01	; 1
int8_t analyse_get_url(char *str)
{
        uint8_t loop=1;
        uint8_t i=0;
        while(loop){
                if(password[i]){
     ea2:	ea 2f       	mov	r30, r26
     ea4:	e5 1b       	sub	r30, r21
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	e2 56       	subi	r30, 0x62	; 98
     eaa:	ff 4f       	sbci	r31, 0xFF	; 255
     eac:	e0 81       	ld	r30, Z
     eae:	8c 91       	ld	r24, X
     eb0:	ee 23       	and	r30, r30
     eb2:	91 f7       	brne	.-28     	; 0xe98 <analyse_get_url+0xa>
                        // end of password
                        loop=0;
                }
        }
        // is is now one char after the password
        if (*str == '/'){
     eb4:	8f 32       	cpi	r24, 0x2F	; 47
     eb6:	11 f0       	breq	.+4      	; 0xebc <analyse_get_url+0x2e>
     eb8:	8d ef       	ldi	r24, 0xFD	; 253
     eba:	08 95       	ret
                str++;
        }else{
                return(-3);
        }
        // check the first char, garbage after this is ignored (including a slash)
        if (*str < 0x3a && *str > 0x2f){
     ebc:	11 96       	adiw	r26, 0x01	; 1
     ebe:	8c 91       	ld	r24, X
     ec0:	80 53       	subi	r24, 0x30	; 48
     ec2:	8a 30       	cpi	r24, 0x0A	; 10
     ec4:	08 f0       	brcs	.+2      	; 0xec8 <analyse_get_url+0x3a>
     ec6:	8e ef       	ldi	r24, 0xFE	; 254
                // is a ASCII number, return it
                return(*str-0x30);
        }
        return(-2);
}
     ec8:	08 95       	ret

00000eca <adc>:
unsigned int adc(unsigned char channel)
{  unsigned int val;
   ADMUX=0x40+channel;
     eca:	80 5c       	subi	r24, 0xC0	; 192
     ecc:	87 b9       	out	0x07, r24	; 7
   ADCSRA=(1<<ADEN);
     ece:	80 e8       	ldi	r24, 0x80	; 128
     ed0:	86 b9       	out	0x06, r24	; 6
   ADCSRA|=(1<<ADSC);
     ed2:	36 9a       	sbi	0x06, 6	; 6
    ADCSRA|=0x07;
     ed4:	86 b1       	in	r24, 0x06	; 6
     ed6:	87 60       	ori	r24, 0x07	; 7
     ed8:	86 b9       	out	0x06, r24	; 6
   while(bit_is_clear(ADCSRA,ADIF));
     eda:	34 9b       	sbis	0x06, 4	; 6
     edc:	fe cf       	rjmp	.-4      	; 0xeda <adc+0x10>
   val=ADCW; 
     ede:	24 b1       	in	r18, 0x04	; 4
     ee0:	35 b1       	in	r19, 0x05	; 5
   return val;
}
     ee2:	c9 01       	movw	r24, r18
     ee4:	08 95       	ret

00000ee6 <moved_perm>:
        return(fill_tcp_data_p(buf,plen,gStrbuf));
}*/
// answer HTTP/1.0 301 Moved Permanently\r\nLocation: password/\r\n\r\n
// to redirect to the url ending in a slash
uint16_t moved_perm(uint8_t *buf)
{
     ee6:	dc 01       	movw	r26, r24
     ee8:	d6 96       	adiw	r26, 0x36	; 54
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	03 c0       	rjmp	.+6      	; 0xef6 <moved_perm+0x10>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     ef0:	4d 93       	st	X+, r20
                pos++;
     ef2:	2f 5f       	subi	r18, 0xFF	; 255
     ef4:	3f 4f       	sbci	r19, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     ef6:	f9 01       	movw	r30, r18
     ef8:	e5 5e       	subi	r30, 0xE5	; 229
     efa:	fc 4f       	sbci	r31, 0xFC	; 252
     efc:	44 91       	lpm	r20, Z+
     efe:	44 23       	and	r20, r20
     f00:	b9 f7       	brne	.-18     	; 0xef0 <moved_perm+0xa>
     f02:	2a 5c       	subi	r18, 0xCA	; 202
     f04:	3f 4f       	sbci	r19, 0xFF	; 255
     f06:	dc 01       	movw	r26, r24
     f08:	a2 0f       	add	r26, r18
     f0a:	b3 1f       	adc	r27, r19
     f0c:	26 53       	subi	r18, 0x36	; 54
     f0e:	30 40       	sbci	r19, 0x00	; 0
     f10:	ee e9       	ldi	r30, 0x9E	; 158
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	04 c0       	rjmp	.+8      	; 0xf1e <moved_perm+0x38>
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
     f16:	4d 93       	st	X+, r20
                pos++;
     f18:	2f 5f       	subi	r18, 0xFF	; 255
     f1a:	3f 4f       	sbci	r19, 0xFF	; 255
                s++;
     f1c:	31 96       	adiw	r30, 0x01	; 1
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
     f1e:	40 81       	ld	r20, Z
     f20:	44 23       	and	r20, r20
     f22:	c9 f7       	brne	.-14     	; 0xf16 <moved_perm+0x30>
     f24:	2a 5c       	subi	r18, 0xCA	; 202
     f26:	3f 4f       	sbci	r19, 0xFF	; 255
     f28:	dc 01       	movw	r26, r24
     f2a:	a2 0f       	add	r26, r18
     f2c:	b3 1f       	adc	r27, r19
     f2e:	26 53       	subi	r18, 0x36	; 54
     f30:	30 40       	sbci	r19, 0x00	; 0
        uint16_t plen;
        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 301 Moved Permanently\r\nLocation: "));
        plen=fill_tcp_data(buf,plen,password);
        plen=fill_tcp_data_p(buf,plen,PSTR("/\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n"));
     f32:	4a ee       	ldi	r20, 0xEA	; 234
     f34:	52 e0       	ldi	r21, 0x02	; 2
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <moved_perm+0x58>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     f38:	6d 93       	st	X+, r22
                pos++;
     f3a:	2f 5f       	subi	r18, 0xFF	; 255
     f3c:	3f 4f       	sbci	r19, 0xFF	; 255
     f3e:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     f40:	4f 5f       	subi	r20, 0xFF	; 255
     f42:	5f 4f       	sbci	r21, 0xFF	; 255
     f44:	64 91       	lpm	r22, Z+
     f46:	66 23       	and	r22, r22
     f48:	b9 f7       	brne	.-18     	; 0xf38 <moved_perm+0x52>
     f4a:	2a 5c       	subi	r18, 0xCA	; 202
     f4c:	3f 4f       	sbci	r19, 0xFF	; 255
     f4e:	dc 01       	movw	r26, r24
     f50:	a2 0f       	add	r26, r18
     f52:	b3 1f       	adc	r27, r19
     f54:	26 53       	subi	r18, 0x36	; 54
     f56:	30 40       	sbci	r19, 0x00	; 0
        plen=fill_tcp_data_p(buf,plen,PSTR("<h1>301 Moved Permanently</h1>\n"));
     f58:	4a ec       	ldi	r20, 0xCA	; 202
     f5a:	52 e0       	ldi	r21, 0x02	; 2
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <moved_perm+0x7e>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     f5e:	6d 93       	st	X+, r22
                pos++;
     f60:	2f 5f       	subi	r18, 0xFF	; 255
     f62:	3f 4f       	sbci	r19, 0xFF	; 255
     f64:	fa 01       	movw	r30, r20
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     f66:	4f 5f       	subi	r20, 0xFF	; 255
     f68:	5f 4f       	sbci	r21, 0xFF	; 255
     f6a:	64 91       	lpm	r22, Z+
     f6c:	66 23       	and	r22, r22
     f6e:	b9 f7       	brne	.-18     	; 0xf5e <moved_perm+0x78>
     f70:	2a 5c       	subi	r18, 0xCA	; 202
     f72:	3f 4f       	sbci	r19, 0xFF	; 255
     f74:	dc 01       	movw	r26, r24
     f76:	a2 0f       	add	r26, r18
     f78:	b3 1f       	adc	r27, r19
     f7a:	26 53       	subi	r18, 0x36	; 54
     f7c:	30 40       	sbci	r19, 0x00	; 0
        plen=fill_tcp_data_p(buf,plen,PSTR("add a trailing slash to the url\n"));
     f7e:	89 ea       	ldi	r24, 0xA9	; 169
     f80:	92 e0       	ldi	r25, 0x02	; 2
     f82:	03 c0       	rjmp	.+6      	; 0xf8a <moved_perm+0xa4>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     f84:	4d 93       	st	X+, r20
                pos++;
     f86:	2f 5f       	subi	r18, 0xFF	; 255
     f88:	3f 4f       	sbci	r19, 0xFF	; 255
     f8a:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	44 91       	lpm	r20, Z+
     f90:	44 23       	and	r20, r20
     f92:	c1 f7       	brne	.-16     	; 0xf84 <moved_perm+0x9e>
        return(plen);
}
     f94:	c9 01       	movw	r24, r18
     f96:	08 95       	ret

00000f98 <verify_password>:
// the password string (only the first 5 char checked), (only a-z,0-9,_ characters):
static char password[]="123456"; // must not be longer than 9 char

// 
uint8_t verify_password(char *str)
{
     f98:	bc 01       	movw	r22, r24
        // the first characters of the received string are
        // a simple password/cookie:
        if (strncmp(password,str,5)==0){
     f9a:	8e e9       	ldi	r24, 0x9E	; 158
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	45 e0       	ldi	r20, 0x05	; 5
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	0e 94 67 0a 	call	0x14ce	; 0x14ce <strncmp>
     fa6:	9c 01       	movw	r18, r24
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	23 2b       	or	r18, r19
     fac:	09 f4       	brne	.+2      	; 0xfb0 <verify_password+0x18>
     fae:	81 e0       	ldi	r24, 0x01	; 1
                return(1);
        }
        return(0);
}
     fb0:	08 95       	ret

00000fb2 <print_webpage>:
}


// prepare the webpage by writing the data to the tcp send buffer
uint16_t print_webpage(uint8_t *buf,uint8_t on_off)
{
     fb2:	ff 92       	push	r15
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	8c 01       	movw	r16, r24
     fbe:	f6 2e       	mov	r15, r22
     fc0:	dc 01       	movw	r26, r24
     fc2:	d6 96       	adiw	r26, 0x36	; 54
     fc4:	c0 e0       	ldi	r28, 0x00	; 0
     fc6:	d0 e0       	ldi	r29, 0x00	; 0
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <print_webpage+0x1c>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     fca:	8d 93       	st	X+, r24
                pos++;
     fcc:	21 96       	adiw	r28, 0x01	; 1
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     fce:	fe 01       	movw	r30, r28
     fd0:	e3 5a       	subi	r30, 0xA3	; 163
     fd2:	fd 4f       	sbci	r31, 0xFD	; 253
     fd4:	84 91       	lpm	r24, Z+
     fd6:	88 23       	and	r24, r24
     fd8:	c1 f7       	brne	.-16     	; 0xfca <print_webpage+0x18>
     fda:	e6 96       	adiw	r28, 0x36	; 54
     fdc:	d8 01       	movw	r26, r16
     fde:	ac 0f       	add	r26, r28
     fe0:	bd 1f       	adc	r27, r29
     fe2:	e6 97       	sbiw	r28, 0x36	; 54
        uint16_t plen;
        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\nRefresh: 20\r\n\r\n"));
        plen=fill_tcp_data_p(buf,plen,PSTR("<H1>Solar Irradiance Meter</H1>"));
     fe4:	8d e3       	ldi	r24, 0x3D	; 61
     fe6:	92 e0       	ldi	r25, 0x02	; 2
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <print_webpage+0x3c>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     fea:	2d 93       	st	X+, r18
                pos++;
     fec:	21 96       	adiw	r28, 0x01	; 1
     fee:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	24 91       	lpm	r18, Z+
     ff4:	22 23       	and	r18, r18
     ff6:	c9 f7       	brne	.-14     	; 0xfea <print_webpage+0x38>
     ff8:	e6 96       	adiw	r28, 0x36	; 54
     ffa:	d8 01       	movw	r26, r16
     ffc:	ac 0f       	add	r26, r28
     ffe:	bd 1f       	adc	r27, r29
    1000:	e6 97       	sbiw	r28, 0x36	; 54
        plen=fill_tcp_data_p(buf,plen,PSTR("<center><p><h2>Irradiance is: "));
    1002:	8e e1       	ldi	r24, 0x1E	; 30
    1004:	92 e0       	ldi	r25, 0x02	; 2
    1006:	02 c0       	rjmp	.+4      	; 0x100c <print_webpage+0x5a>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1008:	2d 93       	st	X+, r18
                pos++;
    100a:	21 96       	adiw	r28, 0x01	; 1
    100c:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    100e:	01 96       	adiw	r24, 0x01	; 1
    1010:	24 91       	lpm	r18, Z+
    1012:	22 23       	and	r18, r18
    1014:	c9 f7       	brne	.-14     	; 0x1008 <print_webpage+0x56>
		itoa(radiance,gStrbuf,10); // convert integer to string
    1016:	80 91 e0 02 	lds	r24, 0x02E0
    101a:	90 91 e1 02 	lds	r25, 0x02E1
    101e:	62 ee       	ldi	r22, 0xE2	; 226
    1020:	72 e0       	ldi	r23, 0x02	; 2
    1022:	4a e0       	ldi	r20, 0x0A	; 10
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	0e 94 75 0a 	call	0x14ea	; 0x14ea <itoa>
    102a:	e6 96       	adiw	r28, 0x36	; 54
    102c:	d8 01       	movw	r26, r16
    102e:	ac 0f       	add	r26, r28
    1030:	bd 1f       	adc	r27, r29
    1032:	e6 97       	sbiw	r28, 0x36	; 54
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 c0       	rjmp	.+4      	; 0x103e <print_webpage+0x8c>
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
    103a:	ed 93       	st	X+, r30
                pos++;
    103c:	21 96       	adiw	r28, 0x01	; 1
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
    103e:	fc 01       	movw	r30, r24
    1040:	ee 51       	subi	r30, 0x1E	; 30
    1042:	fd 4f       	sbci	r31, 0xFD	; 253
    1044:	e0 81       	ld	r30, Z
    1046:	01 96       	adiw	r24, 0x01	; 1
    1048:	ee 23       	and	r30, r30
    104a:	b9 f7       	brne	.-18     	; 0x103a <print_webpage+0x88>
    104c:	e6 96       	adiw	r28, 0x36	; 54
    104e:	d8 01       	movw	r26, r16
    1050:	ac 0f       	add	r26, r28
    1052:	bd 1f       	adc	r27, r29
    1054:	e6 97       	sbiw	r28, 0x36	; 54
		plen=fill_tcp_data(buf,plen,gStrbuf);
		plen=fill_tcp_data_p(buf,plen,PSTR(" Joules</center></h2></p>"));
    1056:	84 e0       	ldi	r24, 0x04	; 4
    1058:	92 e0       	ldi	r25, 0x02	; 2
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <print_webpage+0xae>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    105c:	2d 93       	st	X+, r18
                pos++;
    105e:	21 96       	adiw	r28, 0x01	; 1
    1060:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	24 91       	lpm	r18, Z+
    1066:	22 23       	and	r18, r18
    1068:	c9 f7       	brne	.-14     	; 0x105c <print_webpage+0xaa>
    106a:	e6 96       	adiw	r28, 0x36	; 54
    106c:	d8 01       	movw	r26, r16
    106e:	ac 0f       	add	r26, r28
    1070:	bd 1f       	adc	r27, r29
    1072:	e6 97       	sbiw	r28, 0x36	; 54
		plen=fill_tcp_data_p(buf,plen,PSTR("<center><p>Output is: "));
    1074:	8d ee       	ldi	r24, 0xED	; 237
    1076:	91 e0       	ldi	r25, 0x01	; 1
    1078:	02 c0       	rjmp	.+4      	; 0x107e <print_webpage+0xcc>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    107a:	2d 93       	st	X+, r18
                pos++;
    107c:	21 96       	adiw	r28, 0x01	; 1
    107e:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	24 91       	lpm	r18, Z+
    1084:	22 23       	and	r18, r18
    1086:	c9 f7       	brne	.-14     	; 0x107a <print_webpage+0xc8>
    1088:	ce 01       	movw	r24, r28
    108a:	c6 96       	adiw	r24, 0x36	; 54
        if (on_off){
    108c:	ff 20       	and	r15, r15
    108e:	31 f4       	brne	.+12     	; 0x109c <print_webpage+0xea>
    1090:	d8 01       	movw	r26, r16
    1092:	a8 0f       	add	r26, r24
    1094:	b9 1f       	adc	r27, r25
                plen=fill_tcp_data_p(buf,plen,PSTR("<font color=\"#00FF00\"> ON</font>"));
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("OFF"));
    1096:	88 ec       	ldi	r24, 0xC8	; 200
    1098:	91 e0       	ldi	r25, 0x01	; 1
    109a:	17 c0       	rjmp	.+46     	; 0x10ca <print_webpage+0x118>
    109c:	d8 01       	movw	r26, r16
    109e:	a8 0f       	add	r26, r24
    10a0:	b9 1f       	adc	r27, r25
		itoa(radiance,gStrbuf,10); // convert integer to string
		plen=fill_tcp_data(buf,plen,gStrbuf);
		plen=fill_tcp_data_p(buf,plen,PSTR(" Joules</center></h2></p>"));
		plen=fill_tcp_data_p(buf,plen,PSTR("<center><p>Output is: "));
        if (on_off){
                plen=fill_tcp_data_p(buf,plen,PSTR("<font color=\"#00FF00\"> ON</font>"));
    10a2:	8c ec       	ldi	r24, 0xCC	; 204
    10a4:	91 e0       	ldi	r25, 0x01	; 1
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <print_webpage+0xfa>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    10a8:	2d 93       	st	X+, r18
                pos++;
    10aa:	21 96       	adiw	r28, 0x01	; 1
    10ac:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	24 91       	lpm	r18, Z+
    10b2:	22 23       	and	r18, r18
    10b4:	c9 f7       	brne	.-14     	; 0x10a8 <print_webpage+0xf6>
    10b6:	e6 96       	adiw	r28, 0x36	; 54
    10b8:	d8 01       	movw	r26, r16
    10ba:	ac 0f       	add	r26, r28
    10bc:	bd 1f       	adc	r27, r29
    10be:	e6 97       	sbiw	r28, 0x36	; 54
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("OFF"));
        }
        plen=fill_tcp_data_p(buf,plen,PSTR(" <small><a href=\".\">[refresh status]</a></small></p>\n<p><a href=\"."));
    10c0:	85 e8       	ldi	r24, 0x85	; 133
    10c2:	91 e0       	ldi	r25, 0x01	; 1
    10c4:	0a c0       	rjmp	.+20     	; 0x10da <print_webpage+0x128>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    10c6:	2d 93       	st	X+, r18
                pos++;
    10c8:	21 96       	adiw	r28, 0x01	; 1
    10ca:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	24 91       	lpm	r18, Z+
    10d0:	22 23       	and	r18, r18
    10d2:	c9 f7       	brne	.-14     	; 0x10c6 <print_webpage+0x114>
    10d4:	f0 cf       	rjmp	.-32     	; 0x10b6 <print_webpage+0x104>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    10d6:	2d 93       	st	X+, r18
                pos++;
    10d8:	21 96       	adiw	r28, 0x01	; 1
    10da:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	24 91       	lpm	r18, Z+
    10e0:	22 23       	and	r18, r18
    10e2:	c9 f7       	brne	.-14     	; 0x10d6 <print_webpage+0x124>
    10e4:	ce 01       	movw	r24, r28
    10e6:	c6 96       	adiw	r24, 0x36	; 54
        if (on_off){
    10e8:	ff 20       	and	r15, r15
    10ea:	31 f4       	brne	.+12     	; 0x10f8 <print_webpage+0x146>
    10ec:	d8 01       	movw	r26, r16
    10ee:	a8 0f       	add	r26, r24
    10f0:	b9 1f       	adc	r27, r25
                plen=fill_tcp_data_p(buf,plen,PSTR("/0\">Switch off</a><p>"));
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("/1\">Switch on</a><p>"));
    10f2:	8a e5       	ldi	r24, 0x5A	; 90
    10f4:	91 e0       	ldi	r25, 0x01	; 1
    10f6:	17 c0       	rjmp	.+46     	; 0x1126 <print_webpage+0x174>
    10f8:	d8 01       	movw	r26, r16
    10fa:	a8 0f       	add	r26, r24
    10fc:	b9 1f       	adc	r27, r25
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("OFF"));
        }
        plen=fill_tcp_data_p(buf,plen,PSTR(" <small><a href=\".\">[refresh status]</a></small></p>\n<p><a href=\"."));
        if (on_off){
                plen=fill_tcp_data_p(buf,plen,PSTR("/0\">Switch off</a><p>"));
    10fe:	8f e6       	ldi	r24, 0x6F	; 111
    1100:	91 e0       	ldi	r25, 0x01	; 1
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <print_webpage+0x156>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1104:	2d 93       	st	X+, r18
                pos++;
    1106:	21 96       	adiw	r28, 0x01	; 1
    1108:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    110a:	01 96       	adiw	r24, 0x01	; 1
    110c:	24 91       	lpm	r18, Z+
    110e:	22 23       	and	r18, r18
    1110:	c9 f7       	brne	.-14     	; 0x1104 <print_webpage+0x152>
    1112:	e6 96       	adiw	r28, 0x36	; 54
    1114:	d8 01       	movw	r26, r16
    1116:	ac 0f       	add	r26, r28
    1118:	bd 1f       	adc	r27, r29
    111a:	e6 97       	sbiw	r28, 0x36	; 54
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("/1\">Switch on</a><p>"));
        }
        plen=fill_tcp_data_p(buf,plen,PSTR("</center><hr><br>By Sachi Awasthi\n"));
    111c:	87 e3       	ldi	r24, 0x37	; 55
    111e:	91 e0       	ldi	r25, 0x01	; 1
    1120:	0a c0       	rjmp	.+20     	; 0x1136 <print_webpage+0x184>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1122:	2d 93       	st	X+, r18
                pos++;
    1124:	21 96       	adiw	r28, 0x01	; 1
    1126:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	24 91       	lpm	r18, Z+
    112c:	22 23       	and	r18, r18
    112e:	c9 f7       	brne	.-14     	; 0x1122 <print_webpage+0x170>
    1130:	f0 cf       	rjmp	.-32     	; 0x1112 <print_webpage+0x160>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1132:	2d 93       	st	X+, r18
                pos++;
    1134:	21 96       	adiw	r28, 0x01	; 1
    1136:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1138:	01 96       	adiw	r24, 0x01	; 1
    113a:	24 91       	lpm	r18, Z+
    113c:	22 23       	and	r18, r18
    113e:	c9 f7       	brne	.-14     	; 0x1132 <print_webpage+0x180>
        return(plen);
}
    1140:	ce 01       	movw	r24, r28
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	ff 90       	pop	r15
    114c:	08 95       	ret

0000114e <main>:


int main(void){
    114e:	9f 92       	push	r9
    1150:	af 92       	push	r10
    1152:	bf 92       	push	r11
    1154:	cf 92       	push	r12
    1156:	df 92       	push	r13
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	6e 97       	sbiw	r28, 0x1e	; 30
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	12 e3       	ldi	r17, 0x32	; 50
    1176:	81 2f       	mov	r24, r17
    1178:	8a 95       	dec	r24
    117a:	f1 f7       	brne	.-4      	; 0x1178 <main+0x2a>
        // set the clock prescaler. First write CLKPCE to enable setting of clock the
        // next four instructions.
//        CLKPR=(1<<CLKPCE); // change enable
//        CLKPR=0; // "no pre-scaler"
        _delay_loop_1(50); // 12ms
        DDRA=0x0F;
    117c:	8f e0       	ldi	r24, 0x0F	; 15
    117e:	8a bb       	out	0x1a, r24	; 26
        /* enable PD2/INT0, as input */
        DDRD&= ~(1<<DDD2);
    1180:	8a 98       	cbi	0x11, 2	; 17

        /*initialize enc28j60*/
        enc28j60Init(mymac);
    1182:	84 e9       	ldi	r24, 0x94	; 148
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	0e 94 8d 02 	call	0x51a	; 0x51a <enc28j60Init>
        enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	0e 94 87 02 	call	0x50e	; 0x50e <enc28j60clkout>
    1190:	81 2f       	mov	r24, r17
    1192:	8a 95       	dec	r24
    1194:	f1 f7       	brne	.-4      	; 0x1192 <main+0x44>
        _delay_loop_1(50); // 12ms
        
        // LED
        /* enable PB1, LED as output */
        DDRB|= (1<<DDB1);
    1196:	b9 9a       	sbi	0x17, 1	; 23

        /* set output to Vcc, LED off */
        PORTB|= (1<<PORTB1);
    1198:	c1 9a       	sbi	0x18, 1	; 24

        // the transistor on PD7
        DDRD|= (1<<DDD7);DDRA=0xF0;
    119a:	8f 9a       	sbi	0x11, 7	; 17
    119c:	80 ef       	ldi	r24, 0xF0	; 240
    119e:	8a bb       	out	0x1a, r24	; 26
       // PORTD &= ~(1<<PORTD7);// transistor off
        DDRC=0xFF;
    11a0:	8f ef       	ldi	r24, 0xFF	; 255
    11a2:	84 bb       	out	0x14, r24	; 20
		PORTC = 0x00;// transistor off
    11a4:	15 ba       	out	0x15, r1	; 21
        /* Magjack leds configuration, see enc28j60 datasheet, page 11 */
        // LEDB=yellow LEDA=green
        //
        // 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
        // enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
        enc28j60PhyWrite(PHLCON,0x476);
    11a6:	84 e1       	ldi	r24, 0x14	; 20
    11a8:	66 e7       	ldi	r22, 0x76	; 118
    11aa:	74 e0       	ldi	r23, 0x04	; 4
    11ac:	0e 94 69 02 	call	0x4d2	; 0x4d2 <enc28j60PhyWrite>
    11b0:	1a 95       	dec	r17
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <main+0x62>
        _delay_loop_1(50); // 12ms
        
        /* set output to GND, red LED on */
        PORTB &= ~(1<<PORTB1);
    11b4:	c1 98       	cbi	0x18, 1	; 24
}

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
        uint8_t i=0;
        wwwport=wwwp;
    11b6:	80 e5       	ldi	r24, 0x50	; 80
    11b8:	80 93 a5 00 	sts	0x00A5, r24
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
        while(i<4){
                ipaddr[i]=myip[i];
    11c0:	f9 01       	movw	r30, r18
    11c2:	eb 54       	subi	r30, 0x4B	; 75
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	d9 01       	movw	r26, r18
    11c8:	a6 56       	subi	r26, 0x66	; 102
    11ca:	bf 4f       	sbci	r27, 0xFF	; 255
    11cc:	8c 91       	ld	r24, X
    11ce:	80 83       	st	Z, r24
    11d0:	2f 5f       	subi	r18, 0xFF	; 255
    11d2:	3f 4f       	sbci	r19, 0xFF	; 255

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
        uint8_t i=0;
        wwwport=wwwp;
        while(i<4){
    11d4:	24 30       	cpi	r18, 0x04	; 4
    11d6:	31 05       	cpc	r19, r1
    11d8:	99 f7       	brne	.-26     	; 0x11c0 <main+0x72>
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
                macaddr[i]=mymac[i];
    11de:	f9 01       	movw	r30, r18
    11e0:	e1 55       	subi	r30, 0x51	; 81
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	d9 01       	movw	r26, r18
    11e6:	ac 56       	subi	r26, 0x6C	; 108
    11e8:	bf 4f       	sbci	r27, 0xFF	; 255
    11ea:	8c 91       	ld	r24, X
    11ec:	80 83       	st	Z, r24
    11ee:	2f 5f       	subi	r18, 0xFF	; 255
    11f0:	3f 4f       	sbci	r19, 0xFF	; 255
        while(i<4){
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
    11f2:	26 30       	cpi	r18, 0x06	; 6
    11f4:	31 05       	cpc	r19, r1
    11f6:	99 f7       	brne	.-26     	; 0x11de <main+0x90>
    11f8:	bb 24       	eor	r11, r11
    11fa:	b3 94       	inc	r11
                                strcpy(str,"e=no_such_cmd");
                                goto ANSWER;
                        }
                        strcpy(str,"e=invalid_pw");
ANSWER:
                        make_udp_reply_from_request(buf,str,strlen(str),MYUDPPORT);
    11fc:	6e 01       	movw	r12, r28
    11fe:	08 94       	sec
    1200:	c1 1c       	adc	r12, r1
    1202:	d1 1c       	adc	r13, r1
        }
        return(-2);
}
unsigned int adc(unsigned char channel)
{  unsigned int val;
   ADMUX=0x40+channel;
    1204:	74 e4       	ldi	r23, 0x44	; 68
    1206:	a7 2e       	mov	r10, r23
   ADCSRA=(1<<ADEN);
    1208:	60 e8       	ldi	r22, 0x80	; 128
    120a:	96 2e       	mov	r9, r22
        //init the ethernet/ip layer:
        init_ip_arp_udp_tcp(mymac,myip,MYWWWPORT);

        while(1){
                // get the next new packet:
                plen = enc28j60PacketReceive(BUFFER_SIZE, buf);
    120c:	86 e2       	ldi	r24, 0x26	; 38
    120e:	92 e0       	ldi	r25, 0x02	; 2
    1210:	69 eb       	ldi	r22, 0xB9	; 185
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	0e 94 c4 03 	call	0x788	; 0x788 <enc28j60PacketReceive>
    1218:	8c 01       	movw	r16, r24

                /*plen will ne unequal to zero if there is a valid 
                 * packet (without crc error) */
                if(plen==0){
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	b9 f3       	breq	.-18     	; 0x120c <main+0xbe>
                }
                        
                // arp is broadcast if unknown but a host may also
                // verify the mac address by sending it to 
                // a unicast address.
                if(eth_type_is_arp_and_my_ip(buf,plen)){
    121e:	89 eb       	ldi	r24, 0xB9	; 185
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	b8 01       	movw	r22, r16
    1224:	0e 94 ff 04 	call	0x9fe	; 0x9fe <eth_type_is_arp_and_my_ip>
    1228:	88 23       	and	r24, r24
    122a:	29 f0       	breq	.+10     	; 0x1236 <main+0xe8>
                        make_arp_answer_from_request(buf);
    122c:	89 eb       	ldi	r24, 0xB9	; 185
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	0e 94 ae 05 	call	0xb5c	; 0xb5c <make_arp_answer_from_request>
    1234:	eb cf       	rjmp	.-42     	; 0x120c <main+0xbe>
                        continue;
                }

                // check if ip packets are for us:
                if(eth_type_is_ip_and_my_ip(buf,plen)==0){
    1236:	89 eb       	ldi	r24, 0xB9	; 185
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	b8 01       	movw	r22, r16
    123c:	0e 94 1b 05 	call	0xa36	; 0xa36 <eth_type_is_ip_and_my_ip>
    1240:	88 23       	and	r24, r24
    1242:	21 f3       	breq	.-56     	; 0x120c <main+0xbe>
                        continue;
                }
                // led----------
                if (i){
    1244:	bb 20       	and	r11, r11
    1246:	19 f0       	breq	.+6      	; 0x124e <main+0x100>
                        /* set output to Vcc, LED off */
                        PORTB|= (1<<PORTB1);
    1248:	c1 9a       	sbi	0x18, 1	; 24
    124a:	bb 24       	eor	r11, r11
    124c:	03 c0       	rjmp	.+6      	; 0x1254 <main+0x106>
                        i=0;
                }else{
                        /* set output to GND, LED on */
                        PORTB &= ~(1<<PORTB1);
    124e:	c1 98       	cbi	0x18, 1	; 24
    1250:	bb 24       	eor	r11, r11
    1252:	b3 94       	inc	r11
                        i=1;
                }
                
                if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
    1254:	80 91 d0 00 	lds	r24, 0x00D0
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	51 f4       	brne	.+20     	; 0x1270 <main+0x122>
    125c:	80 91 db 00 	lds	r24, 0x00DB
    1260:	88 30       	cpi	r24, 0x08	; 8
    1262:	a1 f6       	brne	.-88     	; 0x120c <main+0xbe>
                        // a ping packet, let's send pong
                        make_echo_reply_from_request(buf,plen);
    1264:	89 eb       	ldi	r24, 0xB9	; 185
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	b8 01       	movw	r22, r16
    126a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <make_echo_reply_from_request>
    126e:	ce cf       	rjmp	.-100    	; 0x120c <main+0xbe>
                        continue;
                }
                // tcp port www start, compare only the lower byte
                if (buf[IP_PROTO_P]==IP_PROTO_TCP_V&&buf[TCP_DST_PORT_H_P]==0&&buf[TCP_DST_PORT_L_P]==MYWWWPORT){
    1270:	86 30       	cpi	r24, 0x06	; 6
    1272:	09 f0       	breq	.+2      	; 0x1276 <main+0x128>
    1274:	bd c0       	rjmp	.+378    	; 0x13f0 <main+0x2a2>
    1276:	80 91 dd 00 	lds	r24, 0x00DD
    127a:	88 23       	and	r24, r24
    127c:	39 f6       	brne	.-114    	; 0x120c <main+0xbe>
    127e:	80 91 de 00 	lds	r24, 0x00DE
    1282:	80 35       	cpi	r24, 0x50	; 80
    1284:	19 f6       	brne	.-122    	; 0x120c <main+0xbe>
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
    1286:	80 91 e8 00 	lds	r24, 0x00E8
    128a:	81 ff       	sbrs	r24, 1
    128c:	05 c0       	rjmp	.+10     	; 0x1298 <main+0x14a>
                                make_tcp_synack_from_syn(buf);
    128e:	89 eb       	ldi	r24, 0xB9	; 185
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 5d 06 	call	0xcba	; 0xcba <make_tcp_synack_from_syn>
    1296:	ba cf       	rjmp	.-140    	; 0x120c <main+0xbe>
                                // make_tcp_synack_from_syn does already send the syn,ack
                                continue;
                        }
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    1298:	84 ff       	sbrs	r24, 4
    129a:	b8 cf       	rjmp	.-144    	; 0x120c <main+0xbe>
                                init_len_info(buf); // init some data structures
    129c:	89 eb       	ldi	r24, 0xB9	; 185
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <init_len_info>
// get a pointer to the start of tcp data in buf
// Returns 0 if there is no data
// You must call init_len_info once before calling this function
uint16_t get_tcp_data_pointer(void)
{
        if (info_data_len){
    12a4:	80 91 a8 00 	lds	r24, 0x00A8
    12a8:	90 91 a9 00 	lds	r25, 0x00A9
    12ac:	89 2b       	or	r24, r25
    12ae:	61 f0       	breq	.+24     	; 0x12c8 <main+0x17a>
                return((uint16_t)TCP_SRC_PORT_H_P+info_hdr_len);
    12b0:	00 91 aa 00 	lds	r16, 0x00AA
    12b4:	10 91 ab 00 	lds	r17, 0x00AB
    12b8:	52 e2       	ldi	r21, 0x22	; 34
    12ba:	e5 2e       	mov	r14, r21
    12bc:	f1 2c       	mov	r15, r1
    12be:	e0 0e       	add	r14, r16
    12c0:	f1 1e       	adc	r15, r17
                                // we can possibly have no data, just ack:
                                dat_p=get_tcp_data_pointer();
                                if (dat_p==0){
    12c2:	e1 14       	cp	r14, r1
    12c4:	f1 04       	cpc	r15, r1
    12c6:	49 f4       	brne	.+18     	; 0x12da <main+0x18c>
                                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    12c8:	80 91 e8 00 	lds	r24, 0x00E8
    12cc:	80 ff       	sbrs	r24, 0
    12ce:	9e cf       	rjmp	.-196    	; 0x120c <main+0xbe>
                                                // finack, answer with ack
                                                make_tcp_ack_from_any(buf);
    12d0:	89 eb       	ldi	r24, 0xB9	; 185
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 e5 06 	call	0xdca	; 0xdca <make_tcp_ack_from_any>
    12d8:	99 cf       	rjmp	.-206    	; 0x120c <main+0xbe>
                                        }
                                        // just an ack with no data, wait for next packet
                                        continue;
                                }
                                if (strncmp("GET ",(char *)&(buf[dat_p]),4)!=0){
    12da:	b7 01       	movw	r22, r14
    12dc:	67 54       	subi	r22, 0x47	; 71
    12de:	7f 4f       	sbci	r23, 0xFF	; 255
    12e0:	80 e6       	ldi	r24, 0x60	; 96
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	44 e0       	ldi	r20, 0x04	; 4
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	0e 94 67 0a 	call	0x14ce	; 0x14ce <strncmp>
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	81 f0       	breq	.+32     	; 0x1310 <main+0x1c2>
    12f0:	00 e0       	ldi	r16, 0x00	; 0
    12f2:	10 e0       	ldi	r17, 0x00	; 0
    12f4:	06 c0       	rjmp	.+12     	; 0x1302 <main+0x1b4>
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    12f6:	f8 01       	movw	r30, r16
    12f8:	e7 54       	subi	r30, 0x47	; 71
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	86 ab       	std	Z+54, r24	; 0x36
                pos++;
    12fe:	0f 5f       	subi	r16, 0xFF	; 255
    1300:	1f 4f       	sbci	r17, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1302:	f8 01       	movw	r30, r16
    1304:	e5 50       	subi	r30, 0x05	; 5
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	84 91       	lpm	r24, Z+
    130a:	88 23       	and	r24, r24
    130c:	a1 f7       	brne	.-24     	; 0x12f6 <main+0x1a8>
    130e:	66 c0       	rjmp	.+204    	; 0x13dc <main+0x28e>
                                        // for possible status codes see:
                                        // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
                                        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n<h1>200 OK</h1>"));
                                        goto SENDTCP;
                                }
                                if (strncmp("/ ",(char *)&(buf[dat_p+4]),2)==0){
    1310:	01 52       	subi	r16, 0x21	; 33
    1312:	1f 4f       	sbci	r17, 0xFF	; 255
    1314:	85 e6       	ldi	r24, 0x65	; 101
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	b8 01       	movw	r22, r16
    131a:	42 e0       	ldi	r20, 0x02	; 2
    131c:	50 e0       	ldi	r21, 0x00	; 0
    131e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <strncmp>
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	f1 f4       	brne	.+60     	; 0x1362 <main+0x214>
    1326:	00 e0       	ldi	r16, 0x00	; 0
    1328:	10 e0       	ldi	r17, 0x00	; 0
    132a:	06 c0       	rjmp	.+12     	; 0x1338 <main+0x1ea>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    132c:	f8 01       	movw	r30, r16
    132e:	e7 54       	subi	r30, 0x47	; 71
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	86 ab       	std	Z+54, r24	; 0x36
                pos++;
    1334:	0f 5f       	subi	r16, 0xFF	; 255
    1336:	1f 4f       	sbci	r17, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1338:	f8 01       	movw	r30, r16
    133a:	e2 53       	subi	r30, 0x32	; 50
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	84 91       	lpm	r24, Z+
    1340:	88 23       	and	r24, r24
    1342:	a1 f7       	brne	.-24     	; 0x132c <main+0x1de>
    1344:	d8 01       	movw	r26, r16
    1346:	a1 51       	subi	r26, 0x11	; 17
    1348:	bf 4f       	sbci	r27, 0xFF	; 255
                                        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n"));
                                        plen=fill_tcp_data_p(buf,plen,PSTR("<p>Usage: http://host_or_ip/password</p>\n"));
    134a:	84 ea       	ldi	r24, 0xA4	; 164
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	03 c0       	rjmp	.+6      	; 0x1356 <main+0x208>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1350:	2d 93       	st	X+, r18
                pos++;
    1352:	0f 5f       	subi	r16, 0xFF	; 255
    1354:	1f 4f       	sbci	r17, 0xFF	; 255
    1356:	fc 01       	movw	r30, r24
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	24 91       	lpm	r18, Z+
    135c:	22 23       	and	r18, r18
    135e:	c1 f7       	brne	.-16     	; 0x1350 <main+0x202>
    1360:	3d c0       	rjmp	.+122    	; 0x13dc <main+0x28e>
                                        goto SENDTCP;
                                }
                                cmd=analyse_get_url((char *)&(buf[dat_p+5]));
    1362:	c7 01       	movw	r24, r14
    1364:	82 54       	subi	r24, 0x42	; 66
    1366:	9f 4f       	sbci	r25, 0xFF	; 255
    1368:	0e 94 47 07 	call	0xe8e	; 0xe8e <analyse_get_url>
                                // for possible status codes see:
                                // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
                                if (cmd==-1){
    136c:	8f 3f       	cpi	r24, 0xFF	; 255
    136e:	81 f4       	brne	.+32     	; 0x1390 <main+0x242>
    1370:	00 e0       	ldi	r16, 0x00	; 0
    1372:	10 e0       	ldi	r17, 0x00	; 0
    1374:	06 c0       	rjmp	.+12     	; 0x1382 <main+0x234>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1376:	f8 01       	movw	r30, r16
    1378:	e7 54       	subi	r30, 0x47	; 71
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	86 ab       	std	Z+54, r24	; 0x36
                pos++;
    137e:	0f 5f       	subi	r16, 0xFF	; 255
    1380:	1f 4f       	sbci	r17, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1382:	f8 01       	movw	r30, r16
    1384:	ec 5a       	subi	r30, 0xAC	; 172
    1386:	ff 4f       	sbci	r31, 0xFF	; 255
    1388:	84 91       	lpm	r24, Z+
    138a:	88 23       	and	r24, r24
    138c:	a1 f7       	brne	.-24     	; 0x1376 <main+0x228>
    138e:	26 c0       	rjmp	.+76     	; 0x13dc <main+0x28e>
                                        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 401 Unauthorized\r\nContent-Type: text/html\r\n\r\n<h1>401 Unauthorized</h1>"));
                                        goto SENDTCP;
                                }
                                if (cmd==1){
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	19 f4       	brne	.+6      	; 0x139a <main+0x24c>
                                       // PORTD|= (1<<PORTD7);// transistor on
										PORTC|= (1<<0);// transistor on
    1394:	a8 9a       	sbi	0x15, 0	; 21
                                       sbi(PORTA,4);
    1396:	dc 9a       	sbi	0x1b, 4	; 27
    1398:	0c c0       	rjmp	.+24     	; 0x13b2 <main+0x264>
								}
                                if (cmd==0){
    139a:	88 23       	and	r24, r24
    139c:	19 f4       	brne	.+6      	; 0x13a4 <main+0x256>
                                       // PORTD &= ~(1<<PORTD7);// transistor off
                                        PORTC &= ~(1<<0);// transistor off
    139e:	a8 98       	cbi	0x15, 0	; 21
										cbi(PORTA,4);
    13a0:	dc 98       	cbi	0x1b, 4	; 27
    13a2:	07 c0       	rjmp	.+14     	; 0x13b2 <main+0x264>
                                }
                                if (cmd==-3){
    13a4:	8d 3f       	cpi	r24, 0xFD	; 253
    13a6:	29 f4       	brne	.+10     	; 0x13b2 <main+0x264>
                                        // redirect to add a trailing slash
                                        plen=moved_perm(buf);
    13a8:	89 eb       	ldi	r24, 0xB9	; 185
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 73 07 	call	0xee6	; 0xee6 <moved_perm>
    13b0:	14 c0       	rjmp	.+40     	; 0x13da <main+0x28c>
        }
        return(-2);
}
unsigned int adc(unsigned char channel)
{  unsigned int val;
   ADMUX=0x40+channel;
    13b2:	a7 b8       	out	0x07, r10	; 7
   ADCSRA=(1<<ADEN);
    13b4:	96 b8       	out	0x06, r9	; 6
   ADCSRA|=(1<<ADSC);
    13b6:	36 9a       	sbi	0x06, 6	; 6
    ADCSRA|=0x07;
    13b8:	86 b1       	in	r24, 0x06	; 6
    13ba:	87 60       	ori	r24, 0x07	; 7
    13bc:	86 b9       	out	0x06, r24	; 6
   while(bit_is_clear(ADCSRA,ADIF));
    13be:	34 9b       	sbis	0x06, 4	; 6
    13c0:	fe cf       	rjmp	.-4      	; 0x13be <main+0x270>
   val=ADCW; 
    13c2:	84 b1       	in	r24, 0x04	; 4
    13c4:	95 b1       	in	r25, 0x05	; 5
                                if (cmd==-3){
                                        // redirect to add a trailing slash
                                        plen=moved_perm(buf);
                                        goto SENDTCP;
                                }
								radiance=adc(4);
    13c6:	90 93 e1 02 	sts	0x02E1, r25
    13ca:	80 93 e0 02 	sts	0x02E0, r24
                                // if (cmd==-2) or any other value
                                // just display the status:
                                plen=print_webpage(buf,(PORTC & (1<<PORTC0)));
    13ce:	65 b3       	in	r22, 0x15	; 21
    13d0:	61 70       	andi	r22, 0x01	; 1
    13d2:	89 eb       	ldi	r24, 0xB9	; 185
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <print_webpage>
    13da:	8c 01       	movw	r16, r24
                                //
SENDTCP:
                                make_tcp_ack_from_any(buf); // send ack for http get
    13dc:	89 eb       	ldi	r24, 0xB9	; 185
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 e5 06 	call	0xdca	; 0xdca <make_tcp_ack_from_any>
                                make_tcp_ack_with_data(buf,plen); // send data
    13e4:	89 eb       	ldi	r24, 0xB9	; 185
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	b8 01       	movw	r22, r16
    13ea:	0e 94 1d 07 	call	0xe3a	; 0xe3a <make_tcp_ack_with_data>
    13ee:	0e cf       	rjmp	.-484    	; 0x120c <main+0xbe>

                }
                // tcp port www end
                //
                // udp start, we listen on udp port 1200=0x4B0
                if (buf[IP_PROTO_P]==IP_PROTO_UDP_V&&buf[UDP_DST_PORT_H_P]==4&&buf[UDP_DST_PORT_L_P]==0xb0){
    13f0:	81 31       	cpi	r24, 0x11	; 17
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <main+0x2a8>
    13f4:	0b cf       	rjmp	.-490    	; 0x120c <main+0xbe>
    13f6:	80 91 dd 00 	lds	r24, 0x00DD
    13fa:	84 30       	cpi	r24, 0x04	; 4
    13fc:	09 f0       	breq	.+2      	; 0x1400 <main+0x2b2>
    13fe:	06 cf       	rjmp	.-500    	; 0x120c <main+0xbe>
    1400:	80 91 de 00 	lds	r24, 0x00DE
    1404:	80 3b       	cpi	r24, 0xB0	; 176
    1406:	09 f0       	breq	.+2      	; 0x140a <main+0x2bc>
    1408:	01 cf       	rjmp	.-510    	; 0x120c <main+0xbe>
                        payloadlen=buf[UDP_LEN_L_P]-UDP_HEADER_LEN;
    140a:	10 91 e0 00 	lds	r17, 0x00E0
    140e:	18 50       	subi	r17, 0x08	; 8
                        // you must sent a string starting with v
                        // e.g udpcom version 10.0.0.24
                        if (verify_password((char *)&(buf[UDP_DATA_P]))){
    1410:	83 ee       	ldi	r24, 0xE3	; 227
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 94 cc 07 	call	0xf98	; 0xf98 <verify_password>
    1418:	88 23       	and	r24, r24
    141a:	59 f4       	brne	.+22     	; 0x1432 <main+0x2e4>
    141c:	3c c0       	rjmp	.+120    	; 0x1496 <main+0x348>
                                // find the first comma which indicates 
                                // the start of a command:
                                cmd_pos=0;
                                while(cmd_pos<payloadlen){
                                        cmd_pos++;
    141e:	9f 5f       	subi	r25, 0xFF	; 255
                                        if (buf[UDP_DATA_P+cmd_pos]==','){
    1420:	e9 2f       	mov	r30, r25
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	e7 54       	subi	r30, 0x47	; 71
    1426:	ff 4f       	sbci	r31, 0xFF	; 255
    1428:	82 a5       	ldd	r24, Z+42	; 0x2a
    142a:	8c 32       	cpi	r24, 0x2C	; 44
    142c:	19 f4       	brne	.+6      	; 0x1434 <main+0x2e6>
                                                cmd_pos++; // put on start of cmd
    142e:	9f 5f       	subi	r25, 0xFF	; 255
    1430:	03 c0       	rjmp	.+6      	; 0x1438 <main+0x2ea>
                                                break;
    1432:	90 e0       	ldi	r25, 0x00	; 0
                        // e.g udpcom version 10.0.0.24
                        if (verify_password((char *)&(buf[UDP_DATA_P]))){
                                // find the first comma which indicates 
                                // the start of a command:
                                cmd_pos=0;
                                while(cmd_pos<payloadlen){
    1434:	91 17       	cp	r25, r17
    1436:	98 f3       	brcs	.-26     	; 0x141e <main+0x2d0>
                                        }
                                }
                                // a command is one char and a value. At
                                // least 3 characters long. It has an '=' on
                                // position 2:
                                if (cmd_pos<2 || cmd_pos>payloadlen-3 || buf[UDP_DATA_P+cmd_pos+1]!='='){
    1438:	92 30       	cpi	r25, 0x02	; 2
    143a:	68 f0       	brcs	.+26     	; 0x1456 <main+0x308>
    143c:	e9 2f       	mov	r30, r25
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	81 2f       	mov	r24, r17
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 97       	sbiw	r24, 0x02	; 2
    1446:	e8 17       	cp	r30, r24
    1448:	f9 07       	cpc	r31, r25
    144a:	2c f4       	brge	.+10     	; 0x1456 <main+0x308>
    144c:	e7 54       	subi	r30, 0x47	; 71
    144e:	ff 4f       	sbci	r31, 0xFF	; 255
    1450:	83 a5       	ldd	r24, Z+43	; 0x2b
    1452:	8d 33       	cpi	r24, 0x3D	; 61
    1454:	21 f0       	breq	.+8      	; 0x145e <main+0x310>
                                        strcpy(str,"e=no_cmd");
    1456:	c6 01       	movw	r24, r12
    1458:	68 e6       	ldi	r22, 0x68	; 104
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	1f c0       	rjmp	.+62     	; 0x149c <main+0x34e>
                                        goto ANSWER;
                                }
                                // supported commands are
                                // t=1 t=0 t=?
                                if (buf[UDP_DATA_P+cmd_pos]=='t'){
    145e:	82 a5       	ldd	r24, Z+42	; 0x2a
    1460:	84 37       	cpi	r24, 0x74	; 116
    1462:	a9 f4       	brne	.+42     	; 0x148e <main+0x340>
                                        cmdval=buf[UDP_DATA_P+cmd_pos+2];
    1464:	e4 a5       	ldd	r30, Z+44	; 0x2c
                                        if(cmdval=='1'){
    1466:	e1 33       	cpi	r30, 0x31	; 49
    1468:	11 f4       	brne	.+4      	; 0x146e <main+0x320>
                                                PORTC|= (1<<PORTC0);// transistor on
    146a:	a8 9a       	sbi	0x15, 0	; 21
    146c:	08 c0       	rjmp	.+16     	; 0x147e <main+0x330>
                                                strcpy(str,"t=1");
                                                goto ANSWER;
                                        }else if(cmdval=='0'){
    146e:	e0 33       	cpi	r30, 0x30	; 48
    1470:	11 f4       	brne	.+4      	; 0x1476 <main+0x328>
                                                PORTC &= ~(1<<PORTC0);// transistor off
    1472:	a8 98       	cbi	0x15, 0	; 21
    1474:	08 c0       	rjmp	.+16     	; 0x1486 <main+0x338>
                                                strcpy(str,"t=0");
                                                goto ANSWER;
                                        }else if(cmdval=='?'){
    1476:	ef 33       	cpi	r30, 0x3F	; 63
    1478:	51 f4       	brne	.+20     	; 0x148e <main+0x340>
                                                if (PORTC & (1<<PORTC0)){
    147a:	a8 9b       	sbis	0x15, 0	; 21
    147c:	04 c0       	rjmp	.+8      	; 0x1486 <main+0x338>
                                                        strcpy(str,"t=1");
    147e:	c6 01       	movw	r24, r12
    1480:	61 e7       	ldi	r22, 0x71	; 113
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	0b c0       	rjmp	.+22     	; 0x149c <main+0x34e>
                                                        goto ANSWER;
                                                }
                                                strcpy(str,"t=0");
    1486:	c6 01       	movw	r24, r12
    1488:	65 e7       	ldi	r22, 0x75	; 117
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	07 c0       	rjmp	.+14     	; 0x149c <main+0x34e>
                                                goto ANSWER;
                                        }
                                }
                                strcpy(str,"e=no_such_cmd");
    148e:	c6 01       	movw	r24, r12
    1490:	69 e7       	ldi	r22, 0x79	; 121
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	03 c0       	rjmp	.+6      	; 0x149c <main+0x34e>
                                goto ANSWER;
                        }
                        strcpy(str,"e=invalid_pw");
    1496:	c6 01       	movw	r24, r12
    1498:	67 e8       	ldi	r22, 0x87	; 135
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <strcpy>
ANSWER:
                        make_udp_reply_from_request(buf,str,strlen(str),MYUDPPORT);
    14a0:	f6 01       	movw	r30, r12
    14a2:	01 90       	ld	r0, Z+
    14a4:	00 20       	and	r0, r0
    14a6:	e9 f7       	brne	.-6      	; 0x14a2 <main+0x354>
    14a8:	31 97       	sbiw	r30, 0x01	; 1
    14aa:	ec 19       	sub	r30, r12
    14ac:	fd 09       	sbc	r31, r13
    14ae:	89 eb       	ldi	r24, 0xB9	; 185
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	b6 01       	movw	r22, r12
    14b4:	4e 2f       	mov	r20, r30
    14b6:	20 eb       	ldi	r18, 0xB0	; 176
    14b8:	34 e0       	ldi	r19, 0x04	; 4
    14ba:	0e 94 0a 06 	call	0xc14	; 0xc14 <make_udp_reply_from_request>
    14be:	a6 ce       	rjmp	.-692    	; 0x120c <main+0xbe>

000014c0 <strcpy>:
    14c0:	fb 01       	movw	r30, r22
    14c2:	dc 01       	movw	r26, r24
    14c4:	01 90       	ld	r0, Z+
    14c6:	0d 92       	st	X+, r0
    14c8:	00 20       	and	r0, r0
    14ca:	e1 f7       	brne	.-8      	; 0x14c4 <strcpy+0x4>
    14cc:	08 95       	ret

000014ce <strncmp>:
    14ce:	fb 01       	movw	r30, r22
    14d0:	dc 01       	movw	r26, r24
    14d2:	41 50       	subi	r20, 0x01	; 1
    14d4:	50 40       	sbci	r21, 0x00	; 0
    14d6:	30 f0       	brcs	.+12     	; 0x14e4 <strncmp+0x16>
    14d8:	8d 91       	ld	r24, X+
    14da:	01 90       	ld	r0, Z+
    14dc:	80 19       	sub	r24, r0
    14de:	19 f4       	brne	.+6      	; 0x14e6 <strncmp+0x18>
    14e0:	00 20       	and	r0, r0
    14e2:	b9 f7       	brne	.-18     	; 0x14d2 <strncmp+0x4>
    14e4:	88 1b       	sub	r24, r24
    14e6:	99 0b       	sbc	r25, r25
    14e8:	08 95       	ret

000014ea <itoa>:
    14ea:	fb 01       	movw	r30, r22
    14ec:	9f 01       	movw	r18, r30
    14ee:	e8 94       	clt
    14f0:	42 30       	cpi	r20, 0x02	; 2
    14f2:	c4 f0       	brlt	.+48     	; 0x1524 <itoa+0x3a>
    14f4:	45 32       	cpi	r20, 0x25	; 37
    14f6:	b4 f4       	brge	.+44     	; 0x1524 <itoa+0x3a>
    14f8:	4a 30       	cpi	r20, 0x0A	; 10
    14fa:	29 f4       	brne	.+10     	; 0x1506 <itoa+0x1c>
    14fc:	97 fb       	bst	r25, 7
    14fe:	1e f4       	brtc	.+6      	; 0x1506 <itoa+0x1c>
    1500:	90 95       	com	r25
    1502:	81 95       	neg	r24
    1504:	9f 4f       	sbci	r25, 0xFF	; 255
    1506:	64 2f       	mov	r22, r20
    1508:	77 27       	eor	r23, r23
    150a:	0e 94 a6 0a 	call	0x154c	; 0x154c <__udivmodhi4>
    150e:	80 5d       	subi	r24, 0xD0	; 208
    1510:	8a 33       	cpi	r24, 0x3A	; 58
    1512:	0c f0       	brlt	.+2      	; 0x1516 <itoa+0x2c>
    1514:	89 5d       	subi	r24, 0xD9	; 217
    1516:	81 93       	st	Z+, r24
    1518:	cb 01       	movw	r24, r22
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	a1 f7       	brne	.-24     	; 0x1506 <itoa+0x1c>
    151e:	16 f4       	brtc	.+4      	; 0x1524 <itoa+0x3a>
    1520:	5d e2       	ldi	r21, 0x2D	; 45
    1522:	51 93       	st	Z+, r21
    1524:	10 82       	st	Z, r1
    1526:	c9 01       	movw	r24, r18
    1528:	0c 94 96 0a 	jmp	0x152c	; 0x152c <strrev>

0000152c <strrev>:
    152c:	dc 01       	movw	r26, r24
    152e:	fc 01       	movw	r30, r24
    1530:	67 2f       	mov	r22, r23
    1532:	71 91       	ld	r23, Z+
    1534:	77 23       	and	r23, r23
    1536:	e1 f7       	brne	.-8      	; 0x1530 <strrev+0x4>
    1538:	32 97       	sbiw	r30, 0x02	; 2
    153a:	04 c0       	rjmp	.+8      	; 0x1544 <strrev+0x18>
    153c:	7c 91       	ld	r23, X
    153e:	6d 93       	st	X+, r22
    1540:	70 83       	st	Z, r23
    1542:	62 91       	ld	r22, -Z
    1544:	ae 17       	cp	r26, r30
    1546:	bf 07       	cpc	r27, r31
    1548:	c8 f3       	brcs	.-14     	; 0x153c <strrev+0x10>
    154a:	08 95       	ret

0000154c <__udivmodhi4>:
    154c:	aa 1b       	sub	r26, r26
    154e:	bb 1b       	sub	r27, r27
    1550:	51 e1       	ldi	r21, 0x11	; 17
    1552:	07 c0       	rjmp	.+14     	; 0x1562 <__udivmodhi4_ep>

00001554 <__udivmodhi4_loop>:
    1554:	aa 1f       	adc	r26, r26
    1556:	bb 1f       	adc	r27, r27
    1558:	a6 17       	cp	r26, r22
    155a:	b7 07       	cpc	r27, r23
    155c:	10 f0       	brcs	.+4      	; 0x1562 <__udivmodhi4_ep>
    155e:	a6 1b       	sub	r26, r22
    1560:	b7 0b       	sbc	r27, r23

00001562 <__udivmodhi4_ep>:
    1562:	88 1f       	adc	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	5a 95       	dec	r21
    1568:	a9 f7       	brne	.-22     	; 0x1554 <__udivmodhi4_loop>
    156a:	80 95       	com	r24
    156c:	90 95       	com	r25
    156e:	bc 01       	movw	r22, r24
    1570:	cd 01       	movw	r24, r26
    1572:	08 95       	ret

00001574 <_exit>:
    1574:	f8 94       	cli

00001576 <__stop_program>:
    1576:	ff cf       	rjmp	.-2      	; 0x1576 <__stop_program>
