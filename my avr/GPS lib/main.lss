
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000003c2  00000456  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000078  0080006c  0080006c  00000462  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000462  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000b7  00000000  00000000  00000482  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000943  00000000  00000000  00000539  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001fb  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d5  00000000  00000000  00001077  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000146  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000277  00000000  00000000  00001852  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001ac9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3e       	cpi	r26, 0xE4	; 228
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 41 01 	call	0x282	; 0x282 <main>
  8a:	0c 94 df 01 	jmp	0x3be	; 0x3be <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_INIT>:
/*
===================================================================
SET BAUD RATE
===================================================================
*/
	UBRRL=UBRRVAL;
  92:	8f ec       	ldi	r24, 0xCF	; 207
  94:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);
  96:	10 bc       	out	0x20, r1	; 32
/*===================================================================
SET DATAFRAME FORMAT : ASYNCHRONOUS MODE, NO PARITY, 1 START BIT, 8BIT
                       SIZE DATA	
===================================================================
*/
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(0<<UCSZ2)|(1<<UCSZ1)|(1<<UCSZ0);
  98:	86 e8       	ldi	r24, 0x86	; 134
  9a:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN);
  9c:	88 e1       	ldi	r24, 0x18	; 24
  9e:	8a b9       	out	0x0a, r24	; 10

	
}
  a0:	08 95       	ret

000000a2 <rswritechar>:
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <rswritechar>
	UDR=c; //SEND RECEIVED DATA BACK
  a6:	8c b9       	out	0x0c, r24	; 12
}
  a8:	08 95       	ret

000000aa <com_rx>:
/*
===================================================================
WAIT UNTIL DATA IS AVAILABLE
===================================================================
*/
	while(!(UCSRA&(1<<RXC)))
  aa:	5f 9b       	sbis	0x0b, 7	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <com_rx>
	{	}
	return UDR;
  ae:	8c b1       	in	r24, 0x0c	; 12
}
  b0:	08 95       	ret

000000b2 <rsstr>:
===================================================================
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
  b2:	fc 01       	movw	r30, r24
  b4:	04 c0       	rjmp	.+8      	; 0xbe <rsstr+0xc>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  b6:	5d 9b       	sbis	0x0b, 5	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <rsstr+0x4>
	UDR=c; //SEND RECEIVED DATA BACK
  ba:	8c b9       	out	0x0c, r24	; 12
void rsstr(char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
  bc:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
	while(*s)
  be:	80 81       	ld	r24, Z
  c0:	88 23       	and	r24, r24
  c2:	c9 f7       	brne	.-14     	; 0xb6 <rsstr+0x4>
	{
		rswritechar(*s);
		s++;
	}
}
  c4:	08 95       	ret

000000c6 <lcd_reset>:
#define LCD_RW      0x02
#define LCD_EN      0x04

void lcd_reset(void)
{
        lcd_port = 0xFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	88 bb       	out	0x18, r24	; 24
  ca:	88 ec       	ldi	r24, 0xC8	; 200
  cc:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ce:	20 e9       	ldi	r18, 0x90	; 144
  d0:	31 e0       	ldi	r19, 0x01	; 1
  d2:	f9 01       	movw	r30, r18
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_reset+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  da:	d9 f7       	brne	.-10     	; 0xd2 <lcd_reset+0xc>
        _delay_ms(20);
        lcd_port = 0x30+LCD_EN;
  dc:	94 e3       	ldi	r25, 0x34	; 52
  de:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  e0:	80 e3       	ldi	r24, 0x30	; 48
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	e0 e4       	ldi	r30, 0x40	; 64
  e6:	fc e9       	ldi	r31, 0x9C	; 156
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_reset+0x22>
        _delay_ms(10);
        lcd_port = 0x30+LCD_EN;
  ec:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  ee:	88 bb       	out	0x18, r24	; 24
  f0:	20 ea       	ldi	r18, 0xA0	; 160
  f2:	3f e0       	ldi	r19, 0x0F	; 15
  f4:	f9 01       	movw	r30, r18
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_reset+0x30>
        _delay_ms(1);
        lcd_port = 0x30+LCD_EN;
  fa:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  fc:	88 bb       	out	0x18, r24	; 24
  fe:	c9 01       	movw	r24, r18
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_reset+0x3a>
        _delay_ms(1);
        lcd_port = 0x20+LCD_EN;
 104:	84 e2       	ldi	r24, 0x24	; 36
 106:	88 bb       	out	0x18, r24	; 24
        lcd_port = 0x20;
 108:	80 e2       	ldi	r24, 0x20	; 32
 10a:	88 bb       	out	0x18, r24	; 24
 10c:	c9 01       	movw	r24, r18
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <lcd_reset+0x48>
        _delay_ms(1);
}
 112:	08 95       	ret

00000114 <lcd_cmd>:
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 114:	38 2f       	mov	r19, r24
 116:	30 7f       	andi	r19, 0xF0	; 240
 118:	23 2f       	mov	r18, r19
 11a:	24 60       	ori	r18, 0x04	; 4
 11c:	28 bb       	out	0x18, r18	; 24
        lcd_port = (cmd & 0xF0);
 11e:	38 bb       	out	0x18, r19	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	24 e0       	ldi	r18, 0x04	; 4
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	2a 95       	dec	r18
 12a:	e1 f7       	brne	.-8      	; 0x124 <lcd_cmd+0x10>
 12c:	28 2f       	mov	r18, r24
 12e:	24 60       	ori	r18, 0x04	; 4
 130:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 132:	88 bb       	out	0x18, r24	; 24
 134:	80 e4       	ldi	r24, 0x40	; 64
 136:	9f e1       	ldi	r25, 0x1F	; 31
 138:	fc 01       	movw	r30, r24
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_cmd+0x26>

      

        _delay_ms(2);
        _delay_ms(2);
}
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_cmd+0x2a>
 142:	08 95       	ret

00000144 <lcd_init>:

void lcd_init (void)
{       DDRB=0xFF;
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	87 bb       	out	0x17, r24	; 23
        PORTB=0x00; 
 148:	18 ba       	out	0x18, r1	; 24
        lcd_reset();         // Call LCD reset
 14a:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_reset>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 14e:	84 e2       	ldi	r24, 0x24	; 36
 150:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 152:	80 e2       	ldi	r24, 0x20	; 32
 154:	88 bb       	out	0x18, r24	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 156:	54 e8       	ldi	r21, 0x84	; 132
 158:	58 bb       	out	0x18, r21	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 15a:	40 e8       	ldi	r20, 0x80	; 128
 15c:	48 bb       	out	0x18, r20	; 24
 15e:	20 e4       	ldi	r18, 0x40	; 64
 160:	3f e1       	ldi	r19, 0x1F	; 31
 162:	c9 01       	movw	r24, r18
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_init+0x20>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 168:	c9 01       	movw	r24, r18
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_init+0x26>
 16e:	94 e0       	ldi	r25, 0x04	; 4
 170:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 172:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 174:	84 ec       	ldi	r24, 0xC4	; 196
 176:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 178:	80 ec       	ldi	r24, 0xC0	; 192
 17a:	88 bb       	out	0x18, r24	; 24
 17c:	f9 01       	movw	r30, r18
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_init+0x3a>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 182:	f9 01       	movw	r30, r18
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_init+0x40>
 188:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 18a:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 18c:	84 e6       	ldi	r24, 0x64	; 100
 18e:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 190:	80 e6       	ldi	r24, 0x60	; 96
 192:	88 bb       	out	0x18, r24	; 24
 194:	f9 01       	movw	r30, r18
 196:	31 97       	sbiw	r30, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_init+0x52>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 19a:	f9 01       	movw	r30, r18
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_init+0x58>
 1a0:	58 bb       	out	0x18, r21	; 24
        lcd_port = (cmd & 0xF0);
 1a2:	48 bb       	out	0x18, r20	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 1a4:	98 bb       	out	0x18, r25	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 1a6:	18 ba       	out	0x18, r1	; 24
 1a8:	c9 01       	movw	r24, r18
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x66>
        lcd_reset();         // Call LCD reset
        lcd_cmd(0x28);       // 4-bit mode - 2 line - 5x7 font.
        lcd_cmd(0x0C);       // Display on cursor - off .
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 }
 1ae:	c9 01       	movw	r24, r18
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_init+0x6c>
 1b4:	08 95       	ret

000001b6 <lcd_data>:


void lcd_data (unsigned char dat)
{
        lcd_port = ((dat & 0xF0)|LCD_EN|LCD_RS);
 1b6:	98 2f       	mov	r25, r24
 1b8:	90 7f       	andi	r25, 0xF0	; 240
 1ba:	29 2f       	mov	r18, r25
 1bc:	25 60       	ori	r18, 0x05	; 5
 1be:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((dat & 0xF0)|LCD_RS);
 1c0:	91 60       	ori	r25, 0x01	; 1
 1c2:	98 bb       	out	0x18, r25	; 24
		
		lcd_port = (((dat << 4) & 0xF0)|LCD_EN|LCD_RS);
 1c4:	82 95       	swap	r24
 1c6:	80 7f       	andi	r24, 0xF0	; 240
 1c8:	98 2f       	mov	r25, r24
 1ca:	95 60       	ori	r25, 0x05	; 5
 1cc:	98 bb       	out	0x18, r25	; 24
        lcd_port = (((dat << 4) & 0xF0)|LCD_RS);
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	88 bb       	out	0x18, r24	; 24
 1d2:	80 e4       	ldi	r24, 0x40	; 64
 1d4:	9f e1       	ldi	r25, 0x1F	; 31
 1d6:	fc 01       	movw	r30, r24
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_data+0x22>
       
      

       _delay_ms(2);
       _delay_ms(2);
}
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_data+0x26>
 1e0:	08 95       	ret

000001e2 <lcd_puts>:
void lcd_puts(char *aaa)
{
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ec 01       	movw	r28, r24
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <lcd_puts+0xc>
unsigned int i;
for(i=0;aaa[i]!=0;i++)
lcd_data(aaa[i]);
 1ea:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_data>
       _delay_ms(2);
}
void lcd_puts(char *aaa)
{
unsigned int i;
for(i=0;aaa[i]!=0;i++)
 1ee:	89 91       	ld	r24, Y+
 1f0:	88 23       	and	r24, r24
 1f2:	d9 f7       	brne	.-10     	; 0x1ea <lcd_puts+0x8>
lcd_data(aaa[i]);

}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <itoa>:
void itoa(uint16_t num)
{
 1fa:	cf 92       	push	r12
 1fc:	df 92       	push	r13
 1fe:	ef 92       	push	r14
 200:	ff 92       	push	r15
 202:	0f 93       	push	r16
 204:	1f 93       	push	r17
 206:	7c 01       	movw	r14, r24
 unsigned char a,b,c,d;
 a=num%10;
 num=num/10;
 208:	6a e0       	ldi	r22, 0x0A	; 10
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	0e 94 cb 01 	call	0x396	; 0x396 <__udivmodhi4>
 210:	d6 2e       	mov	r13, r22
 212:	c7 2e       	mov	r12, r23
 b=num%10;
 num=num/10;
 214:	86 2f       	mov	r24, r22
 216:	97 2f       	mov	r25, r23
 218:	6a e0       	ldi	r22, 0x0A	; 10
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	0e 94 cb 01 	call	0x396	; 0x396 <__udivmodhi4>
 220:	16 2f       	mov	r17, r22
 222:	07 2f       	mov	r16, r23
 c=num%10;
 num=num/10;
 d=num%10;
 lcd_data(0x30+d); 
 224:	86 2f       	mov	r24, r22
 226:	97 2f       	mov	r25, r23
 228:	6a e0       	ldi	r22, 0x0A	; 10
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	0e 94 cb 01 	call	0x396	; 0x396 <__udivmodhi4>
 230:	cb 01       	movw	r24, r22
 232:	6a e0       	ldi	r22, 0x0A	; 10
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	0e 94 cb 01 	call	0x396	; 0x396 <__udivmodhi4>
 23a:	80 5d       	subi	r24, 0xD0	; 208
 23c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_data>
 lcd_data(0x30+c); 
 240:	81 2f       	mov	r24, r17
 242:	90 2f       	mov	r25, r16
 244:	6a e0       	ldi	r22, 0x0A	; 10
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	0e 94 cb 01 	call	0x396	; 0x396 <__udivmodhi4>
 24c:	80 5d       	subi	r24, 0xD0	; 208
 24e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_data>
 lcd_data(0x30+b); 
 252:	8d 2d       	mov	r24, r13
 254:	9c 2d       	mov	r25, r12
 256:	6a e0       	ldi	r22, 0x0A	; 10
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	0e 94 cb 01 	call	0x396	; 0x396 <__udivmodhi4>
 25e:	80 5d       	subi	r24, 0xD0	; 208
 260:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_data>
 lcd_data(0x30+a); 
 264:	c7 01       	movw	r24, r14
 266:	6a e0       	ldi	r22, 0x0A	; 10
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	0e 94 cb 01 	call	0x396	; 0x396 <__udivmodhi4>
 26e:	80 5d       	subi	r24, 0xD0	; 208
 270:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_data>
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	df 90       	pop	r13
 27e:	cf 90       	pop	r12
 280:	08 95       	ret

00000282 <main>:
#include<compat/deprecated.h>
volatile unsigned char stringRead[100]; 		/* Buffer collects chars read from GPS */
volatile unsigned char timeString[20]; 		/* Buffer collects chars read from GPS */

int main(void)
{   unsigned char charRead;  
 282:	ff 92       	push	r15
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
/*
===================================================================
SET BAUD RATE
===================================================================
*/
	UBRRL=UBRRVAL;
 28c:	8f ec       	ldi	r24, 0xCF	; 207
 28e:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);
 290:	10 bc       	out	0x20, r1	; 32
/*===================================================================
SET DATAFRAME FORMAT : ASYNCHRONOUS MODE, NO PARITY, 1 START BIT, 8BIT
                       SIZE DATA	
===================================================================
*/
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(0<<UCSZ2)|(1<<UCSZ1)|(1<<UCSZ0);
 292:	86 e8       	ldi	r24, 0x86	; 134
 294:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN);
 296:	88 e1       	ldi	r24, 0x18	; 24
 298:	8a b9       	out	0x0a, r24	; 10
	unsigned char  *pChar;
    unsigned char   i,j, k;	
	USART_INIT();
	lcd_init();//initialise the lcd
 29a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_init>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 29e:	84 e0       	ldi	r24, 0x04	; 4
 2a0:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 2a2:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 2a4:	84 e1       	ldi	r24, 0x14	; 20
 2a6:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 2a8:	80 e1       	ldi	r24, 0x10	; 16
 2aa:	88 bb       	out	0x18, r24	; 24
 2ac:	80 e4       	ldi	r24, 0x40	; 64
 2ae:	9f e1       	ldi	r25, 0x1F	; 31
 2b0:	fc 01       	movw	r30, r24
 2b2:	31 97       	sbiw	r30, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <main+0x30>
   lcd_cmd(0x01);//clear screen
   lcd_puts("GPS ENGINE");
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <main+0x34>
 2ba:	80 e6       	ldi	r24, 0x60	; 96
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
 2c2:	80 e2       	ldi	r24, 0x20	; 32
 2c4:	9e e4       	ldi	r25, 0x4E	; 78
 2c6:	20 e9       	ldi	r18, 0x90	; 144
 2c8:	31 e0       	ldi	r19, 0x01	; 1
 2ca:	f9 01       	movw	r30, r18
 2cc:	31 97       	sbiw	r30, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <main+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d2:	d9 f7       	brne	.-10     	; 0x2ca <main+0x48>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 2d4:	84 e0       	ldi	r24, 0x04	; 4
 2d6:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 2d8:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 2da:	84 e1       	ldi	r24, 0x14	; 20
 2dc:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 2de:	80 e1       	ldi	r24, 0x10	; 16
 2e0:	88 bb       	out	0x18, r24	; 24
 2e2:	80 e4       	ldi	r24, 0x40	; 64
 2e4:	9f e1       	ldi	r25, 0x1F	; 31
 2e6:	fc 01       	movw	r30, r24
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <main+0x66>
   _delay_ms(2000);
   lcd_cmd(0x01);
    DDRA=0xFF;
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <main+0x6a>
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	8a bb       	out	0x1a, r24	; 26
	DDRD=0x00;
 2f4:	11 ba       	out	0x11, r1	; 17
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 2f6:	34 ec       	ldi	r19, 0xC4	; 196
 2f8:	f3 2e       	mov	r15, r19
        lcd_port = (cmd & 0xF0);
 2fa:	00 ec       	ldi	r16, 0xC0	; 192
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 2fc:	14 e0       	ldi	r17, 0x04	; 4
 2fe:	c0 e4       	ldi	r28, 0x40	; 64
 300:	df e1       	ldi	r29, 0x1F	; 31
/*
===================================================================
WAIT UNTIL DATA IS AVAILABLE
===================================================================
*/
	while(!(UCSRA&(1<<RXC)))
 302:	5f 9b       	sbis	0x0b, 7	; 11
 304:	fe cf       	rjmp	.-4      	; 0x302 <main+0x80>
	{	}
	return UDR;
 306:	8c b1       	in	r24, 0x0c	; 12
	while(1)
	{
	charRead=com_rx();
	if(charRead == '$') 
 308:	84 32       	cpi	r24, 0x24	; 36
 30a:	d9 f7       	brne	.-10     	; 0x302 <main+0x80>
	{  
   /* GPS messages start with $ char */
	  i = 0;
	  stringRead[i] = charRead;
 30c:	80 93 80 00 	sts	0x0080, r24
 310:	90 e0       	ldi	r25, 0x00	; 0
/*
===================================================================
WAIT UNTIL DATA IS AVAILABLE
===================================================================
*/
	while(!(UCSRA&(1<<RXC)))
 312:	5f 9b       	sbis	0x0b, 7	; 11
 314:	fe cf       	rjmp	.-4      	; 0x312 <main+0x90>
	{	}
	return UDR;
 316:	8c b1       	in	r24, 0x0c	; 12
	  do 
	  {
	     charRead = com_rx();
	     i++;
 318:	9f 5f       	subi	r25, 0xFF	; 255
		stringRead[i] = charRead;
 31a:	a9 2f       	mov	r26, r25
 31c:	b0 e0       	ldi	r27, 0x00	; 0
 31e:	fd 01       	movw	r30, r26
 320:	e0 58       	subi	r30, 0x80	; 128
 322:	ff 4f       	sbci	r31, 0xFF	; 255
 324:	80 83       	st	Z, r24
	    
	  } 
	  while(charRead != 0x0d);
 326:	8d 30       	cpi	r24, 0x0D	; 13
 328:	a1 f7       	brne	.-24     	; 0x312 <main+0x90>
     /* By this point, a complete GPS string has been read so save it to file */
	  /* Append the null terminator to the string read */
	  stringRead[i+1] = '\0';
 32a:	af 57       	subi	r26, 0x7F	; 127
 32c:	bf 4f       	sbci	r27, 0xFF	; 255
 32e:	1c 92       	st	X, r1
      if(stringRead[3] == 'G' && stringRead[4] == 'G' && stringRead[5] == 'A')
 330:	80 91 83 00 	lds	r24, 0x0083
 334:	87 34       	cpi	r24, 0x47	; 71
 336:	29 f7       	brne	.-54     	; 0x302 <main+0x80>
 338:	80 91 84 00 	lds	r24, 0x0084
 33c:	87 34       	cpi	r24, 0x47	; 71
 33e:	09 f7       	brne	.-62     	; 0x302 <main+0x80>
 340:	80 91 85 00 	lds	r24, 0x0085
 344:	81 34       	cpi	r24, 0x41	; 65
 346:	e9 f6       	brne	.-70     	; 0x302 <main+0x80>
 {  PORTA=(PORTA^0x10)&0x10;
 348:	8b b3       	in	r24, 0x1b	; 27
 34a:	80 95       	com	r24
 34c:	80 71       	andi	r24, 0x10	; 16
 34e:	8b bb       	out	0x1b, r24	; 27
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	04 c0       	rjmp	.+8      	; 0x35c <main+0xda>
	      /* Get UTC time */
	      j = 7;  /* start of time field */
	      k = 0;
	      while(*(pChar+j) != ',') 
		  {
		   timeString[k] = *(pChar+j);
 354:	a4 59       	subi	r26, 0x94	; 148
 356:	bf 4f       	sbci	r27, 0xFF	; 255
 358:	ec 93       	st	X, r30
		   j++;
		   k++;
 35a:	8f 5f       	subi	r24, 0xFF	; 255
	      */
          pChar = stringRead;
	      /* Get UTC time */
	      j = 7;  /* start of time field */
	      k = 0;
	      while(*(pChar+j) != ',') 
 35c:	89 5f       	subi	r24, 0xF9	; 249
 35e:	e8 2f       	mov	r30, r24
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	87 50       	subi	r24, 0x07	; 7
 364:	e0 58       	subi	r30, 0x80	; 128
 366:	ff 4f       	sbci	r31, 0xFF	; 255
 368:	e0 81       	ld	r30, Z
 36a:	a8 2f       	mov	r26, r24
 36c:	b0 e0       	ldi	r27, 0x00	; 0
 36e:	ec 32       	cpi	r30, 0x2C	; 44
 370:	89 f7       	brne	.-30     	; 0x354 <main+0xd2>
		  {
		   timeString[k] = *(pChar+j);
		   j++;
		   k++;
	      }
	      timeString[k] = '\0';
 372:	a4 59       	subi	r26, 0x94	; 148
 374:	bf 4f       	sbci	r27, 0xFF	; 255
 376:	1c 92       	st	X, r1
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 378:	f8 ba       	out	0x18, r15	; 24
        lcd_port = (cmd & 0xF0);
 37a:	08 bb       	out	0x18, r16	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 37c:	18 bb       	out	0x18, r17	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 37e:	18 ba       	out	0x18, r1	; 24
 380:	ce 01       	movw	r24, r28
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <main+0x100>
		  lcd_cmd(0xc0);
          lcd_puts(timeString);
 386:	ce 01       	movw	r24, r28
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <main+0x106>
 38c:	8c e6       	ldi	r24, 0x6C	; 108
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
 394:	b6 cf       	rjmp	.-148    	; 0x302 <main+0x80>

00000396 <__udivmodhi4>:
 396:	aa 1b       	sub	r26, r26
 398:	bb 1b       	sub	r27, r27
 39a:	51 e1       	ldi	r21, 0x11	; 17
 39c:	07 c0       	rjmp	.+14     	; 0x3ac <__udivmodhi4_ep>

0000039e <__udivmodhi4_loop>:
 39e:	aa 1f       	adc	r26, r26
 3a0:	bb 1f       	adc	r27, r27
 3a2:	a6 17       	cp	r26, r22
 3a4:	b7 07       	cpc	r27, r23
 3a6:	10 f0       	brcs	.+4      	; 0x3ac <__udivmodhi4_ep>
 3a8:	a6 1b       	sub	r26, r22
 3aa:	b7 0b       	sbc	r27, r23

000003ac <__udivmodhi4_ep>:
 3ac:	88 1f       	adc	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	5a 95       	dec	r21
 3b2:	a9 f7       	brne	.-22     	; 0x39e <__udivmodhi4_loop>
 3b4:	80 95       	com	r24
 3b6:	90 95       	com	r25
 3b8:	bc 01       	movw	r22, r24
 3ba:	cd 01       	movw	r24, r26
 3bc:	08 95       	ret

000003be <_exit>:
 3be:	f8 94       	cli

000003c0 <__stop_program>:
 3c0:	ff cf       	rjmp	.-2      	; 0x3c0 <__stop_program>
