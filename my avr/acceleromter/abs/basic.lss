
basic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000023  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000f0  00000000  00000000  00000161  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c2  00000000  00000000  00000251  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000130  00000000  00000000  00000313  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000099  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000053  00000000  00000000  0000050d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <adc>:
#include<avr/io.h>
#include<util/delay.h>
#include<compat/deprecated.h>
unsigned int adc(unsigned char channel)
{  unsigned int val;
   ADMUX=0x40+channel;
  6c:	80 5c       	subi	r24, 0xC0	; 192
  6e:	87 b9       	out	0x07, r24	; 7
   ADCSRA=(1<<ADEN);
  70:	80 e8       	ldi	r24, 0x80	; 128
  72:	86 b9       	out	0x06, r24	; 6
   ADCSRA|=(1<<ADSC);
  74:	36 9a       	sbi	0x06, 6	; 6
    ADCSRA|=0x07;
  76:	86 b1       	in	r24, 0x06	; 6
  78:	87 60       	ori	r24, 0x07	; 7
  7a:	86 b9       	out	0x06, r24	; 6
   while(bit_is_clear(ADCSRA,ADIF));
  7c:	34 9b       	sbis	0x06, 4	; 6
  7e:	fe cf       	rjmp	.-4      	; 0x7c <adc+0x10>
   val=ADCW; 
  80:	24 b1       	in	r18, 0x04	; 4
  82:	35 b1       	in	r19, 0x05	; 5
   return val;
}
  84:	c9 01       	movw	r24, r18
  86:	08 95       	ret

00000088 <main>:

int main(void)
{unsigned int t;
DDRA=0xF0;
  88:	80 ef       	ldi	r24, 0xF0	; 240
  8a:	8a bb       	out	0x1a, r24	; 26
DDRB=0xFF;
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	87 bb       	out	0x17, r24	; 23
PORTB=0xFF;
  90:	88 bb       	out	0x18, r24	; 24
DDRC=0xFF; 
  92:	84 bb       	out	0x14, r24	; 20
PORTC=0x00;
  94:	15 ba       	out	0x15, r1	; 21
#include<avr/io.h>
#include<util/delay.h>
#include<compat/deprecated.h>
unsigned int adc(unsigned char channel)
{  unsigned int val;
   ADMUX=0x40+channel;
  96:	40 e4       	ldi	r20, 0x40	; 64
   ADCSRA=(1<<ADEN);
  98:	30 e8       	ldi	r19, 0x80	; 128
PORTC=0x00;
while(1)
 {  
   t=adc(0);
   if(t<200)
   {PORTC=0x55;
  9a:	25 e5       	ldi	r18, 0x55	; 85
#include<avr/io.h>
#include<util/delay.h>
#include<compat/deprecated.h>
unsigned int adc(unsigned char channel)
{  unsigned int val;
   ADMUX=0x40+channel;
  9c:	47 b9       	out	0x07, r20	; 7
   ADCSRA=(1<<ADEN);
  9e:	36 b9       	out	0x06, r19	; 6
   ADCSRA|=(1<<ADSC);
  a0:	36 9a       	sbi	0x06, 6	; 6
    ADCSRA|=0x07;
  a2:	86 b1       	in	r24, 0x06	; 6
  a4:	87 60       	ori	r24, 0x07	; 7
  a6:	86 b9       	out	0x06, r24	; 6
   while(bit_is_clear(ADCSRA,ADIF));
  a8:	34 9b       	sbis	0x06, 4	; 6
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <main+0x20>
   val=ADCW; 
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	95 b1       	in	r25, 0x05	; 5
DDRC=0xFF; 
PORTC=0x00;
while(1)
 {  
   t=adc(0);
   if(t<200)
  b0:	88 3c       	cpi	r24, 0xC8	; 200
  b2:	91 05       	cpc	r25, r1
  b4:	20 f4       	brcc	.+8      	; 0xbe <main+0x36>
   {PORTC=0x55;
  b6:	25 bb       	out	0x15, r18	; 21
    sbi(PORTA,4);  sbi(PORTA,6); 
  b8:	dc 9a       	sbi	0x1b, 4	; 27
  ba:	de 9a       	sbi	0x1b, 6	; 27
  bc:	ef cf       	rjmp	.-34     	; 0x9c <main+0x14>
   }
   else
   {
   PORTC=0x00;
  be:	15 ba       	out	0x15, r1	; 21
     cbi(PORTA,4);  cbi(PORTA,6); 
  c0:	dc 98       	cbi	0x1b, 4	; 27
  c2:	de 98       	cbi	0x1b, 6	; 27
  c4:	eb cf       	rjmp	.-42     	; 0x9c <main+0x14>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
