
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  0000020e  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000038  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000022f  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000185  00000000  00000000  00000495  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001bb  00000000  00000000  0000061a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000007d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011a  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000048  00000000  00000000  00000932  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000097a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 94 00 	call	0x128	; 0x128 <main>
  74:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_int0>:
static volatile rc5data data;

void init_int0(void)
{
	// Interrupt on INT0 pin going low
	MCUCR = (1 << ISC01);
  7c:	82 e0       	ldi	r24, 0x02	; 2
  7e:	85 bf       	out	0x35, r24	; 53

	// Turn on INT0!
	GICR |= (1 << INT0);
  80:	8b b7       	in	r24, 0x3b	; 59
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8b bf       	out	0x3b, r24	; 59
}
  86:	08 95       	ret

00000088 <__vector_1>:

ISR (INT0_vect)
{	
  88:	1f 92       	push	r1
  8a:	0f 92       	push	r0
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	0f 92       	push	r0
  90:	11 24       	eor	r1, r1
  92:	2f 93       	push	r18
  94:	3f 93       	push	r19
  96:	4f 93       	push	r20
  98:	5f 93       	push	r21
  9a:	6f 93       	push	r22
  9c:	7f 93       	push	r23
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	int pos = 0;

	if (!flag) {
  a2:	80 91 60 00 	lds	r24, 0x0060
  a6:	90 91 61 00 	lds	r25, 0x0061
  aa:	89 2b       	or	r24, r25
  ac:	81 f5       	brne	.+96     	; 0x10e <__vector_1+0x86>
		data.raw = 0;
  ae:	10 92 63 00 	sts	0x0063, r1
  b2:	10 92 62 00 	sts	0x0062, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	80 e2       	ldi	r24, 0x20	; 32
  b8:	93 e0       	ldi	r25, 0x03	; 3
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <__vector_1+0x32>
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	50 e0       	ldi	r21, 0x00	; 0

		// triggers on falling edge of start bit 1.
		_delay_ms(0.2);

		while (pos < 14) {
			data.raw = (data.raw << 1) | ((~PIND & 0x04) >> 2);
  c2:	60 e2       	ldi	r22, 0x20	; 32
  c4:	7c e1       	ldi	r23, 0x1C	; 28
  c6:	20 91 62 00 	lds	r18, 0x0062
  ca:	30 91 63 00 	lds	r19, 0x0063
  ce:	80 b3       	in	r24, 0x10	; 16
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	80 95       	com	r24
  d4:	90 95       	com	r25
  d6:	84 70       	andi	r24, 0x04	; 4
  d8:	90 70       	andi	r25, 0x00	; 0
  da:	95 95       	asr	r25
  dc:	87 95       	ror	r24
  de:	95 95       	asr	r25
  e0:	87 95       	ror	r24
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	82 2b       	or	r24, r18
  e8:	93 2b       	or	r25, r19
  ea:	90 93 63 00 	sts	0x0063, r25
  ee:	80 93 62 00 	sts	0x0062, r24
  f2:	cb 01       	movw	r24, r22
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <__vector_1+0x6c>
			_delay_ms(1.8);
			pos++;
  f8:	4f 5f       	subi	r20, 0xFF	; 255
  fa:	5f 4f       	sbci	r21, 0xFF	; 255
		data.raw = 0;

		// triggers on falling edge of start bit 1.
		_delay_ms(0.2);

		while (pos < 14) {
  fc:	4e 30       	cpi	r20, 0x0E	; 14
  fe:	51 05       	cpc	r21, r1
 100:	11 f7       	brne	.-60     	; 0xc6 <__vector_1+0x3e>
			data.raw = (data.raw << 1) | ((~PIND & 0x04) >> 2);
			_delay_ms(1.8);
			pos++;
		}

		flag = 1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	90 93 61 00 	sts	0x0061, r25
 10a:	80 93 60 00 	sts	0x0060, r24
	}
}
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	7f 91       	pop	r23
 114:	6f 91       	pop	r22
 116:	5f 91       	pop	r21
 118:	4f 91       	pop	r20
 11a:	3f 91       	pop	r19
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <main>:

int main()
{   unsigned char bittu;
	DDRA=0XFF;
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	8a bb       	out	0x1a, r24	; 26
	PORTA=0X00;
 12c:	1b ba       	out	0x1b, r1	; 27
static volatile rc5data data;

void init_int0(void)
{
	// Interrupt on INT0 pin going low
	MCUCR = (1 << ISC01);
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	85 bf       	out	0x35, r24	; 53

	// Turn on INT0!
	GICR |= (1 << INT0);
 132:	8b b7       	in	r24, 0x3b	; 59
 134:	80 64       	ori	r24, 0x40	; 64
 136:	8b bf       	out	0x3b, r24	; 59
	DDRA=0XFF;
	PORTA=0X00;
	
	
	init_int0();
	sei(); 		// Enable interrupts
 138:	78 94       	sei

	while(1) {	

		while(!flag);
 13a:	80 91 60 00 	lds	r24, 0x0060
 13e:	90 91 61 00 	lds	r25, 0x0061
 142:	89 2b       	or	r24, r25
 144:	d1 f3       	breq	.-12     	; 0x13a <main+0x12>
		if(data.addr==0x00)
 146:	90 91 62 00 	lds	r25, 0x0062
 14a:	92 95       	swap	r25
 14c:	96 95       	lsr	r25
 14e:	96 95       	lsr	r25
 150:	93 70       	andi	r25, 0x03	; 3
 152:	80 91 63 00 	lds	r24, 0x0063
 156:	87 70       	andi	r24, 0x07	; 7
 158:	88 0f       	add	r24, r24
 15a:	88 0f       	add	r24, r24
 15c:	89 2b       	or	r24, r25
 15e:	b1 f4       	brne	.+44     	; 0x18c <main+0x64>
		{
		 if((data.cmd==0x01) &&(bittu!=data.toggle))
 160:	80 91 62 00 	lds	r24, 0x0062
 164:	8f 73       	andi	r24, 0x3F	; 63
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	59 f4       	brne	.+22     	; 0x180 <main+0x58>
 16a:	80 91 63 00 	lds	r24, 0x0063
 16e:	86 95       	lsr	r24
 170:	86 95       	lsr	r24
 172:	86 95       	lsr	r24
 174:	81 70       	andi	r24, 0x01	; 1
 176:	28 17       	cp	r18, r24
 178:	19 f0       	breq	.+6      	; 0x180 <main+0x58>
		 {
		  PORTA=~PORTA;
 17a:	8b b3       	in	r24, 0x1b	; 27
 17c:	80 95       	com	r24
 17e:	8b bb       	out	0x1b, r24	; 27
		 }
		
		bittu=data.toggle;
 180:	20 91 63 00 	lds	r18, 0x0063
 184:	26 95       	lsr	r18
 186:	26 95       	lsr	r18
 188:	26 95       	lsr	r18
 18a:	21 70       	andi	r18, 0x01	; 1
	
		// Do with data from the remote control here what you like.
		}
		
		flag = 0;
 18c:	10 92 61 00 	sts	0x0061, r1
 190:	10 92 60 00 	sts	0x0060, r1
 194:	d2 cf       	rjmp	.-92     	; 0x13a <main+0x12>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
