
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000007e6  0000085a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000882  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005b  00000000  00000000  000008a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000313  00000000  00000000  000008fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ce  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000358  00000000  00000000  00000dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000010f  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ab  00000000  00000000  000012b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  7a:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <USART_INIT>:
/*
===================================================================
SET BAUD RATE
===================================================================
*/
	UBRRL=UBRRVAL;
  82:	87 e6       	ldi	r24, 0x67	; 103
  84:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);
  86:	10 bc       	out	0x20, r1	; 32
/*===================================================================
SET DATAFRAME FORMAT : ASYNCHRONOUS MODE, NO PARITY, 1 START BIT, 8BIT
                       SIZE DATA	
===================================================================
*/
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
  88:	86 e8       	ldi	r24, 0x86	; 134
  8a:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN);
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	8a b9       	out	0x0a, r24	; 10
}
  90:	08 95       	ret

00000092 <rswritechar>:
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <rswritechar>
	UDR=c; //SEND RECEIVED DATA BACK
  96:	8c b9       	out	0x0c, r24	; 12
}
  98:	08 95       	ret

0000009a <rsreadchar>:
/*
===================================================================
WAIT UNTIL DATA IS AVAILABLE
===================================================================
*/
	while(!(UCSRA&(1<<RXC)))
  9a:	5f 9b       	sbis	0x0b, 7	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <rsreadchar>
	{	}
	return UDR;
  9e:	8c b1       	in	r24, 0x0c	; 12
}
  a0:	08 95       	ret

000000a2 <rsstr>:
===================================================================
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
  a2:	fc 01       	movw	r30, r24
  a4:	04 c0       	rjmp	.+8      	; 0xae <rsstr+0xc>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <rsstr+0x4>
	UDR=c; //SEND RECEIVED DATA BACK
  aa:	8c b9       	out	0x0c, r24	; 12
void rsstr(char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
  ac:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
	while(*s)
  ae:	80 81       	ld	r24, Z
  b0:	88 23       	and	r24, r24
  b2:	c9 f7       	brne	.-14     	; 0xa6 <rsstr+0x4>
	{
		rswritechar(*s);
		s++;
	}
  b4:	08 95       	ret

000000b6 <adc>:
#include<stdio.h>
#include<compat/deprecated.h>
#include "uart.h"
unsigned int adc(unsigned char channel)
{  unsigned int val;
   ADMUX=0x40+channel;
  b6:	80 5c       	subi	r24, 0xC0	; 192
  b8:	87 b9       	out	0x07, r24	; 7
   ADCSRA=(1<<ADEN);
  ba:	80 e8       	ldi	r24, 0x80	; 128
  bc:	86 b9       	out	0x06, r24	; 6
   ADCSRA|=(1<<ADSC);
  be:	36 9a       	sbi	0x06, 6	; 6
    ADCSRA|=0x07;
  c0:	86 b1       	in	r24, 0x06	; 6
  c2:	87 60       	ori	r24, 0x07	; 7
  c4:	86 b9       	out	0x06, r24	; 6
   while(bit_is_clear(ADCSRA,ADIF));
  c6:	34 9b       	sbis	0x06, 4	; 6
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <adc+0x10>
   val=ADCW; 
  ca:	44 b1       	in	r20, 0x04	; 4
  cc:	55 b1       	in	r21, 0x05	; 5
  ce:	28 ee       	ldi	r18, 0xE8	; 232
  d0:	33 e0       	ldi	r19, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d2:	80 e9       	ldi	r24, 0x90	; 144
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	fc 01       	movw	r30, r24
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <adc+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e0:	d1 f7       	brne	.-12     	; 0xd6 <adc+0x20>
   _delay_ms(100);
   return val;
}
  e2:	ca 01       	movw	r24, r20
  e4:	08 95       	ret

000000e6 <main>:

int main(void)
{unsigned char buf[15];
  e6:	8f 92       	push	r8
  e8:	9f 92       	push	r9
  ea:	af 92       	push	r10
  ec:	bf 92       	push	r11
  ee:	cf 92       	push	r12
  f0:	df 92       	push	r13
  f2:	ef 92       	push	r14
  f4:	ff 92       	push	r15
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	df 93       	push	r29
  fc:	cf 93       	push	r28
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	2f 97       	sbiw	r28, 0x0f	; 15
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
 unsigned int val,temp,light;
DDRA=0xF0;
 10e:	80 ef       	ldi	r24, 0xF0	; 240
 110:	8a bb       	out	0x1a, r24	; 26
DDRB=0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	87 bb       	out	0x17, r24	; 23
PORTB=0xFF;
 116:	88 bb       	out	0x18, r24	; 24
PORTA=0x00;
 118:	1b ba       	out	0x1b, r1	; 27
/*
===================================================================
SET BAUD RATE
===================================================================
*/
	UBRRL=UBRRVAL;
 11a:	87 e6       	ldi	r24, 0x67	; 103
 11c:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);
 11e:	10 bc       	out	0x20, r1	; 32
/*===================================================================
SET DATAFRAME FORMAT : ASYNCHRONOUS MODE, NO PARITY, 1 START BIT, 8BIT
                       SIZE DATA	
===================================================================
*/
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
 120:	86 e8       	ldi	r24, 0x86	; 134
 122:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN);
 124:	88 e1       	ldi	r24, 0x18	; 24
 126:	8a b9       	out	0x0a, r24	; 10
 128:	e0 e6       	ldi	r30, 0x60	; 96
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	04 c0       	rjmp	.+8      	; 0x136 <main+0x50>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 12e:	5d 9b       	sbis	0x0b, 5	; 11
 130:	fe cf       	rjmp	.-4      	; 0x12e <main+0x48>
	UDR=c; //SEND RECEIVED DATA BACK
 132:	8c b9       	out	0x0c, r24	; 12
void rsstr(char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
 134:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
	while(*s)
 136:	80 81       	ld	r24, Z
 138:	88 23       	and	r24, r24
 13a:	c9 f7       	brne	.-14     	; 0x12e <main+0x48>
USART_INIT();
rsstr("DATA acquisition\r\n");
 while(1)
 { light=adc(0);
   temp=adc(1); 
   sprintf(buf,"Light=%d\r\n",light);
 13c:	6e 01       	movw	r12, r28
 13e:	08 94       	sec
 140:	c1 1c       	adc	r12, r1
 142:	d1 1c       	adc	r13, r1
 144:	93 e7       	ldi	r25, 0x73	; 115
 146:	89 2e       	mov	r8, r25
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	99 2e       	mov	r9, r25
   rsstr(buf);
   sprintf(buf,"TEMP=%d\r\n",temp);
 14c:	8e e7       	ldi	r24, 0x7E	; 126
 14e:	a8 2e       	mov	r10, r24
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	b8 2e       	mov	r11, r24
PORTB=0xFF;
PORTA=0x00;
USART_INIT();
rsstr("DATA acquisition\r\n");
 while(1)
 { light=adc(0);
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 5b 00 	call	0xb6	; 0xb6 <adc>
 15a:	8c 01       	movw	r16, r24
   temp=adc(1); 
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 5b 00 	call	0xb6	; 0xb6 <adc>
 162:	7c 01       	movw	r14, r24
   sprintf(buf,"Light=%d\r\n",light);
 164:	00 d0       	rcall	.+0      	; 0x166 <main+0x80>
 166:	00 d0       	rcall	.+0      	; 0x168 <main+0x82>
 168:	00 d0       	rcall	.+0      	; 0x16a <main+0x84>
 16a:	ed b7       	in	r30, 0x3d	; 61
 16c:	fe b7       	in	r31, 0x3e	; 62
 16e:	31 96       	adiw	r30, 0x01	; 1
 170:	ad b7       	in	r26, 0x3d	; 61
 172:	be b7       	in	r27, 0x3e	; 62
 174:	12 96       	adiw	r26, 0x02	; 2
 176:	dc 92       	st	X, r13
 178:	ce 92       	st	-X, r12
 17a:	11 97       	sbiw	r26, 0x01	; 1
 17c:	93 82       	std	Z+3, r9	; 0x03
 17e:	82 82       	std	Z+2, r8	; 0x02
 180:	15 83       	std	Z+5, r17	; 0x05
 182:	04 83       	std	Z+4, r16	; 0x04
 184:	0e 94 19 01 	call	0x232	; 0x232 <sprintf>
 188:	f6 01       	movw	r30, r12
 18a:	8d b7       	in	r24, 0x3d	; 61
 18c:	9e b7       	in	r25, 0x3e	; 62
 18e:	06 96       	adiw	r24, 0x06	; 6
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	9e bf       	out	0x3e, r25	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	8d bf       	out	0x3d, r24	; 61
 19a:	04 c0       	rjmp	.+8      	; 0x1a4 <main+0xbe>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 19c:	5d 9b       	sbis	0x0b, 5	; 11
 19e:	fe cf       	rjmp	.-4      	; 0x19c <main+0xb6>
	UDR=c; //SEND RECEIVED DATA BACK
 1a0:	8c b9       	out	0x0c, r24	; 12
void rsstr(char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
 1a2:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
	while(*s)
 1a4:	80 81       	ld	r24, Z
 1a6:	88 23       	and	r24, r24
 1a8:	c9 f7       	brne	.-14     	; 0x19c <main+0xb6>
   rsstr(buf);
   sprintf(buf,"TEMP=%d\r\n",temp);
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <main+0xc6>
 1ac:	00 d0       	rcall	.+0      	; 0x1ae <main+0xc8>
 1ae:	00 d0       	rcall	.+0      	; 0x1b0 <main+0xca>
 1b0:	ed b7       	in	r30, 0x3d	; 61
 1b2:	fe b7       	in	r31, 0x3e	; 62
 1b4:	31 96       	adiw	r30, 0x01	; 1
 1b6:	ad b7       	in	r26, 0x3d	; 61
 1b8:	be b7       	in	r27, 0x3e	; 62
 1ba:	12 96       	adiw	r26, 0x02	; 2
 1bc:	dc 92       	st	X, r13
 1be:	ce 92       	st	-X, r12
 1c0:	11 97       	sbiw	r26, 0x01	; 1
 1c2:	b3 82       	std	Z+3, r11	; 0x03
 1c4:	a2 82       	std	Z+2, r10	; 0x02
 1c6:	f5 82       	std	Z+5, r15	; 0x05
 1c8:	e4 82       	std	Z+4, r14	; 0x04
 1ca:	0e 94 19 01 	call	0x232	; 0x232 <sprintf>
 1ce:	f6 01       	movw	r30, r12
 1d0:	8d b7       	in	r24, 0x3d	; 61
 1d2:	9e b7       	in	r25, 0x3e	; 62
 1d4:	06 96       	adiw	r24, 0x06	; 6
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	f8 94       	cli
 1da:	9e bf       	out	0x3e, r25	; 62
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	8d bf       	out	0x3d, r24	; 61
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <main+0x104>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 1e2:	5d 9b       	sbis	0x0b, 5	; 11
 1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <main+0xfc>
	UDR=c; //SEND RECEIVED DATA BACK
 1e6:	8c b9       	out	0x0c, r24	; 12
void rsstr(char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
 1e8:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
	while(*s)
 1ea:	80 81       	ld	r24, Z
 1ec:	88 23       	and	r24, r24
 1ee:	c9 f7       	brne	.-14     	; 0x1e2 <main+0xfc>
   rsstr(buf);
   val=light;
   
   if(val<512)
 1f0:	92 e0       	ldi	r25, 0x02	; 2
 1f2:	00 30       	cpi	r16, 0x00	; 0
 1f4:	19 07       	cpc	r17, r25
 1f6:	18 f4       	brcc	.+6      	; 0x1fe <main+0x118>
   {
   sbi(PORTA,4);
 1f8:	dc 9a       	sbi	0x1b, 4	; 27
    cbi(PORTA,5);
 1fa:	dd 98       	cbi	0x1b, 5	; 27
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <main+0x124>
    cbi(PORTA,6);
    cbi(PORTA,7);
   }
   else if(val<600)
 1fe:	a2 e0       	ldi	r26, 0x02	; 2
 200:	08 35       	cpi	r16, 0x58	; 88
 202:	1a 07       	cpc	r17, r26
 204:	20 f4       	brcc	.+8      	; 0x20e <main+0x128>
   {
   sbi(PORTA,5);
 206:	dd 9a       	sbi	0x1b, 5	; 27
    cbi(PORTA,4);
 208:	dc 98       	cbi	0x1b, 4	; 27
    cbi(PORTA,6);
 20a:	de 98       	cbi	0x1b, 6	; 27
 20c:	07 c0       	rjmp	.+14     	; 0x21c <main+0x136>
    cbi(PORTA,7);
   }
   else if(val<700)
 20e:	b2 e0       	ldi	r27, 0x02	; 2
 210:	0c 3b       	cpi	r16, 0xBC	; 188
 212:	1b 07       	cpc	r17, r27
 214:	28 f4       	brcc	.+10     	; 0x220 <main+0x13a>
   {
   sbi(PORTA,6); cbi(PORTA,5);
 216:	de 9a       	sbi	0x1b, 6	; 27
 218:	dd 98       	cbi	0x1b, 5	; 27
    cbi(PORTA,4);
 21a:	dc 98       	cbi	0x1b, 4	; 27
    cbi(PORTA,7);
 21c:	df 98       	cbi	0x1b, 7	; 27
 21e:	9a cf       	rjmp	.-204    	; 0x154 <main+0x6e>
   }
   else if(val<1000)
 220:	08 5e       	subi	r16, 0xE8	; 232
 222:	13 40       	sbci	r17, 0x03	; 3
 224:	08 f0       	brcs	.+2      	; 0x228 <main+0x142>
 226:	96 cf       	rjmp	.-212    	; 0x154 <main+0x6e>
   {
   sbi(PORTA,7);
 228:	df 9a       	sbi	0x1b, 7	; 27
    cbi(PORTA,5);
 22a:	dd 98       	cbi	0x1b, 5	; 27
    cbi(PORTA,6);
 22c:	de 98       	cbi	0x1b, 6	; 27
    cbi(PORTA,4);
 22e:	dc 98       	cbi	0x1b, 4	; 27
 230:	91 cf       	rjmp	.-222    	; 0x154 <main+0x6e>

00000232 <sprintf>:
 232:	ae e0       	ldi	r26, 0x0E	; 14
 234:	b0 e0       	ldi	r27, 0x00	; 0
 236:	ef e1       	ldi	r30, 0x1F	; 31
 238:	f1 e0       	ldi	r31, 0x01	; 1
 23a:	0c 94 c8 03 	jmp	0x790	; 0x790 <__prologue_saves__+0x1c>
 23e:	0d 89       	ldd	r16, Y+21	; 0x15
 240:	1e 89       	ldd	r17, Y+22	; 0x16
 242:	86 e0       	ldi	r24, 0x06	; 6
 244:	8c 83       	std	Y+4, r24	; 0x04
 246:	1a 83       	std	Y+2, r17	; 0x02
 248:	09 83       	std	Y+1, r16	; 0x01
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	9f e7       	ldi	r25, 0x7F	; 127
 24e:	9e 83       	std	Y+6, r25	; 0x06
 250:	8d 83       	std	Y+5, r24	; 0x05
 252:	9e 01       	movw	r18, r28
 254:	27 5e       	subi	r18, 0xE7	; 231
 256:	3f 4f       	sbci	r19, 0xFF	; 255
 258:	ce 01       	movw	r24, r28
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	6f 89       	ldd	r22, Y+23	; 0x17
 25e:	78 8d       	ldd	r23, Y+24	; 0x18
 260:	a9 01       	movw	r20, r18
 262:	0e 94 3d 01 	call	0x27a	; 0x27a <vfprintf>
 266:	2f 81       	ldd	r18, Y+7	; 0x07
 268:	38 85       	ldd	r19, Y+8	; 0x08
 26a:	02 0f       	add	r16, r18
 26c:	13 1f       	adc	r17, r19
 26e:	f8 01       	movw	r30, r16
 270:	10 82       	st	Z, r1
 272:	2e 96       	adiw	r28, 0x0e	; 14
 274:	e4 e0       	ldi	r30, 0x04	; 4
 276:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__epilogue_restores__+0x1c>

0000027a <vfprintf>:
 27a:	ab e0       	ldi	r26, 0x0B	; 11
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	e3 e4       	ldi	r30, 0x43	; 67
 280:	f1 e0       	ldi	r31, 0x01	; 1
 282:	0c 94 ba 03 	jmp	0x774	; 0x774 <__prologue_saves__>
 286:	3c 01       	movw	r6, r24
 288:	2b 01       	movw	r4, r22
 28a:	5a 01       	movw	r10, r20
 28c:	fc 01       	movw	r30, r24
 28e:	17 82       	std	Z+7, r1	; 0x07
 290:	16 82       	std	Z+6, r1	; 0x06
 292:	83 81       	ldd	r24, Z+3	; 0x03
 294:	81 fd       	sbrc	r24, 1
 296:	03 c0       	rjmp	.+6      	; 0x29e <vfprintf+0x24>
 298:	6f ef       	ldi	r22, 0xFF	; 255
 29a:	7f ef       	ldi	r23, 0xFF	; 255
 29c:	c6 c1       	rjmp	.+908    	; 0x62a <__stack+0x1cb>
 29e:	9a e0       	ldi	r25, 0x0A	; 10
 2a0:	89 2e       	mov	r8, r25
 2a2:	1e 01       	movw	r2, r28
 2a4:	08 94       	sec
 2a6:	21 1c       	adc	r2, r1
 2a8:	31 1c       	adc	r3, r1
 2aa:	f3 01       	movw	r30, r6
 2ac:	23 81       	ldd	r18, Z+3	; 0x03
 2ae:	f2 01       	movw	r30, r4
 2b0:	23 fd       	sbrc	r18, 3
 2b2:	85 91       	lpm	r24, Z+
 2b4:	23 ff       	sbrs	r18, 3
 2b6:	81 91       	ld	r24, Z+
 2b8:	2f 01       	movw	r4, r30
 2ba:	88 23       	and	r24, r24
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <vfprintf+0x46>
 2be:	b2 c1       	rjmp	.+868    	; 0x624 <__stack+0x1c5>
 2c0:	85 32       	cpi	r24, 0x25	; 37
 2c2:	39 f4       	brne	.+14     	; 0x2d2 <vfprintf+0x58>
 2c4:	23 fd       	sbrc	r18, 3
 2c6:	85 91       	lpm	r24, Z+
 2c8:	23 ff       	sbrs	r18, 3
 2ca:	81 91       	ld	r24, Z+
 2cc:	2f 01       	movw	r4, r30
 2ce:	85 32       	cpi	r24, 0x25	; 37
 2d0:	29 f4       	brne	.+10     	; 0x2dc <vfprintf+0x62>
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	b3 01       	movw	r22, r6
 2d6:	0e 94 30 03 	call	0x660	; 0x660 <fputc>
 2da:	e7 cf       	rjmp	.-50     	; 0x2aa <vfprintf+0x30>
 2dc:	98 2f       	mov	r25, r24
 2de:	ff 24       	eor	r15, r15
 2e0:	ee 24       	eor	r14, r14
 2e2:	99 24       	eor	r9, r9
 2e4:	ff e1       	ldi	r31, 0x1F	; 31
 2e6:	ff 15       	cp	r31, r15
 2e8:	d0 f0       	brcs	.+52     	; 0x31e <vfprintf+0xa4>
 2ea:	9b 32       	cpi	r25, 0x2B	; 43
 2ec:	69 f0       	breq	.+26     	; 0x308 <vfprintf+0x8e>
 2ee:	9c 32       	cpi	r25, 0x2C	; 44
 2f0:	28 f4       	brcc	.+10     	; 0x2fc <vfprintf+0x82>
 2f2:	90 32       	cpi	r25, 0x20	; 32
 2f4:	59 f0       	breq	.+22     	; 0x30c <vfprintf+0x92>
 2f6:	93 32       	cpi	r25, 0x23	; 35
 2f8:	91 f4       	brne	.+36     	; 0x31e <vfprintf+0xa4>
 2fa:	0e c0       	rjmp	.+28     	; 0x318 <vfprintf+0x9e>
 2fc:	9d 32       	cpi	r25, 0x2D	; 45
 2fe:	49 f0       	breq	.+18     	; 0x312 <vfprintf+0x98>
 300:	90 33       	cpi	r25, 0x30	; 48
 302:	69 f4       	brne	.+26     	; 0x31e <vfprintf+0xa4>
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	24 c0       	rjmp	.+72     	; 0x350 <vfprintf+0xd6>
 308:	52 e0       	ldi	r21, 0x02	; 2
 30a:	f5 2a       	or	r15, r21
 30c:	84 e0       	ldi	r24, 0x04	; 4
 30e:	f8 2a       	or	r15, r24
 310:	28 c0       	rjmp	.+80     	; 0x362 <vfprintf+0xe8>
 312:	98 e0       	ldi	r25, 0x08	; 8
 314:	f9 2a       	or	r15, r25
 316:	25 c0       	rjmp	.+74     	; 0x362 <vfprintf+0xe8>
 318:	e0 e1       	ldi	r30, 0x10	; 16
 31a:	fe 2a       	or	r15, r30
 31c:	22 c0       	rjmp	.+68     	; 0x362 <vfprintf+0xe8>
 31e:	f7 fc       	sbrc	r15, 7
 320:	29 c0       	rjmp	.+82     	; 0x374 <vfprintf+0xfa>
 322:	89 2f       	mov	r24, r25
 324:	80 53       	subi	r24, 0x30	; 48
 326:	8a 30       	cpi	r24, 0x0A	; 10
 328:	70 f4       	brcc	.+28     	; 0x346 <vfprintf+0xcc>
 32a:	f6 fe       	sbrs	r15, 6
 32c:	05 c0       	rjmp	.+10     	; 0x338 <vfprintf+0xbe>
 32e:	98 9c       	mul	r9, r8
 330:	90 2c       	mov	r9, r0
 332:	11 24       	eor	r1, r1
 334:	98 0e       	add	r9, r24
 336:	15 c0       	rjmp	.+42     	; 0x362 <vfprintf+0xe8>
 338:	e8 9c       	mul	r14, r8
 33a:	e0 2c       	mov	r14, r0
 33c:	11 24       	eor	r1, r1
 33e:	e8 0e       	add	r14, r24
 340:	f0 e2       	ldi	r31, 0x20	; 32
 342:	ff 2a       	or	r15, r31
 344:	0e c0       	rjmp	.+28     	; 0x362 <vfprintf+0xe8>
 346:	9e 32       	cpi	r25, 0x2E	; 46
 348:	29 f4       	brne	.+10     	; 0x354 <vfprintf+0xda>
 34a:	f6 fc       	sbrc	r15, 6
 34c:	6b c1       	rjmp	.+726    	; 0x624 <__stack+0x1c5>
 34e:	40 e4       	ldi	r20, 0x40	; 64
 350:	f4 2a       	or	r15, r20
 352:	07 c0       	rjmp	.+14     	; 0x362 <vfprintf+0xe8>
 354:	9c 36       	cpi	r25, 0x6C	; 108
 356:	19 f4       	brne	.+6      	; 0x35e <vfprintf+0xe4>
 358:	50 e8       	ldi	r21, 0x80	; 128
 35a:	f5 2a       	or	r15, r21
 35c:	02 c0       	rjmp	.+4      	; 0x362 <vfprintf+0xe8>
 35e:	98 36       	cpi	r25, 0x68	; 104
 360:	49 f4       	brne	.+18     	; 0x374 <vfprintf+0xfa>
 362:	f2 01       	movw	r30, r4
 364:	23 fd       	sbrc	r18, 3
 366:	95 91       	lpm	r25, Z+
 368:	23 ff       	sbrs	r18, 3
 36a:	91 91       	ld	r25, Z+
 36c:	2f 01       	movw	r4, r30
 36e:	99 23       	and	r25, r25
 370:	09 f0       	breq	.+2      	; 0x374 <vfprintf+0xfa>
 372:	b8 cf       	rjmp	.-144    	; 0x2e4 <vfprintf+0x6a>
 374:	89 2f       	mov	r24, r25
 376:	85 54       	subi	r24, 0x45	; 69
 378:	83 30       	cpi	r24, 0x03	; 3
 37a:	18 f0       	brcs	.+6      	; 0x382 <vfprintf+0x108>
 37c:	80 52       	subi	r24, 0x20	; 32
 37e:	83 30       	cpi	r24, 0x03	; 3
 380:	38 f4       	brcc	.+14     	; 0x390 <vfprintf+0x116>
 382:	44 e0       	ldi	r20, 0x04	; 4
 384:	50 e0       	ldi	r21, 0x00	; 0
 386:	a4 0e       	add	r10, r20
 388:	b5 1e       	adc	r11, r21
 38a:	5f e3       	ldi	r21, 0x3F	; 63
 38c:	59 83       	std	Y+1, r21	; 0x01
 38e:	0f c0       	rjmp	.+30     	; 0x3ae <vfprintf+0x134>
 390:	93 36       	cpi	r25, 0x63	; 99
 392:	31 f0       	breq	.+12     	; 0x3a0 <vfprintf+0x126>
 394:	93 37       	cpi	r25, 0x73	; 115
 396:	79 f0       	breq	.+30     	; 0x3b6 <vfprintf+0x13c>
 398:	93 35       	cpi	r25, 0x53	; 83
 39a:	09 f0       	breq	.+2      	; 0x39e <vfprintf+0x124>
 39c:	56 c0       	rjmp	.+172    	; 0x44a <vfprintf+0x1d0>
 39e:	20 c0       	rjmp	.+64     	; 0x3e0 <vfprintf+0x166>
 3a0:	f5 01       	movw	r30, r10
 3a2:	80 81       	ld	r24, Z
 3a4:	89 83       	std	Y+1, r24	; 0x01
 3a6:	42 e0       	ldi	r20, 0x02	; 2
 3a8:	50 e0       	ldi	r21, 0x00	; 0
 3aa:	a4 0e       	add	r10, r20
 3ac:	b5 1e       	adc	r11, r21
 3ae:	61 01       	movw	r12, r2
 3b0:	01 e0       	ldi	r16, 0x01	; 1
 3b2:	10 e0       	ldi	r17, 0x00	; 0
 3b4:	12 c0       	rjmp	.+36     	; 0x3da <vfprintf+0x160>
 3b6:	f5 01       	movw	r30, r10
 3b8:	c0 80       	ld	r12, Z
 3ba:	d1 80       	ldd	r13, Z+1	; 0x01
 3bc:	f6 fc       	sbrc	r15, 6
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <vfprintf+0x14c>
 3c0:	6f ef       	ldi	r22, 0xFF	; 255
 3c2:	7f ef       	ldi	r23, 0xFF	; 255
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <vfprintf+0x150>
 3c6:	69 2d       	mov	r22, r9
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	42 e0       	ldi	r20, 0x02	; 2
 3cc:	50 e0       	ldi	r21, 0x00	; 0
 3ce:	a4 0e       	add	r10, r20
 3d0:	b5 1e       	adc	r11, r21
 3d2:	c6 01       	movw	r24, r12
 3d4:	0e 94 25 03 	call	0x64a	; 0x64a <strnlen>
 3d8:	8c 01       	movw	r16, r24
 3da:	5f e7       	ldi	r21, 0x7F	; 127
 3dc:	f5 22       	and	r15, r21
 3de:	14 c0       	rjmp	.+40     	; 0x408 <vfprintf+0x18e>
 3e0:	f5 01       	movw	r30, r10
 3e2:	c0 80       	ld	r12, Z
 3e4:	d1 80       	ldd	r13, Z+1	; 0x01
 3e6:	f6 fc       	sbrc	r15, 6
 3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <vfprintf+0x176>
 3ea:	6f ef       	ldi	r22, 0xFF	; 255
 3ec:	7f ef       	ldi	r23, 0xFF	; 255
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <vfprintf+0x17a>
 3f0:	69 2d       	mov	r22, r9
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	42 e0       	ldi	r20, 0x02	; 2
 3f6:	50 e0       	ldi	r21, 0x00	; 0
 3f8:	a4 0e       	add	r10, r20
 3fa:	b5 1e       	adc	r11, r21
 3fc:	c6 01       	movw	r24, r12
 3fe:	0e 94 1a 03 	call	0x634	; 0x634 <strnlen_P>
 402:	8c 01       	movw	r16, r24
 404:	50 e8       	ldi	r21, 0x80	; 128
 406:	f5 2a       	or	r15, r21
 408:	f3 fe       	sbrs	r15, 3
 40a:	07 c0       	rjmp	.+14     	; 0x41a <vfprintf+0x1a0>
 40c:	1a c0       	rjmp	.+52     	; 0x442 <vfprintf+0x1c8>
 40e:	80 e2       	ldi	r24, 0x20	; 32
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	b3 01       	movw	r22, r6
 414:	0e 94 30 03 	call	0x660	; 0x660 <fputc>
 418:	ea 94       	dec	r14
 41a:	8e 2d       	mov	r24, r14
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	08 17       	cp	r16, r24
 420:	19 07       	cpc	r17, r25
 422:	a8 f3       	brcs	.-22     	; 0x40e <vfprintf+0x194>
 424:	0e c0       	rjmp	.+28     	; 0x442 <vfprintf+0x1c8>
 426:	f6 01       	movw	r30, r12
 428:	f7 fc       	sbrc	r15, 7
 42a:	85 91       	lpm	r24, Z+
 42c:	f7 fe       	sbrs	r15, 7
 42e:	81 91       	ld	r24, Z+
 430:	6f 01       	movw	r12, r30
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	b3 01       	movw	r22, r6
 436:	0e 94 30 03 	call	0x660	; 0x660 <fputc>
 43a:	e1 10       	cpse	r14, r1
 43c:	ea 94       	dec	r14
 43e:	01 50       	subi	r16, 0x01	; 1
 440:	10 40       	sbci	r17, 0x00	; 0
 442:	01 15       	cp	r16, r1
 444:	11 05       	cpc	r17, r1
 446:	79 f7       	brne	.-34     	; 0x426 <vfprintf+0x1ac>
 448:	ea c0       	rjmp	.+468    	; 0x61e <__stack+0x1bf>
 44a:	94 36       	cpi	r25, 0x64	; 100
 44c:	11 f0       	breq	.+4      	; 0x452 <vfprintf+0x1d8>
 44e:	99 36       	cpi	r25, 0x69	; 105
 450:	69 f5       	brne	.+90     	; 0x4ac <__stack+0x4d>
 452:	f7 fe       	sbrs	r15, 7
 454:	08 c0       	rjmp	.+16     	; 0x466 <__stack+0x7>
 456:	f5 01       	movw	r30, r10
 458:	20 81       	ld	r18, Z
 45a:	31 81       	ldd	r19, Z+1	; 0x01
 45c:	42 81       	ldd	r20, Z+2	; 0x02
 45e:	53 81       	ldd	r21, Z+3	; 0x03
 460:	84 e0       	ldi	r24, 0x04	; 4
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0a c0       	rjmp	.+20     	; 0x47a <__stack+0x1b>
 466:	f5 01       	movw	r30, r10
 468:	80 81       	ld	r24, Z
 46a:	91 81       	ldd	r25, Z+1	; 0x01
 46c:	9c 01       	movw	r18, r24
 46e:	44 27       	eor	r20, r20
 470:	37 fd       	sbrc	r19, 7
 472:	40 95       	com	r20
 474:	54 2f       	mov	r21, r20
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	a8 0e       	add	r10, r24
 47c:	b9 1e       	adc	r11, r25
 47e:	9f e6       	ldi	r25, 0x6F	; 111
 480:	f9 22       	and	r15, r25
 482:	57 ff       	sbrs	r21, 7
 484:	09 c0       	rjmp	.+18     	; 0x498 <__stack+0x39>
 486:	50 95       	com	r21
 488:	40 95       	com	r20
 48a:	30 95       	com	r19
 48c:	21 95       	neg	r18
 48e:	3f 4f       	sbci	r19, 0xFF	; 255
 490:	4f 4f       	sbci	r20, 0xFF	; 255
 492:	5f 4f       	sbci	r21, 0xFF	; 255
 494:	e0 e8       	ldi	r30, 0x80	; 128
 496:	fe 2a       	or	r15, r30
 498:	ca 01       	movw	r24, r20
 49a:	b9 01       	movw	r22, r18
 49c:	a1 01       	movw	r20, r2
 49e:	2a e0       	ldi	r18, 0x0A	; 10
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__ultoa_invert>
 4a6:	d8 2e       	mov	r13, r24
 4a8:	d2 18       	sub	r13, r2
 4aa:	40 c0       	rjmp	.+128    	; 0x52c <__stack+0xcd>
 4ac:	95 37       	cpi	r25, 0x75	; 117
 4ae:	29 f4       	brne	.+10     	; 0x4ba <__stack+0x5b>
 4b0:	1f 2d       	mov	r17, r15
 4b2:	1f 7e       	andi	r17, 0xEF	; 239
 4b4:	2a e0       	ldi	r18, 0x0A	; 10
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	1d c0       	rjmp	.+58     	; 0x4f4 <__stack+0x95>
 4ba:	1f 2d       	mov	r17, r15
 4bc:	19 7f       	andi	r17, 0xF9	; 249
 4be:	9f 36       	cpi	r25, 0x6F	; 111
 4c0:	61 f0       	breq	.+24     	; 0x4da <__stack+0x7b>
 4c2:	90 37       	cpi	r25, 0x70	; 112
 4c4:	20 f4       	brcc	.+8      	; 0x4ce <__stack+0x6f>
 4c6:	98 35       	cpi	r25, 0x58	; 88
 4c8:	09 f0       	breq	.+2      	; 0x4cc <__stack+0x6d>
 4ca:	ac c0       	rjmp	.+344    	; 0x624 <__stack+0x1c5>
 4cc:	0f c0       	rjmp	.+30     	; 0x4ec <__stack+0x8d>
 4ce:	90 37       	cpi	r25, 0x70	; 112
 4d0:	39 f0       	breq	.+14     	; 0x4e0 <__stack+0x81>
 4d2:	98 37       	cpi	r25, 0x78	; 120
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <__stack+0x79>
 4d6:	a6 c0       	rjmp	.+332    	; 0x624 <__stack+0x1c5>
 4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <__stack+0x83>
 4da:	28 e0       	ldi	r18, 0x08	; 8
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	0a c0       	rjmp	.+20     	; 0x4f4 <__stack+0x95>
 4e0:	10 61       	ori	r17, 0x10	; 16
 4e2:	14 fd       	sbrc	r17, 4
 4e4:	14 60       	ori	r17, 0x04	; 4
 4e6:	20 e1       	ldi	r18, 0x10	; 16
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <__stack+0x95>
 4ec:	14 fd       	sbrc	r17, 4
 4ee:	16 60       	ori	r17, 0x06	; 6
 4f0:	20 e1       	ldi	r18, 0x10	; 16
 4f2:	32 e0       	ldi	r19, 0x02	; 2
 4f4:	17 ff       	sbrs	r17, 7
 4f6:	08 c0       	rjmp	.+16     	; 0x508 <__stack+0xa9>
 4f8:	f5 01       	movw	r30, r10
 4fa:	60 81       	ld	r22, Z
 4fc:	71 81       	ldd	r23, Z+1	; 0x01
 4fe:	82 81       	ldd	r24, Z+2	; 0x02
 500:	93 81       	ldd	r25, Z+3	; 0x03
 502:	44 e0       	ldi	r20, 0x04	; 4
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	08 c0       	rjmp	.+16     	; 0x518 <__stack+0xb9>
 508:	f5 01       	movw	r30, r10
 50a:	80 81       	ld	r24, Z
 50c:	91 81       	ldd	r25, Z+1	; 0x01
 50e:	bc 01       	movw	r22, r24
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	42 e0       	ldi	r20, 0x02	; 2
 516:	50 e0       	ldi	r21, 0x00	; 0
 518:	a4 0e       	add	r10, r20
 51a:	b5 1e       	adc	r11, r21
 51c:	a1 01       	movw	r20, r2
 51e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__ultoa_invert>
 522:	d8 2e       	mov	r13, r24
 524:	d2 18       	sub	r13, r2
 526:	8f e7       	ldi	r24, 0x7F	; 127
 528:	f8 2e       	mov	r15, r24
 52a:	f1 22       	and	r15, r17
 52c:	f6 fe       	sbrs	r15, 6
 52e:	0b c0       	rjmp	.+22     	; 0x546 <__stack+0xe7>
 530:	5e ef       	ldi	r21, 0xFE	; 254
 532:	f5 22       	and	r15, r21
 534:	d9 14       	cp	r13, r9
 536:	38 f4       	brcc	.+14     	; 0x546 <__stack+0xe7>
 538:	f4 fe       	sbrs	r15, 4
 53a:	07 c0       	rjmp	.+14     	; 0x54a <__stack+0xeb>
 53c:	f2 fc       	sbrc	r15, 2
 53e:	05 c0       	rjmp	.+10     	; 0x54a <__stack+0xeb>
 540:	8f ee       	ldi	r24, 0xEF	; 239
 542:	f8 22       	and	r15, r24
 544:	02 c0       	rjmp	.+4      	; 0x54a <__stack+0xeb>
 546:	1d 2d       	mov	r17, r13
 548:	01 c0       	rjmp	.+2      	; 0x54c <__stack+0xed>
 54a:	19 2d       	mov	r17, r9
 54c:	f4 fe       	sbrs	r15, 4
 54e:	0d c0       	rjmp	.+26     	; 0x56a <__stack+0x10b>
 550:	fe 01       	movw	r30, r28
 552:	ed 0d       	add	r30, r13
 554:	f1 1d       	adc	r31, r1
 556:	80 81       	ld	r24, Z
 558:	80 33       	cpi	r24, 0x30	; 48
 55a:	19 f4       	brne	.+6      	; 0x562 <__stack+0x103>
 55c:	99 ee       	ldi	r25, 0xE9	; 233
 55e:	f9 22       	and	r15, r25
 560:	08 c0       	rjmp	.+16     	; 0x572 <__stack+0x113>
 562:	1f 5f       	subi	r17, 0xFF	; 255
 564:	f2 fe       	sbrs	r15, 2
 566:	05 c0       	rjmp	.+10     	; 0x572 <__stack+0x113>
 568:	03 c0       	rjmp	.+6      	; 0x570 <__stack+0x111>
 56a:	8f 2d       	mov	r24, r15
 56c:	86 78       	andi	r24, 0x86	; 134
 56e:	09 f0       	breq	.+2      	; 0x572 <__stack+0x113>
 570:	1f 5f       	subi	r17, 0xFF	; 255
 572:	0f 2d       	mov	r16, r15
 574:	f3 fc       	sbrc	r15, 3
 576:	14 c0       	rjmp	.+40     	; 0x5a0 <__stack+0x141>
 578:	f0 fe       	sbrs	r15, 0
 57a:	0f c0       	rjmp	.+30     	; 0x59a <__stack+0x13b>
 57c:	1e 15       	cp	r17, r14
 57e:	10 f0       	brcs	.+4      	; 0x584 <__stack+0x125>
 580:	9d 2c       	mov	r9, r13
 582:	0b c0       	rjmp	.+22     	; 0x59a <__stack+0x13b>
 584:	9d 2c       	mov	r9, r13
 586:	9e 0c       	add	r9, r14
 588:	91 1a       	sub	r9, r17
 58a:	1e 2d       	mov	r17, r14
 58c:	06 c0       	rjmp	.+12     	; 0x59a <__stack+0x13b>
 58e:	80 e2       	ldi	r24, 0x20	; 32
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	b3 01       	movw	r22, r6
 594:	0e 94 30 03 	call	0x660	; 0x660 <fputc>
 598:	1f 5f       	subi	r17, 0xFF	; 255
 59a:	1e 15       	cp	r17, r14
 59c:	c0 f3       	brcs	.-16     	; 0x58e <__stack+0x12f>
 59e:	04 c0       	rjmp	.+8      	; 0x5a8 <__stack+0x149>
 5a0:	1e 15       	cp	r17, r14
 5a2:	10 f4       	brcc	.+4      	; 0x5a8 <__stack+0x149>
 5a4:	e1 1a       	sub	r14, r17
 5a6:	01 c0       	rjmp	.+2      	; 0x5aa <__stack+0x14b>
 5a8:	ee 24       	eor	r14, r14
 5aa:	04 ff       	sbrs	r16, 4
 5ac:	0f c0       	rjmp	.+30     	; 0x5cc <__stack+0x16d>
 5ae:	80 e3       	ldi	r24, 0x30	; 48
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	b3 01       	movw	r22, r6
 5b4:	0e 94 30 03 	call	0x660	; 0x660 <fputc>
 5b8:	02 ff       	sbrs	r16, 2
 5ba:	1d c0       	rjmp	.+58     	; 0x5f6 <__stack+0x197>
 5bc:	01 fd       	sbrc	r16, 1
 5be:	03 c0       	rjmp	.+6      	; 0x5c6 <__stack+0x167>
 5c0:	88 e7       	ldi	r24, 0x78	; 120
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e c0       	rjmp	.+28     	; 0x5e2 <__stack+0x183>
 5c6:	88 e5       	ldi	r24, 0x58	; 88
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	0b c0       	rjmp	.+22     	; 0x5e2 <__stack+0x183>
 5cc:	80 2f       	mov	r24, r16
 5ce:	86 78       	andi	r24, 0x86	; 134
 5d0:	91 f0       	breq	.+36     	; 0x5f6 <__stack+0x197>
 5d2:	01 ff       	sbrs	r16, 1
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <__stack+0x17b>
 5d6:	8b e2       	ldi	r24, 0x2B	; 43
 5d8:	01 c0       	rjmp	.+2      	; 0x5dc <__stack+0x17d>
 5da:	80 e2       	ldi	r24, 0x20	; 32
 5dc:	f7 fc       	sbrc	r15, 7
 5de:	8d e2       	ldi	r24, 0x2D	; 45
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	b3 01       	movw	r22, r6
 5e4:	0e 94 30 03 	call	0x660	; 0x660 <fputc>
 5e8:	06 c0       	rjmp	.+12     	; 0x5f6 <__stack+0x197>
 5ea:	80 e3       	ldi	r24, 0x30	; 48
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	b3 01       	movw	r22, r6
 5f0:	0e 94 30 03 	call	0x660	; 0x660 <fputc>
 5f4:	9a 94       	dec	r9
 5f6:	d9 14       	cp	r13, r9
 5f8:	c0 f3       	brcs	.-16     	; 0x5ea <__stack+0x18b>
 5fa:	da 94       	dec	r13
 5fc:	f1 01       	movw	r30, r2
 5fe:	ed 0d       	add	r30, r13
 600:	f1 1d       	adc	r31, r1
 602:	80 81       	ld	r24, Z
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	b3 01       	movw	r22, r6
 608:	0e 94 30 03 	call	0x660	; 0x660 <fputc>
 60c:	dd 20       	and	r13, r13
 60e:	a9 f7       	brne	.-22     	; 0x5fa <__stack+0x19b>
 610:	06 c0       	rjmp	.+12     	; 0x61e <__stack+0x1bf>
 612:	80 e2       	ldi	r24, 0x20	; 32
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	b3 01       	movw	r22, r6
 618:	0e 94 30 03 	call	0x660	; 0x660 <fputc>
 61c:	ea 94       	dec	r14
 61e:	ee 20       	and	r14, r14
 620:	c1 f7       	brne	.-16     	; 0x612 <__stack+0x1b3>
 622:	43 ce       	rjmp	.-890    	; 0x2aa <vfprintf+0x30>
 624:	f3 01       	movw	r30, r6
 626:	66 81       	ldd	r22, Z+6	; 0x06
 628:	77 81       	ldd	r23, Z+7	; 0x07
 62a:	cb 01       	movw	r24, r22
 62c:	2b 96       	adiw	r28, 0x0b	; 11
 62e:	e2 e1       	ldi	r30, 0x12	; 18
 630:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__epilogue_restores__>

00000634 <strnlen_P>:
 634:	fc 01       	movw	r30, r24
 636:	05 90       	lpm	r0, Z+
 638:	61 50       	subi	r22, 0x01	; 1
 63a:	70 40       	sbci	r23, 0x00	; 0
 63c:	01 10       	cpse	r0, r1
 63e:	d8 f7       	brcc	.-10     	; 0x636 <strnlen_P+0x2>
 640:	80 95       	com	r24
 642:	90 95       	com	r25
 644:	8e 0f       	add	r24, r30
 646:	9f 1f       	adc	r25, r31
 648:	08 95       	ret

0000064a <strnlen>:
 64a:	fc 01       	movw	r30, r24
 64c:	61 50       	subi	r22, 0x01	; 1
 64e:	70 40       	sbci	r23, 0x00	; 0
 650:	01 90       	ld	r0, Z+
 652:	01 10       	cpse	r0, r1
 654:	d8 f7       	brcc	.-10     	; 0x64c <strnlen+0x2>
 656:	80 95       	com	r24
 658:	90 95       	com	r25
 65a:	8e 0f       	add	r24, r30
 65c:	9f 1f       	adc	r25, r31
 65e:	08 95       	ret

00000660 <fputc>:
 660:	0f 93       	push	r16
 662:	1f 93       	push	r17
 664:	cf 93       	push	r28
 666:	df 93       	push	r29
 668:	8c 01       	movw	r16, r24
 66a:	eb 01       	movw	r28, r22
 66c:	8b 81       	ldd	r24, Y+3	; 0x03
 66e:	81 ff       	sbrs	r24, 1
 670:	1b c0       	rjmp	.+54     	; 0x6a8 <fputc+0x48>
 672:	82 ff       	sbrs	r24, 2
 674:	0d c0       	rjmp	.+26     	; 0x690 <fputc+0x30>
 676:	2e 81       	ldd	r18, Y+6	; 0x06
 678:	3f 81       	ldd	r19, Y+7	; 0x07
 67a:	8c 81       	ldd	r24, Y+4	; 0x04
 67c:	9d 81       	ldd	r25, Y+5	; 0x05
 67e:	28 17       	cp	r18, r24
 680:	39 07       	cpc	r19, r25
 682:	64 f4       	brge	.+24     	; 0x69c <fputc+0x3c>
 684:	e8 81       	ld	r30, Y
 686:	f9 81       	ldd	r31, Y+1	; 0x01
 688:	01 93       	st	Z+, r16
 68a:	f9 83       	std	Y+1, r31	; 0x01
 68c:	e8 83       	st	Y, r30
 68e:	06 c0       	rjmp	.+12     	; 0x69c <fputc+0x3c>
 690:	e8 85       	ldd	r30, Y+8	; 0x08
 692:	f9 85       	ldd	r31, Y+9	; 0x09
 694:	80 2f       	mov	r24, r16
 696:	09 95       	icall
 698:	89 2b       	or	r24, r25
 69a:	31 f4       	brne	.+12     	; 0x6a8 <fputc+0x48>
 69c:	8e 81       	ldd	r24, Y+6	; 0x06
 69e:	9f 81       	ldd	r25, Y+7	; 0x07
 6a0:	01 96       	adiw	r24, 0x01	; 1
 6a2:	9f 83       	std	Y+7, r25	; 0x07
 6a4:	8e 83       	std	Y+6, r24	; 0x06
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <fputc+0x4c>
 6a8:	0f ef       	ldi	r16, 0xFF	; 255
 6aa:	1f ef       	ldi	r17, 0xFF	; 255
 6ac:	c8 01       	movw	r24, r16
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	1f 91       	pop	r17
 6b4:	0f 91       	pop	r16
 6b6:	08 95       	ret

000006b8 <__ultoa_invert>:
 6b8:	fa 01       	movw	r30, r20
 6ba:	aa 27       	eor	r26, r26
 6bc:	28 30       	cpi	r18, 0x08	; 8
 6be:	51 f1       	breq	.+84     	; 0x714 <__ultoa_invert+0x5c>
 6c0:	20 31       	cpi	r18, 0x10	; 16
 6c2:	81 f1       	breq	.+96     	; 0x724 <__ultoa_invert+0x6c>
 6c4:	e8 94       	clt
 6c6:	6f 93       	push	r22
 6c8:	6e 7f       	andi	r22, 0xFE	; 254
 6ca:	6e 5f       	subi	r22, 0xFE	; 254
 6cc:	7f 4f       	sbci	r23, 0xFF	; 255
 6ce:	8f 4f       	sbci	r24, 0xFF	; 255
 6d0:	9f 4f       	sbci	r25, 0xFF	; 255
 6d2:	af 4f       	sbci	r26, 0xFF	; 255
 6d4:	b1 e0       	ldi	r27, 0x01	; 1
 6d6:	3e d0       	rcall	.+124    	; 0x754 <__ultoa_invert+0x9c>
 6d8:	b4 e0       	ldi	r27, 0x04	; 4
 6da:	3c d0       	rcall	.+120    	; 0x754 <__ultoa_invert+0x9c>
 6dc:	67 0f       	add	r22, r23
 6de:	78 1f       	adc	r23, r24
 6e0:	89 1f       	adc	r24, r25
 6e2:	9a 1f       	adc	r25, r26
 6e4:	a1 1d       	adc	r26, r1
 6e6:	68 0f       	add	r22, r24
 6e8:	79 1f       	adc	r23, r25
 6ea:	8a 1f       	adc	r24, r26
 6ec:	91 1d       	adc	r25, r1
 6ee:	a1 1d       	adc	r26, r1
 6f0:	6a 0f       	add	r22, r26
 6f2:	71 1d       	adc	r23, r1
 6f4:	81 1d       	adc	r24, r1
 6f6:	91 1d       	adc	r25, r1
 6f8:	a1 1d       	adc	r26, r1
 6fa:	20 d0       	rcall	.+64     	; 0x73c <__ultoa_invert+0x84>
 6fc:	09 f4       	brne	.+2      	; 0x700 <__ultoa_invert+0x48>
 6fe:	68 94       	set
 700:	3f 91       	pop	r19
 702:	2a e0       	ldi	r18, 0x0A	; 10
 704:	26 9f       	mul	r18, r22
 706:	11 24       	eor	r1, r1
 708:	30 19       	sub	r19, r0
 70a:	30 5d       	subi	r19, 0xD0	; 208
 70c:	31 93       	st	Z+, r19
 70e:	de f6       	brtc	.-74     	; 0x6c6 <__ultoa_invert+0xe>
 710:	cf 01       	movw	r24, r30
 712:	08 95       	ret
 714:	46 2f       	mov	r20, r22
 716:	47 70       	andi	r20, 0x07	; 7
 718:	40 5d       	subi	r20, 0xD0	; 208
 71a:	41 93       	st	Z+, r20
 71c:	b3 e0       	ldi	r27, 0x03	; 3
 71e:	0f d0       	rcall	.+30     	; 0x73e <__ultoa_invert+0x86>
 720:	c9 f7       	brne	.-14     	; 0x714 <__ultoa_invert+0x5c>
 722:	f6 cf       	rjmp	.-20     	; 0x710 <__ultoa_invert+0x58>
 724:	46 2f       	mov	r20, r22
 726:	4f 70       	andi	r20, 0x0F	; 15
 728:	40 5d       	subi	r20, 0xD0	; 208
 72a:	4a 33       	cpi	r20, 0x3A	; 58
 72c:	18 f0       	brcs	.+6      	; 0x734 <__ultoa_invert+0x7c>
 72e:	49 5d       	subi	r20, 0xD9	; 217
 730:	31 fd       	sbrc	r19, 1
 732:	40 52       	subi	r20, 0x20	; 32
 734:	41 93       	st	Z+, r20
 736:	02 d0       	rcall	.+4      	; 0x73c <__ultoa_invert+0x84>
 738:	a9 f7       	brne	.-22     	; 0x724 <__ultoa_invert+0x6c>
 73a:	ea cf       	rjmp	.-44     	; 0x710 <__ultoa_invert+0x58>
 73c:	b4 e0       	ldi	r27, 0x04	; 4
 73e:	a6 95       	lsr	r26
 740:	97 95       	ror	r25
 742:	87 95       	ror	r24
 744:	77 95       	ror	r23
 746:	67 95       	ror	r22
 748:	ba 95       	dec	r27
 74a:	c9 f7       	brne	.-14     	; 0x73e <__ultoa_invert+0x86>
 74c:	00 97       	sbiw	r24, 0x00	; 0
 74e:	61 05       	cpc	r22, r1
 750:	71 05       	cpc	r23, r1
 752:	08 95       	ret
 754:	9b 01       	movw	r18, r22
 756:	ac 01       	movw	r20, r24
 758:	0a 2e       	mov	r0, r26
 75a:	06 94       	lsr	r0
 75c:	57 95       	ror	r21
 75e:	47 95       	ror	r20
 760:	37 95       	ror	r19
 762:	27 95       	ror	r18
 764:	ba 95       	dec	r27
 766:	c9 f7       	brne	.-14     	; 0x75a <__ultoa_invert+0xa2>
 768:	62 0f       	add	r22, r18
 76a:	73 1f       	adc	r23, r19
 76c:	84 1f       	adc	r24, r20
 76e:	95 1f       	adc	r25, r21
 770:	a0 1d       	adc	r26, r0
 772:	08 95       	ret

00000774 <__prologue_saves__>:
 774:	2f 92       	push	r2
 776:	3f 92       	push	r3
 778:	4f 92       	push	r4
 77a:	5f 92       	push	r5
 77c:	6f 92       	push	r6
 77e:	7f 92       	push	r7
 780:	8f 92       	push	r8
 782:	9f 92       	push	r9
 784:	af 92       	push	r10
 786:	bf 92       	push	r11
 788:	cf 92       	push	r12
 78a:	df 92       	push	r13
 78c:	ef 92       	push	r14
 78e:	ff 92       	push	r15
 790:	0f 93       	push	r16
 792:	1f 93       	push	r17
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
 798:	cd b7       	in	r28, 0x3d	; 61
 79a:	de b7       	in	r29, 0x3e	; 62
 79c:	ca 1b       	sub	r28, r26
 79e:	db 0b       	sbc	r29, r27
 7a0:	0f b6       	in	r0, 0x3f	; 63
 7a2:	f8 94       	cli
 7a4:	de bf       	out	0x3e, r29	; 62
 7a6:	0f be       	out	0x3f, r0	; 63
 7a8:	cd bf       	out	0x3d, r28	; 61
 7aa:	09 94       	ijmp

000007ac <__epilogue_restores__>:
 7ac:	2a 88       	ldd	r2, Y+18	; 0x12
 7ae:	39 88       	ldd	r3, Y+17	; 0x11
 7b0:	48 88       	ldd	r4, Y+16	; 0x10
 7b2:	5f 84       	ldd	r5, Y+15	; 0x0f
 7b4:	6e 84       	ldd	r6, Y+14	; 0x0e
 7b6:	7d 84       	ldd	r7, Y+13	; 0x0d
 7b8:	8c 84       	ldd	r8, Y+12	; 0x0c
 7ba:	9b 84       	ldd	r9, Y+11	; 0x0b
 7bc:	aa 84       	ldd	r10, Y+10	; 0x0a
 7be:	b9 84       	ldd	r11, Y+9	; 0x09
 7c0:	c8 84       	ldd	r12, Y+8	; 0x08
 7c2:	df 80       	ldd	r13, Y+7	; 0x07
 7c4:	ee 80       	ldd	r14, Y+6	; 0x06
 7c6:	fd 80       	ldd	r15, Y+5	; 0x05
 7c8:	0c 81       	ldd	r16, Y+4	; 0x04
 7ca:	1b 81       	ldd	r17, Y+3	; 0x03
 7cc:	aa 81       	ldd	r26, Y+2	; 0x02
 7ce:	b9 81       	ldd	r27, Y+1	; 0x01
 7d0:	ce 0f       	add	r28, r30
 7d2:	d1 1d       	adc	r29, r1
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	f8 94       	cli
 7d8:	de bf       	out	0x3e, r29	; 62
 7da:	0f be       	out	0x3f, r0	; 63
 7dc:	cd bf       	out	0x3d, r28	; 61
 7de:	ed 01       	movw	r28, r26
 7e0:	08 95       	ret

000007e2 <_exit>:
 7e2:	f8 94       	cli

000007e4 <__stop_program>:
 7e4:	ff cf       	rjmp	.-2      	; 0x7e4 <__stop_program>
