
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000966  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000304  00800060  00800060  000009da  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000009da  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000ef  00000000  00000000  000009fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004a2  00000000  00000000  00000ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001fa  00000000  00000000  00000f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000009a1  00000000  00000000  00001185  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00001b28  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d0  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000024a  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c0  00000000  00000000  00001fb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__ctors_end>
   4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
   8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
   c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
  10:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
  14:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
  18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_6>
  1c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
  20:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
  24:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_9>
  28:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
  2c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
  30:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
  34:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
  38:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
  3c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
  40:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
  44:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
  48:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
  4c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
  50:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>

00000054 <symbol>:
  54:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
  64:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
  74:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
  84:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
  94:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
  a4:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
  b4:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
  c4:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
  d4:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
  e4:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
  f4:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 104:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 114:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 124:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 134:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 144:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 154:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 164:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 174:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 184:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 194:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 1a4:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 1b4:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 1c4:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 1d4:	00 00 00 00 00 00 00 00 00 00 00 00 00 10 10 10     ................
 1e4:	10 10 10 10 00 10 00 00 00 28 28 28 00 00 00 00     .........(((....
 1f4:	00 00 00 00 00 14 14 7e 28 28 28 fc 50 50 00 00     .......~(((.PP..
 204:	00 10 38 44 40 38 04 44 38 10 00 00 00 40 a2 44     ..8D@8.D8....@.D
 214:	08 10 20 44 8a 04 00 00 00 30 50 50 20 60 92 94     .. D.....0PP `..
 224:	88 76 00 00 00 10 10 10 00 00 00 00 00 00 00 00     .v..............
 234:	00 08 10 10 20 20 20 20 20 10 10 08 00 20 10 10     ....     .... ..
 244:	08 08 08 08 08 10 10 20 00 00 00 6c 38 fe 38 6c     ....... ...l8.8l

00000254 <str1>:
 254:	41 69 6d 73 20 49 6e 74 65 72 61 63 74 69 76 65     Aims Interactive
 264:	20 56 69 64 65 6f 20 54 65 73 74 31 2e 30 00         Video Test1.0.

00000273 <str2>:
 273:	53 69 6d 70 6c 65 20 56 47 41 20 74 65 72 6d 69     Simple VGA termi
 283:	6e 61 6c 00                                         nal.

00000287 <str3>:
 287:	76 31 2e 32 20 55 41 52 54 2d 31 39 32 30 30 20     v1.2 UART-19200 
 297:	62 70 73 00 00                                      bps..

0000029c <__ctors_end>:
 29c:	11 24       	eor	r1, r1
 29e:	1f be       	out	0x3f, r1	; 63
 2a0:	cf e5       	ldi	r28, 0x5F	; 95
 2a2:	d4 e0       	ldi	r29, 0x04	; 4
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	cd bf       	out	0x3d, r28	; 61

000002a8 <__do_clear_bss>:
 2a8:	13 e0       	ldi	r17, 0x03	; 3
 2aa:	a0 e6       	ldi	r26, 0x60	; 96
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <.do_clear_bss_start>

000002b0 <.do_clear_bss_loop>:
 2b0:	1d 92       	st	X+, r1

000002b2 <.do_clear_bss_start>:
 2b2:	a4 36       	cpi	r26, 0x64	; 100
 2b4:	b1 07       	cpc	r27, r17
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <.do_clear_bss_loop>
 2b8:	0e 94 65 04 	call	0x8ca	; 0x8ca <main>
 2bc:	0c 94 b1 04 	jmp	0x962	; 0x962 <_exit>

000002c0 <__bad_interrupt>:
 2c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002c4 <__vector_9>:

static void avr_init(void);

//All VGA sincronize made here..
SIGNAL(SIG_OVERFLOW0)
{
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	2f 93       	push	r18
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25
 TCNT0 = 0xC3; //reload counter value
 2d4:	83 ec       	ldi	r24, 0xC3	; 195
 2d6:	82 bf       	out	0x32, r24	; 50
		//******Syncronization Handler********

			//Count number of lines
			if (++linecount == vga_field_line_count)
 2d8:	80 91 66 00 	lds	r24, 0x0066
 2dc:	90 91 67 00 	lds	r25, 0x0067
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	90 93 67 00 	sts	0x0067, r25
 2e6:	80 93 66 00 	sts	0x0066, r24
 2ea:	80 91 66 00 	lds	r24, 0x0066
 2ee:	90 91 67 00 	lds	r25, 0x0067
 2f2:	8d 50       	subi	r24, 0x0D	; 13
 2f4:	92 40       	sbci	r25, 0x02	; 2
 2f6:	41 f4       	brne	.+16     	; 0x308 <__vector_9+0x44>
			{
			linecount = 0;
 2f8:	10 92 67 00 	sts	0x0067, r1
 2fc:	10 92 66 00 	sts	0x0066, r1
			
			//clear pointers for render display buffer
			raw_render = 0; 
 300:	10 92 62 03 	sts	0x0362, r1
			y_line_render = 0;
 304:	10 92 68 00 	sts	0x0068, r1
			}

			//Make Vsync length 2 VGA lines 
			if ((linecount == 10 )||(linecount == 11 ))
 308:	80 91 66 00 	lds	r24, 0x0066
 30c:	90 91 67 00 	lds	r25, 0x0067
 310:	0a 97       	sbiw	r24, 0x0a	; 10
 312:	31 f0       	breq	.+12     	; 0x320 <__vector_9+0x5c>
 314:	80 91 66 00 	lds	r24, 0x0066
 318:	90 91 67 00 	lds	r25, 0x0067
 31c:	0b 97       	sbiw	r24, 0x0b	; 11
 31e:	11 f4       	brne	.+4      	; 0x324 <__vector_9+0x60>
			{
				//Make here vertical syncronization & HSYNC syncro level on
				vsync_on;
 320:	12 ba       	out	0x12, r1	; 18
 322:	02 c0       	rjmp	.+4      	; 0x328 <__vector_9+0x64>
			}
			else
			{
				//.. & HSYNC syncro level on
				vsync_off;
 324:	84 e0       	ldi	r24, 0x04	; 4
 326:	82 bb       	out	0x12, r24	; 18
			}
		
		
			video_enable_flg = true;
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 93 63 03 	sts	0x0363, r24


			if (linecount < 45)
 32e:	80 91 66 00 	lds	r24, 0x0066
 332:	90 91 67 00 	lds	r25, 0x0067
 336:	8d 97       	sbiw	r24, 0x2d	; 45
 338:	90 f4       	brcc	.+36     	; 0x35e <__vector_9+0x9a>
			{
				video_enable_flg = false;
 33a:	10 92 63 03 	sts	0x0363, r1
					//Add to avoid flickering at top display
					NOP;
 33e:	00 00       	nop
					NOP;
 340:	00 00       	nop
					NOP;
 342:	00 00       	nop
					NOP;
 344:	00 00       	nop
					NOP;
 346:	00 00       	nop
					NOP;
 348:	00 00       	nop
					NOP;
 34a:	00 00       	nop
					NOP;
 34c:	00 00       	nop
					NOP;
 34e:	00 00       	nop
					NOP;
 350:	00 00       	nop
					NOP;
 352:	00 00       	nop
					NOP;
 354:	00 00       	nop
					NOP;
 356:	00 00       	nop
					NOP;
 358:	00 00       	nop
					NOP;
 35a:	00 00       	nop
 35c:	19 c0       	rjmp	.+50     	; 0x390 <__vector_9+0xcc>
					
			}
			else
			{
				 //Forming current string for rendering
				 if (++y_line_render == vga_symbol_height)
 35e:	80 91 68 00 	lds	r24, 0x0068
 362:	8f 5f       	subi	r24, 0xFF	; 255
 364:	80 93 68 00 	sts	0x0068, r24
 368:	80 91 68 00 	lds	r24, 0x0068
 36c:	88 31       	cpi	r24, 0x18	; 24
 36e:	41 f4       	brne	.+16     	; 0x380 <__vector_9+0xbc>
				 {
				  raw_render++;
 370:	80 91 62 03 	lds	r24, 0x0362
 374:	8f 5f       	subi	r24, 0xFF	; 255
 376:	80 93 62 03 	sts	0x0362, r24
				  y_line_render = 0;
 37a:	10 92 68 00 	sts	0x0068, r1
 37e:	08 c0       	rjmp	.+16     	; 0x390 <__vector_9+0xcc>
				 }
				 else
				 {
					NOP;
 380:	00 00       	nop
					NOP;
 382:	00 00       	nop
					NOP;
 384:	00 00       	nop
					NOP;
 386:	00 00       	nop
					NOP;
 388:	00 00       	nop
					NOP;
 38a:	00 00       	nop
					NOP;
 38c:	00 00       	nop
					NOP;
 38e:	00 00       	nop
				 }
		
			}
		
			hsync_off; //HSYNC syncro level off
 390:	93 9a       	sbi	0x12, 3	; 18
		
		//******Syncronization Handler********

}
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	2f 91       	pop	r18
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <__vector_6>:

//All PAL sincronize made here..
SIGNAL(SIG_OUTPUT_COMPARE1A)
{
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	2f 93       	push	r18
 3ae:	8f 93       	push	r24
 3b0:	9f 93       	push	r25
			
	//Count number of lines
	
	if (++linecount == pal_field_line_count)
 3b2:	80 91 66 00 	lds	r24, 0x0066
 3b6:	90 91 67 00 	lds	r25, 0x0067
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	90 93 67 00 	sts	0x0067, r25
 3c0:	80 93 66 00 	sts	0x0066, r24
 3c4:	80 91 66 00 	lds	r24, 0x0066
 3c8:	90 91 67 00 	lds	r25, 0x0067
 3cc:	88 53       	subi	r24, 0x38	; 56
 3ce:	91 40       	sbci	r25, 0x01	; 1
 3d0:	41 f4       	brne	.+16     	; 0x3e2 <__vector_6+0x40>
	{
		linecount = 0;
 3d2:	10 92 67 00 	sts	0x0067, r1
 3d6:	10 92 66 00 	sts	0x0066, r1
		//clear pointers for render display buffer
		raw_render = 0; 
 3da:	10 92 62 03 	sts	0x0362, r1
		y_line_render = 0;
 3de:	10 92 68 00 	sts	0x0068, r1
	}
	
	//Invert HSYNC for VSYNC
	
	if (linecount > 305 && linecount < 309)
 3e2:	80 91 66 00 	lds	r24, 0x0066
 3e6:	90 91 67 00 	lds	r25, 0x0067
 3ea:	82 53       	subi	r24, 0x32	; 50
 3ec:	91 40       	sbci	r25, 0x01	; 1
 3ee:	78 f0       	brcs	.+30     	; 0x40e <__vector_6+0x6c>
 3f0:	80 91 66 00 	lds	r24, 0x0066
 3f4:	90 91 67 00 	lds	r25, 0x0067
 3f8:	85 53       	subi	r24, 0x35	; 53
 3fa:	91 40       	sbci	r25, 0x01	; 1
 3fc:	40 f4       	brcc	.+16     	; 0x40e <__vector_6+0x6c>
	{
		//Make here vertical syncronization
		
		sbi(PORTC,0); //inverted syncro level on
 3fe:	a8 9a       	sbi	0x15, 0	; 21
 400:	8f e0       	ldi	r24, 0x0F	; 15
 402:	01 c0       	rjmp	.+2      	; 0x406 <__vector_6+0x64>
		char i = 15;
		while (--i)
		{ NOP;}
 404:	00 00       	nop
	{
		//Make here vertical syncronization
		
		sbi(PORTC,0); //inverted syncro level on
		char i = 15;
		while (--i)
 406:	81 50       	subi	r24, 0x01	; 1
 408:	e9 f7       	brne	.-6      	; 0x404 <__vector_6+0x62>
		{ NOP;}
		//And "black" = 8 mksk;
		cbi(PORTC,0); //inverted syncro level off
 40a:	a8 98       	cbi	0x15, 0	; 21
 40c:	07 c0       	rjmp	.+14     	; 0x41c <__vector_6+0x7a>
	    }
	else
	{
		//Make HSYHC = 4 mksk;
		cbi(PORTC,0); //syncro level on
 40e:	a8 98       	cbi	0x15, 0	; 21
 410:	8e e1       	ldi	r24, 0x1E	; 30
 412:	01 c0       	rjmp	.+2      	; 0x416 <__vector_6+0x74>
		char i = 30;
		while (--i)
		{ NOP;}
 414:	00 00       	nop
	else
	{
		//Make HSYHC = 4 mksk;
		cbi(PORTC,0); //syncro level on
		char i = 30;
		while (--i)
 416:	81 50       	subi	r24, 0x01	; 1
 418:	e9 f7       	brne	.-6      	; 0x414 <__vector_6+0x72>
		{ NOP;}

		//And "black" = 8 mksk;
		sbi(PORTC,0); //syncro level off
 41a:	a8 9a       	sbi	0x15, 0	; 21
	}
			video_enable_flg = true;
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	80 93 63 03 	sts	0x0363, r24
			if ((linecount < 40) || (linecount > 278))
 422:	80 91 66 00 	lds	r24, 0x0066
 426:	90 91 67 00 	lds	r25, 0x0067
 42a:	88 97       	sbiw	r24, 0x28	; 40
 42c:	38 f0       	brcs	.+14     	; 0x43c <__vector_6+0x9a>
 42e:	80 91 66 00 	lds	r24, 0x0066
 432:	90 91 67 00 	lds	r25, 0x0067
 436:	87 51       	subi	r24, 0x17	; 23
 438:	91 40       	sbci	r25, 0x01	; 1
 43a:	90 f0       	brcs	.+36     	; 0x460 <__stack+0x1>
			{
				video_enable_flg = false;
 43c:	10 92 63 03 	sts	0x0363, r1
					
					//Add to avoid flickering at top display
					NOP;
 440:	00 00       	nop
					NOP;
 442:	00 00       	nop
					NOP;
 444:	00 00       	nop
					NOP;
 446:	00 00       	nop
					NOP;
 448:	00 00       	nop
					NOP;
 44a:	00 00       	nop
					NOP;
 44c:	00 00       	nop
					NOP;
 44e:	00 00       	nop
					NOP;
 450:	00 00       	nop
					NOP;
 452:	00 00       	nop
					NOP;
 454:	00 00       	nop
					NOP;
 456:	00 00       	nop
					NOP;
 458:	00 00       	nop
					NOP;
 45a:	00 00       	nop
					NOP;
 45c:	00 00       	nop
 45e:	19 c0       	rjmp	.+50     	; 0x492 <__stack+0x33>
			}
			else
			{
				 //Forming current string for rendering
				 if (++y_line_render == pal_symbol_height)
 460:	80 91 68 00 	lds	r24, 0x0068
 464:	8f 5f       	subi	r24, 0xFF	; 255
 466:	80 93 68 00 	sts	0x0068, r24
 46a:	80 91 68 00 	lds	r24, 0x0068
 46e:	8c 30       	cpi	r24, 0x0C	; 12
 470:	41 f4       	brne	.+16     	; 0x482 <__stack+0x23>
				 {
				  raw_render++;
 472:	80 91 62 03 	lds	r24, 0x0362
 476:	8f 5f       	subi	r24, 0xFF	; 255
 478:	80 93 62 03 	sts	0x0362, r24
				  y_line_render = 0;
 47c:	10 92 68 00 	sts	0x0068, r1
 480:	08 c0       	rjmp	.+16     	; 0x492 <__stack+0x33>
				 }
				 else
				 {
					NOP;
 482:	00 00       	nop
					NOP;
 484:	00 00       	nop
					NOP;
 486:	00 00       	nop
					NOP;
 488:	00 00       	nop
					NOP;
 48a:	00 00       	nop
					NOP;
 48c:	00 00       	nop
					NOP;
 48e:	00 00       	nop
					NOP;
 490:	00 00       	nop
				 }
		
			}

}
 492:	9f 91       	pop	r25
 494:	8f 91       	pop	r24
 496:	2f 91       	pop	r18
 498:	0f 90       	pop	r0
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	0f 90       	pop	r0
 49e:	1f 90       	pop	r1
 4a0:	18 95       	reti

000004a2 <spi_init>:

void spi_init (void)
{
    //Set SPI PORT DDR bits
	sbi(DDRB, 7); //SCK
 4a2:	bf 9a       	sbi	0x17, 7	; 23
	cbi(DDRB, 6); //MISO
 4a4:	be 98       	cbi	0x17, 6	; 23
	sbi(DDRB, 5); //MOSI
 4a6:	bd 9a       	sbi	0x17, 5	; 23
	sbi(DDRB, 4); //SS
 4a8:	bc 9a       	sbi	0x17, 4	; 23
	SPSR = 1 << SPI2X;
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	8e b9       	out	0x0e, r24	; 14
	SPCR = (1 << SPE) | (1 << MSTR); //SPI enable as master ,FREQ = fclk/2
 4ae:	80 e5       	ldi	r24, 0x50	; 80
 4b0:	8d b9       	out	0x0d, r24	; 13
	//That's a great pity, that we can't work with SPI with FREQ = fclk,
	//because may be possible build terminal up 40 symbol per row!!!
}
 4b2:	08 95       	ret

000004b4 <vga_render>:
					}
	}
}

void vga_render()
{
 4b4:	cf 92       	push	r12
 4b6:	df 92       	push	r13
 4b8:	ef 92       	push	r14
 4ba:	ff 92       	push	r15
 4bc:	0f 93       	push	r16
 4be:	1f 93       	push	r17
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
	unsigned char i;
	char * _ptr;
	const char * _ptr1;

	//Initialize display buffer with StartUp strings
	strcpy_P(&str_array[vga_symbols_per_row*(vga_row_count-2)],&str2[0]); 	
 4c4:	81 ed       	ldi	r24, 0xD1	; 209
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	63 e7       	ldi	r22, 0x73	; 115
 4ca:	72 e0       	ldi	r23, 0x02	; 2
 4cc:	0e 94 96 04 	call	0x92c	; 0x92c <strcpy_P>
	strcpy_P(&str_array[vga_symbols_per_row*(vga_row_count-1)],&str3[0]); 	
 4d0:	85 ee       	ldi	r24, 0xE5	; 229
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	67 e8       	ldi	r22, 0x87	; 135
 4d6:	72 e0       	ldi	r23, 0x02	; 2
 4d8:	0e 94 96 04 	call	0x92c	; 0x92c <strcpy_P>

	//Enable global interrupt
	asm ("sei");
 4dc:	78 94       	sei
 4de:	c0 91 60 00 	lds	r28, 0x0060
 4e2:	d0 91 61 00 	lds	r29, 0x0061
						}
					  break;

					  //RETURN
					  case  0x0D: 
					  current_line = current_symbol / vga_symbols_per_row;
 4e6:	04 e1       	ldi	r16, 0x14	; 20
 4e8:	10 e0       	ldi	r17, 0x00	; 0
						{
							str_array[current_symbol] = ' ';
						}
						else
						{
							str_array[current_symbol] = 0x7F;
 4ea:	3f e7       	ldi	r19, 0x7F	; 127
 4ec:	c3 2e       	mov	r12, r19
					static unsigned int framecount;
					framecount++;
					//Here draw cursor
						if (framecount&0x800)
						{
							str_array[current_symbol] = ' ';
 4ee:	20 e2       	ldi	r18, 0x20	; 32
 4f0:	e2 2e       	mov	r14, r18
		if(video_enable_flg)
		{
		//OK, visible
		//Main render routine
				//Set pointer for render line (display bufffer)
				_ptr = &str_array[raw_render * vga_symbols_per_row];
 4f2:	94 e1       	ldi	r25, 0x14	; 20
 4f4:	d9 2e       	mov	r13, r25
	
				//Cycle for render line 
				i = vga_symbols_per_row;
				while(i--)
				{
					SPDR = pgm_read_byte(_ptr1 + (* _ptr++)*vga_symbol_height/2);
 4f6:	4c e0       	ldi	r20, 0x0C	; 12
				    video_on;
 4f8:	80 eb       	ldi	r24, 0xB0	; 176
 4fa:	f8 2e       	mov	r15, r24
				NOP;
				NOP;
				NOP;
				NOP;
				NOP;
				video_off;
 4fc:	30 e9       	ldi	r19, 0x90	; 144

	for(;;)
    {

		//Wait compare interrupt signal from Timer1
		sleep_mode();
 4fe:	85 b7       	in	r24, 0x35	; 53
 500:	80 64       	ori	r24, 0x40	; 64
 502:	85 bf       	out	0x35, r24	; 53
 504:	88 95       	sleep
 506:	85 b7       	in	r24, 0x35	; 53
 508:	8f 7b       	andi	r24, 0xBF	; 191
 50a:	85 bf       	out	0x35, r24	; 53
		
		//Check symbol on UART
		if (UCSRA & (1<<RXC))
 50c:	5f 9b       	sbis	0x0b, 7	; 11
 50e:	95 c0       	rjmp	.+298    	; 0x63a <vga_render+0x186>
 510:	91 c0       	rjmp	.+290    	; 0x634 <vga_render+0x180>
{
	// Parser received symbols from UART
	while(UCSRA & (1<<RXC))
	{
		unsigned char current_line, received_symbol;
		received_symbol = UDR;
 512:	2c b1       	in	r18, 0x0c	; 12
		//Check for overflow display buffer
		if(current_symbol == (vga_row_count*vga_symbols_per_row))
 514:	80 91 64 00 	lds	r24, 0x0064
 518:	90 91 65 00 	lds	r25, 0x0065
 51c:	80 59       	subi	r24, 0x90	; 144
 51e:	91 40       	sbci	r25, 0x01	; 1
 520:	21 f5       	brne	.+72     	; 0x56a <vga_render+0xb6>
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	18 c0       	rjmp	.+48     	; 0x558 <vga_render+0xa4>
			//Set pointers for clear string array
			ptr = &str_array[0];
			while(i--)
			{
				//Don't use here loop, to fastest clear display buffer
				*ptr++ = 0x0;
 528:	fc 01       	movw	r30, r24
 52a:	e7 59       	subi	r30, 0x97	; 151
 52c:	ff 4f       	sbci	r31, 0xFF	; 255
 52e:	74 97       	sbiw	r30, 0x14	; 20
 530:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 532:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 534:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 536:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 538:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 53a:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 53c:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 53e:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 540:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 542:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 544:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 546:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 548:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 54a:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 54c:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 54e:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 550:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 552:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 554:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 556:	10 82       	st	Z, r1
 558:	44 96       	adiw	r24, 0x14	; 20

			unsigned char i = vga_row_count;
			char * ptr;
			//Set pointers for clear string array
			ptr = &str_array[0];
			while(i--)
 55a:	61 e0       	ldi	r22, 0x01	; 1
 55c:	84 3a       	cpi	r24, 0xA4	; 164
 55e:	96 07       	cpc	r25, r22
 560:	19 f7       	brne	.-58     	; 0x528 <vga_render+0x74>
				*ptr++ = 0x0;
				*ptr++ = 0x0;
				*ptr++ = 0x0;
				*ptr++ = 0x0;
			};
			current_symbol = 0x0;
 562:	10 92 65 00 	sts	0x0065, r1
 566:	10 92 64 00 	sts	0x0064, r1
		}
					switch ( received_symbol )
 56a:	29 30       	cpi	r18, 0x09	; 9
 56c:	21 f1       	breq	.+72     	; 0x5b6 <vga_render+0x102>
 56e:	2d 30       	cpi	r18, 0x0D	; 13
 570:	b9 f1       	breq	.+110    	; 0x5e0 <vga_render+0x12c>
 572:	28 30       	cpi	r18, 0x08	; 8
 574:	09 f0       	breq	.+2      	; 0x578 <vga_render+0xc4>
 576:	51 c0       	rjmp	.+162    	; 0x61a <vga_render+0x166>
					{
					  //BackSpace
					  case  0x08: 
					  if(current_symbol)
 578:	80 91 64 00 	lds	r24, 0x0064
 57c:	90 91 65 00 	lds	r25, 0x0065
 580:	89 2b       	or	r24, r25
 582:	09 f4       	brne	.+2      	; 0x586 <vga_render+0xd2>
 584:	57 c0       	rjmp	.+174    	; 0x634 <vga_render+0x180>
					    {
							str_array[current_symbol] = 0x0;
 586:	e0 91 64 00 	lds	r30, 0x0064
 58a:	f0 91 65 00 	lds	r31, 0x0065
 58e:	e7 59       	subi	r30, 0x97	; 151
 590:	ff 4f       	sbci	r31, 0xFF	; 255
 592:	10 82       	st	Z, r1
							str_array[--current_symbol] = 0x0;
 594:	80 91 64 00 	lds	r24, 0x0064
 598:	90 91 65 00 	lds	r25, 0x0065
 59c:	01 97       	sbiw	r24, 0x01	; 1
 59e:	90 93 65 00 	sts	0x0065, r25
 5a2:	80 93 64 00 	sts	0x0064, r24
 5a6:	e0 91 64 00 	lds	r30, 0x0064
 5aa:	f0 91 65 00 	lds	r31, 0x0065
 5ae:	e7 59       	subi	r30, 0x97	; 151
 5b0:	ff 4f       	sbci	r31, 0xFF	; 255
 5b2:	10 82       	st	Z, r1
 5b4:	3f c0       	rjmp	.+126    	; 0x634 <vga_render+0x180>
						}
					  break;
					  
					  //TAB
					  case  0x09: 
					  if((current_symbol + 5) < (vga_row_count*vga_symbols_per_row))
 5b6:	80 91 64 00 	lds	r24, 0x0064
 5ba:	90 91 65 00 	lds	r25, 0x0065
 5be:	05 96       	adiw	r24, 0x05	; 5
 5c0:	80 59       	subi	r24, 0x90	; 144
 5c2:	91 40       	sbci	r25, 0x01	; 1
 5c4:	b8 f5       	brcc	.+110    	; 0x634 <vga_render+0x180>
					    {
							//Add 5 Space
							str_array[current_symbol] = 0x0;
 5c6:	e0 91 64 00 	lds	r30, 0x0064
 5ca:	f0 91 65 00 	lds	r31, 0x0065
 5ce:	e7 59       	subi	r30, 0x97	; 151
 5d0:	ff 4f       	sbci	r31, 0xFF	; 255
 5d2:	10 82       	st	Z, r1
							current_symbol += 5;
 5d4:	80 91 64 00 	lds	r24, 0x0064
 5d8:	90 91 65 00 	lds	r25, 0x0065
 5dc:	05 96       	adiw	r24, 0x05	; 5
 5de:	26 c0       	rjmp	.+76     	; 0x62c <vga_render+0x178>
						}
					  break;

					  //RETURN
					  case  0x0D: 
					  current_line = current_symbol / vga_symbols_per_row;
 5e0:	80 91 64 00 	lds	r24, 0x0064
 5e4:	90 91 65 00 	lds	r25, 0x0065
 5e8:	64 e1       	ldi	r22, 0x14	; 20
 5ea:	70 e0       	ldi	r23, 0x00	; 0
 5ec:	0e 94 9d 04 	call	0x93a	; 0x93a <__udivmodhi4>
					  if((current_line) < 19)
 5f0:	63 31       	cpi	r22, 0x13	; 19
 5f2:	00 f5       	brcc	.+64     	; 0x634 <vga_render+0x180>
					    {
							str_array[current_symbol] = 0x0;
 5f4:	e0 91 64 00 	lds	r30, 0x0064
 5f8:	f0 91 65 00 	lds	r31, 0x0065
 5fc:	e7 59       	subi	r30, 0x97	; 151
 5fe:	ff 4f       	sbci	r31, 0xFF	; 255
 600:	10 82       	st	Z, r1
							current_symbol = current_line*vga_symbols_per_row + vga_symbols_per_row;
 602:	86 2f       	mov	r24, r22
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	01 96       	adiw	r24, 0x01	; 1
 608:	bc 01       	movw	r22, r24
 60a:	60 9f       	mul	r22, r16
 60c:	c0 01       	movw	r24, r0
 60e:	61 9f       	mul	r22, r17
 610:	90 0d       	add	r25, r0
 612:	70 9f       	mul	r23, r16
 614:	90 0d       	add	r25, r0
 616:	11 24       	eor	r1, r1
 618:	09 c0       	rjmp	.+18     	; 0x62c <vga_render+0x178>
						}
					  break;
					  default: str_array[current_symbol++] = received_symbol;
 61a:	80 91 64 00 	lds	r24, 0x0064
 61e:	90 91 65 00 	lds	r25, 0x0065
 622:	fc 01       	movw	r30, r24
 624:	e7 59       	subi	r30, 0x97	; 151
 626:	ff 4f       	sbci	r31, 0xFF	; 255
 628:	20 83       	st	Z, r18
 62a:	01 96       	adiw	r24, 0x01	; 1
 62c:	90 93 65 00 	sts	0x0065, r25
 630:	80 93 64 00 	sts	0x0064, r24
}

static void vga_terminal_handle(void)
{
	// Parser received symbols from UART
	while(UCSRA & (1<<RXC))
 634:	5f 99       	sbic	0x0b, 7	; 11
 636:	6d cf       	rjmp	.-294    	; 0x512 <vga_render+0x5e>
 638:	62 cf       	rjmp	.-316    	; 0x4fe <vga_render+0x4a>
			vga_terminal_handle();
			continue;
		}
		
		//Check visible field
		if(video_enable_flg)
 63a:	80 91 63 03 	lds	r24, 0x0363
 63e:	88 23       	and	r24, r24
 640:	21 f1       	breq	.+72     	; 0x68a <vga_render+0x1d6>
		{
		//OK, visible
		//Main render routine
				//Set pointer for render line (display bufffer)
				_ptr = &str_array[raw_render * vga_symbols_per_row];
 642:	80 91 62 03 	lds	r24, 0x0362
 646:	8d 9d       	mul	r24, r13
 648:	d0 01       	movw	r26, r0
 64a:	11 24       	eor	r1, r1
 64c:	a7 59       	subi	r26, 0x97	; 151
 64e:	bf 4f       	sbci	r27, 0xFF	; 255

				//Set pointer for render line (character generator)
				_ptr1 = &symbol[0][y_line_render >> 1];
 650:	80 91 68 00 	lds	r24, 0x0068
 654:	86 95       	lsr	r24
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	8c 5a       	subi	r24, 0xAC	; 172
 65a:	9f 4f       	sbci	r25, 0xFF	; 255
 65c:	24 e1       	ldi	r18, 0x14	; 20
 65e:	0b c0       	rjmp	.+22     	; 0x676 <vga_render+0x1c2>
	
				//Cycle for render line 
				i = vga_symbols_per_row;
				while(i--)
				{
					SPDR = pgm_read_byte(_ptr1 + (* _ptr++)*vga_symbol_height/2);
 660:	ed 91       	ld	r30, X+
 662:	e4 9f       	mul	r30, r20
 664:	f0 01       	movw	r30, r0
 666:	11 24       	eor	r1, r1
 668:	e8 0f       	add	r30, r24
 66a:	f9 1f       	adc	r31, r25
 66c:	e4 91       	lpm	r30, Z+
 66e:	ef b9       	out	0x0f, r30	; 15
				    video_on;
 670:	f7 ba       	out	0x17, r15	; 23
					//That's a great pity can't shift data faster (8Mhz at FOSC=16Mhz)!!
					NOP;
 672:	00 00       	nop
					NOP;
 674:	00 00       	nop
				//Set pointer for render line (character generator)
				_ptr1 = &symbol[0][y_line_render >> 1];
	
				//Cycle for render line 
				i = vga_symbols_per_row;
				while(i--)
 676:	21 50       	subi	r18, 0x01	; 1
 678:	98 f7       	brcc	.-26     	; 0x660 <vga_render+0x1ac>
					//That's a great pity can't shift data faster (8Mhz at FOSC=16Mhz)!!
					NOP;
					NOP;
				}
				//Delay for draw last symbol
				NOP;
 67a:	00 00       	nop
				NOP;
 67c:	00 00       	nop
				NOP;
 67e:	00 00       	nop
				NOP;
 680:	00 00       	nop
				NOP;
 682:	00 00       	nop
				NOP;
 684:	00 00       	nop
				video_off;
 686:	37 bb       	out	0x17, r19	; 23
 688:	3a cf       	rjmp	.-396    	; 0x4fe <vga_render+0x4a>
		//Not visible
		//Can do something else..	
					//******Cursor handle
					//Count frame
					static unsigned int framecount;
					framecount++;
 68a:	21 96       	adiw	r28, 0x01	; 1
					//Here draw cursor
						if (framecount&0x800)
 68c:	d3 ff       	sbrs	r29, 3
 68e:	08 c0       	rjmp	.+16     	; 0x6a0 <vga_render+0x1ec>
						{
							str_array[current_symbol] = ' ';
 690:	e0 91 64 00 	lds	r30, 0x0064
 694:	f0 91 65 00 	lds	r31, 0x0065
 698:	e7 59       	subi	r30, 0x97	; 151
 69a:	ff 4f       	sbci	r31, 0xFF	; 255
 69c:	e0 82       	st	Z, r14
 69e:	2f cf       	rjmp	.-418    	; 0x4fe <vga_render+0x4a>
						}
						else
						{
							str_array[current_symbol] = 0x7F;
 6a0:	e0 91 64 00 	lds	r30, 0x0064
 6a4:	f0 91 65 00 	lds	r31, 0x0065
 6a8:	e7 59       	subi	r30, 0x97	; 151
 6aa:	ff 4f       	sbci	r31, 0xFF	; 255
 6ac:	c0 82       	st	Z, r12
 6ae:	27 cf       	rjmp	.-434    	; 0x4fe <vga_render+0x4a>

000006b0 <pal_render>:
					}
	}
}

void pal_render(void)
{
 6b0:	cf 92       	push	r12
 6b2:	df 92       	push	r13
 6b4:	ef 92       	push	r14
 6b6:	ff 92       	push	r15
 6b8:	0f 93       	push	r16
 6ba:	1f 93       	push	r17
 6bc:	cf 93       	push	r28
 6be:	df 93       	push	r29
	unsigned char i;
	char * _ptr;
	const char * _ptr1;
	//Initialize display buffer with StartUp strings
	strcpy_P(&str_array[pal_symbols_per_row*(pal_row_count-1)],&str1[0]); 	
 6c0:	8b e3       	ldi	r24, 0x3B	; 59
 6c2:	93 e0       	ldi	r25, 0x03	; 3
 6c4:	64 e5       	ldi	r22, 0x54	; 84
 6c6:	72 e0       	ldi	r23, 0x02	; 2
 6c8:	0e 94 96 04 	call	0x92c	; 0x92c <strcpy_P>
	
	//Enable global interrupt
	asm ("sei");
 6cc:	78 94       	sei
 6ce:	c0 91 62 00 	lds	r28, 0x0062
 6d2:	d0 91 63 00 	lds	r29, 0x0063
						}
					  break;

					  //RETURN
					  case  0x0D: 
					  current_line = current_symbol / pal_symbols_per_row;
 6d6:	06 e2       	ldi	r16, 0x26	; 38
 6d8:	10 e0       	ldi	r17, 0x00	; 0
						{
							str_array[current_symbol] = ' ';
						}
						else
						{
							str_array[current_symbol] = 0x7F;
 6da:	ef e7       	ldi	r30, 0x7F	; 127
 6dc:	ce 2e       	mov	r12, r30
					static unsigned int framecount;
					framecount++;
					//Here draw cursor
						if (framecount&0x800)
						{
							str_array[current_symbol] = ' ';
 6de:	70 e2       	ldi	r23, 0x20	; 32
 6e0:	e7 2e       	mov	r14, r23
		if(video_enable_flg)
		{
		//OK, visible
		//Main render routine
				//Set pointer for render line (display bufffer)
				_ptr = &str_array[raw_render * pal_symbols_per_row];
 6e2:	66 e2       	ldi	r22, 0x26	; 38
 6e4:	d6 2e       	mov	r13, r22
				//Set pointer for render line (character generator)
				_ptr1 = &symbol[0][y_line_render];
	
				//Cycle for render line 
				i = pal_symbols_per_row;
				video_on;
 6e6:	30 eb       	ldi	r19, 0xB0	; 176
				while(i--)
				{
					SPDR = pgm_read_byte(_ptr1 + (* _ptr++)*pal_symbol_height);
 6e8:	4c e0       	ldi	r20, 0x0C	; 12
				}
				//Delay for draw last symbol
				i=6;
				while(i--) NOP;
				
				video_off;
 6ea:	50 e9       	ldi	r21, 0x90	; 144
 6ec:	f5 2e       	mov	r15, r21

	for(;;)
    {

		//Wait compare interrupt signal from Timer1
		sleep_mode();
 6ee:	85 b7       	in	r24, 0x35	; 53
 6f0:	80 64       	ori	r24, 0x40	; 64
 6f2:	85 bf       	out	0x35, r24	; 53
 6f4:	88 95       	sleep
 6f6:	85 b7       	in	r24, 0x35	; 53
 6f8:	8f 7b       	andi	r24, 0xBF	; 191
 6fa:	85 bf       	out	0x35, r24	; 53
		
		//Check symbol on UART
		if (UCSRA & (1<<RXC))
 6fc:	5f 99       	sbic	0x0b, 7	; 11
 6fe:	a5 c0       	rjmp	.+330    	; 0x84a <pal_render+0x19a>
 700:	8e e0       	ldi	r24, 0x0E	; 14
 702:	a7 c0       	rjmp	.+334    	; 0x852 <pal_render+0x1a2>
{
	// Parser received symbols from UART
	while(UCSRA & (1<<RXC))
	{
		unsigned char current_line, received_symbol;
		received_symbol = UDR;
 704:	2c b1       	in	r18, 0x0c	; 12
		//Check for overflow display buffer
		if(current_symbol == (pal_row_count*pal_symbols_per_row))
 706:	80 91 64 00 	lds	r24, 0x0064
 70a:	90 91 65 00 	lds	r25, 0x0065
 70e:	88 5f       	subi	r24, 0xF8	; 248
 710:	92 40       	sbci	r25, 0x02	; 2
 712:	b1 f5       	brne	.+108    	; 0x780 <pal_render+0xd0>
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	2a c0       	rjmp	.+84     	; 0x76e <pal_render+0xbe>
			//Set pointers for clear string array
			ptr = &str_array[0];
			while(i--)
			{
				//Don't use here loop, to fastest clear display buffer
				*ptr++ = 0x0;
 71a:	fc 01       	movw	r30, r24
 71c:	e7 59       	subi	r30, 0x97	; 151
 71e:	ff 4f       	sbci	r31, 0xFF	; 255
 720:	b6 97       	sbiw	r30, 0x26	; 38
 722:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 724:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 726:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 728:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 72a:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 72c:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 72e:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 730:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 732:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 734:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 736:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 738:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 73a:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 73c:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 73e:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 740:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 742:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 744:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 746:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 748:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 74a:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 74c:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 74e:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 750:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 752:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 754:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 756:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 758:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 75a:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 75c:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 75e:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 760:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 762:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 764:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 766:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 768:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 76a:	11 92       	st	Z+, r1
				*ptr++ = 0x0;
 76c:	10 82       	st	Z, r1
 76e:	86 96       	adiw	r24, 0x26	; 38

			unsigned char i = pal_row_count;
			char * ptr;
			//Set pointers for clear string array
			ptr = &str_array[0];
			while(i--)
 770:	63 e0       	ldi	r22, 0x03	; 3
 772:	8e 31       	cpi	r24, 0x1E	; 30
 774:	96 07       	cpc	r25, r22
 776:	89 f6       	brne	.-94     	; 0x71a <pal_render+0x6a>
				*ptr++ = 0x0;
				*ptr++ = 0x0;
				*ptr++ = 0x0;
				*ptr++ = 0x0;
			};
			current_symbol = 0x0;
 778:	10 92 65 00 	sts	0x0065, r1
 77c:	10 92 64 00 	sts	0x0064, r1
		}
					switch ( received_symbol )
 780:	29 30       	cpi	r18, 0x09	; 9
 782:	21 f1       	breq	.+72     	; 0x7cc <pal_render+0x11c>
 784:	2d 30       	cpi	r18, 0x0D	; 13
 786:	b9 f1       	breq	.+110    	; 0x7f6 <pal_render+0x146>
 788:	28 30       	cpi	r18, 0x08	; 8
 78a:	09 f0       	breq	.+2      	; 0x78e <pal_render+0xde>
 78c:	51 c0       	rjmp	.+162    	; 0x830 <pal_render+0x180>
					{
					  //BackSpace
					  case  0x08: 
					  if(current_symbol)
 78e:	80 91 64 00 	lds	r24, 0x0064
 792:	90 91 65 00 	lds	r25, 0x0065
 796:	89 2b       	or	r24, r25
 798:	09 f4       	brne	.+2      	; 0x79c <pal_render+0xec>
 79a:	57 c0       	rjmp	.+174    	; 0x84a <pal_render+0x19a>
					    {
							str_array[current_symbol] = 0x0;
 79c:	e0 91 64 00 	lds	r30, 0x0064
 7a0:	f0 91 65 00 	lds	r31, 0x0065
 7a4:	e7 59       	subi	r30, 0x97	; 151
 7a6:	ff 4f       	sbci	r31, 0xFF	; 255
 7a8:	10 82       	st	Z, r1
							str_array[--current_symbol] = 0x0;
 7aa:	80 91 64 00 	lds	r24, 0x0064
 7ae:	90 91 65 00 	lds	r25, 0x0065
 7b2:	01 97       	sbiw	r24, 0x01	; 1
 7b4:	90 93 65 00 	sts	0x0065, r25
 7b8:	80 93 64 00 	sts	0x0064, r24
 7bc:	e0 91 64 00 	lds	r30, 0x0064
 7c0:	f0 91 65 00 	lds	r31, 0x0065
 7c4:	e7 59       	subi	r30, 0x97	; 151
 7c6:	ff 4f       	sbci	r31, 0xFF	; 255
 7c8:	10 82       	st	Z, r1
 7ca:	3f c0       	rjmp	.+126    	; 0x84a <pal_render+0x19a>
						}
					  break;
					  
					  //TAB
					  case  0x09: 
					  if((current_symbol + 5) < (pal_row_count*pal_symbols_per_row))
 7cc:	80 91 64 00 	lds	r24, 0x0064
 7d0:	90 91 65 00 	lds	r25, 0x0065
 7d4:	05 96       	adiw	r24, 0x05	; 5
 7d6:	88 5f       	subi	r24, 0xF8	; 248
 7d8:	92 40       	sbci	r25, 0x02	; 2
 7da:	b8 f5       	brcc	.+110    	; 0x84a <pal_render+0x19a>
					    {
							//Add 5 Space
							str_array[current_symbol] = 0x0;
 7dc:	e0 91 64 00 	lds	r30, 0x0064
 7e0:	f0 91 65 00 	lds	r31, 0x0065
 7e4:	e7 59       	subi	r30, 0x97	; 151
 7e6:	ff 4f       	sbci	r31, 0xFF	; 255
 7e8:	10 82       	st	Z, r1
							current_symbol += 5;
 7ea:	80 91 64 00 	lds	r24, 0x0064
 7ee:	90 91 65 00 	lds	r25, 0x0065
 7f2:	05 96       	adiw	r24, 0x05	; 5
 7f4:	26 c0       	rjmp	.+76     	; 0x842 <pal_render+0x192>
						}
					  break;

					  //RETURN
					  case  0x0D: 
					  current_line = current_symbol / pal_symbols_per_row;
 7f6:	80 91 64 00 	lds	r24, 0x0064
 7fa:	90 91 65 00 	lds	r25, 0x0065
 7fe:	66 e2       	ldi	r22, 0x26	; 38
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	0e 94 9d 04 	call	0x93a	; 0x93a <__udivmodhi4>
					  if((current_line) < 19)
 806:	63 31       	cpi	r22, 0x13	; 19
 808:	00 f5       	brcc	.+64     	; 0x84a <pal_render+0x19a>
					    {
							str_array[current_symbol] = 0x0;
 80a:	e0 91 64 00 	lds	r30, 0x0064
 80e:	f0 91 65 00 	lds	r31, 0x0065
 812:	e7 59       	subi	r30, 0x97	; 151
 814:	ff 4f       	sbci	r31, 0xFF	; 255
 816:	10 82       	st	Z, r1
							current_symbol = current_line*pal_symbols_per_row + pal_symbols_per_row;
 818:	86 2f       	mov	r24, r22
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	01 96       	adiw	r24, 0x01	; 1
 81e:	bc 01       	movw	r22, r24
 820:	60 9f       	mul	r22, r16
 822:	c0 01       	movw	r24, r0
 824:	61 9f       	mul	r22, r17
 826:	90 0d       	add	r25, r0
 828:	70 9f       	mul	r23, r16
 82a:	90 0d       	add	r25, r0
 82c:	11 24       	eor	r1, r1
 82e:	09 c0       	rjmp	.+18     	; 0x842 <pal_render+0x192>
						}
					  break;
					  default: str_array[current_symbol++] = received_symbol;
 830:	80 91 64 00 	lds	r24, 0x0064
 834:	90 91 65 00 	lds	r25, 0x0065
 838:	fc 01       	movw	r30, r24
 83a:	e7 59       	subi	r30, 0x97	; 151
 83c:	ff 4f       	sbci	r31, 0xFF	; 255
 83e:	20 83       	st	Z, r18
 840:	01 96       	adiw	r24, 0x01	; 1
 842:	90 93 65 00 	sts	0x0065, r25
 846:	80 93 64 00 	sts	0x0064, r24


static void pal_terminal_handle(void)
{
	// Parser received symbols from UART
	while(UCSRA & (1<<RXC))
 84a:	5f 99       	sbic	0x0b, 7	; 11
 84c:	5b cf       	rjmp	.-330    	; 0x704 <pal_render+0x54>
 84e:	4f cf       	rjmp	.-354    	; 0x6ee <pal_render+0x3e>
			//to avoid display flickering
			continue;
		}
		//To make horizontal shift rendered image
		i=14;
		while(i--) NOP;
 850:	00 00       	nop
 852:	81 50       	subi	r24, 0x01	; 1
 854:	e8 f7       	brcc	.-6      	; 0x850 <pal_render+0x1a0>
		//Check visible field
		if(video_enable_flg)
 856:	80 91 63 03 	lds	r24, 0x0363
 85a:	88 23       	and	r24, r24
 85c:	19 f1       	breq	.+70     	; 0x8a4 <pal_render+0x1f4>
		{
		//OK, visible
		//Main render routine
				//Set pointer for render line (display bufffer)
				_ptr = &str_array[raw_render * pal_symbols_per_row];
 85e:	80 91 62 03 	lds	r24, 0x0362
 862:	8d 9d       	mul	r24, r13
 864:	d0 01       	movw	r26, r0
 866:	11 24       	eor	r1, r1
 868:	a7 59       	subi	r26, 0x97	; 151
 86a:	bf 4f       	sbci	r27, 0xFF	; 255

				//Set pointer for render line (character generator)
				_ptr1 = &symbol[0][y_line_render];
 86c:	80 91 68 00 	lds	r24, 0x0068
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	8c 5a       	subi	r24, 0xAC	; 172
 874:	9f 4f       	sbci	r25, 0xFF	; 255
	
				//Cycle for render line 
				i = pal_symbols_per_row;
				video_on;
 876:	37 bb       	out	0x17, r19	; 23
 878:	26 e2       	ldi	r18, 0x26	; 38
 87a:	0b c0       	rjmp	.+22     	; 0x892 <pal_render+0x1e2>
				while(i--)
				{
					SPDR = pgm_read_byte(_ptr1 + (* _ptr++)*pal_symbol_height);
 87c:	ed 91       	ld	r30, X+
 87e:	e4 9f       	mul	r30, r20
 880:	f0 01       	movw	r30, r0
 882:	11 24       	eor	r1, r1
 884:	e8 0f       	add	r30, r24
 886:	f9 1f       	adc	r31, r25
 888:	e4 91       	lpm	r30, Z+
 88a:	ef b9       	out	0x0f, r30	; 15
					//That's a great pity can't shift data faster (8Mhz at FOSC=16Mhz)!!
					NOP;
 88c:	00 00       	nop
					NOP;
 88e:	00 00       	nop
					NOP;
 890:	00 00       	nop
				_ptr1 = &symbol[0][y_line_render];
	
				//Cycle for render line 
				i = pal_symbols_per_row;
				video_on;
				while(i--)
 892:	21 50       	subi	r18, 0x01	; 1
 894:	98 f7       	brcc	.-26     	; 0x87c <pal_render+0x1cc>
 896:	86 e0       	ldi	r24, 0x06	; 6
 898:	01 c0       	rjmp	.+2      	; 0x89c <pal_render+0x1ec>
					NOP;
					NOP;
				}
				//Delay for draw last symbol
				i=6;
				while(i--) NOP;
 89a:	00 00       	nop
 89c:	81 50       	subi	r24, 0x01	; 1
 89e:	e8 f7       	brcc	.-6      	; 0x89a <pal_render+0x1ea>
				
				video_off;
 8a0:	f7 ba       	out	0x17, r15	; 23
 8a2:	25 cf       	rjmp	.-438    	; 0x6ee <pal_render+0x3e>
		//Not visible
		//Can do something else..	
					//******Cursor handle
					//Count frame
					static unsigned int framecount;
					framecount++;
 8a4:	21 96       	adiw	r28, 0x01	; 1
					//Here draw cursor
						if (framecount&0x800)
 8a6:	d3 ff       	sbrs	r29, 3
 8a8:	08 c0       	rjmp	.+16     	; 0x8ba <pal_render+0x20a>
						{
							str_array[current_symbol] = ' ';
 8aa:	e0 91 64 00 	lds	r30, 0x0064
 8ae:	f0 91 65 00 	lds	r31, 0x0065
 8b2:	e7 59       	subi	r30, 0x97	; 151
 8b4:	ff 4f       	sbci	r31, 0xFF	; 255
 8b6:	e0 82       	st	Z, r14
 8b8:	1a cf       	rjmp	.-460    	; 0x6ee <pal_render+0x3e>
						}
						else
						{
							str_array[current_symbol] = 0x7F;
 8ba:	e0 91 64 00 	lds	r30, 0x0064
 8be:	f0 91 65 00 	lds	r31, 0x0065
 8c2:	e7 59       	subi	r30, 0x97	; 151
 8c4:	ff 4f       	sbci	r31, 0xFF	; 255
 8c6:	c0 82       	st	Z, r12
 8c8:	12 cf       	rjmp	.-476    	; 0x6ee <pal_render+0x3e>

000008ca <main>:

static void avr_init(void)
{

  //Set pin jumper VGA/PAL
  cbi(DDRC,1);
 8ca:	a1 98       	cbi	0x14, 1	; 20
  sbi(PORTC,1);
 8cc:	a9 9a       	sbi	0x15, 1	; 21
}

void spi_init (void)
{
    //Set SPI PORT DDR bits
	sbi(DDRB, 7); //SCK
 8ce:	bf 9a       	sbi	0x17, 7	; 23
	cbi(DDRB, 6); //MISO
 8d0:	be 98       	cbi	0x17, 6	; 23
	sbi(DDRB, 5); //MOSI
 8d2:	bd 9a       	sbi	0x17, 5	; 23
	sbi(DDRB, 4); //SS
 8d4:	bc 9a       	sbi	0x17, 4	; 23
	SPSR = 1 << SPI2X;
 8d6:	91 e0       	ldi	r25, 0x01	; 1
 8d8:	9e b9       	out	0x0e, r25	; 14
	SPCR = (1 << SPE) | (1 << MSTR); //SPI enable as master ,FREQ = fclk/2
 8da:	80 e5       	ldi	r24, 0x50	; 80
 8dc:	8d b9       	out	0x0d, r24	; 13
	//because may be possible build terminal up 40 symbol per row!!!
}

static void uart_init(void)
{
	 UCSRB = 0x00; //disable while setting baud rate
 8de:	1a b8       	out	0x0a, r1	; 10
	 UCSRA = 0x00;
 8e0:	1b b8       	out	0x0b, r1	; 11
	 UCSRC = 0x86;	//8 bits data & 2 stop bits
 8e2:	86 e8       	ldi	r24, 0x86	; 134
 8e4:	80 bd       	out	0x20, r24	; 32
	//UART SPEED 19200 bs
	UBRRL = 0x33; //set baud rate lo
 8e6:	83 e3       	ldi	r24, 0x33	; 51
 8e8:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0x00; //set baud rate hi
 8ea:	10 bc       	out	0x20, r1	; 32
	//UBRRH = 0x00; //set baud rate hi
	//UART SPEED 115200 bs
	//UBRRL = 0x08; //set baud rate lo
	//UBRRH = 0x00; //set baud rate hi
	//UART RX Enable
	UCSRB = (1 << RXEN);
 8ec:	20 e1       	ldi	r18, 0x10	; 16
 8ee:	2a b9       	out	0x0a, r18	; 10

  //init uart
  uart_init();

  //Set power mode
  set_sleep_mode(SLEEP_MODE_IDLE); 	
 8f0:	85 b7       	in	r24, 0x35	; 53
 8f2:	8f 74       	andi	r24, 0x4F	; 79
 8f4:	85 bf       	out	0x35, r24	; 53

  //Check pin mode VGA/PAL
  if(check_PAL_jumper)
 8f6:	99 99       	sbic	0x13, 1	; 19
 8f8:	0a c0       	rjmp	.+20     	; 0x90e <main+0x44>
  {
	  //init PAL SYNC port
	  sbi(DDRC,0);
 8fa:	a0 9a       	sbi	0x14, 0	; 20
	  //C.0 is sync:1000 ohm + diode to 75 ohm resistor
	  //MOSI is video:330 ohm + diode to 75 ohm resistor
	  
	  // Initialize Sync for PAL
	  OCR1A = 1024; 			 //One PAL line 64us
 8fc:	80 e0       	ldi	r24, 0x00	; 0
 8fe:	94 e0       	ldi	r25, 0x04	; 4
 900:	9b bd       	out	0x2b, r25	; 43
 902:	8a bd       	out	0x2a, r24	; 42
	  TCCR1B = (1<<WGM12)|(1<<CS10);//full speed; clear-on-match
 904:	89 e0       	ldi	r24, 0x09	; 9
 906:	8e bd       	out	0x2e, r24	; 46
	  TCCR1A = 0x00;			//turn off pwm and oc lines
 908:	1f bc       	out	0x2f, r1	; 47
	  TIMSK = 1<<OCIE1A;		//enable interrupt from Timer1 CompareA
 90a:	29 bf       	out	0x39, r18	; 57
 90c:	0a c0       	rjmp	.+20     	; 0x922 <main+0x58>
  }	
  else
  {
	  //init VGA SYNC ports
	  //HSYNC
	  sbi(PORTD,3);
 90e:	93 9a       	sbi	0x12, 3	; 18
	  sbi(DDRD,3);
 910:	8b 9a       	sbi	0x11, 3	; 17
	  //VSYNC
	  sbi(PORTD,2);
 912:	92 9a       	sbi	0x12, 2	; 18
	  sbi(DDRD,2);
 914:	8a 9a       	sbi	0x11, 2	; 17
	
	  // Initialize Sync for VGA
	 TCCR0 = 0x00; //stop
 916:	13 be       	out	0x33, r1	; 51
	 TCNT0 = 0xC3; //set count, One VGA line 31.77us
 918:	83 ec       	ldi	r24, 0xC3	; 195
 91a:	82 bf       	out	0x32, r24	; 50
	 TCCR0 = 1<<CS01; //start timer with prescaler select 1/8
 91c:	82 e0       	ldi	r24, 0x02	; 2
 91e:	83 bf       	out	0x33, r24	; 51
	 TIMSK = 1<<TOV0; //enable interrupt from Timer0 overflow
 920:	99 bf       	out	0x39, r25	; 57
int main(void)
{
    avr_init();
	  //Check pin VGA/PAL
//	if(check_PAL_jumper)
	pal_render();
 922:	0e 94 58 03 	call	0x6b0	; 0x6b0 <pal_render>
/*	else
	vga_render();*/
	
    return(0);
}
 926:	80 e0       	ldi	r24, 0x00	; 0
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	08 95       	ret

0000092c <strcpy_P>:
 92c:	fb 01       	movw	r30, r22
 92e:	dc 01       	movw	r26, r24
 930:	05 90       	lpm	r0, Z+
 932:	0d 92       	st	X+, r0
 934:	00 20       	and	r0, r0
 936:	e1 f7       	brne	.-8      	; 0x930 <strcpy_P+0x4>
 938:	08 95       	ret

0000093a <__udivmodhi4>:
 93a:	aa 1b       	sub	r26, r26
 93c:	bb 1b       	sub	r27, r27
 93e:	51 e1       	ldi	r21, 0x11	; 17
 940:	07 c0       	rjmp	.+14     	; 0x950 <__udivmodhi4_ep>

00000942 <__udivmodhi4_loop>:
 942:	aa 1f       	adc	r26, r26
 944:	bb 1f       	adc	r27, r27
 946:	a6 17       	cp	r26, r22
 948:	b7 07       	cpc	r27, r23
 94a:	10 f0       	brcs	.+4      	; 0x950 <__udivmodhi4_ep>
 94c:	a6 1b       	sub	r26, r22
 94e:	b7 0b       	sbc	r27, r23

00000950 <__udivmodhi4_ep>:
 950:	88 1f       	adc	r24, r24
 952:	99 1f       	adc	r25, r25
 954:	5a 95       	dec	r21
 956:	a9 f7       	brne	.-22     	; 0x942 <__udivmodhi4_loop>
 958:	80 95       	com	r24
 95a:	90 95       	com	r25
 95c:	bc 01       	movw	r22, r24
 95e:	cd 01       	movw	r24, r26
 960:	08 95       	ret

00000962 <_exit>:
 962:	f8 94       	cli

00000964 <__stop_program>:
 964:	ff cf       	rjmp	.-2      	; 0x964 <__stop_program>
