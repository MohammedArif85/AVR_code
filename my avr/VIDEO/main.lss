
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000015aa  0000163e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000e22  0080008a  0080008a  00001668  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000152  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084f  00000000  00000000  000017da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000264  00000000  00000000  00002029  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d5  00000000  00000000  0000228d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00002864  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f2  00000000  00000000  00002924  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000053e  00000000  00000000  00002b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 02 	jmp	0x498	; 0x498 <__ctors_end>
       4:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
       8:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
       c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
      10:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
      14:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
      18:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__vector_6>
      1c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
      20:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
      24:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
      28:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
      2c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
      30:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
      34:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
      38:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
      3c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
      40:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
      44:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
      48:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
      4c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>
      50:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__bad_interrupt>

00000054 <smallbitmap>:
      54:	ee aa aa aa ee 44 cc 44 44 ee ee 22 ee 88 ee ee     .....D.DD.."....
      64:	22 ee 22 ee aa aa ee 22 22 ee 88 ee 22 ee cc 88     "."....""..."...
      74:	ee aa ee ee 22 44 88 88 ee aa ee aa ee ee aa ee     ...."D..........
      84:	22 66 00 44 00 44 00 00 ee 00 ee 00 00 00 00 00     "f.D.D..........
      94:	00 ee aa ee aa aa cc aa ee aa cc ee 88 88 88 ee     ................
      a4:	cc aa aa aa cc ee 88 ee 88 ee ee 88 ee 88 88 ee     ................
      b4:	88 88 aa ee aa aa ee aa aa ee 44 44 44 ee 22 22     ..........DDD.""
      c4:	22 aa ee 88 aa cc cc aa 88 88 88 88 ee aa ee ee     "...............
      d4:	aa aa 00 cc aa aa aa 44 aa aa aa 44 ee aa ee 88     .......D...D....
      e4:	88 44 aa aa ee 66 ee aa cc ee aa ee 88 ee 22 ee     .D...f........".
      f4:	ee 44 44 44 44 aa aa aa aa ee aa aa aa aa 44 aa     .DDDD.........D.
     104:	aa ee ee aa 00 aa 44 44 aa aa aa 44 44 44 ee 22     ......DD...DDD."
     114:	44 88 ee                                            D..

00000117 <ascii>:
     117:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     127:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     137:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     147:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     157:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     167:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     177:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     187:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     197:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     1a7:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     1b7:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     1c7:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     1d7:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     1e7:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     1f7:	00 00 00 00 00 00 00 60 60 60 60 00 00 60 50 50     .......````..`PP
     207:	00 00 00 00 00 00 50 f8 50 f8 50 00 70 a0 a0 70     ......P.P.P.p..p
     217:	28 28 70 40 a8 50 20 50 a8 10 20 50 a0 40 a8 90     ((p@.P P.. P.@..
     227:	68 40 40 40 00 00 00 00 10 20 40 40 40 20 10 40     h@@@..... @@@ .@
     237:	20 10 10 10 20 40 10 38 10 00 00 00 00 00 20 20      ... @.8......  
     247:	f8 20 20 00 00 00 00 00 00 10 10 00 00 00 00 f8     .  .............
     257:	00 00 00 00 00 00 00 00 10 00 08 10 20 40 80 00     ............ @..
     267:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     277:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     287:	f8 10 10 f8 80 f0 08 08 88 70 40 80 80 f0 88 88     .........p@.....
     297:	70 f8 08 10 20 40 80 80 70 88 88 70 88 88 70 70     p... @..p..p..pp
     2a7:	88 88 78 08 08 10 00 00 20 00 00 00 20 00 00 20     ..x..... ... .. 
     2b7:	00 00 20 20 00 18 60 80 60 18 00 00 00 78 00 78     ..  ..`.`....x.x
     2c7:	00 00 00 c0 30 08 30 c0 00 30 48 10 20 20 00 20     ....0.0..0H.  . 
     2d7:	70 88 b8 a8 90 88 70 70 88 88 88 f8 88 88 f0 88     p.....pp........
     2e7:	88 f0 88 88 f0 70 88 80 80 80 88 70 f0 88 88 88     .....p.....p....
     2f7:	88 88 f0 f8 80 80 f8 80 80 f8 f8 80 80 f8 80 80     ................
     307:	80 70 88 80 98 88 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     317:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     327:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 a8 88     ................
     337:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     347:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     357:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     367:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     377:	20 88 88 88 a8 a8 a8 50 88 88 50 20 50 88 88 88      ......P..P P...
     387:	88 88 50 20 20 20 f8 08 10 20 40 80 f8 e0 80 80     ..P   ... @.....
     397:	80 80 80 e0 00 80 40 20 10 08 00 38 08 08 08 08     ......@ ...8....
     3a7:	08 38 20 50 00 00 00 00 00 00 00 00 00 00 00 f8     .8 P............
     3b7:	80 40 00 00 00 00 00 00 60 10 70 90 60 00 80 80     .@......`.p.`...
     3c7:	e0 90 90 e0 00 00 00 70 80 80 70 00 10 10 70 90     .......p..p...p.
     3d7:	90 70 00 00 60 90 f0 80 70 00 30 40 e0 40 40 40     .p..`...p.0@.@@@
     3e7:	00 00 60 90 70 10 10 60 80 80 e0 90 90 90 00 00     ..`.p..`........
     3f7:	20 00 20 20 20 00 00 10 00 10 10 10 60 80 90 a0      .   .......`...
     407:	c0 a0 90 00 20 20 20 20 20 20 00 00 00 50 a8 a8     ....      ...P..
     417:	a8 00 00 00 60 90 90 90 00 00 00 60 90 90 60 00     ....`......`..`.
     427:	00 00 60 90 f0 80 80 00 00 60 90 f0 10 10 00 00     ..`......`......
     437:	b8 40 40 40 00 00 00 70 40 10 70 00 40 40 e0 40     .@@@...p@.p.@@.@
     447:	40 40 00 00 00 90 90 90 60 00 00 00 88 88 50 20     @@......`.....P 
     457:	00 00 00 a8 a8 50 50 00 00 00 90 60 60 90 00 00     .....PP....``...
     467:	00 90 90 60 40 80 00 00 f0 20 40 f0 00 20 40 40     ...`@.... @.. @@
     477:	80 40 40 20 20 20 20 20 20 20 20 20 10 10 08 10     .@@         ....
     487:	10 20 00 00 40 a8 10 00 00 00 00 00 00 00 00 00     . ..@...........
     497:	00                                                  .

00000498 <__ctors_end>:
     498:	11 24       	eor	r1, r1
     49a:	1f be       	out	0x3f, r1	; 63
     49c:	cf e5       	ldi	r28, 0x5F	; 95
     49e:	d4 e0       	ldi	r29, 0x04	; 4
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	cd bf       	out	0x3d, r28	; 61

000004a4 <__do_copy_data>:
     4a4:	10 e0       	ldi	r17, 0x00	; 0
     4a6:	a0 e6       	ldi	r26, 0x60	; 96
     4a8:	b0 e0       	ldi	r27, 0x00	; 0
     4aa:	ea ea       	ldi	r30, 0xAA	; 170
     4ac:	f5 e1       	ldi	r31, 0x15	; 21
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <.do_copy_data_start>

000004b0 <.do_copy_data_loop>:
     4b0:	05 90       	lpm	r0, Z+
     4b2:	0d 92       	st	X+, r0

000004b4 <.do_copy_data_start>:
     4b4:	aa 38       	cpi	r26, 0x8A	; 138
     4b6:	b1 07       	cpc	r27, r17
     4b8:	d9 f7       	brne	.-10     	; 0x4b0 <.do_copy_data_loop>

000004ba <__do_clear_bss>:
     4ba:	1e e0       	ldi	r17, 0x0E	; 14
     4bc:	aa e8       	ldi	r26, 0x8A	; 138
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <.do_clear_bss_start>

000004c2 <.do_clear_bss_loop>:
     4c2:	1d 92       	st	X+, r1

000004c4 <.do_clear_bss_start>:
     4c4:	ac 3a       	cpi	r26, 0xAC	; 172
     4c6:	b1 07       	cpc	r27, r17
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <.do_clear_bss_loop>
     4ca:	0e 94 a1 09 	call	0x1342	; 0x1342 <main>
     4ce:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <_exit>

000004d2 <__bad_interrupt>:
     4d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000004d6 <byteblast>:
   );

// puts 18 bytes (1 line) to the screen
void byteblast() {

	asm("LDS  R26,screenindex\n\t"
     4d6:	a0 91 8a 00 	lds	r26, 0x008A
     4da:	b0 91 8b 00 	lds	r27, 0x008B
     4de:	e0 e4       	ldi	r30, 0x40	; 64
     4e0:	4d 90       	ld	r4, X+
     4e2:	47 fa       	bst	r4, 7
     4e4:	e5 f9       	bld	r30, 5
     4e6:	eb b9       	out	0x0b, r30	; 11
     4e8:	00 00       	nop
     4ea:	46 fa       	bst	r4, 6
     4ec:	e5 f9       	bld	r30, 5
     4ee:	eb b9       	out	0x0b, r30	; 11
     4f0:	00 00       	nop
     4f2:	45 fa       	bst	r4, 5
     4f4:	e5 f9       	bld	r30, 5
     4f6:	eb b9       	out	0x0b, r30	; 11
     4f8:	00 00       	nop
     4fa:	44 fa       	bst	r4, 4
     4fc:	e5 f9       	bld	r30, 5
     4fe:	eb b9       	out	0x0b, r30	; 11
     500:	00 00       	nop
     502:	43 fa       	bst	r4, 3
     504:	e5 f9       	bld	r30, 5
     506:	eb b9       	out	0x0b, r30	; 11
     508:	00 00       	nop
     50a:	42 fa       	bst	r4, 2
     50c:	e5 f9       	bld	r30, 5
     50e:	eb b9       	out	0x0b, r30	; 11
     510:	00 00       	nop
     512:	41 fa       	bst	r4, 1
     514:	e5 f9       	bld	r30, 5
     516:	eb b9       	out	0x0b, r30	; 11
     518:	00 00       	nop
     51a:	40 fa       	bst	r4, 0
     51c:	e5 f9       	bld	r30, 5
     51e:	eb b9       	out	0x0b, r30	; 11
     520:	4d 90       	ld	r4, X+
     522:	47 fa       	bst	r4, 7
     524:	e5 f9       	bld	r30, 5
     526:	eb b9       	out	0x0b, r30	; 11
     528:	00 00       	nop
     52a:	46 fa       	bst	r4, 6
     52c:	e5 f9       	bld	r30, 5
     52e:	eb b9       	out	0x0b, r30	; 11
     530:	00 00       	nop
     532:	45 fa       	bst	r4, 5
     534:	e5 f9       	bld	r30, 5
     536:	eb b9       	out	0x0b, r30	; 11
     538:	00 00       	nop
     53a:	44 fa       	bst	r4, 4
     53c:	e5 f9       	bld	r30, 5
     53e:	eb b9       	out	0x0b, r30	; 11
     540:	00 00       	nop
     542:	43 fa       	bst	r4, 3
     544:	e5 f9       	bld	r30, 5
     546:	eb b9       	out	0x0b, r30	; 11
     548:	00 00       	nop
     54a:	42 fa       	bst	r4, 2
     54c:	e5 f9       	bld	r30, 5
     54e:	eb b9       	out	0x0b, r30	; 11
     550:	00 00       	nop
     552:	41 fa       	bst	r4, 1
     554:	e5 f9       	bld	r30, 5
     556:	eb b9       	out	0x0b, r30	; 11
     558:	00 00       	nop
     55a:	40 fa       	bst	r4, 0
     55c:	e5 f9       	bld	r30, 5
     55e:	eb b9       	out	0x0b, r30	; 11
     560:	4d 90       	ld	r4, X+
     562:	47 fa       	bst	r4, 7
     564:	e5 f9       	bld	r30, 5
     566:	eb b9       	out	0x0b, r30	; 11
     568:	00 00       	nop
     56a:	46 fa       	bst	r4, 6
     56c:	e5 f9       	bld	r30, 5
     56e:	eb b9       	out	0x0b, r30	; 11
     570:	00 00       	nop
     572:	45 fa       	bst	r4, 5
     574:	e5 f9       	bld	r30, 5
     576:	eb b9       	out	0x0b, r30	; 11
     578:	00 00       	nop
     57a:	44 fa       	bst	r4, 4
     57c:	e5 f9       	bld	r30, 5
     57e:	eb b9       	out	0x0b, r30	; 11
     580:	00 00       	nop
     582:	43 fa       	bst	r4, 3
     584:	e5 f9       	bld	r30, 5
     586:	eb b9       	out	0x0b, r30	; 11
     588:	00 00       	nop
     58a:	42 fa       	bst	r4, 2
     58c:	e5 f9       	bld	r30, 5
     58e:	eb b9       	out	0x0b, r30	; 11
     590:	00 00       	nop
     592:	41 fa       	bst	r4, 1
     594:	e5 f9       	bld	r30, 5
     596:	eb b9       	out	0x0b, r30	; 11
     598:	00 00       	nop
     59a:	40 fa       	bst	r4, 0
     59c:	e5 f9       	bld	r30, 5
     59e:	eb b9       	out	0x0b, r30	; 11
     5a0:	4d 90       	ld	r4, X+
     5a2:	47 fa       	bst	r4, 7
     5a4:	e5 f9       	bld	r30, 5
     5a6:	eb b9       	out	0x0b, r30	; 11
     5a8:	00 00       	nop
     5aa:	46 fa       	bst	r4, 6
     5ac:	e5 f9       	bld	r30, 5
     5ae:	eb b9       	out	0x0b, r30	; 11
     5b0:	00 00       	nop
     5b2:	45 fa       	bst	r4, 5
     5b4:	e5 f9       	bld	r30, 5
     5b6:	eb b9       	out	0x0b, r30	; 11
     5b8:	00 00       	nop
     5ba:	44 fa       	bst	r4, 4
     5bc:	e5 f9       	bld	r30, 5
     5be:	eb b9       	out	0x0b, r30	; 11
     5c0:	00 00       	nop
     5c2:	43 fa       	bst	r4, 3
     5c4:	e5 f9       	bld	r30, 5
     5c6:	eb b9       	out	0x0b, r30	; 11
     5c8:	00 00       	nop
     5ca:	42 fa       	bst	r4, 2
     5cc:	e5 f9       	bld	r30, 5
     5ce:	eb b9       	out	0x0b, r30	; 11
     5d0:	00 00       	nop
     5d2:	41 fa       	bst	r4, 1
     5d4:	e5 f9       	bld	r30, 5
     5d6:	eb b9       	out	0x0b, r30	; 11
     5d8:	00 00       	nop
     5da:	40 fa       	bst	r4, 0
     5dc:	e5 f9       	bld	r30, 5
     5de:	eb b9       	out	0x0b, r30	; 11
     5e0:	4d 90       	ld	r4, X+
     5e2:	47 fa       	bst	r4, 7
     5e4:	e5 f9       	bld	r30, 5
     5e6:	eb b9       	out	0x0b, r30	; 11
     5e8:	00 00       	nop
     5ea:	46 fa       	bst	r4, 6
     5ec:	e5 f9       	bld	r30, 5
     5ee:	eb b9       	out	0x0b, r30	; 11
     5f0:	00 00       	nop
     5f2:	45 fa       	bst	r4, 5
     5f4:	e5 f9       	bld	r30, 5
     5f6:	eb b9       	out	0x0b, r30	; 11
     5f8:	00 00       	nop
     5fa:	44 fa       	bst	r4, 4
     5fc:	e5 f9       	bld	r30, 5
     5fe:	eb b9       	out	0x0b, r30	; 11
     600:	00 00       	nop
     602:	43 fa       	bst	r4, 3
     604:	e5 f9       	bld	r30, 5
     606:	eb b9       	out	0x0b, r30	; 11
     608:	00 00       	nop
     60a:	42 fa       	bst	r4, 2
     60c:	e5 f9       	bld	r30, 5
     60e:	eb b9       	out	0x0b, r30	; 11
     610:	00 00       	nop
     612:	41 fa       	bst	r4, 1
     614:	e5 f9       	bld	r30, 5
     616:	eb b9       	out	0x0b, r30	; 11
     618:	00 00       	nop
     61a:	40 fa       	bst	r4, 0
     61c:	e5 f9       	bld	r30, 5
     61e:	eb b9       	out	0x0b, r30	; 11
     620:	4d 90       	ld	r4, X+
     622:	47 fa       	bst	r4, 7
     624:	e5 f9       	bld	r30, 5
     626:	eb b9       	out	0x0b, r30	; 11
     628:	00 00       	nop
     62a:	46 fa       	bst	r4, 6
     62c:	e5 f9       	bld	r30, 5
     62e:	eb b9       	out	0x0b, r30	; 11
     630:	00 00       	nop
     632:	45 fa       	bst	r4, 5
     634:	e5 f9       	bld	r30, 5
     636:	eb b9       	out	0x0b, r30	; 11
     638:	00 00       	nop
     63a:	44 fa       	bst	r4, 4
     63c:	e5 f9       	bld	r30, 5
     63e:	eb b9       	out	0x0b, r30	; 11
     640:	00 00       	nop
     642:	43 fa       	bst	r4, 3
     644:	e5 f9       	bld	r30, 5
     646:	eb b9       	out	0x0b, r30	; 11
     648:	00 00       	nop
     64a:	42 fa       	bst	r4, 2
     64c:	e5 f9       	bld	r30, 5
     64e:	eb b9       	out	0x0b, r30	; 11
     650:	00 00       	nop
     652:	41 fa       	bst	r4, 1
     654:	e5 f9       	bld	r30, 5
     656:	eb b9       	out	0x0b, r30	; 11
     658:	00 00       	nop
     65a:	40 fa       	bst	r4, 0
     65c:	e5 f9       	bld	r30, 5
     65e:	eb b9       	out	0x0b, r30	; 11
     660:	4d 90       	ld	r4, X+
     662:	47 fa       	bst	r4, 7
     664:	e5 f9       	bld	r30, 5
     666:	eb b9       	out	0x0b, r30	; 11
     668:	00 00       	nop
     66a:	46 fa       	bst	r4, 6
     66c:	e5 f9       	bld	r30, 5
     66e:	eb b9       	out	0x0b, r30	; 11
     670:	00 00       	nop
     672:	45 fa       	bst	r4, 5
     674:	e5 f9       	bld	r30, 5
     676:	eb b9       	out	0x0b, r30	; 11
     678:	00 00       	nop
     67a:	44 fa       	bst	r4, 4
     67c:	e5 f9       	bld	r30, 5
     67e:	eb b9       	out	0x0b, r30	; 11
     680:	00 00       	nop
     682:	43 fa       	bst	r4, 3
     684:	e5 f9       	bld	r30, 5
     686:	eb b9       	out	0x0b, r30	; 11
     688:	00 00       	nop
     68a:	42 fa       	bst	r4, 2
     68c:	e5 f9       	bld	r30, 5
     68e:	eb b9       	out	0x0b, r30	; 11
     690:	00 00       	nop
     692:	41 fa       	bst	r4, 1
     694:	e5 f9       	bld	r30, 5
     696:	eb b9       	out	0x0b, r30	; 11
     698:	00 00       	nop
     69a:	40 fa       	bst	r4, 0
     69c:	e5 f9       	bld	r30, 5
     69e:	eb b9       	out	0x0b, r30	; 11
     6a0:	4d 90       	ld	r4, X+
     6a2:	47 fa       	bst	r4, 7
     6a4:	e5 f9       	bld	r30, 5
     6a6:	eb b9       	out	0x0b, r30	; 11
     6a8:	00 00       	nop
     6aa:	46 fa       	bst	r4, 6
     6ac:	e5 f9       	bld	r30, 5
     6ae:	eb b9       	out	0x0b, r30	; 11
     6b0:	00 00       	nop
     6b2:	45 fa       	bst	r4, 5
     6b4:	e5 f9       	bld	r30, 5
     6b6:	eb b9       	out	0x0b, r30	; 11
     6b8:	00 00       	nop
     6ba:	44 fa       	bst	r4, 4
     6bc:	e5 f9       	bld	r30, 5
     6be:	eb b9       	out	0x0b, r30	; 11
     6c0:	00 00       	nop
     6c2:	43 fa       	bst	r4, 3
     6c4:	e5 f9       	bld	r30, 5
     6c6:	eb b9       	out	0x0b, r30	; 11
     6c8:	00 00       	nop
     6ca:	42 fa       	bst	r4, 2
     6cc:	e5 f9       	bld	r30, 5
     6ce:	eb b9       	out	0x0b, r30	; 11
     6d0:	00 00       	nop
     6d2:	41 fa       	bst	r4, 1
     6d4:	e5 f9       	bld	r30, 5
     6d6:	eb b9       	out	0x0b, r30	; 11
     6d8:	00 00       	nop
     6da:	40 fa       	bst	r4, 0
     6dc:	e5 f9       	bld	r30, 5
     6de:	eb b9       	out	0x0b, r30	; 11
     6e0:	4d 90       	ld	r4, X+
     6e2:	47 fa       	bst	r4, 7
     6e4:	e5 f9       	bld	r30, 5
     6e6:	eb b9       	out	0x0b, r30	; 11
     6e8:	00 00       	nop
     6ea:	46 fa       	bst	r4, 6
     6ec:	e5 f9       	bld	r30, 5
     6ee:	eb b9       	out	0x0b, r30	; 11
     6f0:	00 00       	nop
     6f2:	45 fa       	bst	r4, 5
     6f4:	e5 f9       	bld	r30, 5
     6f6:	eb b9       	out	0x0b, r30	; 11
     6f8:	00 00       	nop
     6fa:	44 fa       	bst	r4, 4
     6fc:	e5 f9       	bld	r30, 5
     6fe:	eb b9       	out	0x0b, r30	; 11
     700:	00 00       	nop
     702:	43 fa       	bst	r4, 3
     704:	e5 f9       	bld	r30, 5
     706:	eb b9       	out	0x0b, r30	; 11
     708:	00 00       	nop
     70a:	42 fa       	bst	r4, 2
     70c:	e5 f9       	bld	r30, 5
     70e:	eb b9       	out	0x0b, r30	; 11
     710:	00 00       	nop
     712:	41 fa       	bst	r4, 1
     714:	e5 f9       	bld	r30, 5
     716:	eb b9       	out	0x0b, r30	; 11
     718:	00 00       	nop
     71a:	40 fa       	bst	r4, 0
     71c:	e5 f9       	bld	r30, 5
     71e:	eb b9       	out	0x0b, r30	; 11
     720:	4d 90       	ld	r4, X+
     722:	47 fa       	bst	r4, 7
     724:	e5 f9       	bld	r30, 5
     726:	eb b9       	out	0x0b, r30	; 11
     728:	00 00       	nop
     72a:	46 fa       	bst	r4, 6
     72c:	e5 f9       	bld	r30, 5
     72e:	eb b9       	out	0x0b, r30	; 11
     730:	00 00       	nop
     732:	45 fa       	bst	r4, 5
     734:	e5 f9       	bld	r30, 5
     736:	eb b9       	out	0x0b, r30	; 11
     738:	00 00       	nop
     73a:	44 fa       	bst	r4, 4
     73c:	e5 f9       	bld	r30, 5
     73e:	eb b9       	out	0x0b, r30	; 11
     740:	00 00       	nop
     742:	43 fa       	bst	r4, 3
     744:	e5 f9       	bld	r30, 5
     746:	eb b9       	out	0x0b, r30	; 11
     748:	00 00       	nop
     74a:	42 fa       	bst	r4, 2
     74c:	e5 f9       	bld	r30, 5
     74e:	eb b9       	out	0x0b, r30	; 11
     750:	00 00       	nop
     752:	41 fa       	bst	r4, 1
     754:	e5 f9       	bld	r30, 5
     756:	eb b9       	out	0x0b, r30	; 11
     758:	00 00       	nop
     75a:	40 fa       	bst	r4, 0
     75c:	e5 f9       	bld	r30, 5
     75e:	eb b9       	out	0x0b, r30	; 11
     760:	4d 90       	ld	r4, X+
     762:	47 fa       	bst	r4, 7
     764:	e5 f9       	bld	r30, 5
     766:	eb b9       	out	0x0b, r30	; 11
     768:	00 00       	nop
     76a:	46 fa       	bst	r4, 6
     76c:	e5 f9       	bld	r30, 5
     76e:	eb b9       	out	0x0b, r30	; 11
     770:	00 00       	nop
     772:	45 fa       	bst	r4, 5
     774:	e5 f9       	bld	r30, 5
     776:	eb b9       	out	0x0b, r30	; 11
     778:	00 00       	nop
     77a:	44 fa       	bst	r4, 4
     77c:	e5 f9       	bld	r30, 5
     77e:	eb b9       	out	0x0b, r30	; 11
     780:	00 00       	nop
     782:	43 fa       	bst	r4, 3
     784:	e5 f9       	bld	r30, 5
     786:	eb b9       	out	0x0b, r30	; 11
     788:	00 00       	nop
     78a:	42 fa       	bst	r4, 2
     78c:	e5 f9       	bld	r30, 5
     78e:	eb b9       	out	0x0b, r30	; 11
     790:	00 00       	nop
     792:	41 fa       	bst	r4, 1
     794:	e5 f9       	bld	r30, 5
     796:	eb b9       	out	0x0b, r30	; 11
     798:	00 00       	nop
     79a:	40 fa       	bst	r4, 0
     79c:	e5 f9       	bld	r30, 5
     79e:	eb b9       	out	0x0b, r30	; 11
     7a0:	4d 90       	ld	r4, X+
     7a2:	47 fa       	bst	r4, 7
     7a4:	e5 f9       	bld	r30, 5
     7a6:	eb b9       	out	0x0b, r30	; 11
     7a8:	00 00       	nop
     7aa:	46 fa       	bst	r4, 6
     7ac:	e5 f9       	bld	r30, 5
     7ae:	eb b9       	out	0x0b, r30	; 11
     7b0:	00 00       	nop
     7b2:	45 fa       	bst	r4, 5
     7b4:	e5 f9       	bld	r30, 5
     7b6:	eb b9       	out	0x0b, r30	; 11
     7b8:	00 00       	nop
     7ba:	44 fa       	bst	r4, 4
     7bc:	e5 f9       	bld	r30, 5
     7be:	eb b9       	out	0x0b, r30	; 11
     7c0:	00 00       	nop
     7c2:	43 fa       	bst	r4, 3
     7c4:	e5 f9       	bld	r30, 5
     7c6:	eb b9       	out	0x0b, r30	; 11
     7c8:	00 00       	nop
     7ca:	42 fa       	bst	r4, 2
     7cc:	e5 f9       	bld	r30, 5
     7ce:	eb b9       	out	0x0b, r30	; 11
     7d0:	00 00       	nop
     7d2:	41 fa       	bst	r4, 1
     7d4:	e5 f9       	bld	r30, 5
     7d6:	eb b9       	out	0x0b, r30	; 11
     7d8:	00 00       	nop
     7da:	40 fa       	bst	r4, 0
     7dc:	e5 f9       	bld	r30, 5
     7de:	eb b9       	out	0x0b, r30	; 11
     7e0:	4d 90       	ld	r4, X+
     7e2:	47 fa       	bst	r4, 7
     7e4:	e5 f9       	bld	r30, 5
     7e6:	eb b9       	out	0x0b, r30	; 11
     7e8:	00 00       	nop
     7ea:	46 fa       	bst	r4, 6
     7ec:	e5 f9       	bld	r30, 5
     7ee:	eb b9       	out	0x0b, r30	; 11
     7f0:	00 00       	nop
     7f2:	45 fa       	bst	r4, 5
     7f4:	e5 f9       	bld	r30, 5
     7f6:	eb b9       	out	0x0b, r30	; 11
     7f8:	00 00       	nop
     7fa:	44 fa       	bst	r4, 4
     7fc:	e5 f9       	bld	r30, 5
     7fe:	eb b9       	out	0x0b, r30	; 11
     800:	00 00       	nop
     802:	43 fa       	bst	r4, 3
     804:	e5 f9       	bld	r30, 5
     806:	eb b9       	out	0x0b, r30	; 11
     808:	00 00       	nop
     80a:	42 fa       	bst	r4, 2
     80c:	e5 f9       	bld	r30, 5
     80e:	eb b9       	out	0x0b, r30	; 11
     810:	00 00       	nop
     812:	41 fa       	bst	r4, 1
     814:	e5 f9       	bld	r30, 5
     816:	eb b9       	out	0x0b, r30	; 11
     818:	00 00       	nop
     81a:	40 fa       	bst	r4, 0
     81c:	e5 f9       	bld	r30, 5
     81e:	eb b9       	out	0x0b, r30	; 11
     820:	4d 90       	ld	r4, X+
     822:	47 fa       	bst	r4, 7
     824:	e5 f9       	bld	r30, 5
     826:	eb b9       	out	0x0b, r30	; 11
     828:	00 00       	nop
     82a:	46 fa       	bst	r4, 6
     82c:	e5 f9       	bld	r30, 5
     82e:	eb b9       	out	0x0b, r30	; 11
     830:	00 00       	nop
     832:	45 fa       	bst	r4, 5
     834:	e5 f9       	bld	r30, 5
     836:	eb b9       	out	0x0b, r30	; 11
     838:	00 00       	nop
     83a:	44 fa       	bst	r4, 4
     83c:	e5 f9       	bld	r30, 5
     83e:	eb b9       	out	0x0b, r30	; 11
     840:	00 00       	nop
     842:	43 fa       	bst	r4, 3
     844:	e5 f9       	bld	r30, 5
     846:	eb b9       	out	0x0b, r30	; 11
     848:	00 00       	nop
     84a:	42 fa       	bst	r4, 2
     84c:	e5 f9       	bld	r30, 5
     84e:	eb b9       	out	0x0b, r30	; 11
     850:	00 00       	nop
     852:	41 fa       	bst	r4, 1
     854:	e5 f9       	bld	r30, 5
     856:	eb b9       	out	0x0b, r30	; 11
     858:	00 00       	nop
     85a:	40 fa       	bst	r4, 0
     85c:	e5 f9       	bld	r30, 5
     85e:	eb b9       	out	0x0b, r30	; 11
     860:	4d 90       	ld	r4, X+
     862:	47 fa       	bst	r4, 7
     864:	e5 f9       	bld	r30, 5
     866:	eb b9       	out	0x0b, r30	; 11
     868:	00 00       	nop
     86a:	46 fa       	bst	r4, 6
     86c:	e5 f9       	bld	r30, 5
     86e:	eb b9       	out	0x0b, r30	; 11
     870:	00 00       	nop
     872:	45 fa       	bst	r4, 5
     874:	e5 f9       	bld	r30, 5
     876:	eb b9       	out	0x0b, r30	; 11
     878:	00 00       	nop
     87a:	44 fa       	bst	r4, 4
     87c:	e5 f9       	bld	r30, 5
     87e:	eb b9       	out	0x0b, r30	; 11
     880:	00 00       	nop
     882:	43 fa       	bst	r4, 3
     884:	e5 f9       	bld	r30, 5
     886:	eb b9       	out	0x0b, r30	; 11
     888:	00 00       	nop
     88a:	42 fa       	bst	r4, 2
     88c:	e5 f9       	bld	r30, 5
     88e:	eb b9       	out	0x0b, r30	; 11
     890:	00 00       	nop
     892:	41 fa       	bst	r4, 1
     894:	e5 f9       	bld	r30, 5
     896:	eb b9       	out	0x0b, r30	; 11
     898:	00 00       	nop
     89a:	40 fa       	bst	r4, 0
     89c:	e5 f9       	bld	r30, 5
     89e:	eb b9       	out	0x0b, r30	; 11
     8a0:	4d 90       	ld	r4, X+
     8a2:	47 fa       	bst	r4, 7
     8a4:	e5 f9       	bld	r30, 5
     8a6:	eb b9       	out	0x0b, r30	; 11
     8a8:	00 00       	nop
     8aa:	46 fa       	bst	r4, 6
     8ac:	e5 f9       	bld	r30, 5
     8ae:	eb b9       	out	0x0b, r30	; 11
     8b0:	00 00       	nop
     8b2:	45 fa       	bst	r4, 5
     8b4:	e5 f9       	bld	r30, 5
     8b6:	eb b9       	out	0x0b, r30	; 11
     8b8:	00 00       	nop
     8ba:	44 fa       	bst	r4, 4
     8bc:	e5 f9       	bld	r30, 5
     8be:	eb b9       	out	0x0b, r30	; 11
     8c0:	00 00       	nop
     8c2:	43 fa       	bst	r4, 3
     8c4:	e5 f9       	bld	r30, 5
     8c6:	eb b9       	out	0x0b, r30	; 11
     8c8:	00 00       	nop
     8ca:	42 fa       	bst	r4, 2
     8cc:	e5 f9       	bld	r30, 5
     8ce:	eb b9       	out	0x0b, r30	; 11
     8d0:	00 00       	nop
     8d2:	41 fa       	bst	r4, 1
     8d4:	e5 f9       	bld	r30, 5
     8d6:	eb b9       	out	0x0b, r30	; 11
     8d8:	00 00       	nop
     8da:	40 fa       	bst	r4, 0
     8dc:	e5 f9       	bld	r30, 5
     8de:	eb b9       	out	0x0b, r30	; 11
     8e0:	4d 90       	ld	r4, X+
     8e2:	47 fa       	bst	r4, 7
     8e4:	e5 f9       	bld	r30, 5
     8e6:	eb b9       	out	0x0b, r30	; 11
     8e8:	00 00       	nop
     8ea:	46 fa       	bst	r4, 6
     8ec:	e5 f9       	bld	r30, 5
     8ee:	eb b9       	out	0x0b, r30	; 11
     8f0:	00 00       	nop
     8f2:	45 fa       	bst	r4, 5
     8f4:	e5 f9       	bld	r30, 5
     8f6:	eb b9       	out	0x0b, r30	; 11
     8f8:	00 00       	nop
     8fa:	44 fa       	bst	r4, 4
     8fc:	e5 f9       	bld	r30, 5
     8fe:	eb b9       	out	0x0b, r30	; 11
     900:	00 00       	nop
     902:	43 fa       	bst	r4, 3
     904:	e5 f9       	bld	r30, 5
     906:	eb b9       	out	0x0b, r30	; 11
     908:	00 00       	nop
     90a:	42 fa       	bst	r4, 2
     90c:	e5 f9       	bld	r30, 5
     90e:	eb b9       	out	0x0b, r30	; 11
     910:	00 00       	nop
     912:	41 fa       	bst	r4, 1
     914:	e5 f9       	bld	r30, 5
     916:	eb b9       	out	0x0b, r30	; 11
     918:	00 00       	nop
     91a:	40 fa       	bst	r4, 0
     91c:	e5 f9       	bld	r30, 5
     91e:	eb b9       	out	0x0b, r30	; 11
     920:	4c 90       	ld	r4, X
     922:	47 fa       	bst	r4, 7
     924:	e5 f9       	bld	r30, 5
     926:	eb b9       	out	0x0b, r30	; 11
     928:	00 00       	nop
     92a:	46 fa       	bst	r4, 6
     92c:	e5 f9       	bld	r30, 5
     92e:	eb b9       	out	0x0b, r30	; 11
     930:	00 00       	nop
     932:	45 fa       	bst	r4, 5
     934:	e5 f9       	bld	r30, 5
     936:	eb b9       	out	0x0b, r30	; 11
     938:	00 00       	nop
     93a:	44 fa       	bst	r4, 4
     93c:	e5 f9       	bld	r30, 5
     93e:	eb b9       	out	0x0b, r30	; 11
     940:	00 00       	nop
     942:	43 fa       	bst	r4, 3
     944:	e5 f9       	bld	r30, 5
     946:	eb b9       	out	0x0b, r30	; 11
     948:	00 00       	nop
     94a:	42 fa       	bst	r4, 2
     94c:	e5 f9       	bld	r30, 5
     94e:	eb b9       	out	0x0b, r30	; 11
     950:	00 00       	nop
     952:	41 fa       	bst	r4, 1
     954:	e5 f9       	bld	r30, 5
     956:	eb b9       	out	0x0b, r30	; 11
     958:	00 00       	nop
     95a:	40 fa       	bst	r4, 0
     95c:	e5 f9       	bld	r30, 5
     95e:	eb b9       	out	0x0b, r30	; 11
     960:	e8 94       	clt
     962:	e0 e4       	ldi	r30, 0x40	; 64
     964:	e5 f9       	bld	r30, 5
     966:	eb b9       	out	0x0b, r30	; 11
		"LDI R30, 0x40\n\t"

		"BLD  R30,5\n\t"
		"OUT  0x0b,R30\n\t"	
	   );
}
     968:	08 95       	ret

0000096a <__vector_6>:

//==================================
//This is the sync generator and raster generator. It MUST be entered from 
//sleep mode to get accurate timing of the sync pulses

ISR (TIMER1_COMPA_vect) {
     96a:	1f 92       	push	r1
     96c:	0f 92       	push	r0
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	0f 92       	push	r0
     972:	11 24       	eor	r1, r1
     974:	2f 93       	push	r18
     976:	3f 93       	push	r19
     978:	8f 93       	push	r24
     97a:	9f 93       	push	r25
	//start the Horizontal sync pulse    
	PORTD = syncON;
     97c:	80 91 aa 0e 	lds	r24, 0x0EAA
     980:	82 bb       	out	0x12, r24	; 18

	//update the current scanline number
	LineCount++;   
     982:	80 91 a8 0e 	lds	r24, 0x0EA8
     986:	90 91 a9 0e 	lds	r25, 0x0EA9
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	90 93 a9 0e 	sts	0x0EA9, r25
     990:	80 93 a8 0e 	sts	0x0EA8, r24
  
	//begin inverted (Vertical) synch after line 247
	if (LineCount==248) { 
     994:	80 91 a8 0e 	lds	r24, 0x0EA8
     998:	90 91 a9 0e 	lds	r25, 0x0EA9
     99c:	88 3f       	cpi	r24, 0xF8	; 248
     99e:	91 05       	cpc	r25, r1
     9a0:	29 f4       	brne	.+10     	; 0x9ac <__vector_6+0x42>
    	syncON = 0b01000000;
     9a2:	80 e4       	ldi	r24, 0x40	; 64
     9a4:	80 93 aa 0e 	sts	0x0EAA, r24
    	syncOFF = 0;
     9a8:	10 92 ab 0e 	sts	0x0EAB, r1
  	}
  
	//back to regular sync after line 250
	if (LineCount==251)	{
     9ac:	80 91 a8 0e 	lds	r24, 0x0EA8
     9b0:	90 91 a9 0e 	lds	r25, 0x0EA9
     9b4:	8b 3f       	cpi	r24, 0xFB	; 251
     9b6:	91 05       	cpc	r25, r1
     9b8:	29 f4       	brne	.+10     	; 0x9c4 <__vector_6+0x5a>
		syncON = 0;
     9ba:	10 92 aa 0e 	sts	0x0EAA, r1
		syncOFF = 0b01000000;
     9be:	80 e4       	ldi	r24, 0x40	; 64
     9c0:	80 93 ab 0e 	sts	0x0EAB, r24
	}  
  
  	//start new frame after line 262
	if (LineCount==263)
     9c4:	80 91 a8 0e 	lds	r24, 0x0EA8
     9c8:	90 91 a9 0e 	lds	r25, 0x0EA9
     9cc:	87 50       	subi	r24, 0x07	; 7
     9ce:	91 40       	sbci	r25, 0x01	; 1
     9d0:	31 f4       	brne	.+12     	; 0x9de <__vector_6+0x74>
		LineCount = 1;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	90 93 a9 0e 	sts	0x0EA9, r25
     9da:	80 93 a8 0e 	sts	0x0EA8, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9de:	8a e0       	ldi	r24, 0x0A	; 10
     9e0:	8a 95       	dec	r24
     9e2:	f1 f7       	brne	.-4      	; 0x9e0 <__vector_6+0x76>
      
	//adjust to make 5 us pulses
	_delay_us(2);

	//end sync pulse
	PORTD = syncOFF;   
     9e4:	80 91 ab 0e 	lds	r24, 0x0EAB
     9e8:	82 bb       	out	0x12, r24	; 18

	if (LineCount < ScreenBot && LineCount >= ScreenTop) {
     9ea:	80 91 a8 0e 	lds	r24, 0x0EA8
     9ee:	90 91 a9 0e 	lds	r25, 0x0EA9
     9f2:	86 3e       	cpi	r24, 0xE6	; 230
     9f4:	91 05       	cpc	r25, r1
     9f6:	0c f0       	brlt	.+2      	; 0x9fa <__vector_6+0x90>
     9f8:	6e c2       	rjmp	.+1244   	; 0xed6 <__vector_6+0x56c>
     9fa:	80 91 a8 0e 	lds	r24, 0x0EA8
     9fe:	90 91 a9 0e 	lds	r25, 0x0EA9
     a02:	4e 97       	sbiw	r24, 0x1e	; 30
     a04:	0c f4       	brge	.+2      	; 0xa08 <__vector_6+0x9e>
     a06:	67 c2       	rjmp	.+1230   	; 0xed6 <__vector_6+0x56c>
		//compute offset into screen array
		screenindex = screen + ((LineCount - ScreenTop) << 4) + ((LineCount - ScreenTop) << 1);
     a08:	20 91 a8 0e 	lds	r18, 0x0EA8
     a0c:	30 91 a9 0e 	lds	r19, 0x0EA9
     a10:	80 91 a8 0e 	lds	r24, 0x0EA8
     a14:	90 91 a9 0e 	lds	r25, 0x0EA9
     a18:	4e 97       	sbiw	r24, 0x1e	; 30
     a1a:	88 0f       	add	r24, r24
     a1c:	99 1f       	adc	r25, r25
     a1e:	2e 51       	subi	r18, 0x1E	; 30
     a20:	30 40       	sbci	r19, 0x00	; 0
     a22:	22 95       	swap	r18
     a24:	32 95       	swap	r19
     a26:	30 7f       	andi	r19, 0xF0	; 240
     a28:	32 27       	eor	r19, r18
     a2a:	20 7f       	andi	r18, 0xF0	; 240
     a2c:	32 27       	eor	r19, r18
     a2e:	82 0f       	add	r24, r18
     a30:	93 1f       	adc	r25, r19
     a32:	80 57       	subi	r24, 0x70	; 112
     a34:	9f 4f       	sbci	r25, 0xFF	; 255
     a36:	90 93 8b 00 	sts	0x008B, r25
     a3a:	80 93 8a 00 	sts	0x008A, r24
     a3e:	8a e2       	ldi	r24, 0x2A	; 42
     a40:	8a 95       	dec	r24
     a42:	f1 f7       	brne	.-4      	; 0xa40 <__vector_6+0xd6>
   );

// puts 18 bytes (1 line) to the screen
void byteblast() {

	asm("LDS  R26,screenindex\n\t"
     a44:	a0 91 8a 00 	lds	r26, 0x008A
     a48:	b0 91 8b 00 	lds	r27, 0x008B
     a4c:	e0 e4       	ldi	r30, 0x40	; 64
     a4e:	4d 90       	ld	r4, X+
     a50:	47 fa       	bst	r4, 7
     a52:	e5 f9       	bld	r30, 5
     a54:	eb b9       	out	0x0b, r30	; 11
     a56:	00 00       	nop
     a58:	46 fa       	bst	r4, 6
     a5a:	e5 f9       	bld	r30, 5
     a5c:	eb b9       	out	0x0b, r30	; 11
     a5e:	00 00       	nop
     a60:	45 fa       	bst	r4, 5
     a62:	e5 f9       	bld	r30, 5
     a64:	eb b9       	out	0x0b, r30	; 11
     a66:	00 00       	nop
     a68:	44 fa       	bst	r4, 4
     a6a:	e5 f9       	bld	r30, 5
     a6c:	eb b9       	out	0x0b, r30	; 11
     a6e:	00 00       	nop
     a70:	43 fa       	bst	r4, 3
     a72:	e5 f9       	bld	r30, 5
     a74:	eb b9       	out	0x0b, r30	; 11
     a76:	00 00       	nop
     a78:	42 fa       	bst	r4, 2
     a7a:	e5 f9       	bld	r30, 5
     a7c:	eb b9       	out	0x0b, r30	; 11
     a7e:	00 00       	nop
     a80:	41 fa       	bst	r4, 1
     a82:	e5 f9       	bld	r30, 5
     a84:	eb b9       	out	0x0b, r30	; 11
     a86:	00 00       	nop
     a88:	40 fa       	bst	r4, 0
     a8a:	e5 f9       	bld	r30, 5
     a8c:	eb b9       	out	0x0b, r30	; 11
     a8e:	4d 90       	ld	r4, X+
     a90:	47 fa       	bst	r4, 7
     a92:	e5 f9       	bld	r30, 5
     a94:	eb b9       	out	0x0b, r30	; 11
     a96:	00 00       	nop
     a98:	46 fa       	bst	r4, 6
     a9a:	e5 f9       	bld	r30, 5
     a9c:	eb b9       	out	0x0b, r30	; 11
     a9e:	00 00       	nop
     aa0:	45 fa       	bst	r4, 5
     aa2:	e5 f9       	bld	r30, 5
     aa4:	eb b9       	out	0x0b, r30	; 11
     aa6:	00 00       	nop
     aa8:	44 fa       	bst	r4, 4
     aaa:	e5 f9       	bld	r30, 5
     aac:	eb b9       	out	0x0b, r30	; 11
     aae:	00 00       	nop
     ab0:	43 fa       	bst	r4, 3
     ab2:	e5 f9       	bld	r30, 5
     ab4:	eb b9       	out	0x0b, r30	; 11
     ab6:	00 00       	nop
     ab8:	42 fa       	bst	r4, 2
     aba:	e5 f9       	bld	r30, 5
     abc:	eb b9       	out	0x0b, r30	; 11
     abe:	00 00       	nop
     ac0:	41 fa       	bst	r4, 1
     ac2:	e5 f9       	bld	r30, 5
     ac4:	eb b9       	out	0x0b, r30	; 11
     ac6:	00 00       	nop
     ac8:	40 fa       	bst	r4, 0
     aca:	e5 f9       	bld	r30, 5
     acc:	eb b9       	out	0x0b, r30	; 11
     ace:	4d 90       	ld	r4, X+
     ad0:	47 fa       	bst	r4, 7
     ad2:	e5 f9       	bld	r30, 5
     ad4:	eb b9       	out	0x0b, r30	; 11
     ad6:	00 00       	nop
     ad8:	46 fa       	bst	r4, 6
     ada:	e5 f9       	bld	r30, 5
     adc:	eb b9       	out	0x0b, r30	; 11
     ade:	00 00       	nop
     ae0:	45 fa       	bst	r4, 5
     ae2:	e5 f9       	bld	r30, 5
     ae4:	eb b9       	out	0x0b, r30	; 11
     ae6:	00 00       	nop
     ae8:	44 fa       	bst	r4, 4
     aea:	e5 f9       	bld	r30, 5
     aec:	eb b9       	out	0x0b, r30	; 11
     aee:	00 00       	nop
     af0:	43 fa       	bst	r4, 3
     af2:	e5 f9       	bld	r30, 5
     af4:	eb b9       	out	0x0b, r30	; 11
     af6:	00 00       	nop
     af8:	42 fa       	bst	r4, 2
     afa:	e5 f9       	bld	r30, 5
     afc:	eb b9       	out	0x0b, r30	; 11
     afe:	00 00       	nop
     b00:	41 fa       	bst	r4, 1
     b02:	e5 f9       	bld	r30, 5
     b04:	eb b9       	out	0x0b, r30	; 11
     b06:	00 00       	nop
     b08:	40 fa       	bst	r4, 0
     b0a:	e5 f9       	bld	r30, 5
     b0c:	eb b9       	out	0x0b, r30	; 11
     b0e:	4d 90       	ld	r4, X+
     b10:	47 fa       	bst	r4, 7
     b12:	e5 f9       	bld	r30, 5
     b14:	eb b9       	out	0x0b, r30	; 11
     b16:	00 00       	nop
     b18:	46 fa       	bst	r4, 6
     b1a:	e5 f9       	bld	r30, 5
     b1c:	eb b9       	out	0x0b, r30	; 11
     b1e:	00 00       	nop
     b20:	45 fa       	bst	r4, 5
     b22:	e5 f9       	bld	r30, 5
     b24:	eb b9       	out	0x0b, r30	; 11
     b26:	00 00       	nop
     b28:	44 fa       	bst	r4, 4
     b2a:	e5 f9       	bld	r30, 5
     b2c:	eb b9       	out	0x0b, r30	; 11
     b2e:	00 00       	nop
     b30:	43 fa       	bst	r4, 3
     b32:	e5 f9       	bld	r30, 5
     b34:	eb b9       	out	0x0b, r30	; 11
     b36:	00 00       	nop
     b38:	42 fa       	bst	r4, 2
     b3a:	e5 f9       	bld	r30, 5
     b3c:	eb b9       	out	0x0b, r30	; 11
     b3e:	00 00       	nop
     b40:	41 fa       	bst	r4, 1
     b42:	e5 f9       	bld	r30, 5
     b44:	eb b9       	out	0x0b, r30	; 11
     b46:	00 00       	nop
     b48:	40 fa       	bst	r4, 0
     b4a:	e5 f9       	bld	r30, 5
     b4c:	eb b9       	out	0x0b, r30	; 11
     b4e:	4d 90       	ld	r4, X+
     b50:	47 fa       	bst	r4, 7
     b52:	e5 f9       	bld	r30, 5
     b54:	eb b9       	out	0x0b, r30	; 11
     b56:	00 00       	nop
     b58:	46 fa       	bst	r4, 6
     b5a:	e5 f9       	bld	r30, 5
     b5c:	eb b9       	out	0x0b, r30	; 11
     b5e:	00 00       	nop
     b60:	45 fa       	bst	r4, 5
     b62:	e5 f9       	bld	r30, 5
     b64:	eb b9       	out	0x0b, r30	; 11
     b66:	00 00       	nop
     b68:	44 fa       	bst	r4, 4
     b6a:	e5 f9       	bld	r30, 5
     b6c:	eb b9       	out	0x0b, r30	; 11
     b6e:	00 00       	nop
     b70:	43 fa       	bst	r4, 3
     b72:	e5 f9       	bld	r30, 5
     b74:	eb b9       	out	0x0b, r30	; 11
     b76:	00 00       	nop
     b78:	42 fa       	bst	r4, 2
     b7a:	e5 f9       	bld	r30, 5
     b7c:	eb b9       	out	0x0b, r30	; 11
     b7e:	00 00       	nop
     b80:	41 fa       	bst	r4, 1
     b82:	e5 f9       	bld	r30, 5
     b84:	eb b9       	out	0x0b, r30	; 11
     b86:	00 00       	nop
     b88:	40 fa       	bst	r4, 0
     b8a:	e5 f9       	bld	r30, 5
     b8c:	eb b9       	out	0x0b, r30	; 11
     b8e:	4d 90       	ld	r4, X+
     b90:	47 fa       	bst	r4, 7
     b92:	e5 f9       	bld	r30, 5
     b94:	eb b9       	out	0x0b, r30	; 11
     b96:	00 00       	nop
     b98:	46 fa       	bst	r4, 6
     b9a:	e5 f9       	bld	r30, 5
     b9c:	eb b9       	out	0x0b, r30	; 11
     b9e:	00 00       	nop
     ba0:	45 fa       	bst	r4, 5
     ba2:	e5 f9       	bld	r30, 5
     ba4:	eb b9       	out	0x0b, r30	; 11
     ba6:	00 00       	nop
     ba8:	44 fa       	bst	r4, 4
     baa:	e5 f9       	bld	r30, 5
     bac:	eb b9       	out	0x0b, r30	; 11
     bae:	00 00       	nop
     bb0:	43 fa       	bst	r4, 3
     bb2:	e5 f9       	bld	r30, 5
     bb4:	eb b9       	out	0x0b, r30	; 11
     bb6:	00 00       	nop
     bb8:	42 fa       	bst	r4, 2
     bba:	e5 f9       	bld	r30, 5
     bbc:	eb b9       	out	0x0b, r30	; 11
     bbe:	00 00       	nop
     bc0:	41 fa       	bst	r4, 1
     bc2:	e5 f9       	bld	r30, 5
     bc4:	eb b9       	out	0x0b, r30	; 11
     bc6:	00 00       	nop
     bc8:	40 fa       	bst	r4, 0
     bca:	e5 f9       	bld	r30, 5
     bcc:	eb b9       	out	0x0b, r30	; 11
     bce:	4d 90       	ld	r4, X+
     bd0:	47 fa       	bst	r4, 7
     bd2:	e5 f9       	bld	r30, 5
     bd4:	eb b9       	out	0x0b, r30	; 11
     bd6:	00 00       	nop
     bd8:	46 fa       	bst	r4, 6
     bda:	e5 f9       	bld	r30, 5
     bdc:	eb b9       	out	0x0b, r30	; 11
     bde:	00 00       	nop
     be0:	45 fa       	bst	r4, 5
     be2:	e5 f9       	bld	r30, 5
     be4:	eb b9       	out	0x0b, r30	; 11
     be6:	00 00       	nop
     be8:	44 fa       	bst	r4, 4
     bea:	e5 f9       	bld	r30, 5
     bec:	eb b9       	out	0x0b, r30	; 11
     bee:	00 00       	nop
     bf0:	43 fa       	bst	r4, 3
     bf2:	e5 f9       	bld	r30, 5
     bf4:	eb b9       	out	0x0b, r30	; 11
     bf6:	00 00       	nop
     bf8:	42 fa       	bst	r4, 2
     bfa:	e5 f9       	bld	r30, 5
     bfc:	eb b9       	out	0x0b, r30	; 11
     bfe:	00 00       	nop
     c00:	41 fa       	bst	r4, 1
     c02:	e5 f9       	bld	r30, 5
     c04:	eb b9       	out	0x0b, r30	; 11
     c06:	00 00       	nop
     c08:	40 fa       	bst	r4, 0
     c0a:	e5 f9       	bld	r30, 5
     c0c:	eb b9       	out	0x0b, r30	; 11
     c0e:	4d 90       	ld	r4, X+
     c10:	47 fa       	bst	r4, 7
     c12:	e5 f9       	bld	r30, 5
     c14:	eb b9       	out	0x0b, r30	; 11
     c16:	00 00       	nop
     c18:	46 fa       	bst	r4, 6
     c1a:	e5 f9       	bld	r30, 5
     c1c:	eb b9       	out	0x0b, r30	; 11
     c1e:	00 00       	nop
     c20:	45 fa       	bst	r4, 5
     c22:	e5 f9       	bld	r30, 5
     c24:	eb b9       	out	0x0b, r30	; 11
     c26:	00 00       	nop
     c28:	44 fa       	bst	r4, 4
     c2a:	e5 f9       	bld	r30, 5
     c2c:	eb b9       	out	0x0b, r30	; 11
     c2e:	00 00       	nop
     c30:	43 fa       	bst	r4, 3
     c32:	e5 f9       	bld	r30, 5
     c34:	eb b9       	out	0x0b, r30	; 11
     c36:	00 00       	nop
     c38:	42 fa       	bst	r4, 2
     c3a:	e5 f9       	bld	r30, 5
     c3c:	eb b9       	out	0x0b, r30	; 11
     c3e:	00 00       	nop
     c40:	41 fa       	bst	r4, 1
     c42:	e5 f9       	bld	r30, 5
     c44:	eb b9       	out	0x0b, r30	; 11
     c46:	00 00       	nop
     c48:	40 fa       	bst	r4, 0
     c4a:	e5 f9       	bld	r30, 5
     c4c:	eb b9       	out	0x0b, r30	; 11
     c4e:	4d 90       	ld	r4, X+
     c50:	47 fa       	bst	r4, 7
     c52:	e5 f9       	bld	r30, 5
     c54:	eb b9       	out	0x0b, r30	; 11
     c56:	00 00       	nop
     c58:	46 fa       	bst	r4, 6
     c5a:	e5 f9       	bld	r30, 5
     c5c:	eb b9       	out	0x0b, r30	; 11
     c5e:	00 00       	nop
     c60:	45 fa       	bst	r4, 5
     c62:	e5 f9       	bld	r30, 5
     c64:	eb b9       	out	0x0b, r30	; 11
     c66:	00 00       	nop
     c68:	44 fa       	bst	r4, 4
     c6a:	e5 f9       	bld	r30, 5
     c6c:	eb b9       	out	0x0b, r30	; 11
     c6e:	00 00       	nop
     c70:	43 fa       	bst	r4, 3
     c72:	e5 f9       	bld	r30, 5
     c74:	eb b9       	out	0x0b, r30	; 11
     c76:	00 00       	nop
     c78:	42 fa       	bst	r4, 2
     c7a:	e5 f9       	bld	r30, 5
     c7c:	eb b9       	out	0x0b, r30	; 11
     c7e:	00 00       	nop
     c80:	41 fa       	bst	r4, 1
     c82:	e5 f9       	bld	r30, 5
     c84:	eb b9       	out	0x0b, r30	; 11
     c86:	00 00       	nop
     c88:	40 fa       	bst	r4, 0
     c8a:	e5 f9       	bld	r30, 5
     c8c:	eb b9       	out	0x0b, r30	; 11
     c8e:	4d 90       	ld	r4, X+
     c90:	47 fa       	bst	r4, 7
     c92:	e5 f9       	bld	r30, 5
     c94:	eb b9       	out	0x0b, r30	; 11
     c96:	00 00       	nop
     c98:	46 fa       	bst	r4, 6
     c9a:	e5 f9       	bld	r30, 5
     c9c:	eb b9       	out	0x0b, r30	; 11
     c9e:	00 00       	nop
     ca0:	45 fa       	bst	r4, 5
     ca2:	e5 f9       	bld	r30, 5
     ca4:	eb b9       	out	0x0b, r30	; 11
     ca6:	00 00       	nop
     ca8:	44 fa       	bst	r4, 4
     caa:	e5 f9       	bld	r30, 5
     cac:	eb b9       	out	0x0b, r30	; 11
     cae:	00 00       	nop
     cb0:	43 fa       	bst	r4, 3
     cb2:	e5 f9       	bld	r30, 5
     cb4:	eb b9       	out	0x0b, r30	; 11
     cb6:	00 00       	nop
     cb8:	42 fa       	bst	r4, 2
     cba:	e5 f9       	bld	r30, 5
     cbc:	eb b9       	out	0x0b, r30	; 11
     cbe:	00 00       	nop
     cc0:	41 fa       	bst	r4, 1
     cc2:	e5 f9       	bld	r30, 5
     cc4:	eb b9       	out	0x0b, r30	; 11
     cc6:	00 00       	nop
     cc8:	40 fa       	bst	r4, 0
     cca:	e5 f9       	bld	r30, 5
     ccc:	eb b9       	out	0x0b, r30	; 11
     cce:	4d 90       	ld	r4, X+
     cd0:	47 fa       	bst	r4, 7
     cd2:	e5 f9       	bld	r30, 5
     cd4:	eb b9       	out	0x0b, r30	; 11
     cd6:	00 00       	nop
     cd8:	46 fa       	bst	r4, 6
     cda:	e5 f9       	bld	r30, 5
     cdc:	eb b9       	out	0x0b, r30	; 11
     cde:	00 00       	nop
     ce0:	45 fa       	bst	r4, 5
     ce2:	e5 f9       	bld	r30, 5
     ce4:	eb b9       	out	0x0b, r30	; 11
     ce6:	00 00       	nop
     ce8:	44 fa       	bst	r4, 4
     cea:	e5 f9       	bld	r30, 5
     cec:	eb b9       	out	0x0b, r30	; 11
     cee:	00 00       	nop
     cf0:	43 fa       	bst	r4, 3
     cf2:	e5 f9       	bld	r30, 5
     cf4:	eb b9       	out	0x0b, r30	; 11
     cf6:	00 00       	nop
     cf8:	42 fa       	bst	r4, 2
     cfa:	e5 f9       	bld	r30, 5
     cfc:	eb b9       	out	0x0b, r30	; 11
     cfe:	00 00       	nop
     d00:	41 fa       	bst	r4, 1
     d02:	e5 f9       	bld	r30, 5
     d04:	eb b9       	out	0x0b, r30	; 11
     d06:	00 00       	nop
     d08:	40 fa       	bst	r4, 0
     d0a:	e5 f9       	bld	r30, 5
     d0c:	eb b9       	out	0x0b, r30	; 11
     d0e:	4d 90       	ld	r4, X+
     d10:	47 fa       	bst	r4, 7
     d12:	e5 f9       	bld	r30, 5
     d14:	eb b9       	out	0x0b, r30	; 11
     d16:	00 00       	nop
     d18:	46 fa       	bst	r4, 6
     d1a:	e5 f9       	bld	r30, 5
     d1c:	eb b9       	out	0x0b, r30	; 11
     d1e:	00 00       	nop
     d20:	45 fa       	bst	r4, 5
     d22:	e5 f9       	bld	r30, 5
     d24:	eb b9       	out	0x0b, r30	; 11
     d26:	00 00       	nop
     d28:	44 fa       	bst	r4, 4
     d2a:	e5 f9       	bld	r30, 5
     d2c:	eb b9       	out	0x0b, r30	; 11
     d2e:	00 00       	nop
     d30:	43 fa       	bst	r4, 3
     d32:	e5 f9       	bld	r30, 5
     d34:	eb b9       	out	0x0b, r30	; 11
     d36:	00 00       	nop
     d38:	42 fa       	bst	r4, 2
     d3a:	e5 f9       	bld	r30, 5
     d3c:	eb b9       	out	0x0b, r30	; 11
     d3e:	00 00       	nop
     d40:	41 fa       	bst	r4, 1
     d42:	e5 f9       	bld	r30, 5
     d44:	eb b9       	out	0x0b, r30	; 11
     d46:	00 00       	nop
     d48:	40 fa       	bst	r4, 0
     d4a:	e5 f9       	bld	r30, 5
     d4c:	eb b9       	out	0x0b, r30	; 11
     d4e:	4d 90       	ld	r4, X+
     d50:	47 fa       	bst	r4, 7
     d52:	e5 f9       	bld	r30, 5
     d54:	eb b9       	out	0x0b, r30	; 11
     d56:	00 00       	nop
     d58:	46 fa       	bst	r4, 6
     d5a:	e5 f9       	bld	r30, 5
     d5c:	eb b9       	out	0x0b, r30	; 11
     d5e:	00 00       	nop
     d60:	45 fa       	bst	r4, 5
     d62:	e5 f9       	bld	r30, 5
     d64:	eb b9       	out	0x0b, r30	; 11
     d66:	00 00       	nop
     d68:	44 fa       	bst	r4, 4
     d6a:	e5 f9       	bld	r30, 5
     d6c:	eb b9       	out	0x0b, r30	; 11
     d6e:	00 00       	nop
     d70:	43 fa       	bst	r4, 3
     d72:	e5 f9       	bld	r30, 5
     d74:	eb b9       	out	0x0b, r30	; 11
     d76:	00 00       	nop
     d78:	42 fa       	bst	r4, 2
     d7a:	e5 f9       	bld	r30, 5
     d7c:	eb b9       	out	0x0b, r30	; 11
     d7e:	00 00       	nop
     d80:	41 fa       	bst	r4, 1
     d82:	e5 f9       	bld	r30, 5
     d84:	eb b9       	out	0x0b, r30	; 11
     d86:	00 00       	nop
     d88:	40 fa       	bst	r4, 0
     d8a:	e5 f9       	bld	r30, 5
     d8c:	eb b9       	out	0x0b, r30	; 11
     d8e:	4d 90       	ld	r4, X+
     d90:	47 fa       	bst	r4, 7
     d92:	e5 f9       	bld	r30, 5
     d94:	eb b9       	out	0x0b, r30	; 11
     d96:	00 00       	nop
     d98:	46 fa       	bst	r4, 6
     d9a:	e5 f9       	bld	r30, 5
     d9c:	eb b9       	out	0x0b, r30	; 11
     d9e:	00 00       	nop
     da0:	45 fa       	bst	r4, 5
     da2:	e5 f9       	bld	r30, 5
     da4:	eb b9       	out	0x0b, r30	; 11
     da6:	00 00       	nop
     da8:	44 fa       	bst	r4, 4
     daa:	e5 f9       	bld	r30, 5
     dac:	eb b9       	out	0x0b, r30	; 11
     dae:	00 00       	nop
     db0:	43 fa       	bst	r4, 3
     db2:	e5 f9       	bld	r30, 5
     db4:	eb b9       	out	0x0b, r30	; 11
     db6:	00 00       	nop
     db8:	42 fa       	bst	r4, 2
     dba:	e5 f9       	bld	r30, 5
     dbc:	eb b9       	out	0x0b, r30	; 11
     dbe:	00 00       	nop
     dc0:	41 fa       	bst	r4, 1
     dc2:	e5 f9       	bld	r30, 5
     dc4:	eb b9       	out	0x0b, r30	; 11
     dc6:	00 00       	nop
     dc8:	40 fa       	bst	r4, 0
     dca:	e5 f9       	bld	r30, 5
     dcc:	eb b9       	out	0x0b, r30	; 11
     dce:	4d 90       	ld	r4, X+
     dd0:	47 fa       	bst	r4, 7
     dd2:	e5 f9       	bld	r30, 5
     dd4:	eb b9       	out	0x0b, r30	; 11
     dd6:	00 00       	nop
     dd8:	46 fa       	bst	r4, 6
     dda:	e5 f9       	bld	r30, 5
     ddc:	eb b9       	out	0x0b, r30	; 11
     dde:	00 00       	nop
     de0:	45 fa       	bst	r4, 5
     de2:	e5 f9       	bld	r30, 5
     de4:	eb b9       	out	0x0b, r30	; 11
     de6:	00 00       	nop
     de8:	44 fa       	bst	r4, 4
     dea:	e5 f9       	bld	r30, 5
     dec:	eb b9       	out	0x0b, r30	; 11
     dee:	00 00       	nop
     df0:	43 fa       	bst	r4, 3
     df2:	e5 f9       	bld	r30, 5
     df4:	eb b9       	out	0x0b, r30	; 11
     df6:	00 00       	nop
     df8:	42 fa       	bst	r4, 2
     dfa:	e5 f9       	bld	r30, 5
     dfc:	eb b9       	out	0x0b, r30	; 11
     dfe:	00 00       	nop
     e00:	41 fa       	bst	r4, 1
     e02:	e5 f9       	bld	r30, 5
     e04:	eb b9       	out	0x0b, r30	; 11
     e06:	00 00       	nop
     e08:	40 fa       	bst	r4, 0
     e0a:	e5 f9       	bld	r30, 5
     e0c:	eb b9       	out	0x0b, r30	; 11
     e0e:	4d 90       	ld	r4, X+
     e10:	47 fa       	bst	r4, 7
     e12:	e5 f9       	bld	r30, 5
     e14:	eb b9       	out	0x0b, r30	; 11
     e16:	00 00       	nop
     e18:	46 fa       	bst	r4, 6
     e1a:	e5 f9       	bld	r30, 5
     e1c:	eb b9       	out	0x0b, r30	; 11
     e1e:	00 00       	nop
     e20:	45 fa       	bst	r4, 5
     e22:	e5 f9       	bld	r30, 5
     e24:	eb b9       	out	0x0b, r30	; 11
     e26:	00 00       	nop
     e28:	44 fa       	bst	r4, 4
     e2a:	e5 f9       	bld	r30, 5
     e2c:	eb b9       	out	0x0b, r30	; 11
     e2e:	00 00       	nop
     e30:	43 fa       	bst	r4, 3
     e32:	e5 f9       	bld	r30, 5
     e34:	eb b9       	out	0x0b, r30	; 11
     e36:	00 00       	nop
     e38:	42 fa       	bst	r4, 2
     e3a:	e5 f9       	bld	r30, 5
     e3c:	eb b9       	out	0x0b, r30	; 11
     e3e:	00 00       	nop
     e40:	41 fa       	bst	r4, 1
     e42:	e5 f9       	bld	r30, 5
     e44:	eb b9       	out	0x0b, r30	; 11
     e46:	00 00       	nop
     e48:	40 fa       	bst	r4, 0
     e4a:	e5 f9       	bld	r30, 5
     e4c:	eb b9       	out	0x0b, r30	; 11
     e4e:	4d 90       	ld	r4, X+
     e50:	47 fa       	bst	r4, 7
     e52:	e5 f9       	bld	r30, 5
     e54:	eb b9       	out	0x0b, r30	; 11
     e56:	00 00       	nop
     e58:	46 fa       	bst	r4, 6
     e5a:	e5 f9       	bld	r30, 5
     e5c:	eb b9       	out	0x0b, r30	; 11
     e5e:	00 00       	nop
     e60:	45 fa       	bst	r4, 5
     e62:	e5 f9       	bld	r30, 5
     e64:	eb b9       	out	0x0b, r30	; 11
     e66:	00 00       	nop
     e68:	44 fa       	bst	r4, 4
     e6a:	e5 f9       	bld	r30, 5
     e6c:	eb b9       	out	0x0b, r30	; 11
     e6e:	00 00       	nop
     e70:	43 fa       	bst	r4, 3
     e72:	e5 f9       	bld	r30, 5
     e74:	eb b9       	out	0x0b, r30	; 11
     e76:	00 00       	nop
     e78:	42 fa       	bst	r4, 2
     e7a:	e5 f9       	bld	r30, 5
     e7c:	eb b9       	out	0x0b, r30	; 11
     e7e:	00 00       	nop
     e80:	41 fa       	bst	r4, 1
     e82:	e5 f9       	bld	r30, 5
     e84:	eb b9       	out	0x0b, r30	; 11
     e86:	00 00       	nop
     e88:	40 fa       	bst	r4, 0
     e8a:	e5 f9       	bld	r30, 5
     e8c:	eb b9       	out	0x0b, r30	; 11
     e8e:	4c 90       	ld	r4, X
     e90:	47 fa       	bst	r4, 7
     e92:	e5 f9       	bld	r30, 5
     e94:	eb b9       	out	0x0b, r30	; 11
     e96:	00 00       	nop
     e98:	46 fa       	bst	r4, 6
     e9a:	e5 f9       	bld	r30, 5
     e9c:	eb b9       	out	0x0b, r30	; 11
     e9e:	00 00       	nop
     ea0:	45 fa       	bst	r4, 5
     ea2:	e5 f9       	bld	r30, 5
     ea4:	eb b9       	out	0x0b, r30	; 11
     ea6:	00 00       	nop
     ea8:	44 fa       	bst	r4, 4
     eaa:	e5 f9       	bld	r30, 5
     eac:	eb b9       	out	0x0b, r30	; 11
     eae:	00 00       	nop
     eb0:	43 fa       	bst	r4, 3
     eb2:	e5 f9       	bld	r30, 5
     eb4:	eb b9       	out	0x0b, r30	; 11
     eb6:	00 00       	nop
     eb8:	42 fa       	bst	r4, 2
     eba:	e5 f9       	bld	r30, 5
     ebc:	eb b9       	out	0x0b, r30	; 11
     ebe:	00 00       	nop
     ec0:	41 fa       	bst	r4, 1
     ec2:	e5 f9       	bld	r30, 5
     ec4:	eb b9       	out	0x0b, r30	; 11
     ec6:	00 00       	nop
     ec8:	40 fa       	bst	r4, 0
     eca:	e5 f9       	bld	r30, 5
     ecc:	eb b9       	out	0x0b, r30	; 11
     ece:	e8 94       	clt
     ed0:	e0 e4       	ldi	r30, 0x40	; 64
     ed2:	e5 f9       	bld	r30, 5
     ed4:	eb b9       	out	0x0b, r30	; 11
		_delay_us(8); //12

		//blast the data to the screen
		byteblast();
	}         
}
     ed6:	9f 91       	pop	r25
     ed8:	8f 91       	pop	r24
     eda:	3f 91       	pop	r19
     edc:	2f 91       	pop	r18
     ede:	0f 90       	pop	r0
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	0f 90       	pop	r0
     ee4:	1f 90       	pop	r1
     ee6:	18 95       	reti

00000ee8 <video_pt>:

//==================================
//plot one point 
//at x,y with color 1=white 0=black 2=invert 
void video_pt(char x, char y, char c) {
     ee8:	98 2f       	mov	r25, r24
	//each line has 18 bytes
	//calculate i based upon this and x,y
	// the byte with the pixel in it
	int i = (x >> 3) + ((int)y<<4) + ((int)y<<1);
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	db 01       	movw	r26, r22
     eee:	aa 0f       	add	r26, r26
     ef0:	bb 1f       	adc	r27, r27
     ef2:	84 e0       	ldi	r24, 0x04	; 4
     ef4:	66 0f       	add	r22, r22
     ef6:	77 1f       	adc	r23, r23
     ef8:	8a 95       	dec	r24
     efa:	e1 f7       	brne	.-8      	; 0xef4 <video_pt+0xc>
     efc:	a6 0f       	add	r26, r22
     efe:	b7 1f       	adc	r27, r23
     f00:	89 2f       	mov	r24, r25
     f02:	86 95       	lsr	r24
     f04:	86 95       	lsr	r24
     f06:	86 95       	lsr	r24
     f08:	a8 0f       	add	r26, r24
     f0a:	b1 1d       	adc	r27, r1

	if (c==1)
     f0c:	41 30       	cpi	r20, 0x01	; 1
     f0e:	61 f4       	brne	.+24     	; 0xf28 <video_pt+0x40>
	  screen[i] = screen[i] | pos[x & 7];
     f10:	a0 57       	subi	r26, 0x70	; 112
     f12:	bf 4f       	sbci	r27, 0xFF	; 255
     f14:	e9 2f       	mov	r30, r25
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	e7 70       	andi	r30, 0x07	; 7
     f1a:	f0 70       	andi	r31, 0x00	; 0
     f1c:	e0 5a       	subi	r30, 0xA0	; 160
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	8c 91       	ld	r24, X
     f22:	90 81       	ld	r25, Z
     f24:	89 2b       	or	r24, r25
     f26:	16 c0       	rjmp	.+44     	; 0xf54 <video_pt+0x6c>
     f28:	a0 57       	subi	r26, 0x70	; 112
     f2a:	bf 4f       	sbci	r27, 0xFF	; 255
     f2c:	e9 2f       	mov	r30, r25
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
    else if (c==0)
     f30:	44 23       	and	r20, r20
     f32:	49 f4       	brne	.+18     	; 0xf46 <video_pt+0x5e>
	  screen[i] = screen[i] & ~pos[x & 7];
     f34:	e7 70       	andi	r30, 0x07	; 7
     f36:	f0 70       	andi	r31, 0x00	; 0
     f38:	e0 5a       	subi	r30, 0xA0	; 160
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	90 81       	ld	r25, Z
     f3e:	90 95       	com	r25
     f40:	8c 91       	ld	r24, X
     f42:	89 23       	and	r24, r25
     f44:	07 c0       	rjmp	.+14     	; 0xf54 <video_pt+0x6c>
    else
	  screen[i] = screen[i] ^ pos[x & 7];
     f46:	e7 70       	andi	r30, 0x07	; 7
     f48:	f0 70       	andi	r31, 0x00	; 0
     f4a:	e0 5a       	subi	r30, 0xA0	; 160
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	8c 91       	ld	r24, X
     f50:	90 81       	ld	r25, Z
     f52:	89 27       	eor	r24, r25
     f54:	8c 93       	st	X, r24
     f56:	08 95       	ret

00000f58 <video_line>:
//plot a line 
//at x1,y1 to x2,y2 with color 1=white 0=black 2=invert 
//NOTE: this function requires signed chars   
//Code is from David Rodgers,
//"Procedural Elements of Computer Graphics",1985
void video_line(char x1, char y1, char x2, char y2, char c) {
     f58:	2f 92       	push	r2
     f5a:	3f 92       	push	r3
     f5c:	4f 92       	push	r4
     f5e:	5f 92       	push	r5
     f60:	6f 92       	push	r6
     f62:	7f 92       	push	r7
     f64:	8f 92       	push	r8
     f66:	9f 92       	push	r9
     f68:	af 92       	push	r10
     f6a:	bf 92       	push	r11
     f6c:	cf 92       	push	r12
     f6e:	df 92       	push	r13
     f70:	ef 92       	push	r14
     f72:	ff 92       	push	r15
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <video_line+0x26>
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <video_line+0x28>
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	0a 83       	std	Y+2, r16	; 0x02
	int e;
	signed int dx,dy,j, temp;
	signed char s1,s2, xchange;
    signed int x,y;
        
	x = x1;
     f86:	c8 2e       	mov	r12, r24
     f88:	dd 24       	eor	r13, r13
	y = y1;
     f8a:	e6 2e       	mov	r14, r22
     f8c:	ff 24       	eor	r15, r15
	
	//take absolute value
	if (x2 < x1) {
     f8e:	48 17       	cp	r20, r24
     f90:	38 f4       	brcc	.+14     	; 0xfa0 <video_line+0x48>
		dx = x1 - x2;
     f92:	c6 01       	movw	r24, r12
     f94:	84 1b       	sub	r24, r20
     f96:	91 09       	sbc	r25, r1
     f98:	9c 83       	std	Y+4, r25	; 0x04
     f9a:	8b 83       	std	Y+3, r24	; 0x03
     f9c:	7f ef       	ldi	r23, 0xFF	; 255
     f9e:	0d c0       	rjmp	.+26     	; 0xfba <video_line+0x62>
		s1 = -1;
	}

	else if (x2 == x1) {
     fa0:	48 17       	cp	r20, r24
     fa2:	21 f4       	brne	.+8      	; 0xfac <video_line+0x54>
     fa4:	1c 82       	std	Y+4, r1	; 0x04
     fa6:	1b 82       	std	Y+3, r1	; 0x03
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	07 c0       	rjmp	.+14     	; 0xfba <video_line+0x62>
		dx = 0;
		s1 = 0;
	}

	else {
		dx = x2 - x1;
     fac:	e4 2f       	mov	r30, r20
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	ec 19       	sub	r30, r12
     fb2:	fd 09       	sbc	r31, r13
     fb4:	fc 83       	std	Y+4, r31	; 0x04
     fb6:	eb 83       	std	Y+3, r30	; 0x03
     fb8:	71 e0       	ldi	r23, 0x01	; 1
		s1 = 1;
	}

	if (y2 < y1) {
     fba:	26 17       	cp	r18, r22
     fbc:	28 f4       	brcc	.+10     	; 0xfc8 <video_line+0x70>
		dy = y1 - y2;
     fbe:	a7 01       	movw	r20, r14
     fc0:	42 1b       	sub	r20, r18
     fc2:	51 09       	sbc	r21, r1
     fc4:	6f ef       	ldi	r22, 0xFF	; 255
     fc6:	0b c0       	rjmp	.+22     	; 0xfde <video_line+0x86>
		s2 = -1;
	}

	else if (y2 == y1) {
     fc8:	26 17       	cp	r18, r22
     fca:	21 f4       	brne	.+8      	; 0xfd4 <video_line+0x7c>
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	05 c0       	rjmp	.+10     	; 0xfde <video_line+0x86>
		dy = 0;
		s2 = 0;
	}

	else {
		dy = y2 - y1;
     fd4:	42 2f       	mov	r20, r18
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	4e 19       	sub	r20, r14
     fda:	5f 09       	sbc	r21, r15
     fdc:	61 e0       	ldi	r22, 0x01	; 1
		s2 = 1;
	}

	xchange = 0;   

	if (dy>dx) {
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	9c 81       	ldd	r25, Y+4	; 0x04
     fe2:	84 17       	cp	r24, r20
     fe4:	95 07       	cpc	r25, r21
     fe6:	44 f4       	brge	.+16     	; 0xff8 <video_line+0xa0>
     fe8:	ca 01       	movw	r24, r20
     fea:	4b 81       	ldd	r20, Y+3	; 0x03
     fec:	5c 81       	ldd	r21, Y+4	; 0x04
     fee:	9c 83       	std	Y+4, r25	; 0x04
     ff0:	8b 83       	std	Y+3, r24	; 0x03
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	99 83       	std	Y+1, r25	; 0x01
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <video_line+0xa2>
     ff8:	19 82       	std	Y+1, r1	; 0x01
		dx = dy;
		dy = temp;
		xchange = 1;
	} 

	e = ((int)dy<<1) - dx;  
     ffa:	2a 01       	movw	r4, r20
     ffc:	44 0c       	add	r4, r4
     ffe:	55 1c       	adc	r5, r5
    1000:	82 01       	movw	r16, r4
    1002:	eb 81       	ldd	r30, Y+3	; 0x03
    1004:	fc 81       	ldd	r31, Y+4	; 0x04
    1006:	0e 1b       	sub	r16, r30
    1008:	1f 0b       	sbc	r17, r31
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
			else y = y + s2;
			e = e - ((int)dx<<1);
    100a:	1f 01       	movw	r2, r30
    100c:	22 0c       	add	r2, r2
    100e:	33 1c       	adc	r3, r3
    1010:	aa 24       	eor	r10, r10
    1012:	bb 24       	eor	r11, r11
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
			else y = y + s2;
    1014:	66 2e       	mov	r6, r22
    1016:	77 24       	eor	r7, r7
    1018:	67 fc       	sbrc	r6, 7
    101a:	70 94       	com	r7
	 
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
    101c:	87 2e       	mov	r8, r23
    101e:	99 24       	eor	r9, r9
    1020:	87 fc       	sbrc	r8, 7
    1022:	90 94       	com	r9
    1024:	1e c0       	rjmp	.+60     	; 0x1062 <video_line+0x10a>
	} 

	e = ((int)dy<<1) - dx;  
	 
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
    1026:	8c 2d       	mov	r24, r12
    1028:	6e 2d       	mov	r22, r14
    102a:	4a 81       	ldd	r20, Y+2	; 0x02
    102c:	0e 94 74 07 	call	0xee8	; 0xee8 <video_pt>
		 
		if (e>=0) {
    1030:	17 fd       	sbrc	r17, 7
    1032:	0a c0       	rjmp	.+20     	; 0x1048 <video_line+0xf0>
			if (xchange==1) x = x + s1;
    1034:	f9 81       	ldd	r31, Y+1	; 0x01
    1036:	f1 30       	cpi	r31, 0x01	; 1
    1038:	19 f4       	brne	.+6      	; 0x1040 <video_line+0xe8>
    103a:	c8 0c       	add	r12, r8
    103c:	d9 1c       	adc	r13, r9
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <video_line+0xec>
			else y = y + s2;
    1040:	e6 0c       	add	r14, r6
    1042:	f7 1c       	adc	r15, r7
			e = e - ((int)dx<<1);
    1044:	02 19       	sub	r16, r2
    1046:	13 09       	sbc	r17, r3
		}

		if (xchange==1) y = y + s2;
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	19 f4       	brne	.+6      	; 0x1054 <video_line+0xfc>
    104e:	e6 0c       	add	r14, r6
    1050:	f7 1c       	adc	r15, r7
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <video_line+0x100>
		else x = x + s1;
    1054:	c8 0c       	add	r12, r8
    1056:	d9 1c       	adc	r13, r9

		e = e + ((int)dy<<1);
    1058:	04 0d       	add	r16, r4
    105a:	15 1d       	adc	r17, r5
		xchange = 1;
	} 

	e = ((int)dy<<1) - dx;  
	 
	for (j=0; j<=dx; j++) {
    105c:	08 94       	sec
    105e:	a1 1c       	adc	r10, r1
    1060:	b1 1c       	adc	r11, r1
    1062:	eb 81       	ldd	r30, Y+3	; 0x03
    1064:	fc 81       	ldd	r31, Y+4	; 0x04
    1066:	ea 15       	cp	r30, r10
    1068:	fb 05       	cpc	r31, r11
    106a:	ec f6       	brge	.-70     	; 0x1026 <video_line+0xce>
		if (xchange==1) y = y + s2;
		else x = x + s1;

		e = e + ((int)dy<<1);
	}
}
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	ff 90       	pop	r15
    107e:	ef 90       	pop	r14
    1080:	df 90       	pop	r13
    1082:	cf 90       	pop	r12
    1084:	bf 90       	pop	r11
    1086:	af 90       	pop	r10
    1088:	9f 90       	pop	r9
    108a:	8f 90       	pop	r8
    108c:	7f 90       	pop	r7
    108e:	6f 90       	pop	r6
    1090:	5f 90       	pop	r5
    1092:	4f 90       	pop	r4
    1094:	3f 90       	pop	r3
    1096:	2f 90       	pop	r2
    1098:	08 95       	ret

0000109a <video_putchar>:

//==================================
// put a big character on the screen
// c is index into bitmap
void video_putchar(char x, char y, char c) { 
    109a:	8f 92       	push	r8
    109c:	9f 92       	push	r9
    109e:	af 92       	push	r10
    10a0:	bf 92       	push	r11
    10a2:	cf 92       	push	r12
    10a4:	df 92       	push	r13
    10a6:	ef 92       	push	r14
    10a8:	ff 92       	push	r15
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	e8 2e       	mov	r14, r24
    10b4:	f6 2e       	mov	r15, r22
	uint8_t j;

	for (i=0;i<7;i++) {
        y_pos = y + i;

		j = pgm_read_byte(((uint32_t)(ascii)) + c*7 + i);
    10b6:	87 e0       	ldi	r24, 0x07	; 7
    10b8:	48 9f       	mul	r20, r24
    10ba:	a0 01       	movw	r20, r0
    10bc:	11 24       	eor	r1, r1
    10be:	ea 01       	movw	r28, r20
    10c0:	c9 5e       	subi	r28, 0xE9	; 233
    10c2:	de 4f       	sbci	r29, 0xFE	; 254

        video_pt(x,   y_pos, (j & 0x80)==0x80);  
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
    10c4:	8e 2c       	mov	r8, r14
    10c6:	83 94       	inc	r8
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
    10c8:	12 e0       	ldi	r17, 0x02	; 2
    10ca:	91 2e       	mov	r9, r17
    10cc:	9e 0c       	add	r9, r14
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
    10ce:	b3 e0       	ldi	r27, 0x03	; 3
    10d0:	ab 2e       	mov	r10, r27
    10d2:	ae 0c       	add	r10, r14
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
    10d4:	a4 e0       	ldi	r26, 0x04	; 4
    10d6:	ba 2e       	mov	r11, r26
    10d8:	be 0c       	add	r11, r14
void video_putchar(char x, char y, char c) { 
    char i;
	char y_pos;
	uint8_t j;

	for (i=0;i<7;i++) {
    10da:	fe e1       	ldi	r31, 0x1E	; 30
    10dc:	cf 2e       	mov	r12, r31
    10de:	f1 e0       	ldi	r31, 0x01	; 1
    10e0:	df 2e       	mov	r13, r31
    10e2:	c4 0e       	add	r12, r20
    10e4:	d5 1e       	adc	r13, r21
        y_pos = y + i;

		j = pgm_read_byte(((uint32_t)(ascii)) + c*7 + i);
    10e6:	fe 01       	movw	r30, r28
    10e8:	04 91       	lpm	r16, Z+

        video_pt(x,   y_pos, (j & 0x80)==0x80);  
    10ea:	40 2f       	mov	r20, r16
    10ec:	44 1f       	adc	r20, r20
    10ee:	44 27       	eor	r20, r20
    10f0:	44 1f       	adc	r20, r20
    10f2:	8e 2d       	mov	r24, r14
    10f4:	6f 2d       	mov	r22, r15
    10f6:	0e 94 74 07 	call	0xee8	; 0xee8 <video_pt>
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
    10fa:	10 e0       	ldi	r17, 0x00	; 0
    10fc:	a8 01       	movw	r20, r16
    10fe:	e6 e0       	ldi	r30, 0x06	; 6
    1100:	56 95       	lsr	r21
    1102:	47 95       	ror	r20
    1104:	ea 95       	dec	r30
    1106:	e1 f7       	brne	.-8      	; 0x1100 <video_putchar+0x66>
    1108:	41 70       	andi	r20, 0x01	; 1
    110a:	88 2d       	mov	r24, r8
    110c:	6f 2d       	mov	r22, r15
    110e:	0e 94 74 07 	call	0xee8	; 0xee8 <video_pt>
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
    1112:	a8 01       	movw	r20, r16
    1114:	75 e0       	ldi	r23, 0x05	; 5
    1116:	56 95       	lsr	r21
    1118:	47 95       	ror	r20
    111a:	7a 95       	dec	r23
    111c:	e1 f7       	brne	.-8      	; 0x1116 <video_putchar+0x7c>
    111e:	41 70       	andi	r20, 0x01	; 1
    1120:	89 2d       	mov	r24, r9
    1122:	6f 2d       	mov	r22, r15
    1124:	0e 94 74 07 	call	0xee8	; 0xee8 <video_pt>
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
    1128:	a8 01       	movw	r20, r16
    112a:	64 e0       	ldi	r22, 0x04	; 4
    112c:	56 95       	lsr	r21
    112e:	47 95       	ror	r20
    1130:	6a 95       	dec	r22
    1132:	e1 f7       	brne	.-8      	; 0x112c <video_putchar+0x92>
    1134:	41 70       	andi	r20, 0x01	; 1
    1136:	8a 2d       	mov	r24, r10
    1138:	6f 2d       	mov	r22, r15
    113a:	0e 94 74 07 	call	0xee8	; 0xee8 <video_pt>
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
    113e:	53 e0       	ldi	r21, 0x03	; 3
    1140:	16 95       	lsr	r17
    1142:	07 95       	ror	r16
    1144:	5a 95       	dec	r21
    1146:	e1 f7       	brne	.-8      	; 0x1140 <video_putchar+0xa6>
    1148:	01 70       	andi	r16, 0x01	; 1
    114a:	8b 2d       	mov	r24, r11
    114c:	6f 2d       	mov	r22, r15
    114e:	40 2f       	mov	r20, r16
    1150:	0e 94 74 07 	call	0xee8	; 0xee8 <video_pt>
    1154:	21 96       	adiw	r28, 0x01	; 1
    1156:	f3 94       	inc	r15
void video_putchar(char x, char y, char c) { 
    char i;
	char y_pos;
	uint8_t j;

	for (i=0;i<7;i++) {
    1158:	cc 15       	cp	r28, r12
    115a:	dd 05       	cpc	r29, r13
    115c:	21 f6       	brne	.-120    	; 0x10e6 <video_putchar+0x4c>
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
    }
}
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	df 90       	pop	r13
    116c:	cf 90       	pop	r12
    116e:	bf 90       	pop	r11
    1170:	af 90       	pop	r10
    1172:	9f 90       	pop	r9
    1174:	8f 90       	pop	r8
    1176:	08 95       	ret

00001178 <video_puts>:

//==================================
// put a string of big characters on the screen
void video_puts(char x, char y, char *str) {
    1178:	ff 92       	push	r15
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	08 2f       	mov	r16, r24
    1184:	f6 2e       	mov	r15, r22
    1186:	ea 01       	movw	r28, r20
    1188:	10 e0       	ldi	r17, 0x00	; 0
    118a:	06 c0       	rjmp	.+12     	; 0x1198 <video_puts+0x20>
	char i;
	for (i=0; str[i]!=0; i++) { 
		video_putchar(x,y,str[i]);
    118c:	80 2f       	mov	r24, r16
    118e:	6f 2d       	mov	r22, r15
    1190:	0e 94 4d 08 	call	0x109a	; 0x109a <video_putchar>
		x = x+6;	
    1194:	0a 5f       	subi	r16, 0xFA	; 250

//==================================
// put a string of big characters on the screen
void video_puts(char x, char y, char *str) {
	char i;
	for (i=0; str[i]!=0; i++) { 
    1196:	1f 5f       	subi	r17, 0xFF	; 255
    1198:	fe 01       	movw	r30, r28
    119a:	e1 0f       	add	r30, r17
    119c:	f1 1d       	adc	r31, r1
    119e:	40 81       	ld	r20, Z
    11a0:	44 23       	and	r20, r20
    11a2:	a1 f7       	brne	.-24     	; 0x118c <video_puts+0x14>
		video_putchar(x,y,str[i]);
		x = x+6;	
	}
}
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	ff 90       	pop	r15
    11ae:	08 95       	ret

000011b0 <video_smallchar>:
      
//==================================
// put a small character on the screen
// x-coord must be on divisible by 4 
// c is index into bitmap
void video_smallchar(char x, char y, char c) { 
    11b0:	f4 2f       	mov	r31, r20
	char mask;
	int i=((int)x>>3) + ((int)y<<4) + (((int)y)<<1);
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	ab 01       	movw	r20, r22
    11b6:	44 0f       	add	r20, r20
    11b8:	55 1f       	adc	r21, r21
    11ba:	94 e0       	ldi	r25, 0x04	; 4
    11bc:	66 0f       	add	r22, r22
    11be:	77 1f       	adc	r23, r23
    11c0:	9a 95       	dec	r25
    11c2:	e1 f7       	brne	.-8      	; 0x11bc <video_smallchar+0xc>
    11c4:	46 0f       	add	r20, r22
    11c6:	57 1f       	adc	r21, r23
    11c8:	28 2f       	mov	r18, r24
    11ca:	26 95       	lsr	r18
    11cc:	26 95       	lsr	r18
    11ce:	26 95       	lsr	r18
    11d0:	42 0f       	add	r20, r18
    11d2:	51 1d       	adc	r21, r1

	if (x == (x & 0xf8)) mask = 0x0f;     //f8
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	9c 01       	movw	r18, r24
    11d8:	28 7f       	andi	r18, 0xF8	; 248
    11da:	30 70       	andi	r19, 0x00	; 0
    11dc:	82 17       	cp	r24, r18
    11de:	93 07       	cpc	r25, r19
    11e0:	11 f0       	breq	.+4      	; 0x11e6 <video_smallchar+0x36>
    11e2:	60 ef       	ldi	r22, 0xF0	; 240
    11e4:	01 c0       	rjmp	.+2      	; 0x11e8 <video_smallchar+0x38>
    11e6:	6f e0       	ldi	r22, 0x0F	; 15
	else mask = 0xf0;
	
	uint8_t j = pgm_read_byte(((uint32_t)(smallbitmap)) + c*5);
    11e8:	e5 e0       	ldi	r30, 0x05	; 5
    11ea:	fe 9f       	mul	r31, r30
    11ec:	90 01       	movw	r18, r0
    11ee:	11 24       	eor	r1, r1
    11f0:	f9 01       	movw	r30, r18
    11f2:	ec 5a       	subi	r30, 0xAC	; 172
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	e4 91       	lpm	r30, Z+
	screen[i]    =    (screen[i] & mask) | (j & ~mask);
    11f8:	96 2f       	mov	r25, r22
    11fa:	90 95       	com	r25
    11fc:	da 01       	movw	r26, r20
    11fe:	a0 57       	subi	r26, 0x70	; 112
    1200:	bf 4f       	sbci	r27, 0xFF	; 255
    1202:	e9 23       	and	r30, r25
    1204:	8c 91       	ld	r24, X
    1206:	86 23       	and	r24, r22
    1208:	e8 2b       	or	r30, r24
    120a:	ec 93       	st	X, r30

	j = pgm_read_byte(((uint32_t)(smallbitmap)) + c*5 + 1);
    120c:	f9 01       	movw	r30, r18
    120e:	eb 5a       	subi	r30, 0xAB	; 171
    1210:	ff 4f       	sbci	r31, 0xFF	; 255
    1212:	e4 91       	lpm	r30, Z+
   	screen[i+18] = (screen[i+18] & mask) | (j & ~mask);
    1214:	da 01       	movw	r26, r20
    1216:	ae 55       	subi	r26, 0x5E	; 94
    1218:	bf 4f       	sbci	r27, 0xFF	; 255
    121a:	e9 23       	and	r30, r25
    121c:	8c 91       	ld	r24, X
    121e:	86 23       	and	r24, r22
    1220:	e8 2b       	or	r30, r24
    1222:	ec 93       	st	X, r30

	j = pgm_read_byte(((uint32_t)(smallbitmap)) + c*5 + 2);
    1224:	f9 01       	movw	r30, r18
    1226:	ea 5a       	subi	r30, 0xAA	; 170
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	e4 91       	lpm	r30, Z+
    screen[i+36] = (screen[i+36] & mask) | (j & ~mask);
    122c:	da 01       	movw	r26, r20
    122e:	ac 54       	subi	r26, 0x4C	; 76
    1230:	bf 4f       	sbci	r27, 0xFF	; 255
    1232:	e9 23       	and	r30, r25
    1234:	8c 91       	ld	r24, X
    1236:	86 23       	and	r24, r22
    1238:	e8 2b       	or	r30, r24
    123a:	ec 93       	st	X, r30
    
	j = pgm_read_byte(((uint32_t)(smallbitmap)) + c*5 + 3);
    123c:	f9 01       	movw	r30, r18
    123e:	e9 5a       	subi	r30, 0xA9	; 169
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	e4 91       	lpm	r30, Z+
	screen[i+54] = (screen[i+54] & mask) | (j & ~mask);
    1244:	da 01       	movw	r26, r20
    1246:	aa 53       	subi	r26, 0x3A	; 58
    1248:	bf 4f       	sbci	r27, 0xFF	; 255
    124a:	e9 23       	and	r30, r25
    124c:	8c 91       	ld	r24, X
    124e:	86 23       	and	r24, r22
    1250:	e8 2b       	or	r30, r24
    1252:	ec 93       	st	X, r30
   	
	j = pgm_read_byte(((uint32_t)(smallbitmap)) + c*5 + 4);
    1254:	28 5a       	subi	r18, 0xA8	; 168
    1256:	3f 4f       	sbci	r19, 0xFF	; 255
    1258:	f9 01       	movw	r30, r18
    125a:	84 91       	lpm	r24, Z+
	screen[i+72] = (screen[i+72] & mask) | (j & ~mask); 
    125c:	fa 01       	movw	r30, r20
    125e:	e8 52       	subi	r30, 0x28	; 40
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	98 23       	and	r25, r24
    1264:	80 81       	ld	r24, Z
    1266:	68 23       	and	r22, r24
    1268:	96 2b       	or	r25, r22
    126a:	90 83       	st	Z, r25
}
    126c:	08 95       	ret

0000126e <video_putsmalls>:

//==================================
// put a string of small characters on the screen
// x-cood must be on divisible by 4 
void video_putsmalls(char x, char y, char *str) {
    126e:	ff 92       	push	r15
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	f6 2e       	mov	r15, r22
    127a:	ea 01       	movw	r28, r20
	char i;
	x = x & 0b1111100; //make it divisible by 4
    127c:	18 2f       	mov	r17, r24
    127e:	1c 77       	andi	r17, 0x7C	; 124
    1280:	00 e0       	ldi	r16, 0x00	; 0
    1282:	0f c0       	rjmp	.+30     	; 0x12a2 <video_putsmalls+0x34>
	for (i = 0; str[i] != 0; i++) {
		if (str[i] >= 0x30 && str[i] <= 0x3a) 
    1284:	94 2f       	mov	r25, r20
    1286:	90 53       	subi	r25, 0x30	; 48
    1288:	9b 30       	cpi	r25, 0x0B	; 11
    128a:	20 f4       	brcc	.+8      	; 0x1294 <video_putsmalls+0x26>
			video_smallchar(x, y, str[i] - 0x30);
    128c:	81 2f       	mov	r24, r17
    128e:	6f 2d       	mov	r22, r15
    1290:	49 2f       	mov	r20, r25
    1292:	03 c0       	rjmp	.+6      	; 0x129a <video_putsmalls+0x2c>

        else video_smallchar(x, y, str[i]-0x40+12);
    1294:	44 53       	subi	r20, 0x34	; 52
    1296:	81 2f       	mov	r24, r17
    1298:	6f 2d       	mov	r22, r15
    129a:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <video_smallchar>
		x += 4;	
    129e:	1c 5f       	subi	r17, 0xFC	; 252
// put a string of small characters on the screen
// x-cood must be on divisible by 4 
void video_putsmalls(char x, char y, char *str) {
	char i;
	x = x & 0b1111100; //make it divisible by 4
	for (i = 0; str[i] != 0; i++) {
    12a0:	0f 5f       	subi	r16, 0xFF	; 255
    12a2:	fe 01       	movw	r30, r28
    12a4:	e0 0f       	add	r30, r16
    12a6:	f1 1d       	adc	r31, r1
    12a8:	40 81       	ld	r20, Z
    12aa:	44 23       	and	r20, r20
    12ac:	59 f7       	brne	.-42     	; 0x1284 <video_putsmalls+0x16>
			video_smallchar(x, y, str[i] - 0x30);

        else video_smallchar(x, y, str[i]-0x40+12);
		x += 4;	
	}
}
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	ff 90       	pop	r15
    12b8:	08 95       	ret

000012ba <video_set>:

//==================================
//return the value of one point 
//at x,y with color 1=white 0=black 2=invert
char video_set(char x, char y) {
    12ba:	e6 2f       	mov	r30, r22
	//The following construction 
  	//detects exactly one bit at the x,y location
	int i = (x>>3) + ((int)y<<4) + ((int)y<<1);
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	9f 01       	movw	r18, r30
    12c0:	22 0f       	add	r18, r18
    12c2:	33 1f       	adc	r19, r19
    12c4:	48 2f       	mov	r20, r24
    12c6:	46 95       	lsr	r20
    12c8:	46 95       	lsr	r20
    12ca:	46 95       	lsr	r20
    12cc:	54 e0       	ldi	r21, 0x04	; 4
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	5a 95       	dec	r21
    12d4:	e1 f7       	brne	.-8      	; 0x12ce <video_set+0x14>
    12d6:	e0 57       	subi	r30, 0x70	; 112
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	e2 0f       	add	r30, r18
    12dc:	f3 1f       	adc	r31, r19
    12de:	e4 0f       	add	r30, r20
    12e0:	f1 1d       	adc	r31, r1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	80 95       	com	r24
    12e6:	90 95       	com	r25
    12e8:	87 70       	andi	r24, 0x07	; 7
    12ea:	90 70       	andi	r25, 0x00	; 0
    12ec:	21 e0       	ldi	r18, 0x01	; 1
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <video_set+0x3c>
    12f2:	22 0f       	add	r18, r18
    12f4:	33 1f       	adc	r19, r19
    12f6:	8a 95       	dec	r24
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <video_set+0x38>
    12fa:	80 81       	ld	r24, Z

    return (screen[i] & 1<<(7-(x & 0x7)));   	
}
    12fc:	82 23       	and	r24, r18
    12fe:	08 95       	ret

00001300 <multfix>:

//=== fixed point mult ===============================
int multfix(int a, int b) {
    1300:	47 2f       	mov	r20, r23
    1302:	55 27       	eor	r21, r21
    1304:	47 fd       	sbrc	r20, 7
    1306:	5a 95       	dec	r21
    1308:	29 2f       	mov	r18, r25
    130a:	33 27       	eor	r19, r19
    130c:	27 fd       	sbrc	r18, 7
    130e:	3a 95       	dec	r19
    1310:	f9 01       	movw	r30, r18
    1312:	4e 9f       	mul	r20, r30
    1314:	90 01       	movw	r18, r0
    1316:	4f 9f       	mul	r20, r31
    1318:	30 0d       	add	r19, r0
    131a:	5e 9f       	mul	r21, r30
    131c:	30 0d       	add	r19, r0
    131e:	11 24       	eor	r1, r1
    1320:	32 2f       	mov	r19, r18
    1322:	22 27       	eor	r18, r18
    1324:	ac 01       	movw	r20, r24
    1326:	64 9f       	mul	r22, r20
    1328:	c0 01       	movw	r24, r0
    132a:	65 9f       	mul	r22, r21
    132c:	90 0d       	add	r25, r0
    132e:	74 9f       	mul	r23, r20
    1330:	90 0d       	add	r25, r0
    1332:	11 24       	eor	r1, r1
    1334:	89 2f       	mov	r24, r25
    1336:	99 0f       	add	r25, r25
    1338:	99 0b       	sbc	r25, r25
    133a:	28 2b       	or	r18, r24
    133c:	39 2b       	or	r19, r25
  int result1 = a * b;
  int result2 = (a>>8) * (b>>8);

  return (result2 << 8) | (result1 >> 8);
} 
    133e:	c9 01       	movw	r24, r18
    1340:	08 95       	ret

00001342 <main>:
char cu2[]="COPYRIGHT:2008";
///////////////

//==================================         
// set up the ports and timers
int main() {
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
  //init timer 1 to generate sync
  OCR1A = lineTime; 	//One NTSC line
    134e:	8a ef       	ldi	r24, 0xFA	; 250
    1350:	93 e0       	ldi	r25, 0x03	; 3
    1352:	9b bd       	out	0x2b, r25	; 43
    1354:	8a bd       	out	0x2a, r24	; 42
  
  TCCR1B = 0x09; 	//full speed; clear-on-match
    1356:	89 e0       	ldi	r24, 0x09	; 9
    1358:	8e bd       	out	0x2e, r24	; 46
  TCCR1A = 0x00;	//turn off pwm and oc lines
    135a:	1f bc       	out	0x2f, r1	; 47
  TIMSK = 0x02;	//enable interrupt T1 cmp A
    135c:	82 e0       	ldi	r24, 0x02	; 2
    135e:	89 bf       	out	0x39, r24	; 57

  //init ports
  DDRD = 0xf0;		//video out
    1360:	80 ef       	ldi	r24, 0xF0	; 240
    1362:	81 bb       	out	0x11, r24	; 17

  DDRB = 0x00;      //switches
    1364:	17 ba       	out	0x17, r1	; 23

  DDRA = 0xff;      //LEDs
    1366:	8f ef       	ldi	r24, 0xFF	; 255
    1368:	8a bb       	out	0x1a, r24	; 26

  //initialize synch constants 
  LineCount = 1;
    136a:	41 e0       	ldi	r20, 0x01	; 1
    136c:	e4 2e       	mov	r14, r20
    136e:	f1 2c       	mov	r15, r1
    1370:	f0 92 a9 0e 	sts	0x0EA9, r15
    1374:	e0 92 a8 0e 	sts	0x0EA8, r14

  syncON = 0b00000000;
    1378:	10 92 aa 0e 	sts	0x0EAA, r1
  syncOFF = 0b01000000;
    137c:	80 e4       	ldi	r24, 0x40	; 64
    137e:	80 93 ab 0e 	sts	0x0EAB, r24
  
  //Print "CORNELL" message
  video_puts(13,2,cu1);
    1382:	8d e0       	ldi	r24, 0x0D	; 13
    1384:	62 e0       	ldi	r22, 0x02	; 2
    1386:	48 e6       	ldi	r20, 0x68	; 104
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	0e 94 bc 08 	call	0x1178	; 0x1178 <video_puts>

  //Print "Copyright" message
  video_putsmalls(86,192,cu2);
    138e:	86 e5       	ldi	r24, 0x56	; 86
    1390:	60 ec       	ldi	r22, 0xC0	; 192
    1392:	4a e7       	ldi	r20, 0x7A	; 122
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	0e 94 37 09 	call	0x126e	; 0x126e <video_putsmalls>

  //side lines
  #define width 142
  #define height 199

  video_line(0,0,0,height,1);
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	27 ec       	ldi	r18, 0xC7	; 199
    13a2:	01 e0       	ldi	r16, 0x01	; 1
    13a4:	0e 94 ac 07 	call	0xf58	; 0xf58 <video_line>
  video_line(width,0,width,height,1);
    13a8:	8e e8       	ldi	r24, 0x8E	; 142
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	4e e8       	ldi	r20, 0x8E	; 142
    13ae:	27 ec       	ldi	r18, 0xC7	; 199
    13b0:	0e 94 ac 07 	call	0xf58	; 0xf58 <video_line>

  video_line(0,10,width,10,1);
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	6a e0       	ldi	r22, 0x0A	; 10
    13b8:	4e e8       	ldi	r20, 0x8E	; 142
    13ba:	2a e0       	ldi	r18, 0x0A	; 10
    13bc:	0e 94 ac 07 	call	0xf58	; 0xf58 <video_line>
  video_line(0,0,width,0,1);
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	4e e8       	ldi	r20, 0x8E	; 142
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	0e 94 ac 07 	call	0xf58	; 0xf58 <video_line>
  video_line(0,height,width,height,1);
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	67 ec       	ldi	r22, 0xC7	; 199
    13d0:	4e e8       	ldi	r20, 0x8E	; 142
    13d2:	27 ec       	ldi	r18, 0xC7	; 199
    13d4:	0e 94 ac 07 	call	0xf58	; 0xf58 <video_line>

  //video_line(0,0,width,height,1); // tst diagonal

  //init animation
  // initial position
  x = int2fix(20);
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	94 e1       	ldi	r25, 0x14	; 20
    13dc:	90 93 8d 00 	sts	0x008D, r25
    13e0:	80 93 8c 00 	sts	0x008C, r24
  y = int2fix(40);
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	98 e2       	ldi	r25, 0x28	; 40
    13e8:	90 93 a7 0e 	sts	0x0EA7, r25
    13ec:	80 93 a6 0e 	sts	0x0EA6, r24

  // initial velocity
  vx = float2fix(2.5);
    13f0:	80 e8       	ldi	r24, 0x80	; 128
    13f2:	92 e0       	ldi	r25, 0x02	; 2
    13f4:	90 93 a1 0e 	sts	0x0EA1, r25
    13f8:	80 93 a0 0e 	sts	0x0EA0, r24
  vy = float2fix(0.0);
    13fc:	10 92 a5 0e 	sts	0x0EA5, r1
    1400:	10 92 a4 0e 	sts	0x0EA4, r1

  // gravity and drag
  g = float2fix(0.03);  
    1404:	87 e0       	ldi	r24, 0x07	; 7
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	90 93 8f 00 	sts	0x008F, r25
    140c:	80 93 8e 00 	sts	0x008E, r24
  drag = float2fix(0.004);
    1410:	f0 92 a3 0e 	sts	0x0EA3, r15
    1414:	e0 92 a2 0e 	sts	0x0EA2, r14

  video_pt(fix2int(x),fix2int(y),2); 
    1418:	84 e1       	ldi	r24, 0x14	; 20
    141a:	68 e2       	ldi	r22, 0x28	; 40
    141c:	42 e0       	ldi	r20, 0x02	; 2
    141e:	0e 94 74 07 	call	0xee8	; 0xee8 <video_pt>
  ///////////////////////
  
  // Set up single video line timing
  sei();
    1422:	78 94       	sei
  set_sleep_mode(SLEEP_MODE_IDLE);
    1424:	85 b7       	in	r24, 0x35	; 53
    1426:	8f 74       	andi	r24, 0x4F	; 79
    1428:	85 bf       	out	0x35, r24	; 53
  sleep_enable();
    142a:	85 b7       	in	r24, 0x35	; 53
    142c:	80 64       	ori	r24, 0x40	; 64
    142e:	85 bf       	out	0x35, r24	; 53
        y = y + vy;
		
		// Bounds check -- fixed notation
		if (x>0x8d00) { vx = -vx; x=0x8d00; }    // right edge
        if (x<0x0100) { vx = -vx; x=0x0100; }    // left edge
        if (y>0xc600) { vy = -vy; y=0xc600; }    // bottom edge
    1430:	e1 2c       	mov	r14, r1
    1432:	36 ec       	ldi	r19, 0xC6	; 198
    1434:	f3 2e       	mov	r15, r19
        x = x + vx;
        y = y + vy;
		
		// Bounds check -- fixed notation
		if (x>0x8d00) { vx = -vx; x=0x8d00; }    // right edge
        if (x<0x0100) { vx = -vx; x=0x0100; }    // left edge
    1436:	00 e0       	ldi	r16, 0x00	; 0
    1438:	11 e0       	ldi	r17, 0x01	; 1
		// new pos = old pos + velocity*dt (dt=1)
        x = x + vx;
        y = y + vy;
		
		// Bounds check -- fixed notation
		if (x>0x8d00) { vx = -vx; x=0x8d00; }    // right edge
    143a:	c0 e0       	ldi	r28, 0x00	; 0
    143c:	dd e8       	ldi	r29, 0x8D	; 141
  for(;;) {
  
    //stall here until next line starts  
    //use sleep to make entry into sync ISR uniform time  
	
	sleep_cpu();
    143e:	88 95       	sleep

	//The following code executes during the vertical blanking
    //Code here can be as long as  
    //a total of 60 lines x 63.5 uSec/line x 8 cycles/uSec 
    
	if (LineCount == 231) { 
    1440:	80 91 a8 0e 	lds	r24, 0x0EA8
    1444:	90 91 a9 0e 	lds	r25, 0x0EA9
    1448:	87 3e       	cpi	r24, 0xE7	; 231
    144a:	91 05       	cpc	r25, r1
    144c:	c1 f7       	brne	.-16     	; 0x143e <main+0xfc>

        //animation
		//erase old ball using XOR mode
        video_pt(fix2int(x),fix2int(y),2);
    144e:	60 91 a7 0e 	lds	r22, 0x0EA7
    1452:	80 91 8d 00 	lds	r24, 0x008D
    1456:	42 e0       	ldi	r20, 0x02	; 2
    1458:	0e 94 74 07 	call	0xee8	; 0xee8 <video_pt>
		 
        // new vel = old vel + acceleration*dt (dt=1)
        vy = vy + g - multfix(drag,vy);
    145c:	40 91 a4 0e 	lds	r20, 0x0EA4
    1460:	50 91 a5 0e 	lds	r21, 0x0EA5
    1464:	60 91 a2 0e 	lds	r22, 0x0EA2
    1468:	70 91 a3 0e 	lds	r23, 0x0EA3
}

//=== fixed point mult ===============================
int multfix(int a, int b) {
  int result1 = a * b;
  int result2 = (a>>8) * (b>>8);
    146c:	e7 2f       	mov	r30, r23
    146e:	ff 27       	eor	r31, r31
    1470:	e7 fd       	sbrc	r30, 7
    1472:	fa 95       	dec	r31
        //animation
		//erase old ball using XOR mode
        video_pt(fix2int(x),fix2int(y),2);
		 
        // new vel = old vel + acceleration*dt (dt=1)
        vy = vy + g - multfix(drag,vy);
    1474:	a0 91 8e 00 	lds	r26, 0x008E
    1478:	b0 91 8f 00 	lds	r27, 0x008F
    147c:	a4 0f       	add	r26, r20
    147e:	b5 1f       	adc	r27, r21
    1480:	85 2f       	mov	r24, r21
    1482:	99 27       	eor	r25, r25
    1484:	87 fd       	sbrc	r24, 7
    1486:	9a 95       	dec	r25
    1488:	8e 9f       	mul	r24, r30
    148a:	90 01       	movw	r18, r0
    148c:	8f 9f       	mul	r24, r31
    148e:	30 0d       	add	r19, r0
    1490:	9e 9f       	mul	r25, r30
    1492:	30 0d       	add	r19, r0
    1494:	11 24       	eor	r1, r1
    1496:	32 2f       	mov	r19, r18
    1498:	22 27       	eor	r18, r18
    149a:	64 9f       	mul	r22, r20
    149c:	c0 01       	movw	r24, r0
    149e:	65 9f       	mul	r22, r21
    14a0:	90 0d       	add	r25, r0
    14a2:	74 9f       	mul	r23, r20
    14a4:	90 0d       	add	r25, r0
    14a6:	11 24       	eor	r1, r1
    14a8:	89 2f       	mov	r24, r25
    14aa:	99 0f       	add	r25, r25
    14ac:	99 0b       	sbc	r25, r25
    14ae:	28 2b       	or	r18, r24
    14b0:	39 2b       	or	r19, r25
    14b2:	a2 1b       	sub	r26, r18
    14b4:	b3 0b       	sbc	r27, r19
    14b6:	b0 93 a5 0e 	sts	0x0EA5, r27
    14ba:	a0 93 a4 0e 	sts	0x0EA4, r26
        vx = vx - multfix(drag,vx);
    14be:	40 91 a0 0e 	lds	r20, 0x0EA0
    14c2:	50 91 a1 0e 	lds	r21, 0x0EA1
    14c6:	85 2f       	mov	r24, r21
    14c8:	99 27       	eor	r25, r25
    14ca:	87 fd       	sbrc	r24, 7
    14cc:	9a 95       	dec	r25
    14ce:	8e 9f       	mul	r24, r30
    14d0:	90 01       	movw	r18, r0
    14d2:	8f 9f       	mul	r24, r31
    14d4:	30 0d       	add	r19, r0
    14d6:	9e 9f       	mul	r25, r30
    14d8:	30 0d       	add	r19, r0
    14da:	11 24       	eor	r1, r1
    14dc:	32 2f       	mov	r19, r18
    14de:	22 27       	eor	r18, r18
    14e0:	46 9f       	mul	r20, r22
    14e2:	c0 01       	movw	r24, r0
    14e4:	47 9f       	mul	r20, r23
    14e6:	90 0d       	add	r25, r0
    14e8:	56 9f       	mul	r21, r22
    14ea:	90 0d       	add	r25, r0
    14ec:	11 24       	eor	r1, r1
    14ee:	89 2f       	mov	r24, r25
    14f0:	99 0f       	add	r25, r25
    14f2:	99 0b       	sbc	r25, r25
    14f4:	28 2b       	or	r18, r24
    14f6:	39 2b       	or	r19, r25
    14f8:	42 1b       	sub	r20, r18
    14fa:	53 0b       	sbc	r21, r19
    14fc:	50 93 a1 0e 	sts	0x0EA1, r21
    1500:	40 93 a0 0e 	sts	0x0EA0, r20
                
		// new pos = old pos + velocity*dt (dt=1)
        x = x + vx;
    1504:	80 91 8c 00 	lds	r24, 0x008C
    1508:	90 91 8d 00 	lds	r25, 0x008D
    150c:	84 0f       	add	r24, r20
    150e:	95 1f       	adc	r25, r21
    1510:	90 93 8d 00 	sts	0x008D, r25
    1514:	80 93 8c 00 	sts	0x008C, r24
        y = y + vy;
    1518:	20 91 a6 0e 	lds	r18, 0x0EA6
    151c:	30 91 a7 0e 	lds	r19, 0x0EA7
    1520:	2a 0f       	add	r18, r26
    1522:	3b 1f       	adc	r19, r27
    1524:	30 93 a7 0e 	sts	0x0EA7, r19
    1528:	20 93 a6 0e 	sts	0x0EA6, r18
		
		// Bounds check -- fixed notation
		if (x>0x8d00) { vx = -vx; x=0x8d00; }    // right edge
    152c:	81 50       	subi	r24, 0x01	; 1
    152e:	9d 48       	sbci	r25, 0x8D	; 141
    1530:	60 f0       	brcs	.+24     	; 0x154a <main+0x208>
    1532:	88 27       	eor	r24, r24
    1534:	99 27       	eor	r25, r25
    1536:	84 1b       	sub	r24, r20
    1538:	95 0b       	sbc	r25, r21
    153a:	90 93 a1 0e 	sts	0x0EA1, r25
    153e:	80 93 a0 0e 	sts	0x0EA0, r24
    1542:	d0 93 8d 00 	sts	0x008D, r29
    1546:	c0 93 8c 00 	sts	0x008C, r28
        if (x<0x0100) { vx = -vx; x=0x0100; }    // left edge
    154a:	80 91 8c 00 	lds	r24, 0x008C
    154e:	90 91 8d 00 	lds	r25, 0x008D
    1552:	8f 3f       	cpi	r24, 0xFF	; 255
    1554:	91 05       	cpc	r25, r1
    1556:	09 f0       	breq	.+2      	; 0x155a <main+0x218>
    1558:	78 f4       	brcc	.+30     	; 0x1578 <main+0x236>
    155a:	80 91 a0 0e 	lds	r24, 0x0EA0
    155e:	90 91 a1 0e 	lds	r25, 0x0EA1
    1562:	90 95       	com	r25
    1564:	81 95       	neg	r24
    1566:	9f 4f       	sbci	r25, 0xFF	; 255
    1568:	90 93 a1 0e 	sts	0x0EA1, r25
    156c:	80 93 a0 0e 	sts	0x0EA0, r24
    1570:	10 93 8d 00 	sts	0x008D, r17
    1574:	00 93 8c 00 	sts	0x008C, r16
        if (y>0xc600) { vy = -vy; y=0xc600; }    // bottom edge
    1578:	21 50       	subi	r18, 0x01	; 1
    157a:	36 4c       	sbci	r19, 0xC6	; 198
    157c:	60 f0       	brcs	.+24     	; 0x1596 <main+0x254>
    157e:	88 27       	eor	r24, r24
    1580:	99 27       	eor	r25, r25
    1582:	8a 1b       	sub	r24, r26
    1584:	9b 0b       	sbc	r25, r27
    1586:	90 93 a5 0e 	sts	0x0EA5, r25
    158a:	80 93 a4 0e 	sts	0x0EA4, r24
    158e:	f0 92 a7 0e 	sts	0x0EA7, r15
    1592:	e0 92 a6 0e 	sts	0x0EA6, r14

		video_pt(fix2int(x),fix2int(y),2);
    1596:	60 91 a7 0e 	lds	r22, 0x0EA7
    159a:	80 91 8d 00 	lds	r24, 0x008D
    159e:	42 e0       	ldi	r20, 0x02	; 2
    15a0:	0e 94 74 07 	call	0xee8	; 0xee8 <video_pt>
    15a4:	4c cf       	rjmp	.-360    	; 0x143e <main+0xfc>

000015a6 <_exit>:
    15a6:	f8 94       	cli

000015a8 <__stop_program>:
    15a8:	ff cf       	rjmp	.-2      	; 0x15a8 <__stop_program>
