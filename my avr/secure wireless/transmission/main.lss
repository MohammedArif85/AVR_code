
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000116  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000005a0  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006f0  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  7a:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <USART_INIT>:
/*
===================================================================
SET BAUD RATE
===================================================================
*/
	UBRRL=UBRRVAL;
  82:	87 e6       	ldi	r24, 0x67	; 103
  84:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);
  86:	10 bc       	out	0x20, r1	; 32
/*===================================================================
SET DATAFRAME FORMAT : ASYNCHRONOUS MODE, NO PARITY, 1 START BIT, 8BIT
                       SIZE DATA	
===================================================================
*/
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
  88:	86 e8       	ldi	r24, 0x86	; 134
  8a:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN);
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	8a b9       	out	0x0a, r24	; 10
}
  90:	08 95       	ret

00000092 <rswritechar>:
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <rswritechar>
	UDR=c; //SEND RECEIVED DATA BACK
  96:	8c b9       	out	0x0c, r24	; 12
}
  98:	08 95       	ret

0000009a <rsreadchar>:
/*
===================================================================
WAIT UNTIL DATA IS AVAILABLE
===================================================================
*/
	while(!(UCSRA&(1<<RXC)))
  9a:	5f 9b       	sbis	0x0b, 7	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <rsreadchar>
	{	}
	return UDR;
  9e:	8c b1       	in	r24, 0x0c	; 12
}
  a0:	08 95       	ret

000000a2 <rsstr>:
===================================================================
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
  a2:	fc 01       	movw	r30, r24
  a4:	04 c0       	rjmp	.+8      	; 0xae <rsstr+0xc>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <rsstr+0x4>
	UDR=c; //SEND RECEIVED DATA BACK
  aa:	8c b9       	out	0x0c, r24	; 12
void rsstr(char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
  ac:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
	while(*s)
  ae:	80 81       	ld	r24, Z
  b0:	88 23       	and	r24, r24
  b2:	c9 f7       	brne	.-14     	; 0xa6 <rsstr+0x4>
	{
		rswritechar(*s);
		s++;
	}
  b4:	08 95       	ret

000000b6 <main>:
/*
===================================================================
SET BAUD RATE
===================================================================
*/
	UBRRL=UBRRVAL;
  b6:	87 e6       	ldi	r24, 0x67	; 103
  b8:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);
  ba:	10 bc       	out	0x20, r1	; 32
/*===================================================================
SET DATAFRAME FORMAT : ASYNCHRONOUS MODE, NO PARITY, 1 START BIT, 8BIT
                       SIZE DATA	
===================================================================
*/
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
  bc:	86 e8       	ldi	r24, 0x86	; 134
  be:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN);
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	8a b9       	out	0x0a, r24	; 10
  c4:	e0 e6       	ldi	r30, 0x60	; 96
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	04 c0       	rjmp	.+8      	; 0xd2 <main+0x1c>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  ca:	5d 9b       	sbis	0x0b, 5	; 11
  cc:	fe cf       	rjmp	.-4      	; 0xca <main+0x14>
	UDR=c; //SEND RECEIVED DATA BACK
  ce:	8c b9       	out	0x0c, r24	; 12
void rsstr(char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
  d0:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
	while(*s)
  d2:	80 81       	ld	r24, Z
  d4:	88 23       	and	r24, r24
  d6:	c9 f7       	brne	.-14     	; 0xca <main+0x14>
int main(void)
{
	unsigned char t;
	USART_INIT();
	rsstr("Secure wireless terminal\r\n");
	DDRA=0xFF;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	8a bb       	out	0x1a, r24	; 26
	{
		t=rsreadchar();
		switch(t)
		{
		 case '5':PORTA=0x10;break;
		 case '6':PORTA=0x20;break;
  dc:	40 e2       	ldi	r20, 0x20	; 32
		 case '7':PORTA=0x40;break;
  de:	30 e4       	ldi	r19, 0x40	; 64
		 case '8':PORTA=0x80;break;
  e0:	20 e8       	ldi	r18, 0x80	; 128
	while(1)
	{
		t=rsreadchar();
		switch(t)
		{
		 case '5':PORTA=0x10;break;
  e2:	90 e1       	ldi	r25, 0x10	; 16
/*
===================================================================
WAIT UNTIL DATA IS AVAILABLE
===================================================================
*/
	while(!(UCSRA&(1<<RXC)))
  e4:	5f 9b       	sbis	0x0b, 7	; 11
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <main+0x2e>
	{	}
	return UDR;
  e8:	8c b1       	in	r24, 0x0c	; 12
	rsstr("Secure wireless terminal\r\n");
	DDRA=0xFF;
	while(1)
	{
		t=rsreadchar();
		switch(t)
  ea:	86 33       	cpi	r24, 0x36	; 54
  ec:	61 f0       	breq	.+24     	; 0x106 <main+0x50>
  ee:	87 33       	cpi	r24, 0x37	; 55
  f0:	18 f4       	brcc	.+6      	; 0xf8 <main+0x42>
  f2:	85 33       	cpi	r24, 0x35	; 53
  f4:	b9 f7       	brne	.-18     	; 0xe4 <main+0x2e>
  f6:	05 c0       	rjmp	.+10     	; 0x102 <main+0x4c>
  f8:	87 33       	cpi	r24, 0x37	; 55
  fa:	39 f0       	breq	.+14     	; 0x10a <main+0x54>
  fc:	88 33       	cpi	r24, 0x38	; 56
  fe:	91 f7       	brne	.-28     	; 0xe4 <main+0x2e>
 100:	06 c0       	rjmp	.+12     	; 0x10e <main+0x58>
		{
		 case '5':PORTA=0x10;break;
 102:	9b bb       	out	0x1b, r25	; 27
 104:	ef cf       	rjmp	.-34     	; 0xe4 <main+0x2e>
		 case '6':PORTA=0x20;break;
 106:	4b bb       	out	0x1b, r20	; 27
 108:	ed cf       	rjmp	.-38     	; 0xe4 <main+0x2e>
		 case '7':PORTA=0x40;break;
 10a:	3b bb       	out	0x1b, r19	; 27
 10c:	eb cf       	rjmp	.-42     	; 0xe4 <main+0x2e>
		 case '8':PORTA=0x80;break;
 10e:	2b bb       	out	0x1b, r18	; 27
 110:	e9 cf       	rjmp	.-46     	; 0xe4 <main+0x2e>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
