
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000005f4  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000722  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <count>:
#include<avr/io.h>
#include<util/delay.h>
#include<compat/deprecated.h>
void count()
{
  6c:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  6e:	40 e9       	ldi	r20, 0x90	; 144
  70:	51 e0       	ldi	r21, 0x01	; 1
 unsigned char c;
 for(c=0;c<16;c++)
 {
  PORTA=c<<4;
  72:	82 2f       	mov	r24, r18
  74:	82 95       	swap	r24
  76:	80 7f       	andi	r24, 0xF0	; 240
  78:	8b bb       	out	0x1b, r24	; 27
  7a:	88 e8       	ldi	r24, 0x88	; 136
  7c:	93 e1       	ldi	r25, 0x13	; 19
  7e:	fa 01       	movw	r30, r20
  80:	31 97       	sbiw	r30, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <count+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  84:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  86:	d9 f7       	brne	.-10     	; 0x7e <count+0x12>
#include<util/delay.h>
#include<compat/deprecated.h>
void count()
{
 unsigned char c;
 for(c=0;c<16;c++)
  88:	2f 5f       	subi	r18, 0xFF	; 255
  8a:	20 31       	cpi	r18, 0x10	; 16
  8c:	91 f7       	brne	.-28     	; 0x72 <count+0x6>
 {
  PORTA=c<<4;
  _delay_ms(500);
 } 

}
  8e:	08 95       	ret

00000090 <main>:

int  main (void)
{ unsigned char c;
  DDRA=0xF0;
  90:	80 ef       	ldi	r24, 0xF0	; 240
  92:	8a bb       	out	0x1a, r24	; 26
  DDRB=0x00;
  94:	17 ba       	out	0x17, r1	; 23
  PORTB=0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	88 bb       	out	0x18, r24	; 24
  PORTA=0X00;
  9a:	1b ba       	out	0x1b, r1	; 27
  9c:	40 e9       	ldi	r20, 0x90	; 144
  9e:	51 e0       	ldi	r21, 0x01	; 1
  while(1)
  {
   if(!(PINB&0x04))
  a0:	b2 99       	sbic	0x16, 2	; 22
  a2:	10 c0       	rjmp	.+32     	; 0xc4 <main+0x34>
  a4:	20 e0       	ldi	r18, 0x00	; 0
void count()
{
 unsigned char c;
 for(c=0;c<16;c++)
 {
  PORTA=c<<4;
  a6:	82 2f       	mov	r24, r18
  a8:	82 95       	swap	r24
  aa:	80 7f       	andi	r24, 0xF0	; 240
  ac:	8b bb       	out	0x1b, r24	; 27
  ae:	88 e8       	ldi	r24, 0x88	; 136
  b0:	93 e1       	ldi	r25, 0x13	; 19
  b2:	fa 01       	movw	r30, r20
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ba:	d9 f7       	brne	.-10     	; 0xb2 <main+0x22>
#include<util/delay.h>
#include<compat/deprecated.h>
void count()
{
 unsigned char c;
 for(c=0;c<16;c++)
  bc:	2f 5f       	subi	r18, 0xFF	; 255
  be:	20 31       	cpi	r18, 0x10	; 16
  c0:	91 f7       	brne	.-28     	; 0xa6 <main+0x16>
  c2:	ee cf       	rjmp	.-36     	; 0xa0 <main+0x10>
  while(1)
  {
   if(!(PINB&0x04))
   count();
   else
   PORTA=0x00;
  c4:	1b ba       	out	0x1b, r1	; 27
  c6:	ec cf       	rjmp	.-40     	; 0xa0 <main+0x10>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
