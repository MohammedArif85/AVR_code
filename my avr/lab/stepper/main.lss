
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000776  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000776  000007ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000a80  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000007b5  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 2e 02 	call	0x45c	; 0x45c <main>
  7a:	0c 94 b9 03 	jmp	0x772	; 0x772 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <stepper>:
#include<compat/deprecated.h>
unsigned char step[4]={0x10,0x20,0x40,0x80};
unsigned char step1[8]={0x80,0xc0,0x40,0x60,0x20,0x30,0x10,0x90};

void stepper(int steps,int speed,unsigned char dir)
{  long i;
  82:	2f 92       	push	r2
  84:	3f 92       	push	r3
  86:	4f 92       	push	r4
  88:	5f 92       	push	r5
  8a:	6f 92       	push	r6
  8c:	7f 92       	push	r7
  8e:	8f 92       	push	r8
  90:	9f 92       	push	r9
  92:	af 92       	push	r10
  94:	bf 92       	push	r11
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	df 93       	push	r29
  a4:	cf 93       	push	r28
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	28 97       	sbiw	r28, 0x08	; 8
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61
 if(dir==1)
  b6:	41 30       	cpi	r20, 0x01	; 1
  b8:	91 f0       	breq	.+36     	; 0xde <stepper+0x5c>
  ba:	66 24       	eor	r6, r6
  bc:	77 24       	eor	r7, r7
  be:	43 01       	movw	r8, r6
   _delay_ms(speed);
  }
 }
 else 
 {
  for(i=0;i<steps;i++)
  c0:	9c 01       	movw	r18, r24
  c2:	44 27       	eor	r20, r20
  c4:	37 fd       	sbrc	r19, 7
  c6:	40 95       	com	r20
  c8:	54 2f       	mov	r21, r20
  ca:	2d 83       	std	Y+5, r18	; 0x05
  cc:	3e 83       	std	Y+6, r19	; 0x06
  ce:	4f 83       	std	Y+7, r20	; 0x07
  d0:	58 87       	std	Y+8, r21	; 0x08
  {
   PORTA=step[3-(i%8)];
   _delay_ms(speed);
  d2:	1b 01       	movw	r2, r22
  d4:	44 24       	eor	r4, r4
  d6:	37 fc       	sbrc	r3, 7
  d8:	40 94       	com	r4
  da:	54 2c       	mov	r5, r4
  dc:	c1 c0       	rjmp	.+386    	; 0x260 <stepper+0x1de>
unsigned char step[4]={0x10,0x20,0x40,0x80};
unsigned char step1[8]={0x80,0xc0,0x40,0x60,0x20,0x30,0x10,0x90};

void stepper(int steps,int speed,unsigned char dir)
{  long i;
 if(dir==1)
  de:	aa 24       	eor	r10, r10
  e0:	bb 24       	eor	r11, r11
  e2:	65 01       	movw	r12, r10
 {
  for(i=0;i<steps;i++)
  e4:	9c 01       	movw	r18, r24
  e6:	44 27       	eor	r20, r20
  e8:	37 fd       	sbrc	r19, 7
  ea:	40 95       	com	r20
  ec:	54 2f       	mov	r21, r20
  ee:	29 83       	std	Y+1, r18	; 0x01
  f0:	3a 83       	std	Y+2, r19	; 0x02
  f2:	4b 83       	std	Y+3, r20	; 0x03
  f4:	5c 83       	std	Y+4, r21	; 0x04
  {
   PORTA=step[i%8];
   _delay_ms(speed);
  f6:	1b 01       	movw	r2, r22
  f8:	44 24       	eor	r4, r4
  fa:	37 fc       	sbrc	r3, 7
  fc:	40 94       	com	r4
  fe:	54 2c       	mov	r5, r4
 100:	4b c0       	rjmp	.+150    	; 0x198 <stepper+0x116>
{  long i;
 if(dir==1)
 {
  for(i=0;i<steps;i++)
  {
   PORTA=step[i%8];
 102:	f5 01       	movw	r30, r10
 104:	e7 70       	andi	r30, 0x07	; 7
 106:	f0 70       	andi	r31, 0x00	; 0
 108:	e0 5a       	subi	r30, 0xA0	; 160
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	80 81       	ld	r24, Z
 10e:	8b bb       	out	0x1b, r24	; 27
   _delay_ms(speed);
 110:	c2 01       	movw	r24, r4
 112:	b1 01       	movw	r22, r2
 114:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatsisf>
 118:	3b 01       	movw	r6, r22
 11a:	4c 01       	movw	r8, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	4a e7       	ldi	r20, 0x7A	; 122
 122:	55 e4       	ldi	r21, 0x45	; 69
 124:	0e 94 07 03 	call	0x60e	; 0x60e <__mulsf3>
 128:	7b 01       	movw	r14, r22
 12a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	40 e8       	ldi	r20, 0x80	; 128
 132:	5f e3       	ldi	r21, 0x3F	; 63
 134:	0e 94 49 02 	call	0x492	; 0x492 <__cmpsf2>
 138:	88 23       	and	r24, r24
 13a:	1c f4       	brge	.+6      	; 0x142 <stepper+0xc0>
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	23 c0       	rjmp	.+70     	; 0x188 <stepper+0x106>
		__ticks = 1;
	else if (__tmp > 65535)
 142:	c8 01       	movw	r24, r16
 144:	b7 01       	movw	r22, r14
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	3f ef       	ldi	r19, 0xFF	; 255
 14a:	4f e7       	ldi	r20, 0x7F	; 127
 14c:	57 e4       	ldi	r21, 0x47	; 71
 14e:	0e 94 03 03 	call	0x606	; 0x606 <__gesf2>
 152:	18 16       	cp	r1, r24
 154:	ac f4       	brge	.+42     	; 0x180 <stepper+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 156:	c4 01       	movw	r24, r8
 158:	b3 01       	movw	r22, r6
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	40 e2       	ldi	r20, 0x20	; 32
 160:	51 e4       	ldi	r21, 0x41	; 65
 162:	0e 94 07 03 	call	0x60e	; 0x60e <__mulsf3>
 166:	0e 94 4d 02 	call	0x49a	; 0x49a <__fixunssfsi>
 16a:	06 c0       	rjmp	.+12     	; 0x178 <stepper+0xf6>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 16c:	80 e9       	ldi	r24, 0x90	; 144
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <stepper+0xee>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 174:	61 50       	subi	r22, 0x01	; 1
 176:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 178:	61 15       	cp	r22, r1
 17a:	71 05       	cpc	r23, r1
 17c:	b9 f7       	brne	.-18     	; 0x16c <stepper+0xea>
 17e:	07 c0       	rjmp	.+14     	; 0x18e <stepper+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 180:	c8 01       	movw	r24, r16
 182:	b7 01       	movw	r22, r14
 184:	0e 94 4d 02 	call	0x49a	; 0x49a <__fixunssfsi>
 188:	cb 01       	movw	r24, r22
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <stepper+0x108>

void stepper(int steps,int speed,unsigned char dir)
{  long i;
 if(dir==1)
 {
  for(i=0;i<steps;i++)
 18e:	08 94       	sec
 190:	a1 1c       	adc	r10, r1
 192:	b1 1c       	adc	r11, r1
 194:	c1 1c       	adc	r12, r1
 196:	d1 1c       	adc	r13, r1
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	9a 81       	ldd	r25, Y+2	; 0x02
 19c:	ab 81       	ldd	r26, Y+3	; 0x03
 19e:	bc 81       	ldd	r27, Y+4	; 0x04
 1a0:	a8 16       	cp	r10, r24
 1a2:	b9 06       	cpc	r11, r25
 1a4:	ca 06       	cpc	r12, r26
 1a6:	db 06       	cpc	r13, r27
 1a8:	0c f4       	brge	.+2      	; 0x1ac <stepper+0x12a>
 1aa:	ab cf       	rjmp	.-170    	; 0x102 <stepper+0x80>
 1ac:	63 c0       	rjmp	.+198    	; 0x274 <stepper+0x1f2>
 }
 else 
 {
  for(i=0;i<steps;i++)
  {
   PORTA=step[3-(i%8)];
 1ae:	d4 01       	movw	r26, r8
 1b0:	c3 01       	movw	r24, r6
 1b2:	87 70       	andi	r24, 0x07	; 7
 1b4:	90 70       	andi	r25, 0x00	; 0
 1b6:	a0 70       	andi	r26, 0x00	; 0
 1b8:	b0 70       	andi	r27, 0x00	; 0
 1ba:	23 e0       	ldi	r18, 0x03	; 3
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	28 1b       	sub	r18, r24
 1c4:	39 0b       	sbc	r19, r25
 1c6:	4a 0b       	sbc	r20, r26
 1c8:	5b 0b       	sbc	r21, r27
 1ca:	da 01       	movw	r26, r20
 1cc:	c9 01       	movw	r24, r18
 1ce:	80 5a       	subi	r24, 0xA0	; 160
 1d0:	9f 4f       	sbci	r25, 0xFF	; 255
 1d2:	dc 01       	movw	r26, r24
 1d4:	8c 91       	ld	r24, X
 1d6:	8b bb       	out	0x1b, r24	; 27
   _delay_ms(speed);
 1d8:	c2 01       	movw	r24, r4
 1da:	b1 01       	movw	r22, r2
 1dc:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatsisf>
 1e0:	5b 01       	movw	r10, r22
 1e2:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	4a e7       	ldi	r20, 0x7A	; 122
 1ea:	55 e4       	ldi	r21, 0x45	; 69
 1ec:	0e 94 07 03 	call	0x60e	; 0x60e <__mulsf3>
 1f0:	7b 01       	movw	r14, r22
 1f2:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	40 e8       	ldi	r20, 0x80	; 128
 1fa:	5f e3       	ldi	r21, 0x3F	; 63
 1fc:	0e 94 49 02 	call	0x492	; 0x492 <__cmpsf2>
 200:	88 23       	and	r24, r24
 202:	1c f4       	brge	.+6      	; 0x20a <stepper+0x188>
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	23 c0       	rjmp	.+70     	; 0x250 <stepper+0x1ce>
		__ticks = 1;
	else if (__tmp > 65535)
 20a:	c8 01       	movw	r24, r16
 20c:	b7 01       	movw	r22, r14
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	3f ef       	ldi	r19, 0xFF	; 255
 212:	4f e7       	ldi	r20, 0x7F	; 127
 214:	57 e4       	ldi	r21, 0x47	; 71
 216:	0e 94 03 03 	call	0x606	; 0x606 <__gesf2>
 21a:	18 16       	cp	r1, r24
 21c:	ac f4       	brge	.+42     	; 0x248 <stepper+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 21e:	c6 01       	movw	r24, r12
 220:	b5 01       	movw	r22, r10
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	40 e2       	ldi	r20, 0x20	; 32
 228:	51 e4       	ldi	r21, 0x41	; 65
 22a:	0e 94 07 03 	call	0x60e	; 0x60e <__mulsf3>
 22e:	0e 94 4d 02 	call	0x49a	; 0x49a <__fixunssfsi>
 232:	06 c0       	rjmp	.+12     	; 0x240 <stepper+0x1be>
 234:	80 e9       	ldi	r24, 0x90	; 144
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <stepper+0x1b6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 23c:	61 50       	subi	r22, 0x01	; 1
 23e:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 240:	61 15       	cp	r22, r1
 242:	71 05       	cpc	r23, r1
 244:	b9 f7       	brne	.-18     	; 0x234 <stepper+0x1b2>
 246:	07 c0       	rjmp	.+14     	; 0x256 <stepper+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 248:	c8 01       	movw	r24, r16
 24a:	b7 01       	movw	r22, r14
 24c:	0e 94 4d 02 	call	0x49a	; 0x49a <__fixunssfsi>
 250:	cb 01       	movw	r24, r22
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <stepper+0x1d0>
   _delay_ms(speed);
  }
 }
 else 
 {
  for(i=0;i<steps;i++)
 256:	08 94       	sec
 258:	61 1c       	adc	r6, r1
 25a:	71 1c       	adc	r7, r1
 25c:	81 1c       	adc	r8, r1
 25e:	91 1c       	adc	r9, r1
 260:	2d 81       	ldd	r18, Y+5	; 0x05
 262:	3e 81       	ldd	r19, Y+6	; 0x06
 264:	4f 81       	ldd	r20, Y+7	; 0x07
 266:	58 85       	ldd	r21, Y+8	; 0x08
 268:	62 16       	cp	r6, r18
 26a:	73 06       	cpc	r7, r19
 26c:	84 06       	cpc	r8, r20
 26e:	95 06       	cpc	r9, r21
 270:	0c f4       	brge	.+2      	; 0x274 <stepper+0x1f2>
 272:	9d cf       	rjmp	.-198    	; 0x1ae <stepper+0x12c>
   PORTA=step[3-(i%8)];
   _delay_ms(speed);
  }
 }

}
 274:	28 96       	adiw	r28, 0x08	; 8
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
 280:	cf 91       	pop	r28
 282:	df 91       	pop	r29
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	ff 90       	pop	r15
 28a:	ef 90       	pop	r14
 28c:	df 90       	pop	r13
 28e:	cf 90       	pop	r12
 290:	bf 90       	pop	r11
 292:	af 90       	pop	r10
 294:	9f 90       	pop	r9
 296:	8f 90       	pop	r8
 298:	7f 90       	pop	r7
 29a:	6f 90       	pop	r6
 29c:	5f 90       	pop	r5
 29e:	4f 90       	pop	r4
 2a0:	3f 90       	pop	r3
 2a2:	2f 90       	pop	r2
 2a4:	08 95       	ret

000002a6 <stepper1>:
void stepper1(int steps,int speed,unsigned char dir)
{int
 2a6:	2f 92       	push	r2
 2a8:	3f 92       	push	r3
 2aa:	4f 92       	push	r4
 2ac:	5f 92       	push	r5
 2ae:	6f 92       	push	r6
 2b0:	7f 92       	push	r7
 2b2:	8f 92       	push	r8
 2b4:	9f 92       	push	r9
 2b6:	af 92       	push	r10
 2b8:	bf 92       	push	r11
 2ba:	cf 92       	push	r12
 2bc:	df 92       	push	r13
 2be:	ef 92       	push	r14
 2c0:	ff 92       	push	r15
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	2c 01       	movw	r4, r24
 i;
 if(dir==1)
 2cc:	41 30       	cpi	r20, 0x01	; 1
 2ce:	61 f0       	breq	.+24     	; 0x2e8 <stepper1+0x42>
 2d0:	c0 e0       	ldi	r28, 0x00	; 0
 2d2:	d0 e0       	ldi	r29, 0x00	; 0
 else 
 {
  for(i=0;i<steps;i++)
  {
   PORTA=step1[7-(i%77)];
   _delay_ms(speed);
 2d4:	3b 01       	movw	r6, r22
 2d6:	88 24       	eor	r8, r8
 2d8:	77 fc       	sbrc	r7, 7
 2da:	80 94       	com	r8
 2dc:	98 2c       	mov	r9, r8
 2de:	90 e9       	ldi	r25, 0x90	; 144
 2e0:	29 2e       	mov	r2, r25
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	39 2e       	mov	r3, r25
 2e6:	a3 c0       	rjmp	.+326    	; 0x42e <stepper1+0x188>

}
void stepper1(int steps,int speed,unsigned char dir)
{int
 i;
 if(dir==1)
 2e8:	c0 e0       	ldi	r28, 0x00	; 0
 2ea:	d0 e0       	ldi	r29, 0x00	; 0
 {
  for(i=0;i<steps;i++)
  {
   PORTA=step1[i%8];
   _delay_ms(speed);
 2ec:	3b 01       	movw	r6, r22
 2ee:	88 24       	eor	r8, r8
 2f0:	77 fc       	sbrc	r7, 7
 2f2:	80 94       	com	r8
 2f4:	98 2c       	mov	r9, r8
 2f6:	80 e9       	ldi	r24, 0x90	; 144
 2f8:	28 2e       	mov	r2, r24
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	38 2e       	mov	r3, r24
 2fe:	46 c0       	rjmp	.+140    	; 0x38c <stepper1+0xe6>
 i;
 if(dir==1)
 {
  for(i=0;i<steps;i++)
  {
   PORTA=step1[i%8];
 300:	fe 01       	movw	r30, r28
 302:	e7 70       	andi	r30, 0x07	; 7
 304:	f0 70       	andi	r31, 0x00	; 0
 306:	ec 59       	subi	r30, 0x9C	; 156
 308:	ff 4f       	sbci	r31, 0xFF	; 255
 30a:	80 81       	ld	r24, Z
 30c:	8b bb       	out	0x1b, r24	; 27
   _delay_ms(speed);
 30e:	c4 01       	movw	r24, r8
 310:	b3 01       	movw	r22, r6
 312:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatsisf>
 316:	5b 01       	movw	r10, r22
 318:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	4a e7       	ldi	r20, 0x7A	; 122
 320:	55 e4       	ldi	r21, 0x45	; 69
 322:	0e 94 07 03 	call	0x60e	; 0x60e <__mulsf3>
 326:	7b 01       	movw	r14, r22
 328:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	40 e8       	ldi	r20, 0x80	; 128
 330:	5f e3       	ldi	r21, 0x3F	; 63
 332:	0e 94 49 02 	call	0x492	; 0x492 <__cmpsf2>
 336:	88 23       	and	r24, r24
 338:	1c f4       	brge	.+6      	; 0x340 <stepper1+0x9a>
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	22 c0       	rjmp	.+68     	; 0x384 <stepper1+0xde>
		__ticks = 1;
	else if (__tmp > 65535)
 340:	c8 01       	movw	r24, r16
 342:	b7 01       	movw	r22, r14
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	3f ef       	ldi	r19, 0xFF	; 255
 348:	4f e7       	ldi	r20, 0x7F	; 127
 34a:	57 e4       	ldi	r21, 0x47	; 71
 34c:	0e 94 03 03 	call	0x606	; 0x606 <__gesf2>
 350:	18 16       	cp	r1, r24
 352:	a4 f4       	brge	.+40     	; 0x37c <stepper1+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 354:	c6 01       	movw	r24, r12
 356:	b5 01       	movw	r22, r10
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	40 e2       	ldi	r20, 0x20	; 32
 35e:	51 e4       	ldi	r21, 0x41	; 65
 360:	0e 94 07 03 	call	0x60e	; 0x60e <__mulsf3>
 364:	0e 94 4d 02 	call	0x49a	; 0x49a <__fixunssfsi>
 368:	05 c0       	rjmp	.+10     	; 0x374 <stepper1+0xce>
 36a:	c1 01       	movw	r24, r2
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <stepper1+0xc6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 370:	61 50       	subi	r22, 0x01	; 1
 372:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 374:	61 15       	cp	r22, r1
 376:	71 05       	cpc	r23, r1
 378:	c1 f7       	brne	.-16     	; 0x36a <stepper1+0xc4>
 37a:	07 c0       	rjmp	.+14     	; 0x38a <stepper1+0xe4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 37c:	c8 01       	movw	r24, r16
 37e:	b7 01       	movw	r22, r14
 380:	0e 94 4d 02 	call	0x49a	; 0x49a <__fixunssfsi>
 384:	cb 01       	movw	r24, r22
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <stepper1+0xe0>
void stepper1(int steps,int speed,unsigned char dir)
{int
 i;
 if(dir==1)
 {
  for(i=0;i<steps;i++)
 38a:	21 96       	adiw	r28, 0x01	; 1
 38c:	c4 15       	cp	r28, r4
 38e:	d5 05       	cpc	r29, r5
 390:	0c f4       	brge	.+2      	; 0x394 <stepper1+0xee>
 392:	b6 cf       	rjmp	.-148    	; 0x300 <stepper1+0x5a>
 394:	50 c0       	rjmp	.+160    	; 0x436 <stepper1+0x190>
 }
 else 
 {
  for(i=0;i<steps;i++)
  {
   PORTA=step1[7-(i%77)];
 396:	ce 01       	movw	r24, r28
 398:	6d e4       	ldi	r22, 0x4D	; 77
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	0e 94 92 03 	call	0x724	; 0x724 <__divmodhi4>
 3a0:	e7 e0       	ldi	r30, 0x07	; 7
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	e8 1b       	sub	r30, r24
 3a6:	f9 0b       	sbc	r31, r25
 3a8:	ec 59       	subi	r30, 0x9C	; 156
 3aa:	ff 4f       	sbci	r31, 0xFF	; 255
 3ac:	80 81       	ld	r24, Z
 3ae:	8b bb       	out	0x1b, r24	; 27
   _delay_ms(speed);
 3b0:	c4 01       	movw	r24, r8
 3b2:	b3 01       	movw	r22, r6
 3b4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatsisf>
 3b8:	5b 01       	movw	r10, r22
 3ba:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	4a e7       	ldi	r20, 0x7A	; 122
 3c2:	55 e4       	ldi	r21, 0x45	; 69
 3c4:	0e 94 07 03 	call	0x60e	; 0x60e <__mulsf3>
 3c8:	7b 01       	movw	r14, r22
 3ca:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 3cc:	20 e0       	ldi	r18, 0x00	; 0
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	40 e8       	ldi	r20, 0x80	; 128
 3d2:	5f e3       	ldi	r21, 0x3F	; 63
 3d4:	0e 94 49 02 	call	0x492	; 0x492 <__cmpsf2>
 3d8:	88 23       	and	r24, r24
 3da:	1c f4       	brge	.+6      	; 0x3e2 <stepper1+0x13c>
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	22 c0       	rjmp	.+68     	; 0x426 <stepper1+0x180>
		__ticks = 1;
	else if (__tmp > 65535)
 3e2:	c8 01       	movw	r24, r16
 3e4:	b7 01       	movw	r22, r14
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	3f ef       	ldi	r19, 0xFF	; 255
 3ea:	4f e7       	ldi	r20, 0x7F	; 127
 3ec:	57 e4       	ldi	r21, 0x47	; 71
 3ee:	0e 94 03 03 	call	0x606	; 0x606 <__gesf2>
 3f2:	18 16       	cp	r1, r24
 3f4:	a4 f4       	brge	.+40     	; 0x41e <stepper1+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3f6:	c6 01       	movw	r24, r12
 3f8:	b5 01       	movw	r22, r10
 3fa:	20 e0       	ldi	r18, 0x00	; 0
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	40 e2       	ldi	r20, 0x20	; 32
 400:	51 e4       	ldi	r21, 0x41	; 65
 402:	0e 94 07 03 	call	0x60e	; 0x60e <__mulsf3>
 406:	0e 94 4d 02 	call	0x49a	; 0x49a <__fixunssfsi>
 40a:	05 c0       	rjmp	.+10     	; 0x416 <stepper1+0x170>
 40c:	c1 01       	movw	r24, r2
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <stepper1+0x168>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 412:	61 50       	subi	r22, 0x01	; 1
 414:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 416:	61 15       	cp	r22, r1
 418:	71 05       	cpc	r23, r1
 41a:	c1 f7       	brne	.-16     	; 0x40c <stepper1+0x166>
 41c:	07 c0       	rjmp	.+14     	; 0x42c <stepper1+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 41e:	c8 01       	movw	r24, r16
 420:	b7 01       	movw	r22, r14
 422:	0e 94 4d 02 	call	0x49a	; 0x49a <__fixunssfsi>
 426:	cb 01       	movw	r24, r22
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <stepper1+0x182>
   _delay_ms(speed);
  }
 }
 else 
 {
  for(i=0;i<steps;i++)
 42c:	21 96       	adiw	r28, 0x01	; 1
 42e:	c4 15       	cp	r28, r4
 430:	d5 05       	cpc	r29, r5
 432:	0c f4       	brge	.+2      	; 0x436 <stepper1+0x190>
 434:	b0 cf       	rjmp	.-160    	; 0x396 <stepper1+0xf0>
   PORTA=step1[7-(i%77)];
   _delay_ms(speed);
  }
 }

}
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	ff 90       	pop	r15
 440:	ef 90       	pop	r14
 442:	df 90       	pop	r13
 444:	cf 90       	pop	r12
 446:	bf 90       	pop	r11
 448:	af 90       	pop	r10
 44a:	9f 90       	pop	r9
 44c:	8f 90       	pop	r8
 44e:	7f 90       	pop	r7
 450:	6f 90       	pop	r6
 452:	5f 90       	pop	r5
 454:	4f 90       	pop	r4
 456:	3f 90       	pop	r3
 458:	2f 90       	pop	r2
 45a:	08 95       	ret

0000045c <main>:

void main(void)
{
  DDRA=0xFF;
 45c:	8f ef       	ldi	r24, 0xFF	; 255
 45e:	8a bb       	out	0x1a, r24	; 26
  DDRD=0x00;
 460:	11 ba       	out	0x11, r1	; 17
  PORTD=0xFF;//pullup
 462:	82 bb       	out	0x12, r24	; 18
  PORTA=0x00;
 464:	1b ba       	out	0x1b, r1	; 27
while(1)
{ 
 if(bit_is_clear(PIND,0))
 466:	80 9b       	sbis	0x10, 0	; 16
 468:	02 c0       	rjmp	.+4      	; 0x46e <__stack+0xf>
 {
 stepper1(400,3,1);
 }
 else if(bit_is_clear(PIND,1))
 46a:	81 99       	sbic	0x10, 1	; 16
 46c:	06 c0       	rjmp	.+12     	; 0x47a <__stack+0x1b>
 {
 stepper1(400,3,1);
 46e:	80 e9       	ldi	r24, 0x90	; 144
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	63 e0       	ldi	r22, 0x03	; 3
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	09 c0       	rjmp	.+18     	; 0x48c <__stack+0x2d>
 }
 else if(bit_is_clear(PIND,2))
 47a:	82 9b       	sbis	0x10, 2	; 16
 47c:	02 c0       	rjmp	.+4      	; 0x482 <__stack+0x23>
 {
 stepper1(400,3,0);
 }
 else if(bit_is_clear(PIND,3))
 47e:	83 99       	sbic	0x10, 3	; 16
 480:	f2 cf       	rjmp	.-28     	; 0x466 <__stack+0x7>
 {
 stepper1(400,3,0);
 482:	80 e9       	ldi	r24, 0x90	; 144
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	63 e0       	ldi	r22, 0x03	; 3
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <stepper1>
 490:	ea cf       	rjmp	.-44     	; 0x466 <__stack+0x7>

00000492 <__cmpsf2>:
 492:	6c d0       	rcall	.+216    	; 0x56c <__fp_cmp>
 494:	08 f4       	brcc	.+2      	; 0x498 <__cmpsf2+0x6>
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	08 95       	ret

0000049a <__fixunssfsi>:
 49a:	94 d0       	rcall	.+296    	; 0x5c4 <__fp_splitA>
 49c:	88 f0       	brcs	.+34     	; 0x4c0 <__fixunssfsi+0x26>
 49e:	9f 57       	subi	r25, 0x7F	; 127
 4a0:	90 f0       	brcs	.+36     	; 0x4c6 <__fixunssfsi+0x2c>
 4a2:	b9 2f       	mov	r27, r25
 4a4:	99 27       	eor	r25, r25
 4a6:	b7 51       	subi	r27, 0x17	; 23
 4a8:	a0 f0       	brcs	.+40     	; 0x4d2 <__fixunssfsi+0x38>
 4aa:	d1 f0       	breq	.+52     	; 0x4e0 <__fixunssfsi+0x46>
 4ac:	66 0f       	add	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	88 1f       	adc	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	1a f0       	brmi	.+6      	; 0x4bc <__fixunssfsi+0x22>
 4b6:	ba 95       	dec	r27
 4b8:	c9 f7       	brne	.-14     	; 0x4ac <__fixunssfsi+0x12>
 4ba:	12 c0       	rjmp	.+36     	; 0x4e0 <__fixunssfsi+0x46>
 4bc:	b1 30       	cpi	r27, 0x01	; 1
 4be:	81 f0       	breq	.+32     	; 0x4e0 <__fixunssfsi+0x46>
 4c0:	9b d0       	rcall	.+310    	; 0x5f8 <__fp_zero>
 4c2:	b1 e0       	ldi	r27, 0x01	; 1
 4c4:	08 95       	ret
 4c6:	98 c0       	rjmp	.+304    	; 0x5f8 <__fp_zero>
 4c8:	67 2f       	mov	r22, r23
 4ca:	78 2f       	mov	r23, r24
 4cc:	88 27       	eor	r24, r24
 4ce:	b8 5f       	subi	r27, 0xF8	; 248
 4d0:	39 f0       	breq	.+14     	; 0x4e0 <__fixunssfsi+0x46>
 4d2:	b9 3f       	cpi	r27, 0xF9	; 249
 4d4:	cc f3       	brlt	.-14     	; 0x4c8 <__fixunssfsi+0x2e>
 4d6:	86 95       	lsr	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	b3 95       	inc	r27
 4de:	d9 f7       	brne	.-10     	; 0x4d6 <__fixunssfsi+0x3c>
 4e0:	3e f4       	brtc	.+14     	; 0x4f0 <__fixunssfsi+0x56>
 4e2:	90 95       	com	r25
 4e4:	80 95       	com	r24
 4e6:	70 95       	com	r23
 4e8:	61 95       	neg	r22
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	8f 4f       	sbci	r24, 0xFF	; 255
 4ee:	9f 4f       	sbci	r25, 0xFF	; 255
 4f0:	08 95       	ret

000004f2 <__floatunsisf>:
 4f2:	e8 94       	clt
 4f4:	09 c0       	rjmp	.+18     	; 0x508 <__floatsisf+0x12>

000004f6 <__floatsisf>:
 4f6:	97 fb       	bst	r25, 7
 4f8:	3e f4       	brtc	.+14     	; 0x508 <__floatsisf+0x12>
 4fa:	90 95       	com	r25
 4fc:	80 95       	com	r24
 4fe:	70 95       	com	r23
 500:	61 95       	neg	r22
 502:	7f 4f       	sbci	r23, 0xFF	; 255
 504:	8f 4f       	sbci	r24, 0xFF	; 255
 506:	9f 4f       	sbci	r25, 0xFF	; 255
 508:	99 23       	and	r25, r25
 50a:	a9 f0       	breq	.+42     	; 0x536 <__floatsisf+0x40>
 50c:	f9 2f       	mov	r31, r25
 50e:	96 e9       	ldi	r25, 0x96	; 150
 510:	bb 27       	eor	r27, r27
 512:	93 95       	inc	r25
 514:	f6 95       	lsr	r31
 516:	87 95       	ror	r24
 518:	77 95       	ror	r23
 51a:	67 95       	ror	r22
 51c:	b7 95       	ror	r27
 51e:	f1 11       	cpse	r31, r1
 520:	f8 cf       	rjmp	.-16     	; 0x512 <__floatsisf+0x1c>
 522:	fa f4       	brpl	.+62     	; 0x562 <__floatsisf+0x6c>
 524:	bb 0f       	add	r27, r27
 526:	11 f4       	brne	.+4      	; 0x52c <__floatsisf+0x36>
 528:	60 ff       	sbrs	r22, 0
 52a:	1b c0       	rjmp	.+54     	; 0x562 <__floatsisf+0x6c>
 52c:	6f 5f       	subi	r22, 0xFF	; 255
 52e:	7f 4f       	sbci	r23, 0xFF	; 255
 530:	8f 4f       	sbci	r24, 0xFF	; 255
 532:	9f 4f       	sbci	r25, 0xFF	; 255
 534:	16 c0       	rjmp	.+44     	; 0x562 <__floatsisf+0x6c>
 536:	88 23       	and	r24, r24
 538:	11 f0       	breq	.+4      	; 0x53e <__floatsisf+0x48>
 53a:	96 e9       	ldi	r25, 0x96	; 150
 53c:	11 c0       	rjmp	.+34     	; 0x560 <__floatsisf+0x6a>
 53e:	77 23       	and	r23, r23
 540:	21 f0       	breq	.+8      	; 0x54a <__floatsisf+0x54>
 542:	9e e8       	ldi	r25, 0x8E	; 142
 544:	87 2f       	mov	r24, r23
 546:	76 2f       	mov	r23, r22
 548:	05 c0       	rjmp	.+10     	; 0x554 <__floatsisf+0x5e>
 54a:	66 23       	and	r22, r22
 54c:	71 f0       	breq	.+28     	; 0x56a <__floatsisf+0x74>
 54e:	96 e8       	ldi	r25, 0x86	; 134
 550:	86 2f       	mov	r24, r22
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	2a f0       	brmi	.+10     	; 0x562 <__floatsisf+0x6c>
 558:	9a 95       	dec	r25
 55a:	66 0f       	add	r22, r22
 55c:	77 1f       	adc	r23, r23
 55e:	88 1f       	adc	r24, r24
 560:	da f7       	brpl	.-10     	; 0x558 <__floatsisf+0x62>
 562:	88 0f       	add	r24, r24
 564:	96 95       	lsr	r25
 566:	87 95       	ror	r24
 568:	97 f9       	bld	r25, 7
 56a:	08 95       	ret

0000056c <__fp_cmp>:
 56c:	99 0f       	add	r25, r25
 56e:	00 08       	sbc	r0, r0
 570:	55 0f       	add	r21, r21
 572:	aa 0b       	sbc	r26, r26
 574:	e0 e8       	ldi	r30, 0x80	; 128
 576:	fe ef       	ldi	r31, 0xFE	; 254
 578:	16 16       	cp	r1, r22
 57a:	17 06       	cpc	r1, r23
 57c:	e8 07       	cpc	r30, r24
 57e:	f9 07       	cpc	r31, r25
 580:	c0 f0       	brcs	.+48     	; 0x5b2 <__fp_cmp+0x46>
 582:	12 16       	cp	r1, r18
 584:	13 06       	cpc	r1, r19
 586:	e4 07       	cpc	r30, r20
 588:	f5 07       	cpc	r31, r21
 58a:	98 f0       	brcs	.+38     	; 0x5b2 <__fp_cmp+0x46>
 58c:	62 1b       	sub	r22, r18
 58e:	73 0b       	sbc	r23, r19
 590:	84 0b       	sbc	r24, r20
 592:	95 0b       	sbc	r25, r21
 594:	39 f4       	brne	.+14     	; 0x5a4 <__fp_cmp+0x38>
 596:	0a 26       	eor	r0, r26
 598:	61 f0       	breq	.+24     	; 0x5b2 <__fp_cmp+0x46>
 59a:	23 2b       	or	r18, r19
 59c:	24 2b       	or	r18, r20
 59e:	25 2b       	or	r18, r21
 5a0:	21 f4       	brne	.+8      	; 0x5aa <__fp_cmp+0x3e>
 5a2:	08 95       	ret
 5a4:	0a 26       	eor	r0, r26
 5a6:	09 f4       	brne	.+2      	; 0x5aa <__fp_cmp+0x3e>
 5a8:	a1 40       	sbci	r26, 0x01	; 1
 5aa:	a6 95       	lsr	r26
 5ac:	8f ef       	ldi	r24, 0xFF	; 255
 5ae:	81 1d       	adc	r24, r1
 5b0:	81 1d       	adc	r24, r1
 5b2:	08 95       	ret

000005b4 <__fp_split3>:
 5b4:	57 fd       	sbrc	r21, 7
 5b6:	90 58       	subi	r25, 0x80	; 128
 5b8:	44 0f       	add	r20, r20
 5ba:	55 1f       	adc	r21, r21
 5bc:	59 f0       	breq	.+22     	; 0x5d4 <__fp_splitA+0x10>
 5be:	5f 3f       	cpi	r21, 0xFF	; 255
 5c0:	71 f0       	breq	.+28     	; 0x5de <__fp_splitA+0x1a>
 5c2:	47 95       	ror	r20

000005c4 <__fp_splitA>:
 5c4:	88 0f       	add	r24, r24
 5c6:	97 fb       	bst	r25, 7
 5c8:	99 1f       	adc	r25, r25
 5ca:	61 f0       	breq	.+24     	; 0x5e4 <__fp_splitA+0x20>
 5cc:	9f 3f       	cpi	r25, 0xFF	; 255
 5ce:	79 f0       	breq	.+30     	; 0x5ee <__fp_splitA+0x2a>
 5d0:	87 95       	ror	r24
 5d2:	08 95       	ret
 5d4:	12 16       	cp	r1, r18
 5d6:	13 06       	cpc	r1, r19
 5d8:	14 06       	cpc	r1, r20
 5da:	55 1f       	adc	r21, r21
 5dc:	f2 cf       	rjmp	.-28     	; 0x5c2 <__fp_split3+0xe>
 5de:	46 95       	lsr	r20
 5e0:	f1 df       	rcall	.-30     	; 0x5c4 <__fp_splitA>
 5e2:	08 c0       	rjmp	.+16     	; 0x5f4 <__fp_splitA+0x30>
 5e4:	16 16       	cp	r1, r22
 5e6:	17 06       	cpc	r1, r23
 5e8:	18 06       	cpc	r1, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	f1 cf       	rjmp	.-30     	; 0x5d0 <__fp_splitA+0xc>
 5ee:	86 95       	lsr	r24
 5f0:	71 05       	cpc	r23, r1
 5f2:	61 05       	cpc	r22, r1
 5f4:	08 94       	sec
 5f6:	08 95       	ret

000005f8 <__fp_zero>:
 5f8:	e8 94       	clt

000005fa <__fp_szero>:
 5fa:	bb 27       	eor	r27, r27
 5fc:	66 27       	eor	r22, r22
 5fe:	77 27       	eor	r23, r23
 600:	cb 01       	movw	r24, r22
 602:	97 f9       	bld	r25, 7
 604:	08 95       	ret

00000606 <__gesf2>:
 606:	b2 df       	rcall	.-156    	; 0x56c <__fp_cmp>
 608:	08 f4       	brcc	.+2      	; 0x60c <__gesf2+0x6>
 60a:	8f ef       	ldi	r24, 0xFF	; 255
 60c:	08 95       	ret

0000060e <__mulsf3>:
 60e:	0b d0       	rcall	.+22     	; 0x626 <__mulsf3x>
 610:	78 c0       	rjmp	.+240    	; 0x702 <__fp_round>
 612:	69 d0       	rcall	.+210    	; 0x6e6 <__fp_pscA>
 614:	28 f0       	brcs	.+10     	; 0x620 <__mulsf3+0x12>
 616:	6e d0       	rcall	.+220    	; 0x6f4 <__fp_pscB>
 618:	18 f0       	brcs	.+6      	; 0x620 <__mulsf3+0x12>
 61a:	95 23       	and	r25, r21
 61c:	09 f0       	breq	.+2      	; 0x620 <__mulsf3+0x12>
 61e:	5a c0       	rjmp	.+180    	; 0x6d4 <__fp_inf>
 620:	5f c0       	rjmp	.+190    	; 0x6e0 <__fp_nan>
 622:	11 24       	eor	r1, r1
 624:	ea cf       	rjmp	.-44     	; 0x5fa <__fp_szero>

00000626 <__mulsf3x>:
 626:	c6 df       	rcall	.-116    	; 0x5b4 <__fp_split3>
 628:	a0 f3       	brcs	.-24     	; 0x612 <__mulsf3+0x4>

0000062a <__mulsf3_pse>:
 62a:	95 9f       	mul	r25, r21
 62c:	d1 f3       	breq	.-12     	; 0x622 <__mulsf3+0x14>
 62e:	95 0f       	add	r25, r21
 630:	50 e0       	ldi	r21, 0x00	; 0
 632:	55 1f       	adc	r21, r21
 634:	62 9f       	mul	r22, r18
 636:	f0 01       	movw	r30, r0
 638:	72 9f       	mul	r23, r18
 63a:	bb 27       	eor	r27, r27
 63c:	f0 0d       	add	r31, r0
 63e:	b1 1d       	adc	r27, r1
 640:	63 9f       	mul	r22, r19
 642:	aa 27       	eor	r26, r26
 644:	f0 0d       	add	r31, r0
 646:	b1 1d       	adc	r27, r1
 648:	aa 1f       	adc	r26, r26
 64a:	64 9f       	mul	r22, r20
 64c:	66 27       	eor	r22, r22
 64e:	b0 0d       	add	r27, r0
 650:	a1 1d       	adc	r26, r1
 652:	66 1f       	adc	r22, r22
 654:	82 9f       	mul	r24, r18
 656:	22 27       	eor	r18, r18
 658:	b0 0d       	add	r27, r0
 65a:	a1 1d       	adc	r26, r1
 65c:	62 1f       	adc	r22, r18
 65e:	73 9f       	mul	r23, r19
 660:	b0 0d       	add	r27, r0
 662:	a1 1d       	adc	r26, r1
 664:	62 1f       	adc	r22, r18
 666:	83 9f       	mul	r24, r19
 668:	a0 0d       	add	r26, r0
 66a:	61 1d       	adc	r22, r1
 66c:	22 1f       	adc	r18, r18
 66e:	74 9f       	mul	r23, r20
 670:	33 27       	eor	r19, r19
 672:	a0 0d       	add	r26, r0
 674:	61 1d       	adc	r22, r1
 676:	23 1f       	adc	r18, r19
 678:	84 9f       	mul	r24, r20
 67a:	60 0d       	add	r22, r0
 67c:	21 1d       	adc	r18, r1
 67e:	82 2f       	mov	r24, r18
 680:	76 2f       	mov	r23, r22
 682:	6a 2f       	mov	r22, r26
 684:	11 24       	eor	r1, r1
 686:	9f 57       	subi	r25, 0x7F	; 127
 688:	50 40       	sbci	r21, 0x00	; 0
 68a:	8a f0       	brmi	.+34     	; 0x6ae <__mulsf3_pse+0x84>
 68c:	e1 f0       	breq	.+56     	; 0x6c6 <__mulsf3_pse+0x9c>
 68e:	88 23       	and	r24, r24
 690:	4a f0       	brmi	.+18     	; 0x6a4 <__mulsf3_pse+0x7a>
 692:	ee 0f       	add	r30, r30
 694:	ff 1f       	adc	r31, r31
 696:	bb 1f       	adc	r27, r27
 698:	66 1f       	adc	r22, r22
 69a:	77 1f       	adc	r23, r23
 69c:	88 1f       	adc	r24, r24
 69e:	91 50       	subi	r25, 0x01	; 1
 6a0:	50 40       	sbci	r21, 0x00	; 0
 6a2:	a9 f7       	brne	.-22     	; 0x68e <__mulsf3_pse+0x64>
 6a4:	9e 3f       	cpi	r25, 0xFE	; 254
 6a6:	51 05       	cpc	r21, r1
 6a8:	70 f0       	brcs	.+28     	; 0x6c6 <__mulsf3_pse+0x9c>
 6aa:	14 c0       	rjmp	.+40     	; 0x6d4 <__fp_inf>
 6ac:	a6 cf       	rjmp	.-180    	; 0x5fa <__fp_szero>
 6ae:	5f 3f       	cpi	r21, 0xFF	; 255
 6b0:	ec f3       	brlt	.-6      	; 0x6ac <__mulsf3_pse+0x82>
 6b2:	98 3e       	cpi	r25, 0xE8	; 232
 6b4:	dc f3       	brlt	.-10     	; 0x6ac <__mulsf3_pse+0x82>
 6b6:	86 95       	lsr	r24
 6b8:	77 95       	ror	r23
 6ba:	67 95       	ror	r22
 6bc:	b7 95       	ror	r27
 6be:	f7 95       	ror	r31
 6c0:	e7 95       	ror	r30
 6c2:	9f 5f       	subi	r25, 0xFF	; 255
 6c4:	c1 f7       	brne	.-16     	; 0x6b6 <__mulsf3_pse+0x8c>
 6c6:	fe 2b       	or	r31, r30
 6c8:	88 0f       	add	r24, r24
 6ca:	91 1d       	adc	r25, r1
 6cc:	96 95       	lsr	r25
 6ce:	87 95       	ror	r24
 6d0:	97 f9       	bld	r25, 7
 6d2:	08 95       	ret

000006d4 <__fp_inf>:
 6d4:	97 f9       	bld	r25, 7
 6d6:	9f 67       	ori	r25, 0x7F	; 127
 6d8:	80 e8       	ldi	r24, 0x80	; 128
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	08 95       	ret

000006e0 <__fp_nan>:
 6e0:	9f ef       	ldi	r25, 0xFF	; 255
 6e2:	80 ec       	ldi	r24, 0xC0	; 192
 6e4:	08 95       	ret

000006e6 <__fp_pscA>:
 6e6:	00 24       	eor	r0, r0
 6e8:	0a 94       	dec	r0
 6ea:	16 16       	cp	r1, r22
 6ec:	17 06       	cpc	r1, r23
 6ee:	18 06       	cpc	r1, r24
 6f0:	09 06       	cpc	r0, r25
 6f2:	08 95       	ret

000006f4 <__fp_pscB>:
 6f4:	00 24       	eor	r0, r0
 6f6:	0a 94       	dec	r0
 6f8:	12 16       	cp	r1, r18
 6fa:	13 06       	cpc	r1, r19
 6fc:	14 06       	cpc	r1, r20
 6fe:	05 06       	cpc	r0, r21
 700:	08 95       	ret

00000702 <__fp_round>:
 702:	09 2e       	mov	r0, r25
 704:	03 94       	inc	r0
 706:	00 0c       	add	r0, r0
 708:	11 f4       	brne	.+4      	; 0x70e <__fp_round+0xc>
 70a:	88 23       	and	r24, r24
 70c:	52 f0       	brmi	.+20     	; 0x722 <__fp_round+0x20>
 70e:	bb 0f       	add	r27, r27
 710:	40 f4       	brcc	.+16     	; 0x722 <__fp_round+0x20>
 712:	bf 2b       	or	r27, r31
 714:	11 f4       	brne	.+4      	; 0x71a <__fp_round+0x18>
 716:	60 ff       	sbrs	r22, 0
 718:	04 c0       	rjmp	.+8      	; 0x722 <__fp_round+0x20>
 71a:	6f 5f       	subi	r22, 0xFF	; 255
 71c:	7f 4f       	sbci	r23, 0xFF	; 255
 71e:	8f 4f       	sbci	r24, 0xFF	; 255
 720:	9f 4f       	sbci	r25, 0xFF	; 255
 722:	08 95       	ret

00000724 <__divmodhi4>:
 724:	97 fb       	bst	r25, 7
 726:	09 2e       	mov	r0, r25
 728:	07 26       	eor	r0, r23
 72a:	0a d0       	rcall	.+20     	; 0x740 <__divmodhi4_neg1>
 72c:	77 fd       	sbrc	r23, 7
 72e:	04 d0       	rcall	.+8      	; 0x738 <__divmodhi4_neg2>
 730:	0c d0       	rcall	.+24     	; 0x74a <__udivmodhi4>
 732:	06 d0       	rcall	.+12     	; 0x740 <__divmodhi4_neg1>
 734:	00 20       	and	r0, r0
 736:	1a f4       	brpl	.+6      	; 0x73e <__divmodhi4_exit>

00000738 <__divmodhi4_neg2>:
 738:	70 95       	com	r23
 73a:	61 95       	neg	r22
 73c:	7f 4f       	sbci	r23, 0xFF	; 255

0000073e <__divmodhi4_exit>:
 73e:	08 95       	ret

00000740 <__divmodhi4_neg1>:
 740:	f6 f7       	brtc	.-4      	; 0x73e <__divmodhi4_exit>
 742:	90 95       	com	r25
 744:	81 95       	neg	r24
 746:	9f 4f       	sbci	r25, 0xFF	; 255
 748:	08 95       	ret

0000074a <__udivmodhi4>:
 74a:	aa 1b       	sub	r26, r26
 74c:	bb 1b       	sub	r27, r27
 74e:	51 e1       	ldi	r21, 0x11	; 17
 750:	07 c0       	rjmp	.+14     	; 0x760 <__udivmodhi4_ep>

00000752 <__udivmodhi4_loop>:
 752:	aa 1f       	adc	r26, r26
 754:	bb 1f       	adc	r27, r27
 756:	a6 17       	cp	r26, r22
 758:	b7 07       	cpc	r27, r23
 75a:	10 f0       	brcs	.+4      	; 0x760 <__udivmodhi4_ep>
 75c:	a6 1b       	sub	r26, r22
 75e:	b7 0b       	sbc	r27, r23

00000760 <__udivmodhi4_ep>:
 760:	88 1f       	adc	r24, r24
 762:	99 1f       	adc	r25, r25
 764:	5a 95       	dec	r21
 766:	a9 f7       	brne	.-22     	; 0x752 <__udivmodhi4_loop>
 768:	80 95       	com	r24
 76a:	90 95       	com	r25
 76c:	bc 01       	movw	r22, r24
 76e:	cd 01       	movw	r24, r26
 770:	08 95       	ret

00000772 <_exit>:
 772:	f8 94       	cli

00000774 <__stop_program>:
 774:	ff cf       	rjmp	.-2      	; 0x774 <__stop_program>
