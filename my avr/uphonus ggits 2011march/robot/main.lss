
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  000010da  0000116e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000099  0080008c  0080008c  0000119a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000119a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002c3  00000000  00000000  000011ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001152  00000000  00000000  0000147d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000033d  00000000  00000000  000025cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001260  00000000  00000000  0000290c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  00003b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031a  00000000  00000000  00003ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000071e  00000000  00000000  000040f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00004814  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 32       	cpi	r26, 0x25	; 37
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 21 08 	call	0x1042	; 0x1042 <main>
      8a:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <search_next_move>:
	}
 
	
 }
 uchar search_next_move(uchar temp)
 {
      92:	38 2f       	mov	r19, r24
      94:	90 91 91 00 	lds	r25, 0x0091
  
  while(robotpath[zunction]!=temp)
      98:	a9 2f       	mov	r26, r25
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	fd 01       	movw	r30, r26
      9e:	ef 59       	subi	r30, 0x9F	; 159
      a0:	ff 4f       	sbci	r31, 0xFF	; 255
      a2:	80 81       	ld	r24, Z
      a4:	9f 5f       	subi	r25, 0xFF	; 255
      a6:	83 17       	cp	r24, r19
      a8:	b9 f7       	brne	.-18     	; 0x98 <search_next_move+0x6>
      aa:	a0 93 91 00 	sts	0x0091, r26
  {
   zunction++;
  }
  return robotpath[zunction+1];
      ae:	ae 59       	subi	r26, 0x9E	; 158
      b0:	bf 4f       	sbci	r27, 0xFF	; 255
      b2:	8c 91       	ld	r24, X
 }
      b4:	08 95       	ret

000000b6 <modify_trace_route>:
  
 }
 void modify_trace_route()
 {
  unsigned char k,l;
  unsigned char i=zunction;
      b6:	20 91 91 00 	lds	r18, 0x0091
      ba:	01 c0       	rjmp	.+2      	; 0xbe <modify_trace_route+0x8>
  while(robotpath[i]!=path[pathptr-1])
  {
   i++;
      bc:	2e 2f       	mov	r18, r30
 }
 void modify_trace_route()
 {
  unsigned char k,l;
  unsigned char i=zunction;
  while(robotpath[i]!=path[pathptr-1])
      be:	e2 2f       	mov	r30, r18
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	ef 59       	subi	r30, 0x9F	; 159
      c4:	ff 4f       	sbci	r31, 0xFF	; 255
      c6:	90 81       	ld	r25, Z
      c8:	e0 91 92 00 	lds	r30, 0x0092
      cc:	f0 91 93 00 	lds	r31, 0x0093
      d0:	ec 56       	subi	r30, 0x6C	; 108
      d2:	ff 4f       	sbci	r31, 0xFF	; 255
      d4:	80 81       	ld	r24, Z
      d6:	e2 2f       	mov	r30, r18
      d8:	ef 5f       	subi	r30, 0xFF	; 255
      da:	98 17       	cp	r25, r24
      dc:	79 f7       	brne	.-34     	; 0xbc <modify_trace_route+0x6>
  {
   i++;
  }//search for final value of path from floodfill in robot path
  i++;
      de:	2e 2f       	mov	r18, r30
  for(k=pathptr;robotpath[i]!=0xEE;k++)
      e0:	80 91 92 00 	lds	r24, 0x0092
      e4:	90 91 93 00 	lds	r25, 0x0093
      e8:	98 2f       	mov	r25, r24
      ea:	06 c0       	rjmp	.+12     	; 0xf8 <modify_trace_route+0x42>
  {
   path[k]=robotpath[i];
      ec:	80 81       	ld	r24, Z
      ee:	ab 56       	subi	r26, 0x6B	; 107
      f0:	bf 4f       	sbci	r27, 0xFF	; 255
      f2:	8c 93       	st	X, r24
   i++;
      f4:	2f 5f       	subi	r18, 0xFF	; 255
  while(robotpath[i]!=path[pathptr-1])
  {
   i++;
  }//search for final value of path from floodfill in robot path
  i++;
  for(k=pathptr;robotpath[i]!=0xEE;k++)
      f6:	9f 5f       	subi	r25, 0xFF	; 255
      f8:	e2 2f       	mov	r30, r18
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	ef 59       	subi	r30, 0x9F	; 159
      fe:	ff 4f       	sbci	r31, 0xFF	; 255
     100:	80 81       	ld	r24, Z
     102:	a9 2f       	mov	r26, r25
     104:	b0 e0       	ldi	r27, 0x00	; 0
     106:	8e 3e       	cpi	r24, 0xEE	; 238
     108:	89 f7       	brne	.-30     	; 0xec <modify_trace_route+0x36>
  {
   path[k]=robotpath[i];
   i++;
  }
  path[k]=0xEE;
     10a:	ab 56       	subi	r26, 0x6B	; 107
     10c:	bf 4f       	sbci	r27, 0xFF	; 255
     10e:	8c 93       	st	X, r24
  robotpath[0]=current_cell;
     110:	80 91 94 00 	lds	r24, 0x0094
     114:	80 93 61 00 	sts	0x0061, r24
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	04 c0       	rjmp	.+8      	; 0x124 <modify_trace_route+0x6e>
  for(l=0;path[l]!=0xEE;l++)
  {
   robotpath[l+1]=path[l];
     11c:	af 59       	subi	r26, 0x9F	; 159
     11e:	bf 4f       	sbci	r27, 0xFF	; 255
     120:	ec 93       	st	X, r30
   path[k]=robotpath[i];
   i++;
  }
  path[k]=0xEE;
  robotpath[0]=current_cell;
  for(l=0;path[l]!=0xEE;l++)
     122:	2f 5f       	subi	r18, 0xFF	; 255
     124:	82 2f       	mov	r24, r18
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	fc 01       	movw	r30, r24
     12a:	eb 56       	subi	r30, 0x6B	; 107
     12c:	ff 4f       	sbci	r31, 0xFF	; 255
     12e:	e0 81       	ld	r30, Z
     130:	dc 01       	movw	r26, r24
     132:	11 96       	adiw	r26, 0x01	; 1
     134:	ee 3e       	cpi	r30, 0xEE	; 238
     136:	91 f7       	brne	.-28     	; 0x11c <modify_trace_route+0x66>
  {
   robotpath[l+1]=path[l];
  }
   robotpath[l+1]=path[l];
     138:	af 59       	subi	r26, 0x9F	; 159
     13a:	bf 4f       	sbci	r27, 0xFF	; 255
     13c:	ec 93       	st	X, r30
  zunction=0;
     13e:	10 92 91 00 	sts	0x0091, r1
 }
     142:	08 95       	ret

00000144 <modify_trace_route_for_final_run>:
 void modify_trace_route_for_final_run()
 {
  unsigned char k;
  unsigned char i=0;
  robotpath[0]=current_cell;
     144:	80 91 94 00 	lds	r24, 0x0094
     148:	80 93 61 00 	sts	0x0061, r24
     14c:	21 e0       	ldi	r18, 0x01	; 1
     14e:	05 c0       	rjmp	.+10     	; 0x15a <modify_trace_route_for_final_run+0x16>
  for(k=1;k<pathptr;k++)
  {
   robotpath[k]=path[k-1];
     150:	ec 56       	subi	r30, 0x6C	; 108
     152:	ff 4f       	sbci	r31, 0xFF	; 255
     154:	80 81       	ld	r24, Z
     156:	8c 93       	st	X, r24
 void modify_trace_route_for_final_run()
 {
  unsigned char k;
  unsigned char i=0;
  robotpath[0]=current_cell;
  for(k=1;k<pathptr;k++)
     158:	2f 5f       	subi	r18, 0xFF	; 255
     15a:	e2 2f       	mov	r30, r18
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 91 92 00 	lds	r24, 0x0092
     162:	90 91 93 00 	lds	r25, 0x0093
     166:	df 01       	movw	r26, r30
     168:	af 59       	subi	r26, 0x9F	; 159
     16a:	bf 4f       	sbci	r27, 0xFF	; 255
     16c:	e8 17       	cp	r30, r24
     16e:	f9 07       	cpc	r31, r25
     170:	7c f3       	brlt	.-34     	; 0x150 <modify_trace_route_for_final_run+0xc>
  {
   robotpath[k]=path[k-1];
  }
  robotpath[k]=0x00;
     172:	1c 92       	st	X, r1
  robotpath[k+1]=0xEE;
     174:	ee 59       	subi	r30, 0x9E	; 158
     176:	ff 4f       	sbci	r31, 0xFF	; 255
     178:	8e ee       	ldi	r24, 0xEE	; 238
     17a:	80 83       	st	Z, r24
  
  zunction=0;
     17c:	10 92 91 00 	sts	0x0091, r1
     180:	08 95       	ret

00000182 <flush>:


void flush()
{
     182:	48 ee       	ldi	r20, 0xE8	; 232
     184:	50 e0       	ldi	r21, 0x00	; 0
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
 {
  for(j=0;j<6;j++)
  {
   if(maze[i][j].temp!=99)               
   {
   maze[i][j].temp=37;
     18a:	95 e2       	ldi	r25, 0x25	; 37
     18c:	10 c0       	rjmp	.+32     	; 0x1ae <flush+0x2c>
unsigned char i,j;
 for(i=0;i<6;i++)
 {
  for(j=0;j<6;j++)
  {
   if(maze[i][j].temp!=99)               
     18e:	80 81       	ld	r24, Z
     190:	83 36       	cpi	r24, 0x63	; 99
     192:	09 f0       	breq	.+2      	; 0x196 <flush+0x14>
   {
   maze[i][j].temp=37;
     194:	90 83       	st	Z, r25
     196:	32 96       	adiw	r30, 0x02	; 2
void flush()
{
unsigned char i,j;
 for(i=0;i<6;i++)
 {
  for(j=0;j<6;j++)
     198:	e4 17       	cp	r30, r20
     19a:	f5 07       	cpc	r31, r21
     19c:	c1 f7       	brne	.-16     	; 0x18e <flush+0xc>
     19e:	2f 5f       	subi	r18, 0xFF	; 255
     1a0:	3f 4f       	sbci	r19, 0xFF	; 255
     1a2:	af 01       	movw	r20, r30
     1a4:	44 5f       	subi	r20, 0xF4	; 244
     1a6:	5f 4f       	sbci	r21, 0xFF	; 255


void flush()
{
unsigned char i,j;
 for(i=0;i<6;i++)
     1a8:	26 30       	cpi	r18, 0x06	; 6
     1aa:	31 05       	cpc	r19, r1
     1ac:	61 f0       	breq	.+24     	; 0x1c6 <flush+0x44>
     1ae:	f9 01       	movw	r30, r18
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	e2 0f       	add	r30, r18
     1b6:	f3 1f       	adc	r31, r19
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	ee 0f       	add	r30, r30
     1be:	ff 1f       	adc	r31, r31
     1c0:	e4 52       	subi	r30, 0x24	; 36
     1c2:	ff 4f       	sbci	r31, 0xFF	; 255
     1c4:	e4 cf       	rjmp	.-56     	; 0x18e <flush+0xc>
     1c6:	08 95       	ret

000001c8 <fflush>:
   
  }
 }
}
void fflush()
{
     1c8:	28 ee       	ldi	r18, 0xE8	; 232
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
unsigned char i,j;
 for(i=0;i<6;i++)
 {
  for(j=0;j<6;j++)
  {
   maze[i][j].temp=37;
     1d0:	45 e2       	ldi	r20, 0x25	; 37
     1d2:	0d c0       	rjmp	.+26     	; 0x1ee <fflush+0x26>
     1d4:	40 83       	st	Z, r20
   maze[i][j].visited=0;
     1d6:	11 82       	std	Z+1, r1	; 0x01
     1d8:	32 96       	adiw	r30, 0x02	; 2
void fflush()
{
unsigned char i,j;
 for(i=0;i<6;i++)
 {
  for(j=0;j<6;j++)
     1da:	e2 17       	cp	r30, r18
     1dc:	f3 07       	cpc	r31, r19
     1de:	d1 f7       	brne	.-12     	; 0x1d4 <fflush+0xc>
     1e0:	01 96       	adiw	r24, 0x01	; 1
     1e2:	9f 01       	movw	r18, r30
     1e4:	24 5f       	subi	r18, 0xF4	; 244
     1e6:	3f 4f       	sbci	r19, 0xFF	; 255
 }
}
void fflush()
{
unsigned char i,j;
 for(i=0;i<6;i++)
     1e8:	86 30       	cpi	r24, 0x06	; 6
     1ea:	91 05       	cpc	r25, r1
     1ec:	61 f0       	breq	.+24     	; 0x206 <fflush+0x3e>
     1ee:	fc 01       	movw	r30, r24
     1f0:	ee 0f       	add	r30, r30
     1f2:	ff 1f       	adc	r31, r31
     1f4:	e8 0f       	add	r30, r24
     1f6:	f9 1f       	adc	r31, r25
     1f8:	ee 0f       	add	r30, r30
     1fa:	ff 1f       	adc	r31, r31
     1fc:	ee 0f       	add	r30, r30
     1fe:	ff 1f       	adc	r31, r31
     200:	e4 52       	subi	r30, 0x24	; 36
     202:	ff 4f       	sbci	r31, 0xFF	; 255
     204:	e7 cf       	rjmp	.-50     	; 0x1d4 <fflush+0xc>
     206:	08 95       	ret

00000208 <floodfill>:
  }
 }
}

void floodfill()
{
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 e0       	ldi	r19, 0x00	; 0
   if((i-1>=0)&&(maze[i-1][j].temp!=99)&&maze[i][j].temp<maze[i-1][j].temp)
   maze[i-1][j].temp=k+1;
   if((j+1<6)&&(maze[i][j+1].temp!=99)&&maze[i][j].temp<maze[i][j+1].temp)
   maze[i][j+1].temp=k+1;
   if((j-1>=0)&&(maze[i][j-1].temp!=99)&&maze[i][j].temp<maze[i][j-1].temp)
   maze[i][j-1].temp=k+1;
     20e:	76 2f       	mov	r23, r22
     210:	7f 5f       	subi	r23, 0xFF	; 255
     212:	35 c0       	rjmp	.+106    	; 0x27e <floodfill+0x76>
 chance=chance-1;
 for(i=0;i<6;i++)
 {
  for(j=0;j<6;j++)
  {
   if(maze[i][j].temp==k)
     214:	84 85       	ldd	r24, Z+12	; 0x0c
     216:	86 17       	cp	r24, r22
     218:	39 f5       	brne	.+78     	; 0x268 <floodfill+0x60>
   {
   if((i+1<6)&&(maze[i+1][j].temp!=99)&&maze[i][j].temp<maze[i+1][j].temp)
     21a:	25 30       	cpi	r18, 0x05	; 5
     21c:	31 05       	cpc	r19, r1
     21e:	49 f0       	breq	.+18     	; 0x232 <floodfill+0x2a>
     220:	80 8d       	ldd	r24, Z+24	; 0x18
     222:	83 36       	cpi	r24, 0x63	; 99
     224:	19 f0       	breq	.+6      	; 0x22c <floodfill+0x24>
     226:	68 17       	cp	r22, r24
     228:	08 f4       	brcc	.+2      	; 0x22c <floodfill+0x24>
   maze[i+1][j].temp=k+1;
     22a:	70 8f       	std	Z+24, r23	; 0x18
   if((i-1>=0)&&(maze[i-1][j].temp!=99)&&maze[i][j].temp<maze[i-1][j].temp)
     22c:	21 15       	cp	r18, r1
     22e:	31 05       	cpc	r19, r1
     230:	39 f0       	breq	.+14     	; 0x240 <floodfill+0x38>
     232:	90 81       	ld	r25, Z
     234:	93 36       	cpi	r25, 0x63	; 99
     236:	21 f0       	breq	.+8      	; 0x240 <floodfill+0x38>
     238:	84 85       	ldd	r24, Z+12	; 0x0c
     23a:	89 17       	cp	r24, r25
     23c:	08 f4       	brcc	.+2      	; 0x240 <floodfill+0x38>
   maze[i-1][j].temp=k+1;
     23e:	70 83       	st	Z, r23
   if((j+1<6)&&(maze[i][j+1].temp!=99)&&maze[i][j].temp<maze[i][j+1].temp)
     240:	45 30       	cpi	r20, 0x05	; 5
     242:	51 05       	cpc	r21, r1
     244:	51 f0       	breq	.+20     	; 0x25a <floodfill+0x52>
     246:	96 85       	ldd	r25, Z+14	; 0x0e
     248:	93 36       	cpi	r25, 0x63	; 99
     24a:	21 f0       	breq	.+8      	; 0x254 <floodfill+0x4c>
     24c:	84 85       	ldd	r24, Z+12	; 0x0c
     24e:	89 17       	cp	r24, r25
     250:	08 f4       	brcc	.+2      	; 0x254 <floodfill+0x4c>
   maze[i][j+1].temp=k+1;
     252:	76 87       	std	Z+14, r23	; 0x0e
   if((j-1>=0)&&(maze[i][j-1].temp!=99)&&maze[i][j].temp<maze[i][j-1].temp)
     254:	41 15       	cp	r20, r1
     256:	51 05       	cpc	r21, r1
     258:	39 f0       	breq	.+14     	; 0x268 <floodfill+0x60>
     25a:	92 85       	ldd	r25, Z+10	; 0x0a
     25c:	93 36       	cpi	r25, 0x63	; 99
     25e:	21 f0       	breq	.+8      	; 0x268 <floodfill+0x60>
     260:	84 85       	ldd	r24, Z+12	; 0x0c
     262:	89 17       	cp	r24, r25
     264:	08 f4       	brcc	.+2      	; 0x268 <floodfill+0x60>
   maze[i][j-1].temp=k+1;
     266:	72 87       	std	Z+10, r23	; 0x0a
     268:	4f 5f       	subi	r20, 0xFF	; 255
     26a:	5f 4f       	sbci	r21, 0xFF	; 255
     26c:	32 96       	adiw	r30, 0x02	; 2
 while(chance>0)
 {
 chance=chance-1;
 for(i=0;i<6;i++)
 {
  for(j=0;j<6;j++)
     26e:	46 30       	cpi	r20, 0x06	; 6
     270:	51 05       	cpc	r21, r1
     272:	81 f6       	brne	.-96     	; 0x214 <floodfill+0xc>
     274:	2f 5f       	subi	r18, 0xFF	; 255
     276:	3f 4f       	sbci	r19, 0xFF	; 255
 unsigned char i,j,k,chance=36;
 k=0;
 while(chance>0)
 {
 chance=chance-1;
 for(i=0;i<6;i++)
     278:	26 30       	cpi	r18, 0x06	; 6
     27a:	31 05       	cpc	r19, r1
     27c:	71 f0       	breq	.+28     	; 0x29a <floodfill+0x92>
     27e:	f9 01       	movw	r30, r18
     280:	ee 0f       	add	r30, r30
     282:	ff 1f       	adc	r31, r31
     284:	e2 0f       	add	r30, r18
     286:	f3 1f       	adc	r31, r19
     288:	ee 0f       	add	r30, r30
     28a:	ff 1f       	adc	r31, r31
     28c:	ee 0f       	add	r30, r30
     28e:	ff 1f       	adc	r31, r31
     290:	e0 53       	subi	r30, 0x30	; 48
     292:	ff 4f       	sbci	r31, 0xFF	; 255
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	bd cf       	rjmp	.-134    	; 0x214 <floodfill+0xc>

void floodfill()
{
 unsigned char i,j,k,chance=36;
 k=0;
 while(chance>0)
     29a:	63 32       	cpi	r22, 0x23	; 35
     29c:	11 f0       	breq	.+4      	; 0x2a2 <floodfill+0x9a>
   if((j-1>=0)&&(maze[i][j-1].temp!=99)&&maze[i][j].temp<maze[i][j-1].temp)
   maze[i][j-1].temp=k+1;
   }//if ends here
  } //j loop
 } //i loop
 k=k+1;
     29e:	6f 5f       	subi	r22, 0xFF	; 255
     2a0:	b4 cf       	rjmp	.-152    	; 0x20a <floodfill+0x2>
     2a2:	08 95       	ret

000002a4 <floodfilllast>:
}//while loop
}
void floodfilllast()
{
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
   if((i-1>=0)&&(maze[i-1][j].visited!=0)&&(maze[i-1][j].temp!=99)&&maze[i][j].temp<maze[i-1][j].temp)
   maze[i-1][j].temp=k+1;
   if((j+1<6)&&(maze[i][j+1].visited!=0)&&(maze[i][j+1].temp!=99)&&maze[i][j].temp<maze[i][j+1].temp)
   maze[i][j+1].temp=k+1;
   if((j-1>=0)&&(maze[i][j-1].visited!=0)&&(maze[i][j-1].temp!=99)&&maze[i][j].temp<maze[i][j-1].temp)
   maze[i][j-1].temp=k+1;
     2aa:	76 2f       	mov	r23, r22
     2ac:	7f 5f       	subi	r23, 0xFF	; 255
     2ae:	41 c0       	rjmp	.+130    	; 0x332 <floodfilllast+0x8e>
 chance=chance-1;
 for(i=0;i<6;i++)
 {
  for(j=0;j<6;j++)
  {
   if(maze[i][j].temp==k)
     2b0:	84 85       	ldd	r24, Z+12	; 0x0c
     2b2:	86 17       	cp	r24, r22
     2b4:	99 f5       	brne	.+102    	; 0x31c <floodfilllast+0x78>
   {
   if((i+1<6)&&(maze[i+1][j].visited!=0)&&(maze[i+1][j].temp!=99)&&maze[i][j].temp<maze[i+1][j].temp)
     2b6:	25 30       	cpi	r18, 0x05	; 5
     2b8:	31 05       	cpc	r19, r1
     2ba:	61 f0       	breq	.+24     	; 0x2d4 <floodfilllast+0x30>
     2bc:	81 8d       	ldd	r24, Z+25	; 0x19
     2be:	88 23       	and	r24, r24
     2c0:	31 f0       	breq	.+12     	; 0x2ce <floodfilllast+0x2a>
     2c2:	80 8d       	ldd	r24, Z+24	; 0x18
     2c4:	83 36       	cpi	r24, 0x63	; 99
     2c6:	19 f0       	breq	.+6      	; 0x2ce <floodfilllast+0x2a>
     2c8:	68 17       	cp	r22, r24
     2ca:	08 f4       	brcc	.+2      	; 0x2ce <floodfilllast+0x2a>
   maze[i+1][j].temp=k+1;
     2cc:	70 8f       	std	Z+24, r23	; 0x18
   if((i-1>=0)&&(maze[i-1][j].visited!=0)&&(maze[i-1][j].temp!=99)&&maze[i][j].temp<maze[i-1][j].temp)
     2ce:	21 15       	cp	r18, r1
     2d0:	31 05       	cpc	r19, r1
     2d2:	51 f0       	breq	.+20     	; 0x2e8 <floodfilllast+0x44>
     2d4:	81 81       	ldd	r24, Z+1	; 0x01
     2d6:	88 23       	and	r24, r24
     2d8:	39 f0       	breq	.+14     	; 0x2e8 <floodfilllast+0x44>
     2da:	90 81       	ld	r25, Z
     2dc:	93 36       	cpi	r25, 0x63	; 99
     2de:	21 f0       	breq	.+8      	; 0x2e8 <floodfilllast+0x44>
     2e0:	84 85       	ldd	r24, Z+12	; 0x0c
     2e2:	89 17       	cp	r24, r25
     2e4:	08 f4       	brcc	.+2      	; 0x2e8 <floodfilllast+0x44>
   maze[i-1][j].temp=k+1;
     2e6:	70 83       	st	Z, r23
   if((j+1<6)&&(maze[i][j+1].visited!=0)&&(maze[i][j+1].temp!=99)&&maze[i][j].temp<maze[i][j+1].temp)
     2e8:	45 30       	cpi	r20, 0x05	; 5
     2ea:	51 05       	cpc	r21, r1
     2ec:	69 f0       	breq	.+26     	; 0x308 <floodfilllast+0x64>
     2ee:	87 85       	ldd	r24, Z+15	; 0x0f
     2f0:	88 23       	and	r24, r24
     2f2:	39 f0       	breq	.+14     	; 0x302 <floodfilllast+0x5e>
     2f4:	96 85       	ldd	r25, Z+14	; 0x0e
     2f6:	93 36       	cpi	r25, 0x63	; 99
     2f8:	21 f0       	breq	.+8      	; 0x302 <floodfilllast+0x5e>
     2fa:	84 85       	ldd	r24, Z+12	; 0x0c
     2fc:	89 17       	cp	r24, r25
     2fe:	08 f4       	brcc	.+2      	; 0x302 <floodfilllast+0x5e>
   maze[i][j+1].temp=k+1;
     300:	76 87       	std	Z+14, r23	; 0x0e
   if((j-1>=0)&&(maze[i][j-1].visited!=0)&&(maze[i][j-1].temp!=99)&&maze[i][j].temp<maze[i][j-1].temp)
     302:	41 15       	cp	r20, r1
     304:	51 05       	cpc	r21, r1
     306:	51 f0       	breq	.+20     	; 0x31c <floodfilllast+0x78>
     308:	83 85       	ldd	r24, Z+11	; 0x0b
     30a:	88 23       	and	r24, r24
     30c:	39 f0       	breq	.+14     	; 0x31c <floodfilllast+0x78>
     30e:	92 85       	ldd	r25, Z+10	; 0x0a
     310:	93 36       	cpi	r25, 0x63	; 99
     312:	21 f0       	breq	.+8      	; 0x31c <floodfilllast+0x78>
     314:	84 85       	ldd	r24, Z+12	; 0x0c
     316:	89 17       	cp	r24, r25
     318:	08 f4       	brcc	.+2      	; 0x31c <floodfilllast+0x78>
   maze[i][j-1].temp=k+1;
     31a:	72 87       	std	Z+10, r23	; 0x0a
     31c:	4f 5f       	subi	r20, 0xFF	; 255
     31e:	5f 4f       	sbci	r21, 0xFF	; 255
     320:	32 96       	adiw	r30, 0x02	; 2
 while(chance>0)
 {
 chance=chance-1;
 for(i=0;i<6;i++)
 {
  for(j=0;j<6;j++)
     322:	46 30       	cpi	r20, 0x06	; 6
     324:	51 05       	cpc	r21, r1
     326:	21 f6       	brne	.-120    	; 0x2b0 <floodfilllast+0xc>
     328:	2f 5f       	subi	r18, 0xFF	; 255
     32a:	3f 4f       	sbci	r19, 0xFF	; 255
 unsigned char i,j,k,chance=36;
 k=0;
 while(chance>0)
 {
 chance=chance-1;
 for(i=0;i<6;i++)
     32c:	26 30       	cpi	r18, 0x06	; 6
     32e:	31 05       	cpc	r19, r1
     330:	71 f0       	breq	.+28     	; 0x34e <floodfilllast+0xaa>
     332:	f9 01       	movw	r30, r18
     334:	ee 0f       	add	r30, r30
     336:	ff 1f       	adc	r31, r31
     338:	e2 0f       	add	r30, r18
     33a:	f3 1f       	adc	r31, r19
     33c:	ee 0f       	add	r30, r30
     33e:	ff 1f       	adc	r31, r31
     340:	ee 0f       	add	r30, r30
     342:	ff 1f       	adc	r31, r31
     344:	e0 53       	subi	r30, 0x30	; 48
     346:	ff 4f       	sbci	r31, 0xFF	; 255
     348:	40 e0       	ldi	r20, 0x00	; 0
     34a:	50 e0       	ldi	r21, 0x00	; 0
     34c:	b1 cf       	rjmp	.-158    	; 0x2b0 <floodfilllast+0xc>
}
void floodfilllast()
{
 unsigned char i,j,k,chance=36;
 k=0;
 while(chance>0)
     34e:	63 32       	cpi	r22, 0x23	; 35
     350:	11 f0       	breq	.+4      	; 0x356 <floodfilllast+0xb2>
   if((j-1>=0)&&(maze[i][j-1].visited!=0)&&(maze[i][j-1].temp!=99)&&maze[i][j].temp<maze[i][j-1].temp)
   maze[i][j-1].temp=k+1;
   }//if ends here
  } //j loop
 } //i loop
 k=k+1;
     352:	6f 5f       	subi	r22, 0xFF	; 255
     354:	a8 cf       	rjmp	.-176    	; 0x2a6 <floodfilllast+0x2>
     356:	08 95       	ret

00000358 <moves>:
}//while loop
}

void moves(unsigned char mx,unsigned char my)
{pathptr=0;
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	a8 2f       	mov	r26, r24
     35e:	10 92 93 00 	sts	0x0093, r1
     362:	10 92 92 00 	sts	0x0092, r1
  mx=mx+1;
  else if((mx-1)>=0 &&(maze[mx][my].temp>maze[mx-1][my].temp))
  mx=mx-1;
  else if((my+1)<6 &&(maze[mx][my].temp>maze[mx][my+1].temp))
  my=my+1;
  else if((my-1)>=0 &&(maze[mx][my].temp>maze[mx][my-1].temp))
     366:	c1 e0       	ldi	r28, 0x01	; 1
     368:	d0 e0       	ldi	r29, 0x00	; 0
     36a:	6d c0       	rjmp	.+218    	; 0x446 <moves+0xee>

void moves(unsigned char mx,unsigned char my)
{pathptr=0;
 while(maze[mx][my].temp!=0)
 {
  if((mx+1)<6 &&(maze[mx][my].temp>maze[mx+1][my].temp))
     36c:	25 30       	cpi	r18, 0x05	; 5
     36e:	31 05       	cpc	r19, r1
     370:	bc f4       	brge	.+46     	; 0x3a0 <moves+0x48>
     372:	c9 01       	movw	r24, r18
     374:	01 96       	adiw	r24, 0x01	; 1
     376:	fc 01       	movw	r30, r24
     378:	ee 0f       	add	r30, r30
     37a:	ff 1f       	adc	r31, r31
     37c:	e8 0f       	add	r30, r24
     37e:	f9 1f       	adc	r31, r25
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	e4 0f       	add	r30, r20
     386:	f5 1f       	adc	r31, r21
     388:	ee 0f       	add	r30, r30
     38a:	ff 1f       	adc	r31, r31
     38c:	e4 52       	subi	r30, 0x24	; 36
     38e:	ff 4f       	sbci	r31, 0xFF	; 255
     390:	80 81       	ld	r24, Z
     392:	87 17       	cp	r24, r23
     394:	10 f4       	brcc	.+4      	; 0x39a <moves+0x42>
  mx=mx+1;
     396:	af 5f       	subi	r26, 0xFF	; 255
     398:	42 c0       	rjmp	.+132    	; 0x41e <moves+0xc6>
  else if((mx-1)>=0 &&(maze[mx][my].temp>maze[mx-1][my].temp))
     39a:	21 15       	cp	r18, r1
     39c:	31 05       	cpc	r19, r1
     39e:	a1 f0       	breq	.+40     	; 0x3c8 <moves+0x70>
     3a0:	c9 01       	movw	r24, r18
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	fc 01       	movw	r30, r24
     3a6:	ee 0f       	add	r30, r30
     3a8:	ff 1f       	adc	r31, r31
     3aa:	e8 0f       	add	r30, r24
     3ac:	f9 1f       	adc	r31, r25
     3ae:	ee 0f       	add	r30, r30
     3b0:	ff 1f       	adc	r31, r31
     3b2:	e4 0f       	add	r30, r20
     3b4:	f5 1f       	adc	r31, r21
     3b6:	ee 0f       	add	r30, r30
     3b8:	ff 1f       	adc	r31, r31
     3ba:	e4 52       	subi	r30, 0x24	; 36
     3bc:	ff 4f       	sbci	r31, 0xFF	; 255
     3be:	80 81       	ld	r24, Z
     3c0:	87 17       	cp	r24, r23
     3c2:	10 f4       	brcc	.+4      	; 0x3c8 <moves+0x70>
  mx=mx-1;
     3c4:	a1 50       	subi	r26, 0x01	; 1
     3c6:	2b c0       	rjmp	.+86     	; 0x41e <moves+0xc6>
  else if((my+1)<6 &&(maze[mx][my].temp>maze[mx][my+1].temp))
     3c8:	45 30       	cpi	r20, 0x05	; 5
     3ca:	51 05       	cpc	r21, r1
     3cc:	ac f4       	brge	.+42     	; 0x3f8 <moves+0xa0>
     3ce:	f9 01       	movw	r30, r18
     3d0:	ee 0f       	add	r30, r30
     3d2:	ff 1f       	adc	r31, r31
     3d4:	e2 0f       	add	r30, r18
     3d6:	f3 1f       	adc	r31, r19
     3d8:	ee 0f       	add	r30, r30
     3da:	ff 1f       	adc	r31, r31
     3dc:	e4 0f       	add	r30, r20
     3de:	f5 1f       	adc	r31, r21
     3e0:	ee 0f       	add	r30, r30
     3e2:	ff 1f       	adc	r31, r31
     3e4:	e2 52       	subi	r30, 0x22	; 34
     3e6:	ff 4f       	sbci	r31, 0xFF	; 255
     3e8:	80 81       	ld	r24, Z
     3ea:	87 17       	cp	r24, r23
     3ec:	10 f4       	brcc	.+4      	; 0x3f2 <moves+0x9a>
  my=my+1;
     3ee:	6f 5f       	subi	r22, 0xFF	; 255
     3f0:	16 c0       	rjmp	.+44     	; 0x41e <moves+0xc6>
  else if((my-1)>=0 &&(maze[mx][my].temp>maze[mx][my-1].temp))
     3f2:	41 15       	cp	r20, r1
     3f4:	51 05       	cpc	r21, r1
     3f6:	99 f0       	breq	.+38     	; 0x41e <moves+0xc6>
     3f8:	f9 01       	movw	r30, r18
     3fa:	ee 0f       	add	r30, r30
     3fc:	ff 1f       	adc	r31, r31
     3fe:	e2 0f       	add	r30, r18
     400:	f3 1f       	adc	r31, r19
     402:	ee 0f       	add	r30, r30
     404:	ff 1f       	adc	r31, r31
     406:	e4 0f       	add	r30, r20
     408:	f5 1f       	adc	r31, r21
     40a:	ec 1b       	sub	r30, r28
     40c:	fd 0b       	sbc	r31, r29
     40e:	ee 0f       	add	r30, r30
     410:	ff 1f       	adc	r31, r31
     412:	e4 52       	subi	r30, 0x24	; 36
     414:	ff 4f       	sbci	r31, 0xFF	; 255
     416:	80 81       	ld	r24, Z
     418:	87 17       	cp	r24, r23
     41a:	08 f4       	brcc	.+2      	; 0x41e <moves+0xc6>
  my=my-1;
     41c:	61 50       	subi	r22, 0x01	; 1
  path[pathptr]=(mx<<4)+my;
     41e:	e0 91 92 00 	lds	r30, 0x0092
     422:	f0 91 93 00 	lds	r31, 0x0093
     426:	eb 56       	subi	r30, 0x6B	; 107
     428:	ff 4f       	sbci	r31, 0xFF	; 255
     42a:	8a 2f       	mov	r24, r26
     42c:	82 95       	swap	r24
     42e:	80 7f       	andi	r24, 0xF0	; 240
     430:	86 0f       	add	r24, r22
     432:	80 83       	st	Z, r24
  pathptr++;
     434:	80 91 92 00 	lds	r24, 0x0092
     438:	90 91 93 00 	lds	r25, 0x0093
     43c:	01 96       	adiw	r24, 0x01	; 1
     43e:	90 93 93 00 	sts	0x0093, r25
     442:	80 93 92 00 	sts	0x0092, r24
}//while loop
}

void moves(unsigned char mx,unsigned char my)
{pathptr=0;
 while(maze[mx][my].temp!=0)
     446:	2a 2f       	mov	r18, r26
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	46 2f       	mov	r20, r22
     44c:	50 e0       	ldi	r21, 0x00	; 0
     44e:	f9 01       	movw	r30, r18
     450:	ee 0f       	add	r30, r30
     452:	ff 1f       	adc	r31, r31
     454:	e2 0f       	add	r30, r18
     456:	f3 1f       	adc	r31, r19
     458:	ee 0f       	add	r30, r30
     45a:	ff 1f       	adc	r31, r31
     45c:	e4 0f       	add	r30, r20
     45e:	f5 1f       	adc	r31, r21
     460:	ee 0f       	add	r30, r30
     462:	ff 1f       	adc	r31, r31
     464:	e4 52       	subi	r30, 0x24	; 36
     466:	ff 4f       	sbci	r31, 0xFF	; 255
     468:	70 81       	ld	r23, Z
     46a:	77 23       	and	r23, r23
     46c:	09 f0       	breq	.+2      	; 0x470 <__stack+0x11>
     46e:	7e cf       	rjmp	.-260    	; 0x36c <moves+0x14>
 // cout<<"  "<<mx<<"-"<<my;
 }
  // itoa(pathptr);
  //lcd_cmd(0xc0);
 //cout<<endl;
}
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <algorun>:
void algorun(unsigned char sxy ,unsigned char dxy)
{unsigned char ttemp,hb,lb;
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	08 2f       	mov	r16, r24
     47c:	16 2f       	mov	r17, r22
 int i,j;
 flush();
     47e:	0e 94 c1 00 	call	0x182	; 0x182 <flush>
 ttemp=dxy;
 hb=(ttemp>>4)&0x0f;
 lb=ttemp&0x0f;
 maze[hb][lb].temp=0;
     482:	81 2f       	mov	r24, r17
     484:	82 95       	swap	r24
     486:	8f 70       	andi	r24, 0x0F	; 15
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	fc 01       	movw	r30, r24
     48c:	ee 0f       	add	r30, r30
     48e:	ff 1f       	adc	r31, r31
     490:	e8 0f       	add	r30, r24
     492:	f9 1f       	adc	r31, r25
     494:	ee 0f       	add	r30, r30
     496:	ff 1f       	adc	r31, r31
     498:	1f 70       	andi	r17, 0x0F	; 15
     49a:	e1 0f       	add	r30, r17
     49c:	f1 1d       	adc	r31, r1
     49e:	ee 0f       	add	r30, r30
     4a0:	ff 1f       	adc	r31, r31
     4a2:	e4 52       	subi	r30, 0x24	; 36
     4a4:	ff 4f       	sbci	r31, 0xFF	; 255
     4a6:	10 82       	st	Z, r1

 floodfill();
     4a8:	0e 94 04 01 	call	0x208	; 0x208 <floodfill>
 ttemp=sxy;
 hb=(ttemp>>4)&0x0f;
 lb=ttemp&0x0f;
 
 moves(hb,lb);
     4ac:	80 2f       	mov	r24, r16
     4ae:	82 95       	swap	r24
     4b0:	8f 70       	andi	r24, 0x0F	; 15
     4b2:	0f 70       	andi	r16, 0x0F	; 15
     4b4:	60 2f       	mov	r22, r16
     4b6:	0e 94 ac 01 	call	0x358	; 0x358 <moves>
  
} 
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	08 95       	ret

000004c0 <finalrun>:
void finalrun(unsigned char sxy ,unsigned char dxy)
{unsigned char ttemp,hb,lb;
     4c0:	0f 93       	push	r16
     4c2:	1f 93       	push	r17
     4c4:	08 2f       	mov	r16, r24
     4c6:	16 2f       	mov	r17, r22
 int i,j;
 flush();
     4c8:	0e 94 c1 00 	call	0x182	; 0x182 <flush>
 ttemp=dxy;
 hb=(ttemp>>4)&0x0f;
 lb=ttemp&0x0f;
 maze[hb][lb].temp=0;
     4cc:	81 2f       	mov	r24, r17
     4ce:	82 95       	swap	r24
     4d0:	8f 70       	andi	r24, 0x0F	; 15
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	fc 01       	movw	r30, r24
     4d6:	ee 0f       	add	r30, r30
     4d8:	ff 1f       	adc	r31, r31
     4da:	e8 0f       	add	r30, r24
     4dc:	f9 1f       	adc	r31, r25
     4de:	ee 0f       	add	r30, r30
     4e0:	ff 1f       	adc	r31, r31
     4e2:	1f 70       	andi	r17, 0x0F	; 15
     4e4:	e1 0f       	add	r30, r17
     4e6:	f1 1d       	adc	r31, r1
     4e8:	ee 0f       	add	r30, r30
     4ea:	ff 1f       	adc	r31, r31
     4ec:	e4 52       	subi	r30, 0x24	; 36
     4ee:	ff 4f       	sbci	r31, 0xFF	; 255
     4f0:	10 82       	st	Z, r1

 floodfilllast();
     4f2:	0e 94 52 01 	call	0x2a4	; 0x2a4 <floodfilllast>
 ttemp=sxy;
 hb=(ttemp>>4)&0x0f;
 lb=ttemp&0x0f;
 
 moves(hb,lb);
     4f6:	80 2f       	mov	r24, r16
     4f8:	82 95       	swap	r24
     4fa:	8f 70       	andi	r24, 0x0F	; 15
     4fc:	0f 70       	andi	r16, 0x0F	; 15
     4fe:	60 2f       	mov	r22, r16
     500:	0e 94 ac 01 	call	0x358	; 0x358 <moves>
  
} 
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	08 95       	ret

0000050a <adc>:
#include "algo.h"


uint8_t adc(unsigned char channel)
{uint8_t adc_value;
         ADMUX = 0x60|channel; // channel 0, left-justified result
     50a:	80 66       	ori	r24, 0x60	; 96
     50c:	87 b9       	out	0x07, r24	; 7
        ADCSRA = _BV(ADEN) | _BV(ADPS2)| _BV(ADPS0);     
     50e:	85 e8       	ldi	r24, 0x85	; 133
     510:	86 b9       	out	0x06, r24	; 6
        /* read output from ADC */
        ADCSRA |= _BV(ADSC);
     512:	36 9a       	sbi	0x06, 6	; 6
        while (!(ADCSRA & _BV(ADIF)));
     514:	34 9b       	sbis	0x06, 4	; 6
     516:	fe cf       	rjmp	.-4      	; 0x514 <adc+0xa>
        adc_value = ADCH;
     518:	85 b1       	in	r24, 0x05	; 5
        ADCSRA |= _BV(ADIF);
     51a:	34 9a       	sbi	0x06, 4	; 6
        
        return adc_value;

}
     51c:	08 95       	ret

0000051e <toggle>:
void toggle()
{
 if(PORTB&0x40)
     51e:	c6 9b       	sbis	0x18, 6	; 24
     520:	02 c0       	rjmp	.+4      	; 0x526 <toggle+0x8>
 {
  cbi(PORTB,6);
     522:	c6 98       	cbi	0x18, 6	; 24
     524:	08 95       	ret
 }
 else
 {
  sbi(PORTB,6);
     526:	c6 9a       	sbi	0x18, 6	; 24
     528:	08 95       	ret

0000052a <eye_read>:
 }
}


void eye_read()
{ uint8_t adc_value,i;
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
   Reye=0;
     530:	10 92 db 00 	sts	0x00DB, r1
     534:	cc e8       	ldi	r28, 0x8C	; 140
     536:	d0 e0       	ldi	r29, 0x00	; 0
     538:	10 e0       	ldi	r17, 0x00	; 0
   for (i=0; i<5; i++)
                {
                        Reye = Reye << 1;
     53a:	80 91 db 00 	lds	r24, 0x00DB
     53e:	88 0f       	add	r24, r24
     540:	80 93 db 00 	sts	0x00DB, r24
                        adc_value = adc(i);
     544:	81 2f       	mov	r24, r17
     546:	0e 94 85 02 	call	0x50a	; 0x50a <adc>
                        if (adc_value >= midpoint[i]) 
     54a:	98 81       	ld	r25, Y
     54c:	89 17       	cp	r24, r25
     54e:	20 f0       	brcs	.+8      	; 0x558 <eye_read+0x2e>
                        {
                                Reye |= _BV(0);  
     550:	80 91 db 00 	lds	r24, 0x00DB
     554:	81 60       	ori	r24, 0x01	; 1
     556:	03 c0       	rjmp	.+6      	; 0x55e <eye_read+0x34>
                        }
                        else
                        {
                                Reye &= ~_BV(0);
     558:	80 91 db 00 	lds	r24, 0x00DB
     55c:	8e 7f       	andi	r24, 0xFE	; 254
     55e:	80 93 db 00 	sts	0x00DB, r24


void eye_read()
{ uint8_t adc_value,i;
   Reye=0;
   for (i=0; i<5; i++)
     562:	1f 5f       	subi	r17, 0xFF	; 255
     564:	21 96       	adiw	r28, 0x01	; 1
     566:	15 30       	cpi	r17, 0x05	; 5
     568:	41 f7       	brne	.-48     	; 0x53a <eye_read+0x10>
                        else
                        {
                                Reye &= ~_BV(0);
                        }
                }
				if(Reye&0x01)
     56a:	80 91 db 00 	lds	r24, 0x00DB
     56e:	80 ff       	sbrs	r24, 0
     570:	02 c0       	rjmp	.+4      	; 0x576 <eye_read+0x4c>
 sbi(PORTB,0);
     572:	c0 9a       	sbi	0x18, 0	; 24
     574:	01 c0       	rjmp	.+2      	; 0x578 <eye_read+0x4e>
 else
 cbi(PORTB,0);
     576:	c0 98       	cbi	0x18, 0	; 24
 if(Reye&0x02)
     578:	80 91 db 00 	lds	r24, 0x00DB
     57c:	81 ff       	sbrs	r24, 1
     57e:	02 c0       	rjmp	.+4      	; 0x584 <eye_read+0x5a>
 sbi(PORTB,1);
     580:	c1 9a       	sbi	0x18, 1	; 24
     582:	01 c0       	rjmp	.+2      	; 0x586 <eye_read+0x5c>
 else
 cbi(PORTB,1);
     584:	c1 98       	cbi	0x18, 1	; 24
 if(Reye&0x04)
     586:	80 91 db 00 	lds	r24, 0x00DB
     58a:	82 ff       	sbrs	r24, 2
     58c:	02 c0       	rjmp	.+4      	; 0x592 <eye_read+0x68>
 sbi(PORTB,2);
     58e:	c2 9a       	sbi	0x18, 2	; 24
     590:	01 c0       	rjmp	.+2      	; 0x594 <eye_read+0x6a>
 else
 cbi(PORTB,2);
     592:	c2 98       	cbi	0x18, 2	; 24
 if(Reye&0x08)
     594:	80 91 db 00 	lds	r24, 0x00DB
     598:	83 ff       	sbrs	r24, 3
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <eye_read+0x76>
 sbi(PORTB,5);
     59c:	c5 9a       	sbi	0x18, 5	; 24
     59e:	01 c0       	rjmp	.+2      	; 0x5a2 <eye_read+0x78>
 else
 cbi(PORTB,5);
     5a0:	c5 98       	cbi	0x18, 5	; 24
 if(Reye&0x10)
     5a2:	80 91 db 00 	lds	r24, 0x00DB
     5a6:	84 ff       	sbrs	r24, 4
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <eye_read+0x84>
 sbi(PORTB,6);
     5aa:	c6 9a       	sbi	0x18, 6	; 24
     5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <eye_read+0x86>
 else
 cbi(PORTB,6);
     5ae:	c6 98       	cbi	0x18, 6	; 24

}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	08 95       	ret

000005b8 <motor_pwm_init>:
void motor_pwm_init()
{DDRC=0xFF;
     5b8:	9f ef       	ldi	r25, 0xFF	; 255
     5ba:	94 bb       	out	0x14, r25	; 20
 PORTC=0x00;
     5bc:	15 ba       	out	0x15, r1	; 21
 DDRB=0xFF;
     5be:	97 bb       	out	0x17, r25	; 23
 DDRD=0xF0;
     5c0:	80 ef       	ldi	r24, 0xF0	; 240
     5c2:	81 bb       	out	0x11, r24	; 17
 PORTD=0xFF;
     5c4:	92 bb       	out	0x12, r25	; 18

//Fast PWM

//ICR1=20000 defines 50Hz PWM

ICR1=40000;
     5c6:	80 e4       	ldi	r24, 0x40	; 64
     5c8:	9c e9       	ldi	r25, 0x9C	; 156
     5ca:	97 bd       	out	0x27, r25	; 39
     5cc:	86 bd       	out	0x26, r24	; 38

TCCR1A|=(0<<COM1A0)|(1<<COM1A1)|(0<<COM1B0)|(1<<COM1B1)|
     5ce:	8f b5       	in	r24, 0x2f	; 47
     5d0:	82 6a       	ori	r24, 0xA2	; 162
     5d2:	8f bd       	out	0x2f, r24	; 47

(0<<FOC1A)|(0<<FOC1B)|(1<<WGM11)|(0<<WGM10);

TCCR1B|=(0<<ICNC1)|(0<<ICES1)|(1<<WGM13)|(1<<WGM12)|
     5d4:	8e b5       	in	r24, 0x2e	; 46
     5d6:	8a 61       	ori	r24, 0x1A	; 26
     5d8:	8e bd       	out	0x2e, r24	; 46

(0<<CS12)|(1<<CS11)|(0<<CS10);
OCR1A=4500;//arm down
     5da:	84 e9       	ldi	r24, 0x94	; 148
     5dc:	91 e1       	ldi	r25, 0x11	; 17
     5de:	9b bd       	out	0x2b, r25	; 43
     5e0:	8a bd       	out	0x2a, r24	; 42
OCR1B=2810;//gripper open
     5e2:	8a ef       	ldi	r24, 0xFA	; 250
     5e4:	9a e0       	ldi	r25, 0x0A	; 10
     5e6:	99 bd       	out	0x29, r25	; 41
     5e8:	88 bd       	out	0x28, r24	; 40

 PORTC=forw;
     5ea:	80 e5       	ldi	r24, 0x50	; 80
     5ec:	85 bb       	out	0x15, r24	; 21
 TCCR0=0x6D;
     5ee:	8d e6       	ldi	r24, 0x6D	; 109
     5f0:	83 bf       	out	0x33, r24	; 51
 TCNT0=0x00;
     5f2:	12 be       	out	0x32, r1	; 50
 TCCR2=0x6F;
     5f4:	8f e6       	ldi	r24, 0x6F	; 111
     5f6:	85 bd       	out	0x25, r24	; 37
 TCNT2=0x00;
     5f8:	14 bc       	out	0x24, r1	; 36
}
     5fa:	08 95       	ret

000005fc <readobstacle>:

uint8_t readobstacle()
{uint8_t p;
 p=(PINA&0xc0);
     5fc:	89 b3       	in	r24, 0x19	; 25
     5fe:	80 7c       	andi	r24, 0xC0	; 192
 if(p==0x00)
     600:	29 f0       	breq	.+10     	; 0x60c <readobstacle+0x10>
 return 0;//both white
 else if(p==0x40)
     602:	80 34       	cpi	r24, 0x40	; 64
     604:	11 f0       	breq	.+4      	; 0x60a <readobstacle+0xe>
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	08 95       	ret
     60a:	82 e0       	ldi	r24, 0x02	; 2
 return 2;//upblack 
 else
 return 1; //no block  
}
     60c:	08 95       	ret

0000060e <steer>:
pullback();
}

void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
     60e:	83 bd       	out	0x23, r24	; 35
 OCR0=r;
     610:	6c bf       	out	0x3c, r22	; 60
 
}
     612:	08 95       	ret

00000614 <pullback>:
 else
 return 1; //no block  
}
void pullback()
{
steer(60,60);
     614:	8c e3       	ldi	r24, 0x3C	; 60
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	6c e3       	ldi	r22, 0x3C	; 60
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	0e 94 07 03 	call	0x60e	; 0x60e <steer>
PORTC=back;
     620:	80 ea       	ldi	r24, 0xA0	; 160
     622:	85 bb       	out	0x15, r24	; 21
     624:	88 eb       	ldi	r24, 0xB8	; 184
     626:	9b e0       	ldi	r25, 0x0B	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     628:	20 e9       	ldi	r18, 0x90	; 144
     62a:	31 e0       	ldi	r19, 0x01	; 1
     62c:	f9 01       	movw	r30, r18
     62e:	31 97       	sbiw	r30, 0x01	; 1
     630:	f1 f7       	brne	.-4      	; 0x62e <pullback+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     632:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     634:	d9 f7       	brne	.-10     	; 0x62c <pullback+0x18>
_delay_ms(300);

}
     636:	08 95       	ret

00000638 <turnleft>:
  steer(pwmmaxspeed-190,pwmmaxspeed-190);
 }
  PORTC=brake;steer(255,255);
}
void turnleft()
{
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
 eye_read();
     63c:	0e 94 95 02 	call	0x52a	; 0x52a <eye_read>
 unsigned char r;
   
 r=(Reye & 0b00001110);
     640:	10 91 db 00 	lds	r17, 0x00DB
     644:	1e 70       	andi	r17, 0x0E	; 14
 while(r!=0x00)
 {
  eye_read();
  r=(Reye & 0b00001110);
  PORTC=xleft;
     646:	00 e9       	ldi	r16, 0x90	; 144
     648:	0c c0       	rjmp	.+24     	; 0x662 <turnleft+0x2a>
 unsigned char r;
   
 r=(Reye & 0b00001110);
 while(r!=0x00)
 {
  eye_read();
     64a:	0e 94 95 02 	call	0x52a	; 0x52a <eye_read>
  r=(Reye & 0b00001110);
     64e:	10 91 db 00 	lds	r17, 0x00DB
     652:	1e 70       	andi	r17, 0x0E	; 14
  PORTC=xleft;
     654:	05 bb       	out	0x15, r16	; 21
  steer(pwmmaxspeed-190,pwmmaxspeed-190);
     656:	82 e3       	ldi	r24, 0x32	; 50
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	62 e3       	ldi	r22, 0x32	; 50
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	0e 94 07 03 	call	0x60e	; 0x60e <steer>
{
 eye_read();
 unsigned char r;
   
 r=(Reye & 0b00001110);
 while(r!=0x00)
     662:	11 23       	and	r17, r17
     664:	91 f7       	brne	.-28     	; 0x64a <turnleft+0x12>
  eye_read();
  r=(Reye & 0b00001110);
  PORTC=xleft;
  steer(pwmmaxspeed-190,pwmmaxspeed-190);
 } 
  r=(Reye & 0b00000100);
     666:	10 91 db 00 	lds	r17, 0x00DB
     66a:	14 70       	andi	r17, 0x04	; 4
while(r!=0x04)
 {
  eye_read();
  r=(Reye & 0b00000100);
  PORTC=xleft;
     66c:	00 e9       	ldi	r16, 0x90	; 144
     66e:	0c c0       	rjmp	.+24     	; 0x688 <turnleft+0x50>
  steer(pwmmaxspeed-190,pwmmaxspeed-190);
 } 
  r=(Reye & 0b00000100);
while(r!=0x04)
 {
  eye_read();
     670:	0e 94 95 02 	call	0x52a	; 0x52a <eye_read>
  r=(Reye & 0b00000100);
     674:	10 91 db 00 	lds	r17, 0x00DB
     678:	14 70       	andi	r17, 0x04	; 4
  PORTC=xleft;
     67a:	05 bb       	out	0x15, r16	; 21
  steer(pwmmaxspeed-190,pwmmaxspeed-190);
     67c:	82 e3       	ldi	r24, 0x32	; 50
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	62 e3       	ldi	r22, 0x32	; 50
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	0e 94 07 03 	call	0x60e	; 0x60e <steer>
  r=(Reye & 0b00001110);
  PORTC=xleft;
  steer(pwmmaxspeed-190,pwmmaxspeed-190);
 } 
  r=(Reye & 0b00000100);
while(r!=0x04)
     688:	14 30       	cpi	r17, 0x04	; 4
     68a:	91 f7       	brne	.-28     	; 0x670 <turnleft+0x38>
  eye_read();
  r=(Reye & 0b00000100);
  PORTC=xleft;
  steer(pwmmaxspeed-190,pwmmaxspeed-190);
 }
 PORTC=brake;steer(255,255);
     68c:	80 ef       	ldi	r24, 0xF0	; 240
     68e:	85 bb       	out	0x15, r24	; 21
     690:	8f ef       	ldi	r24, 0xFF	; 255
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	6f ef       	ldi	r22, 0xFF	; 255
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	0e 94 07 03 	call	0x60e	; 0x60e <steer>
}
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	08 95       	ret

000006a2 <turnaround>:
  
 

void turnaround()
{
 turnleft();
     6a2:	0e 94 1c 03 	call	0x638	; 0x638 <turnleft>
 turnleft();
     6a6:	0e 94 1c 03 	call	0x638	; 0x638 <turnleft>
}
     6aa:	08 95       	ret

000006ac <turnright>:
}



void turnright()
{
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
 eye_read();
     6b0:	0e 94 95 02 	call	0x52a	; 0x52a <eye_read>
 unsigned char r;
   
 r=(Reye & 0b00001110);
     6b4:	10 91 db 00 	lds	r17, 0x00DB
     6b8:	1e 70       	andi	r17, 0x0E	; 14
 while(r!=0x00)
 {
  eye_read();
  r=(Reye & 0b00001110);
  PORTC=xright;
     6ba:	00 e6       	ldi	r16, 0x60	; 96
     6bc:	0c c0       	rjmp	.+24     	; 0x6d6 <turnright+0x2a>
 unsigned char r;
   
 r=(Reye & 0b00001110);
 while(r!=0x00)
 {
  eye_read();
     6be:	0e 94 95 02 	call	0x52a	; 0x52a <eye_read>
  r=(Reye & 0b00001110);
     6c2:	10 91 db 00 	lds	r17, 0x00DB
     6c6:	1e 70       	andi	r17, 0x0E	; 14
  PORTC=xright;
     6c8:	05 bb       	out	0x15, r16	; 21
  steer(pwmmaxspeed-190,pwmmaxspeed-190);
     6ca:	82 e3       	ldi	r24, 0x32	; 50
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	62 e3       	ldi	r22, 0x32	; 50
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	0e 94 07 03 	call	0x60e	; 0x60e <steer>
{
 eye_read();
 unsigned char r;
   
 r=(Reye & 0b00001110);
 while(r!=0x00)
     6d6:	11 23       	and	r17, r17
     6d8:	91 f7       	brne	.-28     	; 0x6be <turnright+0x12>
  eye_read();
  r=(Reye & 0b00001110);
  PORTC=xright;
  steer(pwmmaxspeed-190,pwmmaxspeed-190);
 } 
  r=(Reye & 0b00000100);
     6da:	10 91 db 00 	lds	r17, 0x00DB
     6de:	14 70       	andi	r17, 0x04	; 4
while(r!=0x04)
 {
  eye_read();
  r=(Reye & 0b00000100);
  PORTC=xright;
     6e0:	00 e6       	ldi	r16, 0x60	; 96
     6e2:	0c c0       	rjmp	.+24     	; 0x6fc <turnright+0x50>
  steer(pwmmaxspeed-190,pwmmaxspeed-190);
 } 
  r=(Reye & 0b00000100);
while(r!=0x04)
 {
  eye_read();
     6e4:	0e 94 95 02 	call	0x52a	; 0x52a <eye_read>
  r=(Reye & 0b00000100);
     6e8:	10 91 db 00 	lds	r17, 0x00DB
     6ec:	14 70       	andi	r17, 0x04	; 4
  PORTC=xright;
     6ee:	05 bb       	out	0x15, r16	; 21
  steer(pwmmaxspeed-190,pwmmaxspeed-190);
     6f0:	82 e3       	ldi	r24, 0x32	; 50
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	62 e3       	ldi	r22, 0x32	; 50
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	0e 94 07 03 	call	0x60e	; 0x60e <steer>
  r=(Reye & 0b00001110);
  PORTC=xright;
  steer(pwmmaxspeed-190,pwmmaxspeed-190);
 } 
  r=(Reye & 0b00000100);
while(r!=0x04)
     6fc:	14 30       	cpi	r17, 0x04	; 4
     6fe:	91 f7       	brne	.-28     	; 0x6e4 <turnright+0x38>
  eye_read();
  r=(Reye & 0b00000100);
  PORTC=xright;
  steer(pwmmaxspeed-190,pwmmaxspeed-190);
 }
  PORTC=brake;steer(255,255);
     700:	80 ef       	ldi	r24, 0xF0	; 240
     702:	85 bb       	out	0x15, r24	; 21
     704:	8f ef       	ldi	r24, 0xFF	; 255
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	6f ef       	ldi	r22, 0xFF	; 255
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	0e 94 07 03 	call	0x60e	; 0x60e <steer>
}
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	08 95       	ret

00000716 <move_ba>:
 
void move_ba(uchar t)
 {
    // a -> next cell
	// b -> current cell
	if(pos==1 && t==0x10 )
     716:	90 91 60 00 	lds	r25, 0x0060
     71a:	91 30       	cpi	r25, 0x01	; 1
     71c:	51 f4       	brne	.+20     	; 0x732 <move_ba+0x1c>
     71e:	80 31       	cpi	r24, 0x10	; 16
     720:	19 f4       	brne	.+6      	; 0x728 <move_ba+0x12>
	{
     turnaround();
     722:	0e 94 51 03 	call	0x6a2	; 0x6a2 <turnaround>
     726:	0b c0       	rjmp	.+22     	; 0x73e <move_ba+0x28>
	 pos=3;
	}
    else if(pos==1 && t==0x01 )
     728:	81 30       	cpi	r24, 0x01	; 1
     72a:	41 f5       	brne	.+80     	; 0x77c <move_ba+0x66>
    {
     turnleft();
     72c:	0e 94 1c 03 	call	0x638	; 0x638 <turnleft>
     730:	18 c0       	rjmp	.+48     	; 0x762 <move_ba+0x4c>
	 pos=4;
    } 
	else if(pos==2 && t==0x10 )
     732:	92 30       	cpi	r25, 0x02	; 2
     734:	59 f4       	brne	.+22     	; 0x74c <move_ba+0x36>
     736:	80 31       	cpi	r24, 0x10	; 16
     738:	21 f4       	brne	.+8      	; 0x742 <move_ba+0x2c>
	{
     turnright();
     73a:	0e 94 56 03 	call	0x6ac	; 0x6ac <turnright>
	 pos=3;
     73e:	83 e0       	ldi	r24, 0x03	; 3
     740:	11 c0       	rjmp	.+34     	; 0x764 <move_ba+0x4e>
	}
    else if(pos==2 && t==0x01 )
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	d9 f4       	brne	.+54     	; 0x77c <move_ba+0x66>
    {
	turnaround();
     746:	0e 94 51 03 	call	0x6a2	; 0x6a2 <turnaround>
     74a:	0b c0       	rjmp	.+22     	; 0x762 <move_ba+0x4c>
	 pos=4;
  
	}
	else if(pos==3 && t==0x10 )
     74c:	93 30       	cpi	r25, 0x03	; 3
     74e:	69 f4       	brne	.+26     	; 0x76a <move_ba+0x54>
     750:	80 31       	cpi	r24, 0x10	; 16
     752:	19 f4       	brne	.+6      	; 0x75a <move_ba+0x44>
	{
 //    forw(24,5);
	 pos=3;
     754:	90 93 60 00 	sts	0x0060, r25
     758:	08 95       	ret
	}
    else if(pos==3 && t==0x01 )
     75a:	81 30       	cpi	r24, 0x01	; 1
     75c:	79 f4       	brne	.+30     	; 0x77c <move_ba+0x66>
    {
     turnright();
     75e:	0e 94 56 03 	call	0x6ac	; 0x6ac <turnright>
	 pos=4;
     762:	84 e0       	ldi	r24, 0x04	; 4
     764:	80 93 60 00 	sts	0x0060, r24
     768:	08 95       	ret
	}
	else if(pos==4 && t==0x10 )
     76a:	94 30       	cpi	r25, 0x04	; 4
     76c:	39 f4       	brne	.+14     	; 0x77c <move_ba+0x66>
     76e:	80 31       	cpi	r24, 0x10	; 16
     770:	29 f4       	brne	.+10     	; 0x77c <move_ba+0x66>
	{
     turnleft();
     772:	0e 94 1c 03 	call	0x638	; 0x638 <turnleft>
	 pos=3;
     776:	83 e0       	ldi	r24, 0x03	; 3
     778:	80 93 60 00 	sts	0x0060, r24
     77c:	08 95       	ret

0000077e <move_ab>:

void move_ab(uchar t)
 {
    // a -> next cell
	// b -> current cell
	if(pos==1 && t==0x10 )
     77e:	90 91 60 00 	lds	r25, 0x0060
     782:	91 30       	cpi	r25, 0x01	; 1
     784:	39 f4       	brne	.+14     	; 0x794 <move_ab+0x16>
     786:	80 31       	cpi	r24, 0x10	; 16
     788:	51 f1       	breq	.+84     	; 0x7de <move_ab+0x60>
	{
 //    forw(24,5);
	}
    else if(pos==1 && t==0x01 )
     78a:	81 30       	cpi	r24, 0x01	; 1
     78c:	41 f5       	brne	.+80     	; 0x7de <move_ab+0x60>
    {
     turnright();
     78e:	0e 94 56 03 	call	0x6ac	; 0x6ac <turnright>
     792:	12 c0       	rjmp	.+36     	; 0x7b8 <move_ab+0x3a>
	 pos=2;
    } 
	else if(pos==2 && t==0x10 )
     794:	92 30       	cpi	r25, 0x02	; 2
     796:	29 f4       	brne	.+10     	; 0x7a2 <move_ab+0x24>
     798:	80 31       	cpi	r24, 0x10	; 16
     79a:	09 f5       	brne	.+66     	; 0x7de <move_ab+0x60>
	{
     turnleft();
     79c:	0e 94 1c 03 	call	0x638	; 0x638 <turnleft>
     7a0:	13 c0       	rjmp	.+38     	; 0x7c8 <move_ab+0x4a>
    else if(pos==2 && t==0x01 )
    {
 //    forw(24,5);
	 
	}
	else if(pos==3 && t==0x10 )
     7a2:	93 30       	cpi	r25, 0x03	; 3
     7a4:	59 f4       	brne	.+22     	; 0x7bc <move_ab+0x3e>
     7a6:	80 31       	cpi	r24, 0x10	; 16
     7a8:	19 f4       	brne	.+6      	; 0x7b0 <move_ab+0x32>
	{
     turnaround();
     7aa:	0e 94 51 03 	call	0x6a2	; 0x6a2 <turnaround>
     7ae:	0c c0       	rjmp	.+24     	; 0x7c8 <move_ab+0x4a>
	 pos=1;
	}
    else if(pos==3 && t==0x01 )
     7b0:	81 30       	cpi	r24, 0x01	; 1
     7b2:	a9 f4       	brne	.+42     	; 0x7de <move_ab+0x60>
    {
     turnleft();
     7b4:	0e 94 1c 03 	call	0x638	; 0x638 <turnleft>
	 pos=2;
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	07 c0       	rjmp	.+14     	; 0x7ca <move_ab+0x4c>
	}
	else if(pos==4 && t==0x10 )
     7bc:	94 30       	cpi	r25, 0x04	; 4
     7be:	79 f4       	brne	.+30     	; 0x7de <move_ab+0x60>
     7c0:	80 31       	cpi	r24, 0x10	; 16
     7c2:	31 f4       	brne	.+12     	; 0x7d0 <move_ab+0x52>
	{
     turnright();
     7c4:	0e 94 56 03 	call	0x6ac	; 0x6ac <turnright>
	 pos=1;
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	80 93 60 00 	sts	0x0060, r24
     7ce:	08 95       	ret
	}
    else if(pos==4 && t==0x01 )
     7d0:	81 30       	cpi	r24, 0x01	; 1
     7d2:	29 f4       	brne	.+10     	; 0x7de <move_ab+0x60>
    {
    turnaround();
     7d4:	0e 94 51 03 	call	0x6a2	; 0x6a2 <turnaround>
	pos=2;
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	80 93 60 00 	sts	0x0060, r24
     7de:	08 95       	ret

000007e0 <tracepath>:
   zunction++;
  }
  return robotpath[zunction+1];
 }
 void tracepath(uchar ptr)
 {
     7e0:	28 2f       	mov	r18, r24
     7e2:	90 91 91 00 	lds	r25, 0x0091
	
 }
 uchar search_next_move(uchar temp)
 {
  
  while(robotpath[zunction]!=temp)
     7e6:	a9 2f       	mov	r26, r25
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	fd 01       	movw	r30, r26
     7ec:	ef 59       	subi	r30, 0x9F	; 159
     7ee:	ff 4f       	sbci	r31, 0xFF	; 255
     7f0:	80 81       	ld	r24, Z
     7f2:	9f 5f       	subi	r25, 0xFF	; 255
     7f4:	82 17       	cp	r24, r18
     7f6:	b9 f7       	brne	.-18     	; 0x7e6 <tracepath+0x6>
     7f8:	a0 93 91 00 	sts	0x0091, r26
  {
   zunction++;
  }
  return robotpath[zunction+1];
     7fc:	ae 59       	subi	r26, 0x9E	; 158
     7fe:	bf 4f       	sbci	r27, 0xFF	; 255
     800:	8c 91       	ld	r24, X
 void tracepath(uchar ptr)
 {
   uchar a,b;
    b=ptr;//current
    a=search_next_move(ptr);//next    
    if(a>b)
     802:	28 17       	cp	r18, r24
     804:	20 f4       	brcc	.+8      	; 0x80e <tracepath+0x2e>
	move_ab(a-b);
     806:	82 1b       	sub	r24, r18
     808:	0e 94 bf 03 	call	0x77e	; 0x77e <move_ab>
     80c:	08 95       	ret
	else
	move_ba(b-a);
     80e:	28 1b       	sub	r18, r24
     810:	82 2f       	mov	r24, r18
     812:	0e 94 8b 03 	call	0x716	; 0x716 <move_ba>
     816:	08 95       	ret

00000818 <drive_motor>:
avoid_zun();
 
}
void drive_motor(unsigned char Lspeed,unsigned char Rspeed) 
{
 PORTC=forw;
     818:	90 e5       	ldi	r25, 0x50	; 80
     81a:	95 bb       	out	0x15, r25	; 21
pullback();
}

void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
     81c:	63 bd       	out	0x23, r22	; 35
 OCR0=r;
     81e:	8c bf       	out	0x3c, r24	; 60
void drive_motor(unsigned char Lspeed,unsigned char Rspeed) 
{
 PORTC=forw;
 steer(Rspeed,Lspeed);//L-R
 
}
     820:	08 95       	ret

00000822 <avoid_zun>:
 } 

}

void avoid_zun()
{unsigned char r,side;
     822:	1f 93       	push	r17
 eye_read();
     824:	0e 94 95 02 	call	0x52a	; 0x52a <eye_read>
 side=(Reye & 0b00010001);
     828:	80 91 db 00 	lds	r24, 0x00DB
     82c:	81 71       	andi	r24, 0x11	; 17
 r=(Reye & 0b00001110);
     82e:	90 91 db 00 	lds	r25, 0x00DB
     832:	39 c0       	rjmp	.+114    	; 0x8a6 <avoid_zun+0x84>
 while(side!=0x00)
 {eye_read();
     834:	0e 94 95 02 	call	0x52a	; 0x52a <eye_read>
  side=(Reye & 0b00010001);
     838:	10 91 db 00 	lds	r17, 0x00DB
 r=(Reye & 0b00011111);
     83c:	80 91 db 00 	lds	r24, 0x00DB
 switch(r) 
     840:	8f 71       	andi	r24, 0x1F	; 31
     842:	86 30       	cpi	r24, 0x06	; 6
     844:	c1 f0       	breq	.+48     	; 0x876 <avoid_zun+0x54>
     846:	87 30       	cpi	r24, 0x07	; 7
     848:	38 f4       	brcc	.+14     	; 0x858 <avoid_zun+0x36>
     84a:	83 30       	cpi	r24, 0x03	; 3
     84c:	79 f0       	breq	.+30     	; 0x86c <avoid_zun+0x4a>
     84e:	84 30       	cpi	r24, 0x04	; 4
     850:	a9 f0       	breq	.+42     	; 0x87c <avoid_zun+0x5a>
     852:	81 30       	cpi	r24, 0x01	; 1
     854:	31 f5       	brne	.+76     	; 0x8a2 <avoid_zun+0x80>
     856:	07 c0       	rjmp	.+14     	; 0x866 <avoid_zun+0x44>
     858:	80 31       	cpi	r24, 0x10	; 16
     85a:	e9 f0       	breq	.+58     	; 0x896 <avoid_zun+0x74>
     85c:	88 31       	cpi	r24, 0x18	; 24
     85e:	b1 f0       	breq	.+44     	; 0x88c <avoid_zun+0x6a>
     860:	8c 30       	cpi	r24, 0x0C	; 12
     862:	f9 f4       	brne	.+62     	; 0x8a2 <avoid_zun+0x80>
     864:	0e c0       	rjmp	.+28     	; 0x882 <avoid_zun+0x60>
 {                                                                              
  case 0x01:drive_motor(pwmmaxspeed-120,pwmmaxspeed);break;//xrightmost95
     866:	88 e7       	ldi	r24, 0x78	; 120
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	02 c0       	rjmp	.+4      	; 0x870 <avoid_zun+0x4e>
  case 0x03:drive_motor(pwmmaxspeed-80,pwmmaxspeed);break;//xrightmost95
     86c:	80 ea       	ldi	r24, 0xA0	; 160
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	60 ef       	ldi	r22, 0xF0	; 240
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	14 c0       	rjmp	.+40     	; 0x89e <avoid_zun+0x7c>
  case 0x06:drive_motor(pwmmaxspeed-60,pwmmaxspeed);break;//slight right35
     876:	84 eb       	ldi	r24, 0xB4	; 180
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	fa cf       	rjmp	.-12     	; 0x870 <avoid_zun+0x4e>
  case 0x04:drive_motor(pwmmaxspeed,pwmmaxspeed);break;//center
     87c:	80 ef       	ldi	r24, 0xF0	; 240
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	f7 cf       	rjmp	.-18     	; 0x870 <avoid_zun+0x4e>
  case 0x0C:drive_motor(pwmmaxspeed,pwmmaxspeed-60);break;//sl left35
     882:	80 ef       	ldi	r24, 0xF0	; 240
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	64 eb       	ldi	r22, 0xB4	; 180
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	09 c0       	rjmp	.+18     	; 0x89e <avoid_zun+0x7c>
  case 0x18:drive_motor(pwmmaxspeed,pwmmaxspeed-80);break;//xleftmost95
     88c:	80 ef       	ldi	r24, 0xF0	; 240
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	60 ea       	ldi	r22, 0xA0	; 160
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	04 c0       	rjmp	.+8      	; 0x89e <avoid_zun+0x7c>
  case 0x10:drive_motor(pwmmaxspeed,pwmmaxspeed-120);break;//xleftmost95 
     896:	80 ef       	ldi	r24, 0xF0	; 240
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	68 e7       	ldi	r22, 0x78	; 120
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	0e 94 0c 04 	call	0x818	; 0x818 <drive_motor>
 eye_read();
 side=(Reye & 0b00010001);
 r=(Reye & 0b00001110);
 while(side!=0x00)
 {eye_read();
  side=(Reye & 0b00010001);
     8a2:	81 2f       	mov	r24, r17
     8a4:	81 71       	andi	r24, 0x11	; 17
void avoid_zun()
{unsigned char r,side;
 eye_read();
 side=(Reye & 0b00010001);
 r=(Reye & 0b00001110);
 while(side!=0x00)
     8a6:	88 23       	and	r24, r24
     8a8:	29 f6       	brne	.-118    	; 0x834 <avoid_zun+0x12>
 }
 
 } 

 
}
     8aa:	1f 91       	pop	r17
     8ac:	08 95       	ret

000008ae <goforw>:
void move_ab(unsigned char);
void move_ba(unsigned char);
void tracepath(unsigned char);
void goforw(void)
{ 
avoid_zun();
     8ae:	0e 94 11 04 	call	0x822	; 0x822 <avoid_zun>
}
     8b2:	08 95       	ret

000008b4 <first_zun>:

void first_zun()
{unsigned char r,side;
     8b4:	1f 93       	push	r17
 eye_read();
     8b6:	0e 94 95 02 	call	0x52a	; 0x52a <eye_read>
 side=(Reye & 0b00010001);
     8ba:	80 91 db 00 	lds	r24, 0x00DB
     8be:	81 71       	andi	r24, 0x11	; 17
 r=(Reye & 0b00001110);
     8c0:	90 91 db 00 	lds	r25, 0x00DB
     8c4:	4b c0       	rjmp	.+150    	; 0x95c <first_zun+0xa8>
 while(side!=0x11)
 {eye_read();
     8c6:	0e 94 95 02 	call	0x52a	; 0x52a <eye_read>
  side=(Reye & 0b00010001);
     8ca:	10 91 db 00 	lds	r17, 0x00DB
 r=(Reye & 0b00011111);
     8ce:	80 91 db 00 	lds	r24, 0x00DB
 switch(r) 
     8d2:	8f 71       	andi	r24, 0x1F	; 31
     8d4:	86 30       	cpi	r24, 0x06	; 6
     8d6:	19 f1       	breq	.+70     	; 0x91e <first_zun+0x6a>
     8d8:	87 30       	cpi	r24, 0x07	; 7
     8da:	60 f4       	brcc	.+24     	; 0x8f4 <first_zun+0x40>
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	c9 f0       	breq	.+50     	; 0x912 <first_zun+0x5e>
     8e0:	83 30       	cpi	r24, 0x03	; 3
     8e2:	18 f4       	brcc	.+6      	; 0x8ea <first_zun+0x36>
     8e4:	81 30       	cpi	r24, 0x01	; 1
     8e6:	c1 f5       	brne	.+112    	; 0x958 <first_zun+0xa4>
     8e8:	11 c0       	rjmp	.+34     	; 0x90c <first_zun+0x58>
     8ea:	83 30       	cpi	r24, 0x03	; 3
     8ec:	a9 f0       	breq	.+42     	; 0x918 <first_zun+0x64>
     8ee:	84 30       	cpi	r24, 0x04	; 4
     8f0:	99 f5       	brne	.+102    	; 0x958 <first_zun+0xa4>
     8f2:	18 c0       	rjmp	.+48     	; 0x924 <first_zun+0x70>
     8f4:	8c 30       	cpi	r24, 0x0C	; 12
     8f6:	d9 f0       	breq	.+54     	; 0x92e <first_zun+0x7a>
     8f8:	8d 30       	cpi	r24, 0x0D	; 13
     8fa:	18 f4       	brcc	.+6      	; 0x902 <first_zun+0x4e>
     8fc:	88 30       	cpi	r24, 0x08	; 8
     8fe:	61 f5       	brne	.+88     	; 0x958 <first_zun+0xa4>
     900:	20 c0       	rjmp	.+64     	; 0x942 <first_zun+0x8e>
     902:	80 31       	cpi	r24, 0x10	; 16
     904:	19 f1       	breq	.+70     	; 0x94c <first_zun+0x98>
     906:	88 31       	cpi	r24, 0x18	; 24
     908:	39 f5       	brne	.+78     	; 0x958 <first_zun+0xa4>
     90a:	16 c0       	rjmp	.+44     	; 0x938 <first_zun+0x84>
 {                                                                              
  case 0x01:drive_motor(0,pwmmaxspeed);break;//xrightmost95
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0b c0       	rjmp	.+22     	; 0x928 <first_zun+0x74>
  case 0x02:drive_motor(20,pwmmaxspeed);break;//xrightmost95
     912:	84 e1       	ldi	r24, 0x14	; 20
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	08 c0       	rjmp	.+16     	; 0x928 <first_zun+0x74>
  case 0x03:drive_motor(pwmmaxspeed-210,pwmmaxspeed);break;//xrightmost95
     918:	8e e1       	ldi	r24, 0x1E	; 30
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	05 c0       	rjmp	.+10     	; 0x928 <first_zun+0x74>
  case 0x06:drive_motor(pwmmaxspeed-80,pwmmaxspeed);break;//slight right35
     91e:	80 ea       	ldi	r24, 0xA0	; 160
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	02 c0       	rjmp	.+4      	; 0x928 <first_zun+0x74>
  case 0x04:drive_motor(pwmmaxspeed,pwmmaxspeed);break;//center
     924:	80 ef       	ldi	r24, 0xF0	; 240
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	60 ef       	ldi	r22, 0xF0	; 240
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	13 c0       	rjmp	.+38     	; 0x954 <first_zun+0xa0>
  case 0x0C:drive_motor(pwmmaxspeed,pwmmaxspeed-80);break;//sl left35
     92e:	80 ef       	ldi	r24, 0xF0	; 240
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	60 ea       	ldi	r22, 0xA0	; 160
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	0e c0       	rjmp	.+28     	; 0x954 <first_zun+0xa0>
  case 0x18:drive_motor(pwmmaxspeed,pwmmaxspeed-210);break;//xleftmost95
     938:	80 ef       	ldi	r24, 0xF0	; 240
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	6e e1       	ldi	r22, 0x1E	; 30
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	09 c0       	rjmp	.+18     	; 0x954 <first_zun+0xa0>
  case 0x08:drive_motor(pwmmaxspeed,20);break;
     942:	80 ef       	ldi	r24, 0xF0	; 240
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	64 e1       	ldi	r22, 0x14	; 20
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	04 c0       	rjmp	.+8      	; 0x954 <first_zun+0xa0>
  case 0x10:drive_motor(pwmmaxspeed,0);break;//xleftmost95
     94c:	80 ef       	ldi	r24, 0xF0	; 240
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	0e 94 0c 04 	call	0x818	; 0x818 <drive_motor>
 eye_read();
 side=(Reye & 0b00010001);
 r=(Reye & 0b00001110);
 while(side!=0x11)
 {eye_read();
  side=(Reye & 0b00010001);
     958:	81 2f       	mov	r24, r17
     95a:	81 71       	andi	r24, 0x11	; 17
void first_zun()
{unsigned char r,side;
 eye_read();
 side=(Reye & 0b00010001);
 r=(Reye & 0b00001110);
 while(side!=0x11)
     95c:	81 31       	cpi	r24, 0x11	; 17
     95e:	09 f0       	breq	.+2      	; 0x962 <first_zun+0xae>
     960:	b2 cf       	rjmp	.-156    	; 0x8c6 <first_zun+0x12>
  case 0x08:drive_motor(pwmmaxspeed,20);break;
  case 0x10:drive_motor(pwmmaxspeed,0);break;//xleftmost95
 }
 
 } 
avoid_zun();
     962:	0e 94 11 04 	call	0x822	; 0x822 <avoid_zun>
 
}
     966:	1f 91       	pop	r17
     968:	08 95       	ret

0000096a <pos_run>:
 
}
void pos_run()
{unsigned char r;
 
 r=(Reye & 0b00011111);
     96a:	80 91 db 00 	lds	r24, 0x00DB
 
 
 switch(r)
     96e:	8f 71       	andi	r24, 0x1F	; 31
     970:	86 30       	cpi	r24, 0x06	; 6
     972:	29 f1       	breq	.+74     	; 0x9be <pos_run+0x54>
     974:	87 30       	cpi	r24, 0x07	; 7
     976:	60 f4       	brcc	.+24     	; 0x990 <pos_run+0x26>
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	c9 f0       	breq	.+50     	; 0x9ae <pos_run+0x44>
     97c:	83 30       	cpi	r24, 0x03	; 3
     97e:	18 f4       	brcc	.+6      	; 0x986 <pos_run+0x1c>
     980:	81 30       	cpi	r24, 0x01	; 1
     982:	d1 f5       	brne	.+116    	; 0x9f8 <pos_run+0x8e>
     984:	11 c0       	rjmp	.+34     	; 0x9a8 <pos_run+0x3e>
     986:	83 30       	cpi	r24, 0x03	; 3
     988:	b9 f0       	breq	.+46     	; 0x9b8 <pos_run+0x4e>
     98a:	84 30       	cpi	r24, 0x04	; 4
     98c:	a9 f5       	brne	.+106    	; 0x9f8 <pos_run+0x8e>
     98e:	1a c0       	rjmp	.+52     	; 0x9c4 <pos_run+0x5a>
     990:	8c 30       	cpi	r24, 0x0C	; 12
     992:	d9 f0       	breq	.+54     	; 0x9ca <pos_run+0x60>
     994:	8d 30       	cpi	r24, 0x0D	; 13
     996:	18 f4       	brcc	.+6      	; 0x99e <pos_run+0x34>
     998:	88 30       	cpi	r24, 0x08	; 8
     99a:	71 f5       	brne	.+92     	; 0x9f8 <pos_run+0x8e>
     99c:	20 c0       	rjmp	.+64     	; 0x9de <pos_run+0x74>
     99e:	80 31       	cpi	r24, 0x10	; 16
     9a0:	29 f1       	breq	.+74     	; 0x9ec <pos_run+0x82>
     9a2:	88 31       	cpi	r24, 0x18	; 24
     9a4:	49 f5       	brne	.+82     	; 0x9f8 <pos_run+0x8e>
     9a6:	16 c0       	rjmp	.+44     	; 0x9d4 <pos_run+0x6a>
 {case 0x01:drive_motor(0,pwmmaxspeed);break;//xrightmost95
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <pos_run+0x48>
  case 0x02:drive_motor(20,pwmmaxspeed);break;//xrightmost95
     9ae:	84 e1       	ldi	r24, 0x14	; 20
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	60 ef       	ldi	r22, 0xF0	; 240
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	17 c0       	rjmp	.+46     	; 0x9e6 <pos_run+0x7c>
  case 0x03:drive_motor(pwmmaxspeed-210,pwmmaxspeed);break;//xrightmost95
     9b8:	8e e1       	ldi	r24, 0x1E	; 30
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	fa cf       	rjmp	.-12     	; 0x9b2 <pos_run+0x48>
  case 0x06:drive_motor(pwmmaxspeed-80,pwmmaxspeed);break;//slight right35
     9be:	80 ea       	ldi	r24, 0xA0	; 160
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	f7 cf       	rjmp	.-18     	; 0x9b2 <pos_run+0x48>
  case 0x04:drive_motor(pwmmaxspeed,pwmmaxspeed);break;//center
     9c4:	80 ef       	ldi	r24, 0xF0	; 240
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	f4 cf       	rjmp	.-24     	; 0x9b2 <pos_run+0x48>
  case 0x0C:drive_motor(pwmmaxspeed,pwmmaxspeed-80);break;//sl left35
     9ca:	80 ef       	ldi	r24, 0xF0	; 240
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	60 ea       	ldi	r22, 0xA0	; 160
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	09 c0       	rjmp	.+18     	; 0x9e6 <pos_run+0x7c>
  case 0x18:drive_motor(pwmmaxspeed,pwmmaxspeed-210);break;//xleftmost95
     9d4:	80 ef       	ldi	r24, 0xF0	; 240
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	6e e1       	ldi	r22, 0x1E	; 30
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <pos_run+0x7c>
  case 0x08:drive_motor(pwmmaxspeed,20);break;
     9de:	80 ef       	ldi	r24, 0xF0	; 240
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	64 e1       	ldi	r22, 0x14	; 20
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	0e 94 0c 04 	call	0x818	; 0x818 <drive_motor>
     9ea:	08 95       	ret
  case 0x10:drive_motor(pwmmaxspeed,0);break;//xleftmost95
     9ec:	80 ef       	ldi	r24, 0xF0	; 240
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	0e 94 0c 04 	call	0x818	; 0x818 <drive_motor>
     9f8:	08 95       	ret

000009fa <detectandpick>:
PORTC=back;
_delay_ms(300);

}
void detectandpick()
{
     9fa:	42 c0       	rjmp	.+132    	; 0xa80 <detectandpick+0x86>
eye_read();
r=(Reye & 0b00011111);
 t=readobstacle();
 while(t!=0x00) 
 {
 switch(r)
     9fc:	86 30       	cpi	r24, 0x06	; 6
     9fe:	29 f1       	breq	.+74     	; 0xa4a <detectandpick+0x50>
     a00:	87 30       	cpi	r24, 0x07	; 7
     a02:	60 f4       	brcc	.+24     	; 0xa1c <detectandpick+0x22>
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	c9 f0       	breq	.+50     	; 0xa3a <detectandpick+0x40>
     a08:	83 30       	cpi	r24, 0x03	; 3
     a0a:	18 f4       	brcc	.+6      	; 0xa12 <detectandpick+0x18>
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	c1 f5       	brne	.+112    	; 0xa80 <detectandpick+0x86>
     a10:	11 c0       	rjmp	.+34     	; 0xa34 <detectandpick+0x3a>
     a12:	83 30       	cpi	r24, 0x03	; 3
     a14:	b9 f0       	breq	.+46     	; 0xa44 <detectandpick+0x4a>
     a16:	84 30       	cpi	r24, 0x04	; 4
     a18:	99 f5       	brne	.+102    	; 0xa80 <detectandpick+0x86>
     a1a:	1a c0       	rjmp	.+52     	; 0xa50 <detectandpick+0x56>
     a1c:	8c 30       	cpi	r24, 0x0C	; 12
     a1e:	d9 f0       	breq	.+54     	; 0xa56 <detectandpick+0x5c>
     a20:	8d 30       	cpi	r24, 0x0D	; 13
     a22:	18 f4       	brcc	.+6      	; 0xa2a <detectandpick+0x30>
     a24:	88 30       	cpi	r24, 0x08	; 8
     a26:	61 f5       	brne	.+88     	; 0xa80 <detectandpick+0x86>
     a28:	20 c0       	rjmp	.+64     	; 0xa6a <detectandpick+0x70>
     a2a:	80 31       	cpi	r24, 0x10	; 16
     a2c:	19 f1       	breq	.+70     	; 0xa74 <detectandpick+0x7a>
     a2e:	88 31       	cpi	r24, 0x18	; 24
     a30:	39 f5       	brne	.+78     	; 0xa80 <detectandpick+0x86>
     a32:	16 c0       	rjmp	.+44     	; 0xa60 <detectandpick+0x66>
 {case 0x01:drive_motor(0,pwmmaxspeed);break;//xrightmost95
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <detectandpick+0x44>
  case 0x02:drive_motor(20,pwmmaxspeed);break;//xrightmost95
     a3a:	84 e1       	ldi	r24, 0x14	; 20
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	60 ef       	ldi	r22, 0xF0	; 240
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	1c c0       	rjmp	.+56     	; 0xa7c <detectandpick+0x82>
  case 0x03:drive_motor(pwmmaxspeed-210,pwmmaxspeed);break;//xrightmost95
     a44:	8e e1       	ldi	r24, 0x1E	; 30
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	fa cf       	rjmp	.-12     	; 0xa3e <detectandpick+0x44>
  case 0x06:drive_motor(pwmmaxspeed-80,pwmmaxspeed);break;//slight right35
     a4a:	80 ea       	ldi	r24, 0xA0	; 160
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	f7 cf       	rjmp	.-18     	; 0xa3e <detectandpick+0x44>
  case 0x04:drive_motor(pwmmaxspeed,pwmmaxspeed);break;//center
     a50:	80 ef       	ldi	r24, 0xF0	; 240
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	f4 cf       	rjmp	.-24     	; 0xa3e <detectandpick+0x44>
  case 0x0C:drive_motor(pwmmaxspeed,pwmmaxspeed-80);break;//sl left35
     a56:	80 ef       	ldi	r24, 0xF0	; 240
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	60 ea       	ldi	r22, 0xA0	; 160
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	0e c0       	rjmp	.+28     	; 0xa7c <detectandpick+0x82>
  case 0x18:drive_motor(pwmmaxspeed,pwmmaxspeed-210);break;//xleftmost95
     a60:	80 ef       	ldi	r24, 0xF0	; 240
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	6e e1       	ldi	r22, 0x1E	; 30
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	09 c0       	rjmp	.+18     	; 0xa7c <detectandpick+0x82>
  case 0x08:drive_motor(pwmmaxspeed,20);break;
     a6a:	80 ef       	ldi	r24, 0xF0	; 240
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	64 e1       	ldi	r22, 0x14	; 20
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <detectandpick+0x82>
  case 0x10:drive_motor(pwmmaxspeed,0);break;//xleftmost95
     a74:	80 ef       	ldi	r24, 0xF0	; 240
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	0e 94 0c 04 	call	0x818	; 0x818 <drive_motor>

 } 
 eye_read();
     a80:	0e 94 95 02 	call	0x52a	; 0x52a <eye_read>
r=(Reye & 0b00011111);
     a84:	20 91 db 00 	lds	r18, 0x00DB
 TCNT2=0x00;
}

uint8_t readobstacle()
{uint8_t p;
 p=(PINA&0xc0);
     a88:	89 b3       	in	r24, 0x19	; 25
     a8a:	80 7c       	andi	r24, 0xC0	; 192
 if(p==0x00)
     a8c:	11 f4       	brne	.+4      	; 0xa92 <detectandpick+0x98>
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	05 c0       	rjmp	.+10     	; 0xa9c <detectandpick+0xa2>
 return 0;//both white
 else if(p==0x40)
     a92:	80 34       	cpi	r24, 0x40	; 64
     a94:	11 f0       	breq	.+4      	; 0xa9a <detectandpick+0xa0>
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	01 c0       	rjmp	.+2      	; 0xa9c <detectandpick+0xa2>
     a9a:	92 e0       	ldi	r25, 0x02	; 2
  case 0x08:drive_motor(pwmmaxspeed,20);break;
  case 0x10:drive_motor(pwmmaxspeed,0);break;//xleftmost95

 } 
 eye_read();
r=(Reye & 0b00011111);
     a9c:	82 2f       	mov	r24, r18
     a9e:	8f 71       	andi	r24, 0x1F	; 31
{
unsigned char r,t;
eye_read();
r=(Reye & 0b00011111);
 t=readobstacle();
 while(t!=0x00) 
     aa0:	99 23       	and	r25, r25
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <detectandpick+0xac>
     aa4:	ab cf       	rjmp	.-170    	; 0x9fc <detectandpick+0x2>
 eye_read();
r=(Reye & 0b00011111);
 t=readobstacle();
}

PORTC=brake;
     aa6:	80 ef       	ldi	r24, 0xF0	; 240
     aa8:	85 bb       	out	0x15, r24	; 21
OCR1A=2500;//arm down
     aaa:	84 ec       	ldi	r24, 0xC4	; 196
     aac:	99 e0       	ldi	r25, 0x09	; 9
     aae:	9b bd       	out	0x2b, r25	; 43
     ab0:	8a bd       	out	0x2a, r24	; 42
     ab2:	80 e1       	ldi	r24, 0x10	; 16
     ab4:	97 e2       	ldi	r25, 0x27	; 39
     ab6:	20 e9       	ldi	r18, 0x90	; 144
     ab8:	31 e0       	ldi	r19, 0x01	; 1
     aba:	f9 01       	movw	r30, r18
     abc:	31 97       	sbiw	r30, 0x01	; 1
     abe:	f1 f7       	brne	.-4      	; 0xabc <detectandpick+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ac2:	d9 f7       	brne	.-10     	; 0xaba <detectandpick+0xc0>
     ac4:	80 e1       	ldi	r24, 0x10	; 16
     ac6:	97 e2       	ldi	r25, 0x27	; 39
     ac8:	20 e9       	ldi	r18, 0x90	; 144
     aca:	31 e0       	ldi	r19, 0x01	; 1
     acc:	f9 01       	movw	r30, r18
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	f1 f7       	brne	.-4      	; 0xace <detectandpick+0xd4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ad2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad4:	d9 f7       	brne	.-10     	; 0xacc <detectandpick+0xd2>

_delay_ms(1000);
_delay_ms(1000);

OCR1B=4010;//gripper open
     ad6:	8a ea       	ldi	r24, 0xAA	; 170
     ad8:	9f e0       	ldi	r25, 0x0F	; 15
     ada:	99 bd       	out	0x29, r25	; 41
     adc:	88 bd       	out	0x28, r24	; 40
     ade:	80 e1       	ldi	r24, 0x10	; 16
     ae0:	97 e2       	ldi	r25, 0x27	; 39
     ae2:	20 e9       	ldi	r18, 0x90	; 144
     ae4:	31 e0       	ldi	r19, 0x01	; 1
     ae6:	f9 01       	movw	r30, r18
     ae8:	31 97       	sbiw	r30, 0x01	; 1
     aea:	f1 f7       	brne	.-4      	; 0xae8 <detectandpick+0xee>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aee:	d9 f7       	brne	.-10     	; 0xae6 <detectandpick+0xec>
     af0:	80 e1       	ldi	r24, 0x10	; 16
     af2:	97 e2       	ldi	r25, 0x27	; 39
     af4:	20 e9       	ldi	r18, 0x90	; 144
     af6:	31 e0       	ldi	r19, 0x01	; 1
     af8:	f9 01       	movw	r30, r18
     afa:	31 97       	sbiw	r30, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <detectandpick+0x100>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     afe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b00:	d9 f7       	brne	.-10     	; 0xaf8 <detectandpick+0xfe>
_delay_ms(1000);
_delay_ms(1000);

OCR1A=4500;//arm down
     b02:	84 e9       	ldi	r24, 0x94	; 148
     b04:	91 e1       	ldi	r25, 0x11	; 17
     b06:	9b bd       	out	0x2b, r25	; 43
     b08:	8a bd       	out	0x2a, r24	; 42
     b0a:	80 e1       	ldi	r24, 0x10	; 16
     b0c:	97 e2       	ldi	r25, 0x27	; 39
     b0e:	20 e9       	ldi	r18, 0x90	; 144
     b10:	31 e0       	ldi	r19, 0x01	; 1
     b12:	f9 01       	movw	r30, r18
     b14:	31 97       	sbiw	r30, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <detectandpick+0x11a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b18:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b1a:	d9 f7       	brne	.-10     	; 0xb12 <detectandpick+0x118>
     b1c:	80 e1       	ldi	r24, 0x10	; 16
     b1e:	97 e2       	ldi	r25, 0x27	; 39
     b20:	20 e9       	ldi	r18, 0x90	; 144
     b22:	31 e0       	ldi	r19, 0x01	; 1
     b24:	f9 01       	movw	r30, r18
     b26:	31 97       	sbiw	r30, 0x01	; 1
     b28:	f1 f7       	brne	.-4      	; 0xb26 <detectandpick+0x12c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b2a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b2c:	d9 f7       	brne	.-10     	; 0xb24 <detectandpick+0x12a>
_delay_ms(1000);
_delay_ms(1000);
pullback();
     b2e:	0e 94 0a 03 	call	0x614	; 0x614 <pullback>
}
     b32:	08 95       	ret

00000b34 <notify_danger>:
}

void notify_danger()
{
 unsigned char hb,lb;
 hb=(next_cell>>4)&0x0f;
     b34:	80 91 24 01 	lds	r24, 0x0124
 lb=(next_cell&0x0f);
     b38:	20 91 24 01 	lds	r18, 0x0124
 maze[hb][lb].temp=99;
     b3c:	2f 70       	andi	r18, 0x0F	; 15
     b3e:	82 95       	swap	r24
     b40:	8f 70       	andi	r24, 0x0F	; 15
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	fc 01       	movw	r30, r24
     b46:	ee 0f       	add	r30, r30
     b48:	ff 1f       	adc	r31, r31
     b4a:	e8 0f       	add	r30, r24
     b4c:	f9 1f       	adc	r31, r25
     b4e:	ee 0f       	add	r30, r30
     b50:	ff 1f       	adc	r31, r31
     b52:	e2 0f       	add	r30, r18
     b54:	f1 1d       	adc	r31, r1
     b56:	ee 0f       	add	r30, r30
     b58:	ff 1f       	adc	r31, r31
     b5a:	e4 52       	subi	r30, 0x24	; 36
     b5c:	ff 4f       	sbci	r31, 0xFF	; 255
     b5e:	83 e6       	ldi	r24, 0x63	; 99
     b60:	80 83       	st	Z, r24
 


}
     b62:	08 95       	ret

00000b64 <update_robot>:
void update_robot()
{
 unsigned char hb,lb;
 hb=(current_cell>>4)&0x0f;
     b64:	80 91 94 00 	lds	r24, 0x0094
 lb=(current_cell&0x0f);
     b68:	20 91 94 00 	lds	r18, 0x0094
 maze[hb][lb].visited=1;
     b6c:	2f 70       	andi	r18, 0x0F	; 15
     b6e:	82 95       	swap	r24
     b70:	8f 70       	andi	r24, 0x0F	; 15
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	fc 01       	movw	r30, r24
     b76:	ee 0f       	add	r30, r30
     b78:	ff 1f       	adc	r31, r31
     b7a:	e8 0f       	add	r30, r24
     b7c:	f9 1f       	adc	r31, r25
     b7e:	ee 0f       	add	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	e2 0f       	add	r30, r18
     b84:	f1 1d       	adc	r31, r1
     b86:	ee 0f       	add	r30, r30
     b88:	ff 1f       	adc	r31, r31
     b8a:	e4 52       	subi	r30, 0x24	; 36
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	81 83       	std	Z+1, r24	; 0x01
 
}
     b92:	08 95       	ret

00000b94 <finalramp>:
void finalramp()
{unsigned char r,side;
     b94:	df 92       	push	r13
     b96:	ef 92       	push	r14
     b98:	ff 92       	push	r15
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
 if(pos==4)
     b9e:	80 91 60 00 	lds	r24, 0x0060
     ba2:	84 30       	cpi	r24, 0x04	; 4
     ba4:	11 f4       	brne	.+4      	; 0xbaa <finalramp+0x16>
 {
 turnleft();
     ba6:	0e 94 1c 03 	call	0x638	; 0x638 <turnleft>
 }
 eye_read();
     baa:	0e 94 95 02 	call	0x52a	; 0x52a <eye_read>
 side=(Reye & 0b00010001);
     bae:	90 91 db 00 	lds	r25, 0x00DB
     bb2:	91 71       	andi	r25, 0x11	; 17
 r=(Reye & 0b00001110);
     bb4:	80 91 db 00 	lds	r24, 0x00DB
avoid_zun();
 
}
void drive_motor(unsigned char Lspeed,unsigned char Rspeed) 
{
 PORTC=forw;
     bb8:	00 e5       	ldi	r16, 0x50	; 80
pullback();
}

void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
     bba:	10 ef       	ldi	r17, 0xF0	; 240
 OCR0=r;
     bbc:	60 ea       	ldi	r22, 0xA0	; 160
     bbe:	d6 2e       	mov	r13, r22
pullback();
}

void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
     bc0:	5e e1       	ldi	r21, 0x1E	; 30
     bc2:	e5 2e       	mov	r14, r21
 }
 eye_read();
 side=(Reye & 0b00010001);
 r=(Reye & 0b00001110);
 while(side!=0x11)
 {eye_read();
     bc4:	44 e1       	ldi	r20, 0x14	; 20
     bc6:	f4 2e       	mov	r15, r20
     bc8:	43 c0       	rjmp	.+134    	; 0xc50 <finalramp+0xbc>
     bca:	0e 94 95 02 	call	0x52a	; 0x52a <eye_read>
  side=(Reye & 0b00010001);
     bce:	90 91 db 00 	lds	r25, 0x00DB
     bd2:	91 71       	andi	r25, 0x11	; 17
 r=(Reye & 0b00011111);
     bd4:	80 91 db 00 	lds	r24, 0x00DB
 switch(r) 
     bd8:	8f 71       	andi	r24, 0x1F	; 31
     bda:	86 30       	cpi	r24, 0x06	; 6
     bdc:	31 f1       	breq	.+76     	; 0xc2a <finalramp+0x96>
     bde:	87 30       	cpi	r24, 0x07	; 7
     be0:	60 f4       	brcc	.+24     	; 0xbfa <finalramp+0x66>
     be2:	82 30       	cpi	r24, 0x02	; 2
     be4:	d1 f0       	breq	.+52     	; 0xc1a <finalramp+0x86>
     be6:	83 30       	cpi	r24, 0x03	; 3
     be8:	18 f4       	brcc	.+6      	; 0xbf0 <finalramp+0x5c>
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	89 f5       	brne	.+98     	; 0xc50 <finalramp+0xbc>
     bee:	11 c0       	rjmp	.+34     	; 0xc12 <finalramp+0x7e>
     bf0:	83 30       	cpi	r24, 0x03	; 3
     bf2:	b9 f0       	breq	.+46     	; 0xc22 <finalramp+0x8e>
     bf4:	84 30       	cpi	r24, 0x04	; 4
     bf6:	61 f5       	brne	.+88     	; 0xc50 <finalramp+0xbc>
     bf8:	1c c0       	rjmp	.+56     	; 0xc32 <finalramp+0x9e>
     bfa:	8c 30       	cpi	r24, 0x0C	; 12
     bfc:	e9 f0       	breq	.+58     	; 0xc38 <finalramp+0xa4>
     bfe:	8d 30       	cpi	r24, 0x0D	; 13
     c00:	18 f4       	brcc	.+6      	; 0xc08 <finalramp+0x74>
     c02:	88 30       	cpi	r24, 0x08	; 8
     c04:	29 f5       	brne	.+74     	; 0xc50 <finalramp+0xbc>
     c06:	1e c0       	rjmp	.+60     	; 0xc44 <finalramp+0xb0>
     c08:	80 31       	cpi	r24, 0x10	; 16
     c0a:	f9 f0       	breq	.+62     	; 0xc4a <finalramp+0xb6>
     c0c:	88 31       	cpi	r24, 0x18	; 24
     c0e:	01 f5       	brne	.+64     	; 0xc50 <finalramp+0xbc>
     c10:	16 c0       	rjmp	.+44     	; 0xc3e <finalramp+0xaa>
avoid_zun();
 
}
void drive_motor(unsigned char Lspeed,unsigned char Rspeed) 
{
 PORTC=forw;
     c12:	05 bb       	out	0x15, r16	; 21
pullback();
}

void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
     c14:	13 bd       	out	0x23, r17	; 35
 OCR0=r;
     c16:	1c be       	out	0x3c, r1	; 60
     c18:	1b c0       	rjmp	.+54     	; 0xc50 <finalramp+0xbc>
avoid_zun();
 
}
void drive_motor(unsigned char Lspeed,unsigned char Rspeed) 
{
 PORTC=forw;
     c1a:	05 bb       	out	0x15, r16	; 21
pullback();
}

void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
     c1c:	13 bd       	out	0x23, r17	; 35
 OCR0=r;
     c1e:	fc be       	out	0x3c, r15	; 60
     c20:	17 c0       	rjmp	.+46     	; 0xc50 <finalramp+0xbc>
avoid_zun();
 
}
void drive_motor(unsigned char Lspeed,unsigned char Rspeed) 
{
 PORTC=forw;
     c22:	05 bb       	out	0x15, r16	; 21
pullback();
}

void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
     c24:	13 bd       	out	0x23, r17	; 35
 OCR0=r;
     c26:	ec be       	out	0x3c, r14	; 60
     c28:	13 c0       	rjmp	.+38     	; 0xc50 <finalramp+0xbc>
avoid_zun();
 
}
void drive_motor(unsigned char Lspeed,unsigned char Rspeed) 
{
 PORTC=forw;
     c2a:	05 bb       	out	0x15, r16	; 21
pullback();
}

void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
     c2c:	13 bd       	out	0x23, r17	; 35
 OCR0=r;
     c2e:	dc be       	out	0x3c, r13	; 60
     c30:	0f c0       	rjmp	.+30     	; 0xc50 <finalramp+0xbc>
avoid_zun();
 
}
void drive_motor(unsigned char Lspeed,unsigned char Rspeed) 
{
 PORTC=forw;
     c32:	05 bb       	out	0x15, r16	; 21
pullback();
}

void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
     c34:	13 bd       	out	0x23, r17	; 35
     c36:	0b c0       	rjmp	.+22     	; 0xc4e <finalramp+0xba>
avoid_zun();
 
}
void drive_motor(unsigned char Lspeed,unsigned char Rspeed) 
{
 PORTC=forw;
     c38:	05 bb       	out	0x15, r16	; 21
pullback();
}

void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
     c3a:	d3 bc       	out	0x23, r13	; 35
     c3c:	08 c0       	rjmp	.+16     	; 0xc4e <finalramp+0xba>
avoid_zun();
 
}
void drive_motor(unsigned char Lspeed,unsigned char Rspeed) 
{
 PORTC=forw;
     c3e:	05 bb       	out	0x15, r16	; 21
pullback();
}

void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
     c40:	e3 bc       	out	0x23, r14	; 35
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <finalramp+0xba>
avoid_zun();
 
}
void drive_motor(unsigned char Lspeed,unsigned char Rspeed) 
{
 PORTC=forw;
     c44:	05 bb       	out	0x15, r16	; 21
pullback();
}

void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
     c46:	f3 bc       	out	0x23, r15	; 35
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <finalramp+0xba>
avoid_zun();
 
}
void drive_motor(unsigned char Lspeed,unsigned char Rspeed) 
{
 PORTC=forw;
     c4a:	05 bb       	out	0x15, r16	; 21
pullback();
}

void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
     c4c:	13 bc       	out	0x23, r1	; 35
 OCR0=r;
     c4e:	1c bf       	out	0x3c, r17	; 60
 turnleft();
 }
 eye_read();
 side=(Reye & 0b00010001);
 r=(Reye & 0b00001110);
 while(side!=0x11)
     c50:	91 31       	cpi	r25, 0x11	; 17
     c52:	09 f0       	breq	.+2      	; 0xc56 <finalramp+0xc2>
     c54:	ba cf       	rjmp	.-140    	; 0xbca <finalramp+0x36>
  case 0x08:drive_motor(pwmmaxspeed,20);break;
  case 0x10:drive_motor(pwmmaxspeed,0);break;//xleftmost95
 }
 
 } 
}
     c56:	1f 91       	pop	r17
     c58:	0f 91       	pop	r16
     c5a:	ff 90       	pop	r15
     c5c:	ef 90       	pop	r14
     c5e:	df 90       	pop	r13
     c60:	08 95       	ret

00000c62 <decideafterupdate>:
void decideafterupdate()
{
 
 tracepath(current_cell);
     c62:	80 91 94 00 	lds	r24, 0x0094
     c66:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <tracepath>
next_cell=search_next_move(current_cell);
     c6a:	30 91 94 00 	lds	r19, 0x0094
     c6e:	90 91 91 00 	lds	r25, 0x0091
	
 }
 uchar search_next_move(uchar temp)
 {
  
  while(robotpath[zunction]!=temp)
     c72:	a9 2f       	mov	r26, r25
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	fd 01       	movw	r30, r26
     c78:	ef 59       	subi	r30, 0x9F	; 159
     c7a:	ff 4f       	sbci	r31, 0xFF	; 255
     c7c:	80 81       	ld	r24, Z
     c7e:	9f 5f       	subi	r25, 0xFF	; 255
     c80:	83 17       	cp	r24, r19
     c82:	b9 f7       	brne	.-18     	; 0xc72 <decideafterupdate+0x10>
     c84:	a0 93 91 00 	sts	0x0091, r26
  {
   zunction++;
  }
  return robotpath[zunction+1];
     c88:	ae 59       	subi	r26, 0x9E	; 158
     c8a:	bf 4f       	sbci	r27, 0xFF	; 255
     c8c:	8c 91       	ld	r24, X
     c8e:	80 93 24 01 	sts	0x0124, r24
}
     c92:	08 95       	ret

00000c94 <decide>:
void decide()
{
 current_cell=next_cell;
     c94:	80 91 24 01 	lds	r24, 0x0124
     c98:	80 93 94 00 	sts	0x0094, r24

}
void update_robot()
{
 unsigned char hb,lb;
 hb=(current_cell>>4)&0x0f;
     c9c:	80 91 94 00 	lds	r24, 0x0094
 lb=(current_cell&0x0f);
     ca0:	20 91 94 00 	lds	r18, 0x0094
 maze[hb][lb].visited=1;
     ca4:	2f 70       	andi	r18, 0x0F	; 15
     ca6:	82 95       	swap	r24
     ca8:	8f 70       	andi	r24, 0x0F	; 15
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	fc 01       	movw	r30, r24
     cae:	ee 0f       	add	r30, r30
     cb0:	ff 1f       	adc	r31, r31
     cb2:	e8 0f       	add	r30, r24
     cb4:	f9 1f       	adc	r31, r25
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	e2 0f       	add	r30, r18
     cbc:	f1 1d       	adc	r31, r1
     cbe:	ee 0f       	add	r30, r30
     cc0:	ff 1f       	adc	r31, r31
     cc2:	e4 52       	subi	r30, 0x24	; 36
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	81 83       	std	Z+1, r24	; 0x01
}
void decide()
{
 current_cell=next_cell;
 update_robot();
 avoid_zun();
     cca:	0e 94 11 04 	call	0x822	; 0x822 <avoid_zun>
 tracepath(current_cell);
     cce:	80 91 94 00 	lds	r24, 0x0094
     cd2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <tracepath>
 next_cell=search_next_move(current_cell);
     cd6:	30 91 94 00 	lds	r19, 0x0094
     cda:	90 91 91 00 	lds	r25, 0x0091
	
 }
 uchar search_next_move(uchar temp)
 {
  
  while(robotpath[zunction]!=temp)
     cde:	a9 2f       	mov	r26, r25
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	fd 01       	movw	r30, r26
     ce4:	ef 59       	subi	r30, 0x9F	; 159
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	80 81       	ld	r24, Z
     cea:	9f 5f       	subi	r25, 0xFF	; 255
     cec:	83 17       	cp	r24, r19
     cee:	b9 f7       	brne	.-18     	; 0xcde <decide+0x4a>
     cf0:	a0 93 91 00 	sts	0x0091, r26
  {
   zunction++;
  }
  return robotpath[zunction+1];
     cf4:	ae 59       	subi	r26, 0x9E	; 158
     cf6:	bf 4f       	sbci	r27, 0xFF	; 255
     cf8:	8c 91       	ld	r24, X
     cfa:	80 93 24 01 	sts	0x0124, r24
 if(next_cell==0xEE)
     cfe:	80 91 24 01 	lds	r24, 0x0124
     d02:	8e 3e       	cpi	r24, 0xEE	; 238
     d04:	29 f4       	brne	.+10     	; 0xd10 <decide+0x7c>
 {
  
  finalramp();
     d06:	0e 94 ca 05 	call	0xb94	; 0xb94 <finalramp>
  PORTC=stop;
     d0a:	15 ba       	out	0x15, r1	; 21
  while(bit_is_set(PIND,0));
     d0c:	80 99       	sbic	0x10, 0	; 16
     d0e:	fe cf       	rjmp	.-4      	; 0xd0c <decide+0x78>
     d10:	08 95       	ret

00000d12 <pos_calculate>:
 OCR0=r;
 
}
void pos_calculate()
{unsigned char r,side,t,tempo;
 side=(Reye & 0b00010001);
     d12:	90 91 db 00 	lds	r25, 0x00DB
 r=(Reye & 0b00011111);
     d16:	20 91 db 00 	lds	r18, 0x00DB
 TCNT2=0x00;
}

uint8_t readobstacle()
{uint8_t p;
 p=(PINA&0xc0);
     d1a:	89 b3       	in	r24, 0x19	; 25
     d1c:	80 7c       	andi	r24, 0xC0	; 192
 if(p==0x00)
     d1e:	29 f0       	breq	.+10     	; 0xd2a <pos_calculate+0x18>
 return 0;//both white
 else if(p==0x40)
     d20:	80 34       	cpi	r24, 0x40	; 64
     d22:	11 f0       	breq	.+4      	; 0xd28 <pos_calculate+0x16>
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	01 c0       	rjmp	.+2      	; 0xd2a <pos_calculate+0x18>
     d28:	82 e0       	ldi	r24, 0x02	; 2
void pos_calculate()
{unsigned char r,side,t,tempo;
 side=(Reye & 0b00010001);
 r=(Reye & 0b00011111);
 t=readobstacle();
 if(side!=0b00010001 && t==1) 
     d2a:	91 71       	andi	r25, 0x11	; 17
     d2c:	91 31       	cpi	r25, 0x11	; 17
     d2e:	09 f4       	brne	.+2      	; 0xd32 <pos_calculate+0x20>
     d30:	4c c0       	rjmp	.+152    	; 0xdca <pos_calculate+0xb8>
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	09 f0       	breq	.+2      	; 0xd38 <pos_calculate+0x26>
     d36:	4e c0       	rjmp	.+156    	; 0xdd4 <pos_calculate+0xc2>
 {
 switch(r)
     d38:	82 2f       	mov	r24, r18
     d3a:	8f 71       	andi	r24, 0x1F	; 31
     d3c:	86 30       	cpi	r24, 0x06	; 6
     d3e:	49 f1       	breq	.+82     	; 0xd92 <pos_calculate+0x80>
     d40:	87 30       	cpi	r24, 0x07	; 7
     d42:	70 f4       	brcc	.+28     	; 0xd60 <pos_calculate+0x4e>
     d44:	82 30       	cpi	r24, 0x02	; 2
     d46:	e9 f0       	breq	.+58     	; 0xd82 <pos_calculate+0x70>
     d48:	83 30       	cpi	r24, 0x03	; 3
     d4a:	20 f4       	brcc	.+8      	; 0xd54 <pos_calculate+0x42>
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	09 f0       	breq	.+2      	; 0xd52 <pos_calculate+0x40>
     d50:	9e c0       	rjmp	.+316    	; 0xe8e <pos_calculate+0x17c>
     d52:	14 c0       	rjmp	.+40     	; 0xd7c <pos_calculate+0x6a>
     d54:	83 30       	cpi	r24, 0x03	; 3
     d56:	d1 f0       	breq	.+52     	; 0xd8c <pos_calculate+0x7a>
     d58:	84 30       	cpi	r24, 0x04	; 4
     d5a:	09 f0       	breq	.+2      	; 0xd5e <pos_calculate+0x4c>
     d5c:	98 c0       	rjmp	.+304    	; 0xe8e <pos_calculate+0x17c>
     d5e:	1c c0       	rjmp	.+56     	; 0xd98 <pos_calculate+0x86>
     d60:	8c 30       	cpi	r24, 0x0C	; 12
     d62:	e9 f0       	breq	.+58     	; 0xd9e <pos_calculate+0x8c>
     d64:	8d 30       	cpi	r24, 0x0D	; 13
     d66:	20 f4       	brcc	.+8      	; 0xd70 <pos_calculate+0x5e>
     d68:	88 30       	cpi	r24, 0x08	; 8
     d6a:	09 f0       	breq	.+2      	; 0xd6e <pos_calculate+0x5c>
     d6c:	90 c0       	rjmp	.+288    	; 0xe8e <pos_calculate+0x17c>
     d6e:	21 c0       	rjmp	.+66     	; 0xdb2 <pos_calculate+0xa0>
     d70:	80 31       	cpi	r24, 0x10	; 16
     d72:	21 f1       	breq	.+72     	; 0xdbc <pos_calculate+0xaa>
     d74:	88 31       	cpi	r24, 0x18	; 24
     d76:	09 f0       	breq	.+2      	; 0xd7a <pos_calculate+0x68>
     d78:	8a c0       	rjmp	.+276    	; 0xe8e <pos_calculate+0x17c>
     d7a:	16 c0       	rjmp	.+44     	; 0xda8 <pos_calculate+0x96>
 {case 0x01:drive_motor(0,pwmmaxspeed);break;//xrightmost95
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <pos_calculate+0x74>
  case 0x02:drive_motor(20,pwmmaxspeed);break;//xrightmost95
     d82:	84 e1       	ldi	r24, 0x14	; 20
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	60 ef       	ldi	r22, 0xF0	; 240
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	1c c0       	rjmp	.+56     	; 0xdc4 <pos_calculate+0xb2>
  case 0x03:drive_motor(pwmmaxspeed-210,pwmmaxspeed);break;//xrightmost95
     d8c:	8e e1       	ldi	r24, 0x1E	; 30
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	fa cf       	rjmp	.-12     	; 0xd86 <pos_calculate+0x74>
  case 0x06:drive_motor(pwmmaxspeed-80,pwmmaxspeed);break;//slight right35
     d92:	80 ea       	ldi	r24, 0xA0	; 160
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	f7 cf       	rjmp	.-18     	; 0xd86 <pos_calculate+0x74>
  case 0x04:drive_motor(pwmmaxspeed,pwmmaxspeed);break;//center
     d98:	80 ef       	ldi	r24, 0xF0	; 240
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	f4 cf       	rjmp	.-24     	; 0xd86 <pos_calculate+0x74>
  case 0x0C:drive_motor(pwmmaxspeed,pwmmaxspeed-80);break;//sl left35
     d9e:	80 ef       	ldi	r24, 0xF0	; 240
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	60 ea       	ldi	r22, 0xA0	; 160
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	0e c0       	rjmp	.+28     	; 0xdc4 <pos_calculate+0xb2>
  case 0x18:drive_motor(pwmmaxspeed,pwmmaxspeed-210);break;//xleftmost95
     da8:	80 ef       	ldi	r24, 0xF0	; 240
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	6e e1       	ldi	r22, 0x1E	; 30
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	09 c0       	rjmp	.+18     	; 0xdc4 <pos_calculate+0xb2>
  case 0x08:drive_motor(pwmmaxspeed,20);break;
     db2:	80 ef       	ldi	r24, 0xF0	; 240
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	64 e1       	ldi	r22, 0x14	; 20
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	04 c0       	rjmp	.+8      	; 0xdc4 <pos_calculate+0xb2>
  case 0x10:drive_motor(pwmmaxspeed,0);break;//xleftmost95
     dbc:	80 ef       	ldi	r24, 0xF0	; 240
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	0e 94 0c 04 	call	0x818	; 0x818 <drive_motor>
     dc8:	08 95       	ret
 } 
}
else
{
//toggle();
if(t==1)
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	19 f4       	brne	.+6      	; 0xdd4 <pos_calculate+0xc2>
decide();
     dce:	0e 94 4a 06 	call	0xc94	; 0xc94 <decide>
     dd2:	08 95       	ret
else
{
PORTC=stop;
     dd4:	15 ba       	out	0x15, r1	; 21
     dd6:	80 e2       	ldi	r24, 0x20	; 32
     dd8:	9e e4       	ldi	r25, 0x4E	; 78
     dda:	20 e9       	ldi	r18, 0x90	; 144
     ddc:	31 e0       	ldi	r19, 0x01	; 1
     dde:	f9 01       	movw	r30, r18
     de0:	31 97       	sbiw	r30, 0x01	; 1
     de2:	f1 f7       	brne	.-4      	; 0xde0 <pos_calculate+0xce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de6:	d9 f7       	brne	.-10     	; 0xdde <pos_calculate+0xcc>
 TCNT2=0x00;
}

uint8_t readobstacle()
{uint8_t p;
 p=(PINA&0xc0);
     de8:	89 b3       	in	r24, 0x19	; 25
 if(p==0x00)
     dea:	80 7c       	andi	r24, 0xC0	; 192
     dec:	09 f0       	breq	.+2      	; 0xdf0 <pos_calculate+0xde>
     dee:	48 c0       	rjmp	.+144    	; 0xe80 <pos_calculate+0x16e>
}

void notify_danger()
{
 unsigned char hb,lb;
 hb=(next_cell>>4)&0x0f;
     df0:	80 91 24 01 	lds	r24, 0x0124
 lb=(next_cell&0x0f);
     df4:	20 91 24 01 	lds	r18, 0x0124
 maze[hb][lb].temp=99;
     df8:	2f 70       	andi	r18, 0x0F	; 15
     dfa:	82 95       	swap	r24
     dfc:	8f 70       	andi	r24, 0x0F	; 15
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	fc 01       	movw	r30, r24
     e02:	ee 0f       	add	r30, r30
     e04:	ff 1f       	adc	r31, r31
     e06:	e8 0f       	add	r30, r24
     e08:	f9 1f       	adc	r31, r25
     e0a:	ee 0f       	add	r30, r30
     e0c:	ff 1f       	adc	r31, r31
     e0e:	e2 0f       	add	r30, r18
     e10:	f1 1d       	adc	r31, r1
     e12:	ee 0f       	add	r30, r30
     e14:	ff 1f       	adc	r31, r31
     e16:	e4 52       	subi	r30, 0x24	; 36
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	83 e6       	ldi	r24, 0x63	; 99
     e1c:	80 83       	st	Z, r24
t=readobstacle();
if(t==0)
{ 
 
 notify_danger();
 tempo=search_next_move(next_cell);
     e1e:	30 91 24 01 	lds	r19, 0x0124
     e22:	90 91 91 00 	lds	r25, 0x0091
	
 }
 uchar search_next_move(uchar temp)
 {
  
  while(robotpath[zunction]!=temp)
     e26:	a9 2f       	mov	r26, r25
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	fd 01       	movw	r30, r26
     e2c:	ef 59       	subi	r30, 0x9F	; 159
     e2e:	ff 4f       	sbci	r31, 0xFF	; 255
     e30:	80 81       	ld	r24, Z
     e32:	9f 5f       	subi	r25, 0xFF	; 255
     e34:	83 17       	cp	r24, r19
     e36:	b9 f7       	brne	.-18     	; 0xe26 <pos_calculate+0x114>
     e38:	a0 93 91 00 	sts	0x0091, r26
  {
   zunction++;
  }
  return robotpath[zunction+1];
     e3c:	ae 59       	subi	r26, 0x9E	; 158
     e3e:	bf 4f       	sbci	r27, 0xFF	; 255
     e40:	6c 91       	ld	r22, X
 algorun(current_cell,tempo);
     e42:	80 91 94 00 	lds	r24, 0x0094
     e46:	0e 94 3b 02 	call	0x476	; 0x476 <algorun>
 modify_trace_route();
     e4a:	0e 94 5b 00 	call	0xb6	; 0xb6 <modify_trace_route>
     e4e:	15 c0       	rjmp	.+42     	; 0xe7a <pos_calculate+0x168>
	
 }
 uchar search_next_move(uchar temp)
 {
  
  while(robotpath[zunction]!=temp)
     e50:	a9 2f       	mov	r26, r25
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	fd 01       	movw	r30, r26
     e56:	ef 59       	subi	r30, 0x9F	; 159
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	80 81       	ld	r24, Z
     e5c:	9f 5f       	subi	r25, 0xFF	; 255
     e5e:	83 17       	cp	r24, r19
     e60:	b9 f7       	brne	.-18     	; 0xe50 <pos_calculate+0x13e>
     e62:	a0 93 91 00 	sts	0x0091, r26
  {
   zunction++;
  }
  return robotpath[zunction+1];
     e66:	ae 59       	subi	r26, 0x9E	; 158
     e68:	bf 4f       	sbci	r27, 0xFF	; 255
     e6a:	ec 91       	ld	r30, X
}
else
{
 detectandpick();
 tempo=search_next_move(next_cell);
 finalrun(current_cell,0x00);
     e6c:	80 91 94 00 	lds	r24, 0x0094
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	0e 94 60 02 	call	0x4c0	; 0x4c0 <finalrun>
 //algorun(current_cell,tempo);
// modify_trace_route();
 modify_trace_route_for_final_run();
     e76:	0e 94 a2 00 	call	0x144	; 0x144 <modify_trace_route_for_final_run>
 decideafterupdate();
     e7a:	0e 94 31 06 	call	0xc62	; 0xc62 <decideafterupdate>
     e7e:	08 95       	ret
turnright();
*/
}
else
{
 detectandpick();
     e80:	0e 94 fd 04 	call	0x9fa	; 0x9fa <detectandpick>
 tempo=search_next_move(next_cell);
     e84:	30 91 24 01 	lds	r19, 0x0124
     e88:	90 91 91 00 	lds	r25, 0x0091
     e8c:	e1 cf       	rjmp	.-62     	; 0xe50 <pos_calculate+0x13e>
     e8e:	08 95       	ret

00000e90 <calibrate_sensors>:
  while(bit_is_set(PIND,0));
 } 
 
} 
void calibrate_sensors()
{
     e90:	4f 92       	push	r4
     e92:	5f 92       	push	r5
     e94:	6f 92       	push	r6
     e96:	7f 92       	push	r7
     e98:	8f 92       	push	r8
     e9a:	9f 92       	push	r9
     e9c:	af 92       	push	r10
     e9e:	bf 92       	push	r11
     ea0:	cf 92       	push	r12
     ea2:	df 92       	push	r13
     ea4:	ef 92       	push	r14
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	2a 97       	sbiw	r28, 0x0a	; 10
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
        uint8_t adc_value;              /* ADC value */
        uint8_t i, j;                   /* loop counter */ 
        uint8_t thresh_high[5] = { 0,0,0,0,0 };
     ec0:	fe 01       	movw	r30, r28
     ec2:	31 96       	adiw	r30, 0x01	; 1
     ec4:	85 e0       	ldi	r24, 0x05	; 5
     ec6:	df 01       	movw	r26, r30
     ec8:	1d 92       	st	X+, r1
     eca:	8a 95       	dec	r24
     ecc:	e9 f7       	brne	.-6      	; 0xec8 <calibrate_sensors+0x38>
        uint8_t thresh_low[5] = { 255,255,255,255,255 };
     ece:	de 01       	movw	r26, r28
     ed0:	16 96       	adiw	r26, 0x06	; 6
     ed2:	e6 e8       	ldi	r30, 0x86	; 134
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	85 e0       	ldi	r24, 0x05	; 5
     ed8:	01 90       	ld	r0, Z+
     eda:	0d 92       	st	X+, r0
     edc:	81 50       	subi	r24, 0x01	; 1
     ede:	e1 f7       	brne	.-8      	; 0xed8 <calibrate_sensors+0x48>
         PORTC=xleft; steer(pwmmaxspeed-40,pwmmaxspeed-40);           
     ee0:	80 e9       	ldi	r24, 0x90	; 144
     ee2:	85 bb       	out	0x15, r24	; 21
pullback();
}

void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
     ee4:	88 ec       	ldi	r24, 0xC8	; 200
     ee6:	83 bd       	out	0x23, r24	; 35
 OCR0=r;
     ee8:	8c bf       	out	0x3c, r24	; 60
     eea:	dd 24       	eor	r13, r13
        uint8_t adc_value;              /* ADC value */
        uint8_t i, j;                   /* loop counter */ 
        uint8_t thresh_high[5] = { 0,0,0,0,0 };
        uint8_t thresh_low[5] = { 255,255,255,255,255 };
         PORTC=xleft; steer(pwmmaxspeed-40,pwmmaxspeed-40);           
        for (i=0; i<100; i++) 
     eec:	76 e0       	ldi	r23, 0x06	; 6
     eee:	a7 2e       	mov	r10, r23
     ef0:	b1 2c       	mov	r11, r1
     ef2:	ac 0e       	add	r10, r28
     ef4:	bd 1e       	adc	r11, r29
     ef6:	2e 01       	movw	r4, r28
     ef8:	08 94       	sec
     efa:	41 1c       	adc	r4, r1
     efc:	51 1c       	adc	r5, r1
        { 
                for (j=0; j<5; j++)
     efe:	6b e0       	ldi	r22, 0x0B	; 11
     f00:	66 2e       	mov	r6, r22
     f02:	71 2c       	mov	r7, r1
     f04:	6c 0e       	add	r6, r28
     f06:	7d 1e       	adc	r7, r29
     f08:	50 e9       	ldi	r21, 0x90	; 144
     f0a:	85 2e       	mov	r8, r21
     f0c:	51 e0       	ldi	r21, 0x01	; 1
     f0e:	95 2e       	mov	r9, r21
     f10:	22 c0       	rjmp	.+68     	; 0xf56 <calibrate_sensors+0xc6>
                {
                        adc_value = adc(j);
     f12:	80 2f       	mov	r24, r16
     f14:	8a 19       	sub	r24, r10
     f16:	0e 94 85 02 	call	0x50a	; 0x50a <adc>
     f1a:	98 2f       	mov	r25, r24
                        if (adc_value < thresh_low[j]) thresh_low[j] = adc_value;
     f1c:	f8 01       	movw	r30, r16
     f1e:	80 81       	ld	r24, Z
     f20:	98 17       	cp	r25, r24
     f22:	08 f4       	brcc	.+2      	; 0xf26 <calibrate_sensors+0x96>
     f24:	90 83       	st	Z, r25
                        if (adc_value > thresh_high[j]) thresh_high[j] = adc_value;
     f26:	d7 01       	movw	r26, r14
     f28:	8c 91       	ld	r24, X
     f2a:	89 17       	cp	r24, r25
     f2c:	08 f4       	brcc	.+2      	; 0xf30 <calibrate_sensors+0xa0>
     f2e:	9c 93       	st	X, r25
     f30:	0f 5f       	subi	r16, 0xFF	; 255
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
     f34:	08 94       	sec
     f36:	e1 1c       	adc	r14, r1
     f38:	f1 1c       	adc	r15, r1
        uint8_t thresh_high[5] = { 0,0,0,0,0 };
        uint8_t thresh_low[5] = { 255,255,255,255,255 };
         PORTC=xleft; steer(pwmmaxspeed-40,pwmmaxspeed-40);           
        for (i=0; i<100; i++) 
        { 
                for (j=0; j<5; j++)
     f3a:	06 15       	cp	r16, r6
     f3c:	17 05       	cpc	r17, r7
     f3e:	49 f7       	brne	.-46     	; 0xf12 <calibrate_sensors+0x82>
     f40:	84 ef       	ldi	r24, 0xF4	; 244
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	f4 01       	movw	r30, r8
     f46:	31 97       	sbiw	r30, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <calibrate_sensors+0xb6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f4a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4c:	d9 f7       	brne	.-10     	; 0xf44 <calibrate_sensors+0xb4>
        uint8_t adc_value;              /* ADC value */
        uint8_t i, j;                   /* loop counter */ 
        uint8_t thresh_high[5] = { 0,0,0,0,0 };
        uint8_t thresh_low[5] = { 255,255,255,255,255 };
         PORTC=xleft; steer(pwmmaxspeed-40,pwmmaxspeed-40);           
        for (i=0; i<100; i++) 
     f4e:	d3 94       	inc	r13
     f50:	b4 e6       	ldi	r27, 0x64	; 100
     f52:	db 16       	cp	r13, r27
     f54:	19 f0       	breq	.+6      	; 0xf5c <calibrate_sensors+0xcc>
     f56:	72 01       	movw	r14, r4
     f58:	85 01       	movw	r16, r10
     f5a:	db cf       	rjmp	.-74     	; 0xf12 <calibrate_sensors+0x82>
     f5c:	ee 24       	eor	r14, r14
     f5e:	ff 24       	eor	r15, r15
                _delay_ms(50); 
        }
        
        for (i=0; i<5; i++)
        {
                midpoint[i] = (thresh_low[i] + (thresh_high[i] - thresh_low[i]) / 2);
     f60:	46 e0       	ldi	r20, 0x06	; 6
     f62:	a4 2e       	mov	r10, r20
     f64:	b1 2c       	mov	r11, r1
     f66:	ac 0e       	add	r10, r28
     f68:	bd 1e       	adc	r11, r29
     f6a:	6e 01       	movw	r12, r28
     f6c:	08 94       	sec
     f6e:	c1 1c       	adc	r12, r1
     f70:	d1 1c       	adc	r13, r1
     f72:	f5 01       	movw	r30, r10
     f74:	ee 0d       	add	r30, r14
     f76:	ff 1d       	adc	r31, r15
     f78:	20 81       	ld	r18, Z
     f7a:	87 01       	movw	r16, r14
     f7c:	04 57       	subi	r16, 0x74	; 116
     f7e:	1f 4f       	sbci	r17, 0xFF	; 255
     f80:	f6 01       	movw	r30, r12
     f82:	ee 0d       	add	r30, r14
     f84:	ff 1d       	adc	r31, r15
     f86:	80 81       	ld	r24, Z
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	82 1b       	sub	r24, r18
     f8c:	91 09       	sbc	r25, r1
     f8e:	62 e0       	ldi	r22, 0x02	; 2
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	0e 94 44 08 	call	0x1088	; 0x1088 <__divmodhi4>
     f96:	26 0f       	add	r18, r22
     f98:	f8 01       	movw	r30, r16
     f9a:	20 83       	st	Z, r18
     f9c:	08 94       	sec
     f9e:	e1 1c       	adc	r14, r1
     fa0:	f1 1c       	adc	r15, r1
                        if (adc_value > thresh_high[j]) thresh_high[j] = adc_value;
                }
                _delay_ms(50); 
        }
        
        for (i=0; i<5; i++)
     fa2:	f5 e0       	ldi	r31, 0x05	; 5
     fa4:	ef 16       	cp	r14, r31
     fa6:	f1 04       	cpc	r15, r1
     fa8:	21 f7       	brne	.-56     	; 0xf72 <calibrate_sensors+0xe2>
        {
                midpoint[i] = (thresh_low[i] + (thresh_high[i] - thresh_low[i]) / 2);
        }
       PORTC=stop;
     faa:	15 ba       	out	0x15, r1	; 21
}
     fac:	2a 96       	adiw	r28, 0x0a	; 10
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	ff 90       	pop	r15
     fc2:	ef 90       	pop	r14
     fc4:	df 90       	pop	r13
     fc6:	cf 90       	pop	r12
     fc8:	bf 90       	pop	r11
     fca:	af 90       	pop	r10
     fcc:	9f 90       	pop	r9
     fce:	8f 90       	pop	r8
     fd0:	7f 90       	pop	r7
     fd2:	6f 90       	pop	r6
     fd4:	5f 90       	pop	r5
     fd6:	4f 90       	pop	r4
     fd8:	08 95       	ret

00000fda <motor_test>:

void motor_test()
{
 PORTC=forw;
     fda:	80 e5       	ldi	r24, 0x50	; 80
     fdc:	85 bb       	out	0x15, r24	; 21
pullback();
}

void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
     fde:	80 e4       	ldi	r24, 0x40	; 64
     fe0:	83 bd       	out	0x23, r24	; 35
 OCR0=r;
     fe2:	8c bf       	out	0x3c, r24	; 60
     fe4:	80 e5       	ldi	r24, 0x50	; 80
     fe6:	93 ec       	ldi	r25, 0xC3	; 195
     fe8:	20 e9       	ldi	r18, 0x90	; 144
     fea:	31 e0       	ldi	r19, 0x01	; 1
     fec:	f9 01       	movw	r30, r18
     fee:	31 97       	sbiw	r30, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <motor_test+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff4:	d9 f7       	brne	.-10     	; 0xfec <motor_test+0x12>
pullback();
}

void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
     ff6:	80 e8       	ldi	r24, 0x80	; 128
     ff8:	83 bd       	out	0x23, r24	; 35
 OCR0=r;
     ffa:	8c bf       	out	0x3c, r24	; 60
     ffc:	80 e5       	ldi	r24, 0x50	; 80
     ffe:	93 ec       	ldi	r25, 0xC3	; 195
    1000:	20 e9       	ldi	r18, 0x90	; 144
    1002:	31 e0       	ldi	r19, 0x01	; 1
    1004:	f9 01       	movw	r30, r18
    1006:	31 97       	sbiw	r30, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <motor_test+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    100c:	d9 f7       	brne	.-10     	; 0x1004 <motor_test+0x2a>
pullback();
}

void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
    100e:	80 ec       	ldi	r24, 0xC0	; 192
    1010:	83 bd       	out	0x23, r24	; 35
 OCR0=r;
    1012:	8c bf       	out	0x3c, r24	; 60
    1014:	80 e5       	ldi	r24, 0x50	; 80
    1016:	93 ec       	ldi	r25, 0xC3	; 195
    1018:	20 e9       	ldi	r18, 0x90	; 144
    101a:	31 e0       	ldi	r19, 0x01	; 1
    101c:	f9 01       	movw	r30, r18
    101e:	31 97       	sbiw	r30, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <motor_test+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1022:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1024:	d9 f7       	brne	.-10     	; 0x101c <motor_test+0x42>
pullback();
}

void steer(unsigned char l,unsigned char r)
{
 OCR2=l;
    1026:	8f ef       	ldi	r24, 0xFF	; 255
    1028:	83 bd       	out	0x23, r24	; 35
 OCR0=r;
    102a:	8c bf       	out	0x3c, r24	; 60
    102c:	80 e5       	ldi	r24, 0x50	; 80
    102e:	93 ec       	ldi	r25, 0xC3	; 195
    1030:	20 e9       	ldi	r18, 0x90	; 144
    1032:	31 e0       	ldi	r19, 0x01	; 1
    1034:	f9 01       	movw	r30, r18
    1036:	31 97       	sbiw	r30, 0x01	; 1
    1038:	f1 f7       	brne	.-4      	; 0x1036 <motor_test+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    103a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103c:	d9 f7       	brne	.-10     	; 0x1034 <motor_test+0x5a>
 _delay_ms(5000);
 steer(192,192);//right
 _delay_ms(5000);
 steer(255,255);//left
  _delay_ms(5000);
 PORTC=0x00;
    103e:	15 ba       	out	0x15, r1	; 21
}  
    1040:	08 95       	ret

00001042 <main>:

int main(void)
{

 DDRD=0xF0;
    1042:	80 ef       	ldi	r24, 0xF0	; 240
    1044:	81 bb       	out	0x11, r24	; 17
 PORTD=0x0F;
    1046:	8f e0       	ldi	r24, 0x0F	; 15
    1048:	82 bb       	out	0x12, r24	; 18
 DDRA=0x00;
    104a:	1a ba       	out	0x1a, r1	; 26
 PORTA=0xC0;
    104c:	80 ec       	ldi	r24, 0xC0	; 192
    104e:	8b bb       	out	0x1b, r24	; 27

 motor_pwm_init();
    1050:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <motor_pwm_init>
 sbi(PORTB,7);
    1054:	c7 9a       	sbi	0x18, 7	; 24
    1056:	80 e2       	ldi	r24, 0x20	; 32
    1058:	9e e4       	ldi	r25, 0x4E	; 78
    105a:	20 e9       	ldi	r18, 0x90	; 144
    105c:	31 e0       	ldi	r19, 0x01	; 1
    105e:	f9 01       	movw	r30, r18
    1060:	31 97       	sbiw	r30, 0x01	; 1
    1062:	f1 f7       	brne	.-4      	; 0x1060 <main+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1064:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1066:	d9 f7       	brne	.-10     	; 0x105e <main+0x1c>
 _delay_ms(2000);
//motor_test();
 cbi(PORTB,7);
    1068:	c7 98       	cbi	0x18, 7	; 24
 calibrate_sensors();
    106a:	0e 94 48 07 	call	0xe90	; 0xe90 <calibrate_sensors>
 while(bit_is_set(PIND,0));
    106e:	80 99       	sbic	0x10, 0	; 16
    1070:	fe cf       	rjmp	.-4      	; 0x106e <main+0x2c>
 current_cell=0x00;
    1072:	10 92 94 00 	sts	0x0094, r1
 next_cell=0x00;
    1076:	10 92 24 01 	sts	0x0124, r1
 fflush();
    107a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <fflush>
 //_delay_ms(2000);
// first_zun();
 while(1)
 {

 eye_read();
    107e:	0e 94 95 02 	call	0x52a	; 0x52a <eye_read>

 pos_run();
    1082:	0e 94 b5 04 	call	0x96a	; 0x96a <pos_run>
    1086:	fb cf       	rjmp	.-10     	; 0x107e <main+0x3c>

00001088 <__divmodhi4>:
    1088:	97 fb       	bst	r25, 7
    108a:	09 2e       	mov	r0, r25
    108c:	07 26       	eor	r0, r23
    108e:	0a d0       	rcall	.+20     	; 0x10a4 <__divmodhi4_neg1>
    1090:	77 fd       	sbrc	r23, 7
    1092:	04 d0       	rcall	.+8      	; 0x109c <__divmodhi4_neg2>
    1094:	0c d0       	rcall	.+24     	; 0x10ae <__udivmodhi4>
    1096:	06 d0       	rcall	.+12     	; 0x10a4 <__divmodhi4_neg1>
    1098:	00 20       	and	r0, r0
    109a:	1a f4       	brpl	.+6      	; 0x10a2 <__divmodhi4_exit>

0000109c <__divmodhi4_neg2>:
    109c:	70 95       	com	r23
    109e:	61 95       	neg	r22
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255

000010a2 <__divmodhi4_exit>:
    10a2:	08 95       	ret

000010a4 <__divmodhi4_neg1>:
    10a4:	f6 f7       	brtc	.-4      	; 0x10a2 <__divmodhi4_exit>
    10a6:	90 95       	com	r25
    10a8:	81 95       	neg	r24
    10aa:	9f 4f       	sbci	r25, 0xFF	; 255
    10ac:	08 95       	ret

000010ae <__udivmodhi4>:
    10ae:	aa 1b       	sub	r26, r26
    10b0:	bb 1b       	sub	r27, r27
    10b2:	51 e1       	ldi	r21, 0x11	; 17
    10b4:	07 c0       	rjmp	.+14     	; 0x10c4 <__udivmodhi4_ep>

000010b6 <__udivmodhi4_loop>:
    10b6:	aa 1f       	adc	r26, r26
    10b8:	bb 1f       	adc	r27, r27
    10ba:	a6 17       	cp	r26, r22
    10bc:	b7 07       	cpc	r27, r23
    10be:	10 f0       	brcs	.+4      	; 0x10c4 <__udivmodhi4_ep>
    10c0:	a6 1b       	sub	r26, r22
    10c2:	b7 0b       	sbc	r27, r23

000010c4 <__udivmodhi4_ep>:
    10c4:	88 1f       	adc	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	5a 95       	dec	r21
    10ca:	a9 f7       	brne	.-22     	; 0x10b6 <__udivmodhi4_loop>
    10cc:	80 95       	com	r24
    10ce:	90 95       	com	r25
    10d0:	bc 01       	movw	r22, r24
    10d2:	cd 01       	movw	r24, r26
    10d4:	08 95       	ret

000010d6 <_exit>:
    10d6:	f8 94       	cli

000010d8 <__stop_program>:
    10d8:	ff cf       	rjmp	.-2      	; 0x10d8 <__stop_program>
