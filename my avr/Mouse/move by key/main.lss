
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000a28  00000abc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800084  00800084  00000ae0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000ef  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000099c  00000000  00000000  00000bef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000279  00000000  00000000  0000158b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000060e  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001e14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000019a  00000000  00000000  00001ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fc  00000000  00000000  0000208e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 39       	cpi	r26, 0x9E	; 158
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c8 01 	call	0x390	; 0x390 <main>
  8a:	0c 94 12 05 	jmp	0xa24	; 0xa24 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_reset>:
#define LCD_RW      0x02
#define LCD_EN      0x04

void lcd_reset(void)
{
        lcd_port = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	88 bb       	out	0x18, r24	; 24
  96:	88 ec       	ldi	r24, 0xC8	; 200
  98:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	20 e9       	ldi	r18, 0x90	; 144
  9c:	31 e0       	ldi	r19, 0x01	; 1
  9e:	f9 01       	movw	r30, r18
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_reset+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a6:	d9 f7       	brne	.-10     	; 0x9e <lcd_reset+0xc>
        _delay_ms(20);
        lcd_port = 0x30+LCD_EN;
  a8:	94 e3       	ldi	r25, 0x34	; 52
  aa:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  ac:	80 e3       	ldi	r24, 0x30	; 48
  ae:	88 bb       	out	0x18, r24	; 24
  b0:	e0 e4       	ldi	r30, 0x40	; 64
  b2:	fc e9       	ldi	r31, 0x9C	; 156
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_reset+0x22>
        _delay_ms(10);
        lcd_port = 0x30+LCD_EN;
  b8:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	20 ea       	ldi	r18, 0xA0	; 160
  be:	3f e0       	ldi	r19, 0x0F	; 15
  c0:	f9 01       	movw	r30, r18
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_reset+0x30>
        _delay_ms(1);
        lcd_port = 0x30+LCD_EN;
  c6:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  c8:	88 bb       	out	0x18, r24	; 24
  ca:	c9 01       	movw	r24, r18
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_reset+0x3a>
        _delay_ms(1);
        lcd_port = 0x20+LCD_EN;
  d0:	84 e2       	ldi	r24, 0x24	; 36
  d2:	88 bb       	out	0x18, r24	; 24
        lcd_port = 0x20;
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	88 bb       	out	0x18, r24	; 24
  d8:	c9 01       	movw	r24, r18
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd_reset+0x48>
        _delay_ms(1);
}
  de:	08 95       	ret

000000e0 <lcd_cmd>:
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
  e0:	38 2f       	mov	r19, r24
  e2:	30 7f       	andi	r19, 0xF0	; 240
  e4:	23 2f       	mov	r18, r19
  e6:	24 60       	ori	r18, 0x04	; 4
  e8:	28 bb       	out	0x18, r18	; 24
        lcd_port = (cmd & 0xF0);
  ea:	38 bb       	out	0x18, r19	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	24 e0       	ldi	r18, 0x04	; 4
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	2a 95       	dec	r18
  f6:	e1 f7       	brne	.-8      	; 0xf0 <lcd_cmd+0x10>
  f8:	28 2f       	mov	r18, r24
  fa:	24 60       	ori	r18, 0x04	; 4
  fc:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((cmd << 4) & 0xF0);
  fe:	88 bb       	out	0x18, r24	; 24
 100:	80 e4       	ldi	r24, 0x40	; 64
 102:	9f e1       	ldi	r25, 0x1F	; 31
 104:	fc 01       	movw	r30, r24
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_cmd+0x26>

      

        _delay_ms(2);
        _delay_ms(2);
}
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_cmd+0x2a>
 10e:	08 95       	ret

00000110 <lcd_init>:

void lcd_init (void)
{       DDRB=0xFF;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	87 bb       	out	0x17, r24	; 23
        PORTB=0x00; 
 114:	18 ba       	out	0x18, r1	; 24
        lcd_reset();         // Call LCD reset
 116:	0e 94 49 00 	call	0x92	; 0x92 <lcd_reset>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 11a:	84 e2       	ldi	r24, 0x24	; 36
 11c:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 11e:	80 e2       	ldi	r24, 0x20	; 32
 120:	88 bb       	out	0x18, r24	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 122:	54 e8       	ldi	r21, 0x84	; 132
 124:	58 bb       	out	0x18, r21	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 126:	40 e8       	ldi	r20, 0x80	; 128
 128:	48 bb       	out	0x18, r20	; 24
 12a:	20 e4       	ldi	r18, 0x40	; 64
 12c:	3f e1       	ldi	r19, 0x1F	; 31
 12e:	c9 01       	movw	r24, r18
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lcd_init+0x20>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 134:	c9 01       	movw	r24, r18
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <lcd_init+0x26>
 13a:	94 e0       	ldi	r25, 0x04	; 4
 13c:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 13e:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 140:	84 ec       	ldi	r24, 0xC4	; 196
 142:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 144:	80 ec       	ldi	r24, 0xC0	; 192
 146:	88 bb       	out	0x18, r24	; 24
 148:	f9 01       	movw	r30, r18
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_init+0x3a>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 14e:	f9 01       	movw	r30, r18
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x40>
 154:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 156:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 158:	84 e6       	ldi	r24, 0x64	; 100
 15a:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 15c:	80 e6       	ldi	r24, 0x60	; 96
 15e:	88 bb       	out	0x18, r24	; 24
 160:	f9 01       	movw	r30, r18
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_init+0x52>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 166:	f9 01       	movw	r30, r18
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_init+0x58>
 16c:	58 bb       	out	0x18, r21	; 24
        lcd_port = (cmd & 0xF0);
 16e:	48 bb       	out	0x18, r20	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 170:	98 bb       	out	0x18, r25	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 172:	18 ba       	out	0x18, r1	; 24
 174:	c9 01       	movw	r24, r18
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_init+0x66>
        lcd_reset();         // Call LCD reset
        lcd_cmd(0x28);       // 4-bit mode - 2 line - 5x7 font.
        lcd_cmd(0x0C);       // Display on cursor - off .
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 }
 17a:	c9 01       	movw	r24, r18
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <lcd_init+0x6c>
 180:	08 95       	ret

00000182 <lcd_data>:


void lcd_data (unsigned char dat)
{
        lcd_port = ((dat & 0xF0)|LCD_EN|LCD_RS);
 182:	98 2f       	mov	r25, r24
 184:	90 7f       	andi	r25, 0xF0	; 240
 186:	29 2f       	mov	r18, r25
 188:	25 60       	ori	r18, 0x05	; 5
 18a:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((dat & 0xF0)|LCD_RS);
 18c:	91 60       	ori	r25, 0x01	; 1
 18e:	98 bb       	out	0x18, r25	; 24
		
		lcd_port = (((dat << 4) & 0xF0)|LCD_EN|LCD_RS);
 190:	82 95       	swap	r24
 192:	80 7f       	andi	r24, 0xF0	; 240
 194:	98 2f       	mov	r25, r24
 196:	95 60       	ori	r25, 0x05	; 5
 198:	98 bb       	out	0x18, r25	; 24
        lcd_port = (((dat << 4) & 0xF0)|LCD_RS);
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	88 bb       	out	0x18, r24	; 24
 19e:	80 e4       	ldi	r24, 0x40	; 64
 1a0:	9f e1       	ldi	r25, 0x1F	; 31
 1a2:	fc 01       	movw	r30, r24
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_data+0x22>
       
      

       _delay_ms(2);
       _delay_ms(2);
}
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_data+0x26>
 1ac:	08 95       	ret

000001ae <lcd_puts>:
void lcd_puts(char *aaa)
{
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <lcd_puts+0xc>
unsigned int i;
for(i=0;aaa[i]!=0;i++)
lcd_data(aaa[i]);
 1b6:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
       _delay_ms(2);
}
void lcd_puts(char *aaa)
{
unsigned int i;
for(i=0;aaa[i]!=0;i++)
 1ba:	89 91       	ld	r24, Y+
 1bc:	88 23       	and	r24, r24
 1be:	d9 f7       	brne	.-10     	; 0x1b6 <lcd_puts+0x8>
lcd_data(aaa[i]);

}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <itoa1>:
void itoa1(uint16_t num)
{
 1c6:	cf 92       	push	r12
 1c8:	df 92       	push	r13
 1ca:	ef 92       	push	r14
 1cc:	ff 92       	push	r15
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	7c 01       	movw	r14, r24

 unsigned char a,b,c,d;

 a=num%10;
 num=num/10;
 1d4:	6a e0       	ldi	r22, 0x0A	; 10
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	0e 94 c7 04 	call	0x98e	; 0x98e <__udivmodhi4>
 1dc:	d6 2e       	mov	r13, r22
 1de:	c7 2e       	mov	r12, r23
 b=num%10;
 num=num/10;
 1e0:	86 2f       	mov	r24, r22
 1e2:	97 2f       	mov	r25, r23
 1e4:	6a e0       	ldi	r22, 0x0A	; 10
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	0e 94 c7 04 	call	0x98e	; 0x98e <__udivmodhi4>
 1ec:	16 2f       	mov	r17, r22
 1ee:	07 2f       	mov	r16, r23
 c=num%10;
 num=num/10;
 d=num%10;
 lcd_data(0x30+d); 
 1f0:	86 2f       	mov	r24, r22
 1f2:	97 2f       	mov	r25, r23
 1f4:	6a e0       	ldi	r22, 0x0A	; 10
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	0e 94 c7 04 	call	0x98e	; 0x98e <__udivmodhi4>
 1fc:	cb 01       	movw	r24, r22
 1fe:	6a e0       	ldi	r22, 0x0A	; 10
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	0e 94 c7 04 	call	0x98e	; 0x98e <__udivmodhi4>
 206:	80 5d       	subi	r24, 0xD0	; 208
 208:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
 lcd_data(0x30+c); 
 20c:	81 2f       	mov	r24, r17
 20e:	90 2f       	mov	r25, r16
 210:	6a e0       	ldi	r22, 0x0A	; 10
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	0e 94 c7 04 	call	0x98e	; 0x98e <__udivmodhi4>
 218:	80 5d       	subi	r24, 0xD0	; 208
 21a:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
 lcd_data(0x30+b); 
 21e:	8d 2d       	mov	r24, r13
 220:	9c 2d       	mov	r25, r12
 222:	6a e0       	ldi	r22, 0x0A	; 10
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	0e 94 c7 04 	call	0x98e	; 0x98e <__udivmodhi4>
 22a:	80 5d       	subi	r24, 0xD0	; 208
 22c:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
 lcd_data(0x30+a); 
 230:	c7 01       	movw	r24, r14
 232:	6a e0       	ldi	r22, 0x0A	; 10
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	0e 94 c7 04 	call	0x98e	; 0x98e <__udivmodhi4>
 23a:	80 5d       	subi	r24, 0xD0	; 208
 23c:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
 
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	08 95       	ret

0000024e <ioinit>:
    return(0);
}
void ioinit (void)
{
    //1 = output, 0 = input
    DDRD = 0b11111110; //PORTD (RX on PD0)
 24e:	8e ef       	ldi	r24, 0xFE	; 254
 250:	81 bb       	out	0x11, r24	; 17

    //USART Baud rate: 9600
    UBRRH = MYUBRR >> 8;
 252:	10 bc       	out	0x20, r1	; 32
    UBRRL = MYUBRR;
 254:	87 e6       	ldi	r24, 0x67	; 103
 256:	89 b9       	out	0x09, r24	; 9
    
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
 258:	86 e8       	ldi	r24, 0x86	; 134
 25a:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN); 
 25c:	88 e1       	ldi	r24, 0x18	; 24
 25e:	8a b9       	out	0x0a, r24	; 10
	
	stdout = &mystdout; //Required for printf init
 260:	85 e7       	ldi	r24, 0x75	; 117
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	90 93 9b 00 	sts	0x009B, r25
 268:	80 93 9a 00 	sts	0x009A, r24
}
 26c:	08 95       	ret

0000026e <uart_putchar>:

static int uart_putchar(char c, FILE *stream)
{
 26e:	1f 93       	push	r17
 270:	18 2f       	mov	r17, r24
    if (c == '\n') uart_putchar('\r', stream);
 272:	8a 30       	cpi	r24, 0x0A	; 10
 274:	19 f4       	brne	.+6      	; 0x27c <uart_putchar+0xe>
 276:	8d e0       	ldi	r24, 0x0D	; 13
 278:	0e 94 37 01 	call	0x26e	; 0x26e <uart_putchar>
  
    loop_until_bit_is_set(UCSRA, UDRE);
 27c:	5d 9b       	sbis	0x0b, 5	; 11
 27e:	fe cf       	rjmp	.-4      	; 0x27c <uart_putchar+0xe>
    UDR = c;
 280:	1c b9       	out	0x0c, r17	; 12
    
    return 0;
}
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	1f 91       	pop	r17
 288:	08 95       	ret

0000028a <uart_getchar>:

uint8_t uart_getchar(void)
{
    while( !(UCSRA & (1<<RXC)) );
 28a:	5f 9b       	sbis	0x0b, 7	; 11
 28c:	fe cf       	rjmp	.-4      	; 0x28a <uart_getchar>
    return(UDR);
 28e:	8c b1       	in	r24, 0x0c	; 12
}
 290:	08 95       	ret

00000292 <read_x>:

void read_x(void)
{
	DDRA = 0b00001001; // Output on PA3(5V) and PA0(GND), Input on PC4(ADC)
 292:	89 e0       	ldi	r24, 0x09	; 9
 294:	8a bb       	out	0x1a, r24	; 26
	sbi(PORTA, 3); //pull PC4 to 5V
 296:	db 9a       	sbi	0x1b, 3	; 27
	cbi(PORTA, 0); //pull PC1 to GND
 298:	d8 98       	cbi	0x1b, 0	; 27
 29a:	80 ea       	ldi	r24, 0xA0	; 160
 29c:	9f e0       	ldi	r25, 0x0F	; 15
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <read_x+0xc>
	
	_delay_ms(1);
	
	ADMUX = (1 << MUX0);//ADC1
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN)|(1 << ADSC)|(1<<ADPS2)|(1<<ADPS1);
 2a6:	86 ec       	ldi	r24, 0xC6	; 198
 2a8:	86 b9       	out	0x06, r24	; 6
	
	while(ADCSRA & (1 << ADSC));
 2aa:	36 99       	sbic	0x06, 6	; 6
 2ac:	fe cf       	rjmp	.-4      	; 0x2aa <read_x+0x18>
	l = ADCL;
 2ae:	84 b1       	in	r24, 0x04	; 4
 2b0:	80 93 88 00 	sts	0x0088, r24
	h = ADCH & 0x03;
 2b4:	95 b1       	in	r25, 0x05	; 5
	h = h << 8;
	h = h + l;
 2b6:	80 93 90 00 	sts	0x0090, r24
}
 2ba:	08 95       	ret

000002bc <read_y>:

void read_y(void)
{
	DDRA = 0b00000110; // Output on PA2(5V) and PA1(GND), Input on PC4(ADC)
 2bc:	86 e0       	ldi	r24, 0x06	; 6
 2be:	8a bb       	out	0x1a, r24	; 26
	sbi(PORTA, 2); //pull PA2 to 5V
 2c0:	da 9a       	sbi	0x1b, 2	; 27
	cbi(PORTA, 1); //pull PA1 to GND
 2c2:	d9 98       	cbi	0x1b, 1	; 27
 2c4:	80 ea       	ldi	r24, 0xA0	; 160
 2c6:	9f e0       	ldi	r25, 0x0F	; 15
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <read_y+0xc>
	
	_delay_ms(1);
	
	ADMUX = 0x00;
 2cc:	17 b8       	out	0x07, r1	; 7
	ADCSRA = (1 << ADEN)|(1 << ADSC)|(1<<ADPS2)|(1<<ADPS1);
 2ce:	86 ec       	ldi	r24, 0xC6	; 198
 2d0:	86 b9       	out	0x06, r24	; 6
	
	while(ADCSRA & (1 << ADSC));
 2d2:	36 99       	sbic	0x06, 6	; 6
 2d4:	fe cf       	rjmp	.-4      	; 0x2d2 <read_y+0x16>
	l1 = ADCL;
 2d6:	84 b1       	in	r24, 0x04	; 4
 2d8:	80 93 8f 00 	sts	0x008F, r24
	h1 = ADCH & 0x03;
 2dc:	95 b1       	in	r25, 0x05	; 5
	h1 = h1 << 8;
	h1 = h1 + l1;
 2de:	80 93 87 00 	sts	0x0087, r24
}
 2e2:	08 95       	ret

000002e4 <calc>:
void calc(void)
{  char dtoo[5];
		read_x();
 2e4:	0e 94 49 01 	call	0x292	; 0x292 <read_x>
		read_y();
 2e8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <read_y>
		x_buffer[i] = h;
 2ec:	80 91 84 00 	lds	r24, 0x0084
 2f0:	90 91 85 00 	lds	r25, 0x0085
 2f4:	fc 01       	movw	r30, r24
 2f6:	ef 56       	subi	r30, 0x6F	; 111
 2f8:	ff 4f       	sbci	r31, 0xFF	; 255
 2fa:	20 91 90 00 	lds	r18, 0x0090
 2fe:	20 83       	st	Z, r18
		y_buffer[i] = h1;
 300:	fc 01       	movw	r30, r24
 302:	e7 57       	subi	r30, 0x77	; 119
 304:	ff 4f       	sbci	r31, 0xFF	; 255
 306:	20 91 87 00 	lds	r18, 0x0087
 30a:	20 83       	st	Z, r18
	  ++i;
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	90 93 85 00 	sts	0x0085, r25
 312:	80 93 84 00 	sts	0x0084, r24
	 if(i>BUFFER+1)
 316:	07 97       	sbiw	r24, 0x07	; 7
 318:	94 f0       	brlt	.+36     	; 0x33e <calc+0x5a>
	 {
	  i=0;
 31a:	10 92 85 00 	sts	0x0085, r1
 31e:	10 92 84 00 	sts	0x0084, r1
	  XDIFF= (x_buffer[0]-x_buffer[BUFFER-1]); 
 322:	80 91 91 00 	lds	r24, 0x0091
 326:	90 91 95 00 	lds	r25, 0x0095
 32a:	89 1b       	sub	r24, r25
 32c:	80 93 97 00 	sts	0x0097, r24
	  YDIFF= (y_buffer[0]-y_buffer[BUFFER-1]);
 330:	80 91 89 00 	lds	r24, 0x0089
 334:	90 91 8d 00 	lds	r25, 0x008D
 338:	89 1b       	sub	r24, r25
 33a:	80 93 86 00 	sts	0x0086, r24
	 }
	 
	 
	 printf("%d",XDIFF);
 33e:	00 d0       	rcall	.+0      	; 0x340 <calc+0x5c>
 340:	00 d0       	rcall	.+0      	; 0x342 <calc+0x5e>
 342:	ed b7       	in	r30, 0x3d	; 61
 344:	fe b7       	in	r31, 0x3e	; 62
 346:	31 96       	adiw	r30, 0x01	; 1
 348:	80 e6       	ldi	r24, 0x60	; 96
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	ad b7       	in	r26, 0x3d	; 61
 34e:	be b7       	in	r27, 0x3e	; 62
 350:	12 96       	adiw	r26, 0x02	; 2
 352:	9c 93       	st	X, r25
 354:	8e 93       	st	-X, r24
 356:	11 97       	sbiw	r26, 0x01	; 1
 358:	80 91 97 00 	lds	r24, 0x0097
 35c:	82 83       	std	Z+2, r24	; 0x02
 35e:	13 82       	std	Z+3, r1	; 0x03
 360:	0e 94 35 02 	call	0x46a	; 0x46a <printf>
	 printf(",%d",YDIFF);
 364:	ed b7       	in	r30, 0x3d	; 61
 366:	fe b7       	in	r31, 0x3e	; 62
 368:	31 96       	adiw	r30, 0x01	; 1
 36a:	83 e6       	ldi	r24, 0x63	; 99
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	ad b7       	in	r26, 0x3d	; 61
 370:	be b7       	in	r27, 0x3e	; 62
 372:	12 96       	adiw	r26, 0x02	; 2
 374:	9c 93       	st	X, r25
 376:	8e 93       	st	-X, r24
 378:	11 97       	sbiw	r26, 0x01	; 1
 37a:	80 91 86 00 	lds	r24, 0x0086
 37e:	82 83       	std	Z+2, r24	; 0x02
 380:	13 82       	std	Z+3, r1	; 0x03
 382:	0e 94 35 02 	call	0x46a	; 0x46a <printf>
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
	/* sprintf(dtoo,"%5d",XDIFF);
	 lcd_puts(dtoo);
	 sprintf(dtoo,"%5d",YDIFF);
	 lcd_puts(dtoo);
	*/
    }
 38e:	08 95       	ret

00000390 <main>:


#include "lcd.h"

int main (void)
{
 390:	cf 92       	push	r12
 392:	df 92       	push	r13
 394:	ef 92       	push	r14
 396:	ff 92       	push	r15
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
int N=0;
int L=1;
int R=2;
DDRD=0x00; 
 3a0:	11 ba       	out	0x11, r1	; 17
PORTD=0xFF;  
 3a2:	8f ef       	ldi	r24, 0xFF	; 255
 3a4:	82 bb       	out	0x12, r24	; 18
   
  lcd_init();//initialise the lcd
 3a6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_init>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 3aa:	84 e0       	ldi	r24, 0x04	; 4
 3ac:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 3ae:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 3b0:	84 e1       	ldi	r24, 0x14	; 20
 3b2:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 3b4:	80 e1       	ldi	r24, 0x10	; 16
 3b6:	88 bb       	out	0x18, r24	; 24
 3b8:	80 e4       	ldi	r24, 0x40	; 64
 3ba:	9f e1       	ldi	r25, 0x1F	; 31
 3bc:	fc 01       	movw	r30, r24
 3be:	31 97       	sbiw	r30, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <main+0x2e>
    return(0);
}
void ioinit (void)
{
    //1 = output, 0 = input
    DDRD = 0b11111110; //PORTD (RX on PD0)
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <main+0x32>
 3c6:	8e ef       	ldi	r24, 0xFE	; 254
 3c8:	81 bb       	out	0x11, r24	; 17

    //USART Baud rate: 9600
    UBRRH = MYUBRR >> 8;
 3ca:	10 bc       	out	0x20, r1	; 32
    UBRRL = MYUBRR;
 3cc:	87 e6       	ldi	r24, 0x67	; 103
 3ce:	89 b9       	out	0x09, r24	; 9
    
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
 3d0:	86 e8       	ldi	r24, 0x86	; 134
 3d2:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN); 
 3d4:	88 e1       	ldi	r24, 0x18	; 24
 3d6:	8a b9       	out	0x0a, r24	; 10
	
	stdout = &mystdout; //Required for printf init
 3d8:	85 e7       	ldi	r24, 0x75	; 117
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	90 93 9b 00 	sts	0x009B, r25
 3e0:	80 93 9a 00 	sts	0x009A, r24
PORTD=0xFF;  
   
  lcd_init();//initialise the lcd
  lcd_cmd(0x01);//clear screen
  ioinit();
  lcd_puts("Touchpad");
 3e4:	87 e6       	ldi	r24, 0x67	; 103
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_puts>
while(1)
{	
	if(!(PIND&0x04)) // PIN D0 is used as input
     {
      
      printf("%d",L);
 3ec:	00 e6       	ldi	r16, 0x60	; 96
 3ee:	10 e0       	ldi	r17, 0x00	; 0
 3f0:	41 e0       	ldi	r20, 0x01	; 1
 3f2:	c4 2e       	mov	r12, r20
 3f4:	d1 2c       	mov	r13, r1
	  printf(",%d\n",N);
 3f6:	c0 e7       	ldi	r28, 0x70	; 112
 3f8:	d0 e0       	ldi	r29, 0x00	; 0
	
	else if(!(PIND&0x08)) // PIN D1 is used as input
     {
      
      printf("%d",N);
	  printf(",%d\n",R);
 3fa:	32 e0       	ldi	r19, 0x02	; 2
 3fc:	e3 2e       	mov	r14, r19
 3fe:	f1 2c       	mov	r15, r1
  ioinit();
  lcd_puts("Touchpad");
    
while(1)
{	
	if(!(PIND&0x04)) // PIN D0 is used as input
 400:	82 99       	sbic	0x10, 2	; 16
 402:	09 c0       	rjmp	.+18     	; 0x416 <main+0x86>
     {
      
      printf("%d",L);
 404:	00 d0       	rcall	.+0      	; 0x406 <main+0x76>
 406:	00 d0       	rcall	.+0      	; 0x408 <main+0x78>
 408:	ed b7       	in	r30, 0x3d	; 61
 40a:	fe b7       	in	r31, 0x3e	; 62
 40c:	12 83       	std	Z+2, r17	; 0x02
 40e:	01 83       	std	Z+1, r16	; 0x01
 410:	d4 82       	std	Z+4, r13	; 0x04
 412:	c3 82       	std	Z+3, r12	; 0x03
 414:	1b c0       	rjmp	.+54     	; 0x44c <main+0xbc>
	  printf(",%d\n",N);
     }
	
	else if(!(PIND&0x08)) // PIN D1 is used as input
 416:	83 99       	sbic	0x10, 3	; 16
 418:	11 c0       	rjmp	.+34     	; 0x43c <main+0xac>
     {
      
      printf("%d",N);
 41a:	00 d0       	rcall	.+0      	; 0x41c <main+0x8c>
 41c:	00 d0       	rcall	.+0      	; 0x41e <main+0x8e>
 41e:	ed b7       	in	r30, 0x3d	; 61
 420:	fe b7       	in	r31, 0x3e	; 62
 422:	12 83       	std	Z+2, r17	; 0x02
 424:	01 83       	std	Z+1, r16	; 0x01
 426:	14 82       	std	Z+4, r1	; 0x04
 428:	13 82       	std	Z+3, r1	; 0x03
 42a:	0e 94 35 02 	call	0x46a	; 0x46a <printf>
	  printf(",%d\n",R);
 42e:	ed b7       	in	r30, 0x3d	; 61
 430:	fe b7       	in	r31, 0x3e	; 62
 432:	d2 83       	std	Z+2, r29	; 0x02
 434:	c1 83       	std	Z+1, r28	; 0x01
 436:	f4 82       	std	Z+4, r15	; 0x04
 438:	e3 82       	std	Z+3, r14	; 0x03
 43a:	10 c0       	rjmp	.+32     	; 0x45c <main+0xcc>
	  
     }
	else
     {
	 printf("%d",N);
 43c:	00 d0       	rcall	.+0      	; 0x43e <main+0xae>
 43e:	00 d0       	rcall	.+0      	; 0x440 <main+0xb0>
 440:	ed b7       	in	r30, 0x3d	; 61
 442:	fe b7       	in	r31, 0x3e	; 62
 444:	12 83       	std	Z+2, r17	; 0x02
 446:	01 83       	std	Z+1, r16	; 0x01
 448:	14 82       	std	Z+4, r1	; 0x04
 44a:	13 82       	std	Z+3, r1	; 0x03
 44c:	0e 94 35 02 	call	0x46a	; 0x46a <printf>
	 printf(",%d\n",N);
 450:	ed b7       	in	r30, 0x3d	; 61
 452:	fe b7       	in	r31, 0x3e	; 62
 454:	d2 83       	std	Z+2, r29	; 0x02
 456:	c1 83       	std	Z+1, r28	; 0x01
 458:	14 82       	std	Z+4, r1	; 0x04
 45a:	13 82       	std	Z+3, r1	; 0x03
 45c:	0e 94 35 02 	call	0x46a	; 0x46a <printf>
 460:	0f 90       	pop	r0
 462:	0f 90       	pop	r0
 464:	0f 90       	pop	r0
 466:	0f 90       	pop	r0
 468:	cb cf       	rjmp	.-106    	; 0x400 <main+0x70>

0000046a <printf>:
 46a:	a0 e0       	ldi	r26, 0x00	; 0
 46c:	b0 e0       	ldi	r27, 0x00	; 0
 46e:	eb e3       	ldi	r30, 0x3B	; 59
 470:	f2 e0       	ldi	r31, 0x02	; 2
 472:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__prologue_saves__+0x20>
 476:	fe 01       	movw	r30, r28
 478:	35 96       	adiw	r30, 0x05	; 5
 47a:	61 91       	ld	r22, Z+
 47c:	71 91       	ld	r23, Z+
 47e:	80 91 9a 00 	lds	r24, 0x009A
 482:	90 91 9b 00 	lds	r25, 0x009B
 486:	af 01       	movw	r20, r30
 488:	0e 94 4a 02 	call	0x494	; 0x494 <vfprintf>
 48c:	20 96       	adiw	r28, 0x00	; 0
 48e:	e2 e0       	ldi	r30, 0x02	; 2
 490:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__epilogue_restores__+0x20>

00000494 <vfprintf>:
 494:	ab e0       	ldi	r26, 0x0B	; 11
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	e0 e5       	ldi	r30, 0x50	; 80
 49a:	f2 e0       	ldi	r31, 0x02	; 2
 49c:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__prologue_saves__>
 4a0:	3c 01       	movw	r6, r24
 4a2:	2b 01       	movw	r4, r22
 4a4:	5a 01       	movw	r10, r20
 4a6:	fc 01       	movw	r30, r24
 4a8:	17 82       	std	Z+7, r1	; 0x07
 4aa:	16 82       	std	Z+6, r1	; 0x06
 4ac:	83 81       	ldd	r24, Z+3	; 0x03
 4ae:	81 fd       	sbrc	r24, 1
 4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <vfprintf+0x24>
 4b2:	6f ef       	ldi	r22, 0xFF	; 255
 4b4:	7f ef       	ldi	r23, 0xFF	; 255
 4b6:	c6 c1       	rjmp	.+908    	; 0x844 <vfprintf+0x3b0>
 4b8:	9a e0       	ldi	r25, 0x0A	; 10
 4ba:	89 2e       	mov	r8, r25
 4bc:	1e 01       	movw	r2, r28
 4be:	08 94       	sec
 4c0:	21 1c       	adc	r2, r1
 4c2:	31 1c       	adc	r3, r1
 4c4:	f3 01       	movw	r30, r6
 4c6:	23 81       	ldd	r18, Z+3	; 0x03
 4c8:	f2 01       	movw	r30, r4
 4ca:	23 fd       	sbrc	r18, 3
 4cc:	85 91       	lpm	r24, Z+
 4ce:	23 ff       	sbrs	r18, 3
 4d0:	81 91       	ld	r24, Z+
 4d2:	2f 01       	movw	r4, r30
 4d4:	88 23       	and	r24, r24
 4d6:	09 f4       	brne	.+2      	; 0x4da <vfprintf+0x46>
 4d8:	b2 c1       	rjmp	.+868    	; 0x83e <vfprintf+0x3aa>
 4da:	85 32       	cpi	r24, 0x25	; 37
 4dc:	39 f4       	brne	.+14     	; 0x4ec <vfprintf+0x58>
 4de:	23 fd       	sbrc	r18, 3
 4e0:	85 91       	lpm	r24, Z+
 4e2:	23 ff       	sbrs	r18, 3
 4e4:	81 91       	ld	r24, Z+
 4e6:	2f 01       	movw	r4, r30
 4e8:	85 32       	cpi	r24, 0x25	; 37
 4ea:	29 f4       	brne	.+10     	; 0x4f6 <vfprintf+0x62>
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	b3 01       	movw	r22, r6
 4f0:	0e 94 3d 04 	call	0x87a	; 0x87a <fputc>
 4f4:	e7 cf       	rjmp	.-50     	; 0x4c4 <vfprintf+0x30>
 4f6:	98 2f       	mov	r25, r24
 4f8:	ff 24       	eor	r15, r15
 4fa:	ee 24       	eor	r14, r14
 4fc:	99 24       	eor	r9, r9
 4fe:	ff e1       	ldi	r31, 0x1F	; 31
 500:	ff 15       	cp	r31, r15
 502:	d0 f0       	brcs	.+52     	; 0x538 <vfprintf+0xa4>
 504:	9b 32       	cpi	r25, 0x2B	; 43
 506:	69 f0       	breq	.+26     	; 0x522 <vfprintf+0x8e>
 508:	9c 32       	cpi	r25, 0x2C	; 44
 50a:	28 f4       	brcc	.+10     	; 0x516 <vfprintf+0x82>
 50c:	90 32       	cpi	r25, 0x20	; 32
 50e:	59 f0       	breq	.+22     	; 0x526 <vfprintf+0x92>
 510:	93 32       	cpi	r25, 0x23	; 35
 512:	91 f4       	brne	.+36     	; 0x538 <vfprintf+0xa4>
 514:	0e c0       	rjmp	.+28     	; 0x532 <vfprintf+0x9e>
 516:	9d 32       	cpi	r25, 0x2D	; 45
 518:	49 f0       	breq	.+18     	; 0x52c <vfprintf+0x98>
 51a:	90 33       	cpi	r25, 0x30	; 48
 51c:	69 f4       	brne	.+26     	; 0x538 <vfprintf+0xa4>
 51e:	41 e0       	ldi	r20, 0x01	; 1
 520:	24 c0       	rjmp	.+72     	; 0x56a <vfprintf+0xd6>
 522:	52 e0       	ldi	r21, 0x02	; 2
 524:	f5 2a       	or	r15, r21
 526:	84 e0       	ldi	r24, 0x04	; 4
 528:	f8 2a       	or	r15, r24
 52a:	28 c0       	rjmp	.+80     	; 0x57c <vfprintf+0xe8>
 52c:	98 e0       	ldi	r25, 0x08	; 8
 52e:	f9 2a       	or	r15, r25
 530:	25 c0       	rjmp	.+74     	; 0x57c <vfprintf+0xe8>
 532:	e0 e1       	ldi	r30, 0x10	; 16
 534:	fe 2a       	or	r15, r30
 536:	22 c0       	rjmp	.+68     	; 0x57c <vfprintf+0xe8>
 538:	f7 fc       	sbrc	r15, 7
 53a:	29 c0       	rjmp	.+82     	; 0x58e <vfprintf+0xfa>
 53c:	89 2f       	mov	r24, r25
 53e:	80 53       	subi	r24, 0x30	; 48
 540:	8a 30       	cpi	r24, 0x0A	; 10
 542:	70 f4       	brcc	.+28     	; 0x560 <vfprintf+0xcc>
 544:	f6 fe       	sbrs	r15, 6
 546:	05 c0       	rjmp	.+10     	; 0x552 <vfprintf+0xbe>
 548:	98 9c       	mul	r9, r8
 54a:	90 2c       	mov	r9, r0
 54c:	11 24       	eor	r1, r1
 54e:	98 0e       	add	r9, r24
 550:	15 c0       	rjmp	.+42     	; 0x57c <vfprintf+0xe8>
 552:	e8 9c       	mul	r14, r8
 554:	e0 2c       	mov	r14, r0
 556:	11 24       	eor	r1, r1
 558:	e8 0e       	add	r14, r24
 55a:	f0 e2       	ldi	r31, 0x20	; 32
 55c:	ff 2a       	or	r15, r31
 55e:	0e c0       	rjmp	.+28     	; 0x57c <vfprintf+0xe8>
 560:	9e 32       	cpi	r25, 0x2E	; 46
 562:	29 f4       	brne	.+10     	; 0x56e <vfprintf+0xda>
 564:	f6 fc       	sbrc	r15, 6
 566:	6b c1       	rjmp	.+726    	; 0x83e <vfprintf+0x3aa>
 568:	40 e4       	ldi	r20, 0x40	; 64
 56a:	f4 2a       	or	r15, r20
 56c:	07 c0       	rjmp	.+14     	; 0x57c <vfprintf+0xe8>
 56e:	9c 36       	cpi	r25, 0x6C	; 108
 570:	19 f4       	brne	.+6      	; 0x578 <vfprintf+0xe4>
 572:	50 e8       	ldi	r21, 0x80	; 128
 574:	f5 2a       	or	r15, r21
 576:	02 c0       	rjmp	.+4      	; 0x57c <vfprintf+0xe8>
 578:	98 36       	cpi	r25, 0x68	; 104
 57a:	49 f4       	brne	.+18     	; 0x58e <vfprintf+0xfa>
 57c:	f2 01       	movw	r30, r4
 57e:	23 fd       	sbrc	r18, 3
 580:	95 91       	lpm	r25, Z+
 582:	23 ff       	sbrs	r18, 3
 584:	91 91       	ld	r25, Z+
 586:	2f 01       	movw	r4, r30
 588:	99 23       	and	r25, r25
 58a:	09 f0       	breq	.+2      	; 0x58e <vfprintf+0xfa>
 58c:	b8 cf       	rjmp	.-144    	; 0x4fe <vfprintf+0x6a>
 58e:	89 2f       	mov	r24, r25
 590:	85 54       	subi	r24, 0x45	; 69
 592:	83 30       	cpi	r24, 0x03	; 3
 594:	18 f0       	brcs	.+6      	; 0x59c <vfprintf+0x108>
 596:	80 52       	subi	r24, 0x20	; 32
 598:	83 30       	cpi	r24, 0x03	; 3
 59a:	38 f4       	brcc	.+14     	; 0x5aa <vfprintf+0x116>
 59c:	44 e0       	ldi	r20, 0x04	; 4
 59e:	50 e0       	ldi	r21, 0x00	; 0
 5a0:	a4 0e       	add	r10, r20
 5a2:	b5 1e       	adc	r11, r21
 5a4:	5f e3       	ldi	r21, 0x3F	; 63
 5a6:	59 83       	std	Y+1, r21	; 0x01
 5a8:	0f c0       	rjmp	.+30     	; 0x5c8 <vfprintf+0x134>
 5aa:	93 36       	cpi	r25, 0x63	; 99
 5ac:	31 f0       	breq	.+12     	; 0x5ba <vfprintf+0x126>
 5ae:	93 37       	cpi	r25, 0x73	; 115
 5b0:	79 f0       	breq	.+30     	; 0x5d0 <vfprintf+0x13c>
 5b2:	93 35       	cpi	r25, 0x53	; 83
 5b4:	09 f0       	breq	.+2      	; 0x5b8 <vfprintf+0x124>
 5b6:	56 c0       	rjmp	.+172    	; 0x664 <vfprintf+0x1d0>
 5b8:	20 c0       	rjmp	.+64     	; 0x5fa <vfprintf+0x166>
 5ba:	f5 01       	movw	r30, r10
 5bc:	80 81       	ld	r24, Z
 5be:	89 83       	std	Y+1, r24	; 0x01
 5c0:	42 e0       	ldi	r20, 0x02	; 2
 5c2:	50 e0       	ldi	r21, 0x00	; 0
 5c4:	a4 0e       	add	r10, r20
 5c6:	b5 1e       	adc	r11, r21
 5c8:	61 01       	movw	r12, r2
 5ca:	01 e0       	ldi	r16, 0x01	; 1
 5cc:	10 e0       	ldi	r17, 0x00	; 0
 5ce:	12 c0       	rjmp	.+36     	; 0x5f4 <vfprintf+0x160>
 5d0:	f5 01       	movw	r30, r10
 5d2:	c0 80       	ld	r12, Z
 5d4:	d1 80       	ldd	r13, Z+1	; 0x01
 5d6:	f6 fc       	sbrc	r15, 6
 5d8:	03 c0       	rjmp	.+6      	; 0x5e0 <vfprintf+0x14c>
 5da:	6f ef       	ldi	r22, 0xFF	; 255
 5dc:	7f ef       	ldi	r23, 0xFF	; 255
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <vfprintf+0x150>
 5e0:	69 2d       	mov	r22, r9
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	42 e0       	ldi	r20, 0x02	; 2
 5e6:	50 e0       	ldi	r21, 0x00	; 0
 5e8:	a4 0e       	add	r10, r20
 5ea:	b5 1e       	adc	r11, r21
 5ec:	c6 01       	movw	r24, r12
 5ee:	0e 94 32 04 	call	0x864	; 0x864 <strnlen>
 5f2:	8c 01       	movw	r16, r24
 5f4:	5f e7       	ldi	r21, 0x7F	; 127
 5f6:	f5 22       	and	r15, r21
 5f8:	14 c0       	rjmp	.+40     	; 0x622 <vfprintf+0x18e>
 5fa:	f5 01       	movw	r30, r10
 5fc:	c0 80       	ld	r12, Z
 5fe:	d1 80       	ldd	r13, Z+1	; 0x01
 600:	f6 fc       	sbrc	r15, 6
 602:	03 c0       	rjmp	.+6      	; 0x60a <vfprintf+0x176>
 604:	6f ef       	ldi	r22, 0xFF	; 255
 606:	7f ef       	ldi	r23, 0xFF	; 255
 608:	02 c0       	rjmp	.+4      	; 0x60e <vfprintf+0x17a>
 60a:	69 2d       	mov	r22, r9
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	42 e0       	ldi	r20, 0x02	; 2
 610:	50 e0       	ldi	r21, 0x00	; 0
 612:	a4 0e       	add	r10, r20
 614:	b5 1e       	adc	r11, r21
 616:	c6 01       	movw	r24, r12
 618:	0e 94 27 04 	call	0x84e	; 0x84e <strnlen_P>
 61c:	8c 01       	movw	r16, r24
 61e:	50 e8       	ldi	r21, 0x80	; 128
 620:	f5 2a       	or	r15, r21
 622:	f3 fe       	sbrs	r15, 3
 624:	07 c0       	rjmp	.+14     	; 0x634 <vfprintf+0x1a0>
 626:	1a c0       	rjmp	.+52     	; 0x65c <vfprintf+0x1c8>
 628:	80 e2       	ldi	r24, 0x20	; 32
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	b3 01       	movw	r22, r6
 62e:	0e 94 3d 04 	call	0x87a	; 0x87a <fputc>
 632:	ea 94       	dec	r14
 634:	8e 2d       	mov	r24, r14
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	08 17       	cp	r16, r24
 63a:	19 07       	cpc	r17, r25
 63c:	a8 f3       	brcs	.-22     	; 0x628 <vfprintf+0x194>
 63e:	0e c0       	rjmp	.+28     	; 0x65c <vfprintf+0x1c8>
 640:	f6 01       	movw	r30, r12
 642:	f7 fc       	sbrc	r15, 7
 644:	85 91       	lpm	r24, Z+
 646:	f7 fe       	sbrs	r15, 7
 648:	81 91       	ld	r24, Z+
 64a:	6f 01       	movw	r12, r30
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	b3 01       	movw	r22, r6
 650:	0e 94 3d 04 	call	0x87a	; 0x87a <fputc>
 654:	e1 10       	cpse	r14, r1
 656:	ea 94       	dec	r14
 658:	01 50       	subi	r16, 0x01	; 1
 65a:	10 40       	sbci	r17, 0x00	; 0
 65c:	01 15       	cp	r16, r1
 65e:	11 05       	cpc	r17, r1
 660:	79 f7       	brne	.-34     	; 0x640 <vfprintf+0x1ac>
 662:	ea c0       	rjmp	.+468    	; 0x838 <vfprintf+0x3a4>
 664:	94 36       	cpi	r25, 0x64	; 100
 666:	11 f0       	breq	.+4      	; 0x66c <vfprintf+0x1d8>
 668:	99 36       	cpi	r25, 0x69	; 105
 66a:	69 f5       	brne	.+90     	; 0x6c6 <vfprintf+0x232>
 66c:	f7 fe       	sbrs	r15, 7
 66e:	08 c0       	rjmp	.+16     	; 0x680 <vfprintf+0x1ec>
 670:	f5 01       	movw	r30, r10
 672:	20 81       	ld	r18, Z
 674:	31 81       	ldd	r19, Z+1	; 0x01
 676:	42 81       	ldd	r20, Z+2	; 0x02
 678:	53 81       	ldd	r21, Z+3	; 0x03
 67a:	84 e0       	ldi	r24, 0x04	; 4
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0a c0       	rjmp	.+20     	; 0x694 <vfprintf+0x200>
 680:	f5 01       	movw	r30, r10
 682:	80 81       	ld	r24, Z
 684:	91 81       	ldd	r25, Z+1	; 0x01
 686:	9c 01       	movw	r18, r24
 688:	44 27       	eor	r20, r20
 68a:	37 fd       	sbrc	r19, 7
 68c:	40 95       	com	r20
 68e:	54 2f       	mov	r21, r20
 690:	82 e0       	ldi	r24, 0x02	; 2
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	a8 0e       	add	r10, r24
 696:	b9 1e       	adc	r11, r25
 698:	9f e6       	ldi	r25, 0x6F	; 111
 69a:	f9 22       	and	r15, r25
 69c:	57 ff       	sbrs	r21, 7
 69e:	09 c0       	rjmp	.+18     	; 0x6b2 <vfprintf+0x21e>
 6a0:	50 95       	com	r21
 6a2:	40 95       	com	r20
 6a4:	30 95       	com	r19
 6a6:	21 95       	neg	r18
 6a8:	3f 4f       	sbci	r19, 0xFF	; 255
 6aa:	4f 4f       	sbci	r20, 0xFF	; 255
 6ac:	5f 4f       	sbci	r21, 0xFF	; 255
 6ae:	e0 e8       	ldi	r30, 0x80	; 128
 6b0:	fe 2a       	or	r15, r30
 6b2:	ca 01       	movw	r24, r20
 6b4:	b9 01       	movw	r22, r18
 6b6:	a1 01       	movw	r20, r2
 6b8:	2a e0       	ldi	r18, 0x0A	; 10
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__ultoa_invert>
 6c0:	d8 2e       	mov	r13, r24
 6c2:	d2 18       	sub	r13, r2
 6c4:	40 c0       	rjmp	.+128    	; 0x746 <vfprintf+0x2b2>
 6c6:	95 37       	cpi	r25, 0x75	; 117
 6c8:	29 f4       	brne	.+10     	; 0x6d4 <vfprintf+0x240>
 6ca:	1f 2d       	mov	r17, r15
 6cc:	1f 7e       	andi	r17, 0xEF	; 239
 6ce:	2a e0       	ldi	r18, 0x0A	; 10
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	1d c0       	rjmp	.+58     	; 0x70e <vfprintf+0x27a>
 6d4:	1f 2d       	mov	r17, r15
 6d6:	19 7f       	andi	r17, 0xF9	; 249
 6d8:	9f 36       	cpi	r25, 0x6F	; 111
 6da:	61 f0       	breq	.+24     	; 0x6f4 <vfprintf+0x260>
 6dc:	90 37       	cpi	r25, 0x70	; 112
 6de:	20 f4       	brcc	.+8      	; 0x6e8 <vfprintf+0x254>
 6e0:	98 35       	cpi	r25, 0x58	; 88
 6e2:	09 f0       	breq	.+2      	; 0x6e6 <vfprintf+0x252>
 6e4:	ac c0       	rjmp	.+344    	; 0x83e <vfprintf+0x3aa>
 6e6:	0f c0       	rjmp	.+30     	; 0x706 <vfprintf+0x272>
 6e8:	90 37       	cpi	r25, 0x70	; 112
 6ea:	39 f0       	breq	.+14     	; 0x6fa <vfprintf+0x266>
 6ec:	98 37       	cpi	r25, 0x78	; 120
 6ee:	09 f0       	breq	.+2      	; 0x6f2 <vfprintf+0x25e>
 6f0:	a6 c0       	rjmp	.+332    	; 0x83e <vfprintf+0x3aa>
 6f2:	04 c0       	rjmp	.+8      	; 0x6fc <vfprintf+0x268>
 6f4:	28 e0       	ldi	r18, 0x08	; 8
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	0a c0       	rjmp	.+20     	; 0x70e <vfprintf+0x27a>
 6fa:	10 61       	ori	r17, 0x10	; 16
 6fc:	14 fd       	sbrc	r17, 4
 6fe:	14 60       	ori	r17, 0x04	; 4
 700:	20 e1       	ldi	r18, 0x10	; 16
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	04 c0       	rjmp	.+8      	; 0x70e <vfprintf+0x27a>
 706:	14 fd       	sbrc	r17, 4
 708:	16 60       	ori	r17, 0x06	; 6
 70a:	20 e1       	ldi	r18, 0x10	; 16
 70c:	32 e0       	ldi	r19, 0x02	; 2
 70e:	17 ff       	sbrs	r17, 7
 710:	08 c0       	rjmp	.+16     	; 0x722 <vfprintf+0x28e>
 712:	f5 01       	movw	r30, r10
 714:	60 81       	ld	r22, Z
 716:	71 81       	ldd	r23, Z+1	; 0x01
 718:	82 81       	ldd	r24, Z+2	; 0x02
 71a:	93 81       	ldd	r25, Z+3	; 0x03
 71c:	44 e0       	ldi	r20, 0x04	; 4
 71e:	50 e0       	ldi	r21, 0x00	; 0
 720:	08 c0       	rjmp	.+16     	; 0x732 <vfprintf+0x29e>
 722:	f5 01       	movw	r30, r10
 724:	80 81       	ld	r24, Z
 726:	91 81       	ldd	r25, Z+1	; 0x01
 728:	bc 01       	movw	r22, r24
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	42 e0       	ldi	r20, 0x02	; 2
 730:	50 e0       	ldi	r21, 0x00	; 0
 732:	a4 0e       	add	r10, r20
 734:	b5 1e       	adc	r11, r21
 736:	a1 01       	movw	r20, r2
 738:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__ultoa_invert>
 73c:	d8 2e       	mov	r13, r24
 73e:	d2 18       	sub	r13, r2
 740:	8f e7       	ldi	r24, 0x7F	; 127
 742:	f8 2e       	mov	r15, r24
 744:	f1 22       	and	r15, r17
 746:	f6 fe       	sbrs	r15, 6
 748:	0b c0       	rjmp	.+22     	; 0x760 <vfprintf+0x2cc>
 74a:	5e ef       	ldi	r21, 0xFE	; 254
 74c:	f5 22       	and	r15, r21
 74e:	d9 14       	cp	r13, r9
 750:	38 f4       	brcc	.+14     	; 0x760 <vfprintf+0x2cc>
 752:	f4 fe       	sbrs	r15, 4
 754:	07 c0       	rjmp	.+14     	; 0x764 <vfprintf+0x2d0>
 756:	f2 fc       	sbrc	r15, 2
 758:	05 c0       	rjmp	.+10     	; 0x764 <vfprintf+0x2d0>
 75a:	8f ee       	ldi	r24, 0xEF	; 239
 75c:	f8 22       	and	r15, r24
 75e:	02 c0       	rjmp	.+4      	; 0x764 <vfprintf+0x2d0>
 760:	1d 2d       	mov	r17, r13
 762:	01 c0       	rjmp	.+2      	; 0x766 <vfprintf+0x2d2>
 764:	19 2d       	mov	r17, r9
 766:	f4 fe       	sbrs	r15, 4
 768:	0d c0       	rjmp	.+26     	; 0x784 <vfprintf+0x2f0>
 76a:	fe 01       	movw	r30, r28
 76c:	ed 0d       	add	r30, r13
 76e:	f1 1d       	adc	r31, r1
 770:	80 81       	ld	r24, Z
 772:	80 33       	cpi	r24, 0x30	; 48
 774:	19 f4       	brne	.+6      	; 0x77c <vfprintf+0x2e8>
 776:	99 ee       	ldi	r25, 0xE9	; 233
 778:	f9 22       	and	r15, r25
 77a:	08 c0       	rjmp	.+16     	; 0x78c <vfprintf+0x2f8>
 77c:	1f 5f       	subi	r17, 0xFF	; 255
 77e:	f2 fe       	sbrs	r15, 2
 780:	05 c0       	rjmp	.+10     	; 0x78c <vfprintf+0x2f8>
 782:	03 c0       	rjmp	.+6      	; 0x78a <vfprintf+0x2f6>
 784:	8f 2d       	mov	r24, r15
 786:	86 78       	andi	r24, 0x86	; 134
 788:	09 f0       	breq	.+2      	; 0x78c <vfprintf+0x2f8>
 78a:	1f 5f       	subi	r17, 0xFF	; 255
 78c:	0f 2d       	mov	r16, r15
 78e:	f3 fc       	sbrc	r15, 3
 790:	14 c0       	rjmp	.+40     	; 0x7ba <vfprintf+0x326>
 792:	f0 fe       	sbrs	r15, 0
 794:	0f c0       	rjmp	.+30     	; 0x7b4 <vfprintf+0x320>
 796:	1e 15       	cp	r17, r14
 798:	10 f0       	brcs	.+4      	; 0x79e <vfprintf+0x30a>
 79a:	9d 2c       	mov	r9, r13
 79c:	0b c0       	rjmp	.+22     	; 0x7b4 <vfprintf+0x320>
 79e:	9d 2c       	mov	r9, r13
 7a0:	9e 0c       	add	r9, r14
 7a2:	91 1a       	sub	r9, r17
 7a4:	1e 2d       	mov	r17, r14
 7a6:	06 c0       	rjmp	.+12     	; 0x7b4 <vfprintf+0x320>
 7a8:	80 e2       	ldi	r24, 0x20	; 32
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	b3 01       	movw	r22, r6
 7ae:	0e 94 3d 04 	call	0x87a	; 0x87a <fputc>
 7b2:	1f 5f       	subi	r17, 0xFF	; 255
 7b4:	1e 15       	cp	r17, r14
 7b6:	c0 f3       	brcs	.-16     	; 0x7a8 <vfprintf+0x314>
 7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <vfprintf+0x32e>
 7ba:	1e 15       	cp	r17, r14
 7bc:	10 f4       	brcc	.+4      	; 0x7c2 <vfprintf+0x32e>
 7be:	e1 1a       	sub	r14, r17
 7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <vfprintf+0x330>
 7c2:	ee 24       	eor	r14, r14
 7c4:	04 ff       	sbrs	r16, 4
 7c6:	0f c0       	rjmp	.+30     	; 0x7e6 <vfprintf+0x352>
 7c8:	80 e3       	ldi	r24, 0x30	; 48
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	b3 01       	movw	r22, r6
 7ce:	0e 94 3d 04 	call	0x87a	; 0x87a <fputc>
 7d2:	02 ff       	sbrs	r16, 2
 7d4:	1d c0       	rjmp	.+58     	; 0x810 <vfprintf+0x37c>
 7d6:	01 fd       	sbrc	r16, 1
 7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <vfprintf+0x34c>
 7da:	88 e7       	ldi	r24, 0x78	; 120
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e c0       	rjmp	.+28     	; 0x7fc <vfprintf+0x368>
 7e0:	88 e5       	ldi	r24, 0x58	; 88
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0b c0       	rjmp	.+22     	; 0x7fc <vfprintf+0x368>
 7e6:	80 2f       	mov	r24, r16
 7e8:	86 78       	andi	r24, 0x86	; 134
 7ea:	91 f0       	breq	.+36     	; 0x810 <vfprintf+0x37c>
 7ec:	01 ff       	sbrs	r16, 1
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <vfprintf+0x360>
 7f0:	8b e2       	ldi	r24, 0x2B	; 43
 7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <vfprintf+0x362>
 7f4:	80 e2       	ldi	r24, 0x20	; 32
 7f6:	f7 fc       	sbrc	r15, 7
 7f8:	8d e2       	ldi	r24, 0x2D	; 45
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	b3 01       	movw	r22, r6
 7fe:	0e 94 3d 04 	call	0x87a	; 0x87a <fputc>
 802:	06 c0       	rjmp	.+12     	; 0x810 <vfprintf+0x37c>
 804:	80 e3       	ldi	r24, 0x30	; 48
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	b3 01       	movw	r22, r6
 80a:	0e 94 3d 04 	call	0x87a	; 0x87a <fputc>
 80e:	9a 94       	dec	r9
 810:	d9 14       	cp	r13, r9
 812:	c0 f3       	brcs	.-16     	; 0x804 <vfprintf+0x370>
 814:	da 94       	dec	r13
 816:	f1 01       	movw	r30, r2
 818:	ed 0d       	add	r30, r13
 81a:	f1 1d       	adc	r31, r1
 81c:	80 81       	ld	r24, Z
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	b3 01       	movw	r22, r6
 822:	0e 94 3d 04 	call	0x87a	; 0x87a <fputc>
 826:	dd 20       	and	r13, r13
 828:	a9 f7       	brne	.-22     	; 0x814 <vfprintf+0x380>
 82a:	06 c0       	rjmp	.+12     	; 0x838 <vfprintf+0x3a4>
 82c:	80 e2       	ldi	r24, 0x20	; 32
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	b3 01       	movw	r22, r6
 832:	0e 94 3d 04 	call	0x87a	; 0x87a <fputc>
 836:	ea 94       	dec	r14
 838:	ee 20       	and	r14, r14
 83a:	c1 f7       	brne	.-16     	; 0x82c <vfprintf+0x398>
 83c:	43 ce       	rjmp	.-890    	; 0x4c4 <vfprintf+0x30>
 83e:	f3 01       	movw	r30, r6
 840:	66 81       	ldd	r22, Z+6	; 0x06
 842:	77 81       	ldd	r23, Z+7	; 0x07
 844:	cb 01       	movw	r24, r22
 846:	2b 96       	adiw	r28, 0x0b	; 11
 848:	e2 e1       	ldi	r30, 0x12	; 18
 84a:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__epilogue_restores__>

0000084e <strnlen_P>:
 84e:	fc 01       	movw	r30, r24
 850:	05 90       	lpm	r0, Z+
 852:	61 50       	subi	r22, 0x01	; 1
 854:	70 40       	sbci	r23, 0x00	; 0
 856:	01 10       	cpse	r0, r1
 858:	d8 f7       	brcc	.-10     	; 0x850 <strnlen_P+0x2>
 85a:	80 95       	com	r24
 85c:	90 95       	com	r25
 85e:	8e 0f       	add	r24, r30
 860:	9f 1f       	adc	r25, r31
 862:	08 95       	ret

00000864 <strnlen>:
 864:	fc 01       	movw	r30, r24
 866:	61 50       	subi	r22, 0x01	; 1
 868:	70 40       	sbci	r23, 0x00	; 0
 86a:	01 90       	ld	r0, Z+
 86c:	01 10       	cpse	r0, r1
 86e:	d8 f7       	brcc	.-10     	; 0x866 <strnlen+0x2>
 870:	80 95       	com	r24
 872:	90 95       	com	r25
 874:	8e 0f       	add	r24, r30
 876:	9f 1f       	adc	r25, r31
 878:	08 95       	ret

0000087a <fputc>:
 87a:	0f 93       	push	r16
 87c:	1f 93       	push	r17
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	8c 01       	movw	r16, r24
 884:	eb 01       	movw	r28, r22
 886:	8b 81       	ldd	r24, Y+3	; 0x03
 888:	81 ff       	sbrs	r24, 1
 88a:	1b c0       	rjmp	.+54     	; 0x8c2 <fputc+0x48>
 88c:	82 ff       	sbrs	r24, 2
 88e:	0d c0       	rjmp	.+26     	; 0x8aa <fputc+0x30>
 890:	2e 81       	ldd	r18, Y+6	; 0x06
 892:	3f 81       	ldd	r19, Y+7	; 0x07
 894:	8c 81       	ldd	r24, Y+4	; 0x04
 896:	9d 81       	ldd	r25, Y+5	; 0x05
 898:	28 17       	cp	r18, r24
 89a:	39 07       	cpc	r19, r25
 89c:	64 f4       	brge	.+24     	; 0x8b6 <fputc+0x3c>
 89e:	e8 81       	ld	r30, Y
 8a0:	f9 81       	ldd	r31, Y+1	; 0x01
 8a2:	01 93       	st	Z+, r16
 8a4:	f9 83       	std	Y+1, r31	; 0x01
 8a6:	e8 83       	st	Y, r30
 8a8:	06 c0       	rjmp	.+12     	; 0x8b6 <fputc+0x3c>
 8aa:	e8 85       	ldd	r30, Y+8	; 0x08
 8ac:	f9 85       	ldd	r31, Y+9	; 0x09
 8ae:	80 2f       	mov	r24, r16
 8b0:	09 95       	icall
 8b2:	89 2b       	or	r24, r25
 8b4:	31 f4       	brne	.+12     	; 0x8c2 <fputc+0x48>
 8b6:	8e 81       	ldd	r24, Y+6	; 0x06
 8b8:	9f 81       	ldd	r25, Y+7	; 0x07
 8ba:	01 96       	adiw	r24, 0x01	; 1
 8bc:	9f 83       	std	Y+7, r25	; 0x07
 8be:	8e 83       	std	Y+6, r24	; 0x06
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <fputc+0x4c>
 8c2:	0f ef       	ldi	r16, 0xFF	; 255
 8c4:	1f ef       	ldi	r17, 0xFF	; 255
 8c6:	c8 01       	movw	r24, r16
 8c8:	df 91       	pop	r29
 8ca:	cf 91       	pop	r28
 8cc:	1f 91       	pop	r17
 8ce:	0f 91       	pop	r16
 8d0:	08 95       	ret

000008d2 <__ultoa_invert>:
 8d2:	fa 01       	movw	r30, r20
 8d4:	aa 27       	eor	r26, r26
 8d6:	28 30       	cpi	r18, 0x08	; 8
 8d8:	51 f1       	breq	.+84     	; 0x92e <__ultoa_invert+0x5c>
 8da:	20 31       	cpi	r18, 0x10	; 16
 8dc:	81 f1       	breq	.+96     	; 0x93e <__ultoa_invert+0x6c>
 8de:	e8 94       	clt
 8e0:	6f 93       	push	r22
 8e2:	6e 7f       	andi	r22, 0xFE	; 254
 8e4:	6e 5f       	subi	r22, 0xFE	; 254
 8e6:	7f 4f       	sbci	r23, 0xFF	; 255
 8e8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ea:	9f 4f       	sbci	r25, 0xFF	; 255
 8ec:	af 4f       	sbci	r26, 0xFF	; 255
 8ee:	b1 e0       	ldi	r27, 0x01	; 1
 8f0:	3e d0       	rcall	.+124    	; 0x96e <__ultoa_invert+0x9c>
 8f2:	b4 e0       	ldi	r27, 0x04	; 4
 8f4:	3c d0       	rcall	.+120    	; 0x96e <__ultoa_invert+0x9c>
 8f6:	67 0f       	add	r22, r23
 8f8:	78 1f       	adc	r23, r24
 8fa:	89 1f       	adc	r24, r25
 8fc:	9a 1f       	adc	r25, r26
 8fe:	a1 1d       	adc	r26, r1
 900:	68 0f       	add	r22, r24
 902:	79 1f       	adc	r23, r25
 904:	8a 1f       	adc	r24, r26
 906:	91 1d       	adc	r25, r1
 908:	a1 1d       	adc	r26, r1
 90a:	6a 0f       	add	r22, r26
 90c:	71 1d       	adc	r23, r1
 90e:	81 1d       	adc	r24, r1
 910:	91 1d       	adc	r25, r1
 912:	a1 1d       	adc	r26, r1
 914:	20 d0       	rcall	.+64     	; 0x956 <__ultoa_invert+0x84>
 916:	09 f4       	brne	.+2      	; 0x91a <__ultoa_invert+0x48>
 918:	68 94       	set
 91a:	3f 91       	pop	r19
 91c:	2a e0       	ldi	r18, 0x0A	; 10
 91e:	26 9f       	mul	r18, r22
 920:	11 24       	eor	r1, r1
 922:	30 19       	sub	r19, r0
 924:	30 5d       	subi	r19, 0xD0	; 208
 926:	31 93       	st	Z+, r19
 928:	de f6       	brtc	.-74     	; 0x8e0 <__ultoa_invert+0xe>
 92a:	cf 01       	movw	r24, r30
 92c:	08 95       	ret
 92e:	46 2f       	mov	r20, r22
 930:	47 70       	andi	r20, 0x07	; 7
 932:	40 5d       	subi	r20, 0xD0	; 208
 934:	41 93       	st	Z+, r20
 936:	b3 e0       	ldi	r27, 0x03	; 3
 938:	0f d0       	rcall	.+30     	; 0x958 <__ultoa_invert+0x86>
 93a:	c9 f7       	brne	.-14     	; 0x92e <__ultoa_invert+0x5c>
 93c:	f6 cf       	rjmp	.-20     	; 0x92a <__ultoa_invert+0x58>
 93e:	46 2f       	mov	r20, r22
 940:	4f 70       	andi	r20, 0x0F	; 15
 942:	40 5d       	subi	r20, 0xD0	; 208
 944:	4a 33       	cpi	r20, 0x3A	; 58
 946:	18 f0       	brcs	.+6      	; 0x94e <__ultoa_invert+0x7c>
 948:	49 5d       	subi	r20, 0xD9	; 217
 94a:	31 fd       	sbrc	r19, 1
 94c:	40 52       	subi	r20, 0x20	; 32
 94e:	41 93       	st	Z+, r20
 950:	02 d0       	rcall	.+4      	; 0x956 <__ultoa_invert+0x84>
 952:	a9 f7       	brne	.-22     	; 0x93e <__ultoa_invert+0x6c>
 954:	ea cf       	rjmp	.-44     	; 0x92a <__ultoa_invert+0x58>
 956:	b4 e0       	ldi	r27, 0x04	; 4
 958:	a6 95       	lsr	r26
 95a:	97 95       	ror	r25
 95c:	87 95       	ror	r24
 95e:	77 95       	ror	r23
 960:	67 95       	ror	r22
 962:	ba 95       	dec	r27
 964:	c9 f7       	brne	.-14     	; 0x958 <__ultoa_invert+0x86>
 966:	00 97       	sbiw	r24, 0x00	; 0
 968:	61 05       	cpc	r22, r1
 96a:	71 05       	cpc	r23, r1
 96c:	08 95       	ret
 96e:	9b 01       	movw	r18, r22
 970:	ac 01       	movw	r20, r24
 972:	0a 2e       	mov	r0, r26
 974:	06 94       	lsr	r0
 976:	57 95       	ror	r21
 978:	47 95       	ror	r20
 97a:	37 95       	ror	r19
 97c:	27 95       	ror	r18
 97e:	ba 95       	dec	r27
 980:	c9 f7       	brne	.-14     	; 0x974 <__ultoa_invert+0xa2>
 982:	62 0f       	add	r22, r18
 984:	73 1f       	adc	r23, r19
 986:	84 1f       	adc	r24, r20
 988:	95 1f       	adc	r25, r21
 98a:	a0 1d       	adc	r26, r0
 98c:	08 95       	ret

0000098e <__udivmodhi4>:
 98e:	aa 1b       	sub	r26, r26
 990:	bb 1b       	sub	r27, r27
 992:	51 e1       	ldi	r21, 0x11	; 17
 994:	07 c0       	rjmp	.+14     	; 0x9a4 <__udivmodhi4_ep>

00000996 <__udivmodhi4_loop>:
 996:	aa 1f       	adc	r26, r26
 998:	bb 1f       	adc	r27, r27
 99a:	a6 17       	cp	r26, r22
 99c:	b7 07       	cpc	r27, r23
 99e:	10 f0       	brcs	.+4      	; 0x9a4 <__udivmodhi4_ep>
 9a0:	a6 1b       	sub	r26, r22
 9a2:	b7 0b       	sbc	r27, r23

000009a4 <__udivmodhi4_ep>:
 9a4:	88 1f       	adc	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	5a 95       	dec	r21
 9aa:	a9 f7       	brne	.-22     	; 0x996 <__udivmodhi4_loop>
 9ac:	80 95       	com	r24
 9ae:	90 95       	com	r25
 9b0:	bc 01       	movw	r22, r24
 9b2:	cd 01       	movw	r24, r26
 9b4:	08 95       	ret

000009b6 <__prologue_saves__>:
 9b6:	2f 92       	push	r2
 9b8:	3f 92       	push	r3
 9ba:	4f 92       	push	r4
 9bc:	5f 92       	push	r5
 9be:	6f 92       	push	r6
 9c0:	7f 92       	push	r7
 9c2:	8f 92       	push	r8
 9c4:	9f 92       	push	r9
 9c6:	af 92       	push	r10
 9c8:	bf 92       	push	r11
 9ca:	cf 92       	push	r12
 9cc:	df 92       	push	r13
 9ce:	ef 92       	push	r14
 9d0:	ff 92       	push	r15
 9d2:	0f 93       	push	r16
 9d4:	1f 93       	push	r17
 9d6:	cf 93       	push	r28
 9d8:	df 93       	push	r29
 9da:	cd b7       	in	r28, 0x3d	; 61
 9dc:	de b7       	in	r29, 0x3e	; 62
 9de:	ca 1b       	sub	r28, r26
 9e0:	db 0b       	sbc	r29, r27
 9e2:	0f b6       	in	r0, 0x3f	; 63
 9e4:	f8 94       	cli
 9e6:	de bf       	out	0x3e, r29	; 62
 9e8:	0f be       	out	0x3f, r0	; 63
 9ea:	cd bf       	out	0x3d, r28	; 61
 9ec:	09 94       	ijmp

000009ee <__epilogue_restores__>:
 9ee:	2a 88       	ldd	r2, Y+18	; 0x12
 9f0:	39 88       	ldd	r3, Y+17	; 0x11
 9f2:	48 88       	ldd	r4, Y+16	; 0x10
 9f4:	5f 84       	ldd	r5, Y+15	; 0x0f
 9f6:	6e 84       	ldd	r6, Y+14	; 0x0e
 9f8:	7d 84       	ldd	r7, Y+13	; 0x0d
 9fa:	8c 84       	ldd	r8, Y+12	; 0x0c
 9fc:	9b 84       	ldd	r9, Y+11	; 0x0b
 9fe:	aa 84       	ldd	r10, Y+10	; 0x0a
 a00:	b9 84       	ldd	r11, Y+9	; 0x09
 a02:	c8 84       	ldd	r12, Y+8	; 0x08
 a04:	df 80       	ldd	r13, Y+7	; 0x07
 a06:	ee 80       	ldd	r14, Y+6	; 0x06
 a08:	fd 80       	ldd	r15, Y+5	; 0x05
 a0a:	0c 81       	ldd	r16, Y+4	; 0x04
 a0c:	1b 81       	ldd	r17, Y+3	; 0x03
 a0e:	aa 81       	ldd	r26, Y+2	; 0x02
 a10:	b9 81       	ldd	r27, Y+1	; 0x01
 a12:	ce 0f       	add	r28, r30
 a14:	d1 1d       	adc	r29, r1
 a16:	0f b6       	in	r0, 0x3f	; 63
 a18:	f8 94       	cli
 a1a:	de bf       	out	0x3e, r29	; 62
 a1c:	0f be       	out	0x3f, r0	; 63
 a1e:	cd bf       	out	0x3d, r28	; 61
 a20:	ed 01       	movw	r28, r26
 a22:	08 95       	ret

00000a24 <_exit>:
 a24:	f8 94       	cli

00000a26 <__stop_program>:
 a26:	ff cf       	rjmp	.-2      	; 0xa26 <__stop_program>
