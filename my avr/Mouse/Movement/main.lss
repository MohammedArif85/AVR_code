
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000009a2  00000a36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800080  00800080  00000a56  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000ef  00000000  00000000  00000a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a13  00000000  00000000  00000b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000279  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c2  00000000  00000000  000017f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001db4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b4  00000000  00000000  00001e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fc  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 39       	cpi	r26, 0x9A	; 154
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c9 01 	call	0x392	; 0x392 <main>
  8a:	0c 94 cf 04 	jmp	0x99e	; 0x99e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_reset>:
#define LCD_RW      0x02
#define LCD_EN      0x04

void lcd_reset(void)
{
        lcd_port = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	88 bb       	out	0x18, r24	; 24
  96:	88 ec       	ldi	r24, 0xC8	; 200
  98:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	20 e9       	ldi	r18, 0x90	; 144
  9c:	31 e0       	ldi	r19, 0x01	; 1
  9e:	f9 01       	movw	r30, r18
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_reset+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a6:	d9 f7       	brne	.-10     	; 0x9e <lcd_reset+0xc>
        _delay_ms(20);
        lcd_port = 0x30+LCD_EN;
  a8:	94 e3       	ldi	r25, 0x34	; 52
  aa:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  ac:	80 e3       	ldi	r24, 0x30	; 48
  ae:	88 bb       	out	0x18, r24	; 24
  b0:	e0 e4       	ldi	r30, 0x40	; 64
  b2:	fc e9       	ldi	r31, 0x9C	; 156
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_reset+0x22>
        _delay_ms(10);
        lcd_port = 0x30+LCD_EN;
  b8:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	20 ea       	ldi	r18, 0xA0	; 160
  be:	3f e0       	ldi	r19, 0x0F	; 15
  c0:	f9 01       	movw	r30, r18
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_reset+0x30>
        _delay_ms(1);
        lcd_port = 0x30+LCD_EN;
  c6:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  c8:	88 bb       	out	0x18, r24	; 24
  ca:	c9 01       	movw	r24, r18
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_reset+0x3a>
        _delay_ms(1);
        lcd_port = 0x20+LCD_EN;
  d0:	84 e2       	ldi	r24, 0x24	; 36
  d2:	88 bb       	out	0x18, r24	; 24
        lcd_port = 0x20;
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	88 bb       	out	0x18, r24	; 24
  d8:	c9 01       	movw	r24, r18
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd_reset+0x48>
        _delay_ms(1);
}
  de:	08 95       	ret

000000e0 <lcd_cmd>:
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
  e0:	38 2f       	mov	r19, r24
  e2:	30 7f       	andi	r19, 0xF0	; 240
  e4:	23 2f       	mov	r18, r19
  e6:	24 60       	ori	r18, 0x04	; 4
  e8:	28 bb       	out	0x18, r18	; 24
        lcd_port = (cmd & 0xF0);
  ea:	38 bb       	out	0x18, r19	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	24 e0       	ldi	r18, 0x04	; 4
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	2a 95       	dec	r18
  f6:	e1 f7       	brne	.-8      	; 0xf0 <lcd_cmd+0x10>
  f8:	28 2f       	mov	r18, r24
  fa:	24 60       	ori	r18, 0x04	; 4
  fc:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((cmd << 4) & 0xF0);
  fe:	88 bb       	out	0x18, r24	; 24
 100:	80 e4       	ldi	r24, 0x40	; 64
 102:	9f e1       	ldi	r25, 0x1F	; 31
 104:	fc 01       	movw	r30, r24
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_cmd+0x26>

      

        _delay_ms(2);
        _delay_ms(2);
}
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_cmd+0x2a>
 10e:	08 95       	ret

00000110 <lcd_init>:

void lcd_init (void)
{       DDRB=0xFF;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	87 bb       	out	0x17, r24	; 23
        PORTB=0x00; 
 114:	18 ba       	out	0x18, r1	; 24
        lcd_reset();         // Call LCD reset
 116:	0e 94 49 00 	call	0x92	; 0x92 <lcd_reset>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 11a:	84 e2       	ldi	r24, 0x24	; 36
 11c:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 11e:	80 e2       	ldi	r24, 0x20	; 32
 120:	88 bb       	out	0x18, r24	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 122:	54 e8       	ldi	r21, 0x84	; 132
 124:	58 bb       	out	0x18, r21	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 126:	40 e8       	ldi	r20, 0x80	; 128
 128:	48 bb       	out	0x18, r20	; 24
 12a:	20 e4       	ldi	r18, 0x40	; 64
 12c:	3f e1       	ldi	r19, 0x1F	; 31
 12e:	c9 01       	movw	r24, r18
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lcd_init+0x20>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 134:	c9 01       	movw	r24, r18
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <lcd_init+0x26>
 13a:	94 e0       	ldi	r25, 0x04	; 4
 13c:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 13e:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 140:	84 ec       	ldi	r24, 0xC4	; 196
 142:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 144:	80 ec       	ldi	r24, 0xC0	; 192
 146:	88 bb       	out	0x18, r24	; 24
 148:	f9 01       	movw	r30, r18
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_init+0x3a>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 14e:	f9 01       	movw	r30, r18
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x40>
 154:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 156:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 158:	84 e6       	ldi	r24, 0x64	; 100
 15a:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 15c:	80 e6       	ldi	r24, 0x60	; 96
 15e:	88 bb       	out	0x18, r24	; 24
 160:	f9 01       	movw	r30, r18
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_init+0x52>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 166:	f9 01       	movw	r30, r18
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_init+0x58>
 16c:	58 bb       	out	0x18, r21	; 24
        lcd_port = (cmd & 0xF0);
 16e:	48 bb       	out	0x18, r20	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 170:	98 bb       	out	0x18, r25	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 172:	18 ba       	out	0x18, r1	; 24
 174:	c9 01       	movw	r24, r18
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_init+0x66>
        lcd_reset();         // Call LCD reset
        lcd_cmd(0x28);       // 4-bit mode - 2 line - 5x7 font.
        lcd_cmd(0x0C);       // Display on cursor - off .
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 }
 17a:	c9 01       	movw	r24, r18
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <lcd_init+0x6c>
 180:	08 95       	ret

00000182 <lcd_data>:


void lcd_data (unsigned char dat)
{
        lcd_port = ((dat & 0xF0)|LCD_EN|LCD_RS);
 182:	98 2f       	mov	r25, r24
 184:	90 7f       	andi	r25, 0xF0	; 240
 186:	29 2f       	mov	r18, r25
 188:	25 60       	ori	r18, 0x05	; 5
 18a:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((dat & 0xF0)|LCD_RS);
 18c:	91 60       	ori	r25, 0x01	; 1
 18e:	98 bb       	out	0x18, r25	; 24
		
		lcd_port = (((dat << 4) & 0xF0)|LCD_EN|LCD_RS);
 190:	82 95       	swap	r24
 192:	80 7f       	andi	r24, 0xF0	; 240
 194:	98 2f       	mov	r25, r24
 196:	95 60       	ori	r25, 0x05	; 5
 198:	98 bb       	out	0x18, r25	; 24
        lcd_port = (((dat << 4) & 0xF0)|LCD_RS);
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	88 bb       	out	0x18, r24	; 24
 19e:	80 e4       	ldi	r24, 0x40	; 64
 1a0:	9f e1       	ldi	r25, 0x1F	; 31
 1a2:	fc 01       	movw	r30, r24
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_data+0x22>
       
      

       _delay_ms(2);
       _delay_ms(2);
}
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_data+0x26>
 1ac:	08 95       	ret

000001ae <lcd_puts>:
void lcd_puts(char *aaa)
{
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <lcd_puts+0xc>
unsigned int i;
for(i=0;aaa[i]!=0;i++)
lcd_data(aaa[i]);
 1b6:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
       _delay_ms(2);
}
void lcd_puts(char *aaa)
{
unsigned int i;
for(i=0;aaa[i]!=0;i++)
 1ba:	89 91       	ld	r24, Y+
 1bc:	88 23       	and	r24, r24
 1be:	d9 f7       	brne	.-10     	; 0x1b6 <lcd_puts+0x8>
lcd_data(aaa[i]);

}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <itoa1>:
void itoa1(uint16_t num)
{
 1c6:	cf 92       	push	r12
 1c8:	df 92       	push	r13
 1ca:	ef 92       	push	r14
 1cc:	ff 92       	push	r15
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	7c 01       	movw	r14, r24

 unsigned char a,b,c,d;

 a=num%10;
 num=num/10;
 1d4:	6a e0       	ldi	r22, 0x0A	; 10
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	0e 94 84 04 	call	0x908	; 0x908 <__udivmodhi4>
 1dc:	d6 2e       	mov	r13, r22
 1de:	c7 2e       	mov	r12, r23
 b=num%10;
 num=num/10;
 1e0:	86 2f       	mov	r24, r22
 1e2:	97 2f       	mov	r25, r23
 1e4:	6a e0       	ldi	r22, 0x0A	; 10
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	0e 94 84 04 	call	0x908	; 0x908 <__udivmodhi4>
 1ec:	16 2f       	mov	r17, r22
 1ee:	07 2f       	mov	r16, r23
 c=num%10;
 num=num/10;
 d=num%10;
 lcd_data(0x30+d); 
 1f0:	86 2f       	mov	r24, r22
 1f2:	97 2f       	mov	r25, r23
 1f4:	6a e0       	ldi	r22, 0x0A	; 10
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	0e 94 84 04 	call	0x908	; 0x908 <__udivmodhi4>
 1fc:	cb 01       	movw	r24, r22
 1fe:	6a e0       	ldi	r22, 0x0A	; 10
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	0e 94 84 04 	call	0x908	; 0x908 <__udivmodhi4>
 206:	80 5d       	subi	r24, 0xD0	; 208
 208:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
 lcd_data(0x30+c); 
 20c:	81 2f       	mov	r24, r17
 20e:	90 2f       	mov	r25, r16
 210:	6a e0       	ldi	r22, 0x0A	; 10
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	0e 94 84 04 	call	0x908	; 0x908 <__udivmodhi4>
 218:	80 5d       	subi	r24, 0xD0	; 208
 21a:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
 lcd_data(0x30+b); 
 21e:	8d 2d       	mov	r24, r13
 220:	9c 2d       	mov	r25, r12
 222:	6a e0       	ldi	r22, 0x0A	; 10
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	0e 94 84 04 	call	0x908	; 0x908 <__udivmodhi4>
 22a:	80 5d       	subi	r24, 0xD0	; 208
 22c:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
 lcd_data(0x30+a); 
 230:	c7 01       	movw	r24, r14
 232:	6a e0       	ldi	r22, 0x0A	; 10
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	0e 94 84 04 	call	0x908	; 0x908 <__udivmodhi4>
 23a:	80 5d       	subi	r24, 0xD0	; 208
 23c:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
 
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	08 95       	ret

0000024e <ioinit>:
    return(0);
}
void ioinit (void)
{
    //1 = output, 0 = input
    DDRD = 0b11111110; //PORTD (RX on PD0)
 24e:	8e ef       	ldi	r24, 0xFE	; 254
 250:	81 bb       	out	0x11, r24	; 17

    //USART Baud rate: 9600
    UBRRH = MYUBRR >> 8;
 252:	10 bc       	out	0x20, r1	; 32
    UBRRL = MYUBRR;
 254:	87 e6       	ldi	r24, 0x67	; 103
 256:	89 b9       	out	0x09, r24	; 9
    
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
 258:	86 e8       	ldi	r24, 0x86	; 134
 25a:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN); 
 25c:	88 e1       	ldi	r24, 0x18	; 24
 25e:	8a b9       	out	0x0a, r24	; 10
	
	stdout = &mystdout; //Required for printf init
 260:	81 e7       	ldi	r24, 0x71	; 113
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	90 93 97 00 	sts	0x0097, r25
 268:	80 93 96 00 	sts	0x0096, r24
}
 26c:	08 95       	ret

0000026e <uart_putchar>:

static int uart_putchar(char c, FILE *stream)
{
 26e:	1f 93       	push	r17
 270:	18 2f       	mov	r17, r24
    if (c == '\n') uart_putchar('\r', stream);
 272:	8a 30       	cpi	r24, 0x0A	; 10
 274:	19 f4       	brne	.+6      	; 0x27c <uart_putchar+0xe>
 276:	8d e0       	ldi	r24, 0x0D	; 13
 278:	0e 94 37 01 	call	0x26e	; 0x26e <uart_putchar>
  
    loop_until_bit_is_set(UCSRA, UDRE);
 27c:	5d 9b       	sbis	0x0b, 5	; 11
 27e:	fe cf       	rjmp	.-4      	; 0x27c <uart_putchar+0xe>
    UDR = c;
 280:	1c b9       	out	0x0c, r17	; 12
    
    return 0;
}
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	1f 91       	pop	r17
 288:	08 95       	ret

0000028a <uart_getchar>:

uint8_t uart_getchar(void)
{
    while( !(UCSRA & (1<<RXC)) );
 28a:	5f 9b       	sbis	0x0b, 7	; 11
 28c:	fe cf       	rjmp	.-4      	; 0x28a <uart_getchar>
    return(UDR);
 28e:	8c b1       	in	r24, 0x0c	; 12
}
 290:	08 95       	ret

00000292 <read_x>:

void read_x(void)
{
	DDRC = 0b00010010; // Output on PC4(5V) and PC1(GND), Input on PC4(ADC)
 292:	82 e1       	ldi	r24, 0x12	; 18
 294:	84 bb       	out	0x14, r24	; 20
	sbi(PORTC, 4); //pull PC4 to 5V
 296:	ac 9a       	sbi	0x15, 4	; 21
	cbi(PORTC, 1); //pull PC1 to GND
 298:	a9 98       	cbi	0x15, 1	; 21
 29a:	80 e9       	ldi	r24, 0x90	; 144
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <read_x+0xc>
	
	_delay_us(100); //wait for capacitance in screen to charge
	
	ADMUX = (1 << MUX1);//ADC2
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN)|(1 << ADSC)|(1<<ADPS2)|(1<<ADPS1);
 2a6:	86 ec       	ldi	r24, 0xC6	; 198
 2a8:	86 b9       	out	0x06, r24	; 6
	
	while(ADCSRA & (1 << ADSC));
 2aa:	36 99       	sbic	0x06, 6	; 6
 2ac:	fe cf       	rjmp	.-4      	; 0x2aa <read_x+0x18>
	l = ADCL;
 2ae:	84 b1       	in	r24, 0x04	; 4
 2b0:	80 93 84 00 	sts	0x0084, r24
	h = ADCH & 0x03;
 2b4:	95 b1       	in	r25, 0x05	; 5
	h = h << 8;
	h = h + l;
 2b6:	80 93 8c 00 	sts	0x008C, r24
}
 2ba:	08 95       	ret

000002bc <read_y>:

void read_y(void)
{
	DDRC = 0b00001100; // Output on PC2(5V) and PC3(GND), Input on PC4(ADC)
 2bc:	8c e0       	ldi	r24, 0x0C	; 12
 2be:	84 bb       	out	0x14, r24	; 20
	sbi(PORTC, 2); //pull PC2 to 5V
 2c0:	aa 9a       	sbi	0x15, 2	; 21
	cbi(PORTC, 3); //pull PC3 to GND
 2c2:	ab 98       	cbi	0x15, 3	; 21
 2c4:	80 e9       	ldi	r24, 0x90	; 144
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <read_y+0xc>
	
	_delay_us(100); //wait for capacitance in screen to charge
	
	ADMUX = (1 << MUX2);//ADC4
 2cc:	84 e0       	ldi	r24, 0x04	; 4
 2ce:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN)|(1 << ADSC)|(1<<ADPS2)|(1<<ADPS1);
 2d0:	86 ec       	ldi	r24, 0xC6	; 198
 2d2:	86 b9       	out	0x06, r24	; 6
	
	while(ADCSRA & (1 << ADSC));
 2d4:	36 99       	sbic	0x06, 6	; 6
 2d6:	fe cf       	rjmp	.-4      	; 0x2d4 <read_y+0x18>
	l1 = ADCL;
 2d8:	84 b1       	in	r24, 0x04	; 4
 2da:	80 93 8b 00 	sts	0x008B, r24
	h1 = ADCH & 0x03;
 2de:	95 b1       	in	r25, 0x05	; 5
	h1 = h1 << 8;
	h1 = h1 + l1;
 2e0:	80 93 83 00 	sts	0x0083, r24
}
 2e4:	08 95       	ret

000002e6 <calc>:
void calc(void)
{  char dtoo[5];
		read_x();
 2e6:	0e 94 49 01 	call	0x292	; 0x292 <read_x>
		read_y();
 2ea:	0e 94 5e 01 	call	0x2bc	; 0x2bc <read_y>
		x_buffer[i] = h;
 2ee:	80 91 80 00 	lds	r24, 0x0080
 2f2:	90 91 81 00 	lds	r25, 0x0081
 2f6:	fc 01       	movw	r30, r24
 2f8:	e3 57       	subi	r30, 0x73	; 115
 2fa:	ff 4f       	sbci	r31, 0xFF	; 255
 2fc:	20 91 8c 00 	lds	r18, 0x008C
 300:	20 83       	st	Z, r18
		y_buffer[i] = h1;
 302:	fc 01       	movw	r30, r24
 304:	eb 57       	subi	r30, 0x7B	; 123
 306:	ff 4f       	sbci	r31, 0xFF	; 255
 308:	20 91 83 00 	lds	r18, 0x0083
 30c:	20 83       	st	Z, r18
	  ++i;
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	90 93 81 00 	sts	0x0081, r25
 314:	80 93 80 00 	sts	0x0080, r24
	 if(i>BUFFER+1)
 318:	07 97       	sbiw	r24, 0x07	; 7
 31a:	94 f0       	brlt	.+36     	; 0x340 <calc+0x5a>
	 {
	  i=0;
 31c:	10 92 81 00 	sts	0x0081, r1
 320:	10 92 80 00 	sts	0x0080, r1
	  XDIFF= (x_buffer[0]-x_buffer[BUFFER-1]); 
 324:	80 91 8d 00 	lds	r24, 0x008D
 328:	90 91 91 00 	lds	r25, 0x0091
 32c:	89 1b       	sub	r24, r25
 32e:	80 93 93 00 	sts	0x0093, r24
	  YDIFF= (y_buffer[0]-y_buffer[BUFFER-1]);
 332:	80 91 85 00 	lds	r24, 0x0085
 336:	90 91 89 00 	lds	r25, 0x0089
 33a:	89 1b       	sub	r24, r25
 33c:	80 93 82 00 	sts	0x0082, r24
	 }
	 
	 
	 printf("%d",XDIFF);
 340:	00 d0       	rcall	.+0      	; 0x342 <calc+0x5c>
 342:	00 d0       	rcall	.+0      	; 0x344 <calc+0x5e>
 344:	ed b7       	in	r30, 0x3d	; 61
 346:	fe b7       	in	r31, 0x3e	; 62
 348:	31 96       	adiw	r30, 0x01	; 1
 34a:	80 e6       	ldi	r24, 0x60	; 96
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	ad b7       	in	r26, 0x3d	; 61
 350:	be b7       	in	r27, 0x3e	; 62
 352:	12 96       	adiw	r26, 0x02	; 2
 354:	9c 93       	st	X, r25
 356:	8e 93       	st	-X, r24
 358:	11 97       	sbiw	r26, 0x01	; 1
 35a:	80 91 93 00 	lds	r24, 0x0093
 35e:	82 83       	std	Z+2, r24	; 0x02
 360:	13 82       	std	Z+3, r1	; 0x03
 362:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <printf>
	 printf(",%d\n",YDIFF);
 366:	ed b7       	in	r30, 0x3d	; 61
 368:	fe b7       	in	r31, 0x3e	; 62
 36a:	31 96       	adiw	r30, 0x01	; 1
 36c:	83 e6       	ldi	r24, 0x63	; 99
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	ad b7       	in	r26, 0x3d	; 61
 372:	be b7       	in	r27, 0x3e	; 62
 374:	12 96       	adiw	r26, 0x02	; 2
 376:	9c 93       	st	X, r25
 378:	8e 93       	st	-X, r24
 37a:	11 97       	sbiw	r26, 0x01	; 1
 37c:	80 91 82 00 	lds	r24, 0x0082
 380:	82 83       	std	Z+2, r24	; 0x02
 382:	13 82       	std	Z+3, r1	; 0x03
 384:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <printf>
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
	/* sprintf(dtoo,"%5d",XDIFF);
	 lcd_puts(dtoo);
	 sprintf(dtoo,"%5d",YDIFF);
	 lcd_puts(dtoo);
	*/
    }
 390:	08 95       	ret

00000392 <main>:

#include "lcd.h"

int main (void)
{
DDRD=0x00; 
 392:	11 ba       	out	0x11, r1	; 17
PORTD=0xFF;  
 394:	8f ef       	ldi	r24, 0xFF	; 255
 396:	82 bb       	out	0x12, r24	; 18
   
  lcd_init();//initialise the lcd
 398:	0e 94 88 00 	call	0x110	; 0x110 <lcd_init>
    return(0);
}
void ioinit (void)
{
    //1 = output, 0 = input
    DDRD = 0b11111110; //PORTD (RX on PD0)
 39c:	8e ef       	ldi	r24, 0xFE	; 254
 39e:	81 bb       	out	0x11, r24	; 17

    //USART Baud rate: 9600
    UBRRH = MYUBRR >> 8;
 3a0:	10 bc       	out	0x20, r1	; 32
    UBRRL = MYUBRR;
 3a2:	87 e6       	ldi	r24, 0x67	; 103
 3a4:	89 b9       	out	0x09, r24	; 9
    
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
 3a6:	86 e8       	ldi	r24, 0x86	; 134
 3a8:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN); 
 3aa:	88 e1       	ldi	r24, 0x18	; 24
 3ac:	8a b9       	out	0x0a, r24	; 10
	
	stdout = &mystdout; //Required for printf init
 3ae:	81 e7       	ldi	r24, 0x71	; 113
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	90 93 97 00 	sts	0x0097, r25
 3b6:	80 93 96 00 	sts	0x0096, r24
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 3ba:	84 e0       	ldi	r24, 0x04	; 4
 3bc:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 3be:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 3c0:	84 e1       	ldi	r24, 0x14	; 20
 3c2:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 3c4:	80 e1       	ldi	r24, 0x10	; 16
 3c6:	88 bb       	out	0x18, r24	; 24
 3c8:	80 e4       	ldi	r24, 0x40	; 64
 3ca:	9f e1       	ldi	r25, 0x1F	; 31
 3cc:	fc 01       	movw	r30, r24
 3ce:	31 97       	sbiw	r30, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <main+0x3c>
PORTD=0xFF;  
   
  lcd_init();//initialise the lcd
  ioinit();
  lcd_cmd(0x01);//clear screen
  lcd_puts("Touchpad");
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <main+0x40>
 3d6:	88 e6       	ldi	r24, 0x68	; 104
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_puts>
    
while(1)
{		 
	
calc();
 3de:	0e 94 73 01 	call	0x2e6	; 0x2e6 <calc>
 3e2:	fd cf       	rjmp	.-6      	; 0x3de <main+0x4c>

000003e4 <printf>:
 3e4:	a0 e0       	ldi	r26, 0x00	; 0
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	e8 ef       	ldi	r30, 0xF8	; 248
 3ea:	f1 e0       	ldi	r31, 0x01	; 1
 3ec:	0c 94 a8 04 	jmp	0x950	; 0x950 <__prologue_saves__+0x20>
 3f0:	fe 01       	movw	r30, r28
 3f2:	35 96       	adiw	r30, 0x05	; 5
 3f4:	61 91       	ld	r22, Z+
 3f6:	71 91       	ld	r23, Z+
 3f8:	80 91 96 00 	lds	r24, 0x0096
 3fc:	90 91 97 00 	lds	r25, 0x0097
 400:	af 01       	movw	r20, r30
 402:	0e 94 07 02 	call	0x40e	; 0x40e <vfprintf>
 406:	20 96       	adiw	r28, 0x00	; 0
 408:	e2 e0       	ldi	r30, 0x02	; 2
 40a:	0c 94 c4 04 	jmp	0x988	; 0x988 <__epilogue_restores__+0x20>

0000040e <vfprintf>:
 40e:	ab e0       	ldi	r26, 0x0B	; 11
 410:	b0 e0       	ldi	r27, 0x00	; 0
 412:	ed e0       	ldi	r30, 0x0D	; 13
 414:	f2 e0       	ldi	r31, 0x02	; 2
 416:	0c 94 98 04 	jmp	0x930	; 0x930 <__prologue_saves__>
 41a:	3c 01       	movw	r6, r24
 41c:	2b 01       	movw	r4, r22
 41e:	5a 01       	movw	r10, r20
 420:	fc 01       	movw	r30, r24
 422:	17 82       	std	Z+7, r1	; 0x07
 424:	16 82       	std	Z+6, r1	; 0x06
 426:	83 81       	ldd	r24, Z+3	; 0x03
 428:	81 fd       	sbrc	r24, 1
 42a:	03 c0       	rjmp	.+6      	; 0x432 <vfprintf+0x24>
 42c:	6f ef       	ldi	r22, 0xFF	; 255
 42e:	7f ef       	ldi	r23, 0xFF	; 255
 430:	c6 c1       	rjmp	.+908    	; 0x7be <__stack+0x35f>
 432:	9a e0       	ldi	r25, 0x0A	; 10
 434:	89 2e       	mov	r8, r25
 436:	1e 01       	movw	r2, r28
 438:	08 94       	sec
 43a:	21 1c       	adc	r2, r1
 43c:	31 1c       	adc	r3, r1
 43e:	f3 01       	movw	r30, r6
 440:	23 81       	ldd	r18, Z+3	; 0x03
 442:	f2 01       	movw	r30, r4
 444:	23 fd       	sbrc	r18, 3
 446:	85 91       	lpm	r24, Z+
 448:	23 ff       	sbrs	r18, 3
 44a:	81 91       	ld	r24, Z+
 44c:	2f 01       	movw	r4, r30
 44e:	88 23       	and	r24, r24
 450:	09 f4       	brne	.+2      	; 0x454 <vfprintf+0x46>
 452:	b2 c1       	rjmp	.+868    	; 0x7b8 <__stack+0x359>
 454:	85 32       	cpi	r24, 0x25	; 37
 456:	39 f4       	brne	.+14     	; 0x466 <__stack+0x7>
 458:	23 fd       	sbrc	r18, 3
 45a:	85 91       	lpm	r24, Z+
 45c:	23 ff       	sbrs	r18, 3
 45e:	81 91       	ld	r24, Z+
 460:	2f 01       	movw	r4, r30
 462:	85 32       	cpi	r24, 0x25	; 37
 464:	29 f4       	brne	.+10     	; 0x470 <__stack+0x11>
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	b3 01       	movw	r22, r6
 46a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <fputc>
 46e:	e7 cf       	rjmp	.-50     	; 0x43e <vfprintf+0x30>
 470:	98 2f       	mov	r25, r24
 472:	ff 24       	eor	r15, r15
 474:	ee 24       	eor	r14, r14
 476:	99 24       	eor	r9, r9
 478:	ff e1       	ldi	r31, 0x1F	; 31
 47a:	ff 15       	cp	r31, r15
 47c:	d0 f0       	brcs	.+52     	; 0x4b2 <__stack+0x53>
 47e:	9b 32       	cpi	r25, 0x2B	; 43
 480:	69 f0       	breq	.+26     	; 0x49c <__stack+0x3d>
 482:	9c 32       	cpi	r25, 0x2C	; 44
 484:	28 f4       	brcc	.+10     	; 0x490 <__stack+0x31>
 486:	90 32       	cpi	r25, 0x20	; 32
 488:	59 f0       	breq	.+22     	; 0x4a0 <__stack+0x41>
 48a:	93 32       	cpi	r25, 0x23	; 35
 48c:	91 f4       	brne	.+36     	; 0x4b2 <__stack+0x53>
 48e:	0e c0       	rjmp	.+28     	; 0x4ac <__stack+0x4d>
 490:	9d 32       	cpi	r25, 0x2D	; 45
 492:	49 f0       	breq	.+18     	; 0x4a6 <__stack+0x47>
 494:	90 33       	cpi	r25, 0x30	; 48
 496:	69 f4       	brne	.+26     	; 0x4b2 <__stack+0x53>
 498:	41 e0       	ldi	r20, 0x01	; 1
 49a:	24 c0       	rjmp	.+72     	; 0x4e4 <__stack+0x85>
 49c:	52 e0       	ldi	r21, 0x02	; 2
 49e:	f5 2a       	or	r15, r21
 4a0:	84 e0       	ldi	r24, 0x04	; 4
 4a2:	f8 2a       	or	r15, r24
 4a4:	28 c0       	rjmp	.+80     	; 0x4f6 <__stack+0x97>
 4a6:	98 e0       	ldi	r25, 0x08	; 8
 4a8:	f9 2a       	or	r15, r25
 4aa:	25 c0       	rjmp	.+74     	; 0x4f6 <__stack+0x97>
 4ac:	e0 e1       	ldi	r30, 0x10	; 16
 4ae:	fe 2a       	or	r15, r30
 4b0:	22 c0       	rjmp	.+68     	; 0x4f6 <__stack+0x97>
 4b2:	f7 fc       	sbrc	r15, 7
 4b4:	29 c0       	rjmp	.+82     	; 0x508 <__stack+0xa9>
 4b6:	89 2f       	mov	r24, r25
 4b8:	80 53       	subi	r24, 0x30	; 48
 4ba:	8a 30       	cpi	r24, 0x0A	; 10
 4bc:	70 f4       	brcc	.+28     	; 0x4da <__stack+0x7b>
 4be:	f6 fe       	sbrs	r15, 6
 4c0:	05 c0       	rjmp	.+10     	; 0x4cc <__stack+0x6d>
 4c2:	98 9c       	mul	r9, r8
 4c4:	90 2c       	mov	r9, r0
 4c6:	11 24       	eor	r1, r1
 4c8:	98 0e       	add	r9, r24
 4ca:	15 c0       	rjmp	.+42     	; 0x4f6 <__stack+0x97>
 4cc:	e8 9c       	mul	r14, r8
 4ce:	e0 2c       	mov	r14, r0
 4d0:	11 24       	eor	r1, r1
 4d2:	e8 0e       	add	r14, r24
 4d4:	f0 e2       	ldi	r31, 0x20	; 32
 4d6:	ff 2a       	or	r15, r31
 4d8:	0e c0       	rjmp	.+28     	; 0x4f6 <__stack+0x97>
 4da:	9e 32       	cpi	r25, 0x2E	; 46
 4dc:	29 f4       	brne	.+10     	; 0x4e8 <__stack+0x89>
 4de:	f6 fc       	sbrc	r15, 6
 4e0:	6b c1       	rjmp	.+726    	; 0x7b8 <__stack+0x359>
 4e2:	40 e4       	ldi	r20, 0x40	; 64
 4e4:	f4 2a       	or	r15, r20
 4e6:	07 c0       	rjmp	.+14     	; 0x4f6 <__stack+0x97>
 4e8:	9c 36       	cpi	r25, 0x6C	; 108
 4ea:	19 f4       	brne	.+6      	; 0x4f2 <__stack+0x93>
 4ec:	50 e8       	ldi	r21, 0x80	; 128
 4ee:	f5 2a       	or	r15, r21
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <__stack+0x97>
 4f2:	98 36       	cpi	r25, 0x68	; 104
 4f4:	49 f4       	brne	.+18     	; 0x508 <__stack+0xa9>
 4f6:	f2 01       	movw	r30, r4
 4f8:	23 fd       	sbrc	r18, 3
 4fa:	95 91       	lpm	r25, Z+
 4fc:	23 ff       	sbrs	r18, 3
 4fe:	91 91       	ld	r25, Z+
 500:	2f 01       	movw	r4, r30
 502:	99 23       	and	r25, r25
 504:	09 f0       	breq	.+2      	; 0x508 <__stack+0xa9>
 506:	b8 cf       	rjmp	.-144    	; 0x478 <__stack+0x19>
 508:	89 2f       	mov	r24, r25
 50a:	85 54       	subi	r24, 0x45	; 69
 50c:	83 30       	cpi	r24, 0x03	; 3
 50e:	18 f0       	brcs	.+6      	; 0x516 <__stack+0xb7>
 510:	80 52       	subi	r24, 0x20	; 32
 512:	83 30       	cpi	r24, 0x03	; 3
 514:	38 f4       	brcc	.+14     	; 0x524 <__stack+0xc5>
 516:	44 e0       	ldi	r20, 0x04	; 4
 518:	50 e0       	ldi	r21, 0x00	; 0
 51a:	a4 0e       	add	r10, r20
 51c:	b5 1e       	adc	r11, r21
 51e:	5f e3       	ldi	r21, 0x3F	; 63
 520:	59 83       	std	Y+1, r21	; 0x01
 522:	0f c0       	rjmp	.+30     	; 0x542 <__stack+0xe3>
 524:	93 36       	cpi	r25, 0x63	; 99
 526:	31 f0       	breq	.+12     	; 0x534 <__stack+0xd5>
 528:	93 37       	cpi	r25, 0x73	; 115
 52a:	79 f0       	breq	.+30     	; 0x54a <__stack+0xeb>
 52c:	93 35       	cpi	r25, 0x53	; 83
 52e:	09 f0       	breq	.+2      	; 0x532 <__stack+0xd3>
 530:	56 c0       	rjmp	.+172    	; 0x5de <__stack+0x17f>
 532:	20 c0       	rjmp	.+64     	; 0x574 <__stack+0x115>
 534:	f5 01       	movw	r30, r10
 536:	80 81       	ld	r24, Z
 538:	89 83       	std	Y+1, r24	; 0x01
 53a:	42 e0       	ldi	r20, 0x02	; 2
 53c:	50 e0       	ldi	r21, 0x00	; 0
 53e:	a4 0e       	add	r10, r20
 540:	b5 1e       	adc	r11, r21
 542:	61 01       	movw	r12, r2
 544:	01 e0       	ldi	r16, 0x01	; 1
 546:	10 e0       	ldi	r17, 0x00	; 0
 548:	12 c0       	rjmp	.+36     	; 0x56e <__stack+0x10f>
 54a:	f5 01       	movw	r30, r10
 54c:	c0 80       	ld	r12, Z
 54e:	d1 80       	ldd	r13, Z+1	; 0x01
 550:	f6 fc       	sbrc	r15, 6
 552:	03 c0       	rjmp	.+6      	; 0x55a <__stack+0xfb>
 554:	6f ef       	ldi	r22, 0xFF	; 255
 556:	7f ef       	ldi	r23, 0xFF	; 255
 558:	02 c0       	rjmp	.+4      	; 0x55e <__stack+0xff>
 55a:	69 2d       	mov	r22, r9
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	42 e0       	ldi	r20, 0x02	; 2
 560:	50 e0       	ldi	r21, 0x00	; 0
 562:	a4 0e       	add	r10, r20
 564:	b5 1e       	adc	r11, r21
 566:	c6 01       	movw	r24, r12
 568:	0e 94 ef 03 	call	0x7de	; 0x7de <strnlen>
 56c:	8c 01       	movw	r16, r24
 56e:	5f e7       	ldi	r21, 0x7F	; 127
 570:	f5 22       	and	r15, r21
 572:	14 c0       	rjmp	.+40     	; 0x59c <__stack+0x13d>
 574:	f5 01       	movw	r30, r10
 576:	c0 80       	ld	r12, Z
 578:	d1 80       	ldd	r13, Z+1	; 0x01
 57a:	f6 fc       	sbrc	r15, 6
 57c:	03 c0       	rjmp	.+6      	; 0x584 <__stack+0x125>
 57e:	6f ef       	ldi	r22, 0xFF	; 255
 580:	7f ef       	ldi	r23, 0xFF	; 255
 582:	02 c0       	rjmp	.+4      	; 0x588 <__stack+0x129>
 584:	69 2d       	mov	r22, r9
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	42 e0       	ldi	r20, 0x02	; 2
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	a4 0e       	add	r10, r20
 58e:	b5 1e       	adc	r11, r21
 590:	c6 01       	movw	r24, r12
 592:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <strnlen_P>
 596:	8c 01       	movw	r16, r24
 598:	50 e8       	ldi	r21, 0x80	; 128
 59a:	f5 2a       	or	r15, r21
 59c:	f3 fe       	sbrs	r15, 3
 59e:	07 c0       	rjmp	.+14     	; 0x5ae <__stack+0x14f>
 5a0:	1a c0       	rjmp	.+52     	; 0x5d6 <__stack+0x177>
 5a2:	80 e2       	ldi	r24, 0x20	; 32
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	b3 01       	movw	r22, r6
 5a8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <fputc>
 5ac:	ea 94       	dec	r14
 5ae:	8e 2d       	mov	r24, r14
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	08 17       	cp	r16, r24
 5b4:	19 07       	cpc	r17, r25
 5b6:	a8 f3       	brcs	.-22     	; 0x5a2 <__stack+0x143>
 5b8:	0e c0       	rjmp	.+28     	; 0x5d6 <__stack+0x177>
 5ba:	f6 01       	movw	r30, r12
 5bc:	f7 fc       	sbrc	r15, 7
 5be:	85 91       	lpm	r24, Z+
 5c0:	f7 fe       	sbrs	r15, 7
 5c2:	81 91       	ld	r24, Z+
 5c4:	6f 01       	movw	r12, r30
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	b3 01       	movw	r22, r6
 5ca:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <fputc>
 5ce:	e1 10       	cpse	r14, r1
 5d0:	ea 94       	dec	r14
 5d2:	01 50       	subi	r16, 0x01	; 1
 5d4:	10 40       	sbci	r17, 0x00	; 0
 5d6:	01 15       	cp	r16, r1
 5d8:	11 05       	cpc	r17, r1
 5da:	79 f7       	brne	.-34     	; 0x5ba <__stack+0x15b>
 5dc:	ea c0       	rjmp	.+468    	; 0x7b2 <__stack+0x353>
 5de:	94 36       	cpi	r25, 0x64	; 100
 5e0:	11 f0       	breq	.+4      	; 0x5e6 <__stack+0x187>
 5e2:	99 36       	cpi	r25, 0x69	; 105
 5e4:	69 f5       	brne	.+90     	; 0x640 <__stack+0x1e1>
 5e6:	f7 fe       	sbrs	r15, 7
 5e8:	08 c0       	rjmp	.+16     	; 0x5fa <__stack+0x19b>
 5ea:	f5 01       	movw	r30, r10
 5ec:	20 81       	ld	r18, Z
 5ee:	31 81       	ldd	r19, Z+1	; 0x01
 5f0:	42 81       	ldd	r20, Z+2	; 0x02
 5f2:	53 81       	ldd	r21, Z+3	; 0x03
 5f4:	84 e0       	ldi	r24, 0x04	; 4
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0a c0       	rjmp	.+20     	; 0x60e <__stack+0x1af>
 5fa:	f5 01       	movw	r30, r10
 5fc:	80 81       	ld	r24, Z
 5fe:	91 81       	ldd	r25, Z+1	; 0x01
 600:	9c 01       	movw	r18, r24
 602:	44 27       	eor	r20, r20
 604:	37 fd       	sbrc	r19, 7
 606:	40 95       	com	r20
 608:	54 2f       	mov	r21, r20
 60a:	82 e0       	ldi	r24, 0x02	; 2
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	a8 0e       	add	r10, r24
 610:	b9 1e       	adc	r11, r25
 612:	9f e6       	ldi	r25, 0x6F	; 111
 614:	f9 22       	and	r15, r25
 616:	57 ff       	sbrs	r21, 7
 618:	09 c0       	rjmp	.+18     	; 0x62c <__stack+0x1cd>
 61a:	50 95       	com	r21
 61c:	40 95       	com	r20
 61e:	30 95       	com	r19
 620:	21 95       	neg	r18
 622:	3f 4f       	sbci	r19, 0xFF	; 255
 624:	4f 4f       	sbci	r20, 0xFF	; 255
 626:	5f 4f       	sbci	r21, 0xFF	; 255
 628:	e0 e8       	ldi	r30, 0x80	; 128
 62a:	fe 2a       	or	r15, r30
 62c:	ca 01       	movw	r24, r20
 62e:	b9 01       	movw	r22, r18
 630:	a1 01       	movw	r20, r2
 632:	2a e0       	ldi	r18, 0x0A	; 10
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	0e 94 26 04 	call	0x84c	; 0x84c <__ultoa_invert>
 63a:	d8 2e       	mov	r13, r24
 63c:	d2 18       	sub	r13, r2
 63e:	40 c0       	rjmp	.+128    	; 0x6c0 <__stack+0x261>
 640:	95 37       	cpi	r25, 0x75	; 117
 642:	29 f4       	brne	.+10     	; 0x64e <__stack+0x1ef>
 644:	1f 2d       	mov	r17, r15
 646:	1f 7e       	andi	r17, 0xEF	; 239
 648:	2a e0       	ldi	r18, 0x0A	; 10
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	1d c0       	rjmp	.+58     	; 0x688 <__stack+0x229>
 64e:	1f 2d       	mov	r17, r15
 650:	19 7f       	andi	r17, 0xF9	; 249
 652:	9f 36       	cpi	r25, 0x6F	; 111
 654:	61 f0       	breq	.+24     	; 0x66e <__stack+0x20f>
 656:	90 37       	cpi	r25, 0x70	; 112
 658:	20 f4       	brcc	.+8      	; 0x662 <__stack+0x203>
 65a:	98 35       	cpi	r25, 0x58	; 88
 65c:	09 f0       	breq	.+2      	; 0x660 <__stack+0x201>
 65e:	ac c0       	rjmp	.+344    	; 0x7b8 <__stack+0x359>
 660:	0f c0       	rjmp	.+30     	; 0x680 <__stack+0x221>
 662:	90 37       	cpi	r25, 0x70	; 112
 664:	39 f0       	breq	.+14     	; 0x674 <__stack+0x215>
 666:	98 37       	cpi	r25, 0x78	; 120
 668:	09 f0       	breq	.+2      	; 0x66c <__stack+0x20d>
 66a:	a6 c0       	rjmp	.+332    	; 0x7b8 <__stack+0x359>
 66c:	04 c0       	rjmp	.+8      	; 0x676 <__stack+0x217>
 66e:	28 e0       	ldi	r18, 0x08	; 8
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	0a c0       	rjmp	.+20     	; 0x688 <__stack+0x229>
 674:	10 61       	ori	r17, 0x10	; 16
 676:	14 fd       	sbrc	r17, 4
 678:	14 60       	ori	r17, 0x04	; 4
 67a:	20 e1       	ldi	r18, 0x10	; 16
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	04 c0       	rjmp	.+8      	; 0x688 <__stack+0x229>
 680:	14 fd       	sbrc	r17, 4
 682:	16 60       	ori	r17, 0x06	; 6
 684:	20 e1       	ldi	r18, 0x10	; 16
 686:	32 e0       	ldi	r19, 0x02	; 2
 688:	17 ff       	sbrs	r17, 7
 68a:	08 c0       	rjmp	.+16     	; 0x69c <__stack+0x23d>
 68c:	f5 01       	movw	r30, r10
 68e:	60 81       	ld	r22, Z
 690:	71 81       	ldd	r23, Z+1	; 0x01
 692:	82 81       	ldd	r24, Z+2	; 0x02
 694:	93 81       	ldd	r25, Z+3	; 0x03
 696:	44 e0       	ldi	r20, 0x04	; 4
 698:	50 e0       	ldi	r21, 0x00	; 0
 69a:	08 c0       	rjmp	.+16     	; 0x6ac <__stack+0x24d>
 69c:	f5 01       	movw	r30, r10
 69e:	80 81       	ld	r24, Z
 6a0:	91 81       	ldd	r25, Z+1	; 0x01
 6a2:	bc 01       	movw	r22, r24
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	42 e0       	ldi	r20, 0x02	; 2
 6aa:	50 e0       	ldi	r21, 0x00	; 0
 6ac:	a4 0e       	add	r10, r20
 6ae:	b5 1e       	adc	r11, r21
 6b0:	a1 01       	movw	r20, r2
 6b2:	0e 94 26 04 	call	0x84c	; 0x84c <__ultoa_invert>
 6b6:	d8 2e       	mov	r13, r24
 6b8:	d2 18       	sub	r13, r2
 6ba:	8f e7       	ldi	r24, 0x7F	; 127
 6bc:	f8 2e       	mov	r15, r24
 6be:	f1 22       	and	r15, r17
 6c0:	f6 fe       	sbrs	r15, 6
 6c2:	0b c0       	rjmp	.+22     	; 0x6da <__stack+0x27b>
 6c4:	5e ef       	ldi	r21, 0xFE	; 254
 6c6:	f5 22       	and	r15, r21
 6c8:	d9 14       	cp	r13, r9
 6ca:	38 f4       	brcc	.+14     	; 0x6da <__stack+0x27b>
 6cc:	f4 fe       	sbrs	r15, 4
 6ce:	07 c0       	rjmp	.+14     	; 0x6de <__stack+0x27f>
 6d0:	f2 fc       	sbrc	r15, 2
 6d2:	05 c0       	rjmp	.+10     	; 0x6de <__stack+0x27f>
 6d4:	8f ee       	ldi	r24, 0xEF	; 239
 6d6:	f8 22       	and	r15, r24
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <__stack+0x27f>
 6da:	1d 2d       	mov	r17, r13
 6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <__stack+0x281>
 6de:	19 2d       	mov	r17, r9
 6e0:	f4 fe       	sbrs	r15, 4
 6e2:	0d c0       	rjmp	.+26     	; 0x6fe <__stack+0x29f>
 6e4:	fe 01       	movw	r30, r28
 6e6:	ed 0d       	add	r30, r13
 6e8:	f1 1d       	adc	r31, r1
 6ea:	80 81       	ld	r24, Z
 6ec:	80 33       	cpi	r24, 0x30	; 48
 6ee:	19 f4       	brne	.+6      	; 0x6f6 <__stack+0x297>
 6f0:	99 ee       	ldi	r25, 0xE9	; 233
 6f2:	f9 22       	and	r15, r25
 6f4:	08 c0       	rjmp	.+16     	; 0x706 <__stack+0x2a7>
 6f6:	1f 5f       	subi	r17, 0xFF	; 255
 6f8:	f2 fe       	sbrs	r15, 2
 6fa:	05 c0       	rjmp	.+10     	; 0x706 <__stack+0x2a7>
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <__stack+0x2a5>
 6fe:	8f 2d       	mov	r24, r15
 700:	86 78       	andi	r24, 0x86	; 134
 702:	09 f0       	breq	.+2      	; 0x706 <__stack+0x2a7>
 704:	1f 5f       	subi	r17, 0xFF	; 255
 706:	0f 2d       	mov	r16, r15
 708:	f3 fc       	sbrc	r15, 3
 70a:	14 c0       	rjmp	.+40     	; 0x734 <__stack+0x2d5>
 70c:	f0 fe       	sbrs	r15, 0
 70e:	0f c0       	rjmp	.+30     	; 0x72e <__stack+0x2cf>
 710:	1e 15       	cp	r17, r14
 712:	10 f0       	brcs	.+4      	; 0x718 <__stack+0x2b9>
 714:	9d 2c       	mov	r9, r13
 716:	0b c0       	rjmp	.+22     	; 0x72e <__stack+0x2cf>
 718:	9d 2c       	mov	r9, r13
 71a:	9e 0c       	add	r9, r14
 71c:	91 1a       	sub	r9, r17
 71e:	1e 2d       	mov	r17, r14
 720:	06 c0       	rjmp	.+12     	; 0x72e <__stack+0x2cf>
 722:	80 e2       	ldi	r24, 0x20	; 32
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	b3 01       	movw	r22, r6
 728:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <fputc>
 72c:	1f 5f       	subi	r17, 0xFF	; 255
 72e:	1e 15       	cp	r17, r14
 730:	c0 f3       	brcs	.-16     	; 0x722 <__stack+0x2c3>
 732:	04 c0       	rjmp	.+8      	; 0x73c <__stack+0x2dd>
 734:	1e 15       	cp	r17, r14
 736:	10 f4       	brcc	.+4      	; 0x73c <__stack+0x2dd>
 738:	e1 1a       	sub	r14, r17
 73a:	01 c0       	rjmp	.+2      	; 0x73e <__stack+0x2df>
 73c:	ee 24       	eor	r14, r14
 73e:	04 ff       	sbrs	r16, 4
 740:	0f c0       	rjmp	.+30     	; 0x760 <__stack+0x301>
 742:	80 e3       	ldi	r24, 0x30	; 48
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	b3 01       	movw	r22, r6
 748:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <fputc>
 74c:	02 ff       	sbrs	r16, 2
 74e:	1d c0       	rjmp	.+58     	; 0x78a <__stack+0x32b>
 750:	01 fd       	sbrc	r16, 1
 752:	03 c0       	rjmp	.+6      	; 0x75a <__stack+0x2fb>
 754:	88 e7       	ldi	r24, 0x78	; 120
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	0e c0       	rjmp	.+28     	; 0x776 <__stack+0x317>
 75a:	88 e5       	ldi	r24, 0x58	; 88
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	0b c0       	rjmp	.+22     	; 0x776 <__stack+0x317>
 760:	80 2f       	mov	r24, r16
 762:	86 78       	andi	r24, 0x86	; 134
 764:	91 f0       	breq	.+36     	; 0x78a <__stack+0x32b>
 766:	01 ff       	sbrs	r16, 1
 768:	02 c0       	rjmp	.+4      	; 0x76e <__stack+0x30f>
 76a:	8b e2       	ldi	r24, 0x2B	; 43
 76c:	01 c0       	rjmp	.+2      	; 0x770 <__stack+0x311>
 76e:	80 e2       	ldi	r24, 0x20	; 32
 770:	f7 fc       	sbrc	r15, 7
 772:	8d e2       	ldi	r24, 0x2D	; 45
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	b3 01       	movw	r22, r6
 778:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <fputc>
 77c:	06 c0       	rjmp	.+12     	; 0x78a <__stack+0x32b>
 77e:	80 e3       	ldi	r24, 0x30	; 48
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	b3 01       	movw	r22, r6
 784:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <fputc>
 788:	9a 94       	dec	r9
 78a:	d9 14       	cp	r13, r9
 78c:	c0 f3       	brcs	.-16     	; 0x77e <__stack+0x31f>
 78e:	da 94       	dec	r13
 790:	f1 01       	movw	r30, r2
 792:	ed 0d       	add	r30, r13
 794:	f1 1d       	adc	r31, r1
 796:	80 81       	ld	r24, Z
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	b3 01       	movw	r22, r6
 79c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <fputc>
 7a0:	dd 20       	and	r13, r13
 7a2:	a9 f7       	brne	.-22     	; 0x78e <__stack+0x32f>
 7a4:	06 c0       	rjmp	.+12     	; 0x7b2 <__stack+0x353>
 7a6:	80 e2       	ldi	r24, 0x20	; 32
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	b3 01       	movw	r22, r6
 7ac:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <fputc>
 7b0:	ea 94       	dec	r14
 7b2:	ee 20       	and	r14, r14
 7b4:	c1 f7       	brne	.-16     	; 0x7a6 <__stack+0x347>
 7b6:	43 ce       	rjmp	.-890    	; 0x43e <vfprintf+0x30>
 7b8:	f3 01       	movw	r30, r6
 7ba:	66 81       	ldd	r22, Z+6	; 0x06
 7bc:	77 81       	ldd	r23, Z+7	; 0x07
 7be:	cb 01       	movw	r24, r22
 7c0:	2b 96       	adiw	r28, 0x0b	; 11
 7c2:	e2 e1       	ldi	r30, 0x12	; 18
 7c4:	0c 94 b4 04 	jmp	0x968	; 0x968 <__epilogue_restores__>

000007c8 <strnlen_P>:
 7c8:	fc 01       	movw	r30, r24
 7ca:	05 90       	lpm	r0, Z+
 7cc:	61 50       	subi	r22, 0x01	; 1
 7ce:	70 40       	sbci	r23, 0x00	; 0
 7d0:	01 10       	cpse	r0, r1
 7d2:	d8 f7       	brcc	.-10     	; 0x7ca <strnlen_P+0x2>
 7d4:	80 95       	com	r24
 7d6:	90 95       	com	r25
 7d8:	8e 0f       	add	r24, r30
 7da:	9f 1f       	adc	r25, r31
 7dc:	08 95       	ret

000007de <strnlen>:
 7de:	fc 01       	movw	r30, r24
 7e0:	61 50       	subi	r22, 0x01	; 1
 7e2:	70 40       	sbci	r23, 0x00	; 0
 7e4:	01 90       	ld	r0, Z+
 7e6:	01 10       	cpse	r0, r1
 7e8:	d8 f7       	brcc	.-10     	; 0x7e0 <strnlen+0x2>
 7ea:	80 95       	com	r24
 7ec:	90 95       	com	r25
 7ee:	8e 0f       	add	r24, r30
 7f0:	9f 1f       	adc	r25, r31
 7f2:	08 95       	ret

000007f4 <fputc>:
 7f4:	0f 93       	push	r16
 7f6:	1f 93       	push	r17
 7f8:	cf 93       	push	r28
 7fa:	df 93       	push	r29
 7fc:	8c 01       	movw	r16, r24
 7fe:	eb 01       	movw	r28, r22
 800:	8b 81       	ldd	r24, Y+3	; 0x03
 802:	81 ff       	sbrs	r24, 1
 804:	1b c0       	rjmp	.+54     	; 0x83c <fputc+0x48>
 806:	82 ff       	sbrs	r24, 2
 808:	0d c0       	rjmp	.+26     	; 0x824 <fputc+0x30>
 80a:	2e 81       	ldd	r18, Y+6	; 0x06
 80c:	3f 81       	ldd	r19, Y+7	; 0x07
 80e:	8c 81       	ldd	r24, Y+4	; 0x04
 810:	9d 81       	ldd	r25, Y+5	; 0x05
 812:	28 17       	cp	r18, r24
 814:	39 07       	cpc	r19, r25
 816:	64 f4       	brge	.+24     	; 0x830 <fputc+0x3c>
 818:	e8 81       	ld	r30, Y
 81a:	f9 81       	ldd	r31, Y+1	; 0x01
 81c:	01 93       	st	Z+, r16
 81e:	f9 83       	std	Y+1, r31	; 0x01
 820:	e8 83       	st	Y, r30
 822:	06 c0       	rjmp	.+12     	; 0x830 <fputc+0x3c>
 824:	e8 85       	ldd	r30, Y+8	; 0x08
 826:	f9 85       	ldd	r31, Y+9	; 0x09
 828:	80 2f       	mov	r24, r16
 82a:	09 95       	icall
 82c:	89 2b       	or	r24, r25
 82e:	31 f4       	brne	.+12     	; 0x83c <fputc+0x48>
 830:	8e 81       	ldd	r24, Y+6	; 0x06
 832:	9f 81       	ldd	r25, Y+7	; 0x07
 834:	01 96       	adiw	r24, 0x01	; 1
 836:	9f 83       	std	Y+7, r25	; 0x07
 838:	8e 83       	std	Y+6, r24	; 0x06
 83a:	02 c0       	rjmp	.+4      	; 0x840 <fputc+0x4c>
 83c:	0f ef       	ldi	r16, 0xFF	; 255
 83e:	1f ef       	ldi	r17, 0xFF	; 255
 840:	c8 01       	movw	r24, r16
 842:	df 91       	pop	r29
 844:	cf 91       	pop	r28
 846:	1f 91       	pop	r17
 848:	0f 91       	pop	r16
 84a:	08 95       	ret

0000084c <__ultoa_invert>:
 84c:	fa 01       	movw	r30, r20
 84e:	aa 27       	eor	r26, r26
 850:	28 30       	cpi	r18, 0x08	; 8
 852:	51 f1       	breq	.+84     	; 0x8a8 <__ultoa_invert+0x5c>
 854:	20 31       	cpi	r18, 0x10	; 16
 856:	81 f1       	breq	.+96     	; 0x8b8 <__ultoa_invert+0x6c>
 858:	e8 94       	clt
 85a:	6f 93       	push	r22
 85c:	6e 7f       	andi	r22, 0xFE	; 254
 85e:	6e 5f       	subi	r22, 0xFE	; 254
 860:	7f 4f       	sbci	r23, 0xFF	; 255
 862:	8f 4f       	sbci	r24, 0xFF	; 255
 864:	9f 4f       	sbci	r25, 0xFF	; 255
 866:	af 4f       	sbci	r26, 0xFF	; 255
 868:	b1 e0       	ldi	r27, 0x01	; 1
 86a:	3e d0       	rcall	.+124    	; 0x8e8 <__ultoa_invert+0x9c>
 86c:	b4 e0       	ldi	r27, 0x04	; 4
 86e:	3c d0       	rcall	.+120    	; 0x8e8 <__ultoa_invert+0x9c>
 870:	67 0f       	add	r22, r23
 872:	78 1f       	adc	r23, r24
 874:	89 1f       	adc	r24, r25
 876:	9a 1f       	adc	r25, r26
 878:	a1 1d       	adc	r26, r1
 87a:	68 0f       	add	r22, r24
 87c:	79 1f       	adc	r23, r25
 87e:	8a 1f       	adc	r24, r26
 880:	91 1d       	adc	r25, r1
 882:	a1 1d       	adc	r26, r1
 884:	6a 0f       	add	r22, r26
 886:	71 1d       	adc	r23, r1
 888:	81 1d       	adc	r24, r1
 88a:	91 1d       	adc	r25, r1
 88c:	a1 1d       	adc	r26, r1
 88e:	20 d0       	rcall	.+64     	; 0x8d0 <__ultoa_invert+0x84>
 890:	09 f4       	brne	.+2      	; 0x894 <__ultoa_invert+0x48>
 892:	68 94       	set
 894:	3f 91       	pop	r19
 896:	2a e0       	ldi	r18, 0x0A	; 10
 898:	26 9f       	mul	r18, r22
 89a:	11 24       	eor	r1, r1
 89c:	30 19       	sub	r19, r0
 89e:	30 5d       	subi	r19, 0xD0	; 208
 8a0:	31 93       	st	Z+, r19
 8a2:	de f6       	brtc	.-74     	; 0x85a <__ultoa_invert+0xe>
 8a4:	cf 01       	movw	r24, r30
 8a6:	08 95       	ret
 8a8:	46 2f       	mov	r20, r22
 8aa:	47 70       	andi	r20, 0x07	; 7
 8ac:	40 5d       	subi	r20, 0xD0	; 208
 8ae:	41 93       	st	Z+, r20
 8b0:	b3 e0       	ldi	r27, 0x03	; 3
 8b2:	0f d0       	rcall	.+30     	; 0x8d2 <__ultoa_invert+0x86>
 8b4:	c9 f7       	brne	.-14     	; 0x8a8 <__ultoa_invert+0x5c>
 8b6:	f6 cf       	rjmp	.-20     	; 0x8a4 <__ultoa_invert+0x58>
 8b8:	46 2f       	mov	r20, r22
 8ba:	4f 70       	andi	r20, 0x0F	; 15
 8bc:	40 5d       	subi	r20, 0xD0	; 208
 8be:	4a 33       	cpi	r20, 0x3A	; 58
 8c0:	18 f0       	brcs	.+6      	; 0x8c8 <__ultoa_invert+0x7c>
 8c2:	49 5d       	subi	r20, 0xD9	; 217
 8c4:	31 fd       	sbrc	r19, 1
 8c6:	40 52       	subi	r20, 0x20	; 32
 8c8:	41 93       	st	Z+, r20
 8ca:	02 d0       	rcall	.+4      	; 0x8d0 <__ultoa_invert+0x84>
 8cc:	a9 f7       	brne	.-22     	; 0x8b8 <__ultoa_invert+0x6c>
 8ce:	ea cf       	rjmp	.-44     	; 0x8a4 <__ultoa_invert+0x58>
 8d0:	b4 e0       	ldi	r27, 0x04	; 4
 8d2:	a6 95       	lsr	r26
 8d4:	97 95       	ror	r25
 8d6:	87 95       	ror	r24
 8d8:	77 95       	ror	r23
 8da:	67 95       	ror	r22
 8dc:	ba 95       	dec	r27
 8de:	c9 f7       	brne	.-14     	; 0x8d2 <__ultoa_invert+0x86>
 8e0:	00 97       	sbiw	r24, 0x00	; 0
 8e2:	61 05       	cpc	r22, r1
 8e4:	71 05       	cpc	r23, r1
 8e6:	08 95       	ret
 8e8:	9b 01       	movw	r18, r22
 8ea:	ac 01       	movw	r20, r24
 8ec:	0a 2e       	mov	r0, r26
 8ee:	06 94       	lsr	r0
 8f0:	57 95       	ror	r21
 8f2:	47 95       	ror	r20
 8f4:	37 95       	ror	r19
 8f6:	27 95       	ror	r18
 8f8:	ba 95       	dec	r27
 8fa:	c9 f7       	brne	.-14     	; 0x8ee <__ultoa_invert+0xa2>
 8fc:	62 0f       	add	r22, r18
 8fe:	73 1f       	adc	r23, r19
 900:	84 1f       	adc	r24, r20
 902:	95 1f       	adc	r25, r21
 904:	a0 1d       	adc	r26, r0
 906:	08 95       	ret

00000908 <__udivmodhi4>:
 908:	aa 1b       	sub	r26, r26
 90a:	bb 1b       	sub	r27, r27
 90c:	51 e1       	ldi	r21, 0x11	; 17
 90e:	07 c0       	rjmp	.+14     	; 0x91e <__udivmodhi4_ep>

00000910 <__udivmodhi4_loop>:
 910:	aa 1f       	adc	r26, r26
 912:	bb 1f       	adc	r27, r27
 914:	a6 17       	cp	r26, r22
 916:	b7 07       	cpc	r27, r23
 918:	10 f0       	brcs	.+4      	; 0x91e <__udivmodhi4_ep>
 91a:	a6 1b       	sub	r26, r22
 91c:	b7 0b       	sbc	r27, r23

0000091e <__udivmodhi4_ep>:
 91e:	88 1f       	adc	r24, r24
 920:	99 1f       	adc	r25, r25
 922:	5a 95       	dec	r21
 924:	a9 f7       	brne	.-22     	; 0x910 <__udivmodhi4_loop>
 926:	80 95       	com	r24
 928:	90 95       	com	r25
 92a:	bc 01       	movw	r22, r24
 92c:	cd 01       	movw	r24, r26
 92e:	08 95       	ret

00000930 <__prologue_saves__>:
 930:	2f 92       	push	r2
 932:	3f 92       	push	r3
 934:	4f 92       	push	r4
 936:	5f 92       	push	r5
 938:	6f 92       	push	r6
 93a:	7f 92       	push	r7
 93c:	8f 92       	push	r8
 93e:	9f 92       	push	r9
 940:	af 92       	push	r10
 942:	bf 92       	push	r11
 944:	cf 92       	push	r12
 946:	df 92       	push	r13
 948:	ef 92       	push	r14
 94a:	ff 92       	push	r15
 94c:	0f 93       	push	r16
 94e:	1f 93       	push	r17
 950:	cf 93       	push	r28
 952:	df 93       	push	r29
 954:	cd b7       	in	r28, 0x3d	; 61
 956:	de b7       	in	r29, 0x3e	; 62
 958:	ca 1b       	sub	r28, r26
 95a:	db 0b       	sbc	r29, r27
 95c:	0f b6       	in	r0, 0x3f	; 63
 95e:	f8 94       	cli
 960:	de bf       	out	0x3e, r29	; 62
 962:	0f be       	out	0x3f, r0	; 63
 964:	cd bf       	out	0x3d, r28	; 61
 966:	09 94       	ijmp

00000968 <__epilogue_restores__>:
 968:	2a 88       	ldd	r2, Y+18	; 0x12
 96a:	39 88       	ldd	r3, Y+17	; 0x11
 96c:	48 88       	ldd	r4, Y+16	; 0x10
 96e:	5f 84       	ldd	r5, Y+15	; 0x0f
 970:	6e 84       	ldd	r6, Y+14	; 0x0e
 972:	7d 84       	ldd	r7, Y+13	; 0x0d
 974:	8c 84       	ldd	r8, Y+12	; 0x0c
 976:	9b 84       	ldd	r9, Y+11	; 0x0b
 978:	aa 84       	ldd	r10, Y+10	; 0x0a
 97a:	b9 84       	ldd	r11, Y+9	; 0x09
 97c:	c8 84       	ldd	r12, Y+8	; 0x08
 97e:	df 80       	ldd	r13, Y+7	; 0x07
 980:	ee 80       	ldd	r14, Y+6	; 0x06
 982:	fd 80       	ldd	r15, Y+5	; 0x05
 984:	0c 81       	ldd	r16, Y+4	; 0x04
 986:	1b 81       	ldd	r17, Y+3	; 0x03
 988:	aa 81       	ldd	r26, Y+2	; 0x02
 98a:	b9 81       	ldd	r27, Y+1	; 0x01
 98c:	ce 0f       	add	r28, r30
 98e:	d1 1d       	adc	r29, r1
 990:	0f b6       	in	r0, 0x3f	; 63
 992:	f8 94       	cli
 994:	de bf       	out	0x3e, r29	; 62
 996:	0f be       	out	0x3f, r0	; 63
 998:	cd bf       	out	0x3d, r28	; 61
 99a:	ed 01       	movw	r28, r26
 99c:	08 95       	ret

0000099e <_exit>:
 99e:	f8 94       	cli

000009a0 <__stop_program>:
 9a0:	ff cf       	rjmp	.-2      	; 0x9a0 <__stop_program>
