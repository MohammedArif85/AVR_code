
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000009f0  00000a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  00800080  00800080  00000aa4  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000103  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b0  00000000  00000000  00000bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000279  00000000  00000000  00001577  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b4  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a4  00000000  00000000  00001e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fc  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3a       	cpi	r26, 0xAE	; 174
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <main>
  8a:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_reset>:
#define LCD_RW      0x02
#define LCD_EN      0x04

void lcd_reset(void)
{
        lcd_port = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	88 bb       	out	0x18, r24	; 24
  96:	88 ec       	ldi	r24, 0xC8	; 200
  98:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	20 e9       	ldi	r18, 0x90	; 144
  9c:	31 e0       	ldi	r19, 0x01	; 1
  9e:	f9 01       	movw	r30, r18
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_reset+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a6:	d9 f7       	brne	.-10     	; 0x9e <lcd_reset+0xc>
        _delay_ms(20);
        lcd_port = 0x30+LCD_EN;
  a8:	94 e3       	ldi	r25, 0x34	; 52
  aa:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  ac:	80 e3       	ldi	r24, 0x30	; 48
  ae:	88 bb       	out	0x18, r24	; 24
  b0:	e0 e4       	ldi	r30, 0x40	; 64
  b2:	fc e9       	ldi	r31, 0x9C	; 156
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_reset+0x22>
        _delay_ms(10);
        lcd_port = 0x30+LCD_EN;
  b8:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	20 ea       	ldi	r18, 0xA0	; 160
  be:	3f e0       	ldi	r19, 0x0F	; 15
  c0:	f9 01       	movw	r30, r18
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_reset+0x30>
        _delay_ms(1);
        lcd_port = 0x30+LCD_EN;
  c6:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  c8:	88 bb       	out	0x18, r24	; 24
  ca:	c9 01       	movw	r24, r18
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_reset+0x3a>
        _delay_ms(1);
        lcd_port = 0x20+LCD_EN;
  d0:	84 e2       	ldi	r24, 0x24	; 36
  d2:	88 bb       	out	0x18, r24	; 24
        lcd_port = 0x20;
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	88 bb       	out	0x18, r24	; 24
  d8:	c9 01       	movw	r24, r18
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd_reset+0x48>
        _delay_ms(1);
}
  de:	08 95       	ret

000000e0 <lcd_cmd>:
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
  e0:	38 2f       	mov	r19, r24
  e2:	30 7f       	andi	r19, 0xF0	; 240
  e4:	23 2f       	mov	r18, r19
  e6:	24 60       	ori	r18, 0x04	; 4
  e8:	28 bb       	out	0x18, r18	; 24
        lcd_port = (cmd & 0xF0);
  ea:	38 bb       	out	0x18, r19	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	24 e0       	ldi	r18, 0x04	; 4
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	2a 95       	dec	r18
  f6:	e1 f7       	brne	.-8      	; 0xf0 <lcd_cmd+0x10>
  f8:	28 2f       	mov	r18, r24
  fa:	24 60       	ori	r18, 0x04	; 4
  fc:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((cmd << 4) & 0xF0);
  fe:	88 bb       	out	0x18, r24	; 24
 100:	80 e4       	ldi	r24, 0x40	; 64
 102:	9f e1       	ldi	r25, 0x1F	; 31
 104:	fc 01       	movw	r30, r24
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_cmd+0x26>

      

        _delay_ms(2);
        _delay_ms(2);
}
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_cmd+0x2a>
 10e:	08 95       	ret

00000110 <lcd_init>:

void lcd_init (void)
{       DDRB=0xFF;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	87 bb       	out	0x17, r24	; 23
        PORTB=0x00; 
 114:	18 ba       	out	0x18, r1	; 24
        lcd_reset();         // Call LCD reset
 116:	0e 94 49 00 	call	0x92	; 0x92 <lcd_reset>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 11a:	84 e2       	ldi	r24, 0x24	; 36
 11c:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 11e:	80 e2       	ldi	r24, 0x20	; 32
 120:	88 bb       	out	0x18, r24	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 122:	54 e8       	ldi	r21, 0x84	; 132
 124:	58 bb       	out	0x18, r21	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 126:	40 e8       	ldi	r20, 0x80	; 128
 128:	48 bb       	out	0x18, r20	; 24
 12a:	20 e4       	ldi	r18, 0x40	; 64
 12c:	3f e1       	ldi	r19, 0x1F	; 31
 12e:	c9 01       	movw	r24, r18
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lcd_init+0x20>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 134:	c9 01       	movw	r24, r18
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <lcd_init+0x26>
 13a:	94 e0       	ldi	r25, 0x04	; 4
 13c:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 13e:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 140:	84 ec       	ldi	r24, 0xC4	; 196
 142:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 144:	80 ec       	ldi	r24, 0xC0	; 192
 146:	88 bb       	out	0x18, r24	; 24
 148:	f9 01       	movw	r30, r18
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_init+0x3a>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 14e:	f9 01       	movw	r30, r18
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x40>
 154:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 156:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 158:	84 e6       	ldi	r24, 0x64	; 100
 15a:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 15c:	80 e6       	ldi	r24, 0x60	; 96
 15e:	88 bb       	out	0x18, r24	; 24
 160:	f9 01       	movw	r30, r18
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_init+0x52>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 166:	f9 01       	movw	r30, r18
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_init+0x58>
 16c:	58 bb       	out	0x18, r21	; 24
        lcd_port = (cmd & 0xF0);
 16e:	48 bb       	out	0x18, r20	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 170:	98 bb       	out	0x18, r25	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 172:	18 ba       	out	0x18, r1	; 24
 174:	c9 01       	movw	r24, r18
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_init+0x66>
        lcd_reset();         // Call LCD reset
        lcd_cmd(0x28);       // 4-bit mode - 2 line - 5x7 font.
        lcd_cmd(0x0C);       // Display on cursor - off .
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 }
 17a:	c9 01       	movw	r24, r18
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <lcd_init+0x6c>
 180:	08 95       	ret

00000182 <lcd_data>:


void lcd_data (unsigned char dat)
{
        lcd_port = ((dat & 0xF0)|LCD_EN|LCD_RS);
 182:	98 2f       	mov	r25, r24
 184:	90 7f       	andi	r25, 0xF0	; 240
 186:	29 2f       	mov	r18, r25
 188:	25 60       	ori	r18, 0x05	; 5
 18a:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((dat & 0xF0)|LCD_RS);
 18c:	91 60       	ori	r25, 0x01	; 1
 18e:	98 bb       	out	0x18, r25	; 24
		
		lcd_port = (((dat << 4) & 0xF0)|LCD_EN|LCD_RS);
 190:	82 95       	swap	r24
 192:	80 7f       	andi	r24, 0xF0	; 240
 194:	98 2f       	mov	r25, r24
 196:	95 60       	ori	r25, 0x05	; 5
 198:	98 bb       	out	0x18, r25	; 24
        lcd_port = (((dat << 4) & 0xF0)|LCD_RS);
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	88 bb       	out	0x18, r24	; 24
 19e:	80 e4       	ldi	r24, 0x40	; 64
 1a0:	9f e1       	ldi	r25, 0x1F	; 31
 1a2:	fc 01       	movw	r30, r24
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_data+0x22>
       
      

       _delay_ms(2);
       _delay_ms(2);
}
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_data+0x26>
 1ac:	08 95       	ret

000001ae <lcd_puts>:
void lcd_puts(char *aaa)
{
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <lcd_puts+0xc>
unsigned int i;
for(i=0;aaa[i]!=0;i++)
lcd_data(aaa[i]);
 1b6:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
       _delay_ms(2);
}
void lcd_puts(char *aaa)
{
unsigned int i;
for(i=0;aaa[i]!=0;i++)
 1ba:	89 91       	ld	r24, Y+
 1bc:	88 23       	and	r24, r24
 1be:	d9 f7       	brne	.-10     	; 0x1b6 <lcd_puts+0x8>
lcd_data(aaa[i]);

}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <itoa1>:
void itoa1(uint16_t num)
{
 1c6:	cf 92       	push	r12
 1c8:	df 92       	push	r13
 1ca:	ef 92       	push	r14
 1cc:	ff 92       	push	r15
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	7c 01       	movw	r14, r24

 unsigned char a,b,c,d;

 a=num%10;
 num=num/10;
 1d4:	6a e0       	ldi	r22, 0x0A	; 10
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	0e 94 ab 04 	call	0x956	; 0x956 <__udivmodhi4>
 1dc:	d6 2e       	mov	r13, r22
 1de:	c7 2e       	mov	r12, r23
 b=num%10;
 num=num/10;
 1e0:	86 2f       	mov	r24, r22
 1e2:	97 2f       	mov	r25, r23
 1e4:	6a e0       	ldi	r22, 0x0A	; 10
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	0e 94 ab 04 	call	0x956	; 0x956 <__udivmodhi4>
 1ec:	16 2f       	mov	r17, r22
 1ee:	07 2f       	mov	r16, r23
 c=num%10;
 num=num/10;
 d=num%10;
 lcd_data(0x30+d); 
 1f0:	86 2f       	mov	r24, r22
 1f2:	97 2f       	mov	r25, r23
 1f4:	6a e0       	ldi	r22, 0x0A	; 10
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	0e 94 ab 04 	call	0x956	; 0x956 <__udivmodhi4>
 1fc:	cb 01       	movw	r24, r22
 1fe:	6a e0       	ldi	r22, 0x0A	; 10
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	0e 94 ab 04 	call	0x956	; 0x956 <__udivmodhi4>
 206:	80 5d       	subi	r24, 0xD0	; 208
 208:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
 lcd_data(0x30+c); 
 20c:	81 2f       	mov	r24, r17
 20e:	90 2f       	mov	r25, r16
 210:	6a e0       	ldi	r22, 0x0A	; 10
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	0e 94 ab 04 	call	0x956	; 0x956 <__udivmodhi4>
 218:	80 5d       	subi	r24, 0xD0	; 208
 21a:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
 lcd_data(0x30+b); 
 21e:	8d 2d       	mov	r24, r13
 220:	9c 2d       	mov	r25, r12
 222:	6a e0       	ldi	r22, 0x0A	; 10
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	0e 94 ab 04 	call	0x956	; 0x956 <__udivmodhi4>
 22a:	80 5d       	subi	r24, 0xD0	; 208
 22c:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
 lcd_data(0x30+a); 
 230:	c7 01       	movw	r24, r14
 232:	6a e0       	ldi	r22, 0x0A	; 10
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	0e 94 ab 04 	call	0x956	; 0x956 <__udivmodhi4>
 23a:	80 5d       	subi	r24, 0xD0	; 208
 23c:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_data>
 
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	08 95       	ret

0000024e <ioinit>:
    return(0);
}
void ioinit (void)
{
    //1 = output, 0 = input
    DDRD = 0b11111110; //PORTD (RX on PD0)
 24e:	8e ef       	ldi	r24, 0xFE	; 254
 250:	81 bb       	out	0x11, r24	; 17

    //USART Baud rate: 9600
    UBRRH = MYUBRR >> 8;
 252:	10 bc       	out	0x20, r1	; 32
    UBRRL = MYUBRR;
 254:	87 e6       	ldi	r24, 0x67	; 103
 256:	89 b9       	out	0x09, r24	; 9
    
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
 258:	86 e8       	ldi	r24, 0x86	; 134
 25a:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN); 
 25c:	88 e1       	ldi	r24, 0x18	; 24
 25e:	8a b9       	out	0x0a, r24	; 10
	
	stdout = &mystdout; //Required for printf init
 260:	81 e7       	ldi	r24, 0x71	; 113
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	90 93 ab 00 	sts	0x00AB, r25
 268:	80 93 aa 00 	sts	0x00AA, r24
}
 26c:	08 95       	ret

0000026e <uart_putchar>:

static int uart_putchar(char c, FILE *stream)
{
 26e:	1f 93       	push	r17
 270:	18 2f       	mov	r17, r24
    if (c == '\n') uart_putchar('\r', stream);
 272:	8a 30       	cpi	r24, 0x0A	; 10
 274:	19 f4       	brne	.+6      	; 0x27c <uart_putchar+0xe>
 276:	8d e0       	ldi	r24, 0x0D	; 13
 278:	0e 94 37 01 	call	0x26e	; 0x26e <uart_putchar>
  
    loop_until_bit_is_set(UCSRA, UDRE);
 27c:	5d 9b       	sbis	0x0b, 5	; 11
 27e:	fe cf       	rjmp	.-4      	; 0x27c <uart_putchar+0xe>
    UDR = c;
 280:	1c b9       	out	0x0c, r17	; 12
    
    return 0;
}
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	1f 91       	pop	r17
 288:	08 95       	ret

0000028a <uart_getchar>:

uint8_t uart_getchar(void)
{
    while( !(UCSRA & (1<<RXC)) );
 28a:	5f 9b       	sbis	0x0b, 7	; 11
 28c:	fe cf       	rjmp	.-4      	; 0x28a <uart_getchar>
    return(UDR);
 28e:	8c b1       	in	r24, 0x0c	; 12
}
 290:	08 95       	ret

00000292 <read_x>:

void read_x(void)
{
	DDRA=0b11110101; // Output on PA3(5V) and PA0(GND), Input on PC4(ADC)
 292:	85 ef       	ldi	r24, 0xF5	; 245
 294:	8a bb       	out	0x1a, r24	; 26
	sbi(PORTA, 0); //pull PC4 to 5V
 296:	d8 9a       	sbi	0x1b, 0	; 27
	cbi(PORTA, 2); //pull PC1 to GND
 298:	da 98       	cbi	0x1b, 2	; 27
 29a:	80 ea       	ldi	r24, 0xA0	; 160
 29c:	9f e0       	ldi	r25, 0x0F	; 15
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <read_x+0xc>
	
	_delay_ms(1);
	
	ADMUX = 0x20|(1 << MUX0);//ADC1
 2a2:	81 e2       	ldi	r24, 0x21	; 33
 2a4:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN)|(1 << ADSC)|(1<<ADPS2)|(1<<ADPS1);
 2a6:	86 ec       	ldi	r24, 0xC6	; 198
 2a8:	86 b9       	out	0x06, r24	; 6
	
	while(ADCSRA & (1 << ADSC));
 2aa:	36 99       	sbic	0x06, 6	; 6
 2ac:	fe cf       	rjmp	.-4      	; 0x2aa <read_x+0x18>
	l = ADCL;
 2ae:	24 b1       	in	r18, 0x04	; 4
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	30 93 89 00 	sts	0x0089, r19
 2b6:	20 93 88 00 	sts	0x0088, r18
	h = ADCH & 0x03;
 2ba:	85 b1       	in	r24, 0x05	; 5
	h = h << 8;
	h = h + l;
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	83 70       	andi	r24, 0x03	; 3
 2c0:	90 70       	andi	r25, 0x00	; 0
 2c2:	98 2f       	mov	r25, r24
 2c4:	88 27       	eor	r24, r24
 2c6:	82 0f       	add	r24, r18
 2c8:	93 1f       	adc	r25, r19
 2ca:	90 93 99 00 	sts	0x0099, r25
 2ce:	80 93 98 00 	sts	0x0098, r24
}
 2d2:	08 95       	ret

000002d4 <read_y>:

void read_y(void)
{
	DDRA=0b11111010; // Output on PA2(5V) and PA1(GND), Input on PC4(ADC)
 2d4:	8a ef       	ldi	r24, 0xFA	; 250
 2d6:	8a bb       	out	0x1a, r24	; 26
	sbi(PORTA, 1); //pull PA2 to 5V
 2d8:	d9 9a       	sbi	0x1b, 1	; 27
	cbi(PORTA, 3); //pull PA1 to GND
 2da:	db 98       	cbi	0x1b, 3	; 27
 2dc:	80 ea       	ldi	r24, 0xA0	; 160
 2de:	9f e0       	ldi	r25, 0x0F	; 15
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <read_y+0xc>
	
	_delay_ms(1);
	
	ADMUX = 0x20;
 2e4:	80 e2       	ldi	r24, 0x20	; 32
 2e6:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN)|(1 << ADSC)|(1<<ADPS2)|(1<<ADPS1);
 2e8:	86 ec       	ldi	r24, 0xC6	; 198
 2ea:	86 b9       	out	0x06, r24	; 6
	
	while(ADCSRA & (1 << ADSC));
 2ec:	36 99       	sbic	0x06, 6	; 6
 2ee:	fe cf       	rjmp	.-4      	; 0x2ec <read_y+0x18>
	l1 = ADCL;
 2f0:	24 b1       	in	r18, 0x04	; 4
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	30 93 97 00 	sts	0x0097, r19
 2f8:	20 93 96 00 	sts	0x0096, r18
	h1 = ADCH & 0x03;
 2fc:	85 b1       	in	r24, 0x05	; 5
	h1 = h1 << 8;
	h1 = h1 + l1;
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	83 70       	andi	r24, 0x03	; 3
 302:	90 70       	andi	r25, 0x00	; 0
 304:	98 2f       	mov	r25, r24
 306:	88 27       	eor	r24, r24
 308:	82 0f       	add	r24, r18
 30a:	93 1f       	adc	r25, r19
 30c:	90 93 87 00 	sts	0x0087, r25
 310:	80 93 86 00 	sts	0x0086, r24
}
 314:	08 95       	ret

00000316 <calc>:
void calc(void)
{  char dtoo[5];
		read_x();
 316:	0e 94 49 01 	call	0x292	; 0x292 <read_x>
		read_y();
 31a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <read_y>
		x_buffer[i] = h;
 31e:	20 91 80 00 	lds	r18, 0x0080
 322:	30 91 81 00 	lds	r19, 0x0081
 326:	f9 01       	movw	r30, r18
 328:	ee 0f       	add	r30, r30
 32a:	ff 1f       	adc	r31, r31
 32c:	df 01       	movw	r26, r30
 32e:	a6 56       	subi	r26, 0x66	; 102
 330:	bf 4f       	sbci	r27, 0xFF	; 255
 332:	80 91 98 00 	lds	r24, 0x0098
 336:	90 91 99 00 	lds	r25, 0x0099
 33a:	8d 93       	st	X+, r24
 33c:	9c 93       	st	X, r25
		y_buffer[i] = h1;
 33e:	e6 57       	subi	r30, 0x76	; 118
 340:	ff 4f       	sbci	r31, 0xFF	; 255
 342:	80 91 86 00 	lds	r24, 0x0086
 346:	90 91 87 00 	lds	r25, 0x0087
 34a:	91 83       	std	Z+1, r25	; 0x01
 34c:	80 83       	st	Z, r24
	  ++i;
 34e:	2f 5f       	subi	r18, 0xFF	; 255
 350:	3f 4f       	sbci	r19, 0xFF	; 255
 352:	30 93 81 00 	sts	0x0081, r19
 356:	20 93 80 00 	sts	0x0080, r18
	 if(i>BUFFER+1)
 35a:	27 30       	cpi	r18, 0x07	; 7
 35c:	31 05       	cpc	r19, r1
 35e:	04 f1       	brlt	.+64     	; 0x3a0 <calc+0x8a>
	 {
	  i=0;
 360:	10 92 81 00 	sts	0x0081, r1
 364:	10 92 80 00 	sts	0x0080, r1
	  XDIFF= (x_buffer[0]-x_buffer[BUFFER-1]); 
 368:	80 91 9a 00 	lds	r24, 0x009A
 36c:	90 91 9b 00 	lds	r25, 0x009B
 370:	20 91 a2 00 	lds	r18, 0x00A2
 374:	30 91 a3 00 	lds	r19, 0x00A3
 378:	82 1b       	sub	r24, r18
 37a:	93 0b       	sbc	r25, r19
 37c:	90 93 a7 00 	sts	0x00A7, r25
 380:	80 93 a6 00 	sts	0x00A6, r24
	  YDIFF= (y_buffer[0]-y_buffer[BUFFER-1]);
 384:	80 91 8a 00 	lds	r24, 0x008A
 388:	90 91 8b 00 	lds	r25, 0x008B
 38c:	20 91 92 00 	lds	r18, 0x0092
 390:	30 91 93 00 	lds	r19, 0x0093
 394:	82 1b       	sub	r24, r18
 396:	93 0b       	sbc	r25, r19
 398:	90 93 83 00 	sts	0x0083, r25
 39c:	80 93 82 00 	sts	0x0082, r24
	 }
	 printf("%d",XDIFF);
 3a0:	00 d0       	rcall	.+0      	; 0x3a2 <calc+0x8c>
 3a2:	00 d0       	rcall	.+0      	; 0x3a4 <calc+0x8e>
 3a4:	80 e6       	ldi	r24, 0x60	; 96
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	ed b7       	in	r30, 0x3d	; 61
 3aa:	fe b7       	in	r31, 0x3e	; 62
 3ac:	92 83       	std	Z+2, r25	; 0x02
 3ae:	81 83       	std	Z+1, r24	; 0x01
 3b0:	80 91 a6 00 	lds	r24, 0x00A6
 3b4:	90 91 a7 00 	lds	r25, 0x00A7
 3b8:	94 83       	std	Z+4, r25	; 0x04
 3ba:	83 83       	std	Z+3, r24	; 0x03
 3bc:	0e 94 19 02 	call	0x432	; 0x432 <printf>
	 printf(",%d\n",YDIFF);
 3c0:	83 e6       	ldi	r24, 0x63	; 99
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	ed b7       	in	r30, 0x3d	; 61
 3c6:	fe b7       	in	r31, 0x3e	; 62
 3c8:	92 83       	std	Z+2, r25	; 0x02
 3ca:	81 83       	std	Z+1, r24	; 0x01
 3cc:	80 91 82 00 	lds	r24, 0x0082
 3d0:	90 91 83 00 	lds	r25, 0x0083
 3d4:	94 83       	std	Z+4, r25	; 0x04
 3d6:	83 83       	std	Z+3, r24	; 0x03
 3d8:	0e 94 19 02 	call	0x432	; 0x432 <printf>
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	0f 90       	pop	r0
     

	
		
		
	}
 3e4:	08 95       	ret

000003e6 <main>:

int main (void)

{

  lcd_init();//initialise the lcd
 3e6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_init>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 3ea:	84 e0       	ldi	r24, 0x04	; 4
 3ec:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 3ee:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 3f0:	84 e1       	ldi	r24, 0x14	; 20
 3f2:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 3f4:	80 e1       	ldi	r24, 0x10	; 16
 3f6:	88 bb       	out	0x18, r24	; 24
 3f8:	80 e4       	ldi	r24, 0x40	; 64
 3fa:	9f e1       	ldi	r25, 0x1F	; 31
 3fc:	fc 01       	movw	r30, r24
 3fe:	31 97       	sbiw	r30, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <main+0x18>
    return(0);
}
void ioinit (void)
{
    //1 = output, 0 = input
    DDRD = 0b11111110; //PORTD (RX on PD0)
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <main+0x1c>
 406:	8e ef       	ldi	r24, 0xFE	; 254
 408:	81 bb       	out	0x11, r24	; 17

    //USART Baud rate: 9600
    UBRRH = MYUBRR >> 8;
 40a:	10 bc       	out	0x20, r1	; 32
    UBRRL = MYUBRR;
 40c:	87 e6       	ldi	r24, 0x67	; 103
 40e:	89 b9       	out	0x09, r24	; 9
    
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
 410:	86 e8       	ldi	r24, 0x86	; 134
 412:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN); 
 414:	88 e1       	ldi	r24, 0x18	; 24
 416:	8a b9       	out	0x0a, r24	; 10
	
	stdout = &mystdout; //Required for printf init
 418:	81 e7       	ldi	r24, 0x71	; 113
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	90 93 ab 00 	sts	0x00AB, r25
 420:	80 93 aa 00 	sts	0x00AA, r24
{

  lcd_init();//initialise the lcd
  lcd_cmd(0x01);//clear screen
  ioinit();
  lcd_puts("Touchpad");
 424:	88 e6       	ldi	r24, 0x68	; 104
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_puts>
    
   
	while(1)
    {	
	
	calc();
 42c:	0e 94 8b 01 	call	0x316	; 0x316 <calc>
 430:	fd cf       	rjmp	.-6      	; 0x42c <main+0x46>

00000432 <printf>:
 432:	a0 e0       	ldi	r26, 0x00	; 0
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	ef e1       	ldi	r30, 0x1F	; 31
 438:	f2 e0       	ldi	r31, 0x02	; 2
 43a:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__prologue_saves__+0x20>
 43e:	fe 01       	movw	r30, r28
 440:	35 96       	adiw	r30, 0x05	; 5
 442:	61 91       	ld	r22, Z+
 444:	71 91       	ld	r23, Z+
 446:	80 91 aa 00 	lds	r24, 0x00AA
 44a:	90 91 ab 00 	lds	r25, 0x00AB
 44e:	af 01       	movw	r20, r30
 450:	0e 94 2e 02 	call	0x45c	; 0x45c <vfprintf>
 454:	20 96       	adiw	r28, 0x00	; 0
 456:	e2 e0       	ldi	r30, 0x02	; 2
 458:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__epilogue_restores__+0x20>

0000045c <vfprintf>:
 45c:	ab e0       	ldi	r26, 0x0B	; 11
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	e4 e3       	ldi	r30, 0x34	; 52
 462:	f2 e0       	ldi	r31, 0x02	; 2
 464:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__prologue_saves__>
 468:	3c 01       	movw	r6, r24
 46a:	2b 01       	movw	r4, r22
 46c:	5a 01       	movw	r10, r20
 46e:	fc 01       	movw	r30, r24
 470:	17 82       	std	Z+7, r1	; 0x07
 472:	16 82       	std	Z+6, r1	; 0x06
 474:	83 81       	ldd	r24, Z+3	; 0x03
 476:	81 fd       	sbrc	r24, 1
 478:	03 c0       	rjmp	.+6      	; 0x480 <__stack+0x21>
 47a:	6f ef       	ldi	r22, 0xFF	; 255
 47c:	7f ef       	ldi	r23, 0xFF	; 255
 47e:	c6 c1       	rjmp	.+908    	; 0x80c <__stack+0x3ad>
 480:	9a e0       	ldi	r25, 0x0A	; 10
 482:	89 2e       	mov	r8, r25
 484:	1e 01       	movw	r2, r28
 486:	08 94       	sec
 488:	21 1c       	adc	r2, r1
 48a:	31 1c       	adc	r3, r1
 48c:	f3 01       	movw	r30, r6
 48e:	23 81       	ldd	r18, Z+3	; 0x03
 490:	f2 01       	movw	r30, r4
 492:	23 fd       	sbrc	r18, 3
 494:	85 91       	lpm	r24, Z+
 496:	23 ff       	sbrs	r18, 3
 498:	81 91       	ld	r24, Z+
 49a:	2f 01       	movw	r4, r30
 49c:	88 23       	and	r24, r24
 49e:	09 f4       	brne	.+2      	; 0x4a2 <__stack+0x43>
 4a0:	b2 c1       	rjmp	.+868    	; 0x806 <__stack+0x3a7>
 4a2:	85 32       	cpi	r24, 0x25	; 37
 4a4:	39 f4       	brne	.+14     	; 0x4b4 <__stack+0x55>
 4a6:	23 fd       	sbrc	r18, 3
 4a8:	85 91       	lpm	r24, Z+
 4aa:	23 ff       	sbrs	r18, 3
 4ac:	81 91       	ld	r24, Z+
 4ae:	2f 01       	movw	r4, r30
 4b0:	85 32       	cpi	r24, 0x25	; 37
 4b2:	29 f4       	brne	.+10     	; 0x4be <__stack+0x5f>
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	b3 01       	movw	r22, r6
 4b8:	0e 94 21 04 	call	0x842	; 0x842 <fputc>
 4bc:	e7 cf       	rjmp	.-50     	; 0x48c <__stack+0x2d>
 4be:	98 2f       	mov	r25, r24
 4c0:	ff 24       	eor	r15, r15
 4c2:	ee 24       	eor	r14, r14
 4c4:	99 24       	eor	r9, r9
 4c6:	ff e1       	ldi	r31, 0x1F	; 31
 4c8:	ff 15       	cp	r31, r15
 4ca:	d0 f0       	brcs	.+52     	; 0x500 <__stack+0xa1>
 4cc:	9b 32       	cpi	r25, 0x2B	; 43
 4ce:	69 f0       	breq	.+26     	; 0x4ea <__stack+0x8b>
 4d0:	9c 32       	cpi	r25, 0x2C	; 44
 4d2:	28 f4       	brcc	.+10     	; 0x4de <__stack+0x7f>
 4d4:	90 32       	cpi	r25, 0x20	; 32
 4d6:	59 f0       	breq	.+22     	; 0x4ee <__stack+0x8f>
 4d8:	93 32       	cpi	r25, 0x23	; 35
 4da:	91 f4       	brne	.+36     	; 0x500 <__stack+0xa1>
 4dc:	0e c0       	rjmp	.+28     	; 0x4fa <__stack+0x9b>
 4de:	9d 32       	cpi	r25, 0x2D	; 45
 4e0:	49 f0       	breq	.+18     	; 0x4f4 <__stack+0x95>
 4e2:	90 33       	cpi	r25, 0x30	; 48
 4e4:	69 f4       	brne	.+26     	; 0x500 <__stack+0xa1>
 4e6:	41 e0       	ldi	r20, 0x01	; 1
 4e8:	24 c0       	rjmp	.+72     	; 0x532 <__stack+0xd3>
 4ea:	52 e0       	ldi	r21, 0x02	; 2
 4ec:	f5 2a       	or	r15, r21
 4ee:	84 e0       	ldi	r24, 0x04	; 4
 4f0:	f8 2a       	or	r15, r24
 4f2:	28 c0       	rjmp	.+80     	; 0x544 <__stack+0xe5>
 4f4:	98 e0       	ldi	r25, 0x08	; 8
 4f6:	f9 2a       	or	r15, r25
 4f8:	25 c0       	rjmp	.+74     	; 0x544 <__stack+0xe5>
 4fa:	e0 e1       	ldi	r30, 0x10	; 16
 4fc:	fe 2a       	or	r15, r30
 4fe:	22 c0       	rjmp	.+68     	; 0x544 <__stack+0xe5>
 500:	f7 fc       	sbrc	r15, 7
 502:	29 c0       	rjmp	.+82     	; 0x556 <__stack+0xf7>
 504:	89 2f       	mov	r24, r25
 506:	80 53       	subi	r24, 0x30	; 48
 508:	8a 30       	cpi	r24, 0x0A	; 10
 50a:	70 f4       	brcc	.+28     	; 0x528 <__stack+0xc9>
 50c:	f6 fe       	sbrs	r15, 6
 50e:	05 c0       	rjmp	.+10     	; 0x51a <__stack+0xbb>
 510:	98 9c       	mul	r9, r8
 512:	90 2c       	mov	r9, r0
 514:	11 24       	eor	r1, r1
 516:	98 0e       	add	r9, r24
 518:	15 c0       	rjmp	.+42     	; 0x544 <__stack+0xe5>
 51a:	e8 9c       	mul	r14, r8
 51c:	e0 2c       	mov	r14, r0
 51e:	11 24       	eor	r1, r1
 520:	e8 0e       	add	r14, r24
 522:	f0 e2       	ldi	r31, 0x20	; 32
 524:	ff 2a       	or	r15, r31
 526:	0e c0       	rjmp	.+28     	; 0x544 <__stack+0xe5>
 528:	9e 32       	cpi	r25, 0x2E	; 46
 52a:	29 f4       	brne	.+10     	; 0x536 <__stack+0xd7>
 52c:	f6 fc       	sbrc	r15, 6
 52e:	6b c1       	rjmp	.+726    	; 0x806 <__stack+0x3a7>
 530:	40 e4       	ldi	r20, 0x40	; 64
 532:	f4 2a       	or	r15, r20
 534:	07 c0       	rjmp	.+14     	; 0x544 <__stack+0xe5>
 536:	9c 36       	cpi	r25, 0x6C	; 108
 538:	19 f4       	brne	.+6      	; 0x540 <__stack+0xe1>
 53a:	50 e8       	ldi	r21, 0x80	; 128
 53c:	f5 2a       	or	r15, r21
 53e:	02 c0       	rjmp	.+4      	; 0x544 <__stack+0xe5>
 540:	98 36       	cpi	r25, 0x68	; 104
 542:	49 f4       	brne	.+18     	; 0x556 <__stack+0xf7>
 544:	f2 01       	movw	r30, r4
 546:	23 fd       	sbrc	r18, 3
 548:	95 91       	lpm	r25, Z+
 54a:	23 ff       	sbrs	r18, 3
 54c:	91 91       	ld	r25, Z+
 54e:	2f 01       	movw	r4, r30
 550:	99 23       	and	r25, r25
 552:	09 f0       	breq	.+2      	; 0x556 <__stack+0xf7>
 554:	b8 cf       	rjmp	.-144    	; 0x4c6 <__stack+0x67>
 556:	89 2f       	mov	r24, r25
 558:	85 54       	subi	r24, 0x45	; 69
 55a:	83 30       	cpi	r24, 0x03	; 3
 55c:	18 f0       	brcs	.+6      	; 0x564 <__stack+0x105>
 55e:	80 52       	subi	r24, 0x20	; 32
 560:	83 30       	cpi	r24, 0x03	; 3
 562:	38 f4       	brcc	.+14     	; 0x572 <__stack+0x113>
 564:	44 e0       	ldi	r20, 0x04	; 4
 566:	50 e0       	ldi	r21, 0x00	; 0
 568:	a4 0e       	add	r10, r20
 56a:	b5 1e       	adc	r11, r21
 56c:	5f e3       	ldi	r21, 0x3F	; 63
 56e:	59 83       	std	Y+1, r21	; 0x01
 570:	0f c0       	rjmp	.+30     	; 0x590 <__stack+0x131>
 572:	93 36       	cpi	r25, 0x63	; 99
 574:	31 f0       	breq	.+12     	; 0x582 <__stack+0x123>
 576:	93 37       	cpi	r25, 0x73	; 115
 578:	79 f0       	breq	.+30     	; 0x598 <__stack+0x139>
 57a:	93 35       	cpi	r25, 0x53	; 83
 57c:	09 f0       	breq	.+2      	; 0x580 <__stack+0x121>
 57e:	56 c0       	rjmp	.+172    	; 0x62c <__stack+0x1cd>
 580:	20 c0       	rjmp	.+64     	; 0x5c2 <__stack+0x163>
 582:	f5 01       	movw	r30, r10
 584:	80 81       	ld	r24, Z
 586:	89 83       	std	Y+1, r24	; 0x01
 588:	42 e0       	ldi	r20, 0x02	; 2
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	a4 0e       	add	r10, r20
 58e:	b5 1e       	adc	r11, r21
 590:	61 01       	movw	r12, r2
 592:	01 e0       	ldi	r16, 0x01	; 1
 594:	10 e0       	ldi	r17, 0x00	; 0
 596:	12 c0       	rjmp	.+36     	; 0x5bc <__stack+0x15d>
 598:	f5 01       	movw	r30, r10
 59a:	c0 80       	ld	r12, Z
 59c:	d1 80       	ldd	r13, Z+1	; 0x01
 59e:	f6 fc       	sbrc	r15, 6
 5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <__stack+0x149>
 5a2:	6f ef       	ldi	r22, 0xFF	; 255
 5a4:	7f ef       	ldi	r23, 0xFF	; 255
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <__stack+0x14d>
 5a8:	69 2d       	mov	r22, r9
 5aa:	70 e0       	ldi	r23, 0x00	; 0
 5ac:	42 e0       	ldi	r20, 0x02	; 2
 5ae:	50 e0       	ldi	r21, 0x00	; 0
 5b0:	a4 0e       	add	r10, r20
 5b2:	b5 1e       	adc	r11, r21
 5b4:	c6 01       	movw	r24, r12
 5b6:	0e 94 16 04 	call	0x82c	; 0x82c <strnlen>
 5ba:	8c 01       	movw	r16, r24
 5bc:	5f e7       	ldi	r21, 0x7F	; 127
 5be:	f5 22       	and	r15, r21
 5c0:	14 c0       	rjmp	.+40     	; 0x5ea <__stack+0x18b>
 5c2:	f5 01       	movw	r30, r10
 5c4:	c0 80       	ld	r12, Z
 5c6:	d1 80       	ldd	r13, Z+1	; 0x01
 5c8:	f6 fc       	sbrc	r15, 6
 5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <__stack+0x173>
 5cc:	6f ef       	ldi	r22, 0xFF	; 255
 5ce:	7f ef       	ldi	r23, 0xFF	; 255
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <__stack+0x177>
 5d2:	69 2d       	mov	r22, r9
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	42 e0       	ldi	r20, 0x02	; 2
 5d8:	50 e0       	ldi	r21, 0x00	; 0
 5da:	a4 0e       	add	r10, r20
 5dc:	b5 1e       	adc	r11, r21
 5de:	c6 01       	movw	r24, r12
 5e0:	0e 94 0b 04 	call	0x816	; 0x816 <strnlen_P>
 5e4:	8c 01       	movw	r16, r24
 5e6:	50 e8       	ldi	r21, 0x80	; 128
 5e8:	f5 2a       	or	r15, r21
 5ea:	f3 fe       	sbrs	r15, 3
 5ec:	07 c0       	rjmp	.+14     	; 0x5fc <__stack+0x19d>
 5ee:	1a c0       	rjmp	.+52     	; 0x624 <__stack+0x1c5>
 5f0:	80 e2       	ldi	r24, 0x20	; 32
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	b3 01       	movw	r22, r6
 5f6:	0e 94 21 04 	call	0x842	; 0x842 <fputc>
 5fa:	ea 94       	dec	r14
 5fc:	8e 2d       	mov	r24, r14
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	08 17       	cp	r16, r24
 602:	19 07       	cpc	r17, r25
 604:	a8 f3       	brcs	.-22     	; 0x5f0 <__stack+0x191>
 606:	0e c0       	rjmp	.+28     	; 0x624 <__stack+0x1c5>
 608:	f6 01       	movw	r30, r12
 60a:	f7 fc       	sbrc	r15, 7
 60c:	85 91       	lpm	r24, Z+
 60e:	f7 fe       	sbrs	r15, 7
 610:	81 91       	ld	r24, Z+
 612:	6f 01       	movw	r12, r30
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	b3 01       	movw	r22, r6
 618:	0e 94 21 04 	call	0x842	; 0x842 <fputc>
 61c:	e1 10       	cpse	r14, r1
 61e:	ea 94       	dec	r14
 620:	01 50       	subi	r16, 0x01	; 1
 622:	10 40       	sbci	r17, 0x00	; 0
 624:	01 15       	cp	r16, r1
 626:	11 05       	cpc	r17, r1
 628:	79 f7       	brne	.-34     	; 0x608 <__stack+0x1a9>
 62a:	ea c0       	rjmp	.+468    	; 0x800 <__stack+0x3a1>
 62c:	94 36       	cpi	r25, 0x64	; 100
 62e:	11 f0       	breq	.+4      	; 0x634 <__stack+0x1d5>
 630:	99 36       	cpi	r25, 0x69	; 105
 632:	69 f5       	brne	.+90     	; 0x68e <__stack+0x22f>
 634:	f7 fe       	sbrs	r15, 7
 636:	08 c0       	rjmp	.+16     	; 0x648 <__stack+0x1e9>
 638:	f5 01       	movw	r30, r10
 63a:	20 81       	ld	r18, Z
 63c:	31 81       	ldd	r19, Z+1	; 0x01
 63e:	42 81       	ldd	r20, Z+2	; 0x02
 640:	53 81       	ldd	r21, Z+3	; 0x03
 642:	84 e0       	ldi	r24, 0x04	; 4
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0a c0       	rjmp	.+20     	; 0x65c <__stack+0x1fd>
 648:	f5 01       	movw	r30, r10
 64a:	80 81       	ld	r24, Z
 64c:	91 81       	ldd	r25, Z+1	; 0x01
 64e:	9c 01       	movw	r18, r24
 650:	44 27       	eor	r20, r20
 652:	37 fd       	sbrc	r19, 7
 654:	40 95       	com	r20
 656:	54 2f       	mov	r21, r20
 658:	82 e0       	ldi	r24, 0x02	; 2
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	a8 0e       	add	r10, r24
 65e:	b9 1e       	adc	r11, r25
 660:	9f e6       	ldi	r25, 0x6F	; 111
 662:	f9 22       	and	r15, r25
 664:	57 ff       	sbrs	r21, 7
 666:	09 c0       	rjmp	.+18     	; 0x67a <__stack+0x21b>
 668:	50 95       	com	r21
 66a:	40 95       	com	r20
 66c:	30 95       	com	r19
 66e:	21 95       	neg	r18
 670:	3f 4f       	sbci	r19, 0xFF	; 255
 672:	4f 4f       	sbci	r20, 0xFF	; 255
 674:	5f 4f       	sbci	r21, 0xFF	; 255
 676:	e0 e8       	ldi	r30, 0x80	; 128
 678:	fe 2a       	or	r15, r30
 67a:	ca 01       	movw	r24, r20
 67c:	b9 01       	movw	r22, r18
 67e:	a1 01       	movw	r20, r2
 680:	2a e0       	ldi	r18, 0x0A	; 10
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	0e 94 4d 04 	call	0x89a	; 0x89a <__ultoa_invert>
 688:	d8 2e       	mov	r13, r24
 68a:	d2 18       	sub	r13, r2
 68c:	40 c0       	rjmp	.+128    	; 0x70e <__stack+0x2af>
 68e:	95 37       	cpi	r25, 0x75	; 117
 690:	29 f4       	brne	.+10     	; 0x69c <__stack+0x23d>
 692:	1f 2d       	mov	r17, r15
 694:	1f 7e       	andi	r17, 0xEF	; 239
 696:	2a e0       	ldi	r18, 0x0A	; 10
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	1d c0       	rjmp	.+58     	; 0x6d6 <__stack+0x277>
 69c:	1f 2d       	mov	r17, r15
 69e:	19 7f       	andi	r17, 0xF9	; 249
 6a0:	9f 36       	cpi	r25, 0x6F	; 111
 6a2:	61 f0       	breq	.+24     	; 0x6bc <__stack+0x25d>
 6a4:	90 37       	cpi	r25, 0x70	; 112
 6a6:	20 f4       	brcc	.+8      	; 0x6b0 <__stack+0x251>
 6a8:	98 35       	cpi	r25, 0x58	; 88
 6aa:	09 f0       	breq	.+2      	; 0x6ae <__stack+0x24f>
 6ac:	ac c0       	rjmp	.+344    	; 0x806 <__stack+0x3a7>
 6ae:	0f c0       	rjmp	.+30     	; 0x6ce <__stack+0x26f>
 6b0:	90 37       	cpi	r25, 0x70	; 112
 6b2:	39 f0       	breq	.+14     	; 0x6c2 <__stack+0x263>
 6b4:	98 37       	cpi	r25, 0x78	; 120
 6b6:	09 f0       	breq	.+2      	; 0x6ba <__stack+0x25b>
 6b8:	a6 c0       	rjmp	.+332    	; 0x806 <__stack+0x3a7>
 6ba:	04 c0       	rjmp	.+8      	; 0x6c4 <__stack+0x265>
 6bc:	28 e0       	ldi	r18, 0x08	; 8
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	0a c0       	rjmp	.+20     	; 0x6d6 <__stack+0x277>
 6c2:	10 61       	ori	r17, 0x10	; 16
 6c4:	14 fd       	sbrc	r17, 4
 6c6:	14 60       	ori	r17, 0x04	; 4
 6c8:	20 e1       	ldi	r18, 0x10	; 16
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <__stack+0x277>
 6ce:	14 fd       	sbrc	r17, 4
 6d0:	16 60       	ori	r17, 0x06	; 6
 6d2:	20 e1       	ldi	r18, 0x10	; 16
 6d4:	32 e0       	ldi	r19, 0x02	; 2
 6d6:	17 ff       	sbrs	r17, 7
 6d8:	08 c0       	rjmp	.+16     	; 0x6ea <__stack+0x28b>
 6da:	f5 01       	movw	r30, r10
 6dc:	60 81       	ld	r22, Z
 6de:	71 81       	ldd	r23, Z+1	; 0x01
 6e0:	82 81       	ldd	r24, Z+2	; 0x02
 6e2:	93 81       	ldd	r25, Z+3	; 0x03
 6e4:	44 e0       	ldi	r20, 0x04	; 4
 6e6:	50 e0       	ldi	r21, 0x00	; 0
 6e8:	08 c0       	rjmp	.+16     	; 0x6fa <__stack+0x29b>
 6ea:	f5 01       	movw	r30, r10
 6ec:	80 81       	ld	r24, Z
 6ee:	91 81       	ldd	r25, Z+1	; 0x01
 6f0:	bc 01       	movw	r22, r24
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	42 e0       	ldi	r20, 0x02	; 2
 6f8:	50 e0       	ldi	r21, 0x00	; 0
 6fa:	a4 0e       	add	r10, r20
 6fc:	b5 1e       	adc	r11, r21
 6fe:	a1 01       	movw	r20, r2
 700:	0e 94 4d 04 	call	0x89a	; 0x89a <__ultoa_invert>
 704:	d8 2e       	mov	r13, r24
 706:	d2 18       	sub	r13, r2
 708:	8f e7       	ldi	r24, 0x7F	; 127
 70a:	f8 2e       	mov	r15, r24
 70c:	f1 22       	and	r15, r17
 70e:	f6 fe       	sbrs	r15, 6
 710:	0b c0       	rjmp	.+22     	; 0x728 <__stack+0x2c9>
 712:	5e ef       	ldi	r21, 0xFE	; 254
 714:	f5 22       	and	r15, r21
 716:	d9 14       	cp	r13, r9
 718:	38 f4       	brcc	.+14     	; 0x728 <__stack+0x2c9>
 71a:	f4 fe       	sbrs	r15, 4
 71c:	07 c0       	rjmp	.+14     	; 0x72c <__stack+0x2cd>
 71e:	f2 fc       	sbrc	r15, 2
 720:	05 c0       	rjmp	.+10     	; 0x72c <__stack+0x2cd>
 722:	8f ee       	ldi	r24, 0xEF	; 239
 724:	f8 22       	and	r15, r24
 726:	02 c0       	rjmp	.+4      	; 0x72c <__stack+0x2cd>
 728:	1d 2d       	mov	r17, r13
 72a:	01 c0       	rjmp	.+2      	; 0x72e <__stack+0x2cf>
 72c:	19 2d       	mov	r17, r9
 72e:	f4 fe       	sbrs	r15, 4
 730:	0d c0       	rjmp	.+26     	; 0x74c <__stack+0x2ed>
 732:	fe 01       	movw	r30, r28
 734:	ed 0d       	add	r30, r13
 736:	f1 1d       	adc	r31, r1
 738:	80 81       	ld	r24, Z
 73a:	80 33       	cpi	r24, 0x30	; 48
 73c:	19 f4       	brne	.+6      	; 0x744 <__stack+0x2e5>
 73e:	99 ee       	ldi	r25, 0xE9	; 233
 740:	f9 22       	and	r15, r25
 742:	08 c0       	rjmp	.+16     	; 0x754 <__stack+0x2f5>
 744:	1f 5f       	subi	r17, 0xFF	; 255
 746:	f2 fe       	sbrs	r15, 2
 748:	05 c0       	rjmp	.+10     	; 0x754 <__stack+0x2f5>
 74a:	03 c0       	rjmp	.+6      	; 0x752 <__stack+0x2f3>
 74c:	8f 2d       	mov	r24, r15
 74e:	86 78       	andi	r24, 0x86	; 134
 750:	09 f0       	breq	.+2      	; 0x754 <__stack+0x2f5>
 752:	1f 5f       	subi	r17, 0xFF	; 255
 754:	0f 2d       	mov	r16, r15
 756:	f3 fc       	sbrc	r15, 3
 758:	14 c0       	rjmp	.+40     	; 0x782 <__stack+0x323>
 75a:	f0 fe       	sbrs	r15, 0
 75c:	0f c0       	rjmp	.+30     	; 0x77c <__stack+0x31d>
 75e:	1e 15       	cp	r17, r14
 760:	10 f0       	brcs	.+4      	; 0x766 <__stack+0x307>
 762:	9d 2c       	mov	r9, r13
 764:	0b c0       	rjmp	.+22     	; 0x77c <__stack+0x31d>
 766:	9d 2c       	mov	r9, r13
 768:	9e 0c       	add	r9, r14
 76a:	91 1a       	sub	r9, r17
 76c:	1e 2d       	mov	r17, r14
 76e:	06 c0       	rjmp	.+12     	; 0x77c <__stack+0x31d>
 770:	80 e2       	ldi	r24, 0x20	; 32
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	b3 01       	movw	r22, r6
 776:	0e 94 21 04 	call	0x842	; 0x842 <fputc>
 77a:	1f 5f       	subi	r17, 0xFF	; 255
 77c:	1e 15       	cp	r17, r14
 77e:	c0 f3       	brcs	.-16     	; 0x770 <__stack+0x311>
 780:	04 c0       	rjmp	.+8      	; 0x78a <__stack+0x32b>
 782:	1e 15       	cp	r17, r14
 784:	10 f4       	brcc	.+4      	; 0x78a <__stack+0x32b>
 786:	e1 1a       	sub	r14, r17
 788:	01 c0       	rjmp	.+2      	; 0x78c <__stack+0x32d>
 78a:	ee 24       	eor	r14, r14
 78c:	04 ff       	sbrs	r16, 4
 78e:	0f c0       	rjmp	.+30     	; 0x7ae <__stack+0x34f>
 790:	80 e3       	ldi	r24, 0x30	; 48
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	b3 01       	movw	r22, r6
 796:	0e 94 21 04 	call	0x842	; 0x842 <fputc>
 79a:	02 ff       	sbrs	r16, 2
 79c:	1d c0       	rjmp	.+58     	; 0x7d8 <__stack+0x379>
 79e:	01 fd       	sbrc	r16, 1
 7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <__stack+0x349>
 7a2:	88 e7       	ldi	r24, 0x78	; 120
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e c0       	rjmp	.+28     	; 0x7c4 <__stack+0x365>
 7a8:	88 e5       	ldi	r24, 0x58	; 88
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	0b c0       	rjmp	.+22     	; 0x7c4 <__stack+0x365>
 7ae:	80 2f       	mov	r24, r16
 7b0:	86 78       	andi	r24, 0x86	; 134
 7b2:	91 f0       	breq	.+36     	; 0x7d8 <__stack+0x379>
 7b4:	01 ff       	sbrs	r16, 1
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <__stack+0x35d>
 7b8:	8b e2       	ldi	r24, 0x2B	; 43
 7ba:	01 c0       	rjmp	.+2      	; 0x7be <__stack+0x35f>
 7bc:	80 e2       	ldi	r24, 0x20	; 32
 7be:	f7 fc       	sbrc	r15, 7
 7c0:	8d e2       	ldi	r24, 0x2D	; 45
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	b3 01       	movw	r22, r6
 7c6:	0e 94 21 04 	call	0x842	; 0x842 <fputc>
 7ca:	06 c0       	rjmp	.+12     	; 0x7d8 <__stack+0x379>
 7cc:	80 e3       	ldi	r24, 0x30	; 48
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	b3 01       	movw	r22, r6
 7d2:	0e 94 21 04 	call	0x842	; 0x842 <fputc>
 7d6:	9a 94       	dec	r9
 7d8:	d9 14       	cp	r13, r9
 7da:	c0 f3       	brcs	.-16     	; 0x7cc <__stack+0x36d>
 7dc:	da 94       	dec	r13
 7de:	f1 01       	movw	r30, r2
 7e0:	ed 0d       	add	r30, r13
 7e2:	f1 1d       	adc	r31, r1
 7e4:	80 81       	ld	r24, Z
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	b3 01       	movw	r22, r6
 7ea:	0e 94 21 04 	call	0x842	; 0x842 <fputc>
 7ee:	dd 20       	and	r13, r13
 7f0:	a9 f7       	brne	.-22     	; 0x7dc <__stack+0x37d>
 7f2:	06 c0       	rjmp	.+12     	; 0x800 <__stack+0x3a1>
 7f4:	80 e2       	ldi	r24, 0x20	; 32
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	b3 01       	movw	r22, r6
 7fa:	0e 94 21 04 	call	0x842	; 0x842 <fputc>
 7fe:	ea 94       	dec	r14
 800:	ee 20       	and	r14, r14
 802:	c1 f7       	brne	.-16     	; 0x7f4 <__stack+0x395>
 804:	43 ce       	rjmp	.-890    	; 0x48c <__stack+0x2d>
 806:	f3 01       	movw	r30, r6
 808:	66 81       	ldd	r22, Z+6	; 0x06
 80a:	77 81       	ldd	r23, Z+7	; 0x07
 80c:	cb 01       	movw	r24, r22
 80e:	2b 96       	adiw	r28, 0x0b	; 11
 810:	e2 e1       	ldi	r30, 0x12	; 18
 812:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__epilogue_restores__>

00000816 <strnlen_P>:
 816:	fc 01       	movw	r30, r24
 818:	05 90       	lpm	r0, Z+
 81a:	61 50       	subi	r22, 0x01	; 1
 81c:	70 40       	sbci	r23, 0x00	; 0
 81e:	01 10       	cpse	r0, r1
 820:	d8 f7       	brcc	.-10     	; 0x818 <strnlen_P+0x2>
 822:	80 95       	com	r24
 824:	90 95       	com	r25
 826:	8e 0f       	add	r24, r30
 828:	9f 1f       	adc	r25, r31
 82a:	08 95       	ret

0000082c <strnlen>:
 82c:	fc 01       	movw	r30, r24
 82e:	61 50       	subi	r22, 0x01	; 1
 830:	70 40       	sbci	r23, 0x00	; 0
 832:	01 90       	ld	r0, Z+
 834:	01 10       	cpse	r0, r1
 836:	d8 f7       	brcc	.-10     	; 0x82e <strnlen+0x2>
 838:	80 95       	com	r24
 83a:	90 95       	com	r25
 83c:	8e 0f       	add	r24, r30
 83e:	9f 1f       	adc	r25, r31
 840:	08 95       	ret

00000842 <fputc>:
 842:	0f 93       	push	r16
 844:	1f 93       	push	r17
 846:	cf 93       	push	r28
 848:	df 93       	push	r29
 84a:	8c 01       	movw	r16, r24
 84c:	eb 01       	movw	r28, r22
 84e:	8b 81       	ldd	r24, Y+3	; 0x03
 850:	81 ff       	sbrs	r24, 1
 852:	1b c0       	rjmp	.+54     	; 0x88a <fputc+0x48>
 854:	82 ff       	sbrs	r24, 2
 856:	0d c0       	rjmp	.+26     	; 0x872 <fputc+0x30>
 858:	2e 81       	ldd	r18, Y+6	; 0x06
 85a:	3f 81       	ldd	r19, Y+7	; 0x07
 85c:	8c 81       	ldd	r24, Y+4	; 0x04
 85e:	9d 81       	ldd	r25, Y+5	; 0x05
 860:	28 17       	cp	r18, r24
 862:	39 07       	cpc	r19, r25
 864:	64 f4       	brge	.+24     	; 0x87e <fputc+0x3c>
 866:	e8 81       	ld	r30, Y
 868:	f9 81       	ldd	r31, Y+1	; 0x01
 86a:	01 93       	st	Z+, r16
 86c:	f9 83       	std	Y+1, r31	; 0x01
 86e:	e8 83       	st	Y, r30
 870:	06 c0       	rjmp	.+12     	; 0x87e <fputc+0x3c>
 872:	e8 85       	ldd	r30, Y+8	; 0x08
 874:	f9 85       	ldd	r31, Y+9	; 0x09
 876:	80 2f       	mov	r24, r16
 878:	09 95       	icall
 87a:	89 2b       	or	r24, r25
 87c:	31 f4       	brne	.+12     	; 0x88a <fputc+0x48>
 87e:	8e 81       	ldd	r24, Y+6	; 0x06
 880:	9f 81       	ldd	r25, Y+7	; 0x07
 882:	01 96       	adiw	r24, 0x01	; 1
 884:	9f 83       	std	Y+7, r25	; 0x07
 886:	8e 83       	std	Y+6, r24	; 0x06
 888:	02 c0       	rjmp	.+4      	; 0x88e <fputc+0x4c>
 88a:	0f ef       	ldi	r16, 0xFF	; 255
 88c:	1f ef       	ldi	r17, 0xFF	; 255
 88e:	c8 01       	movw	r24, r16
 890:	df 91       	pop	r29
 892:	cf 91       	pop	r28
 894:	1f 91       	pop	r17
 896:	0f 91       	pop	r16
 898:	08 95       	ret

0000089a <__ultoa_invert>:
 89a:	fa 01       	movw	r30, r20
 89c:	aa 27       	eor	r26, r26
 89e:	28 30       	cpi	r18, 0x08	; 8
 8a0:	51 f1       	breq	.+84     	; 0x8f6 <__ultoa_invert+0x5c>
 8a2:	20 31       	cpi	r18, 0x10	; 16
 8a4:	81 f1       	breq	.+96     	; 0x906 <__ultoa_invert+0x6c>
 8a6:	e8 94       	clt
 8a8:	6f 93       	push	r22
 8aa:	6e 7f       	andi	r22, 0xFE	; 254
 8ac:	6e 5f       	subi	r22, 0xFE	; 254
 8ae:	7f 4f       	sbci	r23, 0xFF	; 255
 8b0:	8f 4f       	sbci	r24, 0xFF	; 255
 8b2:	9f 4f       	sbci	r25, 0xFF	; 255
 8b4:	af 4f       	sbci	r26, 0xFF	; 255
 8b6:	b1 e0       	ldi	r27, 0x01	; 1
 8b8:	3e d0       	rcall	.+124    	; 0x936 <__ultoa_invert+0x9c>
 8ba:	b4 e0       	ldi	r27, 0x04	; 4
 8bc:	3c d0       	rcall	.+120    	; 0x936 <__ultoa_invert+0x9c>
 8be:	67 0f       	add	r22, r23
 8c0:	78 1f       	adc	r23, r24
 8c2:	89 1f       	adc	r24, r25
 8c4:	9a 1f       	adc	r25, r26
 8c6:	a1 1d       	adc	r26, r1
 8c8:	68 0f       	add	r22, r24
 8ca:	79 1f       	adc	r23, r25
 8cc:	8a 1f       	adc	r24, r26
 8ce:	91 1d       	adc	r25, r1
 8d0:	a1 1d       	adc	r26, r1
 8d2:	6a 0f       	add	r22, r26
 8d4:	71 1d       	adc	r23, r1
 8d6:	81 1d       	adc	r24, r1
 8d8:	91 1d       	adc	r25, r1
 8da:	a1 1d       	adc	r26, r1
 8dc:	20 d0       	rcall	.+64     	; 0x91e <__ultoa_invert+0x84>
 8de:	09 f4       	brne	.+2      	; 0x8e2 <__ultoa_invert+0x48>
 8e0:	68 94       	set
 8e2:	3f 91       	pop	r19
 8e4:	2a e0       	ldi	r18, 0x0A	; 10
 8e6:	26 9f       	mul	r18, r22
 8e8:	11 24       	eor	r1, r1
 8ea:	30 19       	sub	r19, r0
 8ec:	30 5d       	subi	r19, 0xD0	; 208
 8ee:	31 93       	st	Z+, r19
 8f0:	de f6       	brtc	.-74     	; 0x8a8 <__ultoa_invert+0xe>
 8f2:	cf 01       	movw	r24, r30
 8f4:	08 95       	ret
 8f6:	46 2f       	mov	r20, r22
 8f8:	47 70       	andi	r20, 0x07	; 7
 8fa:	40 5d       	subi	r20, 0xD0	; 208
 8fc:	41 93       	st	Z+, r20
 8fe:	b3 e0       	ldi	r27, 0x03	; 3
 900:	0f d0       	rcall	.+30     	; 0x920 <__ultoa_invert+0x86>
 902:	c9 f7       	brne	.-14     	; 0x8f6 <__ultoa_invert+0x5c>
 904:	f6 cf       	rjmp	.-20     	; 0x8f2 <__ultoa_invert+0x58>
 906:	46 2f       	mov	r20, r22
 908:	4f 70       	andi	r20, 0x0F	; 15
 90a:	40 5d       	subi	r20, 0xD0	; 208
 90c:	4a 33       	cpi	r20, 0x3A	; 58
 90e:	18 f0       	brcs	.+6      	; 0x916 <__ultoa_invert+0x7c>
 910:	49 5d       	subi	r20, 0xD9	; 217
 912:	31 fd       	sbrc	r19, 1
 914:	40 52       	subi	r20, 0x20	; 32
 916:	41 93       	st	Z+, r20
 918:	02 d0       	rcall	.+4      	; 0x91e <__ultoa_invert+0x84>
 91a:	a9 f7       	brne	.-22     	; 0x906 <__ultoa_invert+0x6c>
 91c:	ea cf       	rjmp	.-44     	; 0x8f2 <__ultoa_invert+0x58>
 91e:	b4 e0       	ldi	r27, 0x04	; 4
 920:	a6 95       	lsr	r26
 922:	97 95       	ror	r25
 924:	87 95       	ror	r24
 926:	77 95       	ror	r23
 928:	67 95       	ror	r22
 92a:	ba 95       	dec	r27
 92c:	c9 f7       	brne	.-14     	; 0x920 <__ultoa_invert+0x86>
 92e:	00 97       	sbiw	r24, 0x00	; 0
 930:	61 05       	cpc	r22, r1
 932:	71 05       	cpc	r23, r1
 934:	08 95       	ret
 936:	9b 01       	movw	r18, r22
 938:	ac 01       	movw	r20, r24
 93a:	0a 2e       	mov	r0, r26
 93c:	06 94       	lsr	r0
 93e:	57 95       	ror	r21
 940:	47 95       	ror	r20
 942:	37 95       	ror	r19
 944:	27 95       	ror	r18
 946:	ba 95       	dec	r27
 948:	c9 f7       	brne	.-14     	; 0x93c <__ultoa_invert+0xa2>
 94a:	62 0f       	add	r22, r18
 94c:	73 1f       	adc	r23, r19
 94e:	84 1f       	adc	r24, r20
 950:	95 1f       	adc	r25, r21
 952:	a0 1d       	adc	r26, r0
 954:	08 95       	ret

00000956 <__udivmodhi4>:
 956:	aa 1b       	sub	r26, r26
 958:	bb 1b       	sub	r27, r27
 95a:	51 e1       	ldi	r21, 0x11	; 17
 95c:	07 c0       	rjmp	.+14     	; 0x96c <__udivmodhi4_ep>

0000095e <__udivmodhi4_loop>:
 95e:	aa 1f       	adc	r26, r26
 960:	bb 1f       	adc	r27, r27
 962:	a6 17       	cp	r26, r22
 964:	b7 07       	cpc	r27, r23
 966:	10 f0       	brcs	.+4      	; 0x96c <__udivmodhi4_ep>
 968:	a6 1b       	sub	r26, r22
 96a:	b7 0b       	sbc	r27, r23

0000096c <__udivmodhi4_ep>:
 96c:	88 1f       	adc	r24, r24
 96e:	99 1f       	adc	r25, r25
 970:	5a 95       	dec	r21
 972:	a9 f7       	brne	.-22     	; 0x95e <__udivmodhi4_loop>
 974:	80 95       	com	r24
 976:	90 95       	com	r25
 978:	bc 01       	movw	r22, r24
 97a:	cd 01       	movw	r24, r26
 97c:	08 95       	ret

0000097e <__prologue_saves__>:
 97e:	2f 92       	push	r2
 980:	3f 92       	push	r3
 982:	4f 92       	push	r4
 984:	5f 92       	push	r5
 986:	6f 92       	push	r6
 988:	7f 92       	push	r7
 98a:	8f 92       	push	r8
 98c:	9f 92       	push	r9
 98e:	af 92       	push	r10
 990:	bf 92       	push	r11
 992:	cf 92       	push	r12
 994:	df 92       	push	r13
 996:	ef 92       	push	r14
 998:	ff 92       	push	r15
 99a:	0f 93       	push	r16
 99c:	1f 93       	push	r17
 99e:	cf 93       	push	r28
 9a0:	df 93       	push	r29
 9a2:	cd b7       	in	r28, 0x3d	; 61
 9a4:	de b7       	in	r29, 0x3e	; 62
 9a6:	ca 1b       	sub	r28, r26
 9a8:	db 0b       	sbc	r29, r27
 9aa:	0f b6       	in	r0, 0x3f	; 63
 9ac:	f8 94       	cli
 9ae:	de bf       	out	0x3e, r29	; 62
 9b0:	0f be       	out	0x3f, r0	; 63
 9b2:	cd bf       	out	0x3d, r28	; 61
 9b4:	09 94       	ijmp

000009b6 <__epilogue_restores__>:
 9b6:	2a 88       	ldd	r2, Y+18	; 0x12
 9b8:	39 88       	ldd	r3, Y+17	; 0x11
 9ba:	48 88       	ldd	r4, Y+16	; 0x10
 9bc:	5f 84       	ldd	r5, Y+15	; 0x0f
 9be:	6e 84       	ldd	r6, Y+14	; 0x0e
 9c0:	7d 84       	ldd	r7, Y+13	; 0x0d
 9c2:	8c 84       	ldd	r8, Y+12	; 0x0c
 9c4:	9b 84       	ldd	r9, Y+11	; 0x0b
 9c6:	aa 84       	ldd	r10, Y+10	; 0x0a
 9c8:	b9 84       	ldd	r11, Y+9	; 0x09
 9ca:	c8 84       	ldd	r12, Y+8	; 0x08
 9cc:	df 80       	ldd	r13, Y+7	; 0x07
 9ce:	ee 80       	ldd	r14, Y+6	; 0x06
 9d0:	fd 80       	ldd	r15, Y+5	; 0x05
 9d2:	0c 81       	ldd	r16, Y+4	; 0x04
 9d4:	1b 81       	ldd	r17, Y+3	; 0x03
 9d6:	aa 81       	ldd	r26, Y+2	; 0x02
 9d8:	b9 81       	ldd	r27, Y+1	; 0x01
 9da:	ce 0f       	add	r28, r30
 9dc:	d1 1d       	adc	r29, r1
 9de:	0f b6       	in	r0, 0x3f	; 63
 9e0:	f8 94       	cli
 9e2:	de bf       	out	0x3e, r29	; 62
 9e4:	0f be       	out	0x3f, r0	; 63
 9e6:	cd bf       	out	0x3d, r28	; 61
 9e8:	ed 01       	movw	r28, r26
 9ea:	08 95       	ret

000009ec <_exit>:
 9ec:	f8 94       	cli

000009ee <__stop_program>:
 9ee:	ff cf       	rjmp	.-2      	; 0x9ee <__stop_program>
