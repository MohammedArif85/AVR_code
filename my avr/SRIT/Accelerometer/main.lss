
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000300  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000300  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000006d  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000073c  00000000  00000000  00000411  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000190  00000000  00000000  00000b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000048a  00000000  00000000  00000cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00001168  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000119  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001c9  00000000  00000000  00001311  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000014da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  7a:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_reset>:
#define LCD_RW      0x02
#define LCD_EN      0x04

void lcd_reset(void)
{
        lcd_port = 0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	88 bb       	out	0x18, r24	; 24
  86:	88 ec       	ldi	r24, 0xC8	; 200
  88:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8a:	20 e9       	ldi	r18, 0x90	; 144
  8c:	31 e0       	ldi	r19, 0x01	; 1
  8e:	f9 01       	movw	r30, r18
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <lcd_reset+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  94:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  96:	d9 f7       	brne	.-10     	; 0x8e <lcd_reset+0xc>
        _delay_ms(20);
        lcd_port = 0x30+LCD_EN;
  98:	94 e3       	ldi	r25, 0x34	; 52
  9a:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  9c:	80 e3       	ldi	r24, 0x30	; 48
  9e:	88 bb       	out	0x18, r24	; 24
  a0:	e0 e4       	ldi	r30, 0x40	; 64
  a2:	fc e9       	ldi	r31, 0x9C	; 156
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_reset+0x22>
        _delay_ms(10);
        lcd_port = 0x30+LCD_EN;
  a8:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  aa:	88 bb       	out	0x18, r24	; 24
  ac:	20 ea       	ldi	r18, 0xA0	; 160
  ae:	3f e0       	ldi	r19, 0x0F	; 15
  b0:	f9 01       	movw	r30, r18
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lcd_reset+0x30>
        _delay_ms(1);
        lcd_port = 0x30+LCD_EN;
  b6:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  b8:	88 bb       	out	0x18, r24	; 24
  ba:	c9 01       	movw	r24, r18
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_reset+0x3a>
        _delay_ms(1);
        lcd_port = 0x20+LCD_EN;
  c0:	84 e2       	ldi	r24, 0x24	; 36
  c2:	88 bb       	out	0x18, r24	; 24
        lcd_port = 0x20;
  c4:	80 e2       	ldi	r24, 0x20	; 32
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	c9 01       	movw	r24, r18
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_reset+0x48>
        _delay_ms(1);
}
  ce:	08 95       	ret

000000d0 <lcd_cmd>:
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
  d0:	38 2f       	mov	r19, r24
  d2:	30 7f       	andi	r19, 0xF0	; 240
  d4:	23 2f       	mov	r18, r19
  d6:	24 60       	ori	r18, 0x04	; 4
  d8:	28 bb       	out	0x18, r18	; 24
        lcd_port = (cmd & 0xF0);
  da:	38 bb       	out	0x18, r19	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	24 e0       	ldi	r18, 0x04	; 4
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	2a 95       	dec	r18
  e6:	e1 f7       	brne	.-8      	; 0xe0 <lcd_cmd+0x10>
  e8:	28 2f       	mov	r18, r24
  ea:	24 60       	ori	r18, 0x04	; 4
  ec:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((cmd << 4) & 0xF0);
  ee:	88 bb       	out	0x18, r24	; 24
  f0:	80 e4       	ldi	r24, 0x40	; 64
  f2:	9f e1       	ldi	r25, 0x1F	; 31
  f4:	fc 01       	movw	r30, r24
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_cmd+0x26>

      

        _delay_ms(2);
        _delay_ms(2);
}
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <lcd_cmd+0x2a>
  fe:	08 95       	ret

00000100 <lcd_init>:

void lcd_init (void)
{       DDRB=0xFF;
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	87 bb       	out	0x17, r24	; 23
        PORTB=0x00; 
 104:	18 ba       	out	0x18, r1	; 24
        lcd_reset();         // Call LCD reset
 106:	0e 94 41 00 	call	0x82	; 0x82 <lcd_reset>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 10a:	84 e2       	ldi	r24, 0x24	; 36
 10c:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 10e:	80 e2       	ldi	r24, 0x20	; 32
 110:	88 bb       	out	0x18, r24	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 112:	54 e8       	ldi	r21, 0x84	; 132
 114:	58 bb       	out	0x18, r21	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 116:	40 e8       	ldi	r20, 0x80	; 128
 118:	48 bb       	out	0x18, r20	; 24
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	3f e1       	ldi	r19, 0x1F	; 31
 11e:	c9 01       	movw	r24, r18
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <lcd_init+0x20>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 124:	c9 01       	movw	r24, r18
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_init+0x26>
 12a:	94 e0       	ldi	r25, 0x04	; 4
 12c:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 12e:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 130:	84 ec       	ldi	r24, 0xC4	; 196
 132:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 134:	80 ec       	ldi	r24, 0xC0	; 192
 136:	88 bb       	out	0x18, r24	; 24
 138:	f9 01       	movw	r30, r18
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_init+0x3a>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 13e:	f9 01       	movw	r30, r18
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_init+0x40>
 144:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 146:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 148:	84 e6       	ldi	r24, 0x64	; 100
 14a:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 14c:	80 e6       	ldi	r24, 0x60	; 96
 14e:	88 bb       	out	0x18, r24	; 24
 150:	f9 01       	movw	r30, r18
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_init+0x52>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 156:	f9 01       	movw	r30, r18
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_init+0x58>
 15c:	58 bb       	out	0x18, r21	; 24
        lcd_port = (cmd & 0xF0);
 15e:	48 bb       	out	0x18, r20	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 160:	98 bb       	out	0x18, r25	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 162:	18 ba       	out	0x18, r1	; 24
 164:	c9 01       	movw	r24, r18
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_init+0x66>
        lcd_reset();         // Call LCD reset
        lcd_cmd(0x28);       // 4-bit mode - 2 line - 5x7 font.
        lcd_cmd(0x0C);       // Display on cursor - off .
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 }
 16a:	c9 01       	movw	r24, r18
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_init+0x6c>
 170:	08 95       	ret

00000172 <lcd_data>:


void lcd_data (unsigned char dat)
{
        lcd_port = ((dat & 0xF0)|LCD_EN|LCD_RS);
 172:	98 2f       	mov	r25, r24
 174:	90 7f       	andi	r25, 0xF0	; 240
 176:	29 2f       	mov	r18, r25
 178:	25 60       	ori	r18, 0x05	; 5
 17a:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((dat & 0xF0)|LCD_RS);
 17c:	91 60       	ori	r25, 0x01	; 1
 17e:	98 bb       	out	0x18, r25	; 24
		
		lcd_port = (((dat << 4) & 0xF0)|LCD_EN|LCD_RS);
 180:	82 95       	swap	r24
 182:	80 7f       	andi	r24, 0xF0	; 240
 184:	98 2f       	mov	r25, r24
 186:	95 60       	ori	r25, 0x05	; 5
 188:	98 bb       	out	0x18, r25	; 24
        lcd_port = (((dat << 4) & 0xF0)|LCD_RS);
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	88 bb       	out	0x18, r24	; 24
 18e:	80 e4       	ldi	r24, 0x40	; 64
 190:	9f e1       	ldi	r25, 0x1F	; 31
 192:	fc 01       	movw	r30, r24
 194:	31 97       	sbiw	r30, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_data+0x22>
       
      

       _delay_ms(2);
       _delay_ms(2);
}
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_data+0x26>
 19c:	08 95       	ret

0000019e <lcd_puts>:
void lcd_puts(char *aaa)
{
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	ec 01       	movw	r28, r24
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <lcd_puts+0xc>
unsigned int i;
for(i=0;aaa[i]!=0;i++)
lcd_data(aaa[i]);
 1a6:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_data>
       _delay_ms(2);
}
void lcd_puts(char *aaa)
{
unsigned int i;
for(i=0;aaa[i]!=0;i++)
 1aa:	89 91       	ld	r24, Y+
 1ac:	88 23       	and	r24, r24
 1ae:	d9 f7       	brne	.-10     	; 0x1a6 <lcd_puts+0x8>
lcd_data(aaa[i]);

}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <itoa>:
void itoa(uint16_t num)
{
 1b6:	cf 92       	push	r12
 1b8:	df 92       	push	r13
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	7c 01       	movw	r14, r24
 unsigned char a,b,c,d;
 a=num%10;
 num=num/10;
 1c4:	6a e0       	ldi	r22, 0x0A	; 10
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__udivmodhi4>
 1cc:	d6 2e       	mov	r13, r22
 1ce:	c7 2e       	mov	r12, r23
 b=num%10;
 num=num/10;
 1d0:	86 2f       	mov	r24, r22
 1d2:	97 2f       	mov	r25, r23
 1d4:	6a e0       	ldi	r22, 0x0A	; 10
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__udivmodhi4>
 1dc:	16 2f       	mov	r17, r22
 1de:	07 2f       	mov	r16, r23
 c=num%10;
 num=num/10;
 d=num%10;
 num=num/10;
 lcd_data(0x30+d); 
 1e0:	86 2f       	mov	r24, r22
 1e2:	97 2f       	mov	r25, r23
 1e4:	6a e0       	ldi	r22, 0x0A	; 10
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__udivmodhi4>
 1ec:	cb 01       	movw	r24, r22
 1ee:	6a e0       	ldi	r22, 0x0A	; 10
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__udivmodhi4>
 1f6:	80 5d       	subi	r24, 0xD0	; 208
 1f8:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_data>
 lcd_data(0x30+c); 
 1fc:	81 2f       	mov	r24, r17
 1fe:	90 2f       	mov	r25, r16
 200:	6a e0       	ldi	r22, 0x0A	; 10
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__udivmodhi4>
 208:	80 5d       	subi	r24, 0xD0	; 208
 20a:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_data>
 lcd_data(0x30+b); 
 20e:	8d 2d       	mov	r24, r13
 210:	9c 2d       	mov	r25, r12
 212:	6a e0       	ldi	r22, 0x0A	; 10
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__udivmodhi4>
 21a:	80 5d       	subi	r24, 0xD0	; 208
 21c:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_data>
 lcd_data(0x30+a); 
 220:	c7 01       	movw	r24, r14
 222:	6a e0       	ldi	r22, 0x0A	; 10
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__udivmodhi4>
 22a:	80 5d       	subi	r24, 0xD0	; 208
 22c:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_data>
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	df 90       	pop	r13
 23a:	cf 90       	pop	r12
 23c:	08 95       	ret

0000023e <adc>:
   #include<util/delay.h>
   #include "lcd.h"
    void adc(unsigned char channel)
	 
	{  int y;
	   ADMUX=(1<<REFS0)|channel;
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	87 b9       	out	0x07, r24	; 7
	   ADCSRA=(1<<ADEN)|(1<<ADPS0);
 242:	81 e8       	ldi	r24, 0x81	; 129
 244:	86 b9       	out	0x06, r24	; 6
	   ADCSRA|=(1<<ADSC);
 246:	36 9a       	sbi	0x06, 6	; 6
	   loop_until_bit_is_set(ADCSRA,ADIF);
 248:	34 9b       	sbis	0x06, 4	; 6
 24a:	fe cf       	rjmp	.-4      	; 0x248 <adc+0xa>
       y=ADCW;
 24c:	84 b1       	in	r24, 0x04	; 4
 24e:	95 b1       	in	r25, 0x05	; 5
	   itoa(y);
 250:	0e 94 db 00 	call	0x1b6	; 0x1b6 <itoa>
	}   
 254:	08 95       	ret

00000256 <main>:
	
	
	 
   int main (void)
   { 
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
     DDRA=0X00;
 262:	1a ba       	out	0x1a, r1	; 26
     PORTA=0XFF;
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	8b bb       	out	0x1b, r24	; 27
	 lcd_init();
 268:	0e 94 80 00 	call	0x100	; 0x100 <lcd_init>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 26c:	84 e0       	ldi	r24, 0x04	; 4
 26e:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 270:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 272:	84 e1       	ldi	r24, 0x14	; 20
 274:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 276:	80 e1       	ldi	r24, 0x10	; 16
 278:	88 bb       	out	0x18, r24	; 24
 27a:	80 e4       	ldi	r24, 0x40	; 64
 27c:	9f e1       	ldi	r25, 0x1F	; 31
 27e:	fc 01       	movw	r30, r24
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <main+0x2a>
	 lcd_cmd(0x01); 
	 lcd_puts("Accellerometer");
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0x2e>
 288:	80 e6       	ldi	r24, 0x60	; 96
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_puts>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 290:	44 ec       	ldi	r20, 0xC4	; 196
 292:	e4 2e       	mov	r14, r20
        lcd_port = (cmd & 0xF0);
 294:	30 ec       	ldi	r19, 0xC0	; 192
 296:	f3 2e       	mov	r15, r19
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 298:	04 e2       	ldi	r16, 0x24	; 36
        lcd_port = ((cmd << 4) & 0xF0);
 29a:	10 e2       	ldi	r17, 0x20	; 32
 29c:	c0 e4       	ldi	r28, 0x40	; 64
 29e:	df e1       	ldi	r29, 0x1F	; 31
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 2a0:	e8 ba       	out	0x18, r14	; 24
        lcd_port = (cmd & 0xF0);
 2a2:	f8 ba       	out	0x18, r15	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 2a4:	08 bb       	out	0x18, r16	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 2a6:	18 bb       	out	0x18, r17	; 24
 2a8:	ce 01       	movw	r24, r28
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <main+0x54>
	 while(1)
 	 {
	  lcd_cmd(0xc2);
	  adc(0);
 2ae:	ce 01       	movw	r24, r28
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <main+0x5a>
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	0e 94 1f 01 	call	0x23e	; 0x23e <adc>
	  lcd_data(' ');
 2ba:	80 e2       	ldi	r24, 0x20	; 32
 2bc:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_data>
	  adc(1);
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 1f 01 	call	0x23e	; 0x23e <adc>
	  lcd_data(' ');
 2c6:	80 e2       	ldi	r24, 0x20	; 32
 2c8:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_data>
	  adc(2);
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	0e 94 1f 01 	call	0x23e	; 0x23e <adc>
 2d2:	e6 cf       	rjmp	.-52     	; 0x2a0 <main+0x4a>

000002d4 <__udivmodhi4>:
 2d4:	aa 1b       	sub	r26, r26
 2d6:	bb 1b       	sub	r27, r27
 2d8:	51 e1       	ldi	r21, 0x11	; 17
 2da:	07 c0       	rjmp	.+14     	; 0x2ea <__udivmodhi4_ep>

000002dc <__udivmodhi4_loop>:
 2dc:	aa 1f       	adc	r26, r26
 2de:	bb 1f       	adc	r27, r27
 2e0:	a6 17       	cp	r26, r22
 2e2:	b7 07       	cpc	r27, r23
 2e4:	10 f0       	brcs	.+4      	; 0x2ea <__udivmodhi4_ep>
 2e6:	a6 1b       	sub	r26, r22
 2e8:	b7 0b       	sbc	r27, r23

000002ea <__udivmodhi4_ep>:
 2ea:	88 1f       	adc	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	5a 95       	dec	r21
 2f0:	a9 f7       	brne	.-22     	; 0x2dc <__udivmodhi4_loop>
 2f2:	80 95       	com	r24
 2f4:	90 95       	com	r25
 2f6:	bc 01       	movw	r22, r24
 2f8:	cd 01       	movw	r24, r26
 2fa:	08 95       	ret

000002fc <_exit>:
 2fc:	f8 94       	cli

000002fe <__stop_program>:
 2fe:	ff cf       	rjmp	.-2      	; 0x2fe <__stop_program>
