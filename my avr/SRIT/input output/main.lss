
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000102  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000016e  00000000  00000000  000001bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000103  00000000  00000000  00000329  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000019a  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000de  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000060  00000000  00000000  000006c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00000726  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
# include<avr/io.h>
# include<util/delay.h>

int main(void)
{
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17
  86:	df 93       	push	r29
  88:	cf 93       	push	r28
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	2a 97       	sbiw	r28, 0x0a	; 10
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	f8 94       	cli
  94:	de bf       	out	0x3e, r29	; 62
  96:	0f be       	out	0x3f, r0	; 63
  98:	cd bf       	out	0x3d, r28	; 61
 unsigned char i=0;
 char A[10] ={0x40,0x79,0x24,0x30,0x19,0x12,0x02,0x78,0x00,0x10};
  9a:	de 01       	movw	r26, r28
  9c:	11 96       	adiw	r26, 0x01	; 1
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	8a e0       	ldi	r24, 0x0A	; 10
  a4:	01 90       	ld	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	81 50       	subi	r24, 0x01	; 1
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x22>
 DDRA=0XFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	8a bb       	out	0x1a, r24	; 26
 DDRB=0X04;
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	87 bb       	out	0x17, r24	; 23
 PORTB=0X04;
  b4:	88 bb       	out	0x18, r24	; 24
 PORTA=0X00;
  b6:	1b ba       	out	0x1b, r1	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b8:	00 ed       	ldi	r16, 0xD0	; 208
  ba:	17 e0       	ldi	r17, 0x07	; 7
while(1)
{
 if(!(PINB & 0x04))//if(PORTB_2==0)
 {
 _delay_ms (1);
 while(!(PINB & 0x04))
  bc:	be 01       	movw	r22, r28
  be:	6e 5f       	subi	r22, 0xFE	; 254
  c0:	7f 4f       	sbci	r23, 0xFF	; 255
  c2:	48 ec       	ldi	r20, 0xC8	; 200
  c4:	50 e0       	ldi	r21, 0x00	; 0
 {
   for(i=1;i<7;i++)
  c6:	9e 01       	movw	r18, r28
  c8:	28 5f       	subi	r18, 0xF8	; 248
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
 DDRB=0X04;
 PORTB=0X04;
 PORTA=0X00;
while(1)
{
 if(!(PINB & 0x04))//if(PORTB_2==0)
  cc:	b2 99       	sbic	0x16, 2	; 22
  ce:	fe cf       	rjmp	.-4      	; 0xcc <main+0x4a>
  d0:	c8 01       	movw	r24, r16
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x50>
  d6:	0f c0       	rjmp	.+30     	; 0xf6 <main+0x74>
 _delay_ms (1);
 while(!(PINB & 0x04))
 {
   for(i=1;i<7;i++)
   {   
    PORTA=A[i];
  d8:	8c 91       	ld	r24, X
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	80 e1       	ldi	r24, 0x10	; 16
  de:	97 e2       	ldi	r25, 0x27	; 39
  e0:	fa 01       	movw	r30, r20
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x60>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e8:	d9 f7       	brne	.-10     	; 0xe0 <main+0x5e>
	_delay_ms(1000);
	if(!(PINB & 0x04))
  ea:	b2 9b       	sbis	0x16, 2	; 22
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <main+0x74>
	break;
  ee:	11 96       	adiw	r26, 0x01	; 1
 if(!(PINB & 0x04))//if(PORTB_2==0)
 {
 _delay_ms (1);
 while(!(PINB & 0x04))
 {
   for(i=1;i<7;i++)
  f0:	a2 17       	cp	r26, r18
  f2:	b3 07       	cpc	r27, r19
  f4:	89 f7       	brne	.-30     	; 0xd8 <main+0x56>
while(1)
{
 if(!(PINB & 0x04))//if(PORTB_2==0)
 {
 _delay_ms (1);
 while(!(PINB & 0x04))
  f6:	b2 99       	sbic	0x16, 2	; 22
  f8:	e9 cf       	rjmp	.-46     	; 0xcc <main+0x4a>
  fa:	db 01       	movw	r26, r22
  fc:	ed cf       	rjmp	.-38     	; 0xd8 <main+0x56>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
