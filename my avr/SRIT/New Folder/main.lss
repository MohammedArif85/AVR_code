
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000071  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000079c  00000000  00000000  000003d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000016a  00000000  00000000  00000b75  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000466  00000000  00000000  00000cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00001148  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000116  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000276  00000000  00000000  000012ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
  64:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcd_reset>:
#define LCD_RW      0x02
#define LCD_EN      0x04

void lcd_reset(void)
{
        lcd_port = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	88 bb       	out	0x18, r24	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  70:	80 e4       	ldi	r24, 0x40	; 64
  72:	9c e9       	ldi	r25, 0x9C	; 156
  74:	01 97       	sbiw	r24, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <lcd_reset+0x8>
        _delay_ms(20);
        lcd_port = 0x30+LCD_EN;
  78:	94 e3       	ldi	r25, 0x34	; 52
  7a:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  7c:	80 e3       	ldi	r24, 0x30	; 48
  7e:	88 bb       	out	0x18, r24	; 24
  80:	e0 e2       	ldi	r30, 0x20	; 32
  82:	fe e4       	ldi	r31, 0x4E	; 78
  84:	31 97       	sbiw	r30, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <lcd_reset+0x18>
        _delay_ms(10);
        lcd_port = 0x30+LCD_EN;
  88:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  8a:	88 bb       	out	0x18, r24	; 24
  8c:	20 ed       	ldi	r18, 0xD0	; 208
  8e:	37 e0       	ldi	r19, 0x07	; 7
  90:	f9 01       	movw	r30, r18
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <lcd_reset+0x26>
        _delay_ms(1);
        lcd_port = 0x30+LCD_EN;
  96:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  98:	88 bb       	out	0x18, r24	; 24
  9a:	c9 01       	movw	r24, r18
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcd_reset+0x30>
        _delay_ms(1);
        lcd_port = 0x20+LCD_EN;
  a0:	84 e2       	ldi	r24, 0x24	; 36
  a2:	88 bb       	out	0x18, r24	; 24
        lcd_port = 0x20;
  a4:	80 e2       	ldi	r24, 0x20	; 32
  a6:	88 bb       	out	0x18, r24	; 24
  a8:	c9 01       	movw	r24, r18
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_reset+0x3e>
        _delay_ms(1);
}
  ae:	08 95       	ret

000000b0 <lcd_cmd>:
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
  b0:	38 2f       	mov	r19, r24
  b2:	30 7f       	andi	r19, 0xF0	; 240
  b4:	23 2f       	mov	r18, r19
  b6:	24 60       	ori	r18, 0x04	; 4
  b8:	28 bb       	out	0x18, r18	; 24
        lcd_port = (cmd & 0xF0);
  ba:	38 bb       	out	0x18, r19	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	24 e0       	ldi	r18, 0x04	; 4
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	2a 95       	dec	r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <lcd_cmd+0x10>
  c8:	28 2f       	mov	r18, r24
  ca:	24 60       	ori	r18, 0x04	; 4
  cc:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((cmd << 4) & 0xF0);
  ce:	88 bb       	out	0x18, r24	; 24
  d0:	80 ea       	ldi	r24, 0xA0	; 160
  d2:	9f e0       	ldi	r25, 0x0F	; 15
  d4:	fc 01       	movw	r30, r24
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_cmd+0x26>

      

        _delay_ms(2);
        _delay_ms(2);
}
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd_cmd+0x2a>
  de:	08 95       	ret

000000e0 <lcd_init>:

void lcd_init (void)
{       DDRB=0xFF;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	87 bb       	out	0x17, r24	; 23
        PORTB=0x00; 
  e4:	18 ba       	out	0x18, r1	; 24
        lcd_reset();         // Call LCD reset
  e6:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_reset>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
  ea:	84 e2       	ldi	r24, 0x24	; 36
  ec:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
  ee:	80 e2       	ldi	r24, 0x20	; 32
  f0:	88 bb       	out	0x18, r24	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
  f2:	54 e8       	ldi	r21, 0x84	; 132
  f4:	58 bb       	out	0x18, r21	; 24
        lcd_port = ((cmd << 4) & 0xF0);
  f6:	40 e8       	ldi	r20, 0x80	; 128
  f8:	48 bb       	out	0x18, r20	; 24
  fa:	20 ea       	ldi	r18, 0xA0	; 160
  fc:	3f e0       	ldi	r19, 0x0F	; 15
  fe:	c9 01       	movw	r24, r18
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_init+0x20>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 104:	c9 01       	movw	r24, r18
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_init+0x26>
 10a:	94 e0       	ldi	r25, 0x04	; 4
 10c:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 10e:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 110:	84 ec       	ldi	r24, 0xC4	; 196
 112:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 114:	80 ec       	ldi	r24, 0xC0	; 192
 116:	88 bb       	out	0x18, r24	; 24
 118:	f9 01       	movw	r30, r18
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_init+0x3a>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 11e:	f9 01       	movw	r30, r18
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <lcd_init+0x40>
 124:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 126:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 128:	84 e6       	ldi	r24, 0x64	; 100
 12a:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 12c:	80 e6       	ldi	r24, 0x60	; 96
 12e:	88 bb       	out	0x18, r24	; 24
 130:	f9 01       	movw	r30, r18
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_init+0x52>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 136:	f9 01       	movw	r30, r18
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_init+0x58>
 13c:	58 bb       	out	0x18, r21	; 24
        lcd_port = (cmd & 0xF0);
 13e:	48 bb       	out	0x18, r20	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 140:	98 bb       	out	0x18, r25	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 142:	18 ba       	out	0x18, r1	; 24
 144:	c9 01       	movw	r24, r18
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_init+0x66>
        lcd_reset();         // Call LCD reset
        lcd_cmd(0x28);       // 4-bit mode - 2 line - 5x7 font.
        lcd_cmd(0x0C);       // Display on cursor - off .
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 }
 14a:	c9 01       	movw	r24, r18
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_init+0x6c>
 150:	08 95       	ret

00000152 <lcd_data>:


void lcd_data (unsigned char dat)
{
        lcd_port = ((dat & 0xF0)|LCD_EN|LCD_RS);
 152:	98 2f       	mov	r25, r24
 154:	90 7f       	andi	r25, 0xF0	; 240
 156:	29 2f       	mov	r18, r25
 158:	25 60       	ori	r18, 0x05	; 5
 15a:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((dat & 0xF0)|LCD_RS);
 15c:	91 60       	ori	r25, 0x01	; 1
 15e:	98 bb       	out	0x18, r25	; 24
		
		lcd_port = (((dat << 4) & 0xF0)|LCD_EN|LCD_RS);
 160:	82 95       	swap	r24
 162:	80 7f       	andi	r24, 0xF0	; 240
 164:	98 2f       	mov	r25, r24
 166:	95 60       	ori	r25, 0x05	; 5
 168:	98 bb       	out	0x18, r25	; 24
        lcd_port = (((dat << 4) & 0xF0)|LCD_RS);
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	88 bb       	out	0x18, r24	; 24
 16e:	80 ea       	ldi	r24, 0xA0	; 160
 170:	9f e0       	ldi	r25, 0x0F	; 15
 172:	fc 01       	movw	r30, r24
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_data+0x22>
       
      

       _delay_ms(2);
       _delay_ms(2);
}
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_data+0x26>
 17c:	08 95       	ret

0000017e <lcd_puts>:
void lcd_puts(char *aaa)
{
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	ec 01       	movw	r28, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <lcd_puts+0xc>
unsigned int i;
for(i=0;aaa[i]!=0;i++)
lcd_data(aaa[i]);
 186:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_data>
       _delay_ms(2);
}
void lcd_puts(char *aaa)
{
unsigned int i;
for(i=0;aaa[i]!=0;i++)
 18a:	89 91       	ld	r24, Y+
 18c:	88 23       	and	r24, r24
 18e:	d9 f7       	brne	.-10     	; 0x186 <lcd_puts+0x8>
lcd_data(aaa[i]);

}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <itoa>:
void itoa(uint16_t num)
{
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	8c 01       	movw	r16, r24
 unsigned char a,b;
 a=num%10;
 num=num/10;
 b=num%10;
 num=num/10;
 lcd_data(0x30+b); 
 19c:	6a e0       	ldi	r22, 0x0A	; 10
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__udivmodhi4>
 1a4:	cb 01       	movw	r24, r22
 1a6:	6a e0       	ldi	r22, 0x0A	; 10
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__udivmodhi4>
 1ae:	80 5d       	subi	r24, 0xD0	; 208
 1b0:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_data>
 lcd_data(0x30+a); 
 1b4:	c8 01       	movw	r24, r16
 1b6:	6a e0       	ldi	r22, 0x0A	; 10
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__udivmodhi4>
 1be:	80 5d       	subi	r24, 0xD0	; 208
 1c0:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_data>
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <display>:
	return 0;
}


void display (int h, int m, int s)
{
 1ca:	ef 92       	push	r14
 1cc:	ff 92       	push	r15
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	8b 01       	movw	r16, r22
 1d4:	7a 01       	movw	r14, r20
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 1d6:	24 ec       	ldi	r18, 0xC4	; 196
 1d8:	28 bb       	out	0x18, r18	; 24
        lcd_port = (cmd & 0xF0);
 1da:	20 ec       	ldi	r18, 0xC0	; 192
 1dc:	28 bb       	out	0x18, r18	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 1de:	24 e2       	ldi	r18, 0x24	; 36
 1e0:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 1e2:	20 e2       	ldi	r18, 0x20	; 32
 1e4:	28 bb       	out	0x18, r18	; 24
 1e6:	20 ea       	ldi	r18, 0xA0	; 160
 1e8:	3f e0       	ldi	r19, 0x0F	; 15
 1ea:	f9 01       	movw	r30, r18
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <display+0x22>
lcd_cmd(0xc2);
itoa (h);
 1f0:	f9 01       	movw	r30, r18
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <display+0x28>
 1f6:	0e 94 cb 00 	call	0x196	; 0x196 <itoa>
lcd_data(':');
 1fa:	8a e3       	ldi	r24, 0x3A	; 58
 1fc:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_data>
itoa(m);
 200:	c8 01       	movw	r24, r16
 202:	0e 94 cb 00 	call	0x196	; 0x196 <itoa>
lcd_data(':');
 206:	8a e3       	ldi	r24, 0x3A	; 58
 208:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_data>
itoa(s);
 20c:	c7 01       	movw	r24, r14
 20e:	0e 94 cb 00 	call	0x196	; 0x196 <itoa>
}
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	ff 90       	pop	r15
 218:	ef 90       	pop	r14
 21a:	08 95       	ret

0000021c <main>:
#include "lcd.h"

void display(int h,int m, int s);

int main(void)
{ int h=0,m=0,s=0;
 21c:	cf 92       	push	r12
 21e:	df 92       	push	r13
 220:	ef 92       	push	r14
 222:	ff 92       	push	r15
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
  DDRD=0x00;
 22c:	11 ba       	out	0x11, r1	; 17
  PORTD=0xFF;
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	82 bb       	out	0x12, r24	; 18
  lcd_init();//initialise the lcd
 232:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_init>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 236:	84 e0       	ldi	r24, 0x04	; 4
 238:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 23a:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 23c:	84 e1       	ldi	r24, 0x14	; 20
 23e:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 240:	80 e1       	ldi	r24, 0x10	; 16
 242:	88 bb       	out	0x18, r24	; 24
 244:	80 ea       	ldi	r24, 0xA0	; 160
 246:	9f e0       	ldi	r25, 0x0F	; 15
 248:	fc 01       	movw	r30, r24
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <main+0x2e>
  lcd_cmd(0x01);//clear screen
   while(1)
   {
     if(!(PIND & 0x04))
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <main+0x32>
 252:	ee 24       	eor	r14, r14
 254:	ff 24       	eor	r15, r15
 256:	00 e0       	ldi	r16, 0x00	; 0
 258:	10 e0       	ldi	r17, 0x00	; 0
 25a:	c0 e0       	ldi	r28, 0x00	; 0
 25c:	d0 e0       	ldi	r29, 0x00	; 0
 25e:	38 ec       	ldi	r19, 0xC8	; 200
 260:	c3 2e       	mov	r12, r19
 262:	d1 2c       	mov	r13, r1
 264:	82 9b       	sbis	0x10, 2	; 16
 266:	1d c0       	rjmp	.+58     	; 0x2a2 <main+0x86>
 268:	1e c0       	rjmp	.+60     	; 0x2a6 <main+0x8a>
	 {
	 while(PIND & 0x08)
	 {
	  display(h,m,s);
 26a:	c7 01       	movw	r24, r14
 26c:	b8 01       	movw	r22, r16
 26e:	ae 01       	movw	r20, r28
 270:	0e 94 e5 00 	call	0x1ca	; 0x1ca <display>
 274:	84 ec       	ldi	r24, 0xC4	; 196
 276:	99 e0       	ldi	r25, 0x09	; 9
 278:	f6 01       	movw	r30, r12
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <main+0x5e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 27e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 280:	d9 f7       	brne	.-10     	; 0x278 <main+0x5c>
	  _delay_ms(250);
	  s++;
 282:	21 96       	adiw	r28, 0x01	; 1
	  if(s>59)
 284:	cc 33       	cpi	r28, 0x3C	; 60
 286:	d1 05       	cpc	r29, r1
 288:	24 f0       	brlt	.+8      	; 0x292 <main+0x76>
	  {s=0;
	  m++;
 28a:	0f 5f       	subi	r16, 0xFF	; 255
 28c:	1f 4f       	sbci	r17, 0xFF	; 255
 28e:	c0 e0       	ldi	r28, 0x00	; 0
 290:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  if(m>59)
 292:	0c 33       	cpi	r16, 0x3C	; 60
 294:	11 05       	cpc	r17, r1
 296:	2c f0       	brlt	.+10     	; 0x2a2 <main+0x86>
	  {
	  m=0;
	  h++;
 298:	08 94       	sec
 29a:	e1 1c       	adc	r14, r1
 29c:	f1 1c       	adc	r15, r1
 29e:	00 e0       	ldi	r16, 0x00	; 0
 2a0:	10 e0       	ldi	r17, 0x00	; 0
  lcd_cmd(0x01);//clear screen
   while(1)
   {
     if(!(PIND & 0x04))
	 {
	 while(PIND & 0x08)
 2a2:	83 99       	sbic	0x10, 3	; 16
 2a4:	e2 cf       	rjmp	.-60     	; 0x26a <main+0x4e>
	  m=0;
	  h++;
	  }
      }
	 }
	 if(!(PIND &0x02)) 
 2a6:	81 99       	sbic	0x10, 1	; 16
 2a8:	dd cf       	rjmp	.-70     	; 0x264 <main+0x48>
	 {
	  m=0;
	  s=0;
	  h=0;
	  display(h,m,s);
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	50 e0       	ldi	r21, 0x00	; 0
 2b6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <display>
 2ba:	ee 24       	eor	r14, r14
 2bc:	ff 24       	eor	r15, r15
 2be:	00 e0       	ldi	r16, 0x00	; 0
 2c0:	10 e0       	ldi	r17, 0x00	; 0
 2c2:	c0 e0       	ldi	r28, 0x00	; 0
 2c4:	d0 e0       	ldi	r29, 0x00	; 0
 2c6:	ce cf       	rjmp	.-100    	; 0x264 <main+0x48>

000002c8 <__udivmodhi4>:
 2c8:	aa 1b       	sub	r26, r26
 2ca:	bb 1b       	sub	r27, r27
 2cc:	51 e1       	ldi	r21, 0x11	; 17
 2ce:	07 c0       	rjmp	.+14     	; 0x2de <__udivmodhi4_ep>

000002d0 <__udivmodhi4_loop>:
 2d0:	aa 1f       	adc	r26, r26
 2d2:	bb 1f       	adc	r27, r27
 2d4:	a6 17       	cp	r26, r22
 2d6:	b7 07       	cpc	r27, r23
 2d8:	10 f0       	brcs	.+4      	; 0x2de <__udivmodhi4_ep>
 2da:	a6 1b       	sub	r26, r22
 2dc:	b7 0b       	sbc	r27, r23

000002de <__udivmodhi4_ep>:
 2de:	88 1f       	adc	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	5a 95       	dec	r21
 2e4:	a9 f7       	brne	.-22     	; 0x2d0 <__udivmodhi4_loop>
 2e6:	80 95       	com	r24
 2e8:	90 95       	com	r25
 2ea:	bc 01       	movw	r22, r24
 2ec:	cd 01       	movw	r24, r26
 2ee:	08 95       	ret

000002f0 <_exit>:
 2f0:	f8 94       	cli

000002f2 <__stop_program>:
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <__stop_program>
