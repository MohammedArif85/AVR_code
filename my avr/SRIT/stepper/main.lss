
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000486  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000486  000004fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000502  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000031  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001b2  00000000  00000000  00000553  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000013e  00000000  00000000  00000705  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001d7  00000000  00000000  00000843  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  00000a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000eb  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000148  00000000  00000000  00000b37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  7a:	0c 94 41 02 	jmp	0x482	; 0x482 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <stepper>:

}


void stepper(int steps, int dir, int speed)
{
  82:	2f 92       	push	r2
  84:	3f 92       	push	r3
  86:	4f 92       	push	r4
  88:	5f 92       	push	r5
  8a:	6f 92       	push	r6
  8c:	7f 92       	push	r7
  8e:	8f 92       	push	r8
  90:	9f 92       	push	r9
  92:	af 92       	push	r10
  94:	bf 92       	push	r11
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	1c 01       	movw	r2, r24
  a8:	2b 01       	movw	r4, r22
 {
   if(dir==1)
   PORTC=fstep[i%4];
   else
   PORTC=fstep[4-(i%4)-1];
   _delay_ms(5*speed);
  aa:	ca 01       	movw	r24, r20
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	84 0f       	add	r24, r20
  b6:	95 1f       	adc	r25, r21
  b8:	c0 e0       	ldi	r28, 0x00	; 0
  ba:	d0 e0       	ldi	r29, 0x00	; 0
  bc:	3c 01       	movw	r6, r24
  be:	88 24       	eor	r8, r8
  c0:	77 fc       	sbrc	r7, 7
  c2:	80 94       	com	r8
  c4:	98 2c       	mov	r9, r8
  c6:	52 c0       	rjmp	.+164    	; 0x16c <stepper+0xea>
  c8:	fe 01       	movw	r30, r28
  ca:	e3 70       	andi	r30, 0x03	; 3
  cc:	f0 70       	andi	r31, 0x00	; 0
{
 int i=0;
  
 for(i=0;i<steps;i++)
 {
   if(dir==1)
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	48 16       	cp	r4, r24
  d2:	51 04       	cpc	r5, r1
  d4:	29 f0       	breq	.+10     	; 0xe0 <stepper+0x5e>
   PORTC=fstep[i%4];
   else
   PORTC=fstep[4-(i%4)-1];
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	8e 1b       	sub	r24, r30
  dc:	9f 0b       	sbc	r25, r31
  de:	fc 01       	movw	r30, r24
  e0:	ee 0f       	add	r30, r30
  e2:	ff 1f       	adc	r31, r31
  e4:	e0 5a       	subi	r30, 0xA0	; 160
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	80 81       	ld	r24, Z
  ea:	85 bb       	out	0x15, r24	; 21
   _delay_ms(5*speed);
  ec:	c4 01       	movw	r24, r8
  ee:	b3 01       	movw	r22, r6
  f0:	0e 94 2a 01 	call	0x254	; 0x254 <__floatsisf>
  f4:	5b 01       	movw	r10, r22
  f6:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	4a ef       	ldi	r20, 0xFA	; 250
  fe:	54 e4       	ldi	r21, 0x44	; 68
 100:	0e 94 b6 01 	call	0x36c	; 0x36c <__mulsf3>
 104:	7b 01       	movw	r14, r22
 106:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	40 e8       	ldi	r20, 0x80	; 128
 10e:	5f e3       	ldi	r21, 0x3F	; 63
 110:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <__cmpsf2>
 114:	88 23       	and	r24, r24
 116:	1c f4       	brge	.+6      	; 0x11e <stepper+0x9c>
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	23 c0       	rjmp	.+70     	; 0x164 <stepper+0xe2>
		__ticks = 1;
	else if (__tmp > 65535)
 11e:	c8 01       	movw	r24, r16
 120:	b7 01       	movw	r22, r14
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	3f ef       	ldi	r19, 0xFF	; 255
 126:	4f e7       	ldi	r20, 0x7F	; 127
 128:	57 e4       	ldi	r21, 0x47	; 71
 12a:	0e 94 b2 01 	call	0x364	; 0x364 <__gesf2>
 12e:	18 16       	cp	r1, r24
 130:	ac f4       	brge	.+42     	; 0x15c <stepper+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 132:	c6 01       	movw	r24, r12
 134:	b5 01       	movw	r22, r10
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	40 e2       	ldi	r20, 0x20	; 32
 13c:	51 e4       	ldi	r21, 0x41	; 65
 13e:	0e 94 b6 01 	call	0x36c	; 0x36c <__mulsf3>
 142:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__fixunssfsi>
 146:	06 c0       	rjmp	.+12     	; 0x154 <stepper+0xd2>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 148:	88 ec       	ldi	r24, 0xC8	; 200
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <stepper+0xca>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 150:	61 50       	subi	r22, 0x01	; 1
 152:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 154:	61 15       	cp	r22, r1
 156:	71 05       	cpc	r23, r1
 158:	b9 f7       	brne	.-18     	; 0x148 <stepper+0xc6>
 15a:	07 c0       	rjmp	.+14     	; 0x16a <stepper+0xe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 15c:	c8 01       	movw	r24, r16
 15e:	b7 01       	movw	r22, r14
 160:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__fixunssfsi>
 164:	cb 01       	movw	r24, r22
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <stepper+0xe4>

void stepper(int steps, int dir, int speed)
{
 int i=0;
  
 for(i=0;i<steps;i++)
 16a:	21 96       	adiw	r28, 0x01	; 1
 16c:	c2 15       	cp	r28, r2
 16e:	d3 05       	cpc	r29, r3
 170:	0c f4       	brge	.+2      	; 0x174 <stepper+0xf2>
 172:	aa cf       	rjmp	.-172    	; 0xc8 <stepper+0x46>
   PORTC=fstep[i%4];
   else
   PORTC=fstep[4-(i%4)-1];
   _delay_ms(5*speed);
 }
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	ff 90       	pop	r15
 17e:	ef 90       	pop	r14
 180:	df 90       	pop	r13
 182:	cf 90       	pop	r12
 184:	bf 90       	pop	r11
 186:	af 90       	pop	r10
 188:	9f 90       	pop	r9
 18a:	8f 90       	pop	r8
 18c:	7f 90       	pop	r7
 18e:	6f 90       	pop	r6
 190:	5f 90       	pop	r5
 192:	4f 90       	pop	r4
 194:	3f 90       	pop	r3
 196:	2f 90       	pop	r2
 198:	08 95       	ret

0000019a <main>:

const unsigned fstep[4]={0x80,0x20,0x40,0x10};

int main (void)
{
 DDRC=0xFF;
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	84 bb       	out	0x14, r24	; 20
 PORTC=0x00;
 19e:	15 ba       	out	0x15, r1	; 21
 DDRD=0x00;
 1a0:	11 ba       	out	0x11, r1	; 17
 PORTD=0xFF;
 1a2:	82 bb       	out	0x12, r24	; 18
 while(1)
 {
  if(!(PIND & 0x01))
 1a4:	80 99       	sbic	0x10, 0	; 16
 1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <main+0x1c>
  stepper(100,1,4);
 1a8:	84 e6       	ldi	r24, 0x64	; 100
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	44 e0       	ldi	r20, 0x04	; 4
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	1a c0       	rjmp	.+52     	; 0x1ea <main+0x50>
  else if(!(PIND & 0x02))
 1b6:	81 99       	sbic	0x10, 1	; 16
 1b8:	07 c0       	rjmp	.+14     	; 0x1c8 <main+0x2e>
  stepper(200,0,3);
 1ba:	88 ec       	ldi	r24, 0xC8	; 200
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	43 e0       	ldi	r20, 0x03	; 3
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	11 c0       	rjmp	.+34     	; 0x1ea <main+0x50>
  else if(!(PIND & 0x04))
 1c8:	82 99       	sbic	0x10, 2	; 16
 1ca:	07 c0       	rjmp	.+14     	; 0x1da <main+0x40>
  stepper(100,0,2);
 1cc:	84 e6       	ldi	r24, 0x64	; 100
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	42 e0       	ldi	r20, 0x02	; 2
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	08 c0       	rjmp	.+16     	; 0x1ea <main+0x50>
  else if(!(PIND & 0x08))
 1da:	83 99       	sbic	0x10, 3	; 16
 1dc:	e3 cf       	rjmp	.-58     	; 0x1a4 <main+0xa>
  stepper(200,1,1);
 1de:	88 ec       	ldi	r24, 0xC8	; 200
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	0e 94 41 00 	call	0x82	; 0x82 <stepper>
 1ee:	da cf       	rjmp	.-76     	; 0x1a4 <main+0xa>

000001f0 <__cmpsf2>:
 1f0:	6c d0       	rcall	.+216    	; 0x2ca <__fp_cmp>
 1f2:	08 f4       	brcc	.+2      	; 0x1f6 <__cmpsf2+0x6>
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	08 95       	ret

000001f8 <__fixunssfsi>:
 1f8:	94 d0       	rcall	.+296    	; 0x322 <__fp_splitA>
 1fa:	88 f0       	brcs	.+34     	; 0x21e <__fixunssfsi+0x26>
 1fc:	9f 57       	subi	r25, 0x7F	; 127
 1fe:	90 f0       	brcs	.+36     	; 0x224 <__fixunssfsi+0x2c>
 200:	b9 2f       	mov	r27, r25
 202:	99 27       	eor	r25, r25
 204:	b7 51       	subi	r27, 0x17	; 23
 206:	a0 f0       	brcs	.+40     	; 0x230 <__fixunssfsi+0x38>
 208:	d1 f0       	breq	.+52     	; 0x23e <__fixunssfsi+0x46>
 20a:	66 0f       	add	r22, r22
 20c:	77 1f       	adc	r23, r23
 20e:	88 1f       	adc	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	1a f0       	brmi	.+6      	; 0x21a <__fixunssfsi+0x22>
 214:	ba 95       	dec	r27
 216:	c9 f7       	brne	.-14     	; 0x20a <__fixunssfsi+0x12>
 218:	12 c0       	rjmp	.+36     	; 0x23e <__fixunssfsi+0x46>
 21a:	b1 30       	cpi	r27, 0x01	; 1
 21c:	81 f0       	breq	.+32     	; 0x23e <__fixunssfsi+0x46>
 21e:	9b d0       	rcall	.+310    	; 0x356 <__fp_zero>
 220:	b1 e0       	ldi	r27, 0x01	; 1
 222:	08 95       	ret
 224:	98 c0       	rjmp	.+304    	; 0x356 <__fp_zero>
 226:	67 2f       	mov	r22, r23
 228:	78 2f       	mov	r23, r24
 22a:	88 27       	eor	r24, r24
 22c:	b8 5f       	subi	r27, 0xF8	; 248
 22e:	39 f0       	breq	.+14     	; 0x23e <__fixunssfsi+0x46>
 230:	b9 3f       	cpi	r27, 0xF9	; 249
 232:	cc f3       	brlt	.-14     	; 0x226 <__fixunssfsi+0x2e>
 234:	86 95       	lsr	r24
 236:	77 95       	ror	r23
 238:	67 95       	ror	r22
 23a:	b3 95       	inc	r27
 23c:	d9 f7       	brne	.-10     	; 0x234 <__fixunssfsi+0x3c>
 23e:	3e f4       	brtc	.+14     	; 0x24e <__fixunssfsi+0x56>
 240:	90 95       	com	r25
 242:	80 95       	com	r24
 244:	70 95       	com	r23
 246:	61 95       	neg	r22
 248:	7f 4f       	sbci	r23, 0xFF	; 255
 24a:	8f 4f       	sbci	r24, 0xFF	; 255
 24c:	9f 4f       	sbci	r25, 0xFF	; 255
 24e:	08 95       	ret

00000250 <__floatunsisf>:
 250:	e8 94       	clt
 252:	09 c0       	rjmp	.+18     	; 0x266 <__floatsisf+0x12>

00000254 <__floatsisf>:
 254:	97 fb       	bst	r25, 7
 256:	3e f4       	brtc	.+14     	; 0x266 <__floatsisf+0x12>
 258:	90 95       	com	r25
 25a:	80 95       	com	r24
 25c:	70 95       	com	r23
 25e:	61 95       	neg	r22
 260:	7f 4f       	sbci	r23, 0xFF	; 255
 262:	8f 4f       	sbci	r24, 0xFF	; 255
 264:	9f 4f       	sbci	r25, 0xFF	; 255
 266:	99 23       	and	r25, r25
 268:	a9 f0       	breq	.+42     	; 0x294 <__floatsisf+0x40>
 26a:	f9 2f       	mov	r31, r25
 26c:	96 e9       	ldi	r25, 0x96	; 150
 26e:	bb 27       	eor	r27, r27
 270:	93 95       	inc	r25
 272:	f6 95       	lsr	r31
 274:	87 95       	ror	r24
 276:	77 95       	ror	r23
 278:	67 95       	ror	r22
 27a:	b7 95       	ror	r27
 27c:	f1 11       	cpse	r31, r1
 27e:	f8 cf       	rjmp	.-16     	; 0x270 <__floatsisf+0x1c>
 280:	fa f4       	brpl	.+62     	; 0x2c0 <__floatsisf+0x6c>
 282:	bb 0f       	add	r27, r27
 284:	11 f4       	brne	.+4      	; 0x28a <__floatsisf+0x36>
 286:	60 ff       	sbrs	r22, 0
 288:	1b c0       	rjmp	.+54     	; 0x2c0 <__floatsisf+0x6c>
 28a:	6f 5f       	subi	r22, 0xFF	; 255
 28c:	7f 4f       	sbci	r23, 0xFF	; 255
 28e:	8f 4f       	sbci	r24, 0xFF	; 255
 290:	9f 4f       	sbci	r25, 0xFF	; 255
 292:	16 c0       	rjmp	.+44     	; 0x2c0 <__floatsisf+0x6c>
 294:	88 23       	and	r24, r24
 296:	11 f0       	breq	.+4      	; 0x29c <__floatsisf+0x48>
 298:	96 e9       	ldi	r25, 0x96	; 150
 29a:	11 c0       	rjmp	.+34     	; 0x2be <__floatsisf+0x6a>
 29c:	77 23       	and	r23, r23
 29e:	21 f0       	breq	.+8      	; 0x2a8 <__floatsisf+0x54>
 2a0:	9e e8       	ldi	r25, 0x8E	; 142
 2a2:	87 2f       	mov	r24, r23
 2a4:	76 2f       	mov	r23, r22
 2a6:	05 c0       	rjmp	.+10     	; 0x2b2 <__floatsisf+0x5e>
 2a8:	66 23       	and	r22, r22
 2aa:	71 f0       	breq	.+28     	; 0x2c8 <__floatsisf+0x74>
 2ac:	96 e8       	ldi	r25, 0x86	; 134
 2ae:	86 2f       	mov	r24, r22
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	2a f0       	brmi	.+10     	; 0x2c0 <__floatsisf+0x6c>
 2b6:	9a 95       	dec	r25
 2b8:	66 0f       	add	r22, r22
 2ba:	77 1f       	adc	r23, r23
 2bc:	88 1f       	adc	r24, r24
 2be:	da f7       	brpl	.-10     	; 0x2b6 <__floatsisf+0x62>
 2c0:	88 0f       	add	r24, r24
 2c2:	96 95       	lsr	r25
 2c4:	87 95       	ror	r24
 2c6:	97 f9       	bld	r25, 7
 2c8:	08 95       	ret

000002ca <__fp_cmp>:
 2ca:	99 0f       	add	r25, r25
 2cc:	00 08       	sbc	r0, r0
 2ce:	55 0f       	add	r21, r21
 2d0:	aa 0b       	sbc	r26, r26
 2d2:	e0 e8       	ldi	r30, 0x80	; 128
 2d4:	fe ef       	ldi	r31, 0xFE	; 254
 2d6:	16 16       	cp	r1, r22
 2d8:	17 06       	cpc	r1, r23
 2da:	e8 07       	cpc	r30, r24
 2dc:	f9 07       	cpc	r31, r25
 2de:	c0 f0       	brcs	.+48     	; 0x310 <__fp_cmp+0x46>
 2e0:	12 16       	cp	r1, r18
 2e2:	13 06       	cpc	r1, r19
 2e4:	e4 07       	cpc	r30, r20
 2e6:	f5 07       	cpc	r31, r21
 2e8:	98 f0       	brcs	.+38     	; 0x310 <__fp_cmp+0x46>
 2ea:	62 1b       	sub	r22, r18
 2ec:	73 0b       	sbc	r23, r19
 2ee:	84 0b       	sbc	r24, r20
 2f0:	95 0b       	sbc	r25, r21
 2f2:	39 f4       	brne	.+14     	; 0x302 <__fp_cmp+0x38>
 2f4:	0a 26       	eor	r0, r26
 2f6:	61 f0       	breq	.+24     	; 0x310 <__fp_cmp+0x46>
 2f8:	23 2b       	or	r18, r19
 2fa:	24 2b       	or	r18, r20
 2fc:	25 2b       	or	r18, r21
 2fe:	21 f4       	brne	.+8      	; 0x308 <__fp_cmp+0x3e>
 300:	08 95       	ret
 302:	0a 26       	eor	r0, r26
 304:	09 f4       	brne	.+2      	; 0x308 <__fp_cmp+0x3e>
 306:	a1 40       	sbci	r26, 0x01	; 1
 308:	a6 95       	lsr	r26
 30a:	8f ef       	ldi	r24, 0xFF	; 255
 30c:	81 1d       	adc	r24, r1
 30e:	81 1d       	adc	r24, r1
 310:	08 95       	ret

00000312 <__fp_split3>:
 312:	57 fd       	sbrc	r21, 7
 314:	90 58       	subi	r25, 0x80	; 128
 316:	44 0f       	add	r20, r20
 318:	55 1f       	adc	r21, r21
 31a:	59 f0       	breq	.+22     	; 0x332 <__fp_splitA+0x10>
 31c:	5f 3f       	cpi	r21, 0xFF	; 255
 31e:	71 f0       	breq	.+28     	; 0x33c <__fp_splitA+0x1a>
 320:	47 95       	ror	r20

00000322 <__fp_splitA>:
 322:	88 0f       	add	r24, r24
 324:	97 fb       	bst	r25, 7
 326:	99 1f       	adc	r25, r25
 328:	61 f0       	breq	.+24     	; 0x342 <__fp_splitA+0x20>
 32a:	9f 3f       	cpi	r25, 0xFF	; 255
 32c:	79 f0       	breq	.+30     	; 0x34c <__fp_splitA+0x2a>
 32e:	87 95       	ror	r24
 330:	08 95       	ret
 332:	12 16       	cp	r1, r18
 334:	13 06       	cpc	r1, r19
 336:	14 06       	cpc	r1, r20
 338:	55 1f       	adc	r21, r21
 33a:	f2 cf       	rjmp	.-28     	; 0x320 <__fp_split3+0xe>
 33c:	46 95       	lsr	r20
 33e:	f1 df       	rcall	.-30     	; 0x322 <__fp_splitA>
 340:	08 c0       	rjmp	.+16     	; 0x352 <__fp_splitA+0x30>
 342:	16 16       	cp	r1, r22
 344:	17 06       	cpc	r1, r23
 346:	18 06       	cpc	r1, r24
 348:	99 1f       	adc	r25, r25
 34a:	f1 cf       	rjmp	.-30     	; 0x32e <__fp_splitA+0xc>
 34c:	86 95       	lsr	r24
 34e:	71 05       	cpc	r23, r1
 350:	61 05       	cpc	r22, r1
 352:	08 94       	sec
 354:	08 95       	ret

00000356 <__fp_zero>:
 356:	e8 94       	clt

00000358 <__fp_szero>:
 358:	bb 27       	eor	r27, r27
 35a:	66 27       	eor	r22, r22
 35c:	77 27       	eor	r23, r23
 35e:	cb 01       	movw	r24, r22
 360:	97 f9       	bld	r25, 7
 362:	08 95       	ret

00000364 <__gesf2>:
 364:	b2 df       	rcall	.-156    	; 0x2ca <__fp_cmp>
 366:	08 f4       	brcc	.+2      	; 0x36a <__gesf2+0x6>
 368:	8f ef       	ldi	r24, 0xFF	; 255
 36a:	08 95       	ret

0000036c <__mulsf3>:
 36c:	0b d0       	rcall	.+22     	; 0x384 <__mulsf3x>
 36e:	78 c0       	rjmp	.+240    	; 0x460 <__fp_round>
 370:	69 d0       	rcall	.+210    	; 0x444 <__fp_pscA>
 372:	28 f0       	brcs	.+10     	; 0x37e <__mulsf3+0x12>
 374:	6e d0       	rcall	.+220    	; 0x452 <__fp_pscB>
 376:	18 f0       	brcs	.+6      	; 0x37e <__mulsf3+0x12>
 378:	95 23       	and	r25, r21
 37a:	09 f0       	breq	.+2      	; 0x37e <__mulsf3+0x12>
 37c:	5a c0       	rjmp	.+180    	; 0x432 <__fp_inf>
 37e:	5f c0       	rjmp	.+190    	; 0x43e <__fp_nan>
 380:	11 24       	eor	r1, r1
 382:	ea cf       	rjmp	.-44     	; 0x358 <__fp_szero>

00000384 <__mulsf3x>:
 384:	c6 df       	rcall	.-116    	; 0x312 <__fp_split3>
 386:	a0 f3       	brcs	.-24     	; 0x370 <__mulsf3+0x4>

00000388 <__mulsf3_pse>:
 388:	95 9f       	mul	r25, r21
 38a:	d1 f3       	breq	.-12     	; 0x380 <__mulsf3+0x14>
 38c:	95 0f       	add	r25, r21
 38e:	50 e0       	ldi	r21, 0x00	; 0
 390:	55 1f       	adc	r21, r21
 392:	62 9f       	mul	r22, r18
 394:	f0 01       	movw	r30, r0
 396:	72 9f       	mul	r23, r18
 398:	bb 27       	eor	r27, r27
 39a:	f0 0d       	add	r31, r0
 39c:	b1 1d       	adc	r27, r1
 39e:	63 9f       	mul	r22, r19
 3a0:	aa 27       	eor	r26, r26
 3a2:	f0 0d       	add	r31, r0
 3a4:	b1 1d       	adc	r27, r1
 3a6:	aa 1f       	adc	r26, r26
 3a8:	64 9f       	mul	r22, r20
 3aa:	66 27       	eor	r22, r22
 3ac:	b0 0d       	add	r27, r0
 3ae:	a1 1d       	adc	r26, r1
 3b0:	66 1f       	adc	r22, r22
 3b2:	82 9f       	mul	r24, r18
 3b4:	22 27       	eor	r18, r18
 3b6:	b0 0d       	add	r27, r0
 3b8:	a1 1d       	adc	r26, r1
 3ba:	62 1f       	adc	r22, r18
 3bc:	73 9f       	mul	r23, r19
 3be:	b0 0d       	add	r27, r0
 3c0:	a1 1d       	adc	r26, r1
 3c2:	62 1f       	adc	r22, r18
 3c4:	83 9f       	mul	r24, r19
 3c6:	a0 0d       	add	r26, r0
 3c8:	61 1d       	adc	r22, r1
 3ca:	22 1f       	adc	r18, r18
 3cc:	74 9f       	mul	r23, r20
 3ce:	33 27       	eor	r19, r19
 3d0:	a0 0d       	add	r26, r0
 3d2:	61 1d       	adc	r22, r1
 3d4:	23 1f       	adc	r18, r19
 3d6:	84 9f       	mul	r24, r20
 3d8:	60 0d       	add	r22, r0
 3da:	21 1d       	adc	r18, r1
 3dc:	82 2f       	mov	r24, r18
 3de:	76 2f       	mov	r23, r22
 3e0:	6a 2f       	mov	r22, r26
 3e2:	11 24       	eor	r1, r1
 3e4:	9f 57       	subi	r25, 0x7F	; 127
 3e6:	50 40       	sbci	r21, 0x00	; 0
 3e8:	8a f0       	brmi	.+34     	; 0x40c <__mulsf3_pse+0x84>
 3ea:	e1 f0       	breq	.+56     	; 0x424 <__mulsf3_pse+0x9c>
 3ec:	88 23       	and	r24, r24
 3ee:	4a f0       	brmi	.+18     	; 0x402 <__mulsf3_pse+0x7a>
 3f0:	ee 0f       	add	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	bb 1f       	adc	r27, r27
 3f6:	66 1f       	adc	r22, r22
 3f8:	77 1f       	adc	r23, r23
 3fa:	88 1f       	adc	r24, r24
 3fc:	91 50       	subi	r25, 0x01	; 1
 3fe:	50 40       	sbci	r21, 0x00	; 0
 400:	a9 f7       	brne	.-22     	; 0x3ec <__mulsf3_pse+0x64>
 402:	9e 3f       	cpi	r25, 0xFE	; 254
 404:	51 05       	cpc	r21, r1
 406:	70 f0       	brcs	.+28     	; 0x424 <__mulsf3_pse+0x9c>
 408:	14 c0       	rjmp	.+40     	; 0x432 <__fp_inf>
 40a:	a6 cf       	rjmp	.-180    	; 0x358 <__fp_szero>
 40c:	5f 3f       	cpi	r21, 0xFF	; 255
 40e:	ec f3       	brlt	.-6      	; 0x40a <__mulsf3_pse+0x82>
 410:	98 3e       	cpi	r25, 0xE8	; 232
 412:	dc f3       	brlt	.-10     	; 0x40a <__mulsf3_pse+0x82>
 414:	86 95       	lsr	r24
 416:	77 95       	ror	r23
 418:	67 95       	ror	r22
 41a:	b7 95       	ror	r27
 41c:	f7 95       	ror	r31
 41e:	e7 95       	ror	r30
 420:	9f 5f       	subi	r25, 0xFF	; 255
 422:	c1 f7       	brne	.-16     	; 0x414 <__mulsf3_pse+0x8c>
 424:	fe 2b       	or	r31, r30
 426:	88 0f       	add	r24, r24
 428:	91 1d       	adc	r25, r1
 42a:	96 95       	lsr	r25
 42c:	87 95       	ror	r24
 42e:	97 f9       	bld	r25, 7
 430:	08 95       	ret

00000432 <__fp_inf>:
 432:	97 f9       	bld	r25, 7
 434:	9f 67       	ori	r25, 0x7F	; 127
 436:	80 e8       	ldi	r24, 0x80	; 128
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	08 95       	ret

0000043e <__fp_nan>:
 43e:	9f ef       	ldi	r25, 0xFF	; 255
 440:	80 ec       	ldi	r24, 0xC0	; 192
 442:	08 95       	ret

00000444 <__fp_pscA>:
 444:	00 24       	eor	r0, r0
 446:	0a 94       	dec	r0
 448:	16 16       	cp	r1, r22
 44a:	17 06       	cpc	r1, r23
 44c:	18 06       	cpc	r1, r24
 44e:	09 06       	cpc	r0, r25
 450:	08 95       	ret

00000452 <__fp_pscB>:
 452:	00 24       	eor	r0, r0
 454:	0a 94       	dec	r0
 456:	12 16       	cp	r1, r18
 458:	13 06       	cpc	r1, r19
 45a:	14 06       	cpc	r1, r20
 45c:	05 06       	cpc	r0, r21
 45e:	08 95       	ret

00000460 <__fp_round>:
 460:	09 2e       	mov	r0, r25
 462:	03 94       	inc	r0
 464:	00 0c       	add	r0, r0
 466:	11 f4       	brne	.+4      	; 0x46c <__fp_round+0xc>
 468:	88 23       	and	r24, r24
 46a:	52 f0       	brmi	.+20     	; 0x480 <__fp_round+0x20>
 46c:	bb 0f       	add	r27, r27
 46e:	40 f4       	brcc	.+16     	; 0x480 <__fp_round+0x20>
 470:	bf 2b       	or	r27, r31
 472:	11 f4       	brne	.+4      	; 0x478 <__fp_round+0x18>
 474:	60 ff       	sbrs	r22, 0
 476:	04 c0       	rjmp	.+8      	; 0x480 <__fp_round+0x20>
 478:	6f 5f       	subi	r22, 0xFF	; 255
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	8f 4f       	sbci	r24, 0xFF	; 255
 47e:	9f 4f       	sbci	r25, 0xFF	; 255
 480:	08 95       	ret

00000482 <_exit>:
 482:	f8 94       	cli

00000484 <__stop_program>:
 484:	ff cf       	rjmp	.-2      	; 0x484 <__stop_program>
