
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000000e4  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000142  00000000  00000000  00000199  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000de  00000000  00000000  000002db  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000164  00000000  00000000  000003b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d6  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000050  00000000  00000000  00000616  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000666  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include<avr/io.h>
#include<util/delay.h>
int main(void)
{unsigned char i=1;
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0x8>
  8a:	00 d0       	rcall	.+0      	; 0x8c <main+0xa>
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
char A[6] = {0X79,0X24,0X30,0X19,0X12,0X02};
  90:	de 01       	movw	r26, r28
  92:	11 96       	adiw	r26, 0x01	; 1
  94:	e0 e6       	ldi	r30, 0x60	; 96
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	86 e0       	ldi	r24, 0x06	; 6
  9a:	01 90       	ld	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	81 50       	subi	r24, 0x01	; 1
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x18>
DDRA=0XFF;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	8a bb       	out	0x1a, r24	; 26
DDRB=0X04;
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	87 bb       	out	0x17, r24	; 23
PORTA=0X00;
  aa:	1b ba       	out	0x1b, r1	; 27
PORTB=0X04;
  ac:	88 bb       	out	0x18, r24	; 24
  ae:	21 e0       	ldi	r18, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b0:	48 ec       	ldi	r20, 0xC8	; 200
  b2:	50 e0       	ldi	r21, 0x00	; 0
while(1)
{if(!(PINB&0X04))
  b4:	b2 99       	sbic	0x16, 2	; 22
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <main+0x32>
  b8:	10 c0       	rjmp	.+32     	; 0xda <main+0x58>
 {
  while(!(PINB&0x04))
   {
     PORTA=A[i-1];
  ba:	fe 01       	movw	r30, r28
  bc:	e2 0f       	add	r30, r18
  be:	f1 1d       	adc	r31, r1
  c0:	80 81       	ld	r24, Z
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	88 ee       	ldi	r24, 0xE8	; 232
  c6:	93 e0       	ldi	r25, 0x03	; 3
  c8:	fa 01       	movw	r30, r20
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x48>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d0:	d9 f7       	brne	.-10     	; 0xc8 <main+0x46>
	 _delay_ms(100);
	 i++;
  d2:	2f 5f       	subi	r18, 0xFF	; 255
	 if(i>6)
  d4:	27 30       	cpi	r18, 0x07	; 7
  d6:	08 f0       	brcs	.+2      	; 0xda <main+0x58>
  d8:	21 e0       	ldi	r18, 0x01	; 1
PORTA=0X00;
PORTB=0X04;
while(1)
{if(!(PINB&0X04))
 {
  while(!(PINB&0x04))
  da:	b2 99       	sbic	0x16, 2	; 22
  dc:	eb cf       	rjmp	.-42     	; 0xb4 <main+0x32>
  de:	ed cf       	rjmp	.-38     	; 0xba <main+0x38>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
