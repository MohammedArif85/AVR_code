
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000023  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000003b7  00000000  00000000  00000191  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000139  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001ea  00000000  00000000  00000681  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  0000086c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ff  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000120  00000000  00000000  0000099b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000a8  00000000  00000000  00000abb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
void pwm (int time);
int main (void)
{
 DDRA=0XF0;
  6c:	80 ef       	ldi	r24, 0xF0	; 240
  6e:	8a bb       	out	0x1a, r24	; 26
 PORTA=0X00;
  70:	1b ba       	out	0x1b, r1	; 27
 DDRD=0X00;
  72:	11 ba       	out	0x11, r1	; 17
 PORTD=0XF0;
  74:	82 bb       	out	0x12, r24	; 18
 while(1)
 {
  if(!(PIND&0X01))
  {
   PORTA=0XF0;
  76:	40 ef       	ldi	r20, 0xF0	; 240
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  78:	20 e9       	ldi	r18, 0x90	; 144
  7a:	31 e0       	ldi	r19, 0x01	; 1
 PORTA=0X00;
 DDRD=0X00;
 PORTD=0XF0;
 while(1)
 {
  if(!(PIND&0X01))
  7c:	80 9b       	sbis	0x10, 0	; 16
  {
   PORTA=0XF0;
  7e:	4b bb       	out	0x1b, r20	; 27
 
  }
 if(!(PIND&0X02))
  80:	81 99       	sbic	0x10, 1	; 16
  82:	14 c0       	rjmp	.+40     	; 0xac <main+0x40>
 {
  PORTA=0XF0;
  84:	4b bb       	out	0x1b, r20	; 27
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	f9 01       	movw	r30, r18
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <main+0x20>
 }
 }
}
void pwm(int time)
{int i;
 for(i=0;i<time;i++)
  90:	01 96       	adiw	r24, 0x01	; 1
  92:	82 33       	cpi	r24, 0x32	; 50
  94:	91 05       	cpc	r25, r1
  96:	c9 f7       	brne	.-14     	; 0x8a <main+0x1e>
  }
 if(!(PIND&0X02))
 {
  PORTA=0XF0;
  pwm(50);
  PORTA=0X00;
  98:	1b ba       	out	0x1b, r1	; 27
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	f9 01       	movw	r30, r18
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x34>
 }
 }
}
void pwm(int time)
{int i;
 for(i=0;i<time;i++)
  a4:	01 96       	adiw	r24, 0x01	; 1
  a6:	82 33       	cpi	r24, 0x32	; 50
  a8:	91 05       	cpc	r25, r1
  aa:	c9 f7       	brne	.-14     	; 0x9e <main+0x32>
  PORTA=0XF0;
  pwm(50);
  PORTA=0X00;
  pwm(50);
 }
 if(!(PIND&0X04))
  ac:	82 99       	sbic	0x10, 2	; 16
  ae:	e6 cf       	rjmp	.-52     	; 0x7c <main+0x10>
 {
  PORTA=0XF0;
  b0:	4b bb       	out	0x1b, r20	; 27
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	f9 01       	movw	r30, r18
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x4c>
 }
 }
}
void pwm(int time)
{int i;
 for(i=0;i<time;i++)
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	8e 31       	cpi	r24, 0x1E	; 30
  c0:	91 05       	cpc	r25, r1
  c2:	c9 f7       	brne	.-14     	; 0xb6 <main+0x4a>
 }
 if(!(PIND&0X04))
 {
  PORTA=0XF0;
  pwm(30);
  PORTA=0X00;
  c4:	1b ba       	out	0x1b, r1	; 27
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	f9 01       	movw	r30, r18
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x60>
 }
 }
}
void pwm(int time)
{int i;
 for(i=0;i<time;i++)
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	86 34       	cpi	r24, 0x46	; 70
  d4:	91 05       	cpc	r25, r1
  d6:	c9 f7       	brne	.-14     	; 0xca <main+0x5e>
  d8:	d1 cf       	rjmp	.-94     	; 0x7c <main+0x10>

000000da <pwm>:
 
 }
 }
}
void pwm(int time)
{int i;
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	40 e9       	ldi	r20, 0x90	; 144
  e0:	51 e0       	ldi	r21, 0x01	; 1
  e2:	05 c0       	rjmp	.+10     	; 0xee <pwm+0x14>
  e4:	fa 01       	movw	r30, r20
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <pwm+0xc>
 for(i=0;i<time;i++)
  ea:	2f 5f       	subi	r18, 0xFF	; 255
  ec:	3f 4f       	sbci	r19, 0xFF	; 255
  ee:	28 17       	cp	r18, r24
  f0:	39 07       	cpc	r19, r25
  f2:	c4 f3       	brlt	.-16     	; 0xe4 <pwm+0xa>
 {
  _delay_us(100);
 }
  f4:	08 95       	ret

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
