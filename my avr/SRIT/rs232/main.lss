
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000328  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000328  0000039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000009d  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000825  00000000  00000000  0000046b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a7  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000052d  00000000  00000000  00000e37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00001364  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000131  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001ee  00000000  00000000  00001555  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00001743  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 34 01 	call	0x268	; 0x268 <main>
  7a:	0c 94 92 01 	jmp	0x324	; 0x324 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <USART_INIT>:
/*
===================================================================
SET BAUD RATE
===================================================================
*/
	UBRRL=UBRRVAL;
  82:	83 e3       	ldi	r24, 0x33	; 51
  84:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);
  86:	10 bc       	out	0x20, r1	; 32
/*===================================================================
SET DATAFRAME FORMAT : ASYNCHRONOUS MODE, NO PARITY, 1 START BIT, 8BIT
                       SIZE DATA	
===================================================================
*/
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
  88:	86 e8       	ldi	r24, 0x86	; 134
  8a:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN);
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	8a b9       	out	0x0a, r24	; 10
}
  90:	08 95       	ret

00000092 <rswritechar>:
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <rswritechar>
	UDR=c; //SEND RECEIVED DATA BACK
  96:	8c b9       	out	0x0c, r24	; 12
}
  98:	08 95       	ret

0000009a <rsreadchar>:
/*
===================================================================
WAIT UNTIL DATA IS AVAILABLE
===================================================================
*/
	while(!(UCSRA&(1<<RXC)))
  9a:	5f 9b       	sbis	0x0b, 7	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <rsreadchar>
	{	}
	return UDR;
  9e:	8c b1       	in	r24, 0x0c	; 12
}
  a0:	08 95       	ret

000000a2 <rsstr>:
===================================================================
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
  a2:	fc 01       	movw	r30, r24
  a4:	04 c0       	rjmp	.+8      	; 0xae <rsstr+0xc>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <rsstr+0x4>
	UDR=c; //SEND RECEIVED DATA BACK
  aa:	8c b9       	out	0x0c, r24	; 12
void rsstr(char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
  ac:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
	while(*s)
  ae:	80 81       	ld	r24, Z
  b0:	88 23       	and	r24, r24
  b2:	c9 f7       	brne	.-14     	; 0xa6 <rsstr+0x4>
	{
		rswritechar(*s);
		s++;
	}
  b4:	08 95       	ret

000000b6 <lcd_reset>:
#define LCD_RW      0x02
#define LCD_EN      0x04

void lcd_reset(void)
{
        lcd_port = 0xFF;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	88 bb       	out	0x18, r24	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ba:	80 e4       	ldi	r24, 0x40	; 64
  bc:	9c e9       	ldi	r25, 0x9C	; 156
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_reset+0x8>
        _delay_ms(20);
        lcd_port = 0x30+LCD_EN;
  c2:	94 e3       	ldi	r25, 0x34	; 52
  c4:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  c6:	80 e3       	ldi	r24, 0x30	; 48
  c8:	88 bb       	out	0x18, r24	; 24
  ca:	e0 e2       	ldi	r30, 0x20	; 32
  cc:	fe e4       	ldi	r31, 0x4E	; 78
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_reset+0x18>
        _delay_ms(10);
        lcd_port = 0x30+LCD_EN;
  d2:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  d4:	88 bb       	out	0x18, r24	; 24
  d6:	20 ed       	ldi	r18, 0xD0	; 208
  d8:	37 e0       	ldi	r19, 0x07	; 7
  da:	f9 01       	movw	r30, r18
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcd_reset+0x26>
        _delay_ms(1);
        lcd_port = 0x30+LCD_EN;
  e0:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	c9 01       	movw	r24, r18
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <lcd_reset+0x30>
        _delay_ms(1);
        lcd_port = 0x20+LCD_EN;
  ea:	84 e2       	ldi	r24, 0x24	; 36
  ec:	88 bb       	out	0x18, r24	; 24
        lcd_port = 0x20;
  ee:	80 e2       	ldi	r24, 0x20	; 32
  f0:	88 bb       	out	0x18, r24	; 24
  f2:	c9 01       	movw	r24, r18
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcd_reset+0x3e>
        _delay_ms(1);
}
  f8:	08 95       	ret

000000fa <lcd_cmd>:
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
  fa:	38 2f       	mov	r19, r24
  fc:	30 7f       	andi	r19, 0xF0	; 240
  fe:	23 2f       	mov	r18, r19
 100:	24 60       	ori	r18, 0x04	; 4
 102:	28 bb       	out	0x18, r18	; 24
        lcd_port = (cmd & 0xF0);
 104:	38 bb       	out	0x18, r19	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	24 e0       	ldi	r18, 0x04	; 4
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	2a 95       	dec	r18
 110:	e1 f7       	brne	.-8      	; 0x10a <lcd_cmd+0x10>
 112:	28 2f       	mov	r18, r24
 114:	24 60       	ori	r18, 0x04	; 4
 116:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 118:	88 bb       	out	0x18, r24	; 24
 11a:	80 ea       	ldi	r24, 0xA0	; 160
 11c:	9f e0       	ldi	r25, 0x0F	; 15
 11e:	fc 01       	movw	r30, r24
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <lcd_cmd+0x26>

      

        _delay_ms(2);
        _delay_ms(2);
}
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_cmd+0x2a>
 128:	08 95       	ret

0000012a <lcd_init>:

void lcd_init (void)
{       DDRB=0xFF;
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	87 bb       	out	0x17, r24	; 23
        PORTB=0x00; 
 12e:	18 ba       	out	0x18, r1	; 24
        lcd_reset();         // Call LCD reset
 130:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_reset>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 134:	84 e2       	ldi	r24, 0x24	; 36
 136:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 138:	80 e2       	ldi	r24, 0x20	; 32
 13a:	88 bb       	out	0x18, r24	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 13c:	54 e8       	ldi	r21, 0x84	; 132
 13e:	58 bb       	out	0x18, r21	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 140:	40 e8       	ldi	r20, 0x80	; 128
 142:	48 bb       	out	0x18, r20	; 24
 144:	20 ea       	ldi	r18, 0xA0	; 160
 146:	3f e0       	ldi	r19, 0x0F	; 15
 148:	c9 01       	movw	r24, r18
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_init+0x20>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 14e:	c9 01       	movw	r24, r18
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x26>
 154:	94 e0       	ldi	r25, 0x04	; 4
 156:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 158:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 15a:	84 ec       	ldi	r24, 0xC4	; 196
 15c:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 15e:	80 ec       	ldi	r24, 0xC0	; 192
 160:	88 bb       	out	0x18, r24	; 24
 162:	f9 01       	movw	r30, r18
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_init+0x3a>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 168:	f9 01       	movw	r30, r18
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_init+0x40>
 16e:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 170:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 172:	84 e6       	ldi	r24, 0x64	; 100
 174:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 176:	80 e6       	ldi	r24, 0x60	; 96
 178:	88 bb       	out	0x18, r24	; 24
 17a:	f9 01       	movw	r30, r18
 17c:	31 97       	sbiw	r30, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <lcd_init+0x52>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 180:	f9 01       	movw	r30, r18
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_init+0x58>
 186:	58 bb       	out	0x18, r21	; 24
        lcd_port = (cmd & 0xF0);
 188:	48 bb       	out	0x18, r20	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 18a:	98 bb       	out	0x18, r25	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 18c:	18 ba       	out	0x18, r1	; 24
 18e:	c9 01       	movw	r24, r18
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_init+0x66>
        lcd_reset();         // Call LCD reset
        lcd_cmd(0x28);       // 4-bit mode - 2 line - 5x7 font.
        lcd_cmd(0x0C);       // Display on cursor - off .
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 }
 194:	c9 01       	movw	r24, r18
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_init+0x6c>
 19a:	08 95       	ret

0000019c <lcd_data>:


void lcd_data (unsigned char dat)
{
        lcd_port = ((dat & 0xF0)|LCD_EN|LCD_RS);
 19c:	98 2f       	mov	r25, r24
 19e:	90 7f       	andi	r25, 0xF0	; 240
 1a0:	29 2f       	mov	r18, r25
 1a2:	25 60       	ori	r18, 0x05	; 5
 1a4:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((dat & 0xF0)|LCD_RS);
 1a6:	91 60       	ori	r25, 0x01	; 1
 1a8:	98 bb       	out	0x18, r25	; 24
		
		lcd_port = (((dat << 4) & 0xF0)|LCD_EN|LCD_RS);
 1aa:	82 95       	swap	r24
 1ac:	80 7f       	andi	r24, 0xF0	; 240
 1ae:	98 2f       	mov	r25, r24
 1b0:	95 60       	ori	r25, 0x05	; 5
 1b2:	98 bb       	out	0x18, r25	; 24
        lcd_port = (((dat << 4) & 0xF0)|LCD_RS);
 1b4:	81 60       	ori	r24, 0x01	; 1
 1b6:	88 bb       	out	0x18, r24	; 24
 1b8:	80 ea       	ldi	r24, 0xA0	; 160
 1ba:	9f e0       	ldi	r25, 0x0F	; 15
 1bc:	fc 01       	movw	r30, r24
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_data+0x22>
       
      

       _delay_ms(2);
       _delay_ms(2);
}
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_data+0x26>
 1c6:	08 95       	ret

000001c8 <lcd_puts>:
void lcd_puts(char *aaa)
{
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	ec 01       	movw	r28, r24
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <lcd_puts+0xc>
unsigned int i;
for(i=0;aaa[i]!=0;i++)
lcd_data(aaa[i]);
 1d0:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_data>
       _delay_ms(2);
}
void lcd_puts(char *aaa)
{
unsigned int i;
for(i=0;aaa[i]!=0;i++)
 1d4:	89 91       	ld	r24, Y+
 1d6:	88 23       	and	r24, r24
 1d8:	d9 f7       	brne	.-10     	; 0x1d0 <lcd_puts+0x8>
lcd_data(aaa[i]);

}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <itoa>:
void itoa(uint16_t num)
{
 1e0:	cf 92       	push	r12
 1e2:	df 92       	push	r13
 1e4:	ef 92       	push	r14
 1e6:	ff 92       	push	r15
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	7c 01       	movw	r14, r24
 unsigned char a,b,c,d;
 a=num%10;
 num=num/10;
 1ee:	6a e0       	ldi	r22, 0x0A	; 10
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodhi4>
 1f6:	d6 2e       	mov	r13, r22
 1f8:	c7 2e       	mov	r12, r23
 b=num%10;
 num=num/10;
 1fa:	86 2f       	mov	r24, r22
 1fc:	97 2f       	mov	r25, r23
 1fe:	6a e0       	ldi	r22, 0x0A	; 10
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodhi4>
 206:	16 2f       	mov	r17, r22
 208:	07 2f       	mov	r16, r23
 c=num%10;
 num=num/10;
 d=num%10;
 num=num/10;
 lcd_data(0x30+d); 
 20a:	86 2f       	mov	r24, r22
 20c:	97 2f       	mov	r25, r23
 20e:	6a e0       	ldi	r22, 0x0A	; 10
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodhi4>
 216:	cb 01       	movw	r24, r22
 218:	6a e0       	ldi	r22, 0x0A	; 10
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodhi4>
 220:	80 5d       	subi	r24, 0xD0	; 208
 222:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_data>
 lcd_data(0x30+c); 
 226:	81 2f       	mov	r24, r17
 228:	90 2f       	mov	r25, r16
 22a:	6a e0       	ldi	r22, 0x0A	; 10
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodhi4>
 232:	80 5d       	subi	r24, 0xD0	; 208
 234:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_data>
 lcd_data(0x30+b); 
 238:	8d 2d       	mov	r24, r13
 23a:	9c 2d       	mov	r25, r12
 23c:	6a e0       	ldi	r22, 0x0A	; 10
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodhi4>
 244:	80 5d       	subi	r24, 0xD0	; 208
 246:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_data>
 lcd_data(0x30+a); 
 24a:	c7 01       	movw	r24, r14
 24c:	6a e0       	ldi	r22, 0x0A	; 10
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodhi4>
 254:	80 5d       	subi	r24, 0xD0	; 208
 256:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_data>
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	ff 90       	pop	r15
 260:	ef 90       	pop	r14
 262:	df 90       	pop	r13
 264:	cf 90       	pop	r12
 266:	08 95       	ret

00000268 <main>:
#include "uart.h"
#include<util/delay.h>
#include "lcd.h"

int main(void)
{
 268:	df 92       	push	r13
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
/*
===================================================================
SET BAUD RATE
===================================================================
*/
	UBRRL=UBRRVAL;
 276:	83 e3       	ldi	r24, 0x33	; 51
 278:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);
 27a:	10 bc       	out	0x20, r1	; 32
/*===================================================================
SET DATAFRAME FORMAT : ASYNCHRONOUS MODE, NO PARITY, 1 START BIT, 8BIT
                       SIZE DATA	
===================================================================
*/
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
 27c:	86 e8       	ldi	r24, 0x86	; 134
 27e:	80 bd       	out	0x20, r24	; 32
/*
===================================================================
ENABLE TRANSMITTER AND RECEIVER	
===================================================================
*/
	UCSRB=(1<<RXEN)|(1<<TXEN);
 280:	88 e1       	ldi	r24, 0x18	; 24
 282:	8a b9       	out	0x0a, r24	; 10
	unsigned char t;
	USART_INIT();
	DDRA=0xFF;
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	8a bb       	out	0x1a, r24	; 26
	lcd_init();
 288:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_init>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 28c:	84 e0       	ldi	r24, 0x04	; 4
 28e:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 290:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 292:	84 e1       	ldi	r24, 0x14	; 20
 294:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 296:	80 e1       	ldi	r24, 0x10	; 16
 298:	88 bb       	out	0x18, r24	; 24
 29a:	80 ea       	ldi	r24, 0xA0	; 160
 29c:	9f e0       	ldi	r25, 0x0F	; 15
 29e:	fc 01       	movw	r30, r24
 2a0:	31 97       	sbiw	r30, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <main+0x38>
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <main+0x3c>
 2a8:	e0 e6       	ldi	r30, 0x60	; 96
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	04 c0       	rjmp	.+8      	; 0x2b6 <main+0x4e>
 2ae:	5d 9b       	sbis	0x0b, 5	; 11
 2b0:	fe cf       	rjmp	.-4      	; 0x2ae <main+0x46>
	UDR=c; //SEND RECEIVED DATA BACK
 2b2:	8c b9       	out	0x0c, r24	; 12
void rsstr(char *s)
{
	while(*s)
	{
		rswritechar(*s);
		s++;
 2b4:	31 96       	adiw	r30, 0x01	; 1
FUNCTION TO PRINT STRING
===================================================================
*/
void rsstr(char *s)
{
	while(*s)
 2b6:	80 81       	ld	r24, Z
 2b8:	88 23       	and	r24, r24
 2ba:	c9 f7       	brne	.-14     	; 0x2ae <main+0x46>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 2bc:	54 ec       	ldi	r21, 0xC4	; 196
 2be:	d5 2e       	mov	r13, r21
        lcd_port = (cmd & 0xF0);
 2c0:	40 ec       	ldi	r20, 0xC0	; 192
 2c2:	e4 2e       	mov	r14, r20
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 2c4:	34 e2       	ldi	r19, 0x24	; 36
 2c6:	f3 2e       	mov	r15, r19
        lcd_port = ((cmd << 4) & 0xF0);
 2c8:	00 e2       	ldi	r16, 0x20	; 32
 2ca:	c0 ea       	ldi	r28, 0xA0	; 160
 2cc:	df e0       	ldi	r29, 0x0F	; 15
/*
===================================================================
WAIT UNTIL DATA IS AVAILABLE
===================================================================
*/
	while(!(UCSRA&(1<<RXC)))
 2ce:	5f 9b       	sbis	0x0b, 7	; 11
 2d0:	fe cf       	rjmp	.-4      	; 0x2ce <main+0x66>
	{	}
	return UDR;
 2d2:	1c b1       	in	r17, 0x0c	; 12
/*
===================================================================
WAIT FOR EMPTY TRANSMIT BUFFER
===================================================================
*/
	while(!(UCSRA&(1<<UDRE)));
 2d4:	5d 9b       	sbis	0x0b, 5	; 11
 2d6:	fe cf       	rjmp	.-4      	; 0x2d4 <main+0x6c>
	UDR=c; //SEND RECEIVED DATA BACK
 2d8:	1c b9       	out	0x0c, r17	; 12
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 2da:	d8 ba       	out	0x18, r13	; 24
        lcd_port = (cmd & 0xF0);
 2dc:	e8 ba       	out	0x18, r14	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 2de:	f8 ba       	out	0x18, r15	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 2e0:	08 bb       	out	0x18, r16	; 24
 2e2:	ce 01       	movw	r24, r28
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <main+0x7c>
	while(1)
	{
		t=rsreadchar();
		rswritechar(t);
		lcd_cmd(0XC2);
		lcd_data(t);
 2e8:	ce 01       	movw	r24, r28
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <main+0x82>
 2ee:	81 2f       	mov	r24, r17
 2f0:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_data>
		t=t-0x30;
		PORTA=t<<4;
 2f4:	12 95       	swap	r17
 2f6:	10 7f       	andi	r17, 0xF0	; 240
 2f8:	1b bb       	out	0x1b, r17	; 27
 2fa:	e9 cf       	rjmp	.-46     	; 0x2ce <main+0x66>

000002fc <__udivmodhi4>:
 2fc:	aa 1b       	sub	r26, r26
 2fe:	bb 1b       	sub	r27, r27
 300:	51 e1       	ldi	r21, 0x11	; 17
 302:	07 c0       	rjmp	.+14     	; 0x312 <__udivmodhi4_ep>

00000304 <__udivmodhi4_loop>:
 304:	aa 1f       	adc	r26, r26
 306:	bb 1f       	adc	r27, r27
 308:	a6 17       	cp	r26, r22
 30a:	b7 07       	cpc	r27, r23
 30c:	10 f0       	brcs	.+4      	; 0x312 <__udivmodhi4_ep>
 30e:	a6 1b       	sub	r26, r22
 310:	b7 0b       	sbc	r27, r23

00000312 <__udivmodhi4_ep>:
 312:	88 1f       	adc	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	5a 95       	dec	r21
 318:	a9 f7       	brne	.-22     	; 0x304 <__udivmodhi4_loop>
 31a:	80 95       	com	r24
 31c:	90 95       	com	r25
 31e:	bc 01       	movw	r22, r24
 320:	cd 01       	movw	r24, r26
 322:	08 95       	ret

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>
