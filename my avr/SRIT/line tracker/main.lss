
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000013e  00000000  00000000  0000015d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d1  00000000  00000000  0000029b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001c9  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000de  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000005e  00000000  00000000  00000636  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
   #include<util/delay.h>
   #include<compat/deprecated.h>
  int main (void)
   
   {unsigned char c;
    DDRC=0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
    DDRA=0xF0;
  70:	80 ef       	ldi	r24, 0xF0	; 240
  72:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x0F;
  74:	8f e0       	ldi	r24, 0x0F	; 15
  76:	8b bb       	out	0x1b, r24	; 27
	PORTC=0x00;
  78:	15 ba       	out	0x15, r1	; 21
	
	while(1)
	{
	 c=PINA&0x0D;
	 if(c==0x09)// forward
	 PORTC=0x50;
  7a:	40 e5       	ldi	r20, 0x50	; 80
      PORTC=0x00;    
     _delay_ms(10);
	 } 
	 else if (c==0x0C)//extreme left
	 {
	 PORTC=0x60;
  7c:	e0 e6       	ldi	r30, 0x60	; 96
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7e:	20 e4       	ldi	r18, 0x40	; 64
  80:	3c e9       	ldi	r19, 0x9C	; 156
	 else if (c==0x01)//simple right
	 PORTC=0x10;
	 else if (c==0x08)//simple left
	 PORTC=0x40;
	 else if (c==0x05)//extreme right
	 {PORTC=0x90;
  82:	70 e9       	ldi	r23, 0x90	; 144
	 if(c==0x09)// forward
	 PORTC=0x50;
	 else if (c==0x01)//simple right
	 PORTC=0x10;
	 else if (c==0x08)//simple left
	 PORTC=0x40;
  84:	60 e4       	ldi	r22, 0x40	; 64
	{
	 c=PINA&0x0D;
	 if(c==0x09)// forward
	 PORTC=0x50;
	 else if (c==0x01)//simple right
	 PORTC=0x10;
  86:	50 e1       	ldi	r21, 0x10	; 16
	PORTC=0x00;
	
	
	while(1)
	{
	 c=PINA&0x0D;
  88:	89 b3       	in	r24, 0x19	; 25
  8a:	8d 70       	andi	r24, 0x0D	; 13
	 if(c==0x09)// forward
  8c:	89 30       	cpi	r24, 0x09	; 9
  8e:	c9 f0       	breq	.+50     	; 0xc2 <main+0x56>
	 PORTC=0x50;
	 else if (c==0x01)//simple right
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	11 f4       	brne	.+4      	; 0x98 <main+0x2c>
	 PORTC=0x10;
  94:	55 bb       	out	0x15, r21	; 21
  96:	f8 cf       	rjmp	.-16     	; 0x88 <main+0x1c>
	 else if (c==0x08)//simple left
  98:	88 30       	cpi	r24, 0x08	; 8
  9a:	11 f4       	brne	.+4      	; 0xa0 <main+0x34>
	 PORTC=0x40;
  9c:	65 bb       	out	0x15, r22	; 21
  9e:	f4 cf       	rjmp	.-24     	; 0x88 <main+0x1c>
	 else if (c==0x05)//extreme right
  a0:	85 30       	cpi	r24, 0x05	; 5
  a2:	11 f4       	brne	.+4      	; 0xa8 <main+0x3c>
	 {PORTC=0x90;
  a4:	75 bb       	out	0x15, r23	; 21
  a6:	03 c0       	rjmp	.+6      	; 0xae <main+0x42>
	  _delay_ms(10);
      PORTC=0x00;    
     _delay_ms(10);
	 } 
	 else if (c==0x0C)//extreme left
  a8:	8c 30       	cpi	r24, 0x0C	; 12
  aa:	49 f4       	brne	.+18     	; 0xbe <main+0x52>
	 {
	 PORTC=0x60;
  ac:	e5 bb       	out	0x15, r30	; 21
  ae:	c9 01       	movw	r24, r18
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <main+0x44>
	 _delay_ms(10);
	 PORTC=0x00;
  b4:	15 ba       	out	0x15, r1	; 21
  b6:	c9 01       	movw	r24, r18
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x4c>
  bc:	e5 cf       	rjmp	.-54     	; 0x88 <main+0x1c>
	 _delay_ms(10);
	 }
	 else if (c==0x00)
  be:	88 23       	and	r24, r24
  c0:	11 f4       	brne	.+4      	; 0xc6 <main+0x5a>
	 PORTC=0x50;
  c2:	45 bb       	out	0x15, r20	; 21
  c4:	e1 cf       	rjmp	.-62     	; 0x88 <main+0x1c>
	  
	 else
	 PORTC=0x00;
  c6:	15 ba       	out	0x15, r1	; 21
  c8:	df cf       	rjmp	.-66     	; 0x88 <main+0x1c>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
