
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000035a  000003ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .eeprom       00000004  00810000  00810000  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000020  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000076  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a4  00000000  00000000  000004a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ec  00000000  00000000  00000d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e3  00000000  00000000  00000f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001418  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000132  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000226  00000000  00000000  000015da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 3f 01 	call	0x27e	; 0x27e <main>
  7a:	0c 94 ab 01 	jmp	0x356	; 0x356 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
  82:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
  84:	e1 99       	sbic	0x1c, 1	; 28
  86:	fe cf       	rjmp	.-4      	; 0x84 <eeprom_write_byte+0x2>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
  88:	3f bb       	out	0x1f, r19	; 31
  8a:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
  8c:	6d bb       	out	0x1d, r22	; 29

    __asm__ __volatile__ (
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	f8 94       	cli
  92:	e2 9a       	sbi	0x1c, 2	; 28
  94:	e1 9a       	sbi	0x1c, 1	; 28
  96:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
  98:	08 95       	ret

0000009a <lcd_reset>:
#define LCD_RW      0x02
#define LCD_EN      0x04

void lcd_reset(void)
{
        lcd_port = 0xFF;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	88 bb       	out	0x18, r24	; 24
  9e:	88 ec       	ldi	r24, 0xC8	; 200
  a0:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a2:	20 e9       	ldi	r18, 0x90	; 144
  a4:	31 e0       	ldi	r19, 0x01	; 1
  a6:	f9 01       	movw	r30, r18
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_reset+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ae:	d9 f7       	brne	.-10     	; 0xa6 <lcd_reset+0xc>
        _delay_ms(20);
        lcd_port = 0x30+LCD_EN;
  b0:	94 e3       	ldi	r25, 0x34	; 52
  b2:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  b4:	80 e3       	ldi	r24, 0x30	; 48
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	e0 e4       	ldi	r30, 0x40	; 64
  ba:	fc e9       	ldi	r31, 0x9C	; 156
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_reset+0x22>
        _delay_ms(10);
        lcd_port = 0x30+LCD_EN;
  c0:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  c2:	88 bb       	out	0x18, r24	; 24
  c4:	20 ea       	ldi	r18, 0xA0	; 160
  c6:	3f e0       	ldi	r19, 0x0F	; 15
  c8:	f9 01       	movw	r30, r18
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_reset+0x30>
        _delay_ms(1);
        lcd_port = 0x30+LCD_EN;
  ce:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  d0:	88 bb       	out	0x18, r24	; 24
  d2:	c9 01       	movw	r24, r18
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_reset+0x3a>
        _delay_ms(1);
        lcd_port = 0x20+LCD_EN;
  d8:	84 e2       	ldi	r24, 0x24	; 36
  da:	88 bb       	out	0x18, r24	; 24
        lcd_port = 0x20;
  dc:	80 e2       	ldi	r24, 0x20	; 32
  de:	88 bb       	out	0x18, r24	; 24
  e0:	c9 01       	movw	r24, r18
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_reset+0x48>
        _delay_ms(1);
}
  e6:	08 95       	ret

000000e8 <lcd_cmd>:
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
  e8:	38 2f       	mov	r19, r24
  ea:	30 7f       	andi	r19, 0xF0	; 240
  ec:	23 2f       	mov	r18, r19
  ee:	24 60       	ori	r18, 0x04	; 4
  f0:	28 bb       	out	0x18, r18	; 24
        lcd_port = (cmd & 0xF0);
  f2:	38 bb       	out	0x18, r19	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	24 e0       	ldi	r18, 0x04	; 4
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	2a 95       	dec	r18
  fe:	e1 f7       	brne	.-8      	; 0xf8 <lcd_cmd+0x10>
 100:	28 2f       	mov	r18, r24
 102:	24 60       	ori	r18, 0x04	; 4
 104:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 106:	88 bb       	out	0x18, r24	; 24
 108:	80 e4       	ldi	r24, 0x40	; 64
 10a:	9f e1       	ldi	r25, 0x1F	; 31
 10c:	fc 01       	movw	r30, r24
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <lcd_cmd+0x26>

      

        _delay_ms(2);
        _delay_ms(2);
}
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_cmd+0x2a>
 116:	08 95       	ret

00000118 <lcd_data>:
 }


void lcd_data (unsigned char dat)
{
        lcd_port = ((dat & 0xF0)|LCD_EN|LCD_RS);
 118:	98 2f       	mov	r25, r24
 11a:	90 7f       	andi	r25, 0xF0	; 240
 11c:	29 2f       	mov	r18, r25
 11e:	25 60       	ori	r18, 0x05	; 5
 120:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((dat & 0xF0)|LCD_RS);
 122:	91 60       	ori	r25, 0x01	; 1
 124:	98 bb       	out	0x18, r25	; 24
		
		lcd_port = (((dat << 4) & 0xF0)|LCD_EN|LCD_RS);
 126:	82 95       	swap	r24
 128:	80 7f       	andi	r24, 0xF0	; 240
 12a:	98 2f       	mov	r25, r24
 12c:	95 60       	ori	r25, 0x05	; 5
 12e:	98 bb       	out	0x18, r25	; 24
        lcd_port = (((dat << 4) & 0xF0)|LCD_RS);
 130:	81 60       	ori	r24, 0x01	; 1
 132:	88 bb       	out	0x18, r24	; 24
 134:	80 e4       	ldi	r24, 0x40	; 64
 136:	9f e1       	ldi	r25, 0x1F	; 31
 138:	fc 01       	movw	r30, r24
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_data+0x22>
       
      

       _delay_ms(2);
       _delay_ms(2);
}
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_data+0x26>
 142:	08 95       	ret

00000144 <lcd_puts>:
void lcd_puts(char *aaa)
{
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
 14a:	02 c0       	rjmp	.+4      	; 0x150 <lcd_puts+0xc>
unsigned int i;
for(i=0;aaa[i]!=0;i++)
lcd_data(aaa[i]);
 14c:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_data>
       _delay_ms(2);
}
void lcd_puts(char *aaa)
{
unsigned int i;
for(i=0;aaa[i]!=0;i++)
 150:	89 91       	ld	r24, Y+
 152:	88 23       	and	r24, r24
 154:	d9 f7       	brne	.-10     	; 0x14c <lcd_puts+0x8>
lcd_data(aaa[i]);

}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <itoa>:
void itoa(uint16_t num)
{
 15c:	cf 92       	push	r12
 15e:	df 92       	push	r13
 160:	ef 92       	push	r14
 162:	ff 92       	push	r15
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	7c 01       	movw	r14, r24
 unsigned char a,b,c,d;
 a=num%10;
 num=num/10;
 16a:	6a e0       	ldi	r22, 0x0A	; 10
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	0e 94 97 01 	call	0x32e	; 0x32e <__udivmodhi4>
 172:	d6 2e       	mov	r13, r22
 174:	c7 2e       	mov	r12, r23
 b=num%10;
 num=num/10;
 176:	86 2f       	mov	r24, r22
 178:	97 2f       	mov	r25, r23
 17a:	6a e0       	ldi	r22, 0x0A	; 10
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	0e 94 97 01 	call	0x32e	; 0x32e <__udivmodhi4>
 182:	16 2f       	mov	r17, r22
 184:	07 2f       	mov	r16, r23
 c=num%10;
 num=num/10;
 d=num%10;
 lcd_data(0x30+d); 
 186:	86 2f       	mov	r24, r22
 188:	97 2f       	mov	r25, r23
 18a:	6a e0       	ldi	r22, 0x0A	; 10
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	0e 94 97 01 	call	0x32e	; 0x32e <__udivmodhi4>
 192:	cb 01       	movw	r24, r22
 194:	6a e0       	ldi	r22, 0x0A	; 10
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	0e 94 97 01 	call	0x32e	; 0x32e <__udivmodhi4>
 19c:	80 5d       	subi	r24, 0xD0	; 208
 19e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_data>
 lcd_data(0x30+c); 
 1a2:	81 2f       	mov	r24, r17
 1a4:	90 2f       	mov	r25, r16
 1a6:	6a e0       	ldi	r22, 0x0A	; 10
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 97 01 	call	0x32e	; 0x32e <__udivmodhi4>
 1ae:	80 5d       	subi	r24, 0xD0	; 208
 1b0:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_data>
 lcd_data(0x30+b); 
 1b4:	8d 2d       	mov	r24, r13
 1b6:	9c 2d       	mov	r25, r12
 1b8:	6a e0       	ldi	r22, 0x0A	; 10
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	0e 94 97 01 	call	0x32e	; 0x32e <__udivmodhi4>
 1c0:	80 5d       	subi	r24, 0xD0	; 208
 1c2:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_data>
 lcd_data(0x30+a); 
 1c6:	c7 01       	movw	r24, r14
 1c8:	6a e0       	ldi	r22, 0x0A	; 10
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	0e 94 97 01 	call	0x32e	; 0x32e <__udivmodhi4>
 1d0:	80 5d       	subi	r24, 0xD0	; 208
 1d2:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_data>
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	ff 90       	pop	r15
 1dc:	ef 90       	pop	r14
 1de:	df 90       	pop	r13
 1e0:	cf 90       	pop	r12
 1e2:	08 95       	ret

000001e4 <lcd_init>:
        _delay_ms(2);
        _delay_ms(2);
}

void lcd_init (void)
{       DDRB=0xFF;
 1e4:	0f 93       	push	r16
 1e6:	1f 93       	push	r17
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	87 bb       	out	0x17, r24	; 23
        PORTB=0x00; 
 1ec:	18 ba       	out	0x18, r1	; 24
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
 1ee:	01 e4       	ldi	r16, 0x41	; 65
 1f0:	10 e0       	ldi	r17, 0x00	; 0
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	6b e4       	ldi	r22, 0x4B	; 75
 1f8:	76 e0       	ldi	r23, 0x06	; 6
 1fa:	a8 01       	movw	r20, r16
 1fc:	0e 94 82 01 	call	0x304	; 0x304 <__eewr_word>
        eeprom_write_word(&eid,1611);
        eeprom_write_word(&valt,35);
		lcd_reset();         // Call LCD reset
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	63 e2       	ldi	r22, 0x23	; 35
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	a8 01       	movw	r20, r16
 20a:	0e 94 82 01 	call	0x304	; 0x304 <__eewr_word>
 20e:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_reset>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 212:	84 e2       	ldi	r24, 0x24	; 36
 214:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 216:	80 e2       	ldi	r24, 0x20	; 32
 218:	88 bb       	out	0x18, r24	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 21a:	54 e8       	ldi	r21, 0x84	; 132
 21c:	58 bb       	out	0x18, r21	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 21e:	40 e8       	ldi	r20, 0x80	; 128
 220:	48 bb       	out	0x18, r20	; 24
 222:	20 e4       	ldi	r18, 0x40	; 64
 224:	3f e1       	ldi	r19, 0x1F	; 31
 226:	c9 01       	movw	r24, r18
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_init+0x44>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 22c:	c9 01       	movw	r24, r18
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <lcd_init+0x4a>
 232:	94 e0       	ldi	r25, 0x04	; 4
 234:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 236:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 238:	84 ec       	ldi	r24, 0xC4	; 196
 23a:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 23c:	80 ec       	ldi	r24, 0xC0	; 192
 23e:	88 bb       	out	0x18, r24	; 24
 240:	f9 01       	movw	r30, r18
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_init+0x5e>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 246:	f9 01       	movw	r30, r18
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_init+0x64>
 24c:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 24e:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 250:	84 e6       	ldi	r24, 0x64	; 100
 252:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 254:	80 e6       	ldi	r24, 0x60	; 96
 256:	88 bb       	out	0x18, r24	; 24
 258:	f9 01       	movw	r30, r18
 25a:	31 97       	sbiw	r30, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_init+0x76>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 25e:	f9 01       	movw	r30, r18
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <lcd_init+0x7c>
 264:	58 bb       	out	0x18, r21	; 24
        lcd_port = (cmd & 0xF0);
 266:	48 bb       	out	0x18, r20	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 268:	98 bb       	out	0x18, r25	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 26a:	18 ba       	out	0x18, r1	; 24
 26c:	c9 01       	movw	r24, r18
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <lcd_init+0x8a>
		lcd_reset();         // Call LCD reset
        lcd_cmd(0x28);       // 4-bit mode - 2 line - 5x7 font.
        lcd_cmd(0x0C);       // Display on cursor - off .
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 }
 272:	c9 01       	movw	r24, r18
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <lcd_init+0x90>
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret

0000027e <main>:




int main(void)
{
 27e:	ff 92       	push	r15
 280:	0f 93       	push	r16
 282:	1f 93       	push	r17
  lcd_init();//initialise the lcd
 284:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_init>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 288:	34 e0       	ldi	r19, 0x04	; 4
 28a:	f3 2e       	mov	r15, r19
 28c:	f8 ba       	out	0x18, r15	; 24
        lcd_port = (cmd & 0xF0);
 28e:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 290:	84 e1       	ldi	r24, 0x14	; 20
 292:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 294:	80 e1       	ldi	r24, 0x10	; 16
 296:	88 bb       	out	0x18, r24	; 24
 298:	00 e4       	ldi	r16, 0x40	; 64
 29a:	1f e1       	ldi	r17, 0x1F	; 31
 29c:	c8 01       	movw	r24, r16
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <main+0x20>
  lcd_cmd(0x01);//clear screen
   lcd_puts("AIms Interactive");
 2a2:	c8 01       	movw	r24, r16
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <main+0x26>
 2a8:	80 e6       	ldi	r24, 0x60	; 96
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 2b0:	84 ec       	ldi	r24, 0xC4	; 196
 2b2:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 2b4:	80 ec       	ldi	r24, 0xC0	; 192
 2b6:	88 bb       	out	0x18, r24	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 2b8:	f8 ba       	out	0x18, r15	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 2ba:	18 ba       	out	0x18, r1	; 24
 2bc:	c8 01       	movw	r24, r16
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0x40>
   lcd_cmd(0xC0);
   lcd_puts("LCD Demo");
 2c2:	c8 01       	movw	r24, r16
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <main+0x46>
 2c8:	81 e7       	ldi	r24, 0x71	; 113
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 2d0:	b4 e1       	ldi	r27, 0x14	; 20
        lcd_port = (cmd & 0xF0);
 2d2:	a0 e1       	ldi	r26, 0x10	; 16
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 2d4:	74 e8       	ldi	r23, 0x84	; 132
        lcd_port = ((cmd << 4) & 0xF0);
 2d6:	60 e8       	ldi	r22, 0x80	; 128
 2d8:	20 e4       	ldi	r18, 0x40	; 64
 2da:	3f e1       	ldi	r19, 0x1F	; 31
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 2dc:	40 e9       	ldi	r20, 0x90	; 144
 2de:	51 e0       	ldi	r21, 0x01	; 1
 2e0:	b8 bb       	out	0x18, r27	; 24
        lcd_port = (cmd & 0xF0);
 2e2:	a8 bb       	out	0x18, r26	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 2e4:	78 bb       	out	0x18, r23	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 2e6:	68 bb       	out	0x18, r22	; 24
 2e8:	c9 01       	movw	r24, r18
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <main+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ee:	c9 01       	movw	r24, r18
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <main+0x72>
 2f4:	84 ec       	ldi	r24, 0xC4	; 196
 2f6:	99 e0       	ldi	r25, 0x09	; 9
 2f8:	fa 01       	movw	r30, r20
 2fa:	31 97       	sbiw	r30, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <main+0x7c>
 2fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 300:	d9 f7       	brne	.-10     	; 0x2f8 <main+0x7a>
 302:	ee cf       	rjmp	.-36     	; 0x2e0 <main+0x62>

00000304 <__eewr_word>:
 304:	df 92       	push	r13
 306:	ef 92       	push	r14
 308:	ff 92       	push	r15
 30a:	0f 93       	push	r16
 30c:	1f 93       	push	r17
 30e:	d7 2e       	mov	r13, r23
 310:	7a 01       	movw	r14, r20
 312:	8c 01       	movw	r16, r24
 314:	fa 01       	movw	r30, r20
 316:	09 95       	icall
 318:	c8 01       	movw	r24, r16
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	6d 2d       	mov	r22, r13
 31e:	f7 01       	movw	r30, r14
 320:	09 95       	icall
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	ff 90       	pop	r15
 328:	ef 90       	pop	r14
 32a:	df 90       	pop	r13
 32c:	08 95       	ret

0000032e <__udivmodhi4>:
 32e:	aa 1b       	sub	r26, r26
 330:	bb 1b       	sub	r27, r27
 332:	51 e1       	ldi	r21, 0x11	; 17
 334:	07 c0       	rjmp	.+14     	; 0x344 <__udivmodhi4_ep>

00000336 <__udivmodhi4_loop>:
 336:	aa 1f       	adc	r26, r26
 338:	bb 1f       	adc	r27, r27
 33a:	a6 17       	cp	r26, r22
 33c:	b7 07       	cpc	r27, r23
 33e:	10 f0       	brcs	.+4      	; 0x344 <__udivmodhi4_ep>
 340:	a6 1b       	sub	r26, r22
 342:	b7 0b       	sbc	r27, r23

00000344 <__udivmodhi4_ep>:
 344:	88 1f       	adc	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	5a 95       	dec	r21
 34a:	a9 f7       	brne	.-22     	; 0x336 <__udivmodhi4_loop>
 34c:	80 95       	com	r24
 34e:	90 95       	com	r25
 350:	bc 01       	movw	r22, r24
 352:	cd 01       	movw	r24, r26
 354:	08 95       	ret

00000356 <_exit>:
 356:	f8 94       	cli

00000358 <__stop_program>:
 358:	ff cf       	rjmp	.-2      	; 0x358 <__stop_program>
