
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000076  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002a7  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000014f  00000000  00000000  0000059b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000362  00000000  00000000  000006ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000013a  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000152  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 00 01 	call	0x200	; 0x200 <main>
  64:	0c 94 03 01 	jmp	0x206	; 0x206 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <port_init>:
//*********************************************************************
//   Initializing functions for ports, timer0 & timer1
//*********************************************************************	 
void port_init(void)
{
 PORTB = 0x00; 
  6c:	18 ba       	out	0x18, r1	; 24
 DDRB  = 0x06; //PWM pins OC1A & OC1B defined as outputs
  6e:	86 e0       	ldi	r24, 0x06	; 6
  70:	87 bb       	out	0x17, r24	; 23

 DDRC  = 0xFF; //LED for IR detection indication
  72:	9f ef       	ldi	r25, 0xFF	; 255
  74:	94 bb       	out	0x14, r25	; 20
 PORTC = 0x00; 
  76:	15 ba       	out	0x15, r1	; 21
 DDRD  = 0x01; //LED, for testing purpose
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	81 bb       	out	0x11, r24	; 17
 PORTD = 0x00; 
  7c:	12 ba       	out	0x12, r1	; 18
 DDRA=0xFF;
  7e:	9a bb       	out	0x1a, r25	; 26
}
  80:	08 95       	ret

00000082 <timer0_init>:

//timer0 init
void timer0_init(void)
{
    //8-bit timer for measuring delay between IR pulses
	TCCR0 = 0x05; //CLK / 64/1024
  82:	85 e0       	ldi	r24, 0x05	; 5
  84:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0; //reset the timer
  86:	12 be       	out	0x32, r1	; 50
}
  88:	08 95       	ret

0000008a <read_IR>:
//*********************************************************************
//Function to read IR message from the detector
//Return value contains code in upper byte and address in lower byte
//*********************************************************************	 
unsigned int read_IR (void)
{
  8a:	60 e0       	ldi	r22, 0x00	; 0
  8c:	20 e0       	ldi	r18, 0x00	; 0
  8e:	30 e0       	ldi	r19, 0x00	; 0
	   timerCount = TCNT0;
	 
	   if(timerCount > 14)
	      code = code | (1 << (pulseCount-1));
	   else
	 	  code = code & ~(1 << (pulseCount-1));  
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	50 e0       	ldi	r21, 0x00	; 0
    unsigned char pulseCount=0,  code = 0, address = 0, timerCount;
	unsigned int IR_input;
	 
	while(pulseCount < 7)
	{
	   while(PIND & 0x04);
  94:	82 99       	sbic	0x10, 2	; 16
  96:	fe cf       	rjmp	.-4      	; 0x94 <read_IR+0xa>
	   TCNT0 = 0;
  98:	12 be       	out	0x32, r1	; 50
	   
	   while(!(PIND & 0x04));
  9a:	82 9b       	sbis	0x10, 2	; 16
  9c:	fe cf       	rjmp	.-4      	; 0x9a <read_IR+0x10>
	   pulseCount++;
	 
	   timerCount = TCNT0;
  9e:	82 b7       	in	r24, 0x32	; 50
	 
	   if(timerCount > 14)
  a0:	8f 30       	cpi	r24, 0x0F	; 15
  a2:	48 f0       	brcs	.+18     	; 0xb6 <read_IR+0x2c>
	      code = code | (1 << (pulseCount-1));
  a4:	ca 01       	movw	r24, r20
  a6:	02 2e       	mov	r0, r18
  a8:	02 c0       	rjmp	.+4      	; 0xae <read_IR+0x24>
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	0a 94       	dec	r0
  b0:	e2 f7       	brpl	.-8      	; 0xaa <read_IR+0x20>
  b2:	68 2b       	or	r22, r24
  b4:	09 c0       	rjmp	.+18     	; 0xc8 <read_IR+0x3e>
	   else
	 	  code = code & ~(1 << (pulseCount-1));  
  b6:	ca 01       	movw	r24, r20
  b8:	02 2e       	mov	r0, r18
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <read_IR+0x36>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <read_IR+0x32>
  c4:	80 95       	com	r24
  c6:	68 23       	and	r22, r24
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
unsigned int read_IR (void)
{
    unsigned char pulseCount=0,  code = 0, address = 0, timerCount;
	unsigned int IR_input;
	 
	while(pulseCount < 7)
  cc:	27 30       	cpi	r18, 0x07	; 7
  ce:	31 05       	cpc	r19, r1
  d0:	09 f7       	brne	.-62     	; 0x94 <read_IR+0xa>
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0
	   timerCount = TCNT0;
	 
	   if(timerCount > 14)
	      address = address | (1 << (pulseCount-1));
	   else
	 	  address = address & ~(1 << (pulseCount-1));  
  d8:	e1 e0       	ldi	r30, 0x01	; 1
  da:	f0 e0       	ldi	r31, 0x00	; 0
	 }

	 pulseCount = 0;
	 while(pulseCount < 5)
	 {
	   while(PIND & 0x04);
  dc:	82 99       	sbic	0x10, 2	; 16
  de:	fe cf       	rjmp	.-4      	; 0xdc <read_IR+0x52>
	   TCNT0 = 0;
  e0:	12 be       	out	0x32, r1	; 50
	   
	   while(!(PIND & 0x04));
  e2:	82 9b       	sbis	0x10, 2	; 16
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <read_IR+0x58>
	   pulseCount++;
	 
	   timerCount = TCNT0;
  e6:	82 b7       	in	r24, 0x32	; 50
	 
	   if(timerCount > 14)
  e8:	8f 30       	cpi	r24, 0x0F	; 15
  ea:	48 f0       	brcs	.+18     	; 0xfe <read_IR+0x74>
	      address = address | (1 << (pulseCount-1));
  ec:	cf 01       	movw	r24, r30
  ee:	04 2e       	mov	r0, r20
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <read_IR+0x6c>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <read_IR+0x68>
  fa:	28 2b       	or	r18, r24
  fc:	09 c0       	rjmp	.+18     	; 0x110 <read_IR+0x86>
	   else
	 	  address = address & ~(1 << (pulseCount-1));  
  fe:	cf 01       	movw	r24, r30
 100:	04 2e       	mov	r0, r20
 102:	02 c0       	rjmp	.+4      	; 0x108 <read_IR+0x7e>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	0a 94       	dec	r0
 10a:	e2 f7       	brpl	.-8      	; 0x104 <read_IR+0x7a>
 10c:	80 95       	com	r24
 10e:	28 23       	and	r18, r24
 110:	4f 5f       	subi	r20, 0xFF	; 255
 112:	5f 4f       	sbci	r21, 0xFF	; 255
	   else
	 	  code = code & ~(1 << (pulseCount-1));  
	 }

	 pulseCount = 0;
	 while(pulseCount < 5)
 114:	45 30       	cpi	r20, 0x05	; 5
 116:	51 05       	cpc	r21, r1
 118:	09 f7       	brne	.-62     	; 0xdc <read_IR+0x52>
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	96 2f       	mov	r25, r22
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	28 2b       	or	r18, r24
 122:	39 2b       	or	r19, r25
	 }
	 
	 IR_input = (((unsigned int)code) << 8) | address;
	 
	 return(IR_input);
}
 124:	c9 01       	movw	r24, r18
 126:	08 95       	ret

00000128 <__vector_1>:
* Interrupt Service Routine for INT0
* Executed whenever a remote code is detected
**************************************************************************/
//#pragma interrupt_handler int0_isr:2
ISR (INT0_vect)
{ 		
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	unsigned char count, code, address;
	unsigned int IR_input;
	
	TCNT0 = 0;
 14a:	12 be       	out	0x32, r1	; 50
	while(!(PIND & 0x04));
 14c:	82 9b       	sbis	0x10, 2	; 16
 14e:	fe cf       	rjmp	.-4      	; 0x14c <__vector_1+0x24>
	count = TCNT0;
 150:	82 b7       	in	r24, 0x32	; 50
	
	if(count < 30) 		  //to verify start pulse (2.4 ms long)
 152:	8e 31       	cpi	r24, 0x1E	; 30
 154:	68 f4       	brcc	.+26     	; 0x170 <__vector_1+0x48>
 156:	88 ec       	ldi	r24, 0xC8	; 200
 158:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 15a:	20 e9       	ldi	r18, 0x90	; 144
 15c:	31 e0       	ldi	r19, 0x01	; 1
 15e:	f9 01       	movw	r30, r18
 160:	31 97       	sbiw	r30, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <__vector_1+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 164:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 166:	d9 f7       	brne	.-10     	; 0x15e <__vector_1+0x36>
	{
	  _delay_ms(20);	
	  ENABLE_INT0;
 168:	8b b7       	in	r24, 0x3b	; 59
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	8b bf       	out	0x3b, r24	; 59
 16e:	10 c0       	rjmp	.+32     	; 0x190 <__vector_1+0x68>
	  return;
	}
	  
	PORTA |= 0x20;
 170:	dd 9a       	sbi	0x1b, 5	; 27
	
	IR_input = read_IR ();
 172:	0e 94 45 00 	call	0x8a	; 0x8a <read_IR>
 176:	28 ee       	ldi	r18, 0xE8	; 232
 178:	33 e0       	ldi	r19, 0x03	; 3
 17a:	40 e9       	ldi	r20, 0x90	; 144
 17c:	51 e0       	ldi	r21, 0x01	; 1
 17e:	fa 01       	movw	r30, r20
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <__vector_1+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 184:	21 50       	subi	r18, 0x01	; 1
 186:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 188:	d1 f7       	brne	.-12     	; 0x17e <__vector_1+0x56>
	
	//motorControl ( code, address );
	
	
	_delay_ms(100);
	PORTA = (code<<4);//PORTC=0;
 18a:	92 95       	swap	r25
 18c:	90 7f       	andi	r25, 0xF0	; 240
 18e:	9b bb       	out	0x1b, r25	; 27
}
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <motorControl>:
//****************************************************************************
//Function to control motor speed & direction depending onthe IR code rceived
//Argumets are the code and address values received from IR detector
//****************************************************************************	 
void motorControl (unsigned char code, unsigned char address)
{
 1b2:	98 2f       	mov	r25, r24
	 static unsigned char counter, dir, dir1;
	 
	 if (address != 1)	//detect only TV remote, other signals rejected
 1b4:	61 30       	cpi	r22, 0x01	; 1
 1b6:	79 f4       	brne	.+30     	; 0x1d6 <motorControl+0x24>
	   return;

	 if((code == 16) ) //Channel+ or Channel- button is pressed
 1b8:	80 31       	cpi	r24, 0x10	; 16
 1ba:	21 f4       	brne	.+8      	; 0x1c4 <motorControl+0x12>
     {	PORTC=0xAA;
 1bc:	8a ea       	ldi	r24, 0xAA	; 170
 1be:	85 bb       	out	0x15, r24	; 21
   	 sbi(PORTA,4);
 1c0:	dc 9a       	sbi	0x1b, 4	; 27
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <motorControl+0x1a>
	 }
	 if(code == 17)
 1c4:	81 31       	cpi	r24, 0x11	; 17
 1c6:	11 f4       	brne	.+4      	; 0x1cc <motorControl+0x1a>
	 {
	 PORTC=0x55;
 1c8:	85 e5       	ldi	r24, 0x55	; 85
 1ca:	85 bb       	out	0x15, r24	; 21
	 }
	 if((code == 18) || (code == 19)) //Channel+ or Channel- button is pressed
 1cc:	92 51       	subi	r25, 0x12	; 18
 1ce:	92 30       	cpi	r25, 0x02	; 2
 1d0:	10 f4       	brcc	.+4      	; 0x1d6 <motorControl+0x24>
     {	PORTC=0x00;
 1d2:	15 ba       	out	0x15, r1	; 21
   	  cbi(PORTA,4);
 1d4:	dc 98       	cbi	0x1b, 4	; 27
 1d6:	08 95       	ret

000001d8 <init_devices>:
//*** call this routine to initialize all peripherals
//************************************************************
void init_devices(void)
{
 //stop errant interrupts until set up
 cli(); //disable all interrupts
 1d8:	f8 94       	cli
//*********************************************************************
//   Initializing functions for ports, timer0 & timer1
//*********************************************************************	 
void port_init(void)
{
 PORTB = 0x00; 
 1da:	18 ba       	out	0x18, r1	; 24
 DDRB  = 0x06; //PWM pins OC1A & OC1B defined as outputs
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	87 bb       	out	0x17, r24	; 23

 DDRC  = 0xFF; //LED for IR detection indication
 1e0:	9f ef       	ldi	r25, 0xFF	; 255
 1e2:	94 bb       	out	0x14, r25	; 20
 PORTC = 0x00; 
 1e4:	15 ba       	out	0x15, r1	; 21
 DDRD  = 0x01; //LED, for testing purpose
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	81 bb       	out	0x11, r24	; 17
 PORTD = 0x00; 
 1ea:	12 ba       	out	0x12, r1	; 18
 DDRA=0xFF;
 1ec:	9a bb       	out	0x1a, r25	; 26

//timer0 init
void timer0_init(void)
{
    //8-bit timer for measuring delay between IR pulses
	TCCR0 = 0x05; //CLK / 64/1024
 1ee:	85 e0       	ldi	r24, 0x05	; 5
 1f0:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0; //reset the timer
 1f2:	12 be       	out	0x32, r1	; 50
{
 //stop errant interrupts until set up
 cli(); //disable all interrupts
 port_init();
 timer0_init();
 MCUCR = 0x02;
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	85 bf       	out	0x35, r24	; 53
 GICR  = 0x40;
 1f8:	80 e4       	ldi	r24, 0x40	; 64
 1fa:	8b bf       	out	0x3b, r24	; 59
 sei(); //re-enable interrupts
 1fc:	78 94       	sei
 //all peripherals are now initialized
}
 1fe:	08 95       	ret

00000200 <main>:
//*******************************************************
//	************  MAIN FUNCTION  *************
//*******************************************************	 
void main(void)
{
 init_devices();
 200:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <init_devices>
 204:	ff cf       	rjmp	.-2      	; 0x204 <main+0x4>

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
