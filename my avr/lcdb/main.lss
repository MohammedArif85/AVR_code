
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000003d6  0000046a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .eeprom       00000004  00810000  00810000  00000484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000020  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000076  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000940  00000000  00000000  0000051e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000023b  00000000  00000000  00000e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000053c  00000000  00000000  00001099  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  000015d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015d  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a9  00000000  00000000  000017d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00001a7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <main>
  7a:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
  82:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
  84:	e1 99       	sbic	0x1c, 1	; 28
  86:	fe cf       	rjmp	.-4      	; 0x84 <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
  88:	3f bb       	out	0x1f, r19	; 31
  8a:	2e bb       	out	0x1e, r18	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
  8c:	e0 9a       	sbi	0x1c, 0	; 28
  8e:	8d b3       	in	r24, 0x1d	; 29
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
}
  90:	08 95       	ret

00000092 <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
  92:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
  94:	e1 99       	sbic	0x1c, 1	; 28
  96:	fe cf       	rjmp	.-4      	; 0x94 <eeprom_write_byte+0x2>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
  98:	3f bb       	out	0x1f, r19	; 31
  9a:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
  9c:	6d bb       	out	0x1d, r22	; 29

    __asm__ __volatile__ (
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	e2 9a       	sbi	0x1c, 2	; 28
  a4:	e1 9a       	sbi	0x1c, 1	; 28
  a6:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
  a8:	08 95       	ret

000000aa <lcd_reset>:
#define LCD_RW      0x02
#define LCD_EN      0x04

void lcd_reset(void)
{
        lcd_port = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	88 bb       	out	0x18, r24	; 24
  ae:	88 ec       	ldi	r24, 0xC8	; 200
  b0:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b2:	20 e9       	ldi	r18, 0x90	; 144
  b4:	31 e0       	ldi	r19, 0x01	; 1
  b6:	f9 01       	movw	r30, r18
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_reset+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  be:	d9 f7       	brne	.-10     	; 0xb6 <lcd_reset+0xc>
        _delay_ms(20);
        lcd_port = 0x30+LCD_EN;
  c0:	94 e3       	ldi	r25, 0x34	; 52
  c2:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  c4:	80 e3       	ldi	r24, 0x30	; 48
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	e0 e4       	ldi	r30, 0x40	; 64
  ca:	fc e9       	ldi	r31, 0x9C	; 156
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_reset+0x22>
        _delay_ms(10);
        lcd_port = 0x30+LCD_EN;
  d0:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  d2:	88 bb       	out	0x18, r24	; 24
  d4:	20 ea       	ldi	r18, 0xA0	; 160
  d6:	3f e0       	ldi	r19, 0x0F	; 15
  d8:	f9 01       	movw	r30, r18
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd_reset+0x30>
        _delay_ms(1);
        lcd_port = 0x30+LCD_EN;
  de:	98 bb       	out	0x18, r25	; 24
        lcd_port = 0x30;
  e0:	88 bb       	out	0x18, r24	; 24
  e2:	c9 01       	movw	r24, r18
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lcd_reset+0x3a>
        _delay_ms(1);
        lcd_port = 0x20+LCD_EN;
  e8:	84 e2       	ldi	r24, 0x24	; 36
  ea:	88 bb       	out	0x18, r24	; 24
        lcd_port = 0x20;
  ec:	80 e2       	ldi	r24, 0x20	; 32
  ee:	88 bb       	out	0x18, r24	; 24
  f0:	c9 01       	movw	r24, r18
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcd_reset+0x48>
        _delay_ms(1);
}
  f6:	08 95       	ret

000000f8 <lcd_cmd>:
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
  f8:	38 2f       	mov	r19, r24
  fa:	30 7f       	andi	r19, 0xF0	; 240
  fc:	23 2f       	mov	r18, r19
  fe:	24 60       	ori	r18, 0x04	; 4
 100:	28 bb       	out	0x18, r18	; 24
        lcd_port = (cmd & 0xF0);
 102:	38 bb       	out	0x18, r19	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	24 e0       	ldi	r18, 0x04	; 4
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	2a 95       	dec	r18
 10e:	e1 f7       	brne	.-8      	; 0x108 <lcd_cmd+0x10>
 110:	28 2f       	mov	r18, r24
 112:	24 60       	ori	r18, 0x04	; 4
 114:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 116:	88 bb       	out	0x18, r24	; 24
 118:	80 e4       	ldi	r24, 0x40	; 64
 11a:	9f e1       	ldi	r25, 0x1F	; 31
 11c:	fc 01       	movw	r30, r24
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_cmd+0x26>

      

        _delay_ms(2);
        _delay_ms(2);
}
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_cmd+0x2a>
 126:	08 95       	ret

00000128 <lcd_data>:
 }


void lcd_data (unsigned char dat)
{
        lcd_port = ((dat & 0xF0)|LCD_EN|LCD_RS);
 128:	98 2f       	mov	r25, r24
 12a:	90 7f       	andi	r25, 0xF0	; 240
 12c:	29 2f       	mov	r18, r25
 12e:	25 60       	ori	r18, 0x05	; 5
 130:	28 bb       	out	0x18, r18	; 24
        lcd_port = ((dat & 0xF0)|LCD_RS);
 132:	91 60       	ori	r25, 0x01	; 1
 134:	98 bb       	out	0x18, r25	; 24
		
		lcd_port = (((dat << 4) & 0xF0)|LCD_EN|LCD_RS);
 136:	82 95       	swap	r24
 138:	80 7f       	andi	r24, 0xF0	; 240
 13a:	98 2f       	mov	r25, r24
 13c:	95 60       	ori	r25, 0x05	; 5
 13e:	98 bb       	out	0x18, r25	; 24
        lcd_port = (((dat << 4) & 0xF0)|LCD_RS);
 140:	81 60       	ori	r24, 0x01	; 1
 142:	88 bb       	out	0x18, r24	; 24
 144:	80 e4       	ldi	r24, 0x40	; 64
 146:	9f e1       	ldi	r25, 0x1F	; 31
 148:	fc 01       	movw	r30, r24
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_data+0x22>
       
      

       _delay_ms(2);
       _delay_ms(2);
}
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <lcd_data+0x26>
 152:	08 95       	ret

00000154 <lcd_puts>:
void lcd_puts(char *aaa)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24
 15a:	02 c0       	rjmp	.+4      	; 0x160 <lcd_puts+0xc>
unsigned int i;
for(i=0;aaa[i]!=0;i++)
lcd_data(aaa[i]);
 15c:	0e 94 94 00 	call	0x128	; 0x128 <lcd_data>
       _delay_ms(2);
}
void lcd_puts(char *aaa)
{
unsigned int i;
for(i=0;aaa[i]!=0;i++)
 160:	89 91       	ld	r24, Y+
 162:	88 23       	and	r24, r24
 164:	d9 f7       	brne	.-10     	; 0x15c <lcd_puts+0x8>
lcd_data(aaa[i]);

}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <itoa>:
void itoa(uint16_t num)
{
 16c:	cf 92       	push	r12
 16e:	df 92       	push	r13
 170:	ef 92       	push	r14
 172:	ff 92       	push	r15
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	7c 01       	movw	r14, r24
 unsigned char a,b,c,d;
 a=num%10;
 num=num/10;
 17a:	6a e0       	ldi	r22, 0x0A	; 10
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__udivmodhi4>
 182:	d6 2e       	mov	r13, r22
 184:	c7 2e       	mov	r12, r23
 b=num%10;
 num=num/10;
 186:	86 2f       	mov	r24, r22
 188:	97 2f       	mov	r25, r23
 18a:	6a e0       	ldi	r22, 0x0A	; 10
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__udivmodhi4>
 192:	16 2f       	mov	r17, r22
 194:	07 2f       	mov	r16, r23
 c=num%10;
 num=num/10;
 d=num%10;
 lcd_data(0x30+d); 
 196:	86 2f       	mov	r24, r22
 198:	97 2f       	mov	r25, r23
 19a:	6a e0       	ldi	r22, 0x0A	; 10
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__udivmodhi4>
 1a2:	cb 01       	movw	r24, r22
 1a4:	6a e0       	ldi	r22, 0x0A	; 10
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__udivmodhi4>
 1ac:	80 5d       	subi	r24, 0xD0	; 208
 1ae:	0e 94 94 00 	call	0x128	; 0x128 <lcd_data>
 lcd_data(0x30+c); 
 1b2:	81 2f       	mov	r24, r17
 1b4:	90 2f       	mov	r25, r16
 1b6:	6a e0       	ldi	r22, 0x0A	; 10
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__udivmodhi4>
 1be:	80 5d       	subi	r24, 0xD0	; 208
 1c0:	0e 94 94 00 	call	0x128	; 0x128 <lcd_data>
 lcd_data(0x30+b); 
 1c4:	8d 2d       	mov	r24, r13
 1c6:	9c 2d       	mov	r25, r12
 1c8:	6a e0       	ldi	r22, 0x0A	; 10
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__udivmodhi4>
 1d0:	80 5d       	subi	r24, 0xD0	; 208
 1d2:	0e 94 94 00 	call	0x128	; 0x128 <lcd_data>
 lcd_data(0x30+a); 
 1d6:	c7 01       	movw	r24, r14
 1d8:	6a e0       	ldi	r22, 0x0A	; 10
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__udivmodhi4>
 1e0:	80 5d       	subi	r24, 0xD0	; 208
 1e2:	0e 94 94 00 	call	0x128	; 0x128 <lcd_data>
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	df 90       	pop	r13
 1f0:	cf 90       	pop	r12
 1f2:	08 95       	ret

000001f4 <lcd_init>:
        _delay_ms(2);
        _delay_ms(2);
}

void lcd_init (void)
{      
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
unsigned int rch=0;
 int lch=0;
 DDRB=0xFF;
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	87 bb       	out	0x17, r24	; 23
        PORTB=0x00; 
 200:	18 ba       	out	0x18, r1	; 24
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	61 e4       	ldi	r22, 0x41	; 65
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	0e 94 aa 01 	call	0x354	; 0x354 <__eerd_word>
 20e:	8c 01       	movw	r16, r24
        rch=eeprom_read_word(&eid);
lch=eeprom_read_word(&valt);
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	61 e4       	ldi	r22, 0x41	; 65
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	0e 94 aa 01 	call	0x354	; 0x354 <__eerd_word>
 21c:	ec 01       	movw	r28, r24
if(lch!=0)
 21e:	00 97       	sbiw	r24, 0x00	; 0
 220:	49 f0       	breq	.+18     	; 0x234 <lcd_init+0x40>
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
 222:	bc 01       	movw	r22, r24
 224:	61 50       	subi	r22, 0x01	; 1
 226:	70 40       	sbci	r23, 0x00	; 0
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	49 e4       	ldi	r20, 0x49	; 73
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	0e 94 c0 01 	call	0x380	; 0x380 <__eewr_word>
eeprom_write_word(&valt,lch-1);
 
if(rch!=1611 ||lch==0)
 234:	0b 54       	subi	r16, 0x4B	; 75
 236:	16 40       	sbci	r17, 0x06	; 6
 238:	11 f4       	brne	.+4      	; 0x23e <lcd_init+0x4a>
 23a:	cd 2b       	or	r28, r29
 23c:	09 f4       	brne	.+2      	; 0x240 <lcd_init+0x4c>
 23e:	ff cf       	rjmp	.-2      	; 0x23e <lcd_init+0x4a>
{
while(1);
}
		lcd_reset();         // Call LCD reset
 240:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_reset>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 244:	84 e2       	ldi	r24, 0x24	; 36
 246:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 248:	80 e2       	ldi	r24, 0x20	; 32
 24a:	88 bb       	out	0x18, r24	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 24c:	54 e8       	ldi	r21, 0x84	; 132
 24e:	58 bb       	out	0x18, r21	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 250:	40 e8       	ldi	r20, 0x80	; 128
 252:	48 bb       	out	0x18, r20	; 24
 254:	20 e4       	ldi	r18, 0x40	; 64
 256:	3f e1       	ldi	r19, 0x1F	; 31
 258:	c9 01       	movw	r24, r18
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_init+0x66>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 25e:	c9 01       	movw	r24, r18
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <lcd_init+0x6c>
 264:	94 e0       	ldi	r25, 0x04	; 4
 266:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 268:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 26a:	84 ec       	ldi	r24, 0xC4	; 196
 26c:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 26e:	80 ec       	ldi	r24, 0xC0	; 192
 270:	88 bb       	out	0x18, r24	; 24
 272:	f9 01       	movw	r30, r18
 274:	31 97       	sbiw	r30, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <lcd_init+0x80>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 278:	f9 01       	movw	r30, r18
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_init+0x86>
 27e:	98 bb       	out	0x18, r25	; 24
        lcd_port = (cmd & 0xF0);
 280:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 282:	84 e6       	ldi	r24, 0x64	; 100
 284:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 286:	80 e6       	ldi	r24, 0x60	; 96
 288:	88 bb       	out	0x18, r24	; 24
 28a:	f9 01       	movw	r30, r18
 28c:	31 97       	sbiw	r30, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <lcd_init+0x98>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 290:	f9 01       	movw	r30, r18
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <lcd_init+0x9e>
 296:	58 bb       	out	0x18, r21	; 24
        lcd_port = (cmd & 0xF0);
 298:	48 bb       	out	0x18, r20	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 29a:	98 bb       	out	0x18, r25	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 29c:	18 ba       	out	0x18, r1	; 24
 29e:	c9 01       	movw	r24, r18
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <lcd_init+0xac>
		lcd_reset();         // Call LCD reset
        lcd_cmd(0x28);       // 4-bit mode - 2 line - 5x7 font.
        lcd_cmd(0x0C);       // Display on cursor - off .
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 }
 2a4:	c9 01       	movw	r24, r18
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <lcd_init+0xb2>
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	08 95       	ret

000002b4 <main>:




int main(void)
{
 2b4:	cf 92       	push	r12
 2b6:	df 92       	push	r13
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
  lcd_init();//initialise the lcd
 2c4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_init>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 2c8:	74 e0       	ldi	r23, 0x04	; 4
 2ca:	f7 2e       	mov	r15, r23
 2cc:	f8 ba       	out	0x18, r15	; 24
        lcd_port = (cmd & 0xF0);
 2ce:	18 ba       	out	0x18, r1	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 2d0:	84 e1       	ldi	r24, 0x14	; 20
 2d2:	88 bb       	out	0x18, r24	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 2d4:	80 e1       	ldi	r24, 0x10	; 16
 2d6:	88 bb       	out	0x18, r24	; 24
 2d8:	00 e4       	ldi	r16, 0x40	; 64
 2da:	1f e1       	ldi	r17, 0x1F	; 31
 2dc:	c8 01       	movw	r24, r16
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <main+0x2a>
  lcd_cmd(0x01);//clear screen
   lcd_puts("AIms Interactive");
 2e2:	c8 01       	movw	r24, r16
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <main+0x30>
 2e8:	80 e6       	ldi	r24, 0x60	; 96
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_puts>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 2f0:	84 ec       	ldi	r24, 0xC4	; 196
 2f2:	88 bb       	out	0x18, r24	; 24
        lcd_port = (cmd & 0xF0);
 2f4:	80 ec       	ldi	r24, 0xC0	; 192
 2f6:	88 bb       	out	0x18, r24	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 2f8:	f8 ba       	out	0x18, r15	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 2fa:	18 ba       	out	0x18, r1	; 24
 2fc:	c8 01       	movw	r24, r16
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <main+0x4a>
   lcd_cmd(0xC0);
   lcd_puts("LCD Demo");
 302:	c8 01       	movw	r24, r16
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <main+0x50>
 308:	81 e7       	ldi	r24, 0x71	; 113
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_puts>
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 310:	64 e1       	ldi	r22, 0x14	; 20
 312:	c6 2e       	mov	r12, r22
        lcd_port = (cmd & 0xF0);
 314:	50 e1       	ldi	r21, 0x10	; 16
 316:	d5 2e       	mov	r13, r21
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 318:	44 e8       	ldi	r20, 0x84	; 132
 31a:	e4 2e       	mov	r14, r20
        lcd_port = ((cmd << 4) & 0xF0);
 31c:	30 e8       	ldi	r19, 0x80	; 128
 31e:	f3 2e       	mov	r15, r19
 320:	c0 e4       	ldi	r28, 0x40	; 64
 322:	df e1       	ldi	r29, 0x1F	; 31
        lcd_port = 0x20;
        _delay_ms(1);
}
void lcd_cmd (char cmd)
{
        lcd_port = (cmd & 0xF0)|LCD_EN;
 324:	00 e9       	ldi	r16, 0x90	; 144
 326:	11 e0       	ldi	r17, 0x01	; 1
 328:	c8 ba       	out	0x18, r12	; 24
        lcd_port = (cmd & 0xF0);
 32a:	d8 ba       	out	0x18, r13	; 24
		
        lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
 32c:	e8 ba       	out	0x18, r14	; 24
        lcd_port = ((cmd << 4) & 0xF0);
 32e:	f8 ba       	out	0x18, r15	; 24
 330:	ce 01       	movw	r24, r28
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <main+0x7e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 336:	ce 01       	movw	r24, r28
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <main+0x84>
 33c:	84 ec       	ldi	r24, 0xC4	; 196
 33e:	99 e0       	ldi	r25, 0x09	; 9
 340:	f8 01       	movw	r30, r16
 342:	31 97       	sbiw	r30, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <main+0x8e>
 346:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 348:	d9 f7       	brne	.-10     	; 0x340 <main+0x8c>
   
   while(1)
   {
     lcd_cmd(0x18);
	 _delay_ms(250);
	 itoa(5);
 34a:	85 e0       	ldi	r24, 0x05	; 5
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 b6 00 	call	0x16c	; 0x16c <itoa>
 352:	ea cf       	rjmp	.-44     	; 0x328 <main+0x74>

00000354 <__eerd_word>:
 354:	df 92       	push	r13
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	7b 01       	movw	r14, r22
 360:	8c 01       	movw	r16, r24
 362:	fb 01       	movw	r30, r22
 364:	09 95       	icall
 366:	d8 2e       	mov	r13, r24
 368:	c8 01       	movw	r24, r16
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	f7 01       	movw	r30, r14
 36e:	09 95       	icall
 370:	98 2f       	mov	r25, r24
 372:	8d 2d       	mov	r24, r13
 374:	1f 91       	pop	r17
 376:	0f 91       	pop	r16
 378:	ff 90       	pop	r15
 37a:	ef 90       	pop	r14
 37c:	df 90       	pop	r13
 37e:	08 95       	ret

00000380 <__eewr_word>:
 380:	df 92       	push	r13
 382:	ef 92       	push	r14
 384:	ff 92       	push	r15
 386:	0f 93       	push	r16
 388:	1f 93       	push	r17
 38a:	d7 2e       	mov	r13, r23
 38c:	7a 01       	movw	r14, r20
 38e:	8c 01       	movw	r16, r24
 390:	fa 01       	movw	r30, r20
 392:	09 95       	icall
 394:	c8 01       	movw	r24, r16
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	6d 2d       	mov	r22, r13
 39a:	f7 01       	movw	r30, r14
 39c:	09 95       	icall
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
 3a2:	ff 90       	pop	r15
 3a4:	ef 90       	pop	r14
 3a6:	df 90       	pop	r13
 3a8:	08 95       	ret

000003aa <__udivmodhi4>:
 3aa:	aa 1b       	sub	r26, r26
 3ac:	bb 1b       	sub	r27, r27
 3ae:	51 e1       	ldi	r21, 0x11	; 17
 3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <__udivmodhi4_ep>

000003b2 <__udivmodhi4_loop>:
 3b2:	aa 1f       	adc	r26, r26
 3b4:	bb 1f       	adc	r27, r27
 3b6:	a6 17       	cp	r26, r22
 3b8:	b7 07       	cpc	r27, r23
 3ba:	10 f0       	brcs	.+4      	; 0x3c0 <__udivmodhi4_ep>
 3bc:	a6 1b       	sub	r26, r22
 3be:	b7 0b       	sbc	r27, r23

000003c0 <__udivmodhi4_ep>:
 3c0:	88 1f       	adc	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	5a 95       	dec	r21
 3c6:	a9 f7       	brne	.-22     	; 0x3b2 <__udivmodhi4_loop>
 3c8:	80 95       	com	r24
 3ca:	90 95       	com	r25
 3cc:	bc 01       	movw	r22, r24
 3ce:	cd 01       	movw	r24, r26
 3d0:	08 95       	ret

000003d2 <_exit>:
 3d2:	f8 94       	cli

000003d4 <__stop_program>:
 3d4:	ff cf       	rjmp	.-2      	; 0x3d4 <__stop_program>
