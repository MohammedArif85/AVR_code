
sdcard1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00004b2a  00004bbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000235  00800084  00800084  00004be2  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00004be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000019c  00000000  00000000  00004c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002970  00000000  00000000  00004dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000621  00000000  00000000  0000774e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002707  00000000  00000000  00007d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  0000a478  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000666  00000000  00000000  0000a768  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003da6  00000000  00000000  0000adce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  0000eb74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3b       	cpi	r26, 0xB9	; 185
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 93 25 	jmp	0x4b26	; 0x4b26 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include"ffconf.h"
#include "ff.h"
#include "diskio.h"

int main()
{
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	df 93       	push	r29
      98:	cf 93       	push	r28
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	a0 97       	sbiw	r28, 0x20	; 32
      a0:	0f b6       	in	r0, 0x3f	; 63
      a2:	f8 94       	cli
      a4:	de bf       	out	0x3e, r29	; 62
      a6:	0f be       	out	0x3f, r0	; 63
      a8:	cd bf       	out	0x3d, r28	; 61

FRESULT f_err_code;
static FATFS FATFS_Obj;
 
disk_initialize(0);
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	0e 94 94 01 	call	0x328	; 0x328 <disk_initialize>
f_err_code = f_mount(0, &FATFS_Obj);
      b0:	80 e0       	ldi	r24, 0x00	; 0
      b2:	64 e8       	ldi	r22, 0x84	; 132
      b4:	70 e0       	ldi	r23, 0x00	; 0
      b6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <f_mount>

FIL fil_obj;
 
int variableName = 5;
 
f_open(&fil_obj, "/moo/foo.txt", FA_WRITE);
      ba:	8e 01       	movw	r16, r28
      bc:	0f 5f       	subi	r16, 0xFF	; 255
      be:	1f 4f       	sbci	r17, 0xFF	; 255
      c0:	c8 01       	movw	r24, r16
      c2:	60 e6       	ldi	r22, 0x60	; 96
      c4:	70 e0       	ldi	r23, 0x00	; 0
      c6:	42 e0       	ldi	r20, 0x02	; 2
      c8:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <f_open>
 
fprintf(&fil_obj, "bar %d", variableName);
      cc:	00 d0       	rcall	.+0      	; 0xce <main+0x3c>
      ce:	00 d0       	rcall	.+0      	; 0xd0 <main+0x3e>
      d0:	00 d0       	rcall	.+0      	; 0xd2 <main+0x40>
      d2:	ed b7       	in	r30, 0x3d	; 61
      d4:	fe b7       	in	r31, 0x3e	; 62
      d6:	31 96       	adiw	r30, 0x01	; 1
      d8:	ad b7       	in	r26, 0x3d	; 61
      da:	be b7       	in	r27, 0x3e	; 62
      dc:	12 96       	adiw	r26, 0x02	; 2
      de:	1c 93       	st	X, r17
      e0:	0e 93       	st	-X, r16
      e2:	11 97       	sbiw	r26, 0x01	; 1
      e4:	8d e6       	ldi	r24, 0x6D	; 109
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	93 83       	std	Z+3, r25	; 0x03
      ea:	82 83       	std	Z+2, r24	; 0x02
      ec:	85 e0       	ldi	r24, 0x05	; 5
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	95 83       	std	Z+5, r25	; 0x05
      f2:	84 83       	std	Z+4, r24	; 0x04
      f4:	0e 94 8a 22 	call	0x4514	; 0x4514 <fprintf>
 
f_close(&fil_obj);
      f8:	8d b7       	in	r24, 0x3d	; 61
      fa:	9e b7       	in	r25, 0x3e	; 62
      fc:	06 96       	adiw	r24, 0x06	; 6
      fe:	0f b6       	in	r0, 0x3f	; 63
     100:	f8 94       	cli
     102:	9e bf       	out	0x3e, r25	; 62
     104:	0f be       	out	0x3f, r0	; 63
     106:	8d bf       	out	0x3d, r24	; 61
     108:	c8 01       	movw	r24, r16
     10a:	0e 94 7e 22 	call	0x44fc	; 0x44fc <f_close>

return 0;

}
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	a0 96       	adiw	r28, 0x20	; 32
     114:	0f b6       	in	r0, 0x3f	; 63
     116:	f8 94       	cli
     118:	de bf       	out	0x3e, r29	; 62
     11a:	0f be       	out	0x3f, r0	; 63
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	cf 91       	pop	r28
     120:	df 91       	pop	r29
     122:	1f 91       	pop	r17
     124:	0f 91       	pop	r16
     126:	08 95       	ret

00000128 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     128:	fc 01       	movw	r30, r24
     12a:	20 e0       	ldi	r18, 0x00	; 0
     12c:	30 e0       	ldi	r19, 0x00	; 0


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     12e:	5f ef       	ldi	r21, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     130:	a4 ec       	ldi	r26, 0xC4	; 196
     132:	b9 e0       	ldi	r27, 0x09	; 9
     134:	5f b9       	out	0x0f, r21	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     136:	77 9b       	sbis	0x0e, 7	; 14
     138:	fe cf       	rjmp	.-4      	; 0x136 <rcvr_datablock+0xe>
	return SPDR;
     13a:	4f b1       	in	r20, 0x0f	; 15
     13c:	cd 01       	movw	r24, r26
     13e:	01 97       	sbiw	r24, 0x01	; 1
     140:	f1 f7       	brne	.-4      	; 0x13e <rcvr_datablock+0x16>
{
	BYTE token;


	token = 0xFF;
for (int i = 0; i < 20 && token == 0xFF; i++)
     142:	2f 5f       	subi	r18, 0xFF	; 255
     144:	3f 4f       	sbci	r19, 0xFF	; 255
     146:	24 31       	cpi	r18, 0x14	; 20
     148:	31 05       	cpc	r19, r1
     14a:	11 f0       	breq	.+4      	; 0x150 <rcvr_datablock+0x28>
     14c:	4f 3f       	cpi	r20, 0xFF	; 255
     14e:	91 f3       	breq	.-28     	; 0x134 <rcvr_datablock+0xc>
{
  token = rcvr_spi();
  _delay_ms(10);
}
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
     150:	4e 3f       	cpi	r20, 0xFE	; 254
     152:	19 f0       	breq	.+6      	; 0x15a <rcvr_datablock+0x32>
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	26 c0       	rjmp	.+76     	; 0x1a6 <rcvr_datablock+0x7e>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
     15a:	9f ef       	ldi	r25, 0xFF	; 255
     15c:	9f b9       	out	0x0f, r25	; 15
     15e:	77 9b       	sbis	0x0e, 7	; 14
     160:	fe cf       	rjmp	.-4      	; 0x15e <rcvr_datablock+0x36>
     162:	8f b1       	in	r24, 0x0f	; 15
     164:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
     166:	9f b9       	out	0x0f, r25	; 15
     168:	77 9b       	sbis	0x0e, 7	; 14
     16a:	fe cf       	rjmp	.-4      	; 0x168 <rcvr_datablock+0x40>
     16c:	8f b1       	in	r24, 0x0f	; 15
     16e:	81 83       	std	Z+1, r24	; 0x01
		rcvr_spi_m(buff++);
     170:	9f b9       	out	0x0f, r25	; 15
     172:	77 9b       	sbis	0x0e, 7	; 14
     174:	fe cf       	rjmp	.-4      	; 0x172 <rcvr_datablock+0x4a>
     176:	8f b1       	in	r24, 0x0f	; 15
     178:	82 83       	std	Z+2, r24	; 0x02
		rcvr_spi_m(buff++);
     17a:	9f b9       	out	0x0f, r25	; 15
     17c:	77 9b       	sbis	0x0e, 7	; 14
     17e:	fe cf       	rjmp	.-4      	; 0x17c <rcvr_datablock+0x54>
     180:	8f b1       	in	r24, 0x0f	; 15
     182:	83 83       	std	Z+3, r24	; 0x03
	} while (btr -= 4);
     184:	64 50       	subi	r22, 0x04	; 4
     186:	70 40       	sbci	r23, 0x00	; 0
     188:	11 f0       	breq	.+4      	; 0x18e <rcvr_datablock+0x66>
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     18a:	34 96       	adiw	r30, 0x04	; 4
     18c:	e7 cf       	rjmp	.-50     	; 0x15c <rcvr_datablock+0x34>


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     18e:	8f ef       	ldi	r24, 0xFF	; 255
     190:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     192:	77 9b       	sbis	0x0e, 7	; 14
     194:	fe cf       	rjmp	.-4      	; 0x192 <rcvr_datablock+0x6a>
	return SPDR;
     196:	8f b1       	in	r24, 0x0f	; 15


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     198:	8f ef       	ldi	r24, 0xFF	; 255
     19a:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     19c:	77 9b       	sbis	0x0e, 7	; 14
     19e:	fe cf       	rjmp	.-4      	; 0x19c <rcvr_datablock+0x74>
	return SPDR;
     1a0:	8f b1       	in	r24, 0x0f	; 15
     1a2:	21 e0       	ldi	r18, 0x01	; 1
     1a4:	30 e0       	ldi	r19, 0x00	; 0
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return 1;						/* Return with success */
}
     1a6:	c9 01       	movw	r24, r18
     1a8:	08 95       	ret

000001aa <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     1aa:	fc 01       	movw	r30, r24
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     1ac:	82 e3       	ldi	r24, 0x32	; 50
     1ae:	80 93 b3 02 	sts	0x02B3, r24


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     1b2:	8f ef       	ldi	r24, 0xFF	; 255
     1b4:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     1b6:	77 9b       	sbis	0x0e, 7	; 14
     1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <xmit_datablock+0xc>
	return SPDR;
     1ba:	8f b1       	in	r24, 0x0f	; 15


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     1bc:	9f ef       	ldi	r25, 0xFF	; 255
     1be:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     1c0:	77 9b       	sbis	0x0e, 7	; 14
     1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <xmit_datablock+0x16>
	return SPDR;
     1c4:	8f b1       	in	r24, 0x0f	; 15
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		if (rcvr_spi() == 0xFF) return 1;
     1c6:	8f 3f       	cpi	r24, 0xFF	; 255
     1c8:	39 f0       	breq	.+14     	; 0x1d8 <xmit_datablock+0x2e>
	while (Timer2);
     1ca:	80 91 b3 02 	lds	r24, 0x02B3
     1ce:	88 23       	and	r24, r24
     1d0:	b1 f7       	brne	.-20     	; 0x1be <xmit_datablock+0x14>
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	2b c0       	rjmp	.+86     	; 0x22e <xmit_datablock+0x84>
	BYTE resp, wc;


	if (!wait_ready()) return 0;

	xmit_spi(token);					/* Xmit data token */
     1d8:	6f b9       	out	0x0f, r22	; 15
     1da:	77 9b       	sbis	0x0e, 7	; 14
     1dc:	fe cf       	rjmp	.-4      	; 0x1da <xmit_datablock+0x30>
	if (token != 0xFD) {	/* Is data token */
     1de:	6d 3f       	cpi	r22, 0xFD	; 253
     1e0:	19 f4       	brne	.+6      	; 0x1e8 <xmit_datablock+0x3e>
     1e2:	21 e0       	ldi	r18, 0x01	; 1
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	23 c0       	rjmp	.+70     	; 0x22e <xmit_datablock+0x84>
     1e8:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
     1ea:	80 81       	ld	r24, Z
     1ec:	8f b9       	out	0x0f, r24	; 15
     1ee:	77 9b       	sbis	0x0e, 7	; 14
     1f0:	fe cf       	rjmp	.-4      	; 0x1ee <xmit_datablock+0x44>
			xmit_spi(*buff++);
     1f2:	81 81       	ldd	r24, Z+1	; 0x01
     1f4:	8f b9       	out	0x0f, r24	; 15
     1f6:	77 9b       	sbis	0x0e, 7	; 14
     1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <xmit_datablock+0x4c>
		} while (--wc);
     1fa:	91 50       	subi	r25, 0x01	; 1
     1fc:	11 f0       	breq	.+4      	; 0x202 <xmit_datablock+0x58>
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     1fe:	32 96       	adiw	r30, 0x02	; 2
     200:	f4 cf       	rjmp	.-24     	; 0x1ea <xmit_datablock+0x40>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
     202:	8f ef       	ldi	r24, 0xFF	; 255
     204:	8f b9       	out	0x0f, r24	; 15
     206:	77 9b       	sbis	0x0e, 7	; 14
     208:	fe cf       	rjmp	.-4      	; 0x206 <xmit_datablock+0x5c>
		xmit_spi(0xFF);
     20a:	8f ef       	ldi	r24, 0xFF	; 255
     20c:	8f b9       	out	0x0f, r24	; 15
     20e:	77 9b       	sbis	0x0e, 7	; 14
     210:	fe cf       	rjmp	.-4      	; 0x20e <xmit_datablock+0x64>


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     212:	8f ef       	ldi	r24, 0xFF	; 255
     214:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     216:	77 9b       	sbis	0x0e, 7	; 14
     218:	fe cf       	rjmp	.-4      	; 0x216 <xmit_datablock+0x6c>
	return SPDR;
     21a:	8f b1       	in	r24, 0x0f	; 15
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	8f 71       	andi	r24, 0x1F	; 31
     220:	85 30       	cpi	r24, 0x05	; 5
     222:	09 f0       	breq	.+2      	; 0x226 <xmit_datablock+0x7c>
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	98 27       	eor	r25, r24
     22a:	29 2f       	mov	r18, r25
     22c:	30 e0       	ldi	r19, 0x00	; 0
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
}
     22e:	c9 01       	movw	r24, r18
     230:	08 95       	ret

00000232 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     232:	df 92       	push	r13
     234:	ef 92       	push	r14
     236:	ff 92       	push	r15
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
     23c:	d8 2e       	mov	r13, r24
     23e:	7a 01       	movw	r14, r20
     240:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     242:	87 ff       	sbrs	r24, 7
     244:	0c c0       	rjmp	.+24     	; 0x25e <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     246:	87 e3       	ldi	r24, 0x37	; 55
     248:	40 e0       	ldi	r20, 0x00	; 0
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
		if (res > 1) return res;
     254:	82 30       	cpi	r24, 0x02	; 2
     256:	08 f0       	brcs	.+2      	; 0x25a <send_cmd+0x28>
     258:	5d c0       	rjmp	.+186    	; 0x314 <send_cmd+0xe2>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     25a:	8f e7       	ldi	r24, 0x7F	; 127
     25c:	d8 22       	and	r13, r24
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     25e:	c0 9a       	sbi	0x18, 0	; 24


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     264:	77 9b       	sbis	0x0e, 7	; 14
     266:	fe cf       	rjmp	.-4      	; 0x264 <send_cmd+0x32>
	return SPDR;
     268:	8f b1       	in	r24, 0x0f	; 15
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
     26a:	c0 98       	cbi	0x18, 0	; 24
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     26c:	82 e3       	ldi	r24, 0x32	; 50
     26e:	80 93 b3 02 	sts	0x02B3, r24


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     272:	8f ef       	ldi	r24, 0xFF	; 255
     274:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     276:	77 9b       	sbis	0x0e, 7	; 14
     278:	fe cf       	rjmp	.-4      	; 0x276 <send_cmd+0x44>
	return SPDR;
     27a:	8f b1       	in	r24, 0x0f	; 15


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     27c:	9f ef       	ldi	r25, 0xFF	; 255
     27e:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     280:	77 9b       	sbis	0x0e, 7	; 14
     282:	fe cf       	rjmp	.-4      	; 0x280 <send_cmd+0x4e>
	return SPDR;
     284:	8f b1       	in	r24, 0x0f	; 15
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		if (rcvr_spi() == 0xFF) return 1;
     286:	8f 3f       	cpi	r24, 0xFF	; 255
     288:	51 f0       	breq	.+20     	; 0x29e <send_cmd+0x6c>
	while (Timer2);
     28a:	80 91 b3 02 	lds	r24, 0x02B3
     28e:	88 23       	and	r24, r24
     290:	b1 f7       	brne	.-20     	; 0x27e <send_cmd+0x4c>
     292:	46 c0       	rjmp	.+140    	; 0x320 <send_cmd+0xee>

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
	loop_until_bit_is_set(SPSR, SPIF);
     294:	77 9b       	sbis	0x0e, 7	; 14
     296:	fe cf       	rjmp	.-4      	; 0x294 <send_cmd+0x62>
	return SPDR;
     298:	8f b1       	in	r24, 0x0f	; 15
     29a:	8f ef       	ldi	r24, 0xFF	; 255
     29c:	3b c0       	rjmp	.+118    	; 0x314 <send_cmd+0xe2>
	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;

	/* Send command packet */
	xmit_spi(0x40 | cmd);				/* Start + Command index */
     29e:	8d 2d       	mov	r24, r13
     2a0:	80 64       	ori	r24, 0x40	; 64
     2a2:	8f b9       	out	0x0f, r24	; 15
     2a4:	77 9b       	sbis	0x0e, 7	; 14
     2a6:	fe cf       	rjmp	.-4      	; 0x2a4 <send_cmd+0x72>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     2a8:	81 2f       	mov	r24, r17
     2aa:	99 27       	eor	r25, r25
     2ac:	aa 27       	eor	r26, r26
     2ae:	bb 27       	eor	r27, r27
     2b0:	8f b9       	out	0x0f, r24	; 15
     2b2:	77 9b       	sbis	0x0e, 7	; 14
     2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <send_cmd+0x80>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     2b6:	c8 01       	movw	r24, r16
     2b8:	aa 27       	eor	r26, r26
     2ba:	bb 27       	eor	r27, r27
     2bc:	8f b9       	out	0x0f, r24	; 15
     2be:	77 9b       	sbis	0x0e, 7	; 14
     2c0:	fe cf       	rjmp	.-4      	; 0x2be <send_cmd+0x8c>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     2c2:	bb 27       	eor	r27, r27
     2c4:	a1 2f       	mov	r26, r17
     2c6:	90 2f       	mov	r25, r16
     2c8:	8f 2d       	mov	r24, r15
     2ca:	8f b9       	out	0x0f, r24	; 15
     2cc:	77 9b       	sbis	0x0e, 7	; 14
     2ce:	fe cf       	rjmp	.-4      	; 0x2cc <send_cmd+0x9a>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     2d0:	ef b8       	out	0x0f, r14	; 15
     2d2:	77 9b       	sbis	0x0e, 7	; 14
     2d4:	fe cf       	rjmp	.-4      	; 0x2d2 <send_cmd+0xa0>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     2d6:	dd 20       	and	r13, r13
     2d8:	11 f4       	brne	.+4      	; 0x2de <send_cmd+0xac>
     2da:	85 e9       	ldi	r24, 0x95	; 149
     2dc:	06 c0       	rjmp	.+12     	; 0x2ea <send_cmd+0xb8>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     2de:	88 e0       	ldi	r24, 0x08	; 8
     2e0:	d8 16       	cp	r13, r24
     2e2:	11 f4       	brne	.+4      	; 0x2e8 <send_cmd+0xb6>
     2e4:	87 e8       	ldi	r24, 0x87	; 135
     2e6:	01 c0       	rjmp	.+2      	; 0x2ea <send_cmd+0xb8>
     2e8:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
     2ea:	8f b9       	out	0x0f, r24	; 15
     2ec:	77 9b       	sbis	0x0e, 7	; 14
     2ee:	fe cf       	rjmp	.-4      	; 0x2ec <send_cmd+0xba>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
     2f0:	8c e0       	ldi	r24, 0x0C	; 12
     2f2:	d8 16       	cp	r13, r24
     2f4:	29 f4       	brne	.+10     	; 0x300 <send_cmd+0xce>


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     2f6:	8f ef       	ldi	r24, 0xFF	; 255
     2f8:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     2fa:	77 9b       	sbis	0x0e, 7	; 14
     2fc:	fe cf       	rjmp	.-4      	; 0x2fa <send_cmd+0xc8>
	return SPDR;
     2fe:	8f b1       	in	r24, 0x0f	; 15
     300:	9a e0       	ldi	r25, 0x0A	; 10


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     302:	2f ef       	ldi	r18, 0xFF	; 255
     304:	2f b9       	out	0x0f, r18	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     306:	77 9b       	sbis	0x0e, 7	; 14
     308:	fe cf       	rjmp	.-4      	; 0x306 <send_cmd+0xd4>
	return SPDR;
     30a:	8f b1       	in	r24, 0x0f	; 15
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
     30c:	87 ff       	sbrs	r24, 7
     30e:	02 c0       	rjmp	.+4      	; 0x314 <send_cmd+0xe2>
     310:	91 50       	subi	r25, 0x01	; 1
     312:	c1 f7       	brne	.-16     	; 0x304 <send_cmd+0xd2>

	return res;			/* Return with the response value */
}
     314:	1f 91       	pop	r17
     316:	0f 91       	pop	r16
     318:	ff 90       	pop	r15
     31a:	ef 90       	pop	r14
     31c:	df 90       	pop	r13
     31e:	08 95       	ret
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     320:	c0 9a       	sbi	0x18, 0	; 24


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     322:	8f ef       	ldi	r24, 0xFF	; 255
     324:	8f b9       	out	0x0f, r24	; 15
     326:	b6 cf       	rjmp	.-148    	; 0x294 <send_cmd+0x62>

00000328 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     328:	af 92       	push	r10
     32a:	bf 92       	push	r11
     32c:	cf 92       	push	r12
     32e:	df 92       	push	r13
     330:	ef 92       	push	r14
     332:	ff 92       	push	r15
     334:	0f 93       	push	r16
     336:	1f 93       	push	r17
     338:	df 93       	push	r29
     33a:	cf 93       	push	r28
     33c:	00 d0       	rcall	.+0      	; 0x33e <disk_initialize+0x16>
     33e:	00 d0       	rcall	.+0      	; 0x340 <disk_initialize+0x18>
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
     344:	88 23       	and	r24, r24
     346:	11 f0       	breq	.+4      	; 0x34c <disk_initialize+0x24>
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	13 c1       	rjmp	.+550    	; 0x572 <__stack+0x113>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     34c:	80 91 74 00 	lds	r24, 0x0074
     350:	81 fd       	sbrc	r24, 1
     352:	0d c1       	rjmp	.+538    	; 0x56e <__stack+0x10f>
static
void power_on (void)
{

	//PORTE &= ~0x80;				/* Socket power ON */
	for (Timer1 = 3; Timer1; );	/* Wait for 30ms */
     354:	83 e0       	ldi	r24, 0x03	; 3
     356:	80 93 b2 02 	sts	0x02B2, r24
     35a:	80 91 b2 02 	lds	r24, 0x02B2
     35e:	88 23       	and	r24, r24
     360:	e1 f7       	brne	.-8      	; 0x35a <disk_initialize+0x32>
	//PORTB = 0b10110101;			/* Enable drivers */
	//DDRB  = 0b11000111;
	//SPCR = 0b01010000;			/* Initialize SPI port (Mode 0) */
	
	//It didn't work with the above code, this is more clear anyway
	SPCR = (1<< SPE) | (1 << MSTR) | (1 << SPR0);  //SPI Mode 0
     362:	81 e5       	ldi	r24, 0x51	; 81
     364:	8d b9       	out	0x0d, r24	; 13
	SPSR = 0b00000000;	
     366:	1e b8       	out	0x0e, r1	; 14
	//outputs are MOSI, SCLK, and CS
	DDRB = (1 << PORTB7 | 1 << PORTB5  | 1 << PORTB4);
     368:	80 eb       	ldi	r24, 0xB0	; 176
     36a:	87 bb       	out	0x17, r24	; 23
	PORTB = (1 << PORTB5 | 1 << PORTB4);
     36c:	80 e3       	ldi	r24, 0x30	; 48
     36e:	88 bb       	out	0x18, r24	; 24
	DESELECT();
     370:	28 b3       	in	r18, 0x18	; 24
     372:	38 b3       	in	r19, 0x18	; 24
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	02 c0       	rjmp	.+4      	; 0x37e <disk_initialize+0x56>
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	3a 95       	dec	r19
     380:	e2 f7       	brpl	.-8      	; 0x37a <disk_initialize+0x52>
     382:	28 2b       	or	r18, r24
     384:	28 bb       	out	0x18, r18	; 24

	if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on */
	FCLK_SLOW();
     386:	82 e5       	ldi	r24, 0x52	; 82
     388:	8d b9       	out	0x0d, r24	; 13
     38a:	8a e0       	ldi	r24, 0x0A	; 10


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     38c:	9f ef       	ldi	r25, 0xFF	; 255
     38e:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     390:	77 9b       	sbis	0x0e, 7	; 14
     392:	fe cf       	rjmp	.-4      	; 0x390 <disk_initialize+0x68>
	return SPDR;
     394:	2f b1       	in	r18, 0x0f	; 15
	if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
     396:	81 50       	subi	r24, 0x01	; 1
     398:	d1 f7       	brne	.-12     	; 0x38e <disk_initialize+0x66>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     39a:	40 e0       	ldi	r20, 0x00	; 0
     39c:	50 e0       	ldi	r21, 0x00	; 0
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	70 e0       	ldi	r23, 0x00	; 0
     3a2:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     3a6:	81 30       	cpi	r24, 0x01	; 1
     3a8:	09 f0       	breq	.+2      	; 0x3ac <disk_initialize+0x84>
     3aa:	99 c0       	rjmp	.+306    	; 0x4de <__stack+0x7f>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     3ac:	84 e6       	ldi	r24, 0x64	; 100
     3ae:	80 93 b2 02 	sts	0x02B2, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
     3b2:	88 e0       	ldi	r24, 0x08	; 8
     3b4:	4a ea       	ldi	r20, 0xAA	; 170
     3b6:	51 e0       	ldi	r21, 0x01	; 1
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     3c0:	81 30       	cpi	r24, 0x01	; 1
     3c2:	09 f0       	breq	.+2      	; 0x3c6 <disk_initialize+0x9e>
     3c4:	56 c0       	rjmp	.+172    	; 0x472 <__stack+0x13>
     3c6:	6e 01       	movw	r12, r28
     3c8:	08 94       	sec
     3ca:	c1 1c       	adc	r12, r1
     3cc:	d1 1c       	adc	r13, r1
     3ce:	76 01       	movw	r14, r12


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     3d0:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     3d2:	9e 01       	movw	r18, r28
     3d4:	2b 5f       	subi	r18, 0xFB	; 251
     3d6:	3f 4f       	sbci	r19, 0xFF	; 255


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     3d8:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     3da:	77 9b       	sbis	0x0e, 7	; 14
     3dc:	fe cf       	rjmp	.-4      	; 0x3da <disk_initialize+0xb2>
	return SPDR;
     3de:	8f b1       	in	r24, 0x0f	; 15

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     3e0:	f7 01       	movw	r30, r14
     3e2:	81 93       	st	Z+, r24
     3e4:	7f 01       	movw	r14, r30
     3e6:	e2 17       	cp	r30, r18
     3e8:	f3 07       	cpc	r31, r19
     3ea:	b1 f7       	brne	.-20     	; 0x3d8 <disk_initialize+0xb0>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     3ec:	8b 81       	ldd	r24, Y+3	; 0x03
     3ee:	81 30       	cpi	r24, 0x01	; 1
     3f0:	09 f0       	breq	.+2      	; 0x3f4 <disk_initialize+0xcc>
     3f2:	75 c0       	rjmp	.+234    	; 0x4de <__stack+0x7f>
     3f4:	8c 81       	ldd	r24, Y+4	; 0x04
     3f6:	8a 3a       	cpi	r24, 0xAA	; 170
     3f8:	09 f0       	breq	.+2      	; 0x3fc <disk_initialize+0xd4>
     3fa:	71 c0       	rjmp	.+226    	; 0x4de <__stack+0x7f>
     3fc:	00 e0       	ldi	r16, 0x00	; 0
     3fe:	10 e0       	ldi	r17, 0x00	; 0
     400:	e4 ec       	ldi	r30, 0xC4	; 196
     402:	ae 2e       	mov	r10, r30
     404:	e9 e0       	ldi	r30, 0x09	; 9
     406:	be 2e       	mov	r11, r30
     408:	08 c0       	rjmp	.+16     	; 0x41a <disk_initialize+0xf2>
     40a:	c5 01       	movw	r24, r10
     40c:	01 97       	sbiw	r24, 0x01	; 1
     40e:	f1 f7       	brne	.-4      	; 0x40c <disk_initialize+0xe4>
				for (int i = 0; i < 10 && send_cmd(ACMD41, 1UL << 30);i++)	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     410:	0f 5f       	subi	r16, 0xFF	; 255
     412:	1f 4f       	sbci	r17, 0xFF	; 255
     414:	0a 30       	cpi	r16, 0x0A	; 10
     416:	11 05       	cpc	r17, r1
     418:	49 f0       	breq	.+18     	; 0x42c <disk_initialize+0x104>
     41a:	89 ea       	ldi	r24, 0xA9	; 169
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	70 e4       	ldi	r23, 0x40	; 64
     424:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     428:	88 23       	and	r24, r24
     42a:	79 f7       	brne	.-34     	; 0x40a <disk_initialize+0xe2>
				_delay_ms(10);
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     42c:	80 91 b2 02 	lds	r24, 0x02B2
     430:	88 23       	and	r24, r24
     432:	09 f4       	brne	.+2      	; 0x436 <disk_initialize+0x10e>
     434:	54 c0       	rjmp	.+168    	; 0x4de <__stack+0x7f>
     436:	8a e3       	ldi	r24, 0x3A	; 58
     438:	40 e0       	ldi	r20, 0x00	; 0
     43a:	50 e0       	ldi	r21, 0x00	; 0
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     444:	88 23       	and	r24, r24
     446:	09 f0       	breq	.+2      	; 0x44a <disk_initialize+0x122>
     448:	4a c0       	rjmp	.+148    	; 0x4de <__stack+0x7f>


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     44a:	9f ef       	ldi	r25, 0xFF	; 255
     44c:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     44e:	77 9b       	sbis	0x0e, 7	; 14
     450:	fe cf       	rjmp	.-4      	; 0x44e <disk_initialize+0x126>
	return SPDR;
     452:	8f b1       	in	r24, 0x0f	; 15
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				for (int i = 0; i < 10 && send_cmd(ACMD41, 1UL << 30);i++)	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				_delay_ms(10);
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
     454:	f6 01       	movw	r30, r12
     456:	81 93       	st	Z+, r24
     458:	6f 01       	movw	r12, r30
     45a:	ee 15       	cp	r30, r14
     45c:	ff 05       	cpc	r31, r15
     45e:	b1 f7       	brne	.-20     	; 0x44c <disk_initialize+0x124>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     460:	89 81       	ldd	r24, Y+1	; 0x01
     462:	86 fd       	sbrc	r24, 6
     464:	03 c0       	rjmp	.+6      	; 0x46c <__stack+0xd>
     466:	74 e0       	ldi	r23, 0x04	; 4
     468:	f7 2e       	mov	r15, r23
     46a:	3a c0       	rjmp	.+116    	; 0x4e0 <__stack+0x81>
     46c:	6c e0       	ldi	r22, 0x0C	; 12
     46e:	f6 2e       	mov	r15, r22
     470:	37 c0       	rjmp	.+110    	; 0x4e0 <__stack+0x81>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     472:	89 ea       	ldi	r24, 0xA9	; 169
     474:	40 e0       	ldi	r20, 0x00	; 0
     476:	50 e0       	ldi	r21, 0x00	; 0
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     480:	82 30       	cpi	r24, 0x02	; 2
     482:	28 f0       	brcs	.+10     	; 0x48e <__stack+0x2f>
     484:	ee 24       	eor	r14, r14
     486:	e3 94       	inc	r14
     488:	ff 24       	eor	r15, r15
     48a:	f3 94       	inc	r15
     48c:	04 c0       	rjmp	.+8      	; 0x496 <__stack+0x37>
     48e:	59 ea       	ldi	r21, 0xA9	; 169
     490:	e5 2e       	mov	r14, r21
     492:	42 e0       	ldi	r20, 0x02	; 2
     494:	f4 2e       	mov	r15, r20
     496:	00 e0       	ldi	r16, 0x00	; 0
     498:	10 e0       	ldi	r17, 0x00	; 0
     49a:	34 ec       	ldi	r19, 0xC4	; 196
     49c:	c3 2e       	mov	r12, r19
     49e:	39 e0       	ldi	r19, 0x09	; 9
     4a0:	d3 2e       	mov	r13, r19
     4a2:	08 c0       	rjmp	.+16     	; 0x4b4 <__stack+0x55>
     4a4:	c6 01       	movw	r24, r12
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <__stack+0x47>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (int i = 0; i < 10 && send_cmd(cmd, 0);i++)
     4aa:	0f 5f       	subi	r16, 0xFF	; 255
     4ac:	1f 4f       	sbci	r17, 0xFF	; 255
     4ae:	0a 30       	cpi	r16, 0x0A	; 10
     4b0:	11 05       	cpc	r17, r1
     4b2:	49 f0       	breq	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	8e 2d       	mov	r24, r14
     4b6:	40 e0       	ldi	r20, 0x00	; 0
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     4c2:	88 23       	and	r24, r24
     4c4:	79 f7       	brne	.-34     	; 0x4a4 <__stack+0x45>
			_delay_ms(10);			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     4c6:	80 91 b2 02 	lds	r24, 0x02B2
     4ca:	88 23       	and	r24, r24
     4cc:	41 f0       	breq	.+16     	; 0x4de <__stack+0x7f>
     4ce:	80 e1       	ldi	r24, 0x10	; 16
     4d0:	40 e0       	ldi	r20, 0x00	; 0
     4d2:	52 e0       	ldi	r21, 0x02	; 2
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     4dc:	81 11       	cpse	r24, r1
     4de:	ff 24       	eor	r15, r15
				ty = 0;
		}
	}
	CardType = ty;
     4e0:	f0 92 b4 02 	sts	0x02B4, r15
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     4e4:	c0 9a       	sbi	0x18, 0	; 24


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     4e6:	8f ef       	ldi	r24, 0xFF	; 255
     4e8:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     4ea:	77 9b       	sbis	0x0e, 7	; 14
     4ec:	fe cf       	rjmp	.-4      	; 0x4ea <__stack+0x8b>
	return SPDR;
     4ee:	8f b1       	in	r24, 0x0f	; 15
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
     4f0:	ff 20       	and	r15, r15
     4f2:	41 f0       	breq	.+16     	; 0x504 <__stack+0xa5>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     4f4:	80 91 74 00 	lds	r24, 0x0074
     4f8:	8e 7f       	andi	r24, 0xFE	; 254
     4fa:	80 93 74 00 	sts	0x0074, r24
		FCLK_FAST();
     4fe:	80 e5       	ldi	r24, 0x50	; 80
     500:	8d b9       	out	0x0d, r24	; 13
     502:	35 c0       	rjmp	.+106    	; 0x56e <__stack+0x10f>
}

static
void power_off (void)
{
	SELECT();				/* Wait for card ready */
     504:	38 b3       	in	r19, 0x18	; 24
     506:	28 b3       	in	r18, 0x18	; 24
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	02 c0       	rjmp	.+4      	; 0x512 <__stack+0xb3>
     50e:	88 0f       	add	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	2a 95       	dec	r18
     514:	e2 f7       	brpl	.-8      	; 0x50e <__stack+0xaf>
     516:	80 95       	com	r24
     518:	83 23       	and	r24, r19
     51a:	88 bb       	out	0x18, r24	; 24
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     51c:	82 e3       	ldi	r24, 0x32	; 50
     51e:	80 93 b3 02 	sts	0x02B3, r24


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     522:	8f ef       	ldi	r24, 0xFF	; 255
     524:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     526:	77 9b       	sbis	0x0e, 7	; 14
     528:	fe cf       	rjmp	.-4      	; 0x526 <__stack+0xc7>
	return SPDR;
     52a:	8f b1       	in	r24, 0x0f	; 15


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     52c:	9f ef       	ldi	r25, 0xFF	; 255
     52e:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     530:	77 9b       	sbis	0x0e, 7	; 14
     532:	fe cf       	rjmp	.-4      	; 0x530 <__stack+0xd1>
	return SPDR;
     534:	8f b1       	in	r24, 0x0f	; 15
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		if (rcvr_spi() == 0xFF) return 1;
     536:	8f 3f       	cpi	r24, 0xFF	; 255
     538:	21 f0       	breq	.+8      	; 0x542 <__stack+0xe3>
	while (Timer2);
     53a:	80 91 b3 02 	lds	r24, 0x02B3
     53e:	88 23       	and	r24, r24
     540:	b1 f7       	brne	.-20     	; 0x52e <__stack+0xcf>
}

static
void release_spi (void)
{
	DESELECT();
     542:	28 b3       	in	r18, 0x18	; 24
     544:	38 b3       	in	r19, 0x18	; 24
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	02 c0       	rjmp	.+4      	; 0x550 <__stack+0xf1>
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	3a 95       	dec	r19
     552:	e2 f7       	brpl	.-8      	; 0x54c <__stack+0xed>
     554:	28 2b       	or	r18, r24
     556:	28 bb       	out	0x18, r18	; 24


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     558:	8f ef       	ldi	r24, 0xFF	; 255
     55a:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     55c:	77 9b       	sbis	0x0e, 7	; 14
     55e:	fe cf       	rjmp	.-4      	; 0x55c <__stack+0xfd>
	return SPDR;
     560:	8f b1       	in	r24, 0x0f	; 15
{
	SELECT();				/* Wait for card ready */
	wait_ready();
	release_spi();

	SPCR = 0;				/* Disable SPI function */
     562:	1d b8       	out	0x0d, r1	; 13
	//DDRB  = 0b11000000;		/* Disable drivers */
	//PORTB = 0b10110000;
	//PORTE |=  0x80;			/* Socket power OFF */
	Stat |= STA_NOINIT;		/* Set STA_NOINIT */
     564:	80 91 74 00 	lds	r24, 0x0074
     568:	81 60       	ori	r24, 0x01	; 1
     56a:	80 93 74 00 	sts	0x0074, r24
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
     56e:	80 91 74 00 	lds	r24, 0x0074
}
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	cf 91       	pop	r28
     57c:	df 91       	pop	r29
     57e:	1f 91       	pop	r17
     580:	0f 91       	pop	r16
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	df 90       	pop	r13
     588:	cf 90       	pop	r12
     58a:	bf 90       	pop	r11
     58c:	af 90       	pop	r10
     58e:	08 95       	ret

00000590 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     590:	88 23       	and	r24, r24
     592:	11 f0       	breq	.+4      	; 0x598 <disk_status+0x8>
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	08 95       	ret
	return Stat;
     598:	80 91 74 00 	lds	r24, 0x0074
}
     59c:	08 95       	ret

0000059e <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     59e:	0f 93       	push	r16
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     5a6:	88 23       	and	r24, r24
     5a8:	09 f0       	breq	.+2      	; 0x5ac <disk_read+0xe>
     5aa:	4b c0       	rjmp	.+150    	; 0x642 <disk_read+0xa4>
     5ac:	00 23       	and	r16, r16
     5ae:	09 f4       	brne	.+2      	; 0x5b2 <disk_read+0x14>
     5b0:	48 c0       	rjmp	.+144    	; 0x642 <disk_read+0xa4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     5b2:	80 91 74 00 	lds	r24, 0x0074
     5b6:	80 ff       	sbrs	r24, 0
     5b8:	02 c0       	rjmp	.+4      	; 0x5be <disk_read+0x20>
     5ba:	03 e0       	ldi	r16, 0x03	; 3
     5bc:	43 c0       	rjmp	.+134    	; 0x644 <disk_read+0xa6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     5be:	80 91 b4 02 	lds	r24, 0x02B4
     5c2:	83 fd       	sbrc	r24, 3
     5c4:	07 c0       	rjmp	.+14     	; 0x5d4 <disk_read+0x36>
     5c6:	f9 e0       	ldi	r31, 0x09	; 9
     5c8:	22 0f       	add	r18, r18
     5ca:	33 1f       	adc	r19, r19
     5cc:	44 1f       	adc	r20, r20
     5ce:	55 1f       	adc	r21, r21
     5d0:	fa 95       	dec	r31
     5d2:	d1 f7       	brne	.-12     	; 0x5c8 <disk_read+0x2a>

	if (count == 1) {	/* Single block read */
     5d4:	01 30       	cpi	r16, 0x01	; 1
     5d6:	89 f4       	brne	.+34     	; 0x5fa <disk_read+0x5c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     5d8:	81 e1       	ldi	r24, 0x11	; 17
     5da:	ba 01       	movw	r22, r20
     5dc:	a9 01       	movw	r20, r18
     5de:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     5e2:	88 23       	and	r24, r24
     5e4:	21 f5       	brne	.+72     	; 0x62e <disk_read+0x90>
     5e6:	ce 01       	movw	r24, r28
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	72 e0       	ldi	r23, 0x02	; 2
     5ec:	0e 94 94 00 	call	0x128	; 0x128 <rcvr_datablock>
     5f0:	00 e0       	ldi	r16, 0x00	; 0
     5f2:	89 2b       	or	r24, r25
     5f4:	e1 f4       	brne	.+56     	; 0x62e <disk_read+0x90>
     5f6:	01 e0       	ldi	r16, 0x01	; 1
     5f8:	1a c0       	rjmp	.+52     	; 0x62e <disk_read+0x90>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     5fa:	82 e1       	ldi	r24, 0x12	; 18
     5fc:	ba 01       	movw	r22, r20
     5fe:	a9 01       	movw	r20, r18
     600:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     604:	88 23       	and	r24, r24
     606:	99 f4       	brne	.+38     	; 0x62e <disk_read+0x90>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     608:	ce 01       	movw	r24, r28
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	72 e0       	ldi	r23, 0x02	; 2
     60e:	0e 94 94 00 	call	0x128	; 0x128 <rcvr_datablock>
     612:	89 2b       	or	r24, r25
     614:	29 f0       	breq	.+10     	; 0x620 <disk_read+0x82>
				buff += 512;
			} while (--count);
     616:	01 50       	subi	r16, 0x01	; 1
     618:	19 f0       	breq	.+6      	; 0x620 <disk_read+0x82>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
     61a:	c0 50       	subi	r28, 0x00	; 0
     61c:	de 4f       	sbci	r29, 0xFE	; 254
     61e:	f4 cf       	rjmp	.-24     	; 0x608 <disk_read+0x6a>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     620:	8c e0       	ldi	r24, 0x0C	; 12
     622:	40 e0       	ldi	r20, 0x00	; 0
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     62e:	c0 9a       	sbi	0x18, 0	; 24


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     630:	8f ef       	ldi	r24, 0xFF	; 255
     632:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     634:	77 9b       	sbis	0x0e, 7	; 14
     636:	fe cf       	rjmp	.-4      	; 0x634 <disk_read+0x96>
	return SPDR;
     638:	8f b1       	in	r24, 0x0f	; 15
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     63a:	00 23       	and	r16, r16
     63c:	19 f0       	breq	.+6      	; 0x644 <disk_read+0xa6>
     63e:	01 e0       	ldi	r16, 0x01	; 1
     640:	01 c0       	rjmp	.+2      	; 0x644 <disk_read+0xa6>
     642:	04 e0       	ldi	r16, 0x04	; 4
}
     644:	80 2f       	mov	r24, r16
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	0f 91       	pop	r16
     64c:	08 95       	ret

0000064e <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     64e:	cf 92       	push	r12
     650:	df 92       	push	r13
     652:	ef 92       	push	r14
     654:	ff 92       	push	r15
     656:	0f 93       	push	r16
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	eb 01       	movw	r28, r22
     65e:	69 01       	movw	r12, r18
     660:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
     662:	88 23       	and	r24, r24
     664:	09 f0       	breq	.+2      	; 0x668 <disk_write+0x1a>
     666:	59 c0       	rjmp	.+178    	; 0x71a <disk_write+0xcc>
     668:	00 23       	and	r16, r16
     66a:	09 f4       	brne	.+2      	; 0x66e <disk_write+0x20>
     66c:	56 c0       	rjmp	.+172    	; 0x71a <disk_write+0xcc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     66e:	80 91 74 00 	lds	r24, 0x0074
     672:	80 ff       	sbrs	r24, 0
     674:	02 c0       	rjmp	.+4      	; 0x67a <disk_write+0x2c>
     676:	03 e0       	ldi	r16, 0x03	; 3
     678:	51 c0       	rjmp	.+162    	; 0x71c <disk_write+0xce>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     67a:	80 91 74 00 	lds	r24, 0x0074
     67e:	82 ff       	sbrs	r24, 2
     680:	02 c0       	rjmp	.+4      	; 0x686 <disk_write+0x38>
     682:	02 e0       	ldi	r16, 0x02	; 2
     684:	4b c0       	rjmp	.+150    	; 0x71c <disk_write+0xce>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     686:	80 91 b4 02 	lds	r24, 0x02B4
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	83 fd       	sbrc	r24, 3
     68e:	07 c0       	rjmp	.+14     	; 0x69e <disk_write+0x50>
     690:	a9 e0       	ldi	r26, 0x09	; 9
     692:	cc 0c       	add	r12, r12
     694:	dd 1c       	adc	r13, r13
     696:	ee 1c       	adc	r14, r14
     698:	ff 1c       	adc	r15, r15
     69a:	aa 95       	dec	r26
     69c:	d1 f7       	brne	.-12     	; 0x692 <disk_write+0x44>

	if (count == 1) {	/* Single block write */
     69e:	01 30       	cpi	r16, 0x01	; 1
     6a0:	69 f4       	brne	.+26     	; 0x6bc <disk_write+0x6e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     6a2:	88 e1       	ldi	r24, 0x18	; 24
     6a4:	b7 01       	movw	r22, r14
     6a6:	a6 01       	movw	r20, r12
     6a8:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     6ac:	88 23       	and	r24, r24
     6ae:	59 f5       	brne	.+86     	; 0x706 <disk_write+0xb8>
     6b0:	ce 01       	movw	r24, r28
     6b2:	6e ef       	ldi	r22, 0xFE	; 254
     6b4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <xmit_datablock>
     6b8:	00 e0       	ldi	r16, 0x00	; 0
     6ba:	22 c0       	rjmp	.+68     	; 0x700 <disk_write+0xb2>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     6bc:	86 70       	andi	r24, 0x06	; 6
     6be:	90 70       	andi	r25, 0x00	; 0
     6c0:	89 2b       	or	r24, r25
     6c2:	39 f0       	breq	.+14     	; 0x6d2 <disk_write+0x84>
     6c4:	40 2f       	mov	r20, r16
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	87 e9       	ldi	r24, 0x97	; 151
     6ce:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     6d2:	89 e1       	ldi	r24, 0x19	; 25
     6d4:	b7 01       	movw	r22, r14
     6d6:	a6 01       	movw	r20, r12
     6d8:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     6dc:	88 23       	and	r24, r24
     6de:	99 f4       	brne	.+38     	; 0x706 <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     6e0:	ce 01       	movw	r24, r28
     6e2:	6c ef       	ldi	r22, 0xFC	; 252
     6e4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <xmit_datablock>
     6e8:	89 2b       	or	r24, r25
     6ea:	29 f0       	breq	.+10     	; 0x6f6 <disk_write+0xa8>
				buff += 512;
			} while (--count);
     6ec:	01 50       	subi	r16, 0x01	; 1
     6ee:	19 f0       	breq	.+6      	; 0x6f6 <disk_write+0xa8>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
     6f0:	c0 50       	subi	r28, 0x00	; 0
     6f2:	de 4f       	sbci	r29, 0xFE	; 254
     6f4:	f5 cf       	rjmp	.-22     	; 0x6e0 <disk_write+0x92>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	6d ef       	ldi	r22, 0xFD	; 253
     6fc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <xmit_datablock>
     700:	89 2b       	or	r24, r25
     702:	09 f4       	brne	.+2      	; 0x706 <disk_write+0xb8>
     704:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     706:	c0 9a       	sbi	0x18, 0	; 24


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     708:	8f ef       	ldi	r24, 0xFF	; 255
     70a:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     70c:	77 9b       	sbis	0x0e, 7	; 14
     70e:	fe cf       	rjmp	.-4      	; 0x70c <disk_write+0xbe>
	return SPDR;
     710:	8f b1       	in	r24, 0x0f	; 15
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     712:	00 23       	and	r16, r16
     714:	19 f0       	breq	.+6      	; 0x71c <disk_write+0xce>
     716:	01 e0       	ldi	r16, 0x01	; 1
     718:	01 c0       	rjmp	.+2      	; 0x71c <disk_write+0xce>
     71a:	04 e0       	ldi	r16, 0x04	; 4
}
     71c:	80 2f       	mov	r24, r16
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	0f 91       	pop	r16
     724:	ff 90       	pop	r15
     726:	ef 90       	pop	r14
     728:	df 90       	pop	r13
     72a:	cf 90       	pop	r12
     72c:	08 95       	ret

0000072e <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     72e:	ff 92       	push	r15
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	df 93       	push	r29
     736:	cf 93       	push	r28
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	60 97       	sbiw	r28, 0x10	; 16
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	f8 94       	cli
     742:	de bf       	out	0x3e, r29	; 62
     744:	0f be       	out	0x3f, r0	; 63
     746:	cd bf       	out	0x3d, r28	; 61
     748:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
     74a:	88 23       	and	r24, r24
     74c:	09 f0       	breq	.+2      	; 0x750 <disk_ioctl+0x22>
     74e:	cd c1       	rjmp	.+922    	; 0xaea <disk_ioctl+0x3bc>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
     750:	65 30       	cpi	r22, 0x05	; 5
     752:	09 f0       	breq	.+2      	; 0x756 <disk_ioctl+0x28>
     754:	42 c0       	rjmp	.+132    	; 0x7da <disk_ioctl+0xac>
		switch (ptr[0]) {
     756:	fa 01       	movw	r30, r20
     758:	80 81       	ld	r24, Z
     75a:	88 23       	and	r24, r24
     75c:	21 f0       	breq	.+8      	; 0x766 <disk_ioctl+0x38>
     75e:	81 30       	cpi	r24, 0x01	; 1
     760:	09 f0       	breq	.+2      	; 0x764 <disk_ioctl+0x36>
     762:	c3 c1       	rjmp	.+902    	; 0xaea <disk_ioctl+0x3bc>
     764:	36 c0       	rjmp	.+108    	; 0x7d2 <disk_ioctl+0xa4>
}

static
void power_off (void)
{
	SELECT();				/* Wait for card ready */
     766:	38 b3       	in	r19, 0x18	; 24
     768:	28 b3       	in	r18, 0x18	; 24
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	02 c0       	rjmp	.+4      	; 0x774 <disk_ioctl+0x46>
     770:	88 0f       	add	r24, r24
     772:	99 1f       	adc	r25, r25
     774:	2a 95       	dec	r18
     776:	e2 f7       	brpl	.-8      	; 0x770 <disk_ioctl+0x42>
     778:	80 95       	com	r24
     77a:	83 23       	and	r24, r19
     77c:	88 bb       	out	0x18, r24	; 24
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     77e:	82 e3       	ldi	r24, 0x32	; 50
     780:	80 93 b3 02 	sts	0x02B3, r24


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     784:	8f ef       	ldi	r24, 0xFF	; 255
     786:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     788:	77 9b       	sbis	0x0e, 7	; 14
     78a:	fe cf       	rjmp	.-4      	; 0x788 <disk_ioctl+0x5a>
	return SPDR;
     78c:	8f b1       	in	r24, 0x0f	; 15


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     78e:	9f ef       	ldi	r25, 0xFF	; 255
     790:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     792:	77 9b       	sbis	0x0e, 7	; 14
     794:	fe cf       	rjmp	.-4      	; 0x792 <disk_ioctl+0x64>
	return SPDR;
     796:	8f b1       	in	r24, 0x0f	; 15
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		if (rcvr_spi() == 0xFF) return 1;
     798:	8f 3f       	cpi	r24, 0xFF	; 255
     79a:	21 f0       	breq	.+8      	; 0x7a4 <disk_ioctl+0x76>
	while (Timer2);
     79c:	80 91 b3 02 	lds	r24, 0x02B3
     7a0:	88 23       	and	r24, r24
     7a2:	b1 f7       	brne	.-20     	; 0x790 <disk_ioctl+0x62>
}

static
void release_spi (void)
{
	DESELECT();
     7a4:	28 b3       	in	r18, 0x18	; 24
     7a6:	38 b3       	in	r19, 0x18	; 24
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <disk_ioctl+0x84>
     7ae:	88 0f       	add	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	3a 95       	dec	r19
     7b4:	e2 f7       	brpl	.-8      	; 0x7ae <disk_ioctl+0x80>
     7b6:	28 2b       	or	r18, r24
     7b8:	28 bb       	out	0x18, r18	; 24


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     7ba:	8f ef       	ldi	r24, 0xFF	; 255
     7bc:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     7be:	77 9b       	sbis	0x0e, 7	; 14
     7c0:	fe cf       	rjmp	.-4      	; 0x7be <disk_ioctl+0x90>
	return SPDR;
     7c2:	8f b1       	in	r24, 0x0f	; 15
{
	SELECT();				/* Wait for card ready */
	wait_ready();
	release_spi();

	SPCR = 0;				/* Disable SPI function */
     7c4:	1d b8       	out	0x0d, r1	; 13
	//DDRB  = 0b11000000;		/* Disable drivers */
	//PORTB = 0b10110000;
	//PORTE |=  0x80;			/* Socket power OFF */
	Stat |= STA_NOINIT;		/* Set STA_NOINIT */
     7c6:	80 91 74 00 	lds	r24, 0x0074
     7ca:	81 60       	ori	r24, 0x01	; 1
     7cc:	80 93 74 00 	sts	0x0074, r24
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <disk_ioctl+0xa8>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
			res = RES_OK;
			break;
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
     7d2:	fa 01       	movw	r30, r20
     7d4:	81 83       	std	Z+1, r24	; 0x01
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	89 c1       	rjmp	.+786    	; 0xaec <disk_ioctl+0x3be>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     7da:	80 91 74 00 	lds	r24, 0x0074
     7de:	80 ff       	sbrs	r24, 0
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <disk_ioctl+0xb8>
     7e2:	23 e0       	ldi	r18, 0x03	; 3
     7e4:	83 c1       	rjmp	.+774    	; 0xaec <disk_ioctl+0x3be>

		switch (ctrl) {
     7e6:	6a 30       	cpi	r22, 0x0A	; 10
     7e8:	09 f4       	brne	.+2      	; 0x7ec <disk_ioctl+0xbe>
     7ea:	35 c1       	rjmp	.+618    	; 0xa56 <disk_ioctl+0x328>
     7ec:	6b 30       	cpi	r22, 0x0B	; 11
     7ee:	50 f4       	brcc	.+20     	; 0x804 <disk_ioctl+0xd6>
     7f0:	61 30       	cpi	r22, 0x01	; 1
     7f2:	a9 f1       	breq	.+106    	; 0x85e <disk_ioctl+0x130>
     7f4:	61 30       	cpi	r22, 0x01	; 1
     7f6:	a0 f0       	brcs	.+40     	; 0x820 <disk_ioctl+0xf2>
     7f8:	62 30       	cpi	r22, 0x02	; 2
     7fa:	09 f4       	brne	.+2      	; 0x7fe <disk_ioctl+0xd0>
     7fc:	96 c0       	rjmp	.+300    	; 0x92a <disk_ioctl+0x1fc>
     7fe:	63 30       	cpi	r22, 0x03	; 3
     800:	69 f4       	brne	.+26     	; 0x81c <disk_ioctl+0xee>
     802:	99 c0       	rjmp	.+306    	; 0x936 <disk_ioctl+0x208>
     804:	6c 30       	cpi	r22, 0x0C	; 12
     806:	09 f4       	brne	.+2      	; 0x80a <disk_ioctl+0xdc>
     808:	2d c1       	rjmp	.+602    	; 0xa64 <disk_ioctl+0x336>
     80a:	6c 30       	cpi	r22, 0x0C	; 12
     80c:	08 f4       	brcc	.+2      	; 0x810 <disk_ioctl+0xe2>
     80e:	28 c1       	rjmp	.+592    	; 0xa60 <disk_ioctl+0x332>
     810:	6d 30       	cpi	r22, 0x0D	; 13
     812:	09 f4       	brne	.+2      	; 0x816 <disk_ioctl+0xe8>
     814:	34 c1       	rjmp	.+616    	; 0xa7e <disk_ioctl+0x350>
     816:	6e 30       	cpi	r22, 0x0E	; 14
     818:	09 f4       	brne	.+2      	; 0x81c <disk_ioctl+0xee>
     81a:	49 c1       	rjmp	.+658    	; 0xaae <disk_ioctl+0x380>
     81c:	24 e0       	ldi	r18, 0x04	; 4
     81e:	5e c1       	rjmp	.+700    	; 0xadc <disk_ioctl+0x3ae>
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
     820:	c0 98       	cbi	0x18, 0	; 24
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     822:	82 e3       	ldi	r24, 0x32	; 50
     824:	80 93 b3 02 	sts	0x02B3, r24


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     828:	8f ef       	ldi	r24, 0xFF	; 255
     82a:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     82c:	77 9b       	sbis	0x0e, 7	; 14
     82e:	fe cf       	rjmp	.-4      	; 0x82c <disk_ioctl+0xfe>
	return SPDR;
     830:	8f b1       	in	r24, 0x0f	; 15


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     832:	9f ef       	ldi	r25, 0xFF	; 255
     834:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     836:	77 9b       	sbis	0x0e, 7	; 14
     838:	fe cf       	rjmp	.-4      	; 0x836 <disk_ioctl+0x108>
	return SPDR;
     83a:	8f b1       	in	r24, 0x0f	; 15
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		if (rcvr_spi() == 0xFF) return 1;
     83c:	8f 3f       	cpi	r24, 0xFF	; 255
     83e:	49 f0       	breq	.+18     	; 0x852 <disk_ioctl+0x124>
	while (Timer2);
     840:	80 91 b3 02 	lds	r24, 0x02B3
     844:	88 23       	and	r24, r24
     846:	b1 f7       	brne	.-20     	; 0x834 <disk_ioctl+0x106>
     848:	5e c1       	rjmp	.+700    	; 0xb06 <disk_ioctl+0x3d8>

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
	loop_until_bit_is_set(SPSR, SPIF);
     84a:	77 9b       	sbis	0x0e, 7	; 14
     84c:	fe cf       	rjmp	.-4      	; 0x84a <disk_ioctl+0x11c>
	return SPDR;
     84e:	8f b1       	in	r24, 0x0f	; 15
     850:	44 c1       	rjmp	.+648    	; 0xada <disk_ioctl+0x3ac>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     852:	c0 9a       	sbi	0x18, 0	; 24


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     854:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     856:	77 9b       	sbis	0x0e, 7	; 14
     858:	fe cf       	rjmp	.-4      	; 0x856 <disk_ioctl+0x128>
	return SPDR;
     85a:	8f b1       	in	r24, 0x0f	; 15
     85c:	fa c0       	rjmp	.+500    	; 0xa52 <disk_ioctl+0x324>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     85e:	89 e0       	ldi	r24, 0x09	; 9
     860:	40 e0       	ldi	r20, 0x00	; 0
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     86c:	88 23       	and	r24, r24
     86e:	09 f0       	breq	.+2      	; 0x872 <disk_ioctl+0x144>
     870:	34 c1       	rjmp	.+616    	; 0xada <disk_ioctl+0x3ac>
     872:	ce 01       	movw	r24, r28
     874:	01 96       	adiw	r24, 0x01	; 1
     876:	60 e1       	ldi	r22, 0x10	; 16
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	0e 94 94 00 	call	0x128	; 0x128 <rcvr_datablock>
     87e:	89 2b       	or	r24, r25
     880:	09 f4       	brne	.+2      	; 0x884 <disk_ioctl+0x156>
     882:	2b c1       	rjmp	.+598    	; 0xada <disk_ioctl+0x3ac>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     884:	89 81       	ldd	r24, Y+1	; 0x01
     886:	82 95       	swap	r24
     888:	86 95       	lsr	r24
     88a:	86 95       	lsr	r24
     88c:	83 70       	andi	r24, 0x03	; 3
     88e:	7a 85       	ldd	r23, Y+10	; 0x0a
     890:	49 85       	ldd	r20, Y+9	; 0x09
     892:	81 30       	cpi	r24, 0x01	; 1
     894:	b1 f4       	brne	.+44     	; 0x8c2 <disk_ioctl+0x194>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
     896:	87 2f       	mov	r24, r23
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	01 96       	adiw	r24, 0x01	; 1
     89c:	34 2f       	mov	r19, r20
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	82 0f       	add	r24, r18
     8a2:	93 1f       	adc	r25, r19
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	7a e0       	ldi	r23, 0x0A	; 10
     8aa:	88 0f       	add	r24, r24
     8ac:	99 1f       	adc	r25, r25
     8ae:	aa 1f       	adc	r26, r26
     8b0:	bb 1f       	adc	r27, r27
     8b2:	7a 95       	dec	r23
     8b4:	d1 f7       	brne	.-12     	; 0x8aa <disk_ioctl+0x17c>
     8b6:	f8 01       	movw	r30, r16
     8b8:	80 83       	st	Z, r24
     8ba:	91 83       	std	Z+1, r25	; 0x01
     8bc:	a2 83       	std	Z+2, r26	; 0x02
     8be:	b3 83       	std	Z+3, r27	; 0x03
     8c0:	0d c1       	rjmp	.+538    	; 0xadc <disk_ioctl+0x3ae>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
     8c2:	42 95       	swap	r20
     8c4:	46 95       	lsr	r20
     8c6:	46 95       	lsr	r20
     8c8:	43 70       	andi	r20, 0x03	; 3
     8ca:	28 85       	ldd	r18, Y+8	; 0x08
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	22 0f       	add	r18, r18
     8d0:	33 1f       	adc	r19, r19
     8d2:	22 0f       	add	r18, r18
     8d4:	33 1f       	adc	r19, r19
     8d6:	24 0f       	add	r18, r20
     8d8:	31 1d       	adc	r19, r1
     8da:	2f 5f       	subi	r18, 0xFF	; 255
     8dc:	3f 4f       	sbci	r19, 0xFF	; 255
     8de:	8f 81       	ldd	r24, Y+7	; 0x07
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	83 70       	andi	r24, 0x03	; 3
     8e4:	90 70       	andi	r25, 0x00	; 0
     8e6:	98 2f       	mov	r25, r24
     8e8:	88 27       	eor	r24, r24
     8ea:	99 0f       	add	r25, r25
     8ec:	99 0f       	add	r25, r25
     8ee:	28 0f       	add	r18, r24
     8f0:	39 1f       	adc	r19, r25
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	8e 81       	ldd	r24, Y+6	; 0x06
     8f8:	8f 70       	andi	r24, 0x0F	; 15
     8fa:	6b 85       	ldd	r22, Y+11	; 0x0b
     8fc:	66 1f       	adc	r22, r22
     8fe:	66 27       	eor	r22, r22
     900:	66 1f       	adc	r22, r22
     902:	86 0f       	add	r24, r22
     904:	8e 5f       	subi	r24, 0xFE	; 254
     906:	73 70       	andi	r23, 0x03	; 3
     908:	77 0f       	add	r23, r23
     90a:	87 0f       	add	r24, r23
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	09 97       	sbiw	r24, 0x09	; 9
     910:	04 c0       	rjmp	.+8      	; 0x91a <disk_ioctl+0x1ec>
     912:	22 0f       	add	r18, r18
     914:	33 1f       	adc	r19, r19
     916:	44 1f       	adc	r20, r20
     918:	55 1f       	adc	r21, r21
     91a:	8a 95       	dec	r24
     91c:	d2 f7       	brpl	.-12     	; 0x912 <disk_ioctl+0x1e4>
     91e:	f8 01       	movw	r30, r16
     920:	20 83       	st	Z, r18
     922:	31 83       	std	Z+1, r19	; 0x01
     924:	42 83       	std	Z+2, r20	; 0x02
     926:	53 83       	std	Z+3, r21	; 0x03
     928:	94 c0       	rjmp	.+296    	; 0xa52 <disk_ioctl+0x324>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	92 e0       	ldi	r25, 0x02	; 2
     92e:	fa 01       	movw	r30, r20
     930:	91 83       	std	Z+1, r25	; 0x01
     932:	80 83       	st	Z, r24
     934:	8e c0       	rjmp	.+284    	; 0xa52 <disk_ioctl+0x324>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
     936:	80 91 b4 02 	lds	r24, 0x02B4
     93a:	f8 2e       	mov	r15, r24
     93c:	82 ff       	sbrs	r24, 2
     93e:	2f c0       	rjmp	.+94     	; 0x99e <disk_ioctl+0x270>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
     940:	8d e8       	ldi	r24, 0x8D	; 141
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     94e:	88 23       	and	r24, r24
     950:	09 f0       	breq	.+2      	; 0x954 <disk_ioctl+0x226>
     952:	c3 c0       	rjmp	.+390    	; 0xada <disk_ioctl+0x3ac>


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     958:	77 9b       	sbis	0x0e, 7	; 14
     95a:	fe cf       	rjmp	.-4      	; 0x958 <disk_ioctl+0x22a>
	return SPDR;
     95c:	8f b1       	in	r24, 0x0f	; 15

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
     95e:	ce 01       	movw	r24, r28
     960:	01 96       	adiw	r24, 0x01	; 1
     962:	60 e1       	ldi	r22, 0x10	; 16
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	0e 94 94 00 	call	0x128	; 0x128 <rcvr_datablock>
     96a:	89 2b       	or	r24, r25
     96c:	09 f4       	brne	.+2      	; 0x970 <disk_ioctl+0x242>
     96e:	b5 c0       	rjmp	.+362    	; 0xada <disk_ioctl+0x3ac>
     970:	80 e3       	ldi	r24, 0x30	; 48


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     972:	9f ef       	ldi	r25, 0xFF	; 255
     974:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     976:	77 9b       	sbis	0x0e, 7	; 14
     978:	fe cf       	rjmp	.-4      	; 0x976 <disk_ioctl+0x248>
	return SPDR;
     97a:	2f b1       	in	r18, 0x0f	; 15
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
     97c:	81 50       	subi	r24, 0x01	; 1
     97e:	d1 f7       	brne	.-12     	; 0x974 <disk_ioctl+0x246>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
     980:	2b 85       	ldd	r18, Y+11	; 0x0b
     982:	22 95       	swap	r18
     984:	2f 70       	andi	r18, 0x0F	; 15
     986:	80 e1       	ldi	r24, 0x10	; 16
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	a0 e0       	ldi	r26, 0x00	; 0
     98c:	b0 e0       	ldi	r27, 0x00	; 0
     98e:	04 c0       	rjmp	.+8      	; 0x998 <disk_ioctl+0x26a>
     990:	88 0f       	add	r24, r24
     992:	99 1f       	adc	r25, r25
     994:	aa 1f       	adc	r26, r26
     996:	bb 1f       	adc	r27, r27
     998:	2a 95       	dec	r18
     99a:	d2 f7       	brpl	.-12     	; 0x990 <disk_ioctl+0x262>
     99c:	55 c0       	rjmp	.+170    	; 0xa48 <disk_ioctl+0x31a>
						res = RES_OK;
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
     99e:	89 e0       	ldi	r24, 0x09	; 9
     9a0:	40 e0       	ldi	r20, 0x00	; 0
     9a2:	50 e0       	ldi	r21, 0x00	; 0
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     9ac:	88 23       	and	r24, r24
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <disk_ioctl+0x284>
     9b0:	94 c0       	rjmp	.+296    	; 0xada <disk_ioctl+0x3ac>
     9b2:	ce 01       	movw	r24, r28
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	60 e1       	ldi	r22, 0x10	; 16
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	0e 94 94 00 	call	0x128	; 0x128 <rcvr_datablock>
     9be:	89 2b       	or	r24, r25
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <disk_ioctl+0x296>
     9c2:	8b c0       	rjmp	.+278    	; 0xada <disk_ioctl+0x3ac>
     9c4:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c6:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDv1 */
     9c8:	f1 fe       	sbrs	r15, 1
     9ca:	1b c0       	rjmp	.+54     	; 0xa02 <disk_ioctl+0x2d4>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
     9cc:	88 1f       	adc	r24, r24
     9ce:	88 27       	eor	r24, r24
     9d0:	88 1f       	adc	r24, r24
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	24 2f       	mov	r18, r20
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	2f 73       	andi	r18, 0x3F	; 63
     9dc:	30 70       	andi	r19, 0x00	; 0
     9de:	22 0f       	add	r18, r18
     9e0:	33 1f       	adc	r19, r19
     9e2:	82 0f       	add	r24, r18
     9e4:	93 1f       	adc	r25, r19
     9e6:	2e 85       	ldd	r18, Y+14	; 0x0e
     9e8:	22 95       	swap	r18
     9ea:	26 95       	lsr	r18
     9ec:	26 95       	lsr	r18
     9ee:	23 70       	andi	r18, 0x03	; 3
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	21 50       	subi	r18, 0x01	; 1
     9f4:	30 40       	sbci	r19, 0x00	; 0
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <disk_ioctl+0x2ce>
     9f8:	88 0f       	add	r24, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	2a 95       	dec	r18
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <disk_ioctl+0x2ca>
     a00:	21 c0       	rjmp	.+66     	; 0xa44 <disk_ioctl+0x316>
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
     a02:	28 2f       	mov	r18, r24
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	23 70       	andi	r18, 0x03	; 3
     a08:	30 70       	andi	r19, 0x00	; 0
     a0a:	93 e0       	ldi	r25, 0x03	; 3
     a0c:	22 0f       	add	r18, r18
     a0e:	33 1f       	adc	r19, r19
     a10:	9a 95       	dec	r25
     a12:	e1 f7       	brne	.-8      	; 0xa0c <disk_ioctl+0x2de>
     a14:	82 95       	swap	r24
     a16:	86 95       	lsr	r24
     a18:	87 70       	andi	r24, 0x07	; 7
     a1a:	28 0f       	add	r18, r24
     a1c:	31 1d       	adc	r19, r1
     a1e:	2f 5f       	subi	r18, 0xFF	; 255
     a20:	3f 4f       	sbci	r19, 0xFF	; 255
     a22:	84 2f       	mov	r24, r20
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	8c 77       	andi	r24, 0x7C	; 124
     a28:	90 70       	andi	r25, 0x00	; 0
     a2a:	95 95       	asr	r25
     a2c:	87 95       	ror	r24
     a2e:	95 95       	asr	r25
     a30:	87 95       	ror	r24
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	ac 01       	movw	r20, r24
     a36:	24 9f       	mul	r18, r20
     a38:	c0 01       	movw	r24, r0
     a3a:	25 9f       	mul	r18, r21
     a3c:	90 0d       	add	r25, r0
     a3e:	34 9f       	mul	r19, r20
     a40:	90 0d       	add	r25, r0
     a42:	11 24       	eor	r1, r1
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	f8 01       	movw	r30, r16
     a4a:	80 83       	st	Z, r24
     a4c:	91 83       	std	Z+1, r25	; 0x01
     a4e:	a2 83       	std	Z+2, r26	; 0x02
     a50:	b3 83       	std	Z+3, r27	; 0x03
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	43 c0       	rjmp	.+134    	; 0xadc <disk_ioctl+0x3ae>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
     a56:	80 91 b4 02 	lds	r24, 0x02B4
     a5a:	fa 01       	movw	r30, r20
     a5c:	80 83       	st	Z, r24
     a5e:	f9 cf       	rjmp	.-14     	; 0xa52 <disk_ioctl+0x324>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
     a60:	89 e0       	ldi	r24, 0x09	; 9
     a62:	01 c0       	rjmp	.+2      	; 0xa66 <disk_ioctl+0x338>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
     a64:	8a e0       	ldi	r24, 0x0A	; 10
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     a72:	88 23       	and	r24, r24
     a74:	91 f5       	brne	.+100    	; 0xada <disk_ioctl+0x3ac>
     a76:	c8 01       	movw	r24, r16
     a78:	60 e1       	ldi	r22, 0x10	; 16
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	29 c0       	rjmp	.+82     	; 0xad0 <disk_ioctl+0x3a2>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
     a7e:	8a e3       	ldi	r24, 0x3A	; 58
     a80:	40 e0       	ldi	r20, 0x00	; 0
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     a8c:	88 23       	and	r24, r24
     a8e:	29 f5       	brne	.+74     	; 0xada <disk_ioctl+0x3ac>
     a90:	f8 01       	movw	r30, r16


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     a92:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
     a94:	98 01       	movw	r18, r16
     a96:	2d 5f       	subi	r18, 0xFD	; 253
     a98:	3f 4f       	sbci	r19, 0xFF	; 255


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     a9a:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     a9c:	77 9b       	sbis	0x0e, 7	; 14
     a9e:	fe cf       	rjmp	.-4      	; 0xa9c <disk_ioctl+0x36e>
	return SPDR;
     aa0:	8f b1       	in	r24, 0x0f	; 15
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
     aa2:	80 83       	st	Z, r24
     aa4:	e2 17       	cp	r30, r18
     aa6:	f3 07       	cpc	r31, r19
     aa8:	a1 f2       	breq	.-88     	; 0xa52 <disk_ioctl+0x324>
     aaa:	31 96       	adiw	r30, 0x01	; 1
     aac:	f6 cf       	rjmp	.-20     	; 0xa9a <disk_ioctl+0x36c>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
     aae:	8d e8       	ldi	r24, 0x8D	; 141
     ab0:	40 e0       	ldi	r20, 0x00	; 0
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     abc:	88 23       	and	r24, r24
     abe:	69 f4       	brne	.+26     	; 0xada <disk_ioctl+0x3ac>


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     ac0:	8f ef       	ldi	r24, 0xFF	; 255
     ac2:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     ac4:	77 9b       	sbis	0x0e, 7	; 14
     ac6:	fe cf       	rjmp	.-4      	; 0xac4 <disk_ioctl+0x396>
	return SPDR;
     ac8:	8f b1       	in	r24, 0x0f	; 15
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
     aca:	c8 01       	movw	r24, r16
     acc:	60 e4       	ldi	r22, 0x40	; 64
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	0e 94 94 00 	call	0x128	; 0x128 <rcvr_datablock>
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	89 2b       	or	r24, r25
     ad8:	09 f4       	brne	.+2      	; 0xadc <disk_ioctl+0x3ae>
     ada:	21 e0       	ldi	r18, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     adc:	c0 9a       	sbi	0x18, 0	; 24


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     ade:	8f ef       	ldi	r24, 0xFF	; 255
     ae0:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     ae2:	77 9b       	sbis	0x0e, 7	; 14
     ae4:	fe cf       	rjmp	.-4      	; 0xae2 <disk_ioctl+0x3b4>
	return SPDR;
     ae6:	8f b1       	in	r24, 0x0f	; 15
     ae8:	01 c0       	rjmp	.+2      	; 0xaec <disk_ioctl+0x3be>
     aea:	24 e0       	ldi	r18, 0x04	; 4

		deselect();
	}

	return res;
}
     aec:	82 2f       	mov	r24, r18
     aee:	60 96       	adiw	r28, 0x10	; 16
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	cd bf       	out	0x3d, r28	; 61
     afa:	cf 91       	pop	r28
     afc:	df 91       	pop	r29
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	08 95       	ret
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     b06:	c0 9a       	sbi	0x18, 0	; 24


static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     b08:	8f ef       	ldi	r24, 0xFF	; 255
     b0a:	8f b9       	out	0x0f, r24	; 15
     b0c:	9e ce       	rjmp	.-708    	; 0x84a <disk_ioctl+0x11c>

00000b0e <disk_timerproc>:
{
    static BYTE pv;
    BYTE n, s;
 
 
    n = Timer1; /* 100Hz decrement timer */
     b0e:	80 91 b2 02 	lds	r24, 0x02B2
    if (n) Timer1 = --n;
     b12:	88 23       	and	r24, r24
     b14:	19 f0       	breq	.+6      	; 0xb1c <disk_timerproc+0xe>
     b16:	81 50       	subi	r24, 0x01	; 1
     b18:	80 93 b2 02 	sts	0x02B2, r24
    n = Timer2;
     b1c:	80 91 b3 02 	lds	r24, 0x02B3
    if (n) Timer2 = --n;
     b20:	88 23       	and	r24, r24
     b22:	19 f0       	breq	.+6      	; 0xb2a <disk_timerproc+0x1c>
     b24:	81 50       	subi	r24, 0x01	; 1
     b26:	80 93 b3 02 	sts	0x02B3, r24
 
    s &= ~STA_NODISK;
    s &= ~STA_PROTECT;
 
    Stat = s;
     b2a:	10 92 74 00 	sts	0x0074, r1
}
     b2e:	08 95       	ret

00000b30 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	ec 01       	movw	r28, r24
     b3e:	7a 01       	movw	r14, r20
     b40:	8b 01       	movw	r16, r22
	clst -= 2;
     b42:	8e ef       	ldi	r24, 0xFE	; 254
     b44:	9f ef       	ldi	r25, 0xFF	; 255
     b46:	af ef       	ldi	r26, 0xFF	; 255
     b48:	bf ef       	ldi	r27, 0xFF	; 255
     b4a:	e8 0e       	add	r14, r24
     b4c:	f9 1e       	adc	r15, r25
     b4e:	0a 1f       	adc	r16, r26
     b50:	1b 1f       	adc	r17, r27
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     b52:	8e 89       	ldd	r24, Y+22	; 0x16
     b54:	9f 89       	ldd	r25, Y+23	; 0x17
     b56:	a8 8d       	ldd	r26, Y+24	; 0x18
     b58:	b9 8d       	ldd	r27, Y+25	; 0x19
     b5a:	02 97       	sbiw	r24, 0x02	; 2
     b5c:	a1 09       	sbc	r26, r1
     b5e:	b1 09       	sbc	r27, r1
     b60:	e8 16       	cp	r14, r24
     b62:	f9 06       	cpc	r15, r25
     b64:	0a 07       	cpc	r16, r26
     b66:	1b 07       	cpc	r17, r27
     b68:	28 f0       	brcs	.+10     	; 0xb74 <clust2sect+0x44>
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	12 c0       	rjmp	.+36     	; 0xb98 <clust2sect+0x68>
	return clst * fs->csize + fs->database;
     b74:	2a 81       	ldd	r18, Y+2	; 0x02
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e0       	ldi	r20, 0x00	; 0
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	c8 01       	movw	r24, r16
     b7e:	b7 01       	movw	r22, r14
     b80:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <__mulsi3>
     b84:	9b 01       	movw	r18, r22
     b86:	ac 01       	movw	r20, r24
     b88:	8e a1       	ldd	r24, Y+38	; 0x26
     b8a:	9f a1       	ldd	r25, Y+39	; 0x27
     b8c:	a8 a5       	ldd	r26, Y+40	; 0x28
     b8e:	b9 a5       	ldd	r27, Y+41	; 0x29
     b90:	28 0f       	add	r18, r24
     b92:	39 1f       	adc	r19, r25
     b94:	4a 1f       	adc	r20, r26
     b96:	5b 1f       	adc	r21, r27
}
     b98:	b9 01       	movw	r22, r18
     b9a:	ca 01       	movw	r24, r20
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	ff 90       	pop	r15
     ba6:	ef 90       	pop	r14
     ba8:	08 95       	ret

00000baa <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
     baa:	ef 92       	push	r14
     bac:	ff 92       	push	r15
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	fc 01       	movw	r30, r24
     bb8:	7b 01       	movw	r14, r22
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
     bba:	eb 01       	movw	r28, r22
     bbc:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
     bbe:	86 85       	ldd	r24, Z+14	; 0x0e
     bc0:	97 85       	ldd	r25, Z+15	; 0x0f
     bc2:	a0 89       	ldd	r26, Z+16	; 0x10
     bc4:	b1 89       	ldd	r27, Z+17	; 0x11
     bc6:	00 97       	sbiw	r24, 0x00	; 0
     bc8:	a1 05       	cpc	r26, r1
     bca:	b1 05       	cpc	r27, r1
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <get_fileinfo+0x26>
     bce:	71 c0       	rjmp	.+226    	; 0xcb2 <get_fileinfo+0x108>
		dir = dj->dir;
     bd0:	62 89       	ldd	r22, Z+18	; 0x12
     bd2:	73 89       	ldd	r23, Z+19	; 0x13
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
     bd8:	fb 01       	movw	r30, r22
     bda:	e8 0f       	add	r30, r24
     bdc:	f9 1f       	adc	r31, r25
     bde:	e0 81       	ld	r30, Z
			if (c == ' ') break;
     be0:	e0 32       	cpi	r30, 0x20	; 32
     be2:	41 f0       	breq	.+16     	; 0xbf4 <get_fileinfo+0x4a>
			if (c == NDDE) c = (TCHAR)DDE;
     be4:	e5 30       	cpi	r30, 0x05	; 5
     be6:	09 f4       	brne	.+2      	; 0xbea <get_fileinfo+0x40>
     be8:	e5 ee       	ldi	r30, 0xE5	; 229
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
     bea:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	88 30       	cpi	r24, 0x08	; 8
     bf0:	91 05       	cpc	r25, r1
     bf2:	91 f7       	brne	.-28     	; 0xbd8 <get_fileinfo+0x2e>
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
     bf4:	db 01       	movw	r26, r22
     bf6:	18 96       	adiw	r26, 0x08	; 8
     bf8:	8c 91       	ld	r24, X
     bfa:	80 32       	cpi	r24, 0x20	; 32
     bfc:	11 f4       	brne	.+4      	; 0xc02 <get_fileinfo+0x58>
     bfe:	8e 01       	movw	r16, r28
     c00:	12 c0       	rjmp	.+36     	; 0xc26 <get_fileinfo+0x7c>
			*p++ = '.';
     c02:	8e e2       	ldi	r24, 0x2E	; 46
     c04:	fe 01       	movw	r30, r28
     c06:	81 93       	st	Z+, r24
     c08:	8f 01       	movw	r16, r30
     c0a:	fb 01       	movw	r30, r22
			for (i = 8; i < 11; i++) {
     c0c:	9e 01       	movw	r18, r28
     c0e:	2c 5f       	subi	r18, 0xFC	; 252
     c10:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
     c12:	80 85       	ldd	r24, Z+8	; 0x08
				if (c == ' ') break;
     c14:	80 32       	cpi	r24, 0x20	; 32
     c16:	39 f0       	breq	.+14     	; 0xc26 <get_fileinfo+0x7c>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     c18:	d8 01       	movw	r26, r16
     c1a:	8d 93       	st	X+, r24
     c1c:	8d 01       	movw	r16, r26
     c1e:	31 96       	adiw	r30, 0x01	; 1
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
     c20:	a2 17       	cp	r26, r18
     c22:	b3 07       	cpc	r27, r19
     c24:	b1 f7       	brne	.-20     	; 0xc12 <get_fileinfo+0x68>
				if (!c) c = '?';
#endif
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     c26:	fb 01       	movw	r30, r22
     c28:	83 85       	ldd	r24, Z+11	; 0x0b
     c2a:	d7 01       	movw	r26, r14
     c2c:	18 96       	adiw	r26, 0x08	; 8
     c2e:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
     c30:	27 8d       	ldd	r18, Z+31	; 0x1f
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	50 e0       	ldi	r21, 0x00	; 0
     c38:	52 2f       	mov	r21, r18
     c3a:	44 27       	eor	r20, r20
     c3c:	33 27       	eor	r19, r19
     c3e:	22 27       	eor	r18, r18
     c40:	86 8d       	ldd	r24, Z+30	; 0x1e
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	a0 e0       	ldi	r26, 0x00	; 0
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	dc 01       	movw	r26, r24
     c4a:	99 27       	eor	r25, r25
     c4c:	88 27       	eor	r24, r24
     c4e:	28 2b       	or	r18, r24
     c50:	39 2b       	or	r19, r25
     c52:	4a 2b       	or	r20, r26
     c54:	5b 2b       	or	r21, r27
     c56:	84 8d       	ldd	r24, Z+28	; 0x1c
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	a0 e0       	ldi	r26, 0x00	; 0
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	28 2b       	or	r18, r24
     c60:	39 2b       	or	r19, r25
     c62:	4a 2b       	or	r20, r26
     c64:	5b 2b       	or	r21, r27
     c66:	95 8d       	ldd	r25, Z+29	; 0x1d
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	a0 e0       	ldi	r26, 0x00	; 0
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	28 2b       	or	r18, r24
     c70:	39 2b       	or	r19, r25
     c72:	4a 2b       	or	r20, r26
     c74:	5b 2b       	or	r21, r27
     c76:	f7 01       	movw	r30, r14
     c78:	20 83       	st	Z, r18
     c7a:	31 83       	std	Z+1, r19	; 0x01
     c7c:	42 83       	std	Z+2, r20	; 0x02
     c7e:	53 83       	std	Z+3, r21	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
     c80:	db 01       	movw	r26, r22
     c82:	59 96       	adiw	r26, 0x19	; 25
     c84:	9c 91       	ld	r25, X
     c86:	59 97       	sbiw	r26, 0x19	; 25
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	58 96       	adiw	r26, 0x18	; 24
     c8c:	2c 91       	ld	r18, X
     c8e:	58 97       	sbiw	r26, 0x18	; 24
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	82 2b       	or	r24, r18
     c94:	93 2b       	or	r25, r19
     c96:	95 83       	std	Z+5, r25	; 0x05
     c98:	84 83       	std	Z+4, r24	; 0x04
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
     c9a:	57 96       	adiw	r26, 0x17	; 23
     c9c:	9c 91       	ld	r25, X
     c9e:	57 97       	sbiw	r26, 0x17	; 23
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	56 96       	adiw	r26, 0x16	; 22
     ca4:	2c 91       	ld	r18, X
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	82 2b       	or	r24, r18
     caa:	93 2b       	or	r25, r19
     cac:	97 83       	std	Z+7, r25	; 0x07
     cae:	86 83       	std	Z+6, r24	; 0x06
     cb0:	e8 01       	movw	r28, r16
	}
	*p = 0;		/* Terminate SFN str by a \0 */
     cb2:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
	}
#endif
}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	08 95       	ret

00000cc2 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
     cc2:	db 01       	movw	r26, r22
	FATFS *rfs;


	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
     cc4:	88 23       	and	r24, r24
     cc6:	11 f0       	breq	.+4      	; 0xccc <f_mount+0xa>
     cc8:	8b e0       	ldi	r24, 0x0B	; 11
     cca:	08 95       	ret
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
     ccc:	e0 91 b5 02 	lds	r30, 0x02B5
     cd0:	f0 91 b6 02 	lds	r31, 0x02B6

	if (rfs) {
     cd4:	30 97       	sbiw	r30, 0x00	; 0
     cd6:	09 f0       	breq	.+2      	; 0xcda <f_mount+0x18>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
     cd8:	10 82       	st	Z, r1
	}

	if (fs) {
     cda:	10 97       	sbiw	r26, 0x00	; 0
     cdc:	09 f0       	breq	.+2      	; 0xce0 <f_mount+0x1e>
		fs->fs_type = 0;			/* Clear new fs object */
     cde:	1c 92       	st	X, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
     ce0:	b0 93 b6 02 	sts	0x02B6, r27
     ce4:	a0 93 b5 02 	sts	0x02B5, r26
     ce8:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
     cea:	08 95       	ret

00000cec <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
     cec:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	89 f0       	breq	.+34     	; 0xd14 <validate+0x28>
     cf2:	80 81       	ld	r24, Z
     cf4:	88 23       	and	r24, r24
     cf6:	71 f0       	breq	.+28     	; 0xd14 <validate+0x28>
     cf8:	86 81       	ldd	r24, Z+6	; 0x06
     cfa:	97 81       	ldd	r25, Z+7	; 0x07
     cfc:	86 17       	cp	r24, r22
     cfe:	97 07       	cpc	r25, r23
     d00:	49 f4       	brne	.+18     	; 0xd14 <validate+0x28>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
     d02:	81 81       	ldd	r24, Z+1	; 0x01
     d04:	0e 94 c8 02 	call	0x590	; 0x590 <disk_status>
     d08:	80 fd       	sbrc	r24, 0
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <validate+0x24>
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	08 95       	ret
     d10:	83 e0       	ldi	r24, 0x03	; 3
     d12:	08 95       	ret
     d14:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
     d16:	08 95       	ret

00000d18 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     d18:	0f 93       	push	r16
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	ec 01       	movw	r28, r24
     d20:	9a 01       	movw	r18, r20
     d22:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
     d24:	bc 01       	movw	r22, r24
     d26:	62 5d       	subi	r22, 0xD2	; 210
     d28:	7f 4f       	sbci	r23, 0xFF	; 255
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	01 e0       	ldi	r16, 0x01	; 1
     d2e:	0e 94 cf 02 	call	0x59e	; 0x59e <disk_read>
     d32:	88 23       	and	r24, r24
     d34:	11 f0       	breq	.+4      	; 0xd3a <check_fs+0x22>
     d36:	63 e0       	ldi	r22, 0x03	; 3
     d38:	6d c0       	rjmp	.+218    	; 0xe14 <check_fs+0xfc>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
     d3a:	c3 5d       	subi	r28, 0xD3	; 211
     d3c:	dd 4f       	sbci	r29, 0xFD	; 253
     d3e:	98 81       	ld	r25, Y
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	2a 91       	ld	r18, -Y
     d44:	cc 52       	subi	r28, 0x2C	; 44
     d46:	d2 40       	sbci	r29, 0x02	; 2
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	82 2b       	or	r24, r18
     d4c:	93 2b       	or	r25, r19
     d4e:	85 55       	subi	r24, 0x55	; 85
     d50:	9a 4a       	sbci	r25, 0xAA	; 170
     d52:	11 f0       	breq	.+4      	; 0xd58 <check_fs+0x40>
     d54:	62 e0       	ldi	r22, 0x02	; 2
     d56:	5e c0       	rjmp	.+188    	; 0xe14 <check_fs+0xfc>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     d58:	c9 59       	subi	r28, 0x99	; 153
     d5a:	df 4f       	sbci	r29, 0xFF	; 255
     d5c:	28 81       	ld	r18, Y
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e0       	ldi	r20, 0x00	; 0
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	52 2f       	mov	r21, r18
     d66:	44 27       	eor	r20, r20
     d68:	33 27       	eor	r19, r19
     d6a:	22 27       	eor	r18, r18
     d6c:	8a 91       	ld	r24, -Y
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	a0 e0       	ldi	r26, 0x00	; 0
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	dc 01       	movw	r26, r24
     d76:	99 27       	eor	r25, r25
     d78:	88 27       	eor	r24, r24
     d7a:	28 2b       	or	r18, r24
     d7c:	39 2b       	or	r19, r25
     d7e:	4a 2b       	or	r20, r26
     d80:	5b 2b       	or	r21, r27
     d82:	22 97       	sbiw	r28, 0x02	; 2
     d84:	89 91       	ld	r24, Y+
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	a0 e0       	ldi	r26, 0x00	; 0
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	28 2b       	or	r18, r24
     d8e:	39 2b       	or	r19, r25
     d90:	4a 2b       	or	r20, r26
     d92:	5b 2b       	or	r21, r27
     d94:	98 81       	ld	r25, Y
     d96:	c5 56       	subi	r28, 0x65	; 101
     d98:	d0 40       	sbci	r29, 0x00	; 0
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	a0 e0       	ldi	r26, 0x00	; 0
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	28 2b       	or	r18, r24
     da2:	39 2b       	or	r19, r25
     da4:	4a 2b       	or	r20, r26
     da6:	5b 2b       	or	r21, r27
     da8:	50 70       	andi	r21, 0x00	; 0
     daa:	26 54       	subi	r18, 0x46	; 70
     dac:	31 44       	sbci	r19, 0x41	; 65
     dae:	44 45       	sbci	r20, 0x54	; 84
     db0:	50 40       	sbci	r21, 0x00	; 0
     db2:	11 f4       	brne	.+4      	; 0xdb8 <check_fs+0xa0>
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	2e c0       	rjmp	.+92     	; 0xe14 <check_fs+0xfc>
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	cd 57       	subi	r28, 0x7D	; 125
     dbc:	df 4f       	sbci	r29, 0xFF	; 255
     dbe:	28 81       	ld	r18, Y
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	52 2f       	mov	r21, r18
     dc8:	44 27       	eor	r20, r20
     dca:	33 27       	eor	r19, r19
     dcc:	22 27       	eor	r18, r18
     dce:	8a 91       	ld	r24, -Y
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	a0 e0       	ldi	r26, 0x00	; 0
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	dc 01       	movw	r26, r24
     dd8:	99 27       	eor	r25, r25
     dda:	88 27       	eor	r24, r24
     ddc:	28 2b       	or	r18, r24
     dde:	39 2b       	or	r19, r25
     de0:	4a 2b       	or	r20, r26
     de2:	5b 2b       	or	r21, r27
     de4:	22 97       	sbiw	r28, 0x02	; 2
     de6:	89 91       	ld	r24, Y+
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	a0 e0       	ldi	r26, 0x00	; 0
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	28 2b       	or	r18, r24
     df0:	39 2b       	or	r19, r25
     df2:	4a 2b       	or	r20, r26
     df4:	5b 2b       	or	r21, r27
     df6:	98 81       	ld	r25, Y
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	a0 e0       	ldi	r26, 0x00	; 0
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	28 2b       	or	r18, r24
     e00:	39 2b       	or	r19, r25
     e02:	4a 2b       	or	r20, r26
     e04:	5b 2b       	or	r21, r27
     e06:	50 70       	andi	r21, 0x00	; 0
     e08:	26 54       	subi	r18, 0x46	; 70
     e0a:	31 44       	sbci	r19, 0x41	; 65
     e0c:	44 45       	sbci	r20, 0x54	; 84
     e0e:	50 40       	sbci	r21, 0x00	; 0
     e10:	09 f0       	breq	.+2      	; 0xe14 <check_fs+0xfc>
     e12:	61 e0       	ldi	r22, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
     e14:	86 2f       	mov	r24, r22
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	0f 91       	pop	r16
     e1c:	08 95       	ret

00000e1e <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
     e1e:	2f 92       	push	r2
     e20:	3f 92       	push	r3
     e22:	4f 92       	push	r4
     e24:	5f 92       	push	r5
     e26:	6f 92       	push	r6
     e28:	7f 92       	push	r7
     e2a:	8f 92       	push	r8
     e2c:	9f 92       	push	r9
     e2e:	af 92       	push	r10
     e30:	bf 92       	push	r11
     e32:	cf 92       	push	r12
     e34:	df 92       	push	r13
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	2a 97       	sbiw	r28, 0x0a	; 10
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	dc 01       	movw	r26, r24
     e54:	14 2f       	mov	r17, r20
	BYTE fmt, b, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
     e56:	ed 91       	ld	r30, X+
     e58:	fc 91       	ld	r31, X
     e5a:	11 97       	sbiw	r26, 0x01	; 1
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
     e5c:	80 81       	ld	r24, Z
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	20 53       	subi	r18, 0x30	; 48
     e64:	30 40       	sbci	r19, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
     e66:	2a 30       	cpi	r18, 0x0A	; 10
     e68:	31 05       	cpc	r19, r1
     e6a:	50 f4       	brcc	.+20     	; 0xe80 <chk_mounted+0x62>
     e6c:	81 81       	ldd	r24, Z+1	; 0x01
     e6e:	8a 33       	cpi	r24, 0x3A	; 58
     e70:	39 f4       	brne	.+14     	; 0xe80 <chk_mounted+0x62>
		p += 2; *path = p;				/* Return pointer to the path name */
     e72:	32 96       	adiw	r30, 0x02	; 2
     e74:	ed 93       	st	X+, r30
     e76:	fc 93       	st	X, r31
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
     e78:	23 2b       	or	r18, r19
     e7a:	11 f0       	breq	.+4      	; 0xe80 <chk_mounted+0x62>
     e7c:	8b e0       	ldi	r24, 0x0B	; 11
     e7e:	8e c3       	rjmp	.+1820   	; 0x159c <chk_mounted+0x77e>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
     e80:	20 91 b5 02 	lds	r18, 0x02B5
     e84:	30 91 b6 02 	lds	r19, 0x02B6
     e88:	3a 87       	std	Y+10, r19	; 0x0a
     e8a:	29 87       	std	Y+9, r18	; 0x09
     e8c:	db 01       	movw	r26, r22
     e8e:	2d 93       	st	X+, r18
     e90:	3c 93       	st	X, r19
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     e92:	23 2b       	or	r18, r19
     e94:	11 f4       	brne	.+4      	; 0xe9a <chk_mounted+0x7c>
     e96:	8c e0       	ldi	r24, 0x0C	; 12
     e98:	81 c3       	rjmp	.+1794   	; 0x159c <chk_mounted+0x77e>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
     e9a:	e9 85       	ldd	r30, Y+9	; 0x09
     e9c:	fa 85       	ldd	r31, Y+10	; 0x0a
     e9e:	80 81       	ld	r24, Z
     ea0:	88 23       	and	r24, r24
     ea2:	59 f0       	breq	.+22     	; 0xeba <chk_mounted+0x9c>
		stat = disk_status(fs->drv);
     ea4:	81 81       	ldd	r24, Z+1	; 0x01
     ea6:	0e 94 c8 02 	call	0x590	; 0x590 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
     eaa:	80 fd       	sbrc	r24, 0
     eac:	06 c0       	rjmp	.+12     	; 0xeba <chk_mounted+0x9c>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
     eae:	11 23       	and	r17, r17
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <chk_mounted+0x96>
     eb2:	71 c3       	rjmp	.+1762   	; 0x1596 <chk_mounted+0x778>
     eb4:	82 fd       	sbrc	r24, 2
     eb6:	6d c3       	rjmp	.+1754   	; 0x1592 <chk_mounted+0x774>
     eb8:	6e c3       	rjmp	.+1756   	; 0x1596 <chk_mounted+0x778>
	}

	/* The logical drive must be mounted. */
	/* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
     eba:	a9 85       	ldd	r26, Y+9	; 0x09
     ebc:	ba 85       	ldd	r27, Y+10	; 0x0a
     ebe:	1c 92       	st	X, r1
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
     ec0:	11 96       	adiw	r26, 0x01	; 1
     ec2:	1c 92       	st	X, r1
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	0e 94 94 01 	call	0x328	; 0x328 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
     eca:	80 ff       	sbrs	r24, 0
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <chk_mounted+0xb4>
     ece:	83 e0       	ldi	r24, 0x03	; 3
     ed0:	65 c3       	rjmp	.+1738   	; 0x159c <chk_mounted+0x77e>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
     ed2:	11 23       	and	r17, r17
     ed4:	11 f0       	breq	.+4      	; 0xeda <chk_mounted+0xbc>
     ed6:	82 fd       	sbrc	r24, 2
     ed8:	5c c3       	rjmp	.+1720   	; 0x1592 <chk_mounted+0x774>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
     eda:	89 85       	ldd	r24, Y+9	; 0x09
     edc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	0e 94 8c 06 	call	0xd18	; 0xd18 <check_fs>
	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	21 f0       	breq	.+8      	; 0xef6 <chk_mounted+0xd8>
     eee:	22 24       	eor	r2, r2
     ef0:	33 24       	eor	r3, r3
     ef2:	21 01       	movw	r4, r2
     ef4:	31 c0       	rjmp	.+98     	; 0xf58 <chk_mounted+0x13a>
		/* Check the partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * SZ_PTE];/* Partition table */
     ef6:	e9 85       	ldd	r30, Y+9	; 0x09
     ef8:	fa 85       	ldd	r31, Y+10	; 0x0a
     efa:	e4 51       	subi	r30, 0x14	; 20
     efc:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {									/* Is the partition existing? */
     efe:	84 81       	ldd	r24, Z+4	; 0x04
     f00:	88 23       	and	r24, r24
     f02:	09 f4       	brne	.+2      	; 0xf06 <chk_mounted+0xe8>
     f04:	4a c3       	rjmp	.+1684   	; 0x159a <chk_mounted+0x77c>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
     f06:	83 85       	ldd	r24, Z+11	; 0x0b
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	a0 e0       	ldi	r26, 0x00	; 0
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	58 2e       	mov	r5, r24
     f10:	44 24       	eor	r4, r4
     f12:	33 24       	eor	r3, r3
     f14:	22 24       	eor	r2, r2
     f16:	82 85       	ldd	r24, Z+10	; 0x0a
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	a0 e0       	ldi	r26, 0x00	; 0
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	dc 01       	movw	r26, r24
     f20:	99 27       	eor	r25, r25
     f22:	88 27       	eor	r24, r24
     f24:	28 2a       	or	r2, r24
     f26:	39 2a       	or	r3, r25
     f28:	4a 2a       	or	r4, r26
     f2a:	5b 2a       	or	r5, r27
     f2c:	80 85       	ldd	r24, Z+8	; 0x08
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	a0 e0       	ldi	r26, 0x00	; 0
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	28 2a       	or	r2, r24
     f36:	39 2a       	or	r3, r25
     f38:	4a 2a       	or	r4, r26
     f3a:	5b 2a       	or	r5, r27
     f3c:	91 85       	ldd	r25, Z+9	; 0x09
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	a0 e0       	ldi	r26, 0x00	; 0
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	28 2a       	or	r2, r24
     f46:	39 2a       	or	r3, r25
     f48:	4a 2a       	or	r4, r26
     f4a:	5b 2a       	or	r5, r27
			fmt = check_fs(fs, bsect);					/* Check the partition */
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f50:	b2 01       	movw	r22, r4
     f52:	a1 01       	movw	r20, r2
     f54:	0e 94 8c 06 	call	0xd18	; 0xd18 <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
     f58:	83 30       	cpi	r24, 0x03	; 3
     f5a:	11 f4       	brne	.+4      	; 0xf60 <chk_mounted+0x142>
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	1e c3       	rjmp	.+1596   	; 0x159c <chk_mounted+0x77e>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
     f60:	88 23       	and	r24, r24
     f62:	09 f0       	breq	.+2      	; 0xf66 <chk_mounted+0x148>
     f64:	1a c3       	rjmp	.+1588   	; 0x159a <chk_mounted+0x77c>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
     f66:	e9 85       	ldd	r30, Y+9	; 0x09
     f68:	fa 85       	ldd	r31, Y+10	; 0x0a
     f6a:	92 ad       	ldd	r25, Z+58	; 0x3a
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	21 ad       	ldd	r18, Z+57	; 0x39
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	82 2b       	or	r24, r18
     f74:	93 2b       	or	r25, r19
     f76:	80 50       	subi	r24, 0x00	; 0
     f78:	92 40       	sbci	r25, 0x02	; 2
     f7a:	09 f0       	breq	.+2      	; 0xf7e <chk_mounted+0x160>
     f7c:	0e c3       	rjmp	.+1564   	; 0x159a <chk_mounted+0x77c>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
     f7e:	29 85       	ldd	r18, Y+9	; 0x09
     f80:	3a 85       	ldd	r19, Y+10	; 0x0a
     f82:	2b 5b       	subi	r18, 0xBB	; 187
     f84:	3f 4f       	sbci	r19, 0xFF	; 255
     f86:	d9 01       	movw	r26, r18
     f88:	9c 91       	ld	r25, X
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	2e 91       	ld	r18, -X
     f8e:	a4 54       	subi	r26, 0x44	; 68
     f90:	b0 40       	sbci	r27, 0x00	; 0
     f92:	ba 87       	std	Y+10, r27	; 0x0a
     f94:	a9 87       	std	Y+9, r26	; 0x09
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	82 2b       	or	r24, r18
     f9a:	93 2b       	or	r25, r19
     f9c:	4c 01       	movw	r8, r24
     f9e:	aa 24       	eor	r10, r10
     fa0:	bb 24       	eor	r11, r11
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
     fa2:	81 14       	cp	r8, r1
     fa4:	91 04       	cpc	r9, r1
     fa6:	a1 04       	cpc	r10, r1
     fa8:	b1 04       	cpc	r11, r1
     faa:	71 f5       	brne	.+92     	; 0x1008 <chk_mounted+0x1ea>
     fac:	ab 5a       	subi	r26, 0xAB	; 171
     fae:	bf 4f       	sbci	r27, 0xFF	; 255
     fb0:	ba 87       	std	Y+10, r27	; 0x0a
     fb2:	a9 87       	std	Y+9, r26	; 0x09
     fb4:	8c 91       	ld	r24, X
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a0 e0       	ldi	r26, 0x00	; 0
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	b8 2e       	mov	r11, r24
     fbe:	aa 24       	eor	r10, r10
     fc0:	99 24       	eor	r9, r9
     fc2:	88 24       	eor	r8, r8
     fc4:	e9 85       	ldd	r30, Y+9	; 0x09
     fc6:	fa 85       	ldd	r31, Y+10	; 0x0a
     fc8:	82 91       	ld	r24, -Z
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	a0 e0       	ldi	r26, 0x00	; 0
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	dc 01       	movw	r26, r24
     fd2:	99 27       	eor	r25, r25
     fd4:	88 27       	eor	r24, r24
     fd6:	88 2a       	or	r8, r24
     fd8:	99 2a       	or	r9, r25
     fda:	aa 2a       	or	r10, r26
     fdc:	bb 2a       	or	r11, r27
     fde:	32 97       	sbiw	r30, 0x02	; 2
     fe0:	81 91       	ld	r24, Z+
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a0 e0       	ldi	r26, 0x00	; 0
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	88 2a       	or	r8, r24
     fea:	99 2a       	or	r9, r25
     fec:	aa 2a       	or	r10, r26
     fee:	bb 2a       	or	r11, r27
     ff0:	90 81       	ld	r25, Z
     ff2:	e3 55       	subi	r30, 0x53	; 83
     ff4:	f0 40       	sbci	r31, 0x00	; 0
     ff6:	fa 87       	std	Y+10, r31	; 0x0a
     ff8:	e9 87       	std	Y+9, r30	; 0x09
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	a0 e0       	ldi	r26, 0x00	; 0
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	88 2a       	or	r8, r24
    1002:	99 2a       	or	r9, r25
    1004:	aa 2a       	or	r10, r26
    1006:	bb 2a       	or	r11, r27
	fs->fsize = fasize;
    1008:	a9 85       	ldd	r26, Y+9	; 0x09
    100a:	ba 85       	ldd	r27, Y+10	; 0x0a
    100c:	5a 96       	adiw	r26, 0x1a	; 26
    100e:	8d 92       	st	X+, r8
    1010:	9d 92       	st	X+, r9
    1012:	ad 92       	st	X+, r10
    1014:	bc 92       	st	X, r11
    1016:	5d 97       	sbiw	r26, 0x1d	; 29

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    1018:	de 96       	adiw	r26, 0x3e	; 62
    101a:	4c 91       	ld	r20, X
    101c:	de 97       	sbiw	r26, 0x3e	; 62
    101e:	13 96       	adiw	r26, 0x03	; 3
    1020:	4c 93       	st	X, r20
    1022:	13 97       	sbiw	r26, 0x03	; 3
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    1024:	84 2f       	mov	r24, r20
    1026:	81 50       	subi	r24, 0x01	; 1
    1028:	82 30       	cpi	r24, 0x02	; 2
    102a:	08 f0       	brcs	.+2      	; 0x102e <chk_mounted+0x210>
    102c:	b6 c2       	rjmp	.+1388   	; 0x159a <chk_mounted+0x77c>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    102e:	db 96       	adiw	r26, 0x3b	; 59
    1030:	2c 91       	ld	r18, X
    1032:	db 97       	sbiw	r26, 0x3b	; 59
    1034:	12 96       	adiw	r26, 0x02	; 2
    1036:	2c 93       	st	X, r18
    1038:	12 97       	sbiw	r26, 0x02	; 2
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    103a:	22 23       	and	r18, r18
    103c:	09 f4       	brne	.+2      	; 0x1040 <chk_mounted+0x222>
    103e:	ad c2       	rjmp	.+1370   	; 0x159a <chk_mounted+0x77c>
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	c9 01       	movw	r24, r18
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	82 23       	and	r24, r18
    1048:	93 23       	and	r25, r19
    104a:	89 2b       	or	r24, r25
    104c:	09 f0       	breq	.+2      	; 0x1050 <chk_mounted+0x232>
    104e:	a5 c2       	rjmp	.+1354   	; 0x159a <chk_mounted+0x77c>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    1050:	a0 5c       	subi	r26, 0xC0	; 192
    1052:	bf 4f       	sbci	r27, 0xFF	; 255
    1054:	9c 91       	ld	r25, X
    1056:	a0 54       	subi	r26, 0x40	; 64
    1058:	b0 40       	sbci	r27, 0x00	; 0
    105a:	ba 87       	std	Y+10, r27	; 0x0a
    105c:	a9 87       	std	Y+9, r26	; 0x09
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	df 96       	adiw	r26, 0x3f	; 63
    1062:	2c 91       	ld	r18, X
    1064:	df 97       	sbiw	r26, 0x3f	; 63
    1066:	62 2e       	mov	r6, r18
    1068:	77 24       	eor	r7, r7
    106a:	68 2a       	or	r6, r24
    106c:	79 2a       	or	r7, r25
    106e:	19 96       	adiw	r26, 0x09	; 9
    1070:	7c 92       	st	X, r7
    1072:	6e 92       	st	-X, r6
    1074:	18 97       	sbiw	r26, 0x08	; 8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    1076:	c3 01       	movw	r24, r6
    1078:	8f 70       	andi	r24, 0x0F	; 15
    107a:	90 70       	andi	r25, 0x00	; 0
    107c:	89 2b       	or	r24, r25
    107e:	09 f0       	breq	.+2      	; 0x1082 <chk_mounted+0x264>
    1080:	8c c2       	rjmp	.+1304   	; 0x159a <chk_mounted+0x77c>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    1082:	ae 5b       	subi	r26, 0xBE	; 190
    1084:	bf 4f       	sbci	r27, 0xFF	; 255
    1086:	9c 91       	ld	r25, X
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	2e 91       	ld	r18, -X
    108c:	a1 54       	subi	r26, 0x41	; 65
    108e:	b0 40       	sbci	r27, 0x00	; 0
    1090:	ba 87       	std	Y+10, r27	; 0x0a
    1092:	a9 87       	std	Y+9, r26	; 0x09
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	82 2b       	or	r24, r18
    1098:	93 2b       	or	r25, r19
    109a:	7c 01       	movw	r14, r24
    109c:	00 e0       	ldi	r16, 0x00	; 0
    109e:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    10a0:	e1 14       	cp	r14, r1
    10a2:	f1 04       	cpc	r15, r1
    10a4:	01 05       	cpc	r16, r1
    10a6:	11 05       	cpc	r17, r1
    10a8:	71 f5       	brne	.+92     	; 0x1106 <chk_mounted+0x2e8>
    10aa:	af 5a       	subi	r26, 0xAF	; 175
    10ac:	bf 4f       	sbci	r27, 0xFF	; 255
    10ae:	ba 87       	std	Y+10, r27	; 0x0a
    10b0:	a9 87       	std	Y+9, r26	; 0x09
    10b2:	8c 91       	ld	r24, X
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	a0 e0       	ldi	r26, 0x00	; 0
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	18 2f       	mov	r17, r24
    10bc:	00 27       	eor	r16, r16
    10be:	ff 24       	eor	r15, r15
    10c0:	ee 24       	eor	r14, r14
    10c2:	e9 85       	ldd	r30, Y+9	; 0x09
    10c4:	fa 85       	ldd	r31, Y+10	; 0x0a
    10c6:	82 91       	ld	r24, -Z
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	a0 e0       	ldi	r26, 0x00	; 0
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	dc 01       	movw	r26, r24
    10d0:	99 27       	eor	r25, r25
    10d2:	88 27       	eor	r24, r24
    10d4:	e8 2a       	or	r14, r24
    10d6:	f9 2a       	or	r15, r25
    10d8:	0a 2b       	or	r16, r26
    10da:	1b 2b       	or	r17, r27
    10dc:	32 97       	sbiw	r30, 0x02	; 2
    10de:	81 91       	ld	r24, Z+
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	a0 e0       	ldi	r26, 0x00	; 0
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e8 2a       	or	r14, r24
    10e8:	f9 2a       	or	r15, r25
    10ea:	0a 2b       	or	r16, r26
    10ec:	1b 2b       	or	r17, r27
    10ee:	90 81       	ld	r25, Z
    10f0:	ef 54       	subi	r30, 0x4F	; 79
    10f2:	f0 40       	sbci	r31, 0x00	; 0
    10f4:	fa 87       	std	Y+10, r31	; 0x0a
    10f6:	e9 87       	std	Y+9, r30	; 0x09
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	a0 e0       	ldi	r26, 0x00	; 0
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e8 2a       	or	r14, r24
    1100:	f9 2a       	or	r15, r25
    1102:	0a 2b       	or	r16, r26
    1104:	1b 2b       	or	r17, r27

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    1106:	a9 85       	ldd	r26, Y+9	; 0x09
    1108:	ba 85       	ldd	r27, Y+10	; 0x0a
    110a:	dd 96       	adiw	r26, 0x3d	; 61
    110c:	9c 91       	ld	r25, X
    110e:	dd 97       	sbiw	r26, 0x3d	; 61
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	dc 96       	adiw	r26, 0x3c	; 60
    1114:	2c 91       	ld	r18, X
    1116:	c2 2e       	mov	r12, r18
    1118:	dd 24       	eor	r13, r13
    111a:	c8 2a       	or	r12, r24
    111c:	d9 2a       	or	r13, r25
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    111e:	c1 14       	cp	r12, r1
    1120:	d1 04       	cpc	r13, r1
    1122:	09 f4       	brne	.+2      	; 0x1126 <chk_mounted+0x308>
    1124:	3a c2       	rjmp	.+1140   	; 0x159a <chk_mounted+0x77c>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    1126:	24 2f       	mov	r18, r20
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	c5 01       	movw	r24, r10
    1130:	b4 01       	movw	r22, r8
    1132:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <__mulsi3>
    1136:	69 83       	std	Y+1, r22	; 0x01
    1138:	7a 83       	std	Y+2, r23	; 0x02
    113a:	8b 83       	std	Y+3, r24	; 0x03
    113c:	9c 83       	std	Y+4, r25	; 0x04

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    113e:	96 01       	movw	r18, r12
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	2d 83       	std	Y+5, r18	; 0x05
    1146:	3e 83       	std	Y+6, r19	; 0x06
    1148:	4f 83       	std	Y+7, r20	; 0x07
    114a:	58 87       	std	Y+8, r21	; 0x08
    114c:	e4 e0       	ldi	r30, 0x04	; 4
    114e:	76 94       	lsr	r7
    1150:	67 94       	ror	r6
    1152:	ea 95       	dec	r30
    1154:	e1 f7       	brne	.-8      	; 0x114e <chk_mounted+0x330>
    1156:	53 01       	movw	r10, r6
    1158:	cc 24       	eor	r12, r12
    115a:	dd 24       	eor	r13, r13
    115c:	a2 0e       	add	r10, r18
    115e:	b3 1e       	adc	r11, r19
    1160:	c4 1e       	adc	r12, r20
    1162:	d5 1e       	adc	r13, r21
    1164:	a6 0e       	add	r10, r22
    1166:	b7 1e       	adc	r11, r23
    1168:	c8 1e       	adc	r12, r24
    116a:	d9 1e       	adc	r13, r25
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    116c:	ea 14       	cp	r14, r10
    116e:	fb 04       	cpc	r15, r11
    1170:	0c 05       	cpc	r16, r12
    1172:	1d 05       	cpc	r17, r13
    1174:	08 f4       	brcc	.+2      	; 0x1178 <chk_mounted+0x35a>
    1176:	11 c2       	rjmp	.+1058   	; 0x159a <chk_mounted+0x77c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    1178:	ea 18       	sub	r14, r10
    117a:	fb 08       	sbc	r15, r11
    117c:	0c 09       	sbc	r16, r12
    117e:	1d 09       	sbc	r17, r13
    1180:	a9 85       	ldd	r26, Y+9	; 0x09
    1182:	ba 85       	ldd	r27, Y+10	; 0x0a
    1184:	12 96       	adiw	r26, 0x02	; 2
    1186:	2c 91       	ld	r18, X
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 e0       	ldi	r20, 0x00	; 0
    118c:	50 e0       	ldi	r21, 0x00	; 0
    118e:	c8 01       	movw	r24, r16
    1190:	b7 01       	movw	r22, r14
    1192:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <__udivmodsi4>
    1196:	c9 01       	movw	r24, r18
    1198:	da 01       	movw	r26, r20
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	a1 05       	cpc	r26, r1
    119e:	b1 05       	cpc	r27, r1
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <chk_mounted+0x386>
    11a2:	fb c1       	rjmp	.+1014   	; 0x159a <chk_mounted+0x77c>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    11a4:	86 3f       	cpi	r24, 0xF6	; 246
    11a6:	ef e0       	ldi	r30, 0x0F	; 15
    11a8:	9e 07       	cpc	r25, r30
    11aa:	e0 e0       	ldi	r30, 0x00	; 0
    11ac:	ae 07       	cpc	r26, r30
    11ae:	e0 e0       	ldi	r30, 0x00	; 0
    11b0:	be 07       	cpc	r27, r30
    11b2:	18 f4       	brcc	.+6      	; 0x11ba <chk_mounted+0x39c>
    11b4:	99 24       	eor	r9, r9
    11b6:	93 94       	inc	r9
    11b8:	0d c0       	rjmp	.+26     	; 0x11d4 <chk_mounted+0x3b6>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    11ba:	86 3f       	cpi	r24, 0xF6	; 246
    11bc:	ff ef       	ldi	r31, 0xFF	; 255
    11be:	9f 07       	cpc	r25, r31
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	af 07       	cpc	r26, r31
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	bf 07       	cpc	r27, r31
    11c8:	18 f0       	brcs	.+6      	; 0x11d0 <chk_mounted+0x3b2>
    11ca:	23 e0       	ldi	r18, 0x03	; 3
    11cc:	92 2e       	mov	r9, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <chk_mounted+0x3b6>
    11d0:	02 e0       	ldi	r16, 0x02	; 2
    11d2:	90 2e       	mov	r9, r16

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    11d4:	12 e0       	ldi	r17, 0x02	; 2
    11d6:	e1 2e       	mov	r14, r17
    11d8:	f1 2c       	mov	r15, r1
    11da:	01 2d       	mov	r16, r1
    11dc:	11 2d       	mov	r17, r1
    11de:	e8 0e       	add	r14, r24
    11e0:	f9 1e       	adc	r15, r25
    11e2:	0a 1f       	adc	r16, r26
    11e4:	1b 1f       	adc	r17, r27
    11e6:	a9 85       	ldd	r26, Y+9	; 0x09
    11e8:	ba 85       	ldd	r27, Y+10	; 0x0a
    11ea:	56 96       	adiw	r26, 0x16	; 22
    11ec:	ed 92       	st	X+, r14
    11ee:	fd 92       	st	X+, r15
    11f0:	0d 93       	st	X+, r16
    11f2:	1c 93       	st	X, r17
    11f4:	59 97       	sbiw	r26, 0x19	; 25
	fs->database = bsect + sysect;						/* Data start sector */
    11f6:	a2 0c       	add	r10, r2
    11f8:	b3 1c       	adc	r11, r3
    11fa:	c4 1c       	adc	r12, r4
    11fc:	d5 1c       	adc	r13, r5
    11fe:	fd 01       	movw	r30, r26
    1200:	a6 a2       	std	Z+38, r10	; 0x26
    1202:	b7 a2       	std	Z+39, r11	; 0x27
    1204:	c0 a6       	std	Z+40, r12	; 0x28
    1206:	d1 a6       	std	Z+41, r13	; 0x29
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    1208:	2d 81       	ldd	r18, Y+5	; 0x05
    120a:	3e 81       	ldd	r19, Y+6	; 0x06
    120c:	4f 81       	ldd	r20, Y+7	; 0x07
    120e:	58 85       	ldd	r21, Y+8	; 0x08
    1210:	22 0d       	add	r18, r2
    1212:	33 1d       	adc	r19, r3
    1214:	44 1d       	adc	r20, r4
    1216:	55 1d       	adc	r21, r5
    1218:	5e 96       	adiw	r26, 0x1e	; 30
    121a:	2d 93       	st	X+, r18
    121c:	3d 93       	st	X+, r19
    121e:	4d 93       	st	X+, r20
    1220:	5c 93       	st	X, r21
    1222:	91 97       	sbiw	r26, 0x21	; 33
    1224:	18 96       	adiw	r26, 0x08	; 8
    1226:	8d 91       	ld	r24, X+
    1228:	9c 91       	ld	r25, X
    122a:	19 97       	sbiw	r26, 0x09	; 9
	if (fmt == FS_FAT32) {
    122c:	b3 e0       	ldi	r27, 0x03	; 3
    122e:	9b 16       	cp	r9, r27
    1230:	d9 f5       	brne	.+118    	; 0x12a8 <chk_mounted+0x48a>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    1232:	89 2b       	or	r24, r25
    1234:	09 f0       	breq	.+2      	; 0x1238 <chk_mounted+0x41a>
    1236:	b1 c1       	rjmp	.+866    	; 0x159a <chk_mounted+0x77c>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    1238:	e3 5a       	subi	r30, 0xA3	; 163
    123a:	ff 4f       	sbci	r31, 0xFF	; 255
    123c:	20 81       	ld	r18, Z
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	52 2f       	mov	r21, r18
    1246:	44 27       	eor	r20, r20
    1248:	33 27       	eor	r19, r19
    124a:	22 27       	eor	r18, r18
    124c:	82 91       	ld	r24, -Z
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	a0 e0       	ldi	r26, 0x00	; 0
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	dc 01       	movw	r26, r24
    1256:	99 27       	eor	r25, r25
    1258:	88 27       	eor	r24, r24
    125a:	28 2b       	or	r18, r24
    125c:	39 2b       	or	r19, r25
    125e:	4a 2b       	or	r20, r26
    1260:	5b 2b       	or	r21, r27
    1262:	32 97       	sbiw	r30, 0x02	; 2
    1264:	81 91       	ld	r24, Z+
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	a0 e0       	ldi	r26, 0x00	; 0
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	28 2b       	or	r18, r24
    126e:	39 2b       	or	r19, r25
    1270:	4a 2b       	or	r20, r26
    1272:	5b 2b       	or	r21, r27
    1274:	90 81       	ld	r25, Z
    1276:	eb 55       	subi	r30, 0x5B	; 91
    1278:	f0 40       	sbci	r31, 0x00	; 0
    127a:	fa 87       	std	Y+10, r31	; 0x0a
    127c:	e9 87       	std	Y+9, r30	; 0x09
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	a0 e0       	ldi	r26, 0x00	; 0
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	28 2b       	or	r18, r24
    1286:	39 2b       	or	r19, r25
    1288:	4a 2b       	or	r20, r26
    128a:	5b 2b       	or	r21, r27
    128c:	22 a3       	std	Z+34, r18	; 0x22
    128e:	33 a3       	std	Z+35, r19	; 0x23
    1290:	44 a3       	std	Z+36, r20	; 0x24
    1292:	55 a3       	std	Z+37, r21	; 0x25
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    1294:	a8 01       	movw	r20, r16
    1296:	97 01       	movw	r18, r14
    1298:	62 e0       	ldi	r22, 0x02	; 2
    129a:	22 0f       	add	r18, r18
    129c:	33 1f       	adc	r19, r19
    129e:	44 1f       	adc	r20, r20
    12a0:	55 1f       	adc	r21, r21
    12a2:	6a 95       	dec	r22
    12a4:	d1 f7       	brne	.-12     	; 0x129a <chk_mounted+0x47c>
    12a6:	35 c0       	rjmp	.+106    	; 0x1312 <chk_mounted+0x4f4>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    12a8:	89 2b       	or	r24, r25
    12aa:	09 f4       	brne	.+2      	; 0x12ae <chk_mounted+0x490>
    12ac:	76 c1       	rjmp	.+748    	; 0x159a <chk_mounted+0x77c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    12ae:	69 81       	ldd	r22, Y+1	; 0x01
    12b0:	7a 81       	ldd	r23, Y+2	; 0x02
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	26 0f       	add	r18, r22
    12b8:	37 1f       	adc	r19, r23
    12ba:	48 1f       	adc	r20, r24
    12bc:	59 1f       	adc	r21, r25
    12be:	a9 85       	ldd	r26, Y+9	; 0x09
    12c0:	ba 85       	ldd	r27, Y+10	; 0x0a
    12c2:	92 96       	adiw	r26, 0x22	; 34
    12c4:	2d 93       	st	X+, r18
    12c6:	3d 93       	st	X+, r19
    12c8:	4d 93       	st	X+, r20
    12ca:	5c 93       	st	X, r21
    12cc:	95 97       	sbiw	r26, 0x25	; 37
    12ce:	d8 01       	movw	r26, r16
    12d0:	c7 01       	movw	r24, r14
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	aa 1f       	adc	r26, r26
    12d8:	bb 1f       	adc	r27, r27
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    12da:	e2 e0       	ldi	r30, 0x02	; 2
    12dc:	9e 16       	cp	r9, r30
    12de:	19 f4       	brne	.+6      	; 0x12e6 <chk_mounted+0x4c8>
    12e0:	9c 01       	movw	r18, r24
    12e2:	ad 01       	movw	r20, r26
    12e4:	16 c0       	rjmp	.+44     	; 0x1312 <chk_mounted+0x4f4>
    12e6:	9c 01       	movw	r18, r24
    12e8:	ad 01       	movw	r20, r26
    12ea:	2e 0d       	add	r18, r14
    12ec:	3f 1d       	adc	r19, r15
    12ee:	40 1f       	adc	r20, r16
    12f0:	51 1f       	adc	r21, r17
    12f2:	56 95       	lsr	r21
    12f4:	47 95       	ror	r20
    12f6:	37 95       	ror	r19
    12f8:	27 95       	ror	r18
    12fa:	61 e0       	ldi	r22, 0x01	; 1
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	e6 22       	and	r14, r22
    1304:	f7 22       	and	r15, r23
    1306:	08 23       	and	r16, r24
    1308:	19 23       	and	r17, r25
    130a:	2e 0d       	add	r18, r14
    130c:	3f 1d       	adc	r19, r15
    130e:	40 1f       	adc	r20, r16
    1310:	51 1f       	adc	r21, r17
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    1312:	21 50       	subi	r18, 0x01	; 1
    1314:	3e 4f       	sbci	r19, 0xFE	; 254
    1316:	4f 4f       	sbci	r20, 0xFF	; 255
    1318:	5f 4f       	sbci	r21, 0xFF	; 255
    131a:	89 e0       	ldi	r24, 0x09	; 9
    131c:	56 95       	lsr	r21
    131e:	47 95       	ror	r20
    1320:	37 95       	ror	r19
    1322:	27 95       	ror	r18
    1324:	8a 95       	dec	r24
    1326:	d1 f7       	brne	.-12     	; 0x131c <chk_mounted+0x4fe>
    1328:	e9 85       	ldd	r30, Y+9	; 0x09
    132a:	fa 85       	ldd	r31, Y+10	; 0x0a
    132c:	82 8d       	ldd	r24, Z+26	; 0x1a
    132e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1330:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1332:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1334:	82 17       	cp	r24, r18
    1336:	93 07       	cpc	r25, r19
    1338:	a4 07       	cpc	r26, r20
    133a:	b5 07       	cpc	r27, r21
    133c:	08 f4       	brcc	.+2      	; 0x1340 <chk_mounted+0x522>
    133e:	2d c1       	rjmp	.+602    	; 0x159a <chk_mounted+0x77c>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    1340:	8f ef       	ldi	r24, 0xFF	; 255
    1342:	9f ef       	ldi	r25, 0xFF	; 255
    1344:	af ef       	ldi	r26, 0xFF	; 255
    1346:	bf ef       	ldi	r27, 0xFF	; 255
    1348:	86 87       	std	Z+14, r24	; 0x0e
    134a:	97 87       	std	Z+15, r25	; 0x0f
    134c:	a0 8b       	std	Z+16, r26	; 0x10
    134e:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
    1350:	12 86       	std	Z+10, r1	; 0x0a
    1352:	13 86       	std	Z+11, r1	; 0x0b
    1354:	14 86       	std	Z+12, r1	; 0x0c
    1356:	15 86       	std	Z+13, r1	; 0x0d

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    1358:	b3 e0       	ldi	r27, 0x03	; 3
    135a:	9b 16       	cp	r9, r27
    135c:	09 f0       	breq	.+2      	; 0x1360 <chk_mounted+0x542>
    135e:	00 c1       	rjmp	.+512    	; 0x1560 <chk_mounted+0x742>
	 	fs->fsi_flag = 0;
    1360:	15 82       	std	Z+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    1362:	e1 5a       	subi	r30, 0xA1	; 161
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	30 81       	ld	r19, Z
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	82 91       	ld	r24, -Z
    136c:	ee 55       	subi	r30, 0x5E	; 94
    136e:	f0 40       	sbci	r31, 0x00	; 0
    1370:	fa 87       	std	Y+10, r31	; 0x0a
    1372:	e9 87       	std	Y+9, r30	; 0x09
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	28 2b       	or	r18, r24
    1378:	39 2b       	or	r19, r25
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	22 0d       	add	r18, r2
    1380:	33 1d       	adc	r19, r3
    1382:	44 1d       	adc	r20, r4
    1384:	55 1d       	adc	r21, r5
    1386:	22 8b       	std	Z+18, r18	; 0x12
    1388:	33 8b       	std	Z+19, r19	; 0x13
    138a:	44 8b       	std	Z+20, r20	; 0x14
    138c:	55 8b       	std	Z+21, r21	; 0x15
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    138e:	bf 01       	movw	r22, r30
    1390:	62 5d       	subi	r22, 0xD2	; 210
    1392:	7f 4f       	sbci	r23, 0xFF	; 255
    1394:	81 81       	ldd	r24, Z+1	; 0x01
    1396:	01 e0       	ldi	r16, 0x01	; 1
    1398:	0e 94 cf 02 	call	0x59e	; 0x59e <disk_read>
    139c:	88 23       	and	r24, r24
    139e:	09 f0       	breq	.+2      	; 0x13a2 <chk_mounted+0x584>
    13a0:	df c0       	rjmp	.+446    	; 0x1560 <chk_mounted+0x742>
    13a2:	e9 85       	ldd	r30, Y+9	; 0x09
    13a4:	fa 85       	ldd	r31, Y+10	; 0x0a
    13a6:	e3 5d       	subi	r30, 0xD3	; 211
    13a8:	fd 4f       	sbci	r31, 0xFD	; 253
    13aa:	90 81       	ld	r25, Z
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	22 91       	ld	r18, -Z
    13b0:	ec 52       	subi	r30, 0x2C	; 44
    13b2:	f2 40       	sbci	r31, 0x02	; 2
    13b4:	fa 87       	std	Y+10, r31	; 0x0a
    13b6:	e9 87       	std	Y+9, r30	; 0x09
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	82 2b       	or	r24, r18
    13bc:	93 2b       	or	r25, r19
    13be:	85 55       	subi	r24, 0x55	; 85
    13c0:	9a 4a       	sbci	r25, 0xAA	; 170
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <chk_mounted+0x5a8>
    13c4:	cd c0       	rjmp	.+410    	; 0x1560 <chk_mounted+0x742>
    13c6:	a9 85       	ldd	r26, Y+9	; 0x09
    13c8:	ba 85       	ldd	r27, Y+10	; 0x0a
    13ca:	d1 96       	adiw	r26, 0x31	; 49
    13cc:	2c 91       	ld	r18, X
    13ce:	d1 97       	sbiw	r26, 0x31	; 49
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	50 e0       	ldi	r21, 0x00	; 0
    13d6:	52 2f       	mov	r21, r18
    13d8:	44 27       	eor	r20, r20
    13da:	33 27       	eor	r19, r19
    13dc:	22 27       	eor	r18, r18
    13de:	d0 96       	adiw	r26, 0x30	; 48
    13e0:	8c 91       	ld	r24, X
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a0 e0       	ldi	r26, 0x00	; 0
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	dc 01       	movw	r26, r24
    13ea:	99 27       	eor	r25, r25
    13ec:	88 27       	eor	r24, r24
    13ee:	28 2b       	or	r18, r24
    13f0:	39 2b       	or	r19, r25
    13f2:	4a 2b       	or	r20, r26
    13f4:	5b 2b       	or	r21, r27
    13f6:	e9 85       	ldd	r30, Y+9	; 0x09
    13f8:	fa 85       	ldd	r31, Y+10	; 0x0a
    13fa:	86 a5       	ldd	r24, Z+46	; 0x2e
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a0 e0       	ldi	r26, 0x00	; 0
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	28 2b       	or	r18, r24
    1404:	39 2b       	or	r19, r25
    1406:	4a 2b       	or	r20, r26
    1408:	5b 2b       	or	r21, r27
    140a:	97 a5       	ldd	r25, Z+47	; 0x2f
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	a0 e0       	ldi	r26, 0x00	; 0
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	28 2b       	or	r18, r24
    1414:	39 2b       	or	r19, r25
    1416:	4a 2b       	or	r20, r26
    1418:	5b 2b       	or	r21, r27
    141a:	22 55       	subi	r18, 0x52	; 82
    141c:	32 45       	sbci	r19, 0x52	; 82
    141e:	41 46       	sbci	r20, 0x61	; 97
    1420:	51 44       	sbci	r21, 0x41	; 65
    1422:	09 f0       	breq	.+2      	; 0x1426 <chk_mounted+0x608>
    1424:	9d c0       	rjmp	.+314    	; 0x1560 <chk_mounted+0x742>
    1426:	29 85       	ldd	r18, Y+9	; 0x09
    1428:	3a 85       	ldd	r19, Y+10	; 0x0a
    142a:	2b 5e       	subi	r18, 0xEB	; 235
    142c:	3d 4f       	sbci	r19, 0xFD	; 253
    142e:	d9 01       	movw	r26, r18
    1430:	2c 91       	ld	r18, X
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	52 2f       	mov	r21, r18
    143a:	44 27       	eor	r20, r20
    143c:	33 27       	eor	r19, r19
    143e:	22 27       	eor	r18, r18
    1440:	8e 91       	ld	r24, -X
    1442:	ba 87       	std	Y+10, r27	; 0x0a
    1444:	a9 87       	std	Y+9, r26	; 0x09
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	a0 e0       	ldi	r26, 0x00	; 0
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	dc 01       	movw	r26, r24
    144e:	99 27       	eor	r25, r25
    1450:	88 27       	eor	r24, r24
    1452:	28 2b       	or	r18, r24
    1454:	39 2b       	or	r19, r25
    1456:	4a 2b       	or	r20, r26
    1458:	5b 2b       	or	r21, r27
    145a:	e9 85       	ldd	r30, Y+9	; 0x09
    145c:	fa 85       	ldd	r31, Y+10	; 0x0a
    145e:	32 97       	sbiw	r30, 0x02	; 2
    1460:	81 91       	ld	r24, Z+
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a0 e0       	ldi	r26, 0x00	; 0
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	28 2b       	or	r18, r24
    146a:	39 2b       	or	r19, r25
    146c:	4a 2b       	or	r20, r26
    146e:	5b 2b       	or	r21, r27
    1470:	90 81       	ld	r25, Z
    1472:	e3 51       	subi	r30, 0x13	; 19
    1474:	f2 40       	sbci	r31, 0x02	; 2
    1476:	fa 87       	std	Y+10, r31	; 0x0a
    1478:	e9 87       	std	Y+9, r30	; 0x09
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	a0 e0       	ldi	r26, 0x00	; 0
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	28 2b       	or	r18, r24
    1482:	39 2b       	or	r19, r25
    1484:	4a 2b       	or	r20, r26
    1486:	5b 2b       	or	r21, r27
    1488:	22 57       	subi	r18, 0x72	; 114
    148a:	32 47       	sbci	r19, 0x72	; 114
    148c:	41 44       	sbci	r20, 0x41	; 65
    148e:	51 46       	sbci	r21, 0x61	; 97
    1490:	09 f0       	breq	.+2      	; 0x1494 <chk_mounted+0x676>
    1492:	66 c0       	rjmp	.+204    	; 0x1560 <chk_mounted+0x742>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    1494:	29 85       	ldd	r18, Y+9	; 0x09
    1496:	3a 85       	ldd	r19, Y+10	; 0x0a
    1498:	23 5e       	subi	r18, 0xE3	; 227
    149a:	3d 4f       	sbci	r19, 0xFD	; 253
    149c:	d9 01       	movw	r26, r18
    149e:	2c 91       	ld	r18, X
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e0       	ldi	r20, 0x00	; 0
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	52 2f       	mov	r21, r18
    14a8:	44 27       	eor	r20, r20
    14aa:	33 27       	eor	r19, r19
    14ac:	22 27       	eor	r18, r18
    14ae:	8e 91       	ld	r24, -X
    14b0:	ba 87       	std	Y+10, r27	; 0x0a
    14b2:	a9 87       	std	Y+9, r26	; 0x09
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	a0 e0       	ldi	r26, 0x00	; 0
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	dc 01       	movw	r26, r24
    14bc:	99 27       	eor	r25, r25
    14be:	88 27       	eor	r24, r24
    14c0:	28 2b       	or	r18, r24
    14c2:	39 2b       	or	r19, r25
    14c4:	4a 2b       	or	r20, r26
    14c6:	5b 2b       	or	r21, r27
    14c8:	e9 85       	ldd	r30, Y+9	; 0x09
    14ca:	fa 85       	ldd	r31, Y+10	; 0x0a
    14cc:	32 97       	sbiw	r30, 0x02	; 2
    14ce:	81 91       	ld	r24, Z+
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a0 e0       	ldi	r26, 0x00	; 0
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	28 2b       	or	r18, r24
    14d8:	39 2b       	or	r19, r25
    14da:	4a 2b       	or	r20, r26
    14dc:	5b 2b       	or	r21, r27
    14de:	90 81       	ld	r25, Z
    14e0:	eb 51       	subi	r30, 0x1B	; 27
    14e2:	f2 40       	sbci	r31, 0x02	; 2
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	a0 e0       	ldi	r26, 0x00	; 0
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	28 2b       	or	r18, r24
    14ec:	39 2b       	or	r19, r25
    14ee:	4a 2b       	or	r20, r26
    14f0:	5b 2b       	or	r21, r27
    14f2:	df 01       	movw	r26, r30
    14f4:	22 87       	std	Z+10, r18	; 0x0a
    14f6:	33 87       	std	Z+11, r19	; 0x0b
    14f8:	44 87       	std	Z+12, r20	; 0x0c
    14fa:	55 87       	std	Z+13, r21	; 0x0d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    14fc:	a7 5e       	subi	r26, 0xE7	; 231
    14fe:	bd 4f       	sbci	r27, 0xFD	; 253
    1500:	2c 91       	ld	r18, X
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	40 e0       	ldi	r20, 0x00	; 0
    1506:	50 e0       	ldi	r21, 0x00	; 0
    1508:	52 2f       	mov	r21, r18
    150a:	44 27       	eor	r20, r20
    150c:	33 27       	eor	r19, r19
    150e:	22 27       	eor	r18, r18
    1510:	8e 91       	ld	r24, -X
    1512:	ba 87       	std	Y+10, r27	; 0x0a
    1514:	a9 87       	std	Y+9, r26	; 0x09
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	a0 e0       	ldi	r26, 0x00	; 0
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	dc 01       	movw	r26, r24
    151e:	99 27       	eor	r25, r25
    1520:	88 27       	eor	r24, r24
    1522:	28 2b       	or	r18, r24
    1524:	39 2b       	or	r19, r25
    1526:	4a 2b       	or	r20, r26
    1528:	5b 2b       	or	r21, r27
    152a:	e9 85       	ldd	r30, Y+9	; 0x09
    152c:	fa 85       	ldd	r31, Y+10	; 0x0a
    152e:	32 97       	sbiw	r30, 0x02	; 2
    1530:	81 91       	ld	r24, Z+
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	a0 e0       	ldi	r26, 0x00	; 0
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	28 2b       	or	r18, r24
    153a:	39 2b       	or	r19, r25
    153c:	4a 2b       	or	r20, r26
    153e:	5b 2b       	or	r21, r27
    1540:	90 81       	ld	r25, Z
    1542:	e7 51       	subi	r30, 0x17	; 23
    1544:	f2 40       	sbci	r31, 0x02	; 2
    1546:	fa 87       	std	Y+10, r31	; 0x0a
    1548:	e9 87       	std	Y+9, r30	; 0x09
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	a0 e0       	ldi	r26, 0x00	; 0
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	28 2b       	or	r18, r24
    1552:	39 2b       	or	r19, r25
    1554:	4a 2b       	or	r20, r26
    1556:	5b 2b       	or	r21, r27
    1558:	26 87       	std	Z+14, r18	; 0x0e
    155a:	37 87       	std	Z+15, r19	; 0x0f
    155c:	40 8b       	std	Z+16, r20	; 0x10
    155e:	51 8b       	std	Z+17, r21	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    1560:	e9 85       	ldd	r30, Y+9	; 0x09
    1562:	fa 85       	ldd	r31, Y+10	; 0x0a
    1564:	90 82       	st	Z, r9
	fs->id = ++Fsid;		/* File system mount ID */
    1566:	80 91 b7 02 	lds	r24, 0x02B7
    156a:	90 91 b8 02 	lds	r25, 0x02B8
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	90 93 b8 02 	sts	0x02B8, r25
    1574:	80 93 b7 02 	sts	0x02B7, r24
    1578:	97 83       	std	Z+7, r25	; 0x07
    157a:	86 83       	std	Z+6, r24	; 0x06
	fs->winsect = 0;		/* Invalidate sector cache */
    157c:	a9 85       	ldd	r26, Y+9	; 0x09
    157e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1580:	9a 96       	adiw	r26, 0x2a	; 42
    1582:	1d 92       	st	X+, r1
    1584:	1d 92       	st	X+, r1
    1586:	1d 92       	st	X+, r1
    1588:	1c 92       	st	X, r1
    158a:	9d 97       	sbiw	r26, 0x2d	; 45
	fs->wflag = 0;
    158c:	14 96       	adiw	r26, 0x04	; 4
    158e:	1c 92       	st	X, r1
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <chk_mounted+0x778>
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    1592:	8a e0       	ldi	r24, 0x0A	; 10
    1594:	03 c0       	rjmp	.+6      	; 0x159c <chk_mounted+0x77e>
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	01 c0       	rjmp	.+2      	; 0x159c <chk_mounted+0x77e>
    159a:	8d e0       	ldi	r24, 0x0D	; 13
}
    159c:	2a 96       	adiw	r28, 0x0a	; 10
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	ff 90       	pop	r15
    15b2:	ef 90       	pop	r14
    15b4:	df 90       	pop	r13
    15b6:	cf 90       	pop	r12
    15b8:	bf 90       	pop	r11
    15ba:	af 90       	pop	r10
    15bc:	9f 90       	pop	r9
    15be:	8f 90       	pop	r8
    15c0:	7f 90       	pop	r7
    15c2:	6f 90       	pop	r6
    15c4:	5f 90       	pop	r5
    15c6:	4f 90       	pop	r4
    15c8:	3f 90       	pop	r3
    15ca:	2f 90       	pop	r2
    15cc:	08 95       	ret

000015ce <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    15ce:	6f 92       	push	r6
    15d0:	7f 92       	push	r7
    15d2:	8f 92       	push	r8
    15d4:	9f 92       	push	r9
    15d6:	af 92       	push	r10
    15d8:	bf 92       	push	r11
    15da:	cf 92       	push	r12
    15dc:	df 92       	push	r13
    15de:	ef 92       	push	r14
    15e0:	ff 92       	push	r15
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	ec 01       	movw	r28, r24
    15ec:	4a 01       	movw	r8, r20
    15ee:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    15f0:	ca a4       	ldd	r12, Y+42	; 0x2a
    15f2:	db a4       	ldd	r13, Y+43	; 0x2b
    15f4:	ec a4       	ldd	r14, Y+44	; 0x2c
    15f6:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    15f8:	c4 16       	cp	r12, r20
    15fa:	d5 06       	cpc	r13, r21
    15fc:	e6 06       	cpc	r14, r22
    15fe:	f7 06       	cpc	r15, r23
    1600:	09 f4       	brne	.+2      	; 0x1604 <move_window+0x36>
    1602:	4e c0       	rjmp	.+156    	; 0x16a0 <move_window+0xd2>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    1604:	8c 81       	ldd	r24, Y+4	; 0x04
    1606:	88 23       	and	r24, r24
    1608:	a1 f1       	breq	.+104    	; 0x1672 <move_window+0xa4>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    160a:	ee e2       	ldi	r30, 0x2E	; 46
    160c:	6e 2e       	mov	r6, r30
    160e:	71 2c       	mov	r7, r1
    1610:	6c 0e       	add	r6, r28
    1612:	7d 1e       	adc	r7, r29
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	b3 01       	movw	r22, r6
    1618:	a7 01       	movw	r20, r14
    161a:	96 01       	movw	r18, r12
    161c:	01 e0       	ldi	r16, 0x01	; 1
    161e:	0e 94 27 03 	call	0x64e	; 0x64e <disk_write>
    1622:	88 23       	and	r24, r24
    1624:	d9 f5       	brne	.+118    	; 0x169c <move_window+0xce>
				return FR_DISK_ERR;
			fs->wflag = 0;
    1626:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    1628:	8a 8d       	ldd	r24, Y+26	; 0x1a
    162a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    162c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    162e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1630:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1632:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1634:	48 a1       	ldd	r20, Y+32	; 0x20
    1636:	59 a1       	ldd	r21, Y+33	; 0x21
    1638:	82 0f       	add	r24, r18
    163a:	93 1f       	adc	r25, r19
    163c:	a4 1f       	adc	r26, r20
    163e:	b5 1f       	adc	r27, r21
    1640:	c8 16       	cp	r12, r24
    1642:	d9 06       	cpc	r13, r25
    1644:	ea 06       	cpc	r14, r26
    1646:	fb 06       	cpc	r15, r27
    1648:	a0 f4       	brcc	.+40     	; 0x1672 <move_window+0xa4>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    164a:	1b 81       	ldd	r17, Y+3	; 0x03
    164c:	10 c0       	rjmp	.+32     	; 0x166e <move_window+0xa0>
					wsect += fs->fsize;
    164e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1650:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1652:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1654:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1656:	c8 0e       	add	r12, r24
    1658:	d9 1e       	adc	r13, r25
    165a:	ea 1e       	adc	r14, r26
    165c:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	b3 01       	movw	r22, r6
    1662:	a7 01       	movw	r20, r14
    1664:	96 01       	movw	r18, r12
    1666:	01 e0       	ldi	r16, 0x01	; 1
    1668:	0e 94 27 03 	call	0x64e	; 0x64e <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    166c:	11 50       	subi	r17, 0x01	; 1
    166e:	12 30       	cpi	r17, 0x02	; 2
    1670:	70 f7       	brcc	.-36     	; 0x164e <move_window+0x80>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    1672:	81 14       	cp	r8, r1
    1674:	91 04       	cpc	r9, r1
    1676:	a1 04       	cpc	r10, r1
    1678:	b1 04       	cpc	r11, r1
    167a:	91 f0       	breq	.+36     	; 0x16a0 <move_window+0xd2>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    167c:	be 01       	movw	r22, r28
    167e:	62 5d       	subi	r22, 0xD2	; 210
    1680:	7f 4f       	sbci	r23, 0xFF	; 255
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	a5 01       	movw	r20, r10
    1686:	94 01       	movw	r18, r8
    1688:	01 e0       	ldi	r16, 0x01	; 1
    168a:	0e 94 cf 02 	call	0x59e	; 0x59e <disk_read>
    168e:	88 23       	and	r24, r24
    1690:	29 f4       	brne	.+10     	; 0x169c <move_window+0xce>
				return FR_DISK_ERR;
			fs->winsect = sector;
    1692:	8a a6       	std	Y+42, r8	; 0x2a
    1694:	9b a6       	std	Y+43, r9	; 0x2b
    1696:	ac a6       	std	Y+44, r10	; 0x2c
    1698:	bd a6       	std	Y+45, r11	; 0x2d
    169a:	03 c0       	rjmp	.+6      	; 0x16a2 <move_window+0xd4>
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	01 c0       	rjmp	.+2      	; 0x16a2 <move_window+0xd4>
    16a0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	ff 90       	pop	r15
    16ac:	ef 90       	pop	r14
    16ae:	df 90       	pop	r13
    16b0:	cf 90       	pop	r12
    16b2:	bf 90       	pop	r11
    16b4:	af 90       	pop	r10
    16b6:	9f 90       	pop	r9
    16b8:	8f 90       	pop	r8
    16ba:	7f 90       	pop	r7
    16bc:	6f 90       	pop	r6
    16be:	08 95       	ret

000016c0 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    16c0:	7f 92       	push	r7
    16c2:	8f 92       	push	r8
    16c4:	9f 92       	push	r9
    16c6:	af 92       	push	r10
    16c8:	bf 92       	push	r11
    16ca:	cf 92       	push	r12
    16cc:	df 92       	push	r13
    16ce:	ef 92       	push	r14
    16d0:	ff 92       	push	r15
    16d2:	0f 93       	push	r16
    16d4:	1f 93       	push	r17
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	ec 01       	movw	r28, r24
    16dc:	6a 01       	movw	r12, r20
    16de:	7b 01       	movw	r14, r22
    16e0:	48 01       	movw	r8, r16
    16e2:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    16e4:	42 30       	cpi	r20, 0x02	; 2
    16e6:	51 05       	cpc	r21, r1
    16e8:	61 05       	cpc	r22, r1
    16ea:	71 05       	cpc	r23, r1
    16ec:	08 f4       	brcc	.+2      	; 0x16f0 <put_fat+0x30>
    16ee:	ec c0       	rjmp	.+472    	; 0x18c8 <put_fat+0x208>
    16f0:	8e 89       	ldd	r24, Y+22	; 0x16
    16f2:	9f 89       	ldd	r25, Y+23	; 0x17
    16f4:	a8 8d       	ldd	r26, Y+24	; 0x18
    16f6:	b9 8d       	ldd	r27, Y+25	; 0x19
    16f8:	48 17       	cp	r20, r24
    16fa:	59 07       	cpc	r21, r25
    16fc:	6a 07       	cpc	r22, r26
    16fe:	7b 07       	cpc	r23, r27
    1700:	08 f0       	brcs	.+2      	; 0x1704 <put_fat+0x44>
    1702:	e2 c0       	rjmp	.+452    	; 0x18c8 <put_fat+0x208>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    1704:	88 81       	ld	r24, Y
    1706:	82 30       	cpi	r24, 0x02	; 2
    1708:	09 f4       	brne	.+2      	; 0x170c <put_fat+0x4c>
    170a:	72 c0       	rjmp	.+228    	; 0x17f0 <put_fat+0x130>
    170c:	83 30       	cpi	r24, 0x03	; 3
    170e:	09 f4       	brne	.+2      	; 0x1712 <put_fat+0x52>
    1710:	93 c0       	rjmp	.+294    	; 0x1838 <put_fat+0x178>
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	19 f0       	breq	.+6      	; 0x171c <put_fat+0x5c>
    1716:	52 e0       	ldi	r21, 0x02	; 2
    1718:	75 2e       	mov	r7, r21
    171a:	d3 c0       	rjmp	.+422    	; 0x18c2 <put_fat+0x202>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    171c:	8a 01       	movw	r16, r20
    171e:	16 95       	lsr	r17
    1720:	07 95       	ror	r16
    1722:	0c 0d       	add	r16, r12
    1724:	1d 1d       	adc	r17, r13
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1726:	a8 01       	movw	r20, r16
    1728:	45 2f       	mov	r20, r21
    172a:	55 27       	eor	r21, r21
    172c:	46 95       	lsr	r20
    172e:	60 e0       	ldi	r22, 0x00	; 0
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1734:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1736:	a8 a1       	ldd	r26, Y+32	; 0x20
    1738:	b9 a1       	ldd	r27, Y+33	; 0x21
    173a:	48 0f       	add	r20, r24
    173c:	59 1f       	adc	r21, r25
    173e:	6a 1f       	adc	r22, r26
    1740:	7b 1f       	adc	r23, r27
    1742:	ce 01       	movw	r24, r28
    1744:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    1748:	78 2e       	mov	r7, r24
			if (res != FR_OK) break;
    174a:	88 23       	and	r24, r24
    174c:	09 f0       	breq	.+2      	; 0x1750 <put_fat+0x90>
    174e:	b9 c0       	rjmp	.+370    	; 0x18c2 <put_fat+0x202>
			p = &fs->win[bc % SS(fs)];
    1750:	d8 01       	movw	r26, r16
    1752:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1754:	21 e0       	ldi	r18, 0x01	; 1
    1756:	e2 2e       	mov	r14, r18
    1758:	f1 2c       	mov	r15, r1
    175a:	ec 20       	and	r14, r12
    175c:	fd 20       	and	r15, r13
    175e:	e1 14       	cp	r14, r1
    1760:	f1 04       	cpc	r15, r1
    1762:	51 f0       	breq	.+20     	; 0x1778 <put_fat+0xb8>
    1764:	fe 01       	movw	r30, r28
    1766:	ea 0f       	add	r30, r26
    1768:	fb 1f       	adc	r31, r27
    176a:	86 a5       	ldd	r24, Z+46	; 0x2e
    176c:	8f 70       	andi	r24, 0x0F	; 15
    176e:	98 2d       	mov	r25, r8
    1770:	92 95       	swap	r25
    1772:	90 7f       	andi	r25, 0xF0	; 240
    1774:	98 2b       	or	r25, r24
    1776:	01 c0       	rjmp	.+2      	; 0x177a <put_fat+0xba>
    1778:	98 2d       	mov	r25, r8
    177a:	ac 0f       	add	r26, r28
    177c:	bd 1f       	adc	r27, r29
    177e:	9e 96       	adiw	r26, 0x2e	; 46
    1780:	9c 93       	st	X, r25
			bc++;
    1782:	0f 5f       	subi	r16, 0xFF	; 255
    1784:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    178a:	a8 01       	movw	r20, r16
    178c:	45 2f       	mov	r20, r21
    178e:	55 27       	eor	r21, r21
    1790:	46 95       	lsr	r20
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1798:	9f 8d       	ldd	r25, Y+31	; 0x1f
    179a:	a8 a1       	ldd	r26, Y+32	; 0x20
    179c:	b9 a1       	ldd	r27, Y+33	; 0x21
    179e:	48 0f       	add	r20, r24
    17a0:	59 1f       	adc	r21, r25
    17a2:	6a 1f       	adc	r22, r26
    17a4:	7b 1f       	adc	r23, r27
    17a6:	ce 01       	movw	r24, r28
    17a8:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    17ac:	78 2e       	mov	r7, r24
			if (res != FR_OK) break;
    17ae:	88 23       	and	r24, r24
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <put_fat+0xf4>
    17b2:	87 c0       	rjmp	.+270    	; 0x18c2 <put_fat+0x202>
			p = &fs->win[bc % SS(fs)];
    17b4:	a8 01       	movw	r20, r16
    17b6:	51 70       	andi	r21, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    17b8:	ef 28       	or	r14, r15
    17ba:	49 f0       	breq	.+18     	; 0x17ce <put_fat+0x10e>
    17bc:	84 e0       	ldi	r24, 0x04	; 4
    17be:	b6 94       	lsr	r11
    17c0:	a7 94       	ror	r10
    17c2:	97 94       	ror	r9
    17c4:	87 94       	ror	r8
    17c6:	8a 95       	dec	r24
    17c8:	d1 f7       	brne	.-12     	; 0x17be <put_fat+0xfe>
    17ca:	68 2d       	mov	r22, r8
    17cc:	0b c0       	rjmp	.+22     	; 0x17e4 <put_fat+0x124>
    17ce:	fe 01       	movw	r30, r28
    17d0:	e4 0f       	add	r30, r20
    17d2:	f5 1f       	adc	r31, r21
    17d4:	66 a5       	ldd	r22, Z+46	; 0x2e
    17d6:	60 7f       	andi	r22, 0xF0	; 240
    17d8:	bb 27       	eor	r27, r27
    17da:	ab 2d       	mov	r26, r11
    17dc:	9a 2d       	mov	r25, r10
    17de:	89 2d       	mov	r24, r9
    17e0:	8f 70       	andi	r24, 0x0F	; 15
    17e2:	68 2b       	or	r22, r24
    17e4:	4c 0f       	add	r20, r28
    17e6:	5d 1f       	adc	r21, r29
    17e8:	da 01       	movw	r26, r20
    17ea:	9e 96       	adiw	r26, 0x2e	; 46
    17ec:	6c 93       	st	X, r22
    17ee:	69 c0       	rjmp	.+210    	; 0x18c2 <put_fat+0x202>
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    17f0:	45 2f       	mov	r20, r21
    17f2:	56 2f       	mov	r21, r22
    17f4:	67 2f       	mov	r22, r23
    17f6:	77 27       	eor	r23, r23
    17f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17fa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17fc:	a8 a1       	ldd	r26, Y+32	; 0x20
    17fe:	b9 a1       	ldd	r27, Y+33	; 0x21
    1800:	48 0f       	add	r20, r24
    1802:	59 1f       	adc	r21, r25
    1804:	6a 1f       	adc	r22, r26
    1806:	7b 1f       	adc	r23, r27
    1808:	ce 01       	movw	r24, r28
    180a:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    180e:	78 2e       	mov	r7, r24
			if (res != FR_OK) break;
    1810:	88 23       	and	r24, r24
    1812:	09 f0       	breq	.+2      	; 0x1816 <put_fat+0x156>
    1814:	56 c0       	rjmp	.+172    	; 0x18c2 <put_fat+0x202>
			p = &fs->win[clst * 2 % SS(fs)];
    1816:	cc 0c       	add	r12, r12
    1818:	dd 1c       	adc	r13, r13
    181a:	ee 1c       	adc	r14, r14
    181c:	ff 1c       	adc	r15, r15
    181e:	f6 01       	movw	r30, r12
    1820:	f1 70       	andi	r31, 0x01	; 1
			ST_WORD(p, (WORD)val);
    1822:	de 01       	movw	r26, r28
    1824:	ae 0f       	add	r26, r30
    1826:	bf 1f       	adc	r27, r31
    1828:	9e 96       	adiw	r26, 0x2e	; 46
    182a:	8c 92       	st	X, r8
    182c:	9e 97       	sbiw	r26, 0x2e	; 46
    182e:	fd 01       	movw	r30, r26
    1830:	89 2d       	mov	r24, r9
    1832:	99 27       	eor	r25, r25
    1834:	87 a7       	std	Z+47, r24	; 0x2f
    1836:	45 c0       	rjmp	.+138    	; 0x18c2 <put_fat+0x202>
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    1838:	e7 e0       	ldi	r30, 0x07	; 7
    183a:	76 95       	lsr	r23
    183c:	67 95       	ror	r22
    183e:	57 95       	ror	r21
    1840:	47 95       	ror	r20
    1842:	ea 95       	dec	r30
    1844:	d1 f7       	brne	.-12     	; 0x183a <put_fat+0x17a>
    1846:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1848:	9f 8d       	ldd	r25, Y+31	; 0x1f
    184a:	a8 a1       	ldd	r26, Y+32	; 0x20
    184c:	b9 a1       	ldd	r27, Y+33	; 0x21
    184e:	48 0f       	add	r20, r24
    1850:	59 1f       	adc	r21, r25
    1852:	6a 1f       	adc	r22, r26
    1854:	7b 1f       	adc	r23, r27
    1856:	ce 01       	movw	r24, r28
    1858:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    185c:	78 2e       	mov	r7, r24
			if (res != FR_OK) break;
    185e:	88 23       	and	r24, r24
    1860:	81 f5       	brne	.+96     	; 0x18c2 <put_fat+0x202>
			p = &fs->win[clst * 4 % SS(fs)];
    1862:	42 e0       	ldi	r20, 0x02	; 2
    1864:	cc 0c       	add	r12, r12
    1866:	dd 1c       	adc	r13, r13
    1868:	ee 1c       	adc	r14, r14
    186a:	ff 1c       	adc	r15, r15
    186c:	4a 95       	dec	r20
    186e:	d1 f7       	brne	.-12     	; 0x1864 <put_fat+0x1a4>
    1870:	f6 01       	movw	r30, r12
    1872:	f1 70       	andi	r31, 0x01	; 1
    1874:	be 96       	adiw	r30, 0x2e	; 46
    1876:	be 01       	movw	r22, r28
    1878:	6e 0f       	add	r22, r30
    187a:	7f 1f       	adc	r23, r31
    187c:	be 97       	sbiw	r30, 0x2e	; 46
			val |= LD_DWORD(p) & 0xF0000000;
    187e:	db 01       	movw	r26, r22
    1880:	13 96       	adiw	r26, 0x03	; 3
    1882:	8c 91       	ld	r24, X
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	a0 e0       	ldi	r26, 0x00	; 0
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	b8 2f       	mov	r27, r24
    188c:	aa 27       	eor	r26, r26
    188e:	99 27       	eor	r25, r25
    1890:	88 27       	eor	r24, r24
    1892:	ec 0f       	add	r30, r28
    1894:	fd 1f       	adc	r31, r29
    1896:	80 70       	andi	r24, 0x00	; 0
    1898:	90 70       	andi	r25, 0x00	; 0
    189a:	a0 70       	andi	r26, 0x00	; 0
    189c:	b0 7f       	andi	r27, 0xF0	; 240
    189e:	88 29       	or	r24, r8
    18a0:	99 29       	or	r25, r9
    18a2:	aa 29       	or	r26, r10
    18a4:	bb 29       	or	r27, r11
			ST_DWORD(p, val);
    18a6:	86 a7       	std	Z+46, r24	; 0x2e
    18a8:	29 2f       	mov	r18, r25
    18aa:	33 27       	eor	r19, r19
    18ac:	fb 01       	movw	r30, r22
    18ae:	21 83       	std	Z+1, r18	; 0x01
    18b0:	9d 01       	movw	r18, r26
    18b2:	44 27       	eor	r20, r20
    18b4:	55 27       	eor	r21, r21
    18b6:	22 83       	std	Z+2, r18	; 0x02
    18b8:	8b 2f       	mov	r24, r27
    18ba:	99 27       	eor	r25, r25
    18bc:	aa 27       	eor	r26, r26
    18be:	bb 27       	eor	r27, r27
    18c0:	83 83       	std	Z+3, r24	; 0x03
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	8c 83       	std	Y+4, r24	; 0x04
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <put_fat+0x20c>
    18c8:	f2 e0       	ldi	r31, 0x02	; 2
    18ca:	7f 2e       	mov	r7, r31
	}

	return res;
}
    18cc:	87 2d       	mov	r24, r7
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	1f 91       	pop	r17
    18d4:	0f 91       	pop	r16
    18d6:	ff 90       	pop	r15
    18d8:	ef 90       	pop	r14
    18da:	df 90       	pop	r13
    18dc:	cf 90       	pop	r12
    18de:	bf 90       	pop	r11
    18e0:	af 90       	pop	r10
    18e2:	9f 90       	pop	r9
    18e4:	8f 90       	pop	r8
    18e6:	7f 90       	pop	r7
    18e8:	08 95       	ret

000018ea <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    18ea:	bf 92       	push	r11
    18ec:	cf 92       	push	r12
    18ee:	df 92       	push	r13
    18f0:	ef 92       	push	r14
    18f2:	ff 92       	push	r15
    18f4:	0f 93       	push	r16
    18f6:	1f 93       	push	r17
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	ec 01       	movw	r28, r24
    18fe:	7a 01       	movw	r14, r20
    1900:	8b 01       	movw	r16, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    1902:	42 30       	cpi	r20, 0x02	; 2
    1904:	51 05       	cpc	r21, r1
    1906:	61 05       	cpc	r22, r1
    1908:	71 05       	cpc	r23, r1
    190a:	08 f4       	brcc	.+2      	; 0x190e <get_fat+0x24>
    190c:	e5 c0       	rjmp	.+458    	; 0x1ad8 <get_fat+0x1ee>
    190e:	8e 89       	ldd	r24, Y+22	; 0x16
    1910:	9f 89       	ldd	r25, Y+23	; 0x17
    1912:	a8 8d       	ldd	r26, Y+24	; 0x18
    1914:	b9 8d       	ldd	r27, Y+25	; 0x19
    1916:	48 17       	cp	r20, r24
    1918:	59 07       	cpc	r21, r25
    191a:	6a 07       	cpc	r22, r26
    191c:	7b 07       	cpc	r23, r27
    191e:	08 f0       	brcs	.+2      	; 0x1922 <get_fat+0x38>
    1920:	db c0       	rjmp	.+438    	; 0x1ad8 <get_fat+0x1ee>
		return 1;

	switch (fs->fs_type) {
    1922:	88 81       	ld	r24, Y
    1924:	82 30       	cpi	r24, 0x02	; 2
    1926:	09 f4       	brne	.+2      	; 0x192a <get_fat+0x40>
    1928:	5b c0       	rjmp	.+182    	; 0x19e0 <get_fat+0xf6>
    192a:	83 30       	cpi	r24, 0x03	; 3
    192c:	09 f4       	brne	.+2      	; 0x1930 <get_fat+0x46>
    192e:	7d c0       	rjmp	.+250    	; 0x1a2a <get_fat+0x140>
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	09 f0       	breq	.+2      	; 0x1936 <get_fat+0x4c>
    1934:	d7 c0       	rjmp	.+430    	; 0x1ae4 <get_fat+0x1fa>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    1936:	6a 01       	movw	r12, r20
    1938:	d6 94       	lsr	r13
    193a:	c7 94       	ror	r12
    193c:	c4 0e       	add	r12, r20
    193e:	d5 1e       	adc	r13, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    1940:	a6 01       	movw	r20, r12
    1942:	45 2f       	mov	r20, r21
    1944:	55 27       	eor	r21, r21
    1946:	46 95       	lsr	r20
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    194e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1950:	a8 a1       	ldd	r26, Y+32	; 0x20
    1952:	b9 a1       	ldd	r27, Y+33	; 0x21
    1954:	48 0f       	add	r20, r24
    1956:	59 1f       	adc	r21, r25
    1958:	6a 1f       	adc	r22, r26
    195a:	7b 1f       	adc	r23, r27
    195c:	ce 01       	movw	r24, r28
    195e:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    1962:	88 23       	and	r24, r24
    1964:	09 f0       	breq	.+2      	; 0x1968 <get_fat+0x7e>
    1966:	be c0       	rjmp	.+380    	; 0x1ae4 <get_fat+0x1fa>
		wc = fs->win[bc % SS(fs)]; bc++;
    1968:	f6 01       	movw	r30, r12
    196a:	f1 70       	andi	r31, 0x01	; 1
    196c:	ec 0f       	add	r30, r28
    196e:	fd 1f       	adc	r31, r29
    1970:	b6 a4       	ldd	r11, Z+46	; 0x2e
    1972:	08 94       	sec
    1974:	c1 1c       	adc	r12, r1
    1976:	d1 1c       	adc	r13, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    1978:	a6 01       	movw	r20, r12
    197a:	45 2f       	mov	r20, r21
    197c:	55 27       	eor	r21, r21
    197e:	46 95       	lsr	r20
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1986:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1988:	a8 a1       	ldd	r26, Y+32	; 0x20
    198a:	b9 a1       	ldd	r27, Y+33	; 0x21
    198c:	48 0f       	add	r20, r24
    198e:	59 1f       	adc	r21, r25
    1990:	6a 1f       	adc	r22, r26
    1992:	7b 1f       	adc	r23, r27
    1994:	ce 01       	movw	r24, r28
    1996:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    199a:	88 23       	and	r24, r24
    199c:	09 f0       	breq	.+2      	; 0x19a0 <get_fat+0xb6>
    199e:	a2 c0       	rjmp	.+324    	; 0x1ae4 <get_fat+0x1fa>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    19a0:	2b 2d       	mov	r18, r11
    19a2:	30 e0       	ldi	r19, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    19a4:	af ef       	ldi	r26, 0xFF	; 255
    19a6:	b1 e0       	ldi	r27, 0x01	; 1
    19a8:	ca 22       	and	r12, r26
    19aa:	db 22       	and	r13, r27
    19ac:	cc 0e       	add	r12, r28
    19ae:	dd 1e       	adc	r13, r29
    19b0:	f6 01       	movw	r30, r12
    19b2:	96 a5       	ldd	r25, Z+46	; 0x2e
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	28 2b       	or	r18, r24
    19b8:	39 2b       	or	r19, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    19ba:	c7 01       	movw	r24, r14
    19bc:	81 70       	andi	r24, 0x01	; 1
    19be:	90 70       	andi	r25, 0x00	; 0
    19c0:	89 2b       	or	r24, r25
    19c2:	31 f0       	breq	.+12     	; 0x19d0 <get_fat+0xe6>
    19c4:	44 e0       	ldi	r20, 0x04	; 4
    19c6:	36 95       	lsr	r19
    19c8:	27 95       	ror	r18
    19ca:	4a 95       	dec	r20
    19cc:	e1 f7       	brne	.-8      	; 0x19c6 <get_fat+0xdc>
    19ce:	29 c0       	rjmp	.+82     	; 0x1a22 <get_fat+0x138>
    19d0:	79 01       	movw	r14, r18
    19d2:	00 e0       	ldi	r16, 0x00	; 0
    19d4:	10 e0       	ldi	r17, 0x00	; 0
    19d6:	8f ef       	ldi	r24, 0xFF	; 255
    19d8:	9f e0       	ldi	r25, 0x0F	; 15
    19da:	a0 e0       	ldi	r26, 0x00	; 0
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	77 c0       	rjmp	.+238    	; 0x1ace <get_fat+0x1e4>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    19e0:	45 2f       	mov	r20, r21
    19e2:	56 2f       	mov	r21, r22
    19e4:	67 2f       	mov	r22, r23
    19e6:	77 27       	eor	r23, r23
    19e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    19ec:	a8 a1       	ldd	r26, Y+32	; 0x20
    19ee:	b9 a1       	ldd	r27, Y+33	; 0x21
    19f0:	48 0f       	add	r20, r24
    19f2:	59 1f       	adc	r21, r25
    19f4:	6a 1f       	adc	r22, r26
    19f6:	7b 1f       	adc	r23, r27
    19f8:	ce 01       	movw	r24, r28
    19fa:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    19fe:	88 23       	and	r24, r24
    1a00:	09 f0       	breq	.+2      	; 0x1a04 <get_fat+0x11a>
    1a02:	70 c0       	rjmp	.+224    	; 0x1ae4 <get_fat+0x1fa>
		p = &fs->win[clst * 2 % SS(fs)];
    1a04:	ee 0c       	add	r14, r14
    1a06:	ff 1c       	adc	r15, r15
    1a08:	00 1f       	adc	r16, r16
    1a0a:	11 1f       	adc	r17, r17
    1a0c:	d7 01       	movw	r26, r14
    1a0e:	b1 70       	andi	r27, 0x01	; 1
		return LD_WORD(p);
    1a10:	fe 01       	movw	r30, r28
    1a12:	ea 0f       	add	r30, r26
    1a14:	fb 1f       	adc	r31, r27
    1a16:	26 a5       	ldd	r18, Z+46	; 0x2e
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	97 a5       	ldd	r25, Z+47	; 0x2f
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	28 2b       	or	r18, r24
    1a20:	39 2b       	or	r19, r25
    1a22:	79 01       	movw	r14, r18
    1a24:	00 e0       	ldi	r16, 0x00	; 0
    1a26:	10 e0       	ldi	r17, 0x00	; 0
    1a28:	61 c0       	rjmp	.+194    	; 0x1aec <get_fat+0x202>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    1a2a:	97 e0       	ldi	r25, 0x07	; 7
    1a2c:	76 95       	lsr	r23
    1a2e:	67 95       	ror	r22
    1a30:	57 95       	ror	r21
    1a32:	47 95       	ror	r20
    1a34:	9a 95       	dec	r25
    1a36:	d1 f7       	brne	.-12     	; 0x1a2c <get_fat+0x142>
    1a38:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a3a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a3c:	a8 a1       	ldd	r26, Y+32	; 0x20
    1a3e:	b9 a1       	ldd	r27, Y+33	; 0x21
    1a40:	48 0f       	add	r20, r24
    1a42:	59 1f       	adc	r21, r25
    1a44:	6a 1f       	adc	r22, r26
    1a46:	7b 1f       	adc	r23, r27
    1a48:	ce 01       	movw	r24, r28
    1a4a:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    1a4e:	88 23       	and	r24, r24
    1a50:	09 f0       	breq	.+2      	; 0x1a54 <get_fat+0x16a>
    1a52:	48 c0       	rjmp	.+144    	; 0x1ae4 <get_fat+0x1fa>
		p = &fs->win[clst * 4 % SS(fs)];
    1a54:	82 e0       	ldi	r24, 0x02	; 2
    1a56:	ee 0c       	add	r14, r14
    1a58:	ff 1c       	adc	r15, r15
    1a5a:	00 1f       	adc	r16, r16
    1a5c:	11 1f       	adc	r17, r17
    1a5e:	8a 95       	dec	r24
    1a60:	d1 f7       	brne	.-12     	; 0x1a56 <get_fat+0x16c>
    1a62:	f7 01       	movw	r30, r14
    1a64:	f1 70       	andi	r31, 0x01	; 1
    1a66:	be 96       	adiw	r30, 0x2e	; 46
    1a68:	9e 01       	movw	r18, r28
    1a6a:	2e 0f       	add	r18, r30
    1a6c:	3f 1f       	adc	r19, r31
    1a6e:	be 97       	sbiw	r30, 0x2e	; 46
		return LD_DWORD(p) & 0x0FFFFFFF;
    1a70:	d9 01       	movw	r26, r18
    1a72:	12 96       	adiw	r26, 0x02	; 2
    1a74:	8c 91       	ld	r24, X
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	a0 e0       	ldi	r26, 0x00	; 0
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	8c 01       	movw	r16, r24
    1a7e:	ff 24       	eor	r15, r15
    1a80:	ee 24       	eor	r14, r14
    1a82:	d9 01       	movw	r26, r18
    1a84:	13 96       	adiw	r26, 0x03	; 3
    1a86:	8c 91       	ld	r24, X
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	a0 e0       	ldi	r26, 0x00	; 0
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	b8 2f       	mov	r27, r24
    1a90:	aa 27       	eor	r26, r26
    1a92:	99 27       	eor	r25, r25
    1a94:	88 27       	eor	r24, r24
    1a96:	e8 2a       	or	r14, r24
    1a98:	f9 2a       	or	r15, r25
    1a9a:	0a 2b       	or	r16, r26
    1a9c:	1b 2b       	or	r17, r27
    1a9e:	d9 01       	movw	r26, r18
    1aa0:	11 96       	adiw	r26, 0x01	; 1
    1aa2:	9c 91       	ld	r25, X
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	a0 e0       	ldi	r26, 0x00	; 0
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e8 2a       	or	r14, r24
    1aac:	f9 2a       	or	r15, r25
    1aae:	0a 2b       	or	r16, r26
    1ab0:	1b 2b       	or	r17, r27
    1ab2:	ec 0f       	add	r30, r28
    1ab4:	fd 1f       	adc	r31, r29
    1ab6:	86 a5       	ldd	r24, Z+46	; 0x2e
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	a0 e0       	ldi	r26, 0x00	; 0
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e8 2a       	or	r14, r24
    1ac0:	f9 2a       	or	r15, r25
    1ac2:	0a 2b       	or	r16, r26
    1ac4:	1b 2b       	or	r17, r27
    1ac6:	8f ef       	ldi	r24, 0xFF	; 255
    1ac8:	9f ef       	ldi	r25, 0xFF	; 255
    1aca:	af ef       	ldi	r26, 0xFF	; 255
    1acc:	bf e0       	ldi	r27, 0x0F	; 15
    1ace:	e8 22       	and	r14, r24
    1ad0:	f9 22       	and	r15, r25
    1ad2:	0a 23       	and	r16, r26
    1ad4:	1b 23       	and	r17, r27
    1ad6:	0a c0       	rjmp	.+20     	; 0x1aec <get_fat+0x202>
    1ad8:	61 e0       	ldi	r22, 0x01	; 1
    1ada:	e6 2e       	mov	r14, r22
    1adc:	f1 2c       	mov	r15, r1
    1ade:	01 2d       	mov	r16, r1
    1ae0:	11 2d       	mov	r17, r1
    1ae2:	04 c0       	rjmp	.+8      	; 0x1aec <get_fat+0x202>
    1ae4:	ee 24       	eor	r14, r14
    1ae6:	ea 94       	dec	r14
    1ae8:	fe 2c       	mov	r15, r14
    1aea:	87 01       	movw	r16, r14
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
}
    1aec:	b7 01       	movw	r22, r14
    1aee:	c8 01       	movw	r24, r16
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	1f 91       	pop	r17
    1af6:	0f 91       	pop	r16
    1af8:	ff 90       	pop	r15
    1afa:	ef 90       	pop	r14
    1afc:	df 90       	pop	r13
    1afe:	cf 90       	pop	r12
    1b00:	bf 90       	pop	r11
    1b02:	08 95       	ret

00001b04 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    1b04:	af 92       	push	r10
    1b06:	bf 92       	push	r11
    1b08:	cf 92       	push	r12
    1b0a:	df 92       	push	r13
    1b0c:	ef 92       	push	r14
    1b0e:	ff 92       	push	r15
    1b10:	0f 93       	push	r16
    1b12:	1f 93       	push	r17
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	5c 01       	movw	r10, r24
    1b1a:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	15 96       	adiw	r26, 0x05	; 5
    1b20:	7c 93       	st	X, r23
    1b22:	6e 93       	st	-X, r22
    1b24:	14 97       	sbiw	r26, 0x04	; 4
	clst = dj->sclust;
    1b26:	16 96       	adiw	r26, 0x06	; 6
    1b28:	4d 91       	ld	r20, X+
    1b2a:	5d 91       	ld	r21, X+
    1b2c:	6d 91       	ld	r22, X+
    1b2e:	7c 91       	ld	r23, X
    1b30:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    1b32:	41 30       	cpi	r20, 0x01	; 1
    1b34:	51 05       	cpc	r21, r1
    1b36:	61 05       	cpc	r22, r1
    1b38:	71 05       	cpc	r23, r1
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <dir_sdi+0x3a>
    1b3c:	d3 c0       	rjmp	.+422    	; 0x1ce4 <dir_sdi+0x1e0>
    1b3e:	ed 91       	ld	r30, X+
    1b40:	fc 91       	ld	r31, X
    1b42:	86 89       	ldd	r24, Z+22	; 0x16
    1b44:	97 89       	ldd	r25, Z+23	; 0x17
    1b46:	a0 8d       	ldd	r26, Z+24	; 0x18
    1b48:	b1 8d       	ldd	r27, Z+25	; 0x19
    1b4a:	48 17       	cp	r20, r24
    1b4c:	59 07       	cpc	r21, r25
    1b4e:	6a 07       	cpc	r22, r26
    1b50:	7b 07       	cpc	r23, r27
    1b52:	08 f0       	brcs	.+2      	; 0x1b56 <dir_sdi+0x52>
    1b54:	c7 c0       	rjmp	.+398    	; 0x1ce4 <dir_sdi+0x1e0>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1b56:	41 15       	cp	r20, r1
    1b58:	51 05       	cpc	r21, r1
    1b5a:	61 05       	cpc	r22, r1
    1b5c:	71 05       	cpc	r23, r1
    1b5e:	81 f5       	brne	.+96     	; 0x1bc0 <dir_sdi+0xbc>
    1b60:	80 81       	ld	r24, Z
    1b62:	83 30       	cpi	r24, 0x03	; 3
    1b64:	49 f4       	brne	.+18     	; 0x1b78 <dir_sdi+0x74>
		clst = dj->fs->dirbase;
    1b66:	42 a1       	ldd	r20, Z+34	; 0x22
    1b68:	53 a1       	ldd	r21, Z+35	; 0x23
    1b6a:	64 a1       	ldd	r22, Z+36	; 0x24
    1b6c:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    1b6e:	41 15       	cp	r20, r1
    1b70:	51 05       	cpc	r21, r1
    1b72:	61 05       	cpc	r22, r1
    1b74:	71 05       	cpc	r23, r1
    1b76:	21 f5       	brne	.+72     	; 0x1bc0 <dir_sdi+0xbc>
		dj->clust = clst;
    1b78:	f5 01       	movw	r30, r10
    1b7a:	12 86       	std	Z+10, r1	; 0x0a
    1b7c:	13 86       	std	Z+11, r1	; 0x0b
    1b7e:	14 86       	std	Z+12, r1	; 0x0c
    1b80:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1b82:	01 90       	ld	r0, Z+
    1b84:	f0 81       	ld	r31, Z
    1b86:	e0 2d       	mov	r30, r0
    1b88:	80 85       	ldd	r24, Z+8	; 0x08
    1b8a:	91 85       	ldd	r25, Z+9	; 0x09
    1b8c:	c8 16       	cp	r12, r24
    1b8e:	d9 06       	cpc	r13, r25
    1b90:	08 f0       	brcs	.+2      	; 0x1b94 <dir_sdi+0x90>
    1b92:	a8 c0       	rjmp	.+336    	; 0x1ce4 <dir_sdi+0x1e0>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1b94:	c6 01       	movw	r24, r12
    1b96:	24 e0       	ldi	r18, 0x04	; 4
    1b98:	96 95       	lsr	r25
    1b9a:	87 95       	ror	r24
    1b9c:	2a 95       	dec	r18
    1b9e:	e1 f7       	brne	.-8      	; 0x1b98 <dir_sdi+0x94>
    1ba0:	a0 e0       	ldi	r26, 0x00	; 0
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	22 a1       	ldd	r18, Z+34	; 0x22
    1ba6:	33 a1       	ldd	r19, Z+35	; 0x23
    1ba8:	44 a1       	ldd	r20, Z+36	; 0x24
    1baa:	55 a1       	ldd	r21, Z+37	; 0x25
    1bac:	82 0f       	add	r24, r18
    1bae:	93 1f       	adc	r25, r19
    1bb0:	a4 1f       	adc	r26, r20
    1bb2:	b5 1f       	adc	r27, r21
    1bb4:	f5 01       	movw	r30, r10
    1bb6:	86 87       	std	Z+14, r24	; 0x0e
    1bb8:	97 87       	std	Z+15, r25	; 0x0f
    1bba:	a0 8b       	std	Z+16, r26	; 0x10
    1bbc:	b1 8b       	std	Z+17, r27	; 0x11
    1bbe:	7a c0       	rjmp	.+244    	; 0x1cb4 <dir_sdi+0x1b0>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    1bc0:	82 81       	ldd	r24, Z+2	; 0x02
    1bc2:	08 2f       	mov	r16, r24
    1bc4:	10 e0       	ldi	r17, 0x00	; 0
    1bc6:	84 e0       	ldi	r24, 0x04	; 4
    1bc8:	00 0f       	add	r16, r16
    1bca:	11 1f       	adc	r17, r17
    1bcc:	8a 95       	dec	r24
    1bce:	e1 f7       	brne	.-8      	; 0x1bc8 <dir_sdi+0xc4>
    1bd0:	24 c0       	rjmp	.+72     	; 0x1c1a <dir_sdi+0x116>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	0e 94 75 0c 	call	0x18ea	; 0x18ea <get_fat>
    1bd8:	ab 01       	movw	r20, r22
    1bda:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1bdc:	4f 3f       	cpi	r20, 0xFF	; 255
    1bde:	ff ef       	ldi	r31, 0xFF	; 255
    1be0:	5f 07       	cpc	r21, r31
    1be2:	ff ef       	ldi	r31, 0xFF	; 255
    1be4:	6f 07       	cpc	r22, r31
    1be6:	ff ef       	ldi	r31, 0xFF	; 255
    1be8:	7f 07       	cpc	r23, r31
    1bea:	11 f4       	brne	.+4      	; 0x1bf0 <dir_sdi+0xec>
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	7b c0       	rjmp	.+246    	; 0x1ce6 <dir_sdi+0x1e2>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    1bf0:	42 30       	cpi	r20, 0x02	; 2
    1bf2:	51 05       	cpc	r21, r1
    1bf4:	61 05       	cpc	r22, r1
    1bf6:	71 05       	cpc	r23, r1
    1bf8:	08 f4       	brcc	.+2      	; 0x1bfc <dir_sdi+0xf8>
    1bfa:	74 c0       	rjmp	.+232    	; 0x1ce4 <dir_sdi+0x1e0>
    1bfc:	d5 01       	movw	r26, r10
    1bfe:	ed 91       	ld	r30, X+
    1c00:	fc 91       	ld	r31, X
    1c02:	86 89       	ldd	r24, Z+22	; 0x16
    1c04:	97 89       	ldd	r25, Z+23	; 0x17
    1c06:	a0 8d       	ldd	r26, Z+24	; 0x18
    1c08:	b1 8d       	ldd	r27, Z+25	; 0x19
    1c0a:	48 17       	cp	r20, r24
    1c0c:	59 07       	cpc	r21, r25
    1c0e:	6a 07       	cpc	r22, r26
    1c10:	7b 07       	cpc	r23, r27
    1c12:	08 f0       	brcs	.+2      	; 0x1c16 <dir_sdi+0x112>
    1c14:	67 c0       	rjmp	.+206    	; 0x1ce4 <dir_sdi+0x1e0>
				return FR_INT_ERR;
			idx -= ic;
    1c16:	c0 1a       	sub	r12, r16
    1c18:	d1 0a       	sbc	r13, r17
    1c1a:	f5 01       	movw	r30, r10
    1c1c:	c0 81       	ld	r28, Z
    1c1e:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1c20:	c0 16       	cp	r12, r16
    1c22:	d1 06       	cpc	r13, r17
    1c24:	b0 f6       	brcc	.-84     	; 0x1bd2 <dir_sdi+0xce>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1c26:	d5 01       	movw	r26, r10
    1c28:	1a 96       	adiw	r26, 0x0a	; 10
    1c2a:	4d 93       	st	X+, r20
    1c2c:	5d 93       	st	X+, r21
    1c2e:	6d 93       	st	X+, r22
    1c30:	7c 93       	st	X, r23
    1c32:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1c34:	be ef       	ldi	r27, 0xFE	; 254
    1c36:	eb 2e       	mov	r14, r27
    1c38:	bf ef       	ldi	r27, 0xFF	; 255
    1c3a:	fb 2e       	mov	r15, r27
    1c3c:	bf ef       	ldi	r27, 0xFF	; 255
    1c3e:	0b 2f       	mov	r16, r27
    1c40:	bf ef       	ldi	r27, 0xFF	; 255
    1c42:	1b 2f       	mov	r17, r27
    1c44:	e4 0e       	add	r14, r20
    1c46:	f5 1e       	adc	r15, r21
    1c48:	06 1f       	adc	r16, r22
    1c4a:	17 1f       	adc	r17, r23
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1c4c:	8e 89       	ldd	r24, Y+22	; 0x16
    1c4e:	9f 89       	ldd	r25, Y+23	; 0x17
    1c50:	a8 8d       	ldd	r26, Y+24	; 0x18
    1c52:	b9 8d       	ldd	r27, Y+25	; 0x19
    1c54:	02 97       	sbiw	r24, 0x02	; 2
    1c56:	a1 09       	sbc	r26, r1
    1c58:	b1 09       	sbc	r27, r1
    1c5a:	e8 16       	cp	r14, r24
    1c5c:	f9 06       	cpc	r15, r25
    1c5e:	0a 07       	cpc	r16, r26
    1c60:	1b 07       	cpc	r17, r27
    1c62:	28 f0       	brcs	.+10     	; 0x1c6e <dir_sdi+0x16a>
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e0       	ldi	r20, 0x00	; 0
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	12 c0       	rjmp	.+36     	; 0x1c92 <dir_sdi+0x18e>
	return clst * fs->csize + fs->database;
    1c6e:	2a 81       	ldd	r18, Y+2	; 0x02
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e0       	ldi	r20, 0x00	; 0
    1c74:	50 e0       	ldi	r21, 0x00	; 0
    1c76:	c8 01       	movw	r24, r16
    1c78:	b7 01       	movw	r22, r14
    1c7a:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <__mulsi3>
    1c7e:	9b 01       	movw	r18, r22
    1c80:	ac 01       	movw	r20, r24
    1c82:	8e a1       	ldd	r24, Y+38	; 0x26
    1c84:	9f a1       	ldd	r25, Y+39	; 0x27
    1c86:	a8 a5       	ldd	r26, Y+40	; 0x28
    1c88:	b9 a5       	ldd	r27, Y+41	; 0x29
    1c8a:	28 0f       	add	r18, r24
    1c8c:	39 1f       	adc	r19, r25
    1c8e:	4a 1f       	adc	r20, r26
    1c90:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1c92:	c6 01       	movw	r24, r12
    1c94:	a4 e0       	ldi	r26, 0x04	; 4
    1c96:	96 95       	lsr	r25
    1c98:	87 95       	ror	r24
    1c9a:	aa 95       	dec	r26
    1c9c:	e1 f7       	brne	.-8      	; 0x1c96 <dir_sdi+0x192>
    1c9e:	a0 e0       	ldi	r26, 0x00	; 0
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	28 0f       	add	r18, r24
    1ca4:	39 1f       	adc	r19, r25
    1ca6:	4a 1f       	adc	r20, r26
    1ca8:	5b 1f       	adc	r21, r27
    1caa:	f5 01       	movw	r30, r10
    1cac:	26 87       	std	Z+14, r18	; 0x0e
    1cae:	37 87       	std	Z+15, r19	; 0x0f
    1cb0:	40 8b       	std	Z+16, r20	; 0x10
    1cb2:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    1cb4:	ff e0       	ldi	r31, 0x0F	; 15
    1cb6:	cf 22       	and	r12, r31
    1cb8:	dd 24       	eor	r13, r13
    1cba:	f5 e0       	ldi	r31, 0x05	; 5
    1cbc:	cc 0c       	add	r12, r12
    1cbe:	dd 1c       	adc	r13, r13
    1cc0:	fa 95       	dec	r31
    1cc2:	e1 f7       	brne	.-8      	; 0x1cbc <dir_sdi+0x1b8>
    1cc4:	8e e2       	ldi	r24, 0x2E	; 46
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	c8 0e       	add	r12, r24
    1cca:	d9 1e       	adc	r13, r25
    1ccc:	d5 01       	movw	r26, r10
    1cce:	8d 91       	ld	r24, X+
    1cd0:	9c 91       	ld	r25, X
    1cd2:	11 97       	sbiw	r26, 0x01	; 1
    1cd4:	8c 0d       	add	r24, r12
    1cd6:	9d 1d       	adc	r25, r13
    1cd8:	53 96       	adiw	r26, 0x13	; 19
    1cda:	9c 93       	st	X, r25
    1cdc:	8e 93       	st	-X, r24
    1cde:	52 97       	sbiw	r26, 0x12	; 18
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	01 c0       	rjmp	.+2      	; 0x1ce6 <dir_sdi+0x1e2>

	return FR_OK;	/* Seek succeeded */
    1ce4:	82 e0       	ldi	r24, 0x02	; 2
}
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	1f 91       	pop	r17
    1cec:	0f 91       	pop	r16
    1cee:	ff 90       	pop	r15
    1cf0:	ef 90       	pop	r14
    1cf2:	df 90       	pop	r13
    1cf4:	cf 90       	pop	r12
    1cf6:	bf 90       	pop	r11
    1cf8:	af 90       	pop	r10
    1cfa:	08 95       	ret

00001cfc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1cfc:	4f 92       	push	r4
    1cfe:	5f 92       	push	r5
    1d00:	6f 92       	push	r6
    1d02:	7f 92       	push	r7
    1d04:	8f 92       	push	r8
    1d06:	9f 92       	push	r9
    1d08:	af 92       	push	r10
    1d0a:	bf 92       	push	r11
    1d0c:	cf 92       	push	r12
    1d0e:	df 92       	push	r13
    1d10:	ef 92       	push	r14
    1d12:	ff 92       	push	r15
    1d14:	0f 93       	push	r16
    1d16:	1f 93       	push	r17
    1d18:	cf 93       	push	r28
    1d1a:	df 93       	push	r29
    1d1c:	ec 01       	movw	r28, r24
    1d1e:	2a 01       	movw	r4, r20
    1d20:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    1d22:	41 15       	cp	r20, r1
    1d24:	51 05       	cpc	r21, r1
    1d26:	61 05       	cpc	r22, r1
    1d28:	71 05       	cpc	r23, r1
    1d2a:	99 f4       	brne	.+38     	; 0x1d52 <create_chain+0x56>
		scl = fs->last_clust;			/* Get suggested start point */
    1d2c:	8a 84       	ldd	r8, Y+10	; 0x0a
    1d2e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d30:	ac 84       	ldd	r10, Y+12	; 0x0c
    1d32:	bd 84       	ldd	r11, Y+13	; 0x0d
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1d34:	81 14       	cp	r8, r1
    1d36:	91 04       	cpc	r9, r1
    1d38:	a1 04       	cpc	r10, r1
    1d3a:	b1 04       	cpc	r11, r1
    1d3c:	09 f1       	breq	.+66     	; 0x1d80 <create_chain+0x84>
    1d3e:	8e 89       	ldd	r24, Y+22	; 0x16
    1d40:	9f 89       	ldd	r25, Y+23	; 0x17
    1d42:	a8 8d       	ldd	r26, Y+24	; 0x18
    1d44:	b9 8d       	ldd	r27, Y+25	; 0x19
    1d46:	88 16       	cp	r8, r24
    1d48:	99 06       	cpc	r9, r25
    1d4a:	aa 06       	cpc	r10, r26
    1d4c:	bb 06       	cpc	r11, r27
    1d4e:	c0 f4       	brcc	.+48     	; 0x1d80 <create_chain+0x84>
    1d50:	1c c0       	rjmp	.+56     	; 0x1d8a <create_chain+0x8e>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1d52:	0e 94 75 0c 	call	0x18ea	; 0x18ea <get_fat>
    1d56:	9b 01       	movw	r18, r22
    1d58:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1d5a:	62 30       	cpi	r22, 0x02	; 2
    1d5c:	71 05       	cpc	r23, r1
    1d5e:	81 05       	cpc	r24, r1
    1d60:	91 05       	cpc	r25, r1
    1d62:	08 f4       	brcc	.+2      	; 0x1d66 <create_chain+0x6a>
    1d64:	8a c0       	rjmp	.+276    	; 0x1e7a <create_chain+0x17e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    1d66:	8e 89       	ldd	r24, Y+22	; 0x16
    1d68:	9f 89       	ldd	r25, Y+23	; 0x17
    1d6a:	a8 8d       	ldd	r26, Y+24	; 0x18
    1d6c:	b9 8d       	ldd	r27, Y+25	; 0x19
    1d6e:	28 17       	cp	r18, r24
    1d70:	39 07       	cpc	r19, r25
    1d72:	4a 07       	cpc	r20, r26
    1d74:	5b 07       	cpc	r21, r27
    1d76:	08 f4       	brcc	.+2      	; 0x1d7a <create_chain+0x7e>
    1d78:	8e c0       	rjmp	.+284    	; 0x1e96 <create_chain+0x19a>
    1d7a:	53 01       	movw	r10, r6
    1d7c:	42 01       	movw	r8, r4
    1d7e:	05 c0       	rjmp	.+10     	; 0x1d8a <create_chain+0x8e>
    1d80:	41 e0       	ldi	r20, 0x01	; 1
    1d82:	84 2e       	mov	r8, r20
    1d84:	91 2c       	mov	r9, r1
    1d86:	a1 2c       	mov	r10, r1
    1d88:	b1 2c       	mov	r11, r1
    1d8a:	75 01       	movw	r14, r10
    1d8c:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1d8e:	08 94       	sec
    1d90:	c1 1c       	adc	r12, r1
    1d92:	d1 1c       	adc	r13, r1
    1d94:	e1 1c       	adc	r14, r1
    1d96:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1d98:	8e 89       	ldd	r24, Y+22	; 0x16
    1d9a:	9f 89       	ldd	r25, Y+23	; 0x17
    1d9c:	a8 8d       	ldd	r26, Y+24	; 0x18
    1d9e:	b9 8d       	ldd	r27, Y+25	; 0x19
    1da0:	c8 16       	cp	r12, r24
    1da2:	d9 06       	cpc	r13, r25
    1da4:	ea 06       	cpc	r14, r26
    1da6:	fb 06       	cpc	r15, r27
    1da8:	60 f0       	brcs	.+24     	; 0x1dc2 <create_chain+0xc6>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1daa:	22 e0       	ldi	r18, 0x02	; 2
    1dac:	82 16       	cp	r8, r18
    1dae:	91 04       	cpc	r9, r1
    1db0:	a1 04       	cpc	r10, r1
    1db2:	b1 04       	cpc	r11, r1
    1db4:	08 f4       	brcc	.+2      	; 0x1db8 <create_chain+0xbc>
    1db6:	6b c0       	rjmp	.+214    	; 0x1e8e <create_chain+0x192>
    1db8:	32 e0       	ldi	r19, 0x02	; 2
    1dba:	c3 2e       	mov	r12, r19
    1dbc:	d1 2c       	mov	r13, r1
    1dbe:	e1 2c       	mov	r14, r1
    1dc0:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1dc2:	ce 01       	movw	r24, r28
    1dc4:	b7 01       	movw	r22, r14
    1dc6:	a6 01       	movw	r20, r12
    1dc8:	0e 94 75 0c 	call	0x18ea	; 0x18ea <get_fat>
    1dcc:	9b 01       	movw	r18, r22
    1dce:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    1dd0:	61 15       	cp	r22, r1
    1dd2:	71 05       	cpc	r23, r1
    1dd4:	81 05       	cpc	r24, r1
    1dd6:	91 05       	cpc	r25, r1
    1dd8:	a9 f0       	breq	.+42     	; 0x1e04 <create_chain+0x108>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1dda:	2f 3f       	cpi	r18, 0xFF	; 255
    1ddc:	8f ef       	ldi	r24, 0xFF	; 255
    1dde:	38 07       	cpc	r19, r24
    1de0:	8f ef       	ldi	r24, 0xFF	; 255
    1de2:	48 07       	cpc	r20, r24
    1de4:	8f ef       	ldi	r24, 0xFF	; 255
    1de6:	58 07       	cpc	r21, r24
    1de8:	09 f4       	brne	.+2      	; 0x1dec <create_chain+0xf0>
    1dea:	55 c0       	rjmp	.+170    	; 0x1e96 <create_chain+0x19a>
    1dec:	21 30       	cpi	r18, 0x01	; 1
    1dee:	31 05       	cpc	r19, r1
    1df0:	41 05       	cpc	r20, r1
    1df2:	51 05       	cpc	r21, r1
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <create_chain+0xfc>
    1df6:	4f c0       	rjmp	.+158    	; 0x1e96 <create_chain+0x19a>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1df8:	c8 14       	cp	r12, r8
    1dfa:	d9 04       	cpc	r13, r9
    1dfc:	ea 04       	cpc	r14, r10
    1dfe:	fb 04       	cpc	r15, r11
    1e00:	31 f6       	brne	.-116    	; 0x1d8e <create_chain+0x92>
    1e02:	45 c0       	rjmp	.+138    	; 0x1e8e <create_chain+0x192>
    1e04:	bc 2c       	mov	r11, r12
    1e06:	ad 2c       	mov	r10, r13
    1e08:	9e 2c       	mov	r9, r14
    1e0a:	8f 2c       	mov	r8, r15
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    1e0c:	ce 01       	movw	r24, r28
    1e0e:	a6 01       	movw	r20, r12
    1e10:	b7 01       	movw	r22, r14
    1e12:	0f ef       	ldi	r16, 0xFF	; 255
    1e14:	1f ef       	ldi	r17, 0xFF	; 255
    1e16:	2f ef       	ldi	r18, 0xFF	; 255
    1e18:	3f e0       	ldi	r19, 0x0F	; 15
    1e1a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <put_fat>
	if (res == FR_OK && clst != 0) {
    1e1e:	88 23       	and	r24, r24
    1e20:	51 f5       	brne	.+84     	; 0x1e76 <create_chain+0x17a>
    1e22:	41 14       	cp	r4, r1
    1e24:	51 04       	cpc	r5, r1
    1e26:	61 04       	cpc	r6, r1
    1e28:	71 04       	cpc	r7, r1
    1e2a:	49 f0       	breq	.+18     	; 0x1e3e <create_chain+0x142>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    1e2c:	ce 01       	movw	r24, r28
    1e2e:	b3 01       	movw	r22, r6
    1e30:	a2 01       	movw	r20, r4
    1e32:	86 01       	movw	r16, r12
    1e34:	97 01       	movw	r18, r14
    1e36:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <put_fat>
	}
	if (res == FR_OK) {
    1e3a:	88 23       	and	r24, r24
    1e3c:	e1 f4       	brne	.+56     	; 0x1e76 <create_chain+0x17a>
		fs->last_clust = ncl;			/* Update FSINFO */
    1e3e:	ba 86       	std	Y+10, r11	; 0x0a
    1e40:	ab 86       	std	Y+11, r10	; 0x0b
    1e42:	9c 86       	std	Y+12, r9	; 0x0c
    1e44:	8d 86       	std	Y+13, r8	; 0x0d
		if (fs->free_clust != 0xFFFFFFFF) {
    1e46:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e48:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e4a:	a8 89       	ldd	r26, Y+16	; 0x10
    1e4c:	b9 89       	ldd	r27, Y+17	; 0x11
    1e4e:	8f 3f       	cpi	r24, 0xFF	; 255
    1e50:	2f ef       	ldi	r18, 0xFF	; 255
    1e52:	92 07       	cpc	r25, r18
    1e54:	2f ef       	ldi	r18, 0xFF	; 255
    1e56:	a2 07       	cpc	r26, r18
    1e58:	2f ef       	ldi	r18, 0xFF	; 255
    1e5a:	b2 07       	cpc	r27, r18
    1e5c:	49 f0       	breq	.+18     	; 0x1e70 <create_chain+0x174>
			fs->free_clust--;
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	a1 09       	sbc	r26, r1
    1e62:	b1 09       	sbc	r27, r1
    1e64:	8e 87       	std	Y+14, r24	; 0x0e
    1e66:	9f 87       	std	Y+15, r25	; 0x0f
    1e68:	a8 8b       	std	Y+16, r26	; 0x10
    1e6a:	b9 8b       	std	Y+17, r27	; 0x11
			fs->fsi_flag = 1;
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
    1e70:	a7 01       	movw	r20, r14
    1e72:	96 01       	movw	r18, r12
    1e74:	10 c0       	rjmp	.+32     	; 0x1e96 <create_chain+0x19a>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1e76:	81 30       	cpi	r24, 0x01	; 1
    1e78:	29 f0       	breq	.+10     	; 0x1e84 <create_chain+0x188>
    1e7a:	21 e0       	ldi	r18, 0x01	; 1
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	40 e0       	ldi	r20, 0x00	; 0
    1e80:	50 e0       	ldi	r21, 0x00	; 0
    1e82:	09 c0       	rjmp	.+18     	; 0x1e96 <create_chain+0x19a>
    1e84:	2f ef       	ldi	r18, 0xFF	; 255
    1e86:	3f ef       	ldi	r19, 0xFF	; 255
    1e88:	4f ef       	ldi	r20, 0xFF	; 255
    1e8a:	5f ef       	ldi	r21, 0xFF	; 255
    1e8c:	04 c0       	rjmp	.+8      	; 0x1e96 <create_chain+0x19a>
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	50 e0       	ldi	r21, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error code */
}
    1e96:	b9 01       	movw	r22, r18
    1e98:	ca 01       	movw	r24, r20
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	1f 91       	pop	r17
    1ea0:	0f 91       	pop	r16
    1ea2:	ff 90       	pop	r15
    1ea4:	ef 90       	pop	r14
    1ea6:	df 90       	pop	r13
    1ea8:	cf 90       	pop	r12
    1eaa:	bf 90       	pop	r11
    1eac:	af 90       	pop	r10
    1eae:	9f 90       	pop	r9
    1eb0:	8f 90       	pop	r8
    1eb2:	7f 90       	pop	r7
    1eb4:	6f 90       	pop	r6
    1eb6:	5f 90       	pop	r5
    1eb8:	4f 90       	pop	r4
    1eba:	08 95       	ret

00001ebc <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    1ebc:	9f 92       	push	r9
    1ebe:	af 92       	push	r10
    1ec0:	bf 92       	push	r11
    1ec2:	cf 92       	push	r12
    1ec4:	df 92       	push	r13
    1ec6:	ef 92       	push	r14
    1ec8:	ff 92       	push	r15
    1eca:	0f 93       	push	r16
    1ecc:	1f 93       	push	r17
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	ec 01       	movw	r28, r24
    1ed4:	7a 01       	movw	r14, r20
    1ed6:	8b 01       	movw	r16, r22
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1ed8:	42 30       	cpi	r20, 0x02	; 2
    1eda:	51 05       	cpc	r21, r1
    1edc:	61 05       	cpc	r22, r1
    1ede:	71 05       	cpc	r23, r1
    1ee0:	08 f4       	brcc	.+2      	; 0x1ee4 <remove_chain+0x28>
    1ee2:	58 c0       	rjmp	.+176    	; 0x1f94 <remove_chain+0xd8>
    1ee4:	8e 89       	ldd	r24, Y+22	; 0x16
    1ee6:	9f 89       	ldd	r25, Y+23	; 0x17
    1ee8:	a8 8d       	ldd	r26, Y+24	; 0x18
    1eea:	b9 8d       	ldd	r27, Y+25	; 0x19
    1eec:	48 17       	cp	r20, r24
    1eee:	59 07       	cpc	r21, r25
    1ef0:	6a 07       	cpc	r22, r26
    1ef2:	7b 07       	cpc	r23, r27
    1ef4:	08 f4       	brcc	.+2      	; 0x1ef8 <remove_chain+0x3c>
    1ef6:	41 c0       	rjmp	.+130    	; 0x1f7a <remove_chain+0xbe>
    1ef8:	4d c0       	rjmp	.+154    	; 0x1f94 <remove_chain+0xd8>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1efa:	ce 01       	movw	r24, r28
    1efc:	b8 01       	movw	r22, r16
    1efe:	a7 01       	movw	r20, r14
    1f00:	0e 94 75 0c 	call	0x18ea	; 0x18ea <get_fat>
    1f04:	5b 01       	movw	r10, r22
    1f06:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    1f08:	61 15       	cp	r22, r1
    1f0a:	71 05       	cpc	r23, r1
    1f0c:	81 05       	cpc	r24, r1
    1f0e:	91 05       	cpc	r25, r1
    1f10:	09 f4       	brne	.+2      	; 0x1f14 <remove_chain+0x58>
    1f12:	42 c0       	rjmp	.+132    	; 0x1f98 <remove_chain+0xdc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	a8 16       	cp	r10, r24
    1f18:	b1 04       	cpc	r11, r1
    1f1a:	c1 04       	cpc	r12, r1
    1f1c:	d1 04       	cpc	r13, r1
    1f1e:	d1 f1       	breq	.+116    	; 0x1f94 <remove_chain+0xd8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1f20:	2f ef       	ldi	r18, 0xFF	; 255
    1f22:	a2 16       	cp	r10, r18
    1f24:	2f ef       	ldi	r18, 0xFF	; 255
    1f26:	b2 06       	cpc	r11, r18
    1f28:	2f ef       	ldi	r18, 0xFF	; 255
    1f2a:	c2 06       	cpc	r12, r18
    1f2c:	2f ef       	ldi	r18, 0xFF	; 255
    1f2e:	d2 06       	cpc	r13, r18
    1f30:	11 f4       	brne	.+4      	; 0x1f36 <remove_chain+0x7a>
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	32 c0       	rjmp	.+100    	; 0x1f9a <remove_chain+0xde>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1f36:	ce 01       	movw	r24, r28
    1f38:	b8 01       	movw	r22, r16
    1f3a:	a7 01       	movw	r20, r14
    1f3c:	00 e0       	ldi	r16, 0x00	; 0
    1f3e:	10 e0       	ldi	r17, 0x00	; 0
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <put_fat>
			if (res != FR_OK) break;
    1f48:	88 23       	and	r24, r24
    1f4a:	39 f5       	brne	.+78     	; 0x1f9a <remove_chain+0xde>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    1f4c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f4e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f50:	a8 89       	ldd	r26, Y+16	; 0x10
    1f52:	b9 89       	ldd	r27, Y+17	; 0x11
    1f54:	8f 3f       	cpi	r24, 0xFF	; 255
    1f56:	2f ef       	ldi	r18, 0xFF	; 255
    1f58:	92 07       	cpc	r25, r18
    1f5a:	2f ef       	ldi	r18, 0xFF	; 255
    1f5c:	a2 07       	cpc	r26, r18
    1f5e:	2f ef       	ldi	r18, 0xFF	; 255
    1f60:	b2 07       	cpc	r27, r18
    1f62:	41 f0       	breq	.+16     	; 0x1f74 <remove_chain+0xb8>
				fs->free_clust++;
    1f64:	01 96       	adiw	r24, 0x01	; 1
    1f66:	a1 1d       	adc	r26, r1
    1f68:	b1 1d       	adc	r27, r1
    1f6a:	8e 87       	std	Y+14, r24	; 0x0e
    1f6c:	9f 87       	std	Y+15, r25	; 0x0f
    1f6e:	a8 8b       	std	Y+16, r26	; 0x10
    1f70:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    1f72:	9d 82       	std	Y+5, r9	; 0x05
    1f74:	86 01       	movw	r16, r12
    1f76:	75 01       	movw	r14, r10
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <remove_chain+0xc2>
    1f7a:	99 24       	eor	r9, r9
    1f7c:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    1f7e:	8e 89       	ldd	r24, Y+22	; 0x16
    1f80:	9f 89       	ldd	r25, Y+23	; 0x17
    1f82:	a8 8d       	ldd	r26, Y+24	; 0x18
    1f84:	b9 8d       	ldd	r27, Y+25	; 0x19
    1f86:	e8 16       	cp	r14, r24
    1f88:	f9 06       	cpc	r15, r25
    1f8a:	0a 07       	cpc	r16, r26
    1f8c:	1b 07       	cpc	r17, r27
    1f8e:	08 f4       	brcc	.+2      	; 0x1f92 <remove_chain+0xd6>
    1f90:	b4 cf       	rjmp	.-152    	; 0x1efa <remove_chain+0x3e>
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <remove_chain+0xdc>
    1f94:	82 e0       	ldi	r24, 0x02	; 2
    1f96:	01 c0       	rjmp	.+2      	; 0x1f9a <remove_chain+0xde>
    1f98:	80 e0       	ldi	r24, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	1f 91       	pop	r17
    1fa0:	0f 91       	pop	r16
    1fa2:	ff 90       	pop	r15
    1fa4:	ef 90       	pop	r14
    1fa6:	df 90       	pop	r13
    1fa8:	cf 90       	pop	r12
    1faa:	bf 90       	pop	r11
    1fac:	af 90       	pop	r10
    1fae:	9f 90       	pop	r9
    1fb0:	08 95       	ret

00001fb2 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    1fb2:	cf 92       	push	r12
    1fb4:	df 92       	push	r13
    1fb6:	ef 92       	push	r14
    1fb8:	ff 92       	push	r15
    1fba:	0f 93       	push	r16
    1fbc:	1f 93       	push	r17
    1fbe:	cf 93       	push	r28
    1fc0:	df 93       	push	r29
    1fc2:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    1fc4:	6a 81       	ldd	r22, Y+2	; 0x02
    1fc6:	7b 81       	ldd	r23, Y+3	; 0x03
    1fc8:	88 81       	ld	r24, Y
    1fca:	99 81       	ldd	r25, Y+1	; 0x01
    1fcc:	0e 94 76 06 	call	0xcec	; 0xcec <validate>
    1fd0:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    1fd2:	88 23       	and	r24, r24
    1fd4:	09 f0       	breq	.+2      	; 0x1fd8 <f_truncate+0x26>
    1fd6:	6c c0       	rjmp	.+216    	; 0x20b0 <f_truncate+0xfe>
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
    1fd8:	6c 81       	ldd	r22, Y+4	; 0x04
    1fda:	67 ff       	sbrs	r22, 7
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <f_truncate+0x30>
    1fde:	12 e0       	ldi	r17, 0x02	; 2
    1fe0:	67 c0       	rjmp	.+206    	; 0x20b0 <f_truncate+0xfe>
			res = FR_INT_ERR;
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
    1fe2:	61 ff       	sbrs	r22, 1
    1fe4:	6f c0       	rjmp	.+222    	; 0x20c4 <f_truncate+0x112>
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
    1fe6:	2e 81       	ldd	r18, Y+6	; 0x06
    1fe8:	3f 81       	ldd	r19, Y+7	; 0x07
    1fea:	48 85       	ldd	r20, Y+8	; 0x08
    1fec:	59 85       	ldd	r21, Y+9	; 0x09
    1fee:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ff0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ff2:	ac 85       	ldd	r26, Y+12	; 0x0c
    1ff4:	bd 85       	ldd	r27, Y+13	; 0x0d
    1ff6:	28 17       	cp	r18, r24
    1ff8:	39 07       	cpc	r19, r25
    1ffa:	4a 07       	cpc	r20, r26
    1ffc:	5b 07       	cpc	r21, r27
    1ffe:	08 f0       	brcs	.+2      	; 0x2002 <f_truncate+0x50>
    2000:	57 c0       	rjmp	.+174    	; 0x20b0 <f_truncate+0xfe>
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    2002:	2a 87       	std	Y+10, r18	; 0x0a
    2004:	3b 87       	std	Y+11, r19	; 0x0b
    2006:	4c 87       	std	Y+12, r20	; 0x0c
    2008:	5d 87       	std	Y+13, r21	; 0x0d
			fp->flag |= FA__WRITTEN;
    200a:	60 62       	ori	r22, 0x20	; 32
    200c:	6c 83       	std	Y+4, r22	; 0x04
    200e:	88 81       	ld	r24, Y
    2010:	99 81       	ldd	r25, Y+1	; 0x01
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    2012:	21 15       	cp	r18, r1
    2014:	31 05       	cpc	r19, r1
    2016:	41 05       	cpc	r20, r1
    2018:	51 05       	cpc	r21, r1
    201a:	61 f4       	brne	.+24     	; 0x2034 <f_truncate+0x82>
				res = remove_chain(fp->fs, fp->sclust);
    201c:	4e 85       	ldd	r20, Y+14	; 0x0e
    201e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2020:	68 89       	ldd	r22, Y+16	; 0x10
    2022:	79 89       	ldd	r23, Y+17	; 0x11
    2024:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <remove_chain>
    2028:	18 2f       	mov	r17, r24
				fp->sclust = 0;
    202a:	1e 86       	std	Y+14, r1	; 0x0e
    202c:	1f 86       	std	Y+15, r1	; 0x0f
    202e:	18 8a       	std	Y+16, r1	; 0x10
    2030:	19 8a       	std	Y+17, r1	; 0x11
    2032:	39 c0       	rjmp	.+114    	; 0x20a6 <f_truncate+0xf4>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
    2034:	4a 89       	ldd	r20, Y+18	; 0x12
    2036:	5b 89       	ldd	r21, Y+19	; 0x13
    2038:	6c 89       	ldd	r22, Y+20	; 0x14
    203a:	7d 89       	ldd	r23, Y+21	; 0x15
    203c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <get_fat>
    2040:	6b 01       	movw	r12, r22
    2042:	7c 01       	movw	r14, r24
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    2044:	8f ef       	ldi	r24, 0xFF	; 255
    2046:	c8 16       	cp	r12, r24
    2048:	8f ef       	ldi	r24, 0xFF	; 255
    204a:	d8 06       	cpc	r13, r24
    204c:	8f ef       	ldi	r24, 0xFF	; 255
    204e:	e8 06       	cpc	r14, r24
    2050:	8f ef       	ldi	r24, 0xFF	; 255
    2052:	f8 06       	cpc	r15, r24
    2054:	11 f4       	brne	.+4      	; 0x205a <f_truncate+0xa8>
    2056:	11 e0       	ldi	r17, 0x01	; 1
    2058:	28 c0       	rjmp	.+80     	; 0x20aa <f_truncate+0xf8>
				if (ncl == 1) res = FR_INT_ERR;
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	c8 16       	cp	r12, r24
    205e:	d1 04       	cpc	r13, r1
    2060:	e1 04       	cpc	r14, r1
    2062:	f1 04       	cpc	r15, r1
    2064:	89 f1       	breq	.+98     	; 0x20c8 <f_truncate+0x116>
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
    2066:	e8 81       	ld	r30, Y
    2068:	f9 81       	ldd	r31, Y+1	; 0x01
    206a:	86 89       	ldd	r24, Z+22	; 0x16
    206c:	97 89       	ldd	r25, Z+23	; 0x17
    206e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2070:	b1 8d       	ldd	r27, Z+25	; 0x19
    2072:	c8 16       	cp	r12, r24
    2074:	d9 06       	cpc	r13, r25
    2076:	ea 06       	cpc	r14, r26
    2078:	fb 06       	cpc	r15, r27
    207a:	d0 f4       	brcc	.+52     	; 0x20b0 <f_truncate+0xfe>
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
    207c:	4a 89       	ldd	r20, Y+18	; 0x12
    207e:	5b 89       	ldd	r21, Y+19	; 0x13
    2080:	6c 89       	ldd	r22, Y+20	; 0x14
    2082:	7d 89       	ldd	r23, Y+21	; 0x15
    2084:	cf 01       	movw	r24, r30
    2086:	0f ef       	ldi	r16, 0xFF	; 255
    2088:	1f ef       	ldi	r17, 0xFF	; 255
    208a:	2f ef       	ldi	r18, 0xFF	; 255
    208c:	3f e0       	ldi	r19, 0x0F	; 15
    208e:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <put_fat>
    2092:	18 2f       	mov	r17, r24
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    2094:	88 23       	and	r24, r24
    2096:	49 f4       	brne	.+18     	; 0x20aa <f_truncate+0xf8>
    2098:	88 81       	ld	r24, Y
    209a:	99 81       	ldd	r25, Y+1	; 0x01
    209c:	b7 01       	movw	r22, r14
    209e:	a6 01       	movw	r20, r12
    20a0:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <remove_chain>
    20a4:	18 2f       	mov	r17, r24
				}
			}
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
    20a6:	11 23       	and	r17, r17
    20a8:	19 f0       	breq	.+6      	; 0x20b0 <f_truncate+0xfe>
    20aa:	8c 81       	ldd	r24, Y+4	; 0x04
    20ac:	80 68       	ori	r24, 0x80	; 128
    20ae:	8c 83       	std	Y+4, r24	; 0x04
	}

	LEAVE_FF(fp->fs, res);
}
    20b0:	81 2f       	mov	r24, r17
    20b2:	df 91       	pop	r29
    20b4:	cf 91       	pop	r28
    20b6:	1f 91       	pop	r17
    20b8:	0f 91       	pop	r16
    20ba:	ff 90       	pop	r15
    20bc:	ef 90       	pop	r14
    20be:	df 90       	pop	r13
    20c0:	cf 90       	pop	r12
    20c2:	08 95       	ret
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
				}
			}
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
    20c4:	17 e0       	ldi	r17, 0x07	; 7
    20c6:	f4 cf       	rjmp	.-24     	; 0x20b0 <f_truncate+0xfe>
    20c8:	12 e0       	ldi	r17, 0x02	; 2
    20ca:	ef cf       	rjmp	.-34     	; 0x20aa <f_truncate+0xf8>

000020cc <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    20cc:	2f 92       	push	r2
    20ce:	3f 92       	push	r3
    20d0:	4f 92       	push	r4
    20d2:	5f 92       	push	r5
    20d4:	6f 92       	push	r6
    20d6:	7f 92       	push	r7
    20d8:	8f 92       	push	r8
    20da:	9f 92       	push	r9
    20dc:	af 92       	push	r10
    20de:	bf 92       	push	r11
    20e0:	cf 92       	push	r12
    20e2:	df 92       	push	r13
    20e4:	ef 92       	push	r14
    20e6:	ff 92       	push	r15
    20e8:	0f 93       	push	r16
    20ea:	1f 93       	push	r17
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	00 d0       	rcall	.+0      	; 0x20f2 <f_lseek+0x26>
    20f2:	00 d0       	rcall	.+0      	; 0x20f4 <f_lseek+0x28>
    20f4:	0f 92       	push	r0
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	9d 83       	std	Y+5, r25	; 0x05
    20fc:	8c 83       	std	Y+4, r24	; 0x04
    20fe:	7a 01       	movw	r14, r20
    2100:	8b 01       	movw	r16, r22
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    2102:	dc 01       	movw	r26, r24
    2104:	12 96       	adiw	r26, 0x02	; 2
    2106:	6d 91       	ld	r22, X+
    2108:	7c 91       	ld	r23, X
    210a:	13 97       	sbiw	r26, 0x03	; 3
    210c:	8d 91       	ld	r24, X+
    210e:	9c 91       	ld	r25, X
    2110:	0e 94 76 06 	call	0xcec	; 0xcec <validate>
    2114:	8b 83       	std	Y+3, r24	; 0x03
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2116:	88 23       	and	r24, r24
    2118:	09 f0       	breq	.+2      	; 0x211c <f_lseek+0x50>
    211a:	aa c1       	rjmp	.+852    	; 0x2470 <f_lseek+0x3a4>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    211c:	ec 81       	ldd	r30, Y+4	; 0x04
    211e:	fd 81       	ldd	r31, Y+5	; 0x05
    2120:	84 81       	ldd	r24, Z+4	; 0x04
    2122:	87 fd       	sbrc	r24, 7
    2124:	90 c0       	rjmp	.+288    	; 0x2246 <f_lseek+0x17a>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    2126:	ac 81       	ldd	r26, Y+4	; 0x04
    2128:	bd 81       	ldd	r27, Y+5	; 0x05
    212a:	1a 96       	adiw	r26, 0x0a	; 10
    212c:	6d 90       	ld	r6, X+
    212e:	7d 90       	ld	r7, X+
    2130:	8d 90       	ld	r8, X+
    2132:	9c 90       	ld	r9, X
    2134:	1d 97       	sbiw	r26, 0x0d	; 13
    2136:	6e 14       	cp	r6, r14
    2138:	7f 04       	cpc	r7, r15
    213a:	80 06       	cpc	r8, r16
    213c:	91 06       	cpc	r9, r17
    213e:	10 f4       	brcc	.+4      	; 0x2144 <f_lseek+0x78>
    2140:	81 ff       	sbrs	r24, 1
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <f_lseek+0x7c>
    2144:	37 01       	movw	r6, r14
    2146:	48 01       	movw	r8, r16
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    2148:	ec 81       	ldd	r30, Y+4	; 0x04
    214a:	fd 81       	ldd	r31, Y+5	; 0x05
    214c:	e6 80       	ldd	r14, Z+6	; 0x06
    214e:	f7 80       	ldd	r15, Z+7	; 0x07
    2150:	00 85       	ldd	r16, Z+8	; 0x08
    2152:	11 85       	ldd	r17, Z+9	; 0x09
		fp->fptr = nsect = 0;
    2154:	16 82       	std	Z+6, r1	; 0x06
    2156:	17 82       	std	Z+7, r1	; 0x07
    2158:	10 86       	std	Z+8, r1	; 0x08
    215a:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    215c:	61 14       	cp	r6, r1
    215e:	71 04       	cpc	r7, r1
    2160:	81 04       	cpc	r8, r1
    2162:	91 04       	cpc	r9, r1
    2164:	09 f4       	brne	.+2      	; 0x2168 <f_lseek+0x9c>
    2166:	51 c1       	rjmp	.+674    	; 0x240a <f_lseek+0x33e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    2168:	01 90       	ld	r0, Z+
    216a:	f0 81       	ld	r31, Z
    216c:	e0 2d       	mov	r30, r0
    216e:	fa 83       	std	Y+2, r31	; 0x02
    2170:	e9 83       	std	Y+1, r30	; 0x01
    2172:	82 81       	ldd	r24, Z+2	; 0x02
    2174:	a8 2e       	mov	r10, r24
    2176:	bb 24       	eor	r11, r11
    2178:	cc 24       	eor	r12, r12
    217a:	dd 24       	eor	r13, r13
    217c:	f9 e0       	ldi	r31, 0x09	; 9
    217e:	aa 0c       	add	r10, r10
    2180:	bb 1c       	adc	r11, r11
    2182:	cc 1c       	adc	r12, r12
    2184:	dd 1c       	adc	r13, r13
    2186:	fa 95       	dec	r31
    2188:	d1 f7       	brne	.-12     	; 0x217e <f_lseek+0xb2>
			if (ifptr > 0 &&
    218a:	e1 14       	cp	r14, r1
    218c:	f1 04       	cpc	r15, r1
    218e:	01 05       	cpc	r16, r1
    2190:	11 05       	cpc	r17, r1
    2192:	c1 f1       	breq	.+112    	; 0x2204 <f_lseek+0x138>
    2194:	17 01       	movw	r2, r14
    2196:	28 01       	movw	r4, r16
    2198:	08 94       	sec
    219a:	21 08       	sbc	r2, r1
    219c:	31 08       	sbc	r3, r1
    219e:	41 08       	sbc	r4, r1
    21a0:	51 08       	sbc	r5, r1
    21a2:	c4 01       	movw	r24, r8
    21a4:	b3 01       	movw	r22, r6
    21a6:	61 50       	subi	r22, 0x01	; 1
    21a8:	70 40       	sbci	r23, 0x00	; 0
    21aa:	80 40       	sbci	r24, 0x00	; 0
    21ac:	90 40       	sbci	r25, 0x00	; 0
    21ae:	a6 01       	movw	r20, r12
    21b0:	95 01       	movw	r18, r10
    21b2:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <__udivmodsi4>
    21b6:	79 01       	movw	r14, r18
    21b8:	8a 01       	movw	r16, r20
    21ba:	c2 01       	movw	r24, r4
    21bc:	b1 01       	movw	r22, r2
    21be:	a6 01       	movw	r20, r12
    21c0:	95 01       	movw	r18, r10
    21c2:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <__udivmodsi4>
    21c6:	e2 16       	cp	r14, r18
    21c8:	f3 06       	cpc	r15, r19
    21ca:	04 07       	cpc	r16, r20
    21cc:	15 07       	cpc	r17, r21
    21ce:	d0 f0       	brcs	.+52     	; 0x2204 <f_lseek+0x138>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    21d0:	88 27       	eor	r24, r24
    21d2:	99 27       	eor	r25, r25
    21d4:	dc 01       	movw	r26, r24
    21d6:	8a 19       	sub	r24, r10
    21d8:	9b 09       	sbc	r25, r11
    21da:	ac 09       	sbc	r26, r12
    21dc:	bd 09       	sbc	r27, r13
    21de:	82 21       	and	r24, r2
    21e0:	93 21       	and	r25, r3
    21e2:	a4 21       	and	r26, r4
    21e4:	b5 21       	and	r27, r5
    21e6:	ec 81       	ldd	r30, Y+4	; 0x04
    21e8:	fd 81       	ldd	r31, Y+5	; 0x05
    21ea:	86 83       	std	Z+6, r24	; 0x06
    21ec:	97 83       	std	Z+7, r25	; 0x07
    21ee:	a0 87       	std	Z+8, r26	; 0x08
    21f0:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    21f2:	68 1a       	sub	r6, r24
    21f4:	79 0a       	sbc	r7, r25
    21f6:	8a 0a       	sbc	r8, r26
    21f8:	9b 0a       	sbc	r9, r27
				clst = fp->clust;
    21fa:	42 89       	ldd	r20, Z+18	; 0x12
    21fc:	53 89       	ldd	r21, Z+19	; 0x13
    21fe:	64 89       	ldd	r22, Z+20	; 0x14
    2200:	75 89       	ldd	r23, Z+21	; 0x15
    2202:	3a c0       	rjmp	.+116    	; 0x2278 <f_lseek+0x1ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    2204:	ac 81       	ldd	r26, Y+4	; 0x04
    2206:	bd 81       	ldd	r27, Y+5	; 0x05
    2208:	1e 96       	adiw	r26, 0x0e	; 14
    220a:	4d 91       	ld	r20, X+
    220c:	5d 91       	ld	r21, X+
    220e:	6d 91       	ld	r22, X+
    2210:	7c 91       	ld	r23, X
    2212:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    2214:	41 15       	cp	r20, r1
    2216:	51 05       	cpc	r21, r1
    2218:	61 05       	cpc	r22, r1
    221a:	71 05       	cpc	r23, r1
    221c:	29 f5       	brne	.+74     	; 0x2268 <f_lseek+0x19c>
					clst = create_chain(fp->fs, 0);
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	9a 81       	ldd	r25, Y+2	; 0x02
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	50 e0       	ldi	r21, 0x00	; 0
    2226:	60 e0       	ldi	r22, 0x00	; 0
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <create_chain>
    222e:	ab 01       	movw	r20, r22
    2230:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2232:	41 30       	cpi	r20, 0x01	; 1
    2234:	51 05       	cpc	r21, r1
    2236:	61 05       	cpc	r22, r1
    2238:	71 05       	cpc	r23, r1
    223a:	41 f4       	brne	.+16     	; 0x224c <f_lseek+0x180>
    223c:	ec 81       	ldd	r30, Y+4	; 0x04
    223e:	fd 81       	ldd	r31, Y+5	; 0x05
    2240:	84 81       	ldd	r24, Z+4	; 0x04
    2242:	80 68       	ori	r24, 0x80	; 128
    2244:	84 83       	std	Z+4, r24	; 0x04
    2246:	f2 e0       	ldi	r31, 0x02	; 2
    2248:	fb 83       	std	Y+3, r31	; 0x03
    224a:	12 c1       	rjmp	.+548    	; 0x2470 <f_lseek+0x3a4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    224c:	4f 3f       	cpi	r20, 0xFF	; 255
    224e:	8f ef       	ldi	r24, 0xFF	; 255
    2250:	58 07       	cpc	r21, r24
    2252:	8f ef       	ldi	r24, 0xFF	; 255
    2254:	68 07       	cpc	r22, r24
    2256:	8f ef       	ldi	r24, 0xFF	; 255
    2258:	78 07       	cpc	r23, r24
    225a:	b1 f1       	breq	.+108    	; 0x22c8 <f_lseek+0x1fc>
					fp->sclust = clst;
    225c:	ec 81       	ldd	r30, Y+4	; 0x04
    225e:	fd 81       	ldd	r31, Y+5	; 0x05
    2260:	46 87       	std	Z+14, r20	; 0x0e
    2262:	57 87       	std	Z+15, r21	; 0x0f
    2264:	60 8b       	std	Z+16, r22	; 0x10
    2266:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->clust = clst;
    2268:	ac 81       	ldd	r26, Y+4	; 0x04
    226a:	bd 81       	ldd	r27, Y+5	; 0x05
    226c:	52 96       	adiw	r26, 0x12	; 18
    226e:	4d 93       	st	X+, r20
    2270:	5d 93       	st	X+, r21
    2272:	6d 93       	st	X+, r22
    2274:	7c 93       	st	X, r23
    2276:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    2278:	41 15       	cp	r20, r1
    227a:	51 05       	cpc	r21, r1
    227c:	61 05       	cpc	r22, r1
    227e:	71 05       	cpc	r23, r1
    2280:	09 f0       	breq	.+2      	; 0x2284 <f_lseek+0x1b8>
    2282:	59 c0       	rjmp	.+178    	; 0x2336 <f_lseek+0x26a>
    2284:	c2 c0       	rjmp	.+388    	; 0x240a <f_lseek+0x33e>
				while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2286:	ec 81       	ldd	r30, Y+4	; 0x04
    2288:	fd 81       	ldd	r31, Y+5	; 0x05
    228a:	84 81       	ldd	r24, Z+4	; 0x04
    228c:	20 81       	ld	r18, Z
    228e:	31 81       	ldd	r19, Z+1	; 0x01
    2290:	81 ff       	sbrs	r24, 1
    2292:	0d c0       	rjmp	.+26     	; 0x22ae <f_lseek+0x1e2>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    2294:	c9 01       	movw	r24, r18
    2296:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <create_chain>
    229a:	ab 01       	movw	r20, r22
    229c:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    229e:	41 15       	cp	r20, r1
    22a0:	51 05       	cpc	r21, r1
    22a2:	61 05       	cpc	r22, r1
    22a4:	71 05       	cpc	r23, r1
    22a6:	41 f4       	brne	.+16     	; 0x22b8 <f_lseek+0x1ec>
    22a8:	35 01       	movw	r6, r10
    22aa:	46 01       	movw	r8, r12
    22ac:	4a c0       	rjmp	.+148    	; 0x2342 <f_lseek+0x276>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    22ae:	c9 01       	movw	r24, r18
    22b0:	0e 94 75 0c 	call	0x18ea	; 0x18ea <get_fat>
    22b4:	ab 01       	movw	r20, r22
    22b6:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    22b8:	4f 3f       	cpi	r20, 0xFF	; 255
    22ba:	ff ef       	ldi	r31, 0xFF	; 255
    22bc:	5f 07       	cpc	r21, r31
    22be:	ff ef       	ldi	r31, 0xFF	; 255
    22c0:	6f 07       	cpc	r22, r31
    22c2:	ff ef       	ldi	r31, 0xFF	; 255
    22c4:	7f 07       	cpc	r23, r31
    22c6:	51 f4       	brne	.+20     	; 0x22dc <f_lseek+0x210>
    22c8:	ac 81       	ldd	r26, Y+4	; 0x04
    22ca:	bd 81       	ldd	r27, Y+5	; 0x05
    22cc:	14 96       	adiw	r26, 0x04	; 4
    22ce:	8c 91       	ld	r24, X
    22d0:	14 97       	sbiw	r26, 0x04	; 4
    22d2:	80 68       	ori	r24, 0x80	; 128
    22d4:	14 96       	adiw	r26, 0x04	; 4
    22d6:	8c 93       	st	X, r24
    22d8:	b1 e0       	ldi	r27, 0x01	; 1
    22da:	87 c0       	rjmp	.+270    	; 0x23ea <f_lseek+0x31e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    22dc:	42 30       	cpi	r20, 0x02	; 2
    22de:	51 05       	cpc	r21, r1
    22e0:	61 05       	cpc	r22, r1
    22e2:	71 05       	cpc	r23, r1
    22e4:	08 f4       	brcc	.+2      	; 0x22e8 <f_lseek+0x21c>
    22e6:	aa cf       	rjmp	.-172    	; 0x223c <f_lseek+0x170>
    22e8:	ac 81       	ldd	r26, Y+4	; 0x04
    22ea:	bd 81       	ldd	r27, Y+5	; 0x05
    22ec:	ed 91       	ld	r30, X+
    22ee:	fc 91       	ld	r31, X
    22f0:	86 89       	ldd	r24, Z+22	; 0x16
    22f2:	97 89       	ldd	r25, Z+23	; 0x17
    22f4:	a0 8d       	ldd	r26, Z+24	; 0x18
    22f6:	b1 8d       	ldd	r27, Z+25	; 0x19
    22f8:	48 17       	cp	r20, r24
    22fa:	59 07       	cpc	r21, r25
    22fc:	6a 07       	cpc	r22, r26
    22fe:	7b 07       	cpc	r23, r27
    2300:	08 f0       	brcs	.+2      	; 0x2304 <f_lseek+0x238>
    2302:	9c cf       	rjmp	.-200    	; 0x223c <f_lseek+0x170>
					fp->clust = clst;
    2304:	ac 81       	ldd	r26, Y+4	; 0x04
    2306:	bd 81       	ldd	r27, Y+5	; 0x05
    2308:	52 96       	adiw	r26, 0x12	; 18
    230a:	4d 93       	st	X+, r20
    230c:	5d 93       	st	X+, r21
    230e:	6d 93       	st	X+, r22
    2310:	7c 93       	st	X, r23
    2312:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    2314:	fd 01       	movw	r30, r26
    2316:	86 81       	ldd	r24, Z+6	; 0x06
    2318:	97 81       	ldd	r25, Z+7	; 0x07
    231a:	a0 85       	ldd	r26, Z+8	; 0x08
    231c:	b1 85       	ldd	r27, Z+9	; 0x09
    231e:	8a 0d       	add	r24, r10
    2320:	9b 1d       	adc	r25, r11
    2322:	ac 1d       	adc	r26, r12
    2324:	bd 1d       	adc	r27, r13
    2326:	86 83       	std	Z+6, r24	; 0x06
    2328:	97 83       	std	Z+7, r25	; 0x07
    232a:	a0 87       	std	Z+8, r26	; 0x08
    232c:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    232e:	6a 18       	sub	r6, r10
    2330:	7b 08       	sbc	r7, r11
    2332:	8c 08       	sbc	r8, r12
    2334:	9d 08       	sbc	r9, r13
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    2336:	a6 14       	cp	r10, r6
    2338:	b7 04       	cpc	r11, r7
    233a:	c8 04       	cpc	r12, r8
    233c:	d9 04       	cpc	r13, r9
    233e:	08 f4       	brcc	.+2      	; 0x2342 <f_lseek+0x276>
    2340:	a2 cf       	rjmp	.-188    	; 0x2286 <f_lseek+0x1ba>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    2342:	ec 81       	ldd	r30, Y+4	; 0x04
    2344:	fd 81       	ldd	r31, Y+5	; 0x05
    2346:	86 81       	ldd	r24, Z+6	; 0x06
    2348:	97 81       	ldd	r25, Z+7	; 0x07
    234a:	a0 85       	ldd	r26, Z+8	; 0x08
    234c:	b1 85       	ldd	r27, Z+9	; 0x09
    234e:	86 0d       	add	r24, r6
    2350:	97 1d       	adc	r25, r7
    2352:	a8 1d       	adc	r26, r8
    2354:	b9 1d       	adc	r27, r9
    2356:	86 83       	std	Z+6, r24	; 0x06
    2358:	97 83       	std	Z+7, r25	; 0x07
    235a:	a0 87       	std	Z+8, r26	; 0x08
    235c:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    235e:	d4 01       	movw	r26, r8
    2360:	c3 01       	movw	r24, r6
    2362:	91 70       	andi	r25, 0x01	; 1
    2364:	a0 70       	andi	r26, 0x00	; 0
    2366:	b0 70       	andi	r27, 0x00	; 0
    2368:	00 97       	sbiw	r24, 0x00	; 0
    236a:	a1 05       	cpc	r26, r1
    236c:	b1 05       	cpc	r27, r1
    236e:	09 f4       	brne	.+2      	; 0x2372 <f_lseek+0x2a6>
    2370:	4c c0       	rjmp	.+152    	; 0x240a <f_lseek+0x33e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    2372:	c0 80       	ld	r12, Z
    2374:	d1 80       	ldd	r13, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    2376:	ee ef       	ldi	r30, 0xFE	; 254
    2378:	ee 2e       	mov	r14, r30
    237a:	ef ef       	ldi	r30, 0xFF	; 255
    237c:	fe 2e       	mov	r15, r30
    237e:	ef ef       	ldi	r30, 0xFF	; 255
    2380:	0e 2f       	mov	r16, r30
    2382:	ef ef       	ldi	r30, 0xFF	; 255
    2384:	1e 2f       	mov	r17, r30
    2386:	e4 0e       	add	r14, r20
    2388:	f5 1e       	adc	r15, r21
    238a:	06 1f       	adc	r16, r22
    238c:	17 1f       	adc	r17, r23
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    238e:	f6 01       	movw	r30, r12
    2390:	86 89       	ldd	r24, Z+22	; 0x16
    2392:	97 89       	ldd	r25, Z+23	; 0x17
    2394:	a0 8d       	ldd	r26, Z+24	; 0x18
    2396:	b1 8d       	ldd	r27, Z+25	; 0x19
    2398:	02 97       	sbiw	r24, 0x02	; 2
    239a:	a1 09       	sbc	r26, r1
    239c:	b1 09       	sbc	r27, r1
    239e:	e8 16       	cp	r14, r24
    23a0:	f9 06       	cpc	r15, r25
    23a2:	0a 07       	cpc	r16, r26
    23a4:	1b 07       	cpc	r17, r27
    23a6:	c0 f4       	brcc	.+48     	; 0x23d8 <f_lseek+0x30c>
	return clst * fs->csize + fs->database;
    23a8:	22 81       	ldd	r18, Z+2	; 0x02
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	40 e0       	ldi	r20, 0x00	; 0
    23ae:	50 e0       	ldi	r21, 0x00	; 0
    23b0:	c8 01       	movw	r24, r16
    23b2:	b7 01       	movw	r22, r14
    23b4:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <__mulsi3>
    23b8:	9b 01       	movw	r18, r22
    23ba:	ac 01       	movw	r20, r24
    23bc:	f6 01       	movw	r30, r12
    23be:	86 a1       	ldd	r24, Z+38	; 0x26
    23c0:	97 a1       	ldd	r25, Z+39	; 0x27
    23c2:	a0 a5       	ldd	r26, Z+40	; 0x28
    23c4:	b1 a5       	ldd	r27, Z+41	; 0x29
    23c6:	28 0f       	add	r18, r24
    23c8:	39 1f       	adc	r19, r25
    23ca:	4a 1f       	adc	r20, r26
    23cc:	5b 1f       	adc	r21, r27
					ofs -= bcs;
				}
				fp->fptr += ofs;
				if (ofs % SS(fp->fs)) {
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    23ce:	21 15       	cp	r18, r1
    23d0:	31 05       	cpc	r19, r1
    23d2:	41 05       	cpc	r20, r1
    23d4:	51 05       	cpc	r21, r1
    23d6:	59 f4       	brne	.+22     	; 0x23ee <f_lseek+0x322>
    23d8:	ac 81       	ldd	r26, Y+4	; 0x04
    23da:	bd 81       	ldd	r27, Y+5	; 0x05
    23dc:	14 96       	adiw	r26, 0x04	; 4
    23de:	8c 91       	ld	r24, X
    23e0:	14 97       	sbiw	r26, 0x04	; 4
    23e2:	80 68       	ori	r24, 0x80	; 128
    23e4:	14 96       	adiw	r26, 0x04	; 4
    23e6:	8c 93       	st	X, r24
    23e8:	b2 e0       	ldi	r27, 0x02	; 2
    23ea:	bb 83       	std	Y+3, r27	; 0x03
    23ec:	41 c0       	rjmp	.+130    	; 0x2470 <f_lseek+0x3a4>
					nsect += ofs / SS(fp->fs);
    23ee:	84 01       	movw	r16, r8
    23f0:	73 01       	movw	r14, r6
    23f2:	69 e0       	ldi	r22, 0x09	; 9
    23f4:	16 95       	lsr	r17
    23f6:	07 95       	ror	r16
    23f8:	f7 94       	ror	r15
    23fa:	e7 94       	ror	r14
    23fc:	6a 95       	dec	r22
    23fe:	d1 f7       	brne	.-12     	; 0x23f4 <f_lseek+0x328>
    2400:	e2 0e       	add	r14, r18
    2402:	f3 1e       	adc	r15, r19
    2404:	04 1f       	adc	r16, r20
    2406:	15 1f       	adc	r17, r21
    2408:	03 c0       	rjmp	.+6      	; 0x2410 <f_lseek+0x344>
    240a:	ee 24       	eor	r14, r14
    240c:	ff 24       	eor	r15, r15
    240e:	87 01       	movw	r16, r14
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    2410:	ec 81       	ldd	r30, Y+4	; 0x04
    2412:	fd 81       	ldd	r31, Y+5	; 0x05
    2414:	86 81       	ldd	r24, Z+6	; 0x06
    2416:	97 81       	ldd	r25, Z+7	; 0x07
    2418:	a0 85       	ldd	r26, Z+8	; 0x08
    241a:	b1 85       	ldd	r27, Z+9	; 0x09
    241c:	91 70       	andi	r25, 0x01	; 1
    241e:	a0 70       	andi	r26, 0x00	; 0
    2420:	b0 70       	andi	r27, 0x00	; 0
    2422:	00 97       	sbiw	r24, 0x00	; 0
    2424:	a1 05       	cpc	r26, r1
    2426:	b1 05       	cpc	r27, r1
    2428:	69 f0       	breq	.+26     	; 0x2444 <f_lseek+0x378>
    242a:	86 89       	ldd	r24, Z+22	; 0x16
    242c:	97 89       	ldd	r25, Z+23	; 0x17
    242e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2430:	b1 8d       	ldd	r27, Z+25	; 0x19
    2432:	e8 16       	cp	r14, r24
    2434:	f9 06       	cpc	r15, r25
    2436:	0a 07       	cpc	r16, r26
    2438:	1b 07       	cpc	r17, r27
    243a:	21 f0       	breq	.+8      	; 0x2444 <f_lseek+0x378>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    243c:	e6 8a       	std	Z+22, r14	; 0x16
    243e:	f7 8a       	std	Z+23, r15	; 0x17
    2440:	00 8f       	std	Z+24, r16	; 0x18
    2442:	11 8f       	std	Z+25, r17	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    2444:	ec 81       	ldd	r30, Y+4	; 0x04
    2446:	fd 81       	ldd	r31, Y+5	; 0x05
    2448:	26 81       	ldd	r18, Z+6	; 0x06
    244a:	37 81       	ldd	r19, Z+7	; 0x07
    244c:	40 85       	ldd	r20, Z+8	; 0x08
    244e:	51 85       	ldd	r21, Z+9	; 0x09
    2450:	82 85       	ldd	r24, Z+10	; 0x0a
    2452:	93 85       	ldd	r25, Z+11	; 0x0b
    2454:	a4 85       	ldd	r26, Z+12	; 0x0c
    2456:	b5 85       	ldd	r27, Z+13	; 0x0d
    2458:	82 17       	cp	r24, r18
    245a:	93 07       	cpc	r25, r19
    245c:	a4 07       	cpc	r26, r20
    245e:	b5 07       	cpc	r27, r21
    2460:	38 f4       	brcc	.+14     	; 0x2470 <f_lseek+0x3a4>
			fp->fsize = fp->fptr;
    2462:	22 87       	std	Z+10, r18	; 0x0a
    2464:	33 87       	std	Z+11, r19	; 0x0b
    2466:	44 87       	std	Z+12, r20	; 0x0c
    2468:	55 87       	std	Z+13, r21	; 0x0d
			fp->flag |= FA__WRITTEN;
    246a:	84 81       	ldd	r24, Z+4	; 0x04
    246c:	80 62       	ori	r24, 0x20	; 32
    246e:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    2470:	8b 81       	ldd	r24, Y+3	; 0x03
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	cf 91       	pop	r28
    247e:	df 91       	pop	r29
    2480:	1f 91       	pop	r17
    2482:	0f 91       	pop	r16
    2484:	ff 90       	pop	r15
    2486:	ef 90       	pop	r14
    2488:	df 90       	pop	r13
    248a:	cf 90       	pop	r12
    248c:	bf 90       	pop	r11
    248e:	af 90       	pop	r10
    2490:	9f 90       	pop	r9
    2492:	8f 90       	pop	r8
    2494:	7f 90       	pop	r7
    2496:	6f 90       	pop	r6
    2498:	5f 90       	pop	r5
    249a:	4f 90       	pop	r4
    249c:	3f 90       	pop	r3
    249e:	2f 90       	pop	r2
    24a0:	08 95       	ret

000024a2 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    24a2:	cf 93       	push	r28
    24a4:	df 93       	push	r29
    24a6:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dj, dj->index);
    24a8:	6c 81       	ldd	r22, Y+4	; 0x04
    24aa:	7d 81       	ldd	r23, Y+5	; 0x05
    24ac:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <dir_sdi>
    24b0:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    24b2:	88 23       	and	r24, r24
    24b4:	99 f4       	brne	.+38     	; 0x24dc <dir_remove+0x3a>
		res = move_window(dj->fs, dj->sect);
    24b6:	4e 85       	ldd	r20, Y+14	; 0x0e
    24b8:	5f 85       	ldd	r21, Y+15	; 0x0f
    24ba:	68 89       	ldd	r22, Y+16	; 0x10
    24bc:	79 89       	ldd	r23, Y+17	; 0x11
    24be:	88 81       	ld	r24, Y
    24c0:	99 81       	ldd	r25, Y+1	; 0x01
    24c2:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    24c6:	98 2f       	mov	r25, r24
		if (res == FR_OK) {
    24c8:	88 23       	and	r24, r24
    24ca:	41 f4       	brne	.+16     	; 0x24dc <dir_remove+0x3a>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    24cc:	ea 89       	ldd	r30, Y+18	; 0x12
    24ce:	fb 89       	ldd	r31, Y+19	; 0x13
    24d0:	85 ee       	ldi	r24, 0xE5	; 229
    24d2:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
    24d4:	e8 81       	ld	r30, Y
    24d6:	f9 81       	ldd	r31, Y+1	; 0x01
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    24dc:	89 2f       	mov	r24, r25
    24de:	df 91       	pop	r29
    24e0:	cf 91       	pop	r28
    24e2:	08 95       	ret

000024e4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    24e4:	4f 92       	push	r4
    24e6:	5f 92       	push	r5
    24e8:	6f 92       	push	r6
    24ea:	7f 92       	push	r7
    24ec:	8f 92       	push	r8
    24ee:	9f 92       	push	r9
    24f0:	af 92       	push	r10
    24f2:	bf 92       	push	r11
    24f4:	cf 92       	push	r12
    24f6:	df 92       	push	r13
    24f8:	ef 92       	push	r14
    24fa:	ff 92       	push	r15
    24fc:	0f 93       	push	r16
    24fe:	1f 93       	push	r17
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	ec 01       	movw	r28, r24
    2506:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    2508:	6c 80       	ldd	r6, Y+4	; 0x04
    250a:	7d 80       	ldd	r7, Y+5	; 0x05
    250c:	08 94       	sec
    250e:	61 1c       	adc	r6, r1
    2510:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    2512:	61 14       	cp	r6, r1
    2514:	71 04       	cpc	r7, r1
    2516:	09 f4       	brne	.+2      	; 0x251a <dir_next+0x36>
    2518:	4c c1       	rjmp	.+664    	; 0x27b2 <dir_next+0x2ce>
    251a:	8e 85       	ldd	r24, Y+14	; 0x0e
    251c:	9f 85       	ldd	r25, Y+15	; 0x0f
    251e:	a8 89       	ldd	r26, Y+16	; 0x10
    2520:	b9 89       	ldd	r27, Y+17	; 0x11
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	a1 05       	cpc	r26, r1
    2526:	b1 05       	cpc	r27, r1
    2528:	09 f4       	brne	.+2      	; 0x252c <dir_next+0x48>
    252a:	43 c1       	rjmp	.+646    	; 0x27b2 <dir_next+0x2ce>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    252c:	0f e0       	ldi	r16, 0x0F	; 15
    252e:	40 2e       	mov	r4, r16
    2530:	51 2c       	mov	r5, r1
    2532:	46 20       	and	r4, r6
    2534:	57 20       	and	r5, r7
    2536:	41 14       	cp	r4, r1
    2538:	51 04       	cpc	r5, r1
    253a:	09 f0       	breq	.+2      	; 0x253e <dir_next+0x5a>
    253c:	27 c1       	rjmp	.+590    	; 0x278c <dir_next+0x2a8>
		dj->sect++;					/* Next sector */
    253e:	01 96       	adiw	r24, 0x01	; 1
    2540:	a1 1d       	adc	r26, r1
    2542:	b1 1d       	adc	r27, r1
    2544:	8e 87       	std	Y+14, r24	; 0x0e
    2546:	9f 87       	std	Y+15, r25	; 0x0f
    2548:	a8 8b       	std	Y+16, r26	; 0x10
    254a:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    254c:	4a 85       	ldd	r20, Y+10	; 0x0a
    254e:	5b 85       	ldd	r21, Y+11	; 0x0b
    2550:	6c 85       	ldd	r22, Y+12	; 0x0c
    2552:	7d 85       	ldd	r23, Y+13	; 0x0d
    2554:	e8 81       	ld	r30, Y
    2556:	f9 81       	ldd	r31, Y+1	; 0x01
    2558:	41 15       	cp	r20, r1
    255a:	51 05       	cpc	r21, r1
    255c:	61 05       	cpc	r22, r1
    255e:	71 05       	cpc	r23, r1
    2560:	39 f4       	brne	.+14     	; 0x2570 <dir_next+0x8c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    2562:	80 85       	ldd	r24, Z+8	; 0x08
    2564:	91 85       	ldd	r25, Z+9	; 0x09
    2566:	68 16       	cp	r6, r24
    2568:	79 06       	cpc	r7, r25
    256a:	08 f4       	brcc	.+2      	; 0x256e <dir_next+0x8a>
    256c:	0f c1       	rjmp	.+542    	; 0x278c <dir_next+0x2a8>
    256e:	21 c1       	rjmp	.+578    	; 0x27b2 <dir_next+0x2ce>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    2570:	82 81       	ldd	r24, Z+2	; 0x02
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	93 01       	movw	r18, r6
    2578:	14 e0       	ldi	r17, 0x04	; 4
    257a:	36 95       	lsr	r19
    257c:	27 95       	ror	r18
    257e:	1a 95       	dec	r17
    2580:	e1 f7       	brne	.-8      	; 0x257a <dir_next+0x96>
    2582:	82 23       	and	r24, r18
    2584:	93 23       	and	r25, r19
    2586:	89 2b       	or	r24, r25
    2588:	09 f0       	breq	.+2      	; 0x258c <dir_next+0xa8>
    258a:	00 c1       	rjmp	.+512    	; 0x278c <dir_next+0x2a8>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    258c:	cf 01       	movw	r24, r30
    258e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <get_fat>
    2592:	7b 01       	movw	r14, r22
    2594:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    2596:	62 30       	cpi	r22, 0x02	; 2
    2598:	71 05       	cpc	r23, r1
    259a:	81 05       	cpc	r24, r1
    259c:	91 05       	cpc	r25, r1
    259e:	08 f4       	brcc	.+2      	; 0x25a2 <dir_next+0xbe>
    25a0:	0a c1       	rjmp	.+532    	; 0x27b6 <dir_next+0x2d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    25a2:	8f ef       	ldi	r24, 0xFF	; 255
    25a4:	e8 16       	cp	r14, r24
    25a6:	8f ef       	ldi	r24, 0xFF	; 255
    25a8:	f8 06       	cpc	r15, r24
    25aa:	8f ef       	ldi	r24, 0xFF	; 255
    25ac:	08 07       	cpc	r16, r24
    25ae:	8f ef       	ldi	r24, 0xFF	; 255
    25b0:	18 07       	cpc	r17, r24
    25b2:	09 f4       	brne	.+2      	; 0x25b6 <dir_next+0xd2>
    25b4:	02 c1       	rjmp	.+516    	; 0x27ba <dir_next+0x2d6>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    25b6:	e8 81       	ld	r30, Y
    25b8:	f9 81       	ldd	r31, Y+1	; 0x01
    25ba:	86 89       	ldd	r24, Z+22	; 0x16
    25bc:	97 89       	ldd	r25, Z+23	; 0x17
    25be:	a0 8d       	ldd	r26, Z+24	; 0x18
    25c0:	b1 8d       	ldd	r27, Z+25	; 0x19
    25c2:	e8 16       	cp	r14, r24
    25c4:	f9 06       	cpc	r15, r25
    25c6:	0a 07       	cpc	r16, r26
    25c8:	1b 07       	cpc	r17, r27
    25ca:	08 f4       	brcc	.+2      	; 0x25ce <dir_next+0xea>
    25cc:	a6 c0       	rjmp	.+332    	; 0x271a <dir_next+0x236>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    25ce:	cd 28       	or	r12, r13
    25d0:	09 f4       	brne	.+2      	; 0x25d4 <dir_next+0xf0>
    25d2:	ef c0       	rjmp	.+478    	; 0x27b2 <dir_next+0x2ce>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    25d4:	4a 85       	ldd	r20, Y+10	; 0x0a
    25d6:	5b 85       	ldd	r21, Y+11	; 0x0b
    25d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    25da:	7d 85       	ldd	r23, Y+13	; 0x0d
    25dc:	cf 01       	movw	r24, r30
    25de:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <create_chain>
    25e2:	7b 01       	movw	r14, r22
    25e4:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    25e6:	61 15       	cp	r22, r1
    25e8:	71 05       	cpc	r23, r1
    25ea:	81 05       	cpc	r24, r1
    25ec:	91 05       	cpc	r25, r1
    25ee:	11 f4       	brne	.+4      	; 0x25f4 <dir_next+0x110>
    25f0:	87 e0       	ldi	r24, 0x07	; 7
    25f2:	e4 c0       	rjmp	.+456    	; 0x27bc <dir_next+0x2d8>
					if (clst == 1) return FR_INT_ERR;
    25f4:	91 e0       	ldi	r25, 0x01	; 1
    25f6:	e9 16       	cp	r14, r25
    25f8:	f1 04       	cpc	r15, r1
    25fa:	01 05       	cpc	r16, r1
    25fc:	11 05       	cpc	r17, r1
    25fe:	09 f4       	brne	.+2      	; 0x2602 <dir_next+0x11e>
    2600:	da c0       	rjmp	.+436    	; 0x27b6 <dir_next+0x2d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2602:	af ef       	ldi	r26, 0xFF	; 255
    2604:	ea 16       	cp	r14, r26
    2606:	af ef       	ldi	r26, 0xFF	; 255
    2608:	fa 06       	cpc	r15, r26
    260a:	af ef       	ldi	r26, 0xFF	; 255
    260c:	0a 07       	cpc	r16, r26
    260e:	af ef       	ldi	r26, 0xFF	; 255
    2610:	1a 07       	cpc	r17, r26
    2612:	09 f4       	brne	.+2      	; 0x2616 <dir_next+0x132>
    2614:	d2 c0       	rjmp	.+420    	; 0x27ba <dir_next+0x2d6>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    2616:	88 81       	ld	r24, Y
    2618:	99 81       	ldd	r25, Y+1	; 0x01
    261a:	40 e0       	ldi	r20, 0x00	; 0
    261c:	50 e0       	ldi	r21, 0x00	; 0
    261e:	60 e0       	ldi	r22, 0x00	; 0
    2620:	70 e0       	ldi	r23, 0x00	; 0
    2622:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    2626:	88 23       	and	r24, r24
    2628:	09 f0       	breq	.+2      	; 0x262c <dir_next+0x148>
    262a:	c7 c0       	rjmp	.+398    	; 0x27ba <dir_next+0x2d6>
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    262c:	e8 81       	ld	r30, Y
    262e:	f9 81       	ldd	r31, Y+1	; 0x01
    2630:	be 96       	adiw	r30, 0x2e	; 46
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	92 e0       	ldi	r25, 0x02	; 2
    2636:	01 c0       	rjmp	.+2      	; 0x263a <dir_next+0x156>

	while (cnt--)
		*d++ = (BYTE)val;
    2638:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	bf ef       	ldi	r27, 0xFF	; 255
    263e:	8f 3f       	cpi	r24, 0xFF	; 255
    2640:	9b 07       	cpc	r25, r27
    2642:	d1 f7       	brne	.-12     	; 0x2638 <dir_next+0x154>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    2644:	88 80       	ld	r8, Y
    2646:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    2648:	be ef       	ldi	r27, 0xFE	; 254
    264a:	ab 2e       	mov	r10, r27
    264c:	bf ef       	ldi	r27, 0xFF	; 255
    264e:	bb 2e       	mov	r11, r27
    2650:	bf ef       	ldi	r27, 0xFF	; 255
    2652:	cb 2e       	mov	r12, r27
    2654:	bf ef       	ldi	r27, 0xFF	; 255
    2656:	db 2e       	mov	r13, r27
    2658:	ae 0c       	add	r10, r14
    265a:	bf 1c       	adc	r11, r15
    265c:	c0 1e       	adc	r12, r16
    265e:	d1 1e       	adc	r13, r17
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    2660:	f4 01       	movw	r30, r8
    2662:	86 89       	ldd	r24, Z+22	; 0x16
    2664:	97 89       	ldd	r25, Z+23	; 0x17
    2666:	a0 8d       	ldd	r26, Z+24	; 0x18
    2668:	b1 8d       	ldd	r27, Z+25	; 0x19
    266a:	02 97       	sbiw	r24, 0x02	; 2
    266c:	a1 09       	sbc	r26, r1
    266e:	b1 09       	sbc	r27, r1
    2670:	a8 16       	cp	r10, r24
    2672:	b9 06       	cpc	r11, r25
    2674:	ca 06       	cpc	r12, r26
    2676:	db 06       	cpc	r13, r27
    2678:	28 f0       	brcs	.+10     	; 0x2684 <dir_next+0x1a0>
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	40 e0       	ldi	r20, 0x00	; 0
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	15 c0       	rjmp	.+42     	; 0x26ae <dir_next+0x1ca>
	return clst * fs->csize + fs->database;
    2684:	d4 01       	movw	r26, r8
    2686:	12 96       	adiw	r26, 0x02	; 2
    2688:	2c 91       	ld	r18, X
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e0       	ldi	r20, 0x00	; 0
    268e:	50 e0       	ldi	r21, 0x00	; 0
    2690:	c6 01       	movw	r24, r12
    2692:	b5 01       	movw	r22, r10
    2694:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <__mulsi3>
    2698:	9b 01       	movw	r18, r22
    269a:	ac 01       	movw	r20, r24
    269c:	f4 01       	movw	r30, r8
    269e:	86 a1       	ldd	r24, Z+38	; 0x26
    26a0:	97 a1       	ldd	r25, Z+39	; 0x27
    26a2:	a0 a5       	ldd	r26, Z+40	; 0x28
    26a4:	b1 a5       	ldd	r27, Z+41	; 0x29
    26a6:	28 0f       	add	r18, r24
    26a8:	39 1f       	adc	r19, r25
    26aa:	4a 1f       	adc	r20, r26
    26ac:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    26ae:	d4 01       	movw	r26, r8
    26b0:	9a 96       	adiw	r26, 0x2a	; 42
    26b2:	2d 93       	st	X+, r18
    26b4:	3d 93       	st	X+, r19
    26b6:	4d 93       	st	X+, r20
    26b8:	5c 93       	st	X, r21
    26ba:	9d 97       	sbiw	r26, 0x2d	; 45
    26bc:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    26be:	cc 24       	eor	r12, r12
    26c0:	c3 94       	inc	r12
    26c2:	1a c0       	rjmp	.+52     	; 0x26f8 <dir_next+0x214>
    26c4:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    26c6:	88 81       	ld	r24, Y
    26c8:	99 81       	ldd	r25, Y+1	; 0x01
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	50 e0       	ldi	r21, 0x00	; 0
    26ce:	60 e0       	ldi	r22, 0x00	; 0
    26d0:	70 e0       	ldi	r23, 0x00	; 0
    26d2:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    26d6:	88 23       	and	r24, r24
    26d8:	09 f0       	breq	.+2      	; 0x26dc <dir_next+0x1f8>
    26da:	6f c0       	rjmp	.+222    	; 0x27ba <dir_next+0x2d6>
						dj->fs->winsect++;
    26dc:	e8 81       	ld	r30, Y
    26de:	f9 81       	ldd	r31, Y+1	; 0x01
    26e0:	82 a5       	ldd	r24, Z+42	; 0x2a
    26e2:	93 a5       	ldd	r25, Z+43	; 0x2b
    26e4:	a4 a5       	ldd	r26, Z+44	; 0x2c
    26e6:	b5 a5       	ldd	r27, Z+45	; 0x2d
    26e8:	01 96       	adiw	r24, 0x01	; 1
    26ea:	a1 1d       	adc	r26, r1
    26ec:	b1 1d       	adc	r27, r1
    26ee:	82 a7       	std	Z+42, r24	; 0x2a
    26f0:	93 a7       	std	Z+43, r25	; 0x2b
    26f2:	a4 a7       	std	Z+44, r26	; 0x2c
    26f4:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    26f6:	d3 94       	inc	r13
    26f8:	e8 81       	ld	r30, Y
    26fa:	f9 81       	ldd	r31, Y+1	; 0x01
    26fc:	82 81       	ldd	r24, Z+2	; 0x02
    26fe:	d8 16       	cp	r13, r24
    2700:	08 f3       	brcs	.-62     	; 0x26c4 <dir_next+0x1e0>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    2702:	82 a5       	ldd	r24, Z+42	; 0x2a
    2704:	93 a5       	ldd	r25, Z+43	; 0x2b
    2706:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2708:	b5 a5       	ldd	r27, Z+45	; 0x2d
    270a:	8d 19       	sub	r24, r13
    270c:	91 09       	sbc	r25, r1
    270e:	a1 09       	sbc	r26, r1
    2710:	b1 09       	sbc	r27, r1
    2712:	82 a7       	std	Z+42, r24	; 0x2a
    2714:	93 a7       	std	Z+43, r25	; 0x2b
    2716:	a4 a7       	std	Z+44, r26	; 0x2c
    2718:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    271a:	ea 86       	std	Y+10, r14	; 0x0a
    271c:	fb 86       	std	Y+11, r15	; 0x0b
    271e:	0c 87       	std	Y+12, r16	; 0x0c
    2720:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    2722:	c8 80       	ld	r12, Y
    2724:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    2726:	8e ef       	ldi	r24, 0xFE	; 254
    2728:	9f ef       	ldi	r25, 0xFF	; 255
    272a:	af ef       	ldi	r26, 0xFF	; 255
    272c:	bf ef       	ldi	r27, 0xFF	; 255
    272e:	e8 0e       	add	r14, r24
    2730:	f9 1e       	adc	r15, r25
    2732:	0a 1f       	adc	r16, r26
    2734:	1b 1f       	adc	r17, r27
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    2736:	f6 01       	movw	r30, r12
    2738:	86 89       	ldd	r24, Z+22	; 0x16
    273a:	97 89       	ldd	r25, Z+23	; 0x17
    273c:	a0 8d       	ldd	r26, Z+24	; 0x18
    273e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2740:	02 97       	sbiw	r24, 0x02	; 2
    2742:	a1 09       	sbc	r26, r1
    2744:	b1 09       	sbc	r27, r1
    2746:	e8 16       	cp	r14, r24
    2748:	f9 06       	cpc	r15, r25
    274a:	0a 07       	cpc	r16, r26
    274c:	1b 07       	cpc	r17, r27
    274e:	28 f0       	brcs	.+10     	; 0x275a <dir_next+0x276>
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e0       	ldi	r20, 0x00	; 0
    2756:	50 e0       	ldi	r21, 0x00	; 0
    2758:	15 c0       	rjmp	.+42     	; 0x2784 <dir_next+0x2a0>
	return clst * fs->csize + fs->database;
    275a:	d6 01       	movw	r26, r12
    275c:	12 96       	adiw	r26, 0x02	; 2
    275e:	2c 91       	ld	r18, X
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e0       	ldi	r20, 0x00	; 0
    2764:	50 e0       	ldi	r21, 0x00	; 0
    2766:	c8 01       	movw	r24, r16
    2768:	b7 01       	movw	r22, r14
    276a:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <__mulsi3>
    276e:	9b 01       	movw	r18, r22
    2770:	ac 01       	movw	r20, r24
    2772:	f6 01       	movw	r30, r12
    2774:	86 a1       	ldd	r24, Z+38	; 0x26
    2776:	97 a1       	ldd	r25, Z+39	; 0x27
    2778:	a0 a5       	ldd	r26, Z+40	; 0x28
    277a:	b1 a5       	ldd	r27, Z+41	; 0x29
    277c:	28 0f       	add	r18, r24
    277e:	39 1f       	adc	r19, r25
    2780:	4a 1f       	adc	r20, r26
    2782:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    2784:	2e 87       	std	Y+14, r18	; 0x0e
    2786:	3f 87       	std	Y+15, r19	; 0x0f
    2788:	48 8b       	std	Y+16, r20	; 0x10
    278a:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    278c:	7d 82       	std	Y+5, r7	; 0x05
    278e:	6c 82       	std	Y+4, r6	; 0x04
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    2790:	a5 e0       	ldi	r26, 0x05	; 5
    2792:	44 0c       	add	r4, r4
    2794:	55 1c       	adc	r5, r5
    2796:	aa 95       	dec	r26
    2798:	e1 f7       	brne	.-8      	; 0x2792 <dir_next+0x2ae>
    279a:	8e e2       	ldi	r24, 0x2E	; 46
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	48 0e       	add	r4, r24
    27a0:	59 1e       	adc	r5, r25
    27a2:	88 81       	ld	r24, Y
    27a4:	99 81       	ldd	r25, Y+1	; 0x01
    27a6:	84 0d       	add	r24, r4
    27a8:	95 1d       	adc	r25, r5
    27aa:	9b 8b       	std	Y+19, r25	; 0x13
    27ac:	8a 8b       	std	Y+18, r24	; 0x12
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	05 c0       	rjmp	.+10     	; 0x27bc <dir_next+0x2d8>

	return FR_OK;
    27b2:	84 e0       	ldi	r24, 0x04	; 4
    27b4:	03 c0       	rjmp	.+6      	; 0x27bc <dir_next+0x2d8>
    27b6:	82 e0       	ldi	r24, 0x02	; 2
    27b8:	01 c0       	rjmp	.+2      	; 0x27bc <dir_next+0x2d8>
    27ba:	81 e0       	ldi	r24, 0x01	; 1
}
    27bc:	df 91       	pop	r29
    27be:	cf 91       	pop	r28
    27c0:	1f 91       	pop	r17
    27c2:	0f 91       	pop	r16
    27c4:	ff 90       	pop	r15
    27c6:	ef 90       	pop	r14
    27c8:	df 90       	pop	r13
    27ca:	cf 90       	pop	r12
    27cc:	bf 90       	pop	r11
    27ce:	af 90       	pop	r10
    27d0:	9f 90       	pop	r9
    27d2:	8f 90       	pop	r8
    27d4:	7f 90       	pop	r7
    27d6:	6f 90       	pop	r6
    27d8:	5f 90       	pop	r5
    27da:	4f 90       	pop	r4
    27dc:	08 95       	ret

000027de <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    27de:	5f 92       	push	r5
    27e0:	6f 92       	push	r6
    27e2:	7f 92       	push	r7
    27e4:	8f 92       	push	r8
    27e6:	9f 92       	push	r9
    27e8:	af 92       	push	r10
    27ea:	bf 92       	push	r11
    27ec:	cf 92       	push	r12
    27ee:	df 92       	push	r13
    27f0:	ef 92       	push	r14
    27f2:	ff 92       	push	r15
    27f4:	0f 93       	push	r16
    27f6:	1f 93       	push	r17
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	ec 01       	movw	r28, r24
    27fe:	7b 01       	movw	r14, r22
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    2800:	fb 01       	movw	r30, r22
    2802:	80 81       	ld	r24, Z
    2804:	8f 32       	cpi	r24, 0x2F	; 47
    2806:	11 f0       	breq	.+4      	; 0x280c <follow_path+0x2e>
    2808:	8c 35       	cpi	r24, 0x5C	; 92
    280a:	19 f4       	brne	.+6      	; 0x2812 <follow_path+0x34>
		path++;
    280c:	08 94       	sec
    280e:	e1 1c       	adc	r14, r1
    2810:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Start from the root dir */
    2812:	1e 82       	std	Y+6, r1	; 0x06
    2814:	1f 82       	std	Y+7, r1	; 0x07
    2816:	18 86       	std	Y+8, r1	; 0x08
    2818:	19 86       	std	Y+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    281a:	f7 01       	movw	r30, r14
    281c:	80 81       	ld	r24, Z
    281e:	80 32       	cpi	r24, 0x20	; 32
    2820:	60 f4       	brcc	.+24     	; 0x283a <follow_path+0x5c>
		res = dir_sdi(dj, 0);
    2822:	ce 01       	movw	r24, r28
    2824:	60 e0       	ldi	r22, 0x00	; 0
    2826:	70 e0       	ldi	r23, 0x00	; 0
    2828:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <dir_sdi>
		dj->dir = 0;
    282c:	1b 8a       	std	Y+19, r1	; 0x13
    282e:	1a 8a       	std	Y+18, r1	; 0x12
    2830:	1b c1       	rjmp	.+566    	; 0x2a68 <follow_path+0x28a>
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    2832:	08 94       	sec
    2834:	e1 1c       	adc	r14, r1
    2836:	f1 1c       	adc	r15, r1
    2838:	03 c0       	rjmp	.+6      	; 0x2840 <follow_path+0x62>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    283a:	00 e2       	ldi	r16, 0x20	; 32
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    283c:	35 e0       	ldi	r19, 0x05	; 5
    283e:	53 2e       	mov	r5, r19
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    2840:	f7 01       	movw	r30, r14
    2842:	80 81       	ld	r24, Z
    2844:	8f 32       	cpi	r24, 0x2F	; 47
    2846:	a9 f3       	breq	.-22     	; 0x2832 <follow_path+0x54>
    2848:	8c 35       	cpi	r24, 0x5C	; 92
    284a:	99 f3       	breq	.-26     	; 0x2832 <follow_path+0x54>
	sfn = dj->fn;
    284c:	ac 89       	ldd	r26, Y+20	; 0x14
    284e:	bd 89       	ldd	r27, Y+21	; 0x15
    2850:	fd 01       	movw	r30, r26
    2852:	8b e0       	ldi	r24, 0x0B	; 11
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	01 c0       	rjmp	.+2      	; 0x285a <follow_path+0x7c>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    2858:	01 93       	st	Z+, r16
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	2f ef       	ldi	r18, 0xFF	; 255
    285e:	8f 3f       	cpi	r24, 0xFF	; 255
    2860:	92 07       	cpc	r25, r18
    2862:	d1 f7       	brne	.-12     	; 0x2858 <follow_path+0x7a>
    2864:	40 e0       	ldi	r20, 0x00	; 0
    2866:	50 e0       	ldi	r21, 0x00	; 0
    2868:	cc 24       	eor	r12, r12
    286a:	dd 24       	eor	r13, r13
    286c:	28 e0       	ldi	r18, 0x08	; 8
    286e:	a2 2e       	mov	r10, r18
    2870:	b1 2c       	mov	r11, r1
    2872:	10 e0       	ldi	r17, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    2874:	f7 01       	movw	r30, r14
    2876:	ec 0d       	add	r30, r12
    2878:	fd 1d       	adc	r31, r13
    287a:	20 81       	ld	r18, Z
    287c:	08 94       	sec
    287e:	c1 1c       	adc	r12, r1
    2880:	d1 1c       	adc	r13, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    2882:	21 32       	cpi	r18, 0x21	; 33
    2884:	08 f4       	brcc	.+2      	; 0x2888 <follow_path+0xaa>
    2886:	66 c0       	rjmp	.+204    	; 0x2954 <follow_path+0x176>
    2888:	2f 32       	cpi	r18, 0x2F	; 47
    288a:	09 f4       	brne	.+2      	; 0x288e <follow_path+0xb0>
    288c:	fd c0       	rjmp	.+506    	; 0x2a88 <follow_path+0x2aa>
    288e:	2c 35       	cpi	r18, 0x5C	; 92
    2890:	09 f4       	brne	.+2      	; 0x2894 <follow_path+0xb6>
    2892:	fa c0       	rjmp	.+500    	; 0x2a88 <follow_path+0x2aa>
		if (c == '.' || i >= ni) {
    2894:	2e 32       	cpi	r18, 0x2E	; 46
    2896:	19 f0       	breq	.+6      	; 0x289e <follow_path+0xc0>
    2898:	4a 15       	cp	r20, r10
    289a:	5b 05       	cpc	r21, r11
    289c:	80 f0       	brcs	.+32     	; 0x28be <follow_path+0xe0>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    289e:	88 e0       	ldi	r24, 0x08	; 8
    28a0:	a8 16       	cp	r10, r24
    28a2:	b1 04       	cpc	r11, r1
    28a4:	09 f0       	breq	.+2      	; 0x28a8 <follow_path+0xca>
    28a6:	db c0       	rjmp	.+438    	; 0x2a5e <follow_path+0x280>
    28a8:	2e 32       	cpi	r18, 0x2E	; 46
    28aa:	09 f0       	breq	.+2      	; 0x28ae <follow_path+0xd0>
    28ac:	d8 c0       	rjmp	.+432    	; 0x2a5e <follow_path+0x280>
			i = 8; ni = 11;
			b <<= 2; continue;
    28ae:	11 0f       	add	r17, r17
    28b0:	11 0f       	add	r17, r17
    28b2:	48 e0       	ldi	r20, 0x08	; 8
    28b4:	50 e0       	ldi	r21, 0x00	; 0
    28b6:	9b e0       	ldi	r25, 0x0B	; 11
    28b8:	a9 2e       	mov	r10, r25
    28ba:	b1 2c       	mov	r11, r1
    28bc:	db cf       	rjmp	.-74     	; 0x2874 <follow_path+0x96>
		}
		if (c >= 0x80) {				/* Extended char? */
    28be:	27 fd       	sbrc	r18, 7
			b |= 3;						/* Eliminate NT flag */
    28c0:	13 60       	ori	r17, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    28c2:	82 2f       	mov	r24, r18
    28c4:	81 58       	subi	r24, 0x81	; 129
    28c6:	8f 31       	cpi	r24, 0x1F	; 31
    28c8:	18 f0       	brcs	.+6      	; 0x28d0 <follow_path+0xf2>
    28ca:	8f 55       	subi	r24, 0x5F	; 95
    28cc:	8d 31       	cpi	r24, 0x1D	; 29
    28ce:	08 f5       	brcc	.+66     	; 0x2912 <follow_path+0x134>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    28d0:	f7 01       	movw	r30, r14
    28d2:	ec 0d       	add	r30, r12
    28d4:	fd 1d       	adc	r31, r13
    28d6:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    28d8:	83 2f       	mov	r24, r19
    28da:	80 54       	subi	r24, 0x40	; 64
    28dc:	8f 33       	cpi	r24, 0x3F	; 63
    28de:	20 f0       	brcs	.+8      	; 0x28e8 <follow_path+0x10a>
    28e0:	80 54       	subi	r24, 0x40	; 64
    28e2:	8d 37       	cpi	r24, 0x7D	; 125
    28e4:	08 f0       	brcs	.+2      	; 0x28e8 <follow_path+0x10a>
    28e6:	bb c0       	rjmp	.+374    	; 0x2a5e <follow_path+0x280>
    28e8:	c5 01       	movw	r24, r10
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	48 17       	cp	r20, r24
    28ee:	59 07       	cpc	r21, r25
    28f0:	08 f0       	brcs	.+2      	; 0x28f4 <follow_path+0x116>
    28f2:	b5 c0       	rjmp	.+362    	; 0x2a5e <follow_path+0x280>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    28f4:	08 94       	sec
    28f6:	c1 1c       	adc	r12, r1
    28f8:	d1 1c       	adc	r13, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    28fa:	fd 01       	movw	r30, r26
    28fc:	e4 0f       	add	r30, r20
    28fe:	f5 1f       	adc	r31, r21
    2900:	20 83       	st	Z, r18
    2902:	ca 01       	movw	r24, r20
    2904:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    2906:	fd 01       	movw	r30, r26
    2908:	e8 0f       	add	r30, r24
    290a:	f9 1f       	adc	r31, r25
    290c:	30 83       	st	Z, r19
    290e:	ac 01       	movw	r20, r24
    2910:	1e c0       	rjmp	.+60     	; 0x294e <follow_path+0x170>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    2912:	62 2f       	mov	r22, r18
    2914:	70 e0       	ldi	r23, 0x00	; 0
    2916:	e5 e7       	ldi	r30, 0x75	; 117
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	01 c0       	rjmp	.+2      	; 0x291e <follow_path+0x140>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    291c:	31 96       	adiw	r30, 0x01	; 1
    291e:	80 81       	ld	r24, Z
    2920:	88 23       	and	r24, r24
    2922:	29 f0       	breq	.+10     	; 0x292e <follow_path+0x150>
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	86 17       	cp	r24, r22
    2928:	97 07       	cpc	r25, r23
    292a:	c1 f7       	brne	.-16     	; 0x291c <follow_path+0x13e>
    292c:	98 c0       	rjmp	.+304    	; 0x2a5e <follow_path+0x280>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    292e:	82 2f       	mov	r24, r18
    2930:	81 54       	subi	r24, 0x41	; 65
    2932:	8a 31       	cpi	r24, 0x1A	; 26
    2934:	10 f4       	brcc	.+4      	; 0x293a <follow_path+0x15c>
				b |= 2;
    2936:	12 60       	ori	r17, 0x02	; 2
    2938:	06 c0       	rjmp	.+12     	; 0x2946 <follow_path+0x168>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    293a:	82 2f       	mov	r24, r18
    293c:	81 56       	subi	r24, 0x61	; 97
    293e:	8a 31       	cpi	r24, 0x1A	; 26
    2940:	10 f4       	brcc	.+4      	; 0x2946 <follow_path+0x168>
					b |= 1; c -= 0x20;
    2942:	11 60       	ori	r17, 0x01	; 1
    2944:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    2946:	fd 01       	movw	r30, r26
    2948:	e4 0f       	add	r30, r20
    294a:	f5 1f       	adc	r31, r21
    294c:	20 83       	st	Z, r18
    294e:	4f 5f       	subi	r20, 0xFF	; 255
    2950:	5f 4f       	sbci	r21, 0xFF	; 255
    2952:	90 cf       	rjmp	.-224    	; 0x2874 <follow_path+0x96>
    2954:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    2956:	45 2b       	or	r20, r21
    2958:	09 f4       	brne	.+2      	; 0x295c <follow_path+0x17e>
    295a:	81 c0       	rjmp	.+258    	; 0x2a5e <follow_path+0x280>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    295c:	8c 91       	ld	r24, X
    295e:	85 3e       	cpi	r24, 0xE5	; 229
    2960:	09 f4       	brne	.+2      	; 0x2964 <follow_path+0x186>
    2962:	5c 92       	st	X, r5

	if (ni == 8) b <<= 2;
    2964:	e8 e0       	ldi	r30, 0x08	; 8
    2966:	ae 16       	cp	r10, r30
    2968:	b1 04       	cpc	r11, r1
    296a:	11 f4       	brne	.+4      	; 0x2970 <follow_path+0x192>
    296c:	11 0f       	add	r17, r17
    296e:	11 0f       	add	r17, r17
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    2970:	21 2f       	mov	r18, r17
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	c9 01       	movw	r24, r18
    2976:	83 70       	andi	r24, 0x03	; 3
    2978:	90 70       	andi	r25, 0x00	; 0
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	09 f4       	brne	.+2      	; 0x2980 <follow_path+0x1a2>
    297e:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    2980:	2c 70       	andi	r18, 0x0C	; 12
    2982:	30 70       	andi	r19, 0x00	; 0
    2984:	24 30       	cpi	r18, 0x04	; 4
    2986:	31 05       	cpc	r19, r1
    2988:	09 f4       	brne	.+2      	; 0x298c <follow_path+0x1ae>
    298a:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    298c:	1b 96       	adiw	r26, 0x0b	; 11
    298e:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    2990:	ce 01       	movw	r24, r28
    2992:	60 e0       	ldi	r22, 0x00	; 0
    2994:	70 e0       	ldi	r23, 0x00	; 0
    2996:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <dir_sdi>
    299a:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    299c:	88 23       	and	r24, r24
    299e:	79 f5       	brne	.+94     	; 0x29fe <follow_path+0x220>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    29a0:	4e 85       	ldd	r20, Y+14	; 0x0e
    29a2:	5f 85       	ldd	r21, Y+15	; 0x0f
    29a4:	68 89       	ldd	r22, Y+16	; 0x10
    29a6:	79 89       	ldd	r23, Y+17	; 0x11
    29a8:	88 81       	ld	r24, Y
    29aa:	99 81       	ldd	r25, Y+1	; 0x01
    29ac:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    29b0:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    29b2:	88 23       	and	r24, r24
    29b4:	21 f5       	brne	.+72     	; 0x29fe <follow_path+0x220>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    29b6:	ea 89       	ldd	r30, Y+18	; 0x12
    29b8:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    29ba:	80 81       	ld	r24, Z
    29bc:	88 23       	and	r24, r24
    29be:	11 f4       	brne	.+4      	; 0x29c4 <follow_path+0x1e6>
    29c0:	44 e0       	ldi	r20, 0x04	; 4
    29c2:	1d c0       	rjmp	.+58     	; 0x29fe <follow_path+0x220>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    29c4:	83 85       	ldd	r24, Z+11	; 0x0b
    29c6:	83 fd       	sbrc	r24, 3
    29c8:	14 c0       	rjmp	.+40     	; 0x29f2 <follow_path+0x214>
    29ca:	df 01       	movw	r26, r30
    29cc:	8c 89       	ldd	r24, Y+20	; 0x14
    29ce:	9d 89       	ldd	r25, Y+21	; 0x15
    29d0:	9c 01       	movw	r18, r24
    29d2:	f9 01       	movw	r30, r18
    29d4:	2b e0       	ldi	r18, 0x0B	; 11
    29d6:	30 e0       	ldi	r19, 0x00	; 0
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    29d8:	21 50       	subi	r18, 0x01	; 1
    29da:	30 40       	sbci	r19, 0x00	; 0
    29dc:	8f ef       	ldi	r24, 0xFF	; 255
    29de:	2f 3f       	cpi	r18, 0xFF	; 255
    29e0:	38 07       	cpc	r19, r24
    29e2:	69 f0       	breq	.+26     	; 0x29fe <follow_path+0x220>
    29e4:	9c 91       	ld	r25, X
    29e6:	80 81       	ld	r24, Z
    29e8:	98 17       	cp	r25, r24
    29ea:	19 f4       	brne	.+6      	; 0x29f2 <follow_path+0x214>
    29ec:	11 96       	adiw	r26, 0x01	; 1
    29ee:	31 96       	adiw	r30, 0x01	; 1
    29f0:	f3 cf       	rjmp	.-26     	; 0x29d8 <follow_path+0x1fa>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    29f2:	ce 01       	movw	r24, r28
    29f4:	60 e0       	ldi	r22, 0x00	; 0
    29f6:	70 e0       	ldi	r23, 0x00	; 0
    29f8:	0e 94 72 12 	call	0x24e4	; 0x24e4 <dir_next>
    29fc:	ce cf       	rjmp	.-100    	; 0x299a <follow_path+0x1bc>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    29fe:	ec 89       	ldd	r30, Y+20	; 0x14
    2a00:	fd 89       	ldd	r31, Y+21	; 0x15
    2a02:	93 85       	ldd	r25, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
    2a04:	44 23       	and	r20, r20
    2a06:	31 f0       	breq	.+12     	; 0x2a14 <follow_path+0x236>
    2a08:	84 2f       	mov	r24, r20
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    2a0a:	44 30       	cpi	r20, 0x04	; 4
    2a0c:	51 f5       	brne	.+84     	; 0x2a62 <follow_path+0x284>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    2a0e:	92 ff       	sbrs	r25, 2
    2a10:	2a c0       	rjmp	.+84     	; 0x2a66 <follow_path+0x288>
    2a12:	2a c0       	rjmp	.+84     	; 0x2a68 <follow_path+0x28a>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    2a14:	92 fd       	sbrc	r25, 2
    2a16:	25 c0       	rjmp	.+74     	; 0x2a62 <follow_path+0x284>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    2a18:	ea 89       	ldd	r30, Y+18	; 0x12
    2a1a:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    2a1c:	83 85       	ldd	r24, Z+11	; 0x0b
    2a1e:	84 ff       	sbrs	r24, 4
    2a20:	22 c0       	rjmp	.+68     	; 0x2a66 <follow_path+0x288>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    2a22:	ec 0c       	add	r14, r12
    2a24:	fd 1c       	adc	r15, r13
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
    2a26:	75 88       	ldd	r7, Z+21	; 0x15
    2a28:	66 24       	eor	r6, r6
    2a2a:	24 89       	ldd	r18, Z+20	; 0x14
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	26 29       	or	r18, r6
    2a30:	37 29       	or	r19, r7
    2a32:	40 e0       	ldi	r20, 0x00	; 0
    2a34:	50 e0       	ldi	r21, 0x00	; 0
    2a36:	a9 01       	movw	r20, r18
    2a38:	33 27       	eor	r19, r19
    2a3a:	22 27       	eor	r18, r18
    2a3c:	93 8c       	ldd	r9, Z+27	; 0x1b
    2a3e:	88 24       	eor	r8, r8
    2a40:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	88 29       	or	r24, r8
    2a46:	99 29       	or	r25, r9
    2a48:	a0 e0       	ldi	r26, 0x00	; 0
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
    2a4c:	28 2b       	or	r18, r24
    2a4e:	39 2b       	or	r19, r25
    2a50:	4a 2b       	or	r20, r26
    2a52:	5b 2b       	or	r21, r27
    2a54:	2e 83       	std	Y+6, r18	; 0x06
    2a56:	3f 83       	std	Y+7, r19	; 0x07
    2a58:	48 87       	std	Y+8, r20	; 0x08
    2a5a:	59 87       	std	Y+9, r21	; 0x09
    2a5c:	f1 ce       	rjmp	.-542    	; 0x2840 <follow_path+0x62>
		}
    2a5e:	86 e0       	ldi	r24, 0x06	; 6
    2a60:	03 c0       	rjmp	.+6      	; 0x2a68 <follow_path+0x28a>
    2a62:	84 2f       	mov	r24, r20
    2a64:	01 c0       	rjmp	.+2      	; 0x2a68 <follow_path+0x28a>
    2a66:	85 e0       	ldi	r24, 0x05	; 5
	}

	return res;
}
    2a68:	df 91       	pop	r29
    2a6a:	cf 91       	pop	r28
    2a6c:	1f 91       	pop	r17
    2a6e:	0f 91       	pop	r16
    2a70:	ff 90       	pop	r15
    2a72:	ef 90       	pop	r14
    2a74:	df 90       	pop	r13
    2a76:	cf 90       	pop	r12
    2a78:	bf 90       	pop	r11
    2a7a:	af 90       	pop	r10
    2a7c:	9f 90       	pop	r9
    2a7e:	8f 90       	pop	r8
    2a80:	7f 90       	pop	r7
    2a82:	6f 90       	pop	r6
    2a84:	5f 90       	pop	r5
    2a86:	08 95       	ret
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
		}
    2a88:	60 e0       	ldi	r22, 0x00	; 0
    2a8a:	65 cf       	rjmp	.-310    	; 0x2956 <follow_path+0x178>

00002a8c <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    2a8c:	cf 92       	push	r12
    2a8e:	df 92       	push	r13
    2a90:	ef 92       	push	r14
    2a92:	ff 92       	push	r15
    2a94:	1f 93       	push	r17
    2a96:	df 93       	push	r29
    2a98:	cf 93       	push	r28
    2a9a:	cd b7       	in	r28, 0x3d	; 61
    2a9c:	de b7       	in	r29, 0x3e	; 62
    2a9e:	a4 97       	sbiw	r28, 0x24	; 36
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	cd bf       	out	0x3d, r28	; 61
    2aaa:	9c a3       	std	Y+36, r25	; 0x24
    2aac:	8b a3       	std	Y+35, r24	; 0x23
    2aae:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    2ab0:	4d e0       	ldi	r20, 0x0D	; 13
    2ab2:	e4 2e       	mov	r14, r20
    2ab4:	f1 2c       	mov	r15, r1
    2ab6:	ec 0e       	add	r14, r28
    2ab8:	fd 1e       	adc	r15, r29
    2aba:	ce 01       	movw	r24, r28
    2abc:	83 96       	adiw	r24, 0x23	; 35
    2abe:	b7 01       	movw	r22, r14
    2ac0:	40 e0       	ldi	r20, 0x00	; 0
    2ac2:	0e 94 0f 07 	call	0xe1e	; 0xe1e <chk_mounted>
    2ac6:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    2ac8:	88 23       	and	r24, r24
    2aca:	b1 f4       	brne	.+44     	; 0x2af8 <f_stat+0x6c>
		INIT_BUF(dj);
    2acc:	ce 01       	movw	r24, r28
    2ace:	01 96       	adiw	r24, 0x01	; 1
    2ad0:	9a a3       	std	Y+34, r25	; 0x22
    2ad2:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);	/* Follow the file path */
    2ad4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ad6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ad8:	c7 01       	movw	r24, r14
    2ada:	0e 94 ef 13 	call	0x27de	; 0x27de <follow_path>
    2ade:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follow completed */
    2ae0:	88 23       	and	r24, r24
    2ae2:	51 f4       	brne	.+20     	; 0x2af8 <f_stat+0x6c>
			if (dj.dir)		/* Found an object */
    2ae4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ae6:	98 a1       	ldd	r25, Y+32	; 0x20
    2ae8:	89 2b       	or	r24, r25
    2aea:	11 f4       	brne	.+4      	; 0x2af0 <f_stat+0x64>
    2aec:	16 e0       	ldi	r17, 0x06	; 6
    2aee:	04 c0       	rjmp	.+8      	; 0x2af8 <f_stat+0x6c>
				get_fileinfo(&dj, fno);
    2af0:	c7 01       	movw	r24, r14
    2af2:	b6 01       	movw	r22, r12
    2af4:	0e 94 d5 05 	call	0xbaa	; 0xbaa <get_fileinfo>
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    2af8:	81 2f       	mov	r24, r17
    2afa:	a4 96       	adiw	r28, 0x24	; 36
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	f8 94       	cli
    2b00:	de bf       	out	0x3e, r29	; 62
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	cd bf       	out	0x3d, r28	; 61
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	1f 91       	pop	r17
    2b0c:	ff 90       	pop	r15
    2b0e:	ef 90       	pop	r14
    2b10:	df 90       	pop	r13
    2b12:	cf 90       	pop	r12
    2b14:	08 95       	ret

00002b16 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    2b16:	0f 93       	push	r16
    2b18:	1f 93       	push	r17
    2b1a:	df 93       	push	r29
    2b1c:	cf 93       	push	r28
    2b1e:	cd b7       	in	r28, 0x3d	; 61
    2b20:	de b7       	in	r29, 0x3e	; 62
    2b22:	2e 97       	sbiw	r28, 0x0e	; 14
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	de bf       	out	0x3e, r29	; 62
    2b2a:	0f be       	out	0x3f, r0	; 63
    2b2c:	cd bf       	out	0x3d, r28	; 61
    2b2e:	8c 01       	movw	r16, r24
    2b30:	7e 87       	std	Y+14, r23	; 0x0e
    2b32:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
    2b34:	ce 01       	movw	r24, r28
    2b36:	0d 96       	adiw	r24, 0x0d	; 13
    2b38:	b8 01       	movw	r22, r16
    2b3a:	40 e0       	ldi	r20, 0x00	; 0
    2b3c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <chk_mounted>
	if (res == FR_OK) {
    2b40:	88 23       	and	r24, r24
    2b42:	09 f0       	breq	.+2      	; 0x2b46 <f_opendir+0x30>
    2b44:	46 c0       	rjmp	.+140    	; 0x2bd2 <f_opendir+0xbc>
		INIT_BUF(*dj);
    2b46:	ce 01       	movw	r24, r28
    2b48:	01 96       	adiw	r24, 0x01	; 1
    2b4a:	d8 01       	movw	r26, r16
    2b4c:	55 96       	adiw	r26, 0x15	; 21
    2b4e:	9c 93       	st	X, r25
    2b50:	8e 93       	st	-X, r24
    2b52:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    2b54:	6d 85       	ldd	r22, Y+13	; 0x0d
    2b56:	7e 85       	ldd	r23, Y+14	; 0x0e
    2b58:	c8 01       	movw	r24, r16
    2b5a:	0e 94 ef 13 	call	0x27de	; 0x27de <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    2b5e:	88 23       	and	r24, r24
    2b60:	a9 f5       	brne	.+106    	; 0x2bcc <f_opendir+0xb6>
			if (dj->dir) {						/* It is not the root dir */
    2b62:	d8 01       	movw	r26, r16
    2b64:	52 96       	adiw	r26, 0x12	; 18
    2b66:	ed 91       	ld	r30, X+
    2b68:	fc 91       	ld	r31, X
    2b6a:	53 97       	sbiw	r26, 0x13	; 19
    2b6c:	30 97       	sbiw	r30, 0x00	; 0
    2b6e:	f9 f0       	breq	.+62     	; 0x2bae <f_opendir+0x98>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    2b70:	83 85       	ldd	r24, Z+11	; 0x0b
    2b72:	84 ff       	sbrs	r24, 4
    2b74:	2d c0       	rjmp	.+90     	; 0x2bd0 <f_opendir+0xba>
					dj->sclust = LD_CLUST(dj->dir);
    2b76:	35 89       	ldd	r19, Z+21	; 0x15
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	84 89       	ldd	r24, Z+20	; 0x14
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	28 2b       	or	r18, r24
    2b80:	39 2b       	or	r19, r25
    2b82:	40 e0       	ldi	r20, 0x00	; 0
    2b84:	50 e0       	ldi	r21, 0x00	; 0
    2b86:	a9 01       	movw	r20, r18
    2b88:	33 27       	eor	r19, r19
    2b8a:	22 27       	eor	r18, r18
    2b8c:	93 8d       	ldd	r25, Z+27	; 0x1b
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	62 8d       	ldd	r22, Z+26	; 0x1a
    2b92:	70 e0       	ldi	r23, 0x00	; 0
    2b94:	86 2b       	or	r24, r22
    2b96:	97 2b       	or	r25, r23
    2b98:	a0 e0       	ldi	r26, 0x00	; 0
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	28 2b       	or	r18, r24
    2b9e:	39 2b       	or	r19, r25
    2ba0:	4a 2b       	or	r20, r26
    2ba2:	5b 2b       	or	r21, r27
    2ba4:	f8 01       	movw	r30, r16
    2ba6:	26 83       	std	Z+6, r18	; 0x06
    2ba8:	37 83       	std	Z+7, r19	; 0x07
    2baa:	40 87       	std	Z+8, r20	; 0x08
    2bac:	51 87       	std	Z+9, r21	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    2bae:	d8 01       	movw	r26, r16
    2bb0:	ed 91       	ld	r30, X+
    2bb2:	fc 91       	ld	r31, X
    2bb4:	11 97       	sbiw	r26, 0x01	; 1
    2bb6:	86 81       	ldd	r24, Z+6	; 0x06
    2bb8:	97 81       	ldd	r25, Z+7	; 0x07
    2bba:	13 96       	adiw	r26, 0x03	; 3
    2bbc:	9c 93       	st	X, r25
    2bbe:	8e 93       	st	-X, r24
    2bc0:	12 97       	sbiw	r26, 0x02	; 2
				res = dir_sdi(dj, 0);			/* Rewind dir */
    2bc2:	c8 01       	movw	r24, r16
    2bc4:	60 e0       	ldi	r22, 0x00	; 0
    2bc6:	70 e0       	ldi	r23, 0x00	; 0
    2bc8:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <dir_sdi>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2bcc:	84 30       	cpi	r24, 0x04	; 4
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <f_opendir+0xbc>
    2bd0:	85 e0       	ldi	r24, 0x05	; 5
	}

	LEAVE_FF(dj->fs, res);
}
    2bd2:	2e 96       	adiw	r28, 0x0e	; 14
    2bd4:	0f b6       	in	r0, 0x3f	; 63
    2bd6:	f8 94       	cli
    2bd8:	de bf       	out	0x3e, r29	; 62
    2bda:	0f be       	out	0x3f, r0	; 63
    2bdc:	cd bf       	out	0x3d, r28	; 61
    2bde:	cf 91       	pop	r28
    2be0:	df 91       	pop	r29
    2be2:	1f 91       	pop	r17
    2be4:	0f 91       	pop	r16
    2be6:	08 95       	ret

00002be8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    2be8:	cf 93       	push	r28
    2bea:	df 93       	push	r29
    2bec:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    2bee:	60 e0       	ldi	r22, 0x00	; 0
    2bf0:	70 e0       	ldi	r23, 0x00	; 0
    2bf2:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <dir_sdi>
    2bf6:	48 2f       	mov	r20, r24
	if (res == FR_OK) {
    2bf8:	88 23       	and	r24, r24
    2bfa:	b9 f5       	brne	.+110    	; 0x2c6a <dir_register+0x82>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    2bfc:	4e 85       	ldd	r20, Y+14	; 0x0e
    2bfe:	5f 85       	ldd	r21, Y+15	; 0x0f
    2c00:	68 89       	ldd	r22, Y+16	; 0x10
    2c02:	79 89       	ldd	r23, Y+17	; 0x11
    2c04:	88 81       	ld	r24, Y
    2c06:	99 81       	ldd	r25, Y+1	; 0x01
    2c08:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    2c0c:	48 2f       	mov	r20, r24
			if (res != FR_OK) break;
    2c0e:	88 23       	and	r24, r24
    2c10:	61 f5       	brne	.+88     	; 0x2c6a <dir_register+0x82>
			c = *dj->dir;
    2c12:	ea 89       	ldd	r30, Y+18	; 0x12
    2c14:	fb 89       	ldd	r31, Y+19	; 0x13
    2c16:	e0 81       	ld	r30, Z
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    2c18:	e5 3e       	cpi	r30, 0xE5	; 229
    2c1a:	59 f1       	breq	.+86     	; 0x2c72 <dir_register+0x8a>
    2c1c:	ee 23       	and	r30, r30
    2c1e:	49 f1       	breq	.+82     	; 0x2c72 <dir_register+0x8a>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    2c20:	ce 01       	movw	r24, r28
    2c22:	61 e0       	ldi	r22, 0x01	; 1
    2c24:	70 e0       	ldi	r23, 0x00	; 0
    2c26:	0e 94 72 12 	call	0x24e4	; 0x24e4 <dir_next>
    2c2a:	e5 cf       	rjmp	.-54     	; 0x2bf6 <dir_register+0xe>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    2c2c:	aa 89       	ldd	r26, Y+18	; 0x12
    2c2e:	bb 89       	ldd	r27, Y+19	; 0x13
    2c30:	fd 01       	movw	r30, r26
    2c32:	80 e2       	ldi	r24, 0x20	; 32
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	01 c0       	rjmp	.+2      	; 0x2c3a <dir_register+0x52>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    2c38:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	2f ef       	ldi	r18, 0xFF	; 255
    2c3e:	8f 3f       	cpi	r24, 0xFF	; 255
    2c40:	92 07       	cpc	r25, r18
    2c42:	d1 f7       	brne	.-12     	; 0x2c38 <dir_register+0x50>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    2c44:	8c 89       	ldd	r24, Y+20	; 0x14
    2c46:	9d 89       	ldd	r25, Y+21	; 0x15
    2c48:	9c 01       	movw	r18, r24
    2c4a:	f9 01       	movw	r30, r18
    2c4c:	2b e0       	ldi	r18, 0x0B	; 11
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	02 c0       	rjmp	.+4      	; 0x2c56 <dir_register+0x6e>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
    2c52:	81 91       	ld	r24, Z+
    2c54:	8d 93       	st	X+, r24
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    2c56:	21 50       	subi	r18, 0x01	; 1
    2c58:	30 40       	sbci	r19, 0x00	; 0
    2c5a:	8f ef       	ldi	r24, 0xFF	; 255
    2c5c:	2f 3f       	cpi	r18, 0xFF	; 255
    2c5e:	38 07       	cpc	r19, r24
    2c60:	c1 f7       	brne	.-16     	; 0x2c52 <dir_register+0x6a>
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    2c62:	e8 81       	ld	r30, Y
    2c64:	f9 81       	ldd	r31, Y+1	; 0x01
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    2c6a:	84 2f       	mov	r24, r20
    2c6c:	df 91       	pop	r29
    2c6e:	cf 91       	pop	r28
    2c70:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    2c72:	4e 85       	ldd	r20, Y+14	; 0x0e
    2c74:	5f 85       	ldd	r21, Y+15	; 0x0f
    2c76:	68 89       	ldd	r22, Y+16	; 0x10
    2c78:	79 89       	ldd	r23, Y+17	; 0x11
    2c7a:	88 81       	ld	r24, Y
    2c7c:	99 81       	ldd	r25, Y+1	; 0x01
    2c7e:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    2c82:	48 2f       	mov	r20, r24
		if (res == FR_OK) {
    2c84:	88 23       	and	r24, r24
    2c86:	91 f2       	breq	.-92     	; 0x2c2c <dir_register+0x44>
    2c88:	f0 cf       	rjmp	.-32     	; 0x2c6a <dir_register+0x82>

00002c8a <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    2c8a:	cf 93       	push	r28
    2c8c:	df 93       	push	r29
    2c8e:	ec 01       	movw	r28, r24
    2c90:	94 e0       	ldi	r25, 0x04	; 4
    2c92:	1b c0       	rjmp	.+54     	; 0x2cca <dir_read+0x40>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    2c94:	88 81       	ld	r24, Y
    2c96:	99 81       	ldd	r25, Y+1	; 0x01
    2c98:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    2c9c:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    2c9e:	88 23       	and	r24, r24
    2ca0:	f9 f4       	brne	.+62     	; 0x2ce0 <dir_read+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2ca2:	ea 89       	ldd	r30, Y+18	; 0x12
    2ca4:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    2ca6:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2ca8:	88 23       	and	r24, r24
    2caa:	11 f1       	breq	.+68     	; 0x2cf0 <dir_read+0x66>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    2cac:	85 3e       	cpi	r24, 0xE5	; 229
    2cae:	29 f0       	breq	.+10     	; 0x2cba <dir_read+0x30>
    2cb0:	8e 32       	cpi	r24, 0x2E	; 46
    2cb2:	19 f0       	breq	.+6      	; 0x2cba <dir_read+0x30>
    2cb4:	83 85       	ldd	r24, Z+11	; 0x0b
    2cb6:	83 ff       	sbrs	r24, 3
    2cb8:	17 c0       	rjmp	.+46     	; 0x2ce8 <dir_read+0x5e>
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    2cba:	ce 01       	movw	r24, r28
    2cbc:	60 e0       	ldi	r22, 0x00	; 0
    2cbe:	70 e0       	ldi	r23, 0x00	; 0
    2cc0:	0e 94 72 12 	call	0x24e4	; 0x24e4 <dir_next>
    2cc4:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    2cc6:	88 23       	and	r24, r24
    2cc8:	59 f4       	brne	.+22     	; 0x2ce0 <dir_read+0x56>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    2cca:	4e 85       	ldd	r20, Y+14	; 0x0e
    2ccc:	5f 85       	ldd	r21, Y+15	; 0x0f
    2cce:	68 89       	ldd	r22, Y+16	; 0x10
    2cd0:	79 89       	ldd	r23, Y+17	; 0x11
    2cd2:	41 15       	cp	r20, r1
    2cd4:	51 05       	cpc	r21, r1
    2cd6:	61 05       	cpc	r22, r1
    2cd8:	71 05       	cpc	r23, r1
    2cda:	e1 f6       	brne	.-72     	; 0x2c94 <dir_read+0xa>
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    2cdc:	99 23       	and	r25, r25
    2cde:	21 f0       	breq	.+8      	; 0x2ce8 <dir_read+0x5e>
    2ce0:	1e 86       	std	Y+14, r1	; 0x0e
    2ce2:	1f 86       	std	Y+15, r1	; 0x0f
    2ce4:	18 8a       	std	Y+16, r1	; 0x10
    2ce6:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    2ce8:	89 2f       	mov	r24, r25
    2cea:	df 91       	pop	r29
    2cec:	cf 91       	pop	r28
    2cee:	08 95       	ret
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    2cf0:	94 e0       	ldi	r25, 0x04	; 4
    2cf2:	f6 cf       	rjmp	.-20     	; 0x2ce0 <dir_read+0x56>

00002cf4 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    2cf4:	ef 92       	push	r14
    2cf6:	ff 92       	push	r15
    2cf8:	0f 93       	push	r16
    2cfa:	1f 93       	push	r17
    2cfc:	df 93       	push	r29
    2cfe:	cf 93       	push	r28
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	2c 97       	sbiw	r28, 0x0c	; 12
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	f8 94       	cli
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	cd bf       	out	0x3d, r28	; 61
    2d10:	8c 01       	movw	r16, r24
    2d12:	7b 01       	movw	r14, r22
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    2d14:	fc 01       	movw	r30, r24
    2d16:	62 81       	ldd	r22, Z+2	; 0x02
    2d18:	73 81       	ldd	r23, Z+3	; 0x03
    2d1a:	80 81       	ld	r24, Z
    2d1c:	91 81       	ldd	r25, Z+1	; 0x01
    2d1e:	0e 94 76 06 	call	0xcec	; 0xcec <validate>
	if (res == FR_OK) {
    2d22:	88 23       	and	r24, r24
    2d24:	61 f5       	brne	.+88     	; 0x2d7e <f_readdir+0x8a>
		if (!fno) {
    2d26:	e1 14       	cp	r14, r1
    2d28:	f1 04       	cpc	r15, r1
    2d2a:	31 f4       	brne	.+12     	; 0x2d38 <f_readdir+0x44>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
    2d2c:	c8 01       	movw	r24, r16
    2d2e:	60 e0       	ldi	r22, 0x00	; 0
    2d30:	70 e0       	ldi	r23, 0x00	; 0
    2d32:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <dir_sdi>
    2d36:	23 c0       	rjmp	.+70     	; 0x2d7e <f_readdir+0x8a>
		} else {
			INIT_BUF(*dj);
    2d38:	ce 01       	movw	r24, r28
    2d3a:	01 96       	adiw	r24, 0x01	; 1
    2d3c:	f8 01       	movw	r30, r16
    2d3e:	95 8b       	std	Z+21, r25	; 0x15
    2d40:	84 8b       	std	Z+20, r24	; 0x14
			res = dir_read(dj);				/* Read an directory item */
    2d42:	c8 01       	movw	r24, r16
    2d44:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
    2d48:	84 30       	cpi	r24, 0x04	; 4
    2d4a:	31 f4       	brne	.+12     	; 0x2d58 <f_readdir+0x64>
				dj->sect = 0;
    2d4c:	f8 01       	movw	r30, r16
    2d4e:	16 86       	std	Z+14, r1	; 0x0e
    2d50:	17 86       	std	Z+15, r1	; 0x0f
    2d52:	10 8a       	std	Z+16, r1	; 0x10
    2d54:	11 8a       	std	Z+17, r1	; 0x11
    2d56:	02 c0       	rjmp	.+4      	; 0x2d5c <f_readdir+0x68>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    2d58:	88 23       	and	r24, r24
    2d5a:	89 f4       	brne	.+34     	; 0x2d7e <f_readdir+0x8a>
				get_fileinfo(dj, fno);		/* Get the object information */
    2d5c:	c8 01       	movw	r24, r16
    2d5e:	b7 01       	movw	r22, r14
    2d60:	0e 94 d5 05 	call	0xbaa	; 0xbaa <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
    2d64:	c8 01       	movw	r24, r16
    2d66:	60 e0       	ldi	r22, 0x00	; 0
    2d68:	70 e0       	ldi	r23, 0x00	; 0
    2d6a:	0e 94 72 12 	call	0x24e4	; 0x24e4 <dir_next>
				if (res == FR_NO_FILE) {
    2d6e:	84 30       	cpi	r24, 0x04	; 4
    2d70:	31 f4       	brne	.+12     	; 0x2d7e <f_readdir+0x8a>
					dj->sect = 0;
    2d72:	f8 01       	movw	r30, r16
    2d74:	16 86       	std	Z+14, r1	; 0x0e
    2d76:	17 86       	std	Z+15, r1	; 0x0f
    2d78:	10 8a       	std	Z+16, r1	; 0x10
    2d7a:	11 8a       	std	Z+17, r1	; 0x11
    2d7c:	80 e0       	ldi	r24, 0x00	; 0
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
    2d7e:	2c 96       	adiw	r28, 0x0c	; 12
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	f8 94       	cli
    2d84:	de bf       	out	0x3e, r29	; 62
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	cd bf       	out	0x3d, r28	; 61
    2d8a:	cf 91       	pop	r28
    2d8c:	df 91       	pop	r29
    2d8e:	1f 91       	pop	r17
    2d90:	0f 91       	pop	r16
    2d92:	ff 90       	pop	r15
    2d94:	ef 90       	pop	r14
    2d96:	08 95       	ret

00002d98 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2d98:	5f 92       	push	r5
    2d9a:	6f 92       	push	r6
    2d9c:	7f 92       	push	r7
    2d9e:	8f 92       	push	r8
    2da0:	9f 92       	push	r9
    2da2:	af 92       	push	r10
    2da4:	bf 92       	push	r11
    2da6:	cf 92       	push	r12
    2da8:	df 92       	push	r13
    2daa:	ef 92       	push	r14
    2dac:	ff 92       	push	r15
    2dae:	0f 93       	push	r16
    2db0:	1f 93       	push	r17
    2db2:	df 93       	push	r29
    2db4:	cf 93       	push	r28
    2db6:	cd b7       	in	r28, 0x3d	; 61
    2db8:	de b7       	in	r29, 0x3e	; 62
    2dba:	a4 97       	sbiw	r28, 0x24	; 36
    2dbc:	0f b6       	in	r0, 0x3f	; 63
    2dbe:	f8 94       	cli
    2dc0:	de bf       	out	0x3e, r29	; 62
    2dc2:	0f be       	out	0x3f, r0	; 63
    2dc4:	cd bf       	out	0x3d, r28	; 61
    2dc6:	3c 01       	movw	r6, r24
    2dc8:	7c a3       	std	Y+36, r23	; 0x24
    2dca:	6b a3       	std	Y+35, r22	; 0x23
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    2dcc:	dc 01       	movw	r26, r24
    2dce:	1d 92       	st	X+, r1
    2dd0:	1c 92       	st	X, r1

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    2dd2:	3f e1       	ldi	r19, 0x1F	; 31
    2dd4:	53 2e       	mov	r5, r19
    2dd6:	54 22       	and	r5, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    2dd8:	8e 01       	movw	r16, r28
    2dda:	03 5f       	subi	r16, 0xF3	; 243
    2ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dde:	4e 71       	andi	r20, 0x1E	; 30
    2de0:	ce 01       	movw	r24, r28
    2de2:	83 96       	adiw	r24, 0x23	; 35
    2de4:	b8 01       	movw	r22, r16
    2de6:	0e 94 0f 07 	call	0xe1e	; 0xe1e <chk_mounted>
    2dea:	28 2f       	mov	r18, r24
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    2dec:	ce 01       	movw	r24, r28
    2dee:	01 96       	adiw	r24, 0x01	; 1
    2df0:	9a a3       	std	Y+34, r25	; 0x22
    2df2:	89 a3       	std	Y+33, r24	; 0x21
	if (res == FR_OK)
    2df4:	22 23       	and	r18, r18
    2df6:	31 f4       	brne	.+12     	; 0x2e04 <f_open+0x6c>
		res = follow_path(&dj, path);	/* Follow the file path */
    2df8:	6b a1       	ldd	r22, Y+35	; 0x23
    2dfa:	7c a1       	ldd	r23, Y+36	; 0x24
    2dfc:	c8 01       	movw	r24, r16
    2dfe:	0e 94 ef 13 	call	0x27de	; 0x27de <follow_path>
    2e02:	28 2f       	mov	r18, r24
	dir = dj.dir;
    2e04:	cf 8c       	ldd	r12, Y+31	; 0x1f
    2e06:	d8 a0       	ldd	r13, Y+32	; 0x20

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    2e08:	22 23       	and	r18, r18
    2e0a:	21 f4       	brne	.+8      	; 0x2e14 <f_open+0x7c>
		if (!dir)	/* Current dir itself */
    2e0c:	c1 14       	cp	r12, r1
    2e0e:	d1 04       	cpc	r13, r1
    2e10:	09 f4       	brne	.+2      	; 0x2e14 <f_open+0x7c>
    2e12:	26 e0       	ldi	r18, 0x06	; 6
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2e14:	45 2d       	mov	r20, r5
    2e16:	50 e0       	ldi	r21, 0x00	; 0
    2e18:	ca 01       	movw	r24, r20
    2e1a:	8c 71       	andi	r24, 0x1C	; 28
    2e1c:	90 70       	andi	r25, 0x00	; 0
    2e1e:	89 2b       	or	r24, r25
    2e20:	09 f4       	brne	.+2      	; 0x2e24 <f_open+0x8c>
    2e22:	7f c0       	rjmp	.+254    	; 0x2f22 <f_open+0x18a>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    2e24:	22 23       	and	r18, r18
    2e26:	79 f0       	breq	.+30     	; 0x2e46 <f_open+0xae>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    2e28:	24 30       	cpi	r18, 0x04	; 4
    2e2a:	29 f4       	brne	.+10     	; 0x2e36 <f_open+0x9e>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    2e2c:	ce 01       	movw	r24, r28
    2e2e:	0d 96       	adiw	r24, 0x0d	; 13
    2e30:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <dir_register>
    2e34:	28 2f       	mov	r18, r24
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
    2e36:	cf 8c       	ldd	r12, Y+31	; 0x1f
    2e38:	d8 a0       	ldd	r13, Y+32	; 0x20
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    2e3a:	22 23       	and	r18, r18
    2e3c:	09 f0       	breq	.+2      	; 0x2e40 <f_open+0xa8>
    2e3e:	04 c1       	rjmp	.+520    	; 0x3048 <f_open+0x2b0>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    2e40:	b8 e0       	ldi	r27, 0x08	; 8
    2e42:	5b 2a       	or	r5, r27
    2e44:	07 c0       	rjmp	.+14     	; 0x2e54 <f_open+0xbc>
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    2e46:	f6 01       	movw	r30, r12
    2e48:	83 85       	ldd	r24, Z+11	; 0x0b
    2e4a:	81 71       	andi	r24, 0x11	; 17
    2e4c:	09 f0       	breq	.+2      	; 0x2e50 <f_open+0xb8>
    2e4e:	15 c1       	rjmp	.+554    	; 0x307a <f_open+0x2e2>
				res = FR_DENIED;
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    2e50:	52 fc       	sbrc	r5, 2
    2e52:	11 c1       	rjmp	.+546    	; 0x3076 <f_open+0x2de>
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    2e54:	53 fe       	sbrs	r5, 3
    2e56:	73 c0       	rjmp	.+230    	; 0x2f3e <f_open+0x1a6>
//			dw = get_fattime();					/* Created time */
			ST_DWORD(dir+DIR_CrtTime, dw);
    2e58:	d6 01       	movw	r26, r12
    2e5a:	1e 96       	adiw	r26, 0x0e	; 14
    2e5c:	1c 92       	st	X, r1
    2e5e:	1e 97       	sbiw	r26, 0x0e	; 14
    2e60:	1f 96       	adiw	r26, 0x0f	; 15
    2e62:	1c 92       	st	X, r1
    2e64:	1f 97       	sbiw	r26, 0x0f	; 15
    2e66:	50 96       	adiw	r26, 0x10	; 16
    2e68:	1c 92       	st	X, r1
    2e6a:	50 97       	sbiw	r26, 0x10	; 16
    2e6c:	51 96       	adiw	r26, 0x11	; 17
    2e6e:	1c 92       	st	X, r1
    2e70:	51 97       	sbiw	r26, 0x11	; 17
			dir[DIR_Attr] = 0;					/* Reset attribute */
    2e72:	1b 96       	adiw	r26, 0x0b	; 11
    2e74:	1c 92       	st	X, r1
    2e76:	1b 97       	sbiw	r26, 0x0b	; 11
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    2e78:	5c 96       	adiw	r26, 0x1c	; 28
    2e7a:	1c 92       	st	X, r1
    2e7c:	5c 97       	sbiw	r26, 0x1c	; 28
    2e7e:	5d 96       	adiw	r26, 0x1d	; 29
    2e80:	1c 92       	st	X, r1
    2e82:	5d 97       	sbiw	r26, 0x1d	; 29
    2e84:	5e 96       	adiw	r26, 0x1e	; 30
    2e86:	1c 92       	st	X, r1
    2e88:	5e 97       	sbiw	r26, 0x1e	; 30
    2e8a:	5f 96       	adiw	r26, 0x1f	; 31
    2e8c:	1c 92       	st	X, r1
    2e8e:	5f 97       	sbiw	r26, 0x1f	; 31
			cl = LD_CLUST(dir);					/* Get start cluster */
    2e90:	55 96       	adiw	r26, 0x15	; 21
    2e92:	9c 91       	ld	r25, X
    2e94:	55 97       	sbiw	r26, 0x15	; 21
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	54 96       	adiw	r26, 0x14	; 20
    2e9a:	2c 91       	ld	r18, X
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	82 2b       	or	r24, r18
    2ea0:	93 2b       	or	r25, r19
    2ea2:	a0 e0       	ldi	r26, 0x00	; 0
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	8c 01       	movw	r16, r24
    2ea8:	ff 24       	eor	r15, r15
    2eaa:	ee 24       	eor	r14, r14
    2eac:	f6 01       	movw	r30, r12
    2eae:	93 8d       	ldd	r25, Z+27	; 0x1b
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	22 8d       	ldd	r18, Z+26	; 0x1a
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	82 2b       	or	r24, r18
    2eb8:	93 2b       	or	r25, r19
    2eba:	a0 e0       	ldi	r26, 0x00	; 0
    2ebc:	b0 e0       	ldi	r27, 0x00	; 0
    2ebe:	e8 2a       	or	r14, r24
    2ec0:	f9 2a       	or	r15, r25
    2ec2:	0a 2b       	or	r16, r26
    2ec4:	1b 2b       	or	r17, r27
			ST_CLUST(dir, 0);					/* cluster = 0 */
    2ec6:	12 8e       	std	Z+26, r1	; 0x1a
    2ec8:	13 8e       	std	Z+27, r1	; 0x1b
    2eca:	14 8a       	std	Z+20, r1	; 0x14
    2ecc:	15 8a       	std	Z+21, r1	; 0x15
			dj.fs->wflag = 1;
    2ece:	ed 85       	ldd	r30, Y+13	; 0x0d
    2ed0:	fe 85       	ldd	r31, Y+14	; 0x0e
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	84 83       	std	Z+4, r24	; 0x04
			if (cl) {							/* Remove the cluster chain if exist */
    2ed6:	e1 14       	cp	r14, r1
    2ed8:	f1 04       	cpc	r15, r1
    2eda:	01 05       	cpc	r16, r1
    2edc:	11 05       	cpc	r17, r1
    2ede:	79 f1       	breq	.+94     	; 0x2f3e <f_open+0x1a6>
				dw = dj.fs->winsect;
    2ee0:	82 a4       	ldd	r8, Z+42	; 0x2a
    2ee2:	93 a4       	ldd	r9, Z+43	; 0x2b
    2ee4:	a4 a4       	ldd	r10, Z+44	; 0x2c
    2ee6:	b5 a4       	ldd	r11, Z+45	; 0x2d
				res = remove_chain(dj.fs, cl);
    2ee8:	cf 01       	movw	r24, r30
    2eea:	b8 01       	movw	r22, r16
    2eec:	a7 01       	movw	r20, r14
    2eee:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <remove_chain>
    2ef2:	28 2f       	mov	r18, r24
				if (res == FR_OK) {
    2ef4:	88 23       	and	r24, r24
    2ef6:	09 f0       	breq	.+2      	; 0x2efa <f_open+0x162>
    2ef8:	a7 c0       	rjmp	.+334    	; 0x3048 <f_open+0x2b0>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2efa:	ed 85       	ldd	r30, Y+13	; 0x0d
    2efc:	fe 85       	ldd	r31, Y+14	; 0x0e
    2efe:	08 94       	sec
    2f00:	e1 08       	sbc	r14, r1
    2f02:	f1 08       	sbc	r15, r1
    2f04:	01 09       	sbc	r16, r1
    2f06:	11 09       	sbc	r17, r1
    2f08:	e2 86       	std	Z+10, r14	; 0x0a
    2f0a:	f3 86       	std	Z+11, r15	; 0x0b
    2f0c:	04 87       	std	Z+12, r16	; 0x0c
    2f0e:	15 87       	std	Z+13, r17	; 0x0d
					res = move_window(dj.fs, dw);
    2f10:	cf 01       	movw	r24, r30
    2f12:	b5 01       	movw	r22, r10
    2f14:	a4 01       	movw	r20, r8
    2f16:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    2f1a:	28 2f       	mov	r18, r24
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
    2f1c:	88 23       	and	r24, r24
    2f1e:	79 f0       	breq	.+30     	; 0x2f3e <f_open+0x1a6>
    2f20:	93 c0       	rjmp	.+294    	; 0x3048 <f_open+0x2b0>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    2f22:	22 23       	and	r18, r18
    2f24:	09 f0       	breq	.+2      	; 0x2f28 <f_open+0x190>
    2f26:	90 c0       	rjmp	.+288    	; 0x3048 <f_open+0x2b0>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    2f28:	d6 01       	movw	r26, r12
    2f2a:	1b 96       	adiw	r26, 0x0b	; 11
    2f2c:	8c 91       	ld	r24, X
    2f2e:	84 ff       	sbrs	r24, 4
    2f30:	02 c0       	rjmp	.+4      	; 0x2f36 <f_open+0x19e>
    2f32:	24 e0       	ldi	r18, 0x04	; 4
    2f34:	89 c0       	rjmp	.+274    	; 0x3048 <f_open+0x2b0>
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2f36:	51 fe       	sbrs	r5, 1
    2f38:	02 c0       	rjmp	.+4      	; 0x2f3e <f_open+0x1a6>
    2f3a:	80 fd       	sbrc	r24, 0
    2f3c:	9e c0       	rjmp	.+316    	; 0x307a <f_open+0x2e2>
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    2f3e:	53 fe       	sbrs	r5, 3
    2f40:	02 c0       	rjmp	.+4      	; 0x2f46 <f_open+0x1ae>
			mode |= FA__WRITTEN;
    2f42:	b0 e2       	ldi	r27, 0x20	; 32
    2f44:	5b 2a       	or	r5, r27
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    2f46:	ed 85       	ldd	r30, Y+13	; 0x0d
    2f48:	fe 85       	ldd	r31, Y+14	; 0x0e
    2f4a:	22 a5       	ldd	r18, Z+42	; 0x2a
    2f4c:	33 a5       	ldd	r19, Z+43	; 0x2b
    2f4e:	44 a5       	ldd	r20, Z+44	; 0x2c
    2f50:	55 a5       	ldd	r21, Z+45	; 0x2d
    2f52:	d3 01       	movw	r26, r6
    2f54:	5a 96       	adiw	r26, 0x1a	; 26
    2f56:	2d 93       	st	X+, r18
    2f58:	3d 93       	st	X+, r19
    2f5a:	4d 93       	st	X+, r20
    2f5c:	5c 93       	st	X, r21
    2f5e:	5d 97       	sbiw	r26, 0x1d	; 29
		fp->dir_ptr = dir;
    2f60:	5f 96       	adiw	r26, 0x1f	; 31
    2f62:	dc 92       	st	X, r13
    2f64:	ce 92       	st	-X, r12
    2f66:	5e 97       	sbiw	r26, 0x1e	; 30
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    2f68:	14 96       	adiw	r26, 0x04	; 4
    2f6a:	5c 92       	st	X, r5
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    2f6c:	d6 01       	movw	r26, r12
    2f6e:	55 96       	adiw	r26, 0x15	; 21
    2f70:	3c 91       	ld	r19, X
    2f72:	55 97       	sbiw	r26, 0x15	; 21
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	54 96       	adiw	r26, 0x14	; 20
    2f78:	8c 91       	ld	r24, X
    2f7a:	54 97       	sbiw	r26, 0x14	; 20
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	28 2b       	or	r18, r24
    2f80:	39 2b       	or	r19, r25
    2f82:	40 e0       	ldi	r20, 0x00	; 0
    2f84:	50 e0       	ldi	r21, 0x00	; 0
    2f86:	a9 01       	movw	r20, r18
    2f88:	33 27       	eor	r19, r19
    2f8a:	22 27       	eor	r18, r18
    2f8c:	5b 96       	adiw	r26, 0x1b	; 27
    2f8e:	9c 91       	ld	r25, X
    2f90:	5b 97       	sbiw	r26, 0x1b	; 27
    2f92:	80 e0       	ldi	r24, 0x00	; 0
    2f94:	5a 96       	adiw	r26, 0x1a	; 26
    2f96:	6c 91       	ld	r22, X
    2f98:	70 e0       	ldi	r23, 0x00	; 0
    2f9a:	86 2b       	or	r24, r22
    2f9c:	97 2b       	or	r25, r23
    2f9e:	a0 e0       	ldi	r26, 0x00	; 0
    2fa0:	b0 e0       	ldi	r27, 0x00	; 0
    2fa2:	28 2b       	or	r18, r24
    2fa4:	39 2b       	or	r19, r25
    2fa6:	4a 2b       	or	r20, r26
    2fa8:	5b 2b       	or	r21, r27
    2faa:	d3 01       	movw	r26, r6
    2fac:	1e 96       	adiw	r26, 0x0e	; 14
    2fae:	2d 93       	st	X+, r18
    2fb0:	3d 93       	st	X+, r19
    2fb2:	4d 93       	st	X+, r20
    2fb4:	5c 93       	st	X, r21
    2fb6:	51 97       	sbiw	r26, 0x11	; 17
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2fb8:	d6 01       	movw	r26, r12
    2fba:	5f 96       	adiw	r26, 0x1f	; 31
    2fbc:	2c 91       	ld	r18, X
    2fbe:	5f 97       	sbiw	r26, 0x1f	; 31
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	40 e0       	ldi	r20, 0x00	; 0
    2fc4:	50 e0       	ldi	r21, 0x00	; 0
    2fc6:	52 2f       	mov	r21, r18
    2fc8:	44 27       	eor	r20, r20
    2fca:	33 27       	eor	r19, r19
    2fcc:	22 27       	eor	r18, r18
    2fce:	5e 96       	adiw	r26, 0x1e	; 30
    2fd0:	8c 91       	ld	r24, X
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	a0 e0       	ldi	r26, 0x00	; 0
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	dc 01       	movw	r26, r24
    2fda:	99 27       	eor	r25, r25
    2fdc:	88 27       	eor	r24, r24
    2fde:	28 2b       	or	r18, r24
    2fe0:	39 2b       	or	r19, r25
    2fe2:	4a 2b       	or	r20, r26
    2fe4:	5b 2b       	or	r21, r27
    2fe6:	d6 01       	movw	r26, r12
    2fe8:	5c 96       	adiw	r26, 0x1c	; 28
    2fea:	8c 91       	ld	r24, X
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	a0 e0       	ldi	r26, 0x00	; 0
    2ff0:	b0 e0       	ldi	r27, 0x00	; 0
    2ff2:	28 2b       	or	r18, r24
    2ff4:	39 2b       	or	r19, r25
    2ff6:	4a 2b       	or	r20, r26
    2ff8:	5b 2b       	or	r21, r27
    2ffa:	d6 01       	movw	r26, r12
    2ffc:	5d 96       	adiw	r26, 0x1d	; 29
    2ffe:	9c 91       	ld	r25, X
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	a0 e0       	ldi	r26, 0x00	; 0
    3004:	b0 e0       	ldi	r27, 0x00	; 0
    3006:	28 2b       	or	r18, r24
    3008:	39 2b       	or	r19, r25
    300a:	4a 2b       	or	r20, r26
    300c:	5b 2b       	or	r21, r27
    300e:	d3 01       	movw	r26, r6
    3010:	1a 96       	adiw	r26, 0x0a	; 10
    3012:	2d 93       	st	X+, r18
    3014:	3d 93       	st	X+, r19
    3016:	4d 93       	st	X+, r20
    3018:	5c 93       	st	X, r21
    301a:	1d 97       	sbiw	r26, 0x0d	; 13
		fp->fptr = 0;						/* File pointer */
    301c:	16 96       	adiw	r26, 0x06	; 6
    301e:	1d 92       	st	X+, r1
    3020:	1d 92       	st	X+, r1
    3022:	1d 92       	st	X+, r1
    3024:	1c 92       	st	X, r1
    3026:	19 97       	sbiw	r26, 0x09	; 9
		fp->dsect = 0;
    3028:	56 96       	adiw	r26, 0x16	; 22
    302a:	1d 92       	st	X+, r1
    302c:	1d 92       	st	X+, r1
    302e:	1d 92       	st	X+, r1
    3030:	1c 92       	st	X, r1
    3032:	59 97       	sbiw	r26, 0x19	; 25
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    3034:	11 96       	adiw	r26, 0x01	; 1
    3036:	fc 93       	st	X, r31
    3038:	ee 93       	st	-X, r30
    303a:	86 81       	ldd	r24, Z+6	; 0x06
    303c:	97 81       	ldd	r25, Z+7	; 0x07
    303e:	13 96       	adiw	r26, 0x03	; 3
    3040:	9c 93       	st	X, r25
    3042:	8e 93       	st	-X, r24
    3044:	12 97       	sbiw	r26, 0x02	; 2
    3046:	20 e0       	ldi	r18, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    3048:	82 2f       	mov	r24, r18
    304a:	a4 96       	adiw	r28, 0x24	; 36
    304c:	0f b6       	in	r0, 0x3f	; 63
    304e:	f8 94       	cli
    3050:	de bf       	out	0x3e, r29	; 62
    3052:	0f be       	out	0x3f, r0	; 63
    3054:	cd bf       	out	0x3d, r28	; 61
    3056:	cf 91       	pop	r28
    3058:	df 91       	pop	r29
    305a:	1f 91       	pop	r17
    305c:	0f 91       	pop	r16
    305e:	ff 90       	pop	r15
    3060:	ef 90       	pop	r14
    3062:	df 90       	pop	r13
    3064:	cf 90       	pop	r12
    3066:	bf 90       	pop	r11
    3068:	af 90       	pop	r10
    306a:	9f 90       	pop	r9
    306c:	8f 90       	pop	r8
    306e:	7f 90       	pop	r7
    3070:	6f 90       	pop	r6
    3072:	5f 90       	pop	r5
    3074:	08 95       	ret
		fp->fptr = 0;						/* File pointer */
		fp->dsect = 0;
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    3076:	28 e0       	ldi	r18, 0x08	; 8
    3078:	e7 cf       	rjmp	.-50     	; 0x3048 <f_open+0x2b0>
    307a:	27 e0       	ldi	r18, 0x07	; 7
    307c:	e5 cf       	rjmp	.-54     	; 0x3048 <f_open+0x2b0>

0000307e <f_getfree>:
FRESULT f_getfree (
	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    307e:	2f 92       	push	r2
    3080:	3f 92       	push	r3
    3082:	4f 92       	push	r4
    3084:	5f 92       	push	r5
    3086:	6f 92       	push	r6
    3088:	7f 92       	push	r7
    308a:	8f 92       	push	r8
    308c:	9f 92       	push	r9
    308e:	af 92       	push	r10
    3090:	bf 92       	push	r11
    3092:	cf 92       	push	r12
    3094:	df 92       	push	r13
    3096:	ef 92       	push	r14
    3098:	ff 92       	push	r15
    309a:	0f 93       	push	r16
    309c:	1f 93       	push	r17
    309e:	df 93       	push	r29
    30a0:	cf 93       	push	r28
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	29 97       	sbiw	r28, 0x09	; 9
    30a8:	0f b6       	in	r0, 0x3f	; 63
    30aa:	f8 94       	cli
    30ac:	de bf       	out	0x3e, r29	; 62
    30ae:	0f be       	out	0x3f, r0	; 63
    30b0:	cd bf       	out	0x3d, r28	; 61
    30b2:	9a 83       	std	Y+2, r25	; 0x02
    30b4:	89 83       	std	Y+1, r24	; 0x01
    30b6:	7d 83       	std	Y+5, r23	; 0x05
    30b8:	6c 83       	std	Y+4, r22	; 0x04
    30ba:	1a 01       	movw	r2, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    30bc:	ce 01       	movw	r24, r28
    30be:	01 96       	adiw	r24, 0x01	; 1
    30c0:	ba 01       	movw	r22, r20
    30c2:	40 e0       	ldi	r20, 0x00	; 0
    30c4:	0e 94 0f 07 	call	0xe1e	; 0xe1e <chk_mounted>
    30c8:	68 2f       	mov	r22, r24
	if (res == FR_OK) {
    30ca:	88 23       	and	r24, r24
    30cc:	09 f0       	breq	.+2      	; 0x30d0 <f_getfree+0x52>
    30ce:	ed c0       	rjmp	.+474    	; 0x32aa <f_getfree+0x22c>
		/* If free_clust is valid, return it without full cluster scan */
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
    30d0:	d1 01       	movw	r26, r2
    30d2:	ed 91       	ld	r30, X+
    30d4:	fc 91       	ld	r31, X
    30d6:	26 85       	ldd	r18, Z+14	; 0x0e
    30d8:	37 85       	ldd	r19, Z+15	; 0x0f
    30da:	40 89       	ldd	r20, Z+16	; 0x10
    30dc:	51 89       	ldd	r21, Z+17	; 0x11
    30de:	e6 88       	ldd	r14, Z+22	; 0x16
    30e0:	f7 88       	ldd	r15, Z+23	; 0x17
    30e2:	00 8d       	ldd	r16, Z+24	; 0x18
    30e4:	11 8d       	ldd	r17, Z+25	; 0x19
    30e6:	d8 01       	movw	r26, r16
    30e8:	c7 01       	movw	r24, r14
    30ea:	02 97       	sbiw	r24, 0x02	; 2
    30ec:	a1 09       	sbc	r26, r1
    30ee:	b1 09       	sbc	r27, r1
    30f0:	82 17       	cp	r24, r18
    30f2:	93 07       	cpc	r25, r19
    30f4:	a4 07       	cpc	r26, r20
    30f6:	b5 07       	cpc	r27, r21
    30f8:	38 f0       	brcs	.+14     	; 0x3108 <f_getfree+0x8a>
			*nclst = (*fatfs)->free_clust;
    30fa:	ec 81       	ldd	r30, Y+4	; 0x04
    30fc:	fd 81       	ldd	r31, Y+5	; 0x05
    30fe:	20 83       	st	Z, r18
    3100:	31 83       	std	Z+1, r19	; 0x01
    3102:	42 83       	std	Z+2, r20	; 0x02
    3104:	53 83       	std	Z+3, r21	; 0x03
    3106:	d1 c0       	rjmp	.+418    	; 0x32aa <f_getfree+0x22c>
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
    3108:	50 80       	ld	r5, Z
    310a:	5b 82       	std	Y+3, r5	; 0x03
			n = 0;
			if (fat == FS_FAT12) {
    310c:	25 2d       	mov	r18, r5
    310e:	21 30       	cpi	r18, 0x01	; 1
    3110:	e1 f5       	brne	.+120    	; 0x318a <f_getfree+0x10c>
    3112:	aa 24       	eor	r10, r10
    3114:	bb 24       	eor	r11, r11
    3116:	65 01       	movw	r12, r10
    3118:	92 e0       	ldi	r25, 0x02	; 2
    311a:	e9 2e       	mov	r14, r25
    311c:	f1 2c       	mov	r15, r1
    311e:	01 2d       	mov	r16, r1
    3120:	11 2d       	mov	r17, r1
				clst = 2;
				do {
					stat = get_fat(*fatfs, clst);
    3122:	d1 01       	movw	r26, r2
    3124:	8d 91       	ld	r24, X+
    3126:	9c 91       	ld	r25, X
    3128:	b8 01       	movw	r22, r16
    312a:	a7 01       	movw	r20, r14
    312c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    3130:	6f 3f       	cpi	r22, 0xFF	; 255
    3132:	bf ef       	ldi	r27, 0xFF	; 255
    3134:	7b 07       	cpc	r23, r27
    3136:	bf ef       	ldi	r27, 0xFF	; 255
    3138:	8b 07       	cpc	r24, r27
    313a:	bf ef       	ldi	r27, 0xFF	; 255
    313c:	9b 07       	cpc	r25, r27
    313e:	11 f4       	brne	.+4      	; 0x3144 <f_getfree+0xc6>
    3140:	91 e0       	ldi	r25, 0x01	; 1
    3142:	a0 c0       	rjmp	.+320    	; 0x3284 <f_getfree+0x206>
					if (stat == 1) { res = FR_INT_ERR; break; }
    3144:	61 30       	cpi	r22, 0x01	; 1
    3146:	71 05       	cpc	r23, r1
    3148:	81 05       	cpc	r24, r1
    314a:	91 05       	cpc	r25, r1
    314c:	11 f4       	brne	.+4      	; 0x3152 <f_getfree+0xd4>
    314e:	92 e0       	ldi	r25, 0x02	; 2
    3150:	99 c0       	rjmp	.+306    	; 0x3284 <f_getfree+0x206>
					if (stat == 0) n++;
    3152:	61 15       	cp	r22, r1
    3154:	71 05       	cpc	r23, r1
    3156:	81 05       	cpc	r24, r1
    3158:	91 05       	cpc	r25, r1
    315a:	29 f4       	brne	.+10     	; 0x3166 <f_getfree+0xe8>
    315c:	08 94       	sec
    315e:	a1 1c       	adc	r10, r1
    3160:	b1 1c       	adc	r11, r1
    3162:	c1 1c       	adc	r12, r1
    3164:	d1 1c       	adc	r13, r1
				} while (++clst < (*fatfs)->n_fatent);
    3166:	08 94       	sec
    3168:	e1 1c       	adc	r14, r1
    316a:	f1 1c       	adc	r15, r1
    316c:	01 1d       	adc	r16, r1
    316e:	11 1d       	adc	r17, r1
    3170:	d1 01       	movw	r26, r2
    3172:	ed 91       	ld	r30, X+
    3174:	fc 91       	ld	r31, X
    3176:	86 89       	ldd	r24, Z+22	; 0x16
    3178:	97 89       	ldd	r25, Z+23	; 0x17
    317a:	a0 8d       	ldd	r26, Z+24	; 0x18
    317c:	b1 8d       	ldd	r27, Z+25	; 0x19
    317e:	e8 16       	cp	r14, r24
    3180:	f9 06       	cpc	r15, r25
    3182:	0a 07       	cpc	r16, r26
    3184:	1b 07       	cpc	r17, r27
    3186:	68 f2       	brcs	.-102    	; 0x3122 <f_getfree+0xa4>
    3188:	7c c0       	rjmp	.+248    	; 0x3282 <f_getfree+0x204>
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
    318a:	66 8c       	ldd	r6, Z+30	; 0x1e
    318c:	77 8c       	ldd	r7, Z+31	; 0x1f
    318e:	80 a0       	ldd	r8, Z+32	; 0x20
    3190:	91 a0       	ldd	r9, Z+33	; 0x21
    3192:	aa 24       	eor	r10, r10
    3194:	bb 24       	eor	r11, r11
    3196:	65 01       	movw	r12, r10
    3198:	60 e0       	ldi	r22, 0x00	; 0
    319a:	70 e0       	ldi	r23, 0x00	; 0
    319c:	e0 e0       	ldi	r30, 0x00	; 0
    319e:	f0 e0       	ldi	r31, 0x00	; 0
				i = 0; p = 0;
				do {
					if (!i) {
    31a0:	61 15       	cp	r22, r1
    31a2:	71 05       	cpc	r23, r1
    31a4:	b1 f4       	brne	.+44     	; 0x31d2 <f_getfree+0x154>
						res = move_window(*fatfs, sect++);
    31a6:	f1 01       	movw	r30, r2
    31a8:	80 81       	ld	r24, Z
    31aa:	91 81       	ldd	r25, Z+1	; 0x01
    31ac:	b4 01       	movw	r22, r8
    31ae:	a3 01       	movw	r20, r6
    31b0:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    31b4:	98 2f       	mov	r25, r24
						if (res != FR_OK) break;
    31b6:	88 23       	and	r24, r24
    31b8:	09 f0       	breq	.+2      	; 0x31bc <f_getfree+0x13e>
    31ba:	64 c0       	rjmp	.+200    	; 0x3284 <f_getfree+0x206>
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
    31bc:	08 94       	sec
    31be:	61 1c       	adc	r6, r1
    31c0:	71 1c       	adc	r7, r1
    31c2:	81 1c       	adc	r8, r1
    31c4:	91 1c       	adc	r9, r1
						if (res != FR_OK) break;
						p = (*fatfs)->win;
    31c6:	d1 01       	movw	r26, r2
    31c8:	ed 91       	ld	r30, X+
    31ca:	fc 91       	ld	r31, X
    31cc:	be 96       	adiw	r30, 0x2e	; 46
    31ce:	60 e0       	ldi	r22, 0x00	; 0
    31d0:	72 e0       	ldi	r23, 0x02	; 2
    31d2:	b1 81       	ldd	r27, Z+1	; 0x01
    31d4:	b8 87       	std	Y+8, r27	; 0x08
    31d6:	20 81       	ld	r18, Z
    31d8:	29 87       	std	Y+9, r18	; 0x09
						i = SS(*fatfs);
					}
					if (fat == FS_FAT16) {
    31da:	3b 81       	ldd	r19, Y+3	; 0x03
    31dc:	32 30       	cpi	r19, 0x02	; 2
    31de:	99 f4       	brne	.+38     	; 0x3206 <f_getfree+0x188>
						if (LD_WORD(p) == 0) n++;
    31e0:	bf 83       	std	Y+7, r27	; 0x07
    31e2:	1e 82       	std	Y+6, r1	; 0x06
    31e4:	82 2f       	mov	r24, r18
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	ae 81       	ldd	r26, Y+6	; 0x06
    31ea:	bf 81       	ldd	r27, Y+7	; 0x07
    31ec:	8a 2b       	or	r24, r26
    31ee:	9b 2b       	or	r25, r27
    31f0:	89 2b       	or	r24, r25
    31f2:	29 f4       	brne	.+10     	; 0x31fe <f_getfree+0x180>
    31f4:	08 94       	sec
    31f6:	a1 1c       	adc	r10, r1
    31f8:	b1 1c       	adc	r11, r1
    31fa:	c1 1c       	adc	r12, r1
    31fc:	d1 1c       	adc	r13, r1
						p += 2; i -= 2;
    31fe:	32 96       	adiw	r30, 0x02	; 2
    3200:	62 50       	subi	r22, 0x02	; 2
    3202:	70 40       	sbci	r23, 0x00	; 0
    3204:	33 c0       	rjmp	.+102    	; 0x326c <f_getfree+0x1ee>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    3206:	23 81       	ldd	r18, Z+3	; 0x03
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	40 e0       	ldi	r20, 0x00	; 0
    320c:	50 e0       	ldi	r21, 0x00	; 0
    320e:	52 2f       	mov	r21, r18
    3210:	44 27       	eor	r20, r20
    3212:	33 27       	eor	r19, r19
    3214:	22 27       	eor	r18, r18
    3216:	82 81       	ldd	r24, Z+2	; 0x02
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	a0 e0       	ldi	r26, 0x00	; 0
    321c:	b0 e0       	ldi	r27, 0x00	; 0
    321e:	dc 01       	movw	r26, r24
    3220:	99 27       	eor	r25, r25
    3222:	88 27       	eor	r24, r24
    3224:	28 2b       	or	r18, r24
    3226:	39 2b       	or	r19, r25
    3228:	4a 2b       	or	r20, r26
    322a:	5b 2b       	or	r21, r27
    322c:	59 84       	ldd	r5, Y+9	; 0x09
    322e:	85 2d       	mov	r24, r5
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	a0 e0       	ldi	r26, 0x00	; 0
    3234:	b0 e0       	ldi	r27, 0x00	; 0
    3236:	28 2b       	or	r18, r24
    3238:	39 2b       	or	r19, r25
    323a:	4a 2b       	or	r20, r26
    323c:	5b 2b       	or	r21, r27
    323e:	58 84       	ldd	r5, Y+8	; 0x08
    3240:	44 24       	eor	r4, r4
    3242:	c2 01       	movw	r24, r4
    3244:	a0 e0       	ldi	r26, 0x00	; 0
    3246:	b0 e0       	ldi	r27, 0x00	; 0
    3248:	28 2b       	or	r18, r24
    324a:	39 2b       	or	r19, r25
    324c:	4a 2b       	or	r20, r26
    324e:	5b 2b       	or	r21, r27
    3250:	5f 70       	andi	r21, 0x0F	; 15
    3252:	21 15       	cp	r18, r1
    3254:	31 05       	cpc	r19, r1
    3256:	41 05       	cpc	r20, r1
    3258:	51 05       	cpc	r21, r1
    325a:	29 f4       	brne	.+10     	; 0x3266 <f_getfree+0x1e8>
    325c:	08 94       	sec
    325e:	a1 1c       	adc	r10, r1
    3260:	b1 1c       	adc	r11, r1
    3262:	c1 1c       	adc	r12, r1
    3264:	d1 1c       	adc	r13, r1
						p += 4; i -= 4;
    3266:	34 96       	adiw	r30, 0x04	; 4
    3268:	64 50       	subi	r22, 0x04	; 4
    326a:	70 40       	sbci	r23, 0x00	; 0
					}
				} while (--clst);
    326c:	08 94       	sec
    326e:	e1 08       	sbc	r14, r1
    3270:	f1 08       	sbc	r15, r1
    3272:	01 09       	sbc	r16, r1
    3274:	11 09       	sbc	r17, r1
    3276:	e1 14       	cp	r14, r1
    3278:	f1 04       	cpc	r15, r1
    327a:	01 05       	cpc	r16, r1
    327c:	11 05       	cpc	r17, r1
    327e:	09 f0       	breq	.+2      	; 0x3282 <f_getfree+0x204>
    3280:	8f cf       	rjmp	.-226    	; 0x31a0 <f_getfree+0x122>
    3282:	90 e0       	ldi	r25, 0x00	; 0
			}
			(*fatfs)->free_clust = n;
    3284:	d1 01       	movw	r26, r2
    3286:	ed 91       	ld	r30, X+
    3288:	fc 91       	ld	r31, X
    328a:	a6 86       	std	Z+14, r10	; 0x0e
    328c:	b7 86       	std	Z+15, r11	; 0x0f
    328e:	c0 8a       	std	Z+16, r12	; 0x10
    3290:	d1 8a       	std	Z+17, r13	; 0x11
			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    3292:	bb 81       	ldd	r27, Y+3	; 0x03
    3294:	b3 30       	cpi	r27, 0x03	; 3
    3296:	11 f4       	brne	.+4      	; 0x329c <f_getfree+0x21e>
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	85 83       	std	Z+5, r24	; 0x05
			*nclst = n;
    329c:	ec 81       	ldd	r30, Y+4	; 0x04
    329e:	fd 81       	ldd	r31, Y+5	; 0x05
    32a0:	a0 82       	st	Z, r10
    32a2:	b1 82       	std	Z+1, r11	; 0x01
    32a4:	c2 82       	std	Z+2, r12	; 0x02
    32a6:	d3 82       	std	Z+3, r13	; 0x03
    32a8:	69 2f       	mov	r22, r25
		}
	}
	LEAVE_FF(*fatfs, res);
}
    32aa:	86 2f       	mov	r24, r22
    32ac:	29 96       	adiw	r28, 0x09	; 9
    32ae:	0f b6       	in	r0, 0x3f	; 63
    32b0:	f8 94       	cli
    32b2:	de bf       	out	0x3e, r29	; 62
    32b4:	0f be       	out	0x3f, r0	; 63
    32b6:	cd bf       	out	0x3d, r28	; 61
    32b8:	cf 91       	pop	r28
    32ba:	df 91       	pop	r29
    32bc:	1f 91       	pop	r17
    32be:	0f 91       	pop	r16
    32c0:	ff 90       	pop	r15
    32c2:	ef 90       	pop	r14
    32c4:	df 90       	pop	r13
    32c6:	cf 90       	pop	r12
    32c8:	bf 90       	pop	r11
    32ca:	af 90       	pop	r10
    32cc:	9f 90       	pop	r9
    32ce:	8f 90       	pop	r8
    32d0:	7f 90       	pop	r7
    32d2:	6f 90       	pop	r6
    32d4:	5f 90       	pop	r5
    32d6:	4f 90       	pop	r4
    32d8:	3f 90       	pop	r3
    32da:	2f 90       	pop	r2
    32dc:	08 95       	ret

000032de <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    32de:	3f 92       	push	r3
    32e0:	4f 92       	push	r4
    32e2:	5f 92       	push	r5
    32e4:	6f 92       	push	r6
    32e6:	7f 92       	push	r7
    32e8:	8f 92       	push	r8
    32ea:	9f 92       	push	r9
    32ec:	af 92       	push	r10
    32ee:	bf 92       	push	r11
    32f0:	cf 92       	push	r12
    32f2:	df 92       	push	r13
    32f4:	ef 92       	push	r14
    32f6:	ff 92       	push	r15
    32f8:	0f 93       	push	r16
    32fa:	1f 93       	push	r17
    32fc:	df 93       	push	r29
    32fe:	cf 93       	push	r28
    3300:	00 d0       	rcall	.+0      	; 0x3302 <f_read+0x24>
    3302:	00 d0       	rcall	.+0      	; 0x3304 <f_read+0x26>
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
    3308:	9c 83       	std	Y+4, r25	; 0x04
    330a:	8b 83       	std	Y+3, r24	; 0x03
    330c:	16 2f       	mov	r17, r22
    330e:	07 2f       	mov	r16, r23
    3310:	3a 01       	movw	r6, r20
    3312:	3a 83       	std	Y+2, r19	; 0x02
    3314:	29 83       	std	Y+1, r18	; 0x01
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    3316:	d9 01       	movw	r26, r18
    3318:	1d 92       	st	X+, r1
    331a:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);				/* Check validity */
    331c:	fc 01       	movw	r30, r24
    331e:	62 81       	ldd	r22, Z+2	; 0x02
    3320:	73 81       	ldd	r23, Z+3	; 0x03
    3322:	80 81       	ld	r24, Z
    3324:	91 81       	ldd	r25, Z+1	; 0x01
    3326:	0e 94 76 06 	call	0xcec	; 0xcec <validate>
    332a:	88 2e       	mov	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    332c:	88 23       	and	r24, r24
    332e:	09 f0       	breq	.+2      	; 0x3332 <f_read+0x54>
    3330:	7d c1       	rjmp	.+762    	; 0x362c <f_read+0x34e>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    3332:	ab 81       	ldd	r26, Y+3	; 0x03
    3334:	bc 81       	ldd	r27, Y+4	; 0x04
    3336:	14 96       	adiw	r26, 0x04	; 4
    3338:	8c 91       	ld	r24, X
    333a:	87 fd       	sbrc	r24, 7
    333c:	65 c0       	rjmp	.+202    	; 0x3408 <f_read+0x12a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    333e:	80 fd       	sbrc	r24, 0
    3340:	03 c0       	rjmp	.+6      	; 0x3348 <f_read+0x6a>
    3342:	07 e0       	ldi	r16, 0x07	; 7
    3344:	80 2e       	mov	r8, r16
    3346:	72 c1       	rjmp	.+740    	; 0x362c <f_read+0x34e>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    3348:	eb 81       	ldd	r30, Y+3	; 0x03
    334a:	fc 81       	ldd	r31, Y+4	; 0x04
    334c:	22 85       	ldd	r18, Z+10	; 0x0a
    334e:	33 85       	ldd	r19, Z+11	; 0x0b
    3350:	44 85       	ldd	r20, Z+12	; 0x0c
    3352:	55 85       	ldd	r21, Z+13	; 0x0d
    3354:	86 81       	ldd	r24, Z+6	; 0x06
    3356:	97 81       	ldd	r25, Z+7	; 0x07
    3358:	a0 85       	ldd	r26, Z+8	; 0x08
    335a:	b1 85       	ldd	r27, Z+9	; 0x09
    335c:	28 1b       	sub	r18, r24
    335e:	39 0b       	sbc	r19, r25
    3360:	4a 0b       	sbc	r20, r26
    3362:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    3364:	c3 01       	movw	r24, r6
    3366:	a0 e0       	ldi	r26, 0x00	; 0
    3368:	b0 e0       	ldi	r27, 0x00	; 0
    336a:	28 17       	cp	r18, r24
    336c:	39 07       	cpc	r19, r25
    336e:	4a 07       	cpc	r20, r26
    3370:	5b 07       	cpc	r21, r27
    3372:	08 f4       	brcc	.+2      	; 0x3376 <f_read+0x98>
    3374:	39 01       	movw	r6, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    3376:	81 2f       	mov	r24, r17
    3378:	90 2f       	mov	r25, r16
    337a:	9c 01       	movw	r18, r24
    337c:	29 01       	movw	r4, r18
    337e:	52 c1       	rjmp	.+676    	; 0x3624 <f_read+0x346>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    3380:	ab 81       	ldd	r26, Y+3	; 0x03
    3382:	bc 81       	ldd	r27, Y+4	; 0x04
    3384:	16 96       	adiw	r26, 0x06	; 6
    3386:	2d 91       	ld	r18, X+
    3388:	3d 91       	ld	r19, X+
    338a:	4d 91       	ld	r20, X+
    338c:	5c 91       	ld	r21, X
    338e:	19 97       	sbiw	r26, 0x09	; 9
    3390:	da 01       	movw	r26, r20
    3392:	c9 01       	movw	r24, r18
    3394:	91 70       	andi	r25, 0x01	; 1
    3396:	a0 70       	andi	r26, 0x00	; 0
    3398:	b0 70       	andi	r27, 0x00	; 0
    339a:	00 97       	sbiw	r24, 0x00	; 0
    339c:	a1 05       	cpc	r26, r1
    339e:	b1 05       	cpc	r27, r1
    33a0:	09 f0       	breq	.+2      	; 0x33a4 <f_read+0xc6>
    33a2:	e6 c0       	rjmp	.+460    	; 0x3570 <f_read+0x292>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    33a4:	ab 81       	ldd	r26, Y+3	; 0x03
    33a6:	bc 81       	ldd	r27, Y+4	; 0x04
    33a8:	ed 91       	ld	r30, X+
    33aa:	fc 91       	ld	r31, X
    33ac:	da 01       	movw	r26, r20
    33ae:	c9 01       	movw	r24, r18
    33b0:	19 e0       	ldi	r17, 0x09	; 9
    33b2:	b6 95       	lsr	r27
    33b4:	a7 95       	ror	r26
    33b6:	97 95       	ror	r25
    33b8:	87 95       	ror	r24
    33ba:	1a 95       	dec	r17
    33bc:	d1 f7       	brne	.-12     	; 0x33b2 <f_read+0xd4>
    33be:	92 80       	ldd	r9, Z+2	; 0x02
    33c0:	9a 94       	dec	r9
    33c2:	98 22       	and	r9, r24
			if (!csect) {						/* On the cluster boundary? */
    33c4:	99 f5       	brne	.+102    	; 0x342c <f_read+0x14e>
				if (fp->fptr == 0) {			/* On the top of the file? */
    33c6:	21 15       	cp	r18, r1
    33c8:	31 05       	cpc	r19, r1
    33ca:	41 05       	cpc	r20, r1
    33cc:	51 05       	cpc	r21, r1
    33ce:	39 f4       	brne	.+14     	; 0x33de <f_read+0x100>
					clst = fp->sclust;			/* Follow from the origin */
    33d0:	eb 81       	ldd	r30, Y+3	; 0x03
    33d2:	fc 81       	ldd	r31, Y+4	; 0x04
    33d4:	66 85       	ldd	r22, Z+14	; 0x0e
    33d6:	77 85       	ldd	r23, Z+15	; 0x0f
    33d8:	80 89       	ldd	r24, Z+16	; 0x10
    33da:	91 89       	ldd	r25, Z+17	; 0x11
    33dc:	0b c0       	rjmp	.+22     	; 0x33f4 <f_read+0x116>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    33de:	ab 81       	ldd	r26, Y+3	; 0x03
    33e0:	bc 81       	ldd	r27, Y+4	; 0x04
    33e2:	52 96       	adiw	r26, 0x12	; 18
    33e4:	4d 91       	ld	r20, X+
    33e6:	5d 91       	ld	r21, X+
    33e8:	6d 91       	ld	r22, X+
    33ea:	7c 91       	ld	r23, X
    33ec:	55 97       	sbiw	r26, 0x15	; 21
    33ee:	cf 01       	movw	r24, r30
    33f0:	0e 94 75 0c 	call	0x18ea	; 0x18ea <get_fat>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    33f4:	62 30       	cpi	r22, 0x02	; 2
    33f6:	71 05       	cpc	r23, r1
    33f8:	81 05       	cpc	r24, r1
    33fa:	91 05       	cpc	r25, r1
    33fc:	40 f4       	brcc	.+16     	; 0x340e <f_read+0x130>
    33fe:	eb 81       	ldd	r30, Y+3	; 0x03
    3400:	fc 81       	ldd	r31, Y+4	; 0x04
    3402:	84 81       	ldd	r24, Z+4	; 0x04
    3404:	80 68       	ori	r24, 0x80	; 128
    3406:	84 83       	std	Z+4, r24	; 0x04
    3408:	e2 e0       	ldi	r30, 0x02	; 2
    340a:	8e 2e       	mov	r8, r30
    340c:	0f c1       	rjmp	.+542    	; 0x362c <f_read+0x34e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    340e:	6f 3f       	cpi	r22, 0xFF	; 255
    3410:	ff ef       	ldi	r31, 0xFF	; 255
    3412:	7f 07       	cpc	r23, r31
    3414:	ff ef       	ldi	r31, 0xFF	; 255
    3416:	8f 07       	cpc	r24, r31
    3418:	ff ef       	ldi	r31, 0xFF	; 255
    341a:	9f 07       	cpc	r25, r31
    341c:	09 f4       	brne	.+2      	; 0x3420 <f_read+0x142>
    341e:	67 c0       	rjmp	.+206    	; 0x34ee <f_read+0x210>
				fp->clust = clst;				/* Update current cluster */
    3420:	eb 81       	ldd	r30, Y+3	; 0x03
    3422:	fc 81       	ldd	r31, Y+4	; 0x04
    3424:	62 8b       	std	Z+18, r22	; 0x12
    3426:	73 8b       	std	Z+19, r23	; 0x13
    3428:	84 8b       	std	Z+20, r24	; 0x14
    342a:	95 8b       	std	Z+21, r25	; 0x15
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    342c:	ab 81       	ldd	r26, Y+3	; 0x03
    342e:	bc 81       	ldd	r27, Y+4	; 0x04
    3430:	0d 91       	ld	r16, X+
    3432:	1c 91       	ld	r17, X
    3434:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3436:	52 96       	adiw	r26, 0x12	; 18
    3438:	2d 91       	ld	r18, X+
    343a:	3d 91       	ld	r19, X+
    343c:	4d 91       	ld	r20, X+
    343e:	5c 91       	ld	r21, X
    3440:	55 97       	sbiw	r26, 0x15	; 21
    3442:	22 50       	subi	r18, 0x02	; 2
    3444:	30 40       	sbci	r19, 0x00	; 0
    3446:	40 40       	sbci	r20, 0x00	; 0
    3448:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    344a:	f8 01       	movw	r30, r16
    344c:	86 89       	ldd	r24, Z+22	; 0x16
    344e:	97 89       	ldd	r25, Z+23	; 0x17
    3450:	a0 8d       	ldd	r26, Z+24	; 0x18
    3452:	b1 8d       	ldd	r27, Z+25	; 0x19
    3454:	02 97       	sbiw	r24, 0x02	; 2
    3456:	a1 09       	sbc	r26, r1
    3458:	b1 09       	sbc	r27, r1
    345a:	28 17       	cp	r18, r24
    345c:	39 07       	cpc	r19, r25
    345e:	4a 07       	cpc	r20, r26
    3460:	5b 07       	cpc	r21, r27
    3462:	b8 f4       	brcc	.+46     	; 0x3492 <f_read+0x1b4>
	return clst * fs->csize + fs->database;
    3464:	32 80       	ldd	r3, Z+2	; 0x02
    3466:	63 2d       	mov	r22, r3
    3468:	70 e0       	ldi	r23, 0x00	; 0
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <__mulsi3>
    3472:	9b 01       	movw	r18, r22
    3474:	ac 01       	movw	r20, r24
    3476:	f8 01       	movw	r30, r16
    3478:	86 a1       	ldd	r24, Z+38	; 0x26
    347a:	97 a1       	ldd	r25, Z+39	; 0x27
    347c:	a0 a5       	ldd	r26, Z+40	; 0x28
    347e:	b1 a5       	ldd	r27, Z+41	; 0x29
    3480:	28 0f       	add	r18, r24
    3482:	39 1f       	adc	r19, r25
    3484:	4a 1f       	adc	r20, r26
    3486:	5b 1f       	adc	r21, r27
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3488:	21 15       	cp	r18, r1
    348a:	31 05       	cpc	r19, r1
    348c:	41 05       	cpc	r20, r1
    348e:	51 05       	cpc	r21, r1
    3490:	49 f4       	brne	.+18     	; 0x34a4 <f_read+0x1c6>
    3492:	ab 81       	ldd	r26, Y+3	; 0x03
    3494:	bc 81       	ldd	r27, Y+4	; 0x04
    3496:	14 96       	adiw	r26, 0x04	; 4
    3498:	8c 91       	ld	r24, X
    349a:	14 97       	sbiw	r26, 0x04	; 4
    349c:	80 68       	ori	r24, 0x80	; 128
    349e:	14 96       	adiw	r26, 0x04	; 4
    34a0:	8c 93       	st	X, r24
    34a2:	b2 cf       	rjmp	.-156    	; 0x3408 <f_read+0x12a>
			sect += csect;
    34a4:	69 01       	movw	r12, r18
    34a6:	7a 01       	movw	r14, r20
    34a8:	c9 0c       	add	r12, r9
    34aa:	d1 1c       	adc	r13, r1
    34ac:	e1 1c       	adc	r14, r1
    34ae:	f1 1c       	adc	r15, r1
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    34b0:	53 01       	movw	r10, r6
    34b2:	ab 2c       	mov	r10, r11
    34b4:	bb 24       	eor	r11, r11
    34b6:	a6 94       	lsr	r10
			if (cc) {							/* Read maximum contiguous sectors directly */
    34b8:	a1 14       	cp	r10, r1
    34ba:	b1 04       	cpc	r11, r1
    34bc:	09 f4       	brne	.+2      	; 0x34c0 <f_read+0x1e2>
    34be:	52 c0       	rjmp	.+164    	; 0x3564 <f_read+0x286>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    34c0:	29 2d       	mov	r18, r9
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	c5 01       	movw	r24, r10
    34c6:	82 0f       	add	r24, r18
    34c8:	93 1f       	adc	r25, r19
    34ca:	63 2d       	mov	r22, r3
    34cc:	70 e0       	ldi	r23, 0x00	; 0
    34ce:	68 17       	cp	r22, r24
    34d0:	79 07       	cpc	r23, r25
    34d2:	18 f4       	brcc	.+6      	; 0x34da <f_read+0x1fc>
					cc = fp->fs->csize - csect;
    34d4:	5b 01       	movw	r10, r22
    34d6:	a2 1a       	sub	r10, r18
    34d8:	b3 0a       	sbc	r11, r19
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    34da:	f8 01       	movw	r30, r16
    34dc:	81 81       	ldd	r24, Z+1	; 0x01
    34de:	b2 01       	movw	r22, r4
    34e0:	a7 01       	movw	r20, r14
    34e2:	96 01       	movw	r18, r12
    34e4:	0a 2d       	mov	r16, r10
    34e6:	0e 94 cf 02 	call	0x59e	; 0x59e <disk_read>
    34ea:	88 23       	and	r24, r24
    34ec:	49 f0       	breq	.+18     	; 0x3500 <f_read+0x222>
					ABORT(fp->fs, FR_DISK_ERR);
    34ee:	ab 81       	ldd	r26, Y+3	; 0x03
    34f0:	bc 81       	ldd	r27, Y+4	; 0x04
    34f2:	14 96       	adiw	r26, 0x04	; 4
    34f4:	8c 91       	ld	r24, X
    34f6:	14 97       	sbiw	r26, 0x04	; 4
    34f8:	80 68       	ori	r24, 0x80	; 128
    34fa:	14 96       	adiw	r26, 0x04	; 4
    34fc:	8c 93       	st	X, r24
    34fe:	51 c0       	rjmp	.+162    	; 0x35a2 <f_read+0x2c4>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    3500:	ab 81       	ldd	r26, Y+3	; 0x03
    3502:	bc 81       	ldd	r27, Y+4	; 0x04
    3504:	ed 91       	ld	r30, X+
    3506:	fc 91       	ld	r31, X
    3508:	84 81       	ldd	r24, Z+4	; 0x04
    350a:	88 23       	and	r24, r24
    350c:	31 f1       	breq	.+76     	; 0x355a <f_read+0x27c>
    350e:	22 a5       	ldd	r18, Z+42	; 0x2a
    3510:	33 a5       	ldd	r19, Z+43	; 0x2b
    3512:	44 a5       	ldd	r20, Z+44	; 0x2c
    3514:	55 a5       	ldd	r21, Z+45	; 0x2d
    3516:	2c 19       	sub	r18, r12
    3518:	3d 09       	sbc	r19, r13
    351a:	4e 09       	sbc	r20, r14
    351c:	5f 09       	sbc	r21, r15
    351e:	c5 01       	movw	r24, r10
    3520:	a0 e0       	ldi	r26, 0x00	; 0
    3522:	b0 e0       	ldi	r27, 0x00	; 0
    3524:	28 17       	cp	r18, r24
    3526:	39 07       	cpc	r19, r25
    3528:	4a 07       	cpc	r20, r26
    352a:	5b 07       	cpc	r21, r27
    352c:	b0 f4       	brcc	.+44     	; 0x355a <f_read+0x27c>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    352e:	69 e0       	ldi	r22, 0x09	; 9
    3530:	22 0f       	add	r18, r18
    3532:	33 1f       	adc	r19, r19
    3534:	44 1f       	adc	r20, r20
    3536:	55 1f       	adc	r21, r21
    3538:	6a 95       	dec	r22
    353a:	d1 f7       	brne	.-12     	; 0x3530 <f_read+0x252>
    353c:	c2 01       	movw	r24, r4
    353e:	82 0f       	add	r24, r18
    3540:	93 1f       	adc	r25, r19
	const BYTE *s = (const BYTE*)src;
    3542:	df 01       	movw	r26, r30
    3544:	9e 96       	adiw	r26, 0x2e	; 46
    3546:	fc 01       	movw	r30, r24
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    3548:	9c 01       	movw	r18, r24
    354a:	20 50       	subi	r18, 0x00	; 0
    354c:	3e 4f       	sbci	r19, 0xFE	; 254
    354e:	02 c0       	rjmp	.+4      	; 0x3554 <f_read+0x276>
		*d++ = *s++;
    3550:	8d 91       	ld	r24, X+
    3552:	81 93       	st	Z+, r24
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    3554:	e2 17       	cp	r30, r18
    3556:	f3 07       	cpc	r31, r19
    3558:	d9 f7       	brne	.-10     	; 0x3550 <f_read+0x272>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    355a:	b5 01       	movw	r22, r10
    355c:	76 2f       	mov	r23, r22
    355e:	66 27       	eor	r22, r22
    3560:	77 0f       	add	r23, r23
    3562:	43 c0       	rjmp	.+134    	; 0x35ea <f_read+0x30c>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    3564:	eb 81       	ldd	r30, Y+3	; 0x03
    3566:	fc 81       	ldd	r31, Y+4	; 0x04
    3568:	c6 8a       	std	Z+22, r12	; 0x16
    356a:	d7 8a       	std	Z+23, r13	; 0x17
    356c:	e0 8e       	std	Z+24, r14	; 0x18
    356e:	f1 8e       	std	Z+25, r15	; 0x19
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    3570:	ab 81       	ldd	r26, Y+3	; 0x03
    3572:	bc 81       	ldd	r27, Y+4	; 0x04
    3574:	16 96       	adiw	r26, 0x06	; 6
    3576:	cd 90       	ld	r12, X+
    3578:	dd 90       	ld	r13, X+
    357a:	ed 90       	ld	r14, X+
    357c:	fc 90       	ld	r15, X
    357e:	19 97       	sbiw	r26, 0x09	; 9
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    3580:	56 96       	adiw	r26, 0x16	; 22
    3582:	4d 91       	ld	r20, X+
    3584:	5d 91       	ld	r21, X+
    3586:	6d 91       	ld	r22, X+
    3588:	7c 91       	ld	r23, X
    358a:	59 97       	sbiw	r26, 0x19	; 25
    358c:	8d 91       	ld	r24, X+
    358e:	9c 91       	ld	r25, X
    3590:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    3594:	88 23       	and	r24, r24
    3596:	41 f0       	breq	.+16     	; 0x35a8 <f_read+0x2ca>
			ABORT(fp->fs, FR_DISK_ERR);
    3598:	eb 81       	ldd	r30, Y+3	; 0x03
    359a:	fc 81       	ldd	r31, Y+4	; 0x04
    359c:	84 81       	ldd	r24, Z+4	; 0x04
    359e:	80 68       	ori	r24, 0x80	; 128
    35a0:	84 83       	std	Z+4, r24	; 0x04
    35a2:	88 24       	eor	r8, r8
    35a4:	83 94       	inc	r8
    35a6:	42 c0       	rjmp	.+132    	; 0x362c <f_read+0x34e>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    35a8:	c6 01       	movw	r24, r12
    35aa:	91 70       	andi	r25, 0x01	; 1
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	32 e0       	ldi	r19, 0x02	; 2
    35b0:	28 1b       	sub	r18, r24
    35b2:	39 0b       	sbc	r19, r25
    35b4:	b3 01       	movw	r22, r6
    35b6:	26 15       	cp	r18, r6
    35b8:	37 05       	cpc	r19, r7
    35ba:	08 f4       	brcc	.+2      	; 0x35be <f_read+0x2e0>
    35bc:	b9 01       	movw	r22, r18

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
    35be:	ab 81       	ldd	r26, Y+3	; 0x03
    35c0:	bc 81       	ldd	r27, Y+4	; 0x04
    35c2:	16 96       	adiw	r26, 0x06	; 6
    35c4:	8d 91       	ld	r24, X+
    35c6:	9c 91       	ld	r25, X
    35c8:	17 97       	sbiw	r26, 0x07	; 7
    35ca:	91 70       	andi	r25, 0x01	; 1
    35cc:	8e 96       	adiw	r24, 0x2e	; 46
    35ce:	ed 91       	ld	r30, X+
    35d0:	fc 91       	ld	r31, X
    35d2:	e8 0f       	add	r30, r24
    35d4:	f9 1f       	adc	r31, r25
    35d6:	d2 01       	movw	r26, r4
    35d8:	9b 01       	movw	r18, r22
    35da:	04 c0       	rjmp	.+8      	; 0x35e4 <f_read+0x306>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
    35dc:	81 91       	ld	r24, Z+
    35de:	8d 93       	st	X+, r24
    35e0:	21 50       	subi	r18, 0x01	; 1
    35e2:	30 40       	sbci	r19, 0x00	; 0
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    35e4:	21 15       	cp	r18, r1
    35e6:	31 05       	cpc	r19, r1
    35e8:	c9 f7       	brne	.-14     	; 0x35dc <f_read+0x2fe>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    35ea:	46 0e       	add	r4, r22
    35ec:	57 1e       	adc	r5, r23
    35ee:	cb 01       	movw	r24, r22
    35f0:	a0 e0       	ldi	r26, 0x00	; 0
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	eb 81       	ldd	r30, Y+3	; 0x03
    35f6:	fc 81       	ldd	r31, Y+4	; 0x04
    35f8:	26 81       	ldd	r18, Z+6	; 0x06
    35fa:	37 81       	ldd	r19, Z+7	; 0x07
    35fc:	40 85       	ldd	r20, Z+8	; 0x08
    35fe:	51 85       	ldd	r21, Z+9	; 0x09
    3600:	28 0f       	add	r18, r24
    3602:	39 1f       	adc	r19, r25
    3604:	4a 1f       	adc	r20, r26
    3606:	5b 1f       	adc	r21, r27
    3608:	26 83       	std	Z+6, r18	; 0x06
    360a:	37 83       	std	Z+7, r19	; 0x07
    360c:	40 87       	std	Z+8, r20	; 0x08
    360e:	51 87       	std	Z+9, r21	; 0x09
    3610:	e9 81       	ldd	r30, Y+1	; 0x01
    3612:	fa 81       	ldd	r31, Y+2	; 0x02
    3614:	80 81       	ld	r24, Z
    3616:	91 81       	ldd	r25, Z+1	; 0x01
    3618:	86 0f       	add	r24, r22
    361a:	97 1f       	adc	r25, r23
    361c:	91 83       	std	Z+1, r25	; 0x01
    361e:	80 83       	st	Z, r24
    3620:	66 1a       	sub	r6, r22
    3622:	77 0a       	sbc	r7, r23
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    3624:	61 14       	cp	r6, r1
    3626:	71 04       	cpc	r7, r1
    3628:	09 f0       	breq	.+2      	; 0x362c <f_read+0x34e>
    362a:	aa ce       	rjmp	.-684    	; 0x3380 <f_read+0xa2>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    362c:	88 2d       	mov	r24, r8
    362e:	0f 90       	pop	r0
    3630:	0f 90       	pop	r0
    3632:	0f 90       	pop	r0
    3634:	0f 90       	pop	r0
    3636:	cf 91       	pop	r28
    3638:	df 91       	pop	r29
    363a:	1f 91       	pop	r17
    363c:	0f 91       	pop	r16
    363e:	ff 90       	pop	r15
    3640:	ef 90       	pop	r14
    3642:	df 90       	pop	r13
    3644:	cf 90       	pop	r12
    3646:	bf 90       	pop	r11
    3648:	af 90       	pop	r10
    364a:	9f 90       	pop	r9
    364c:	8f 90       	pop	r8
    364e:	7f 90       	pop	r7
    3650:	6f 90       	pop	r6
    3652:	5f 90       	pop	r5
    3654:	4f 90       	pop	r4
    3656:	3f 90       	pop	r3
    3658:	08 95       	ret

0000365a <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    365a:	2f 92       	push	r2
    365c:	3f 92       	push	r3
    365e:	4f 92       	push	r4
    3660:	5f 92       	push	r5
    3662:	6f 92       	push	r6
    3664:	7f 92       	push	r7
    3666:	8f 92       	push	r8
    3668:	9f 92       	push	r9
    366a:	af 92       	push	r10
    366c:	bf 92       	push	r11
    366e:	cf 92       	push	r12
    3670:	df 92       	push	r13
    3672:	ef 92       	push	r14
    3674:	ff 92       	push	r15
    3676:	0f 93       	push	r16
    3678:	1f 93       	push	r17
    367a:	df 93       	push	r29
    367c:	cf 93       	push	r28
    367e:	00 d0       	rcall	.+0      	; 0x3680 <f_write+0x26>
    3680:	00 d0       	rcall	.+0      	; 0x3682 <f_write+0x28>
    3682:	cd b7       	in	r28, 0x3d	; 61
    3684:	de b7       	in	r29, 0x3e	; 62
    3686:	9c 83       	std	Y+4, r25	; 0x04
    3688:	8b 83       	std	Y+3, r24	; 0x03
    368a:	16 2f       	mov	r17, r22
    368c:	07 2f       	mov	r16, r23
    368e:	3a 01       	movw	r6, r20
    3690:	3a 83       	std	Y+2, r19	; 0x02
    3692:	29 83       	std	Y+1, r18	; 0x01
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    3694:	d9 01       	movw	r26, r18
    3696:	1d 92       	st	X+, r1
    3698:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);			/* Check validity */
    369a:	fc 01       	movw	r30, r24
    369c:	62 81       	ldd	r22, Z+2	; 0x02
    369e:	73 81       	ldd	r23, Z+3	; 0x03
    36a0:	80 81       	ld	r24, Z
    36a2:	91 81       	ldd	r25, Z+1	; 0x01
    36a4:	0e 94 76 06 	call	0xcec	; 0xcec <validate>
    36a8:	88 2e       	mov	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    36aa:	88 23       	and	r24, r24
    36ac:	09 f0       	breq	.+2      	; 0x36b0 <f_write+0x56>
    36ae:	fd c1       	rjmp	.+1018   	; 0x3aaa <f_write+0x450>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    36b0:	ab 81       	ldd	r26, Y+3	; 0x03
    36b2:	bc 81       	ldd	r27, Y+4	; 0x04
    36b4:	14 96       	adiw	r26, 0x04	; 4
    36b6:	8c 91       	ld	r24, X
    36b8:	87 fd       	sbrc	r24, 7
    36ba:	7f c0       	rjmp	.+254    	; 0x37ba <f_write+0x160>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    36bc:	81 fd       	sbrc	r24, 1
    36be:	03 c0       	rjmp	.+6      	; 0x36c6 <f_write+0x6c>
    36c0:	77 e0       	ldi	r23, 0x07	; 7
    36c2:	87 2e       	mov	r8, r23
    36c4:	f2 c1       	rjmp	.+996    	; 0x3aaa <f_write+0x450>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    36c6:	eb 81       	ldd	r30, Y+3	; 0x03
    36c8:	fc 81       	ldd	r31, Y+4	; 0x04
    36ca:	22 85       	ldd	r18, Z+10	; 0x0a
    36cc:	33 85       	ldd	r19, Z+11	; 0x0b
    36ce:	44 85       	ldd	r20, Z+12	; 0x0c
    36d0:	55 85       	ldd	r21, Z+13	; 0x0d
    36d2:	c3 01       	movw	r24, r6
    36d4:	a0 e0       	ldi	r26, 0x00	; 0
    36d6:	b0 e0       	ldi	r27, 0x00	; 0
    36d8:	82 0f       	add	r24, r18
    36da:	93 1f       	adc	r25, r19
    36dc:	a4 1f       	adc	r26, r20
    36de:	b5 1f       	adc	r27, r21
    36e0:	82 17       	cp	r24, r18
    36e2:	93 07       	cpc	r25, r19
    36e4:	a4 07       	cpc	r26, r20
    36e6:	b5 07       	cpc	r27, r21
    36e8:	10 f4       	brcc	.+4      	; 0x36ee <f_write+0x94>
    36ea:	66 24       	eor	r6, r6
    36ec:	77 24       	eor	r7, r7
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    36ee:	81 2f       	mov	r24, r17
    36f0:	90 2f       	mov	r25, r16
    36f2:	9c 01       	movw	r18, r24
    36f4:	19 01       	movw	r2, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    36f6:	44 24       	eor	r4, r4
    36f8:	43 94       	inc	r4
    36fa:	b2 c1       	rjmp	.+868    	; 0x3a60 <f_write+0x406>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    36fc:	ab 81       	ldd	r26, Y+3	; 0x03
    36fe:	bc 81       	ldd	r27, Y+4	; 0x04
    3700:	16 96       	adiw	r26, 0x06	; 6
    3702:	2d 91       	ld	r18, X+
    3704:	3d 91       	ld	r19, X+
    3706:	4d 91       	ld	r20, X+
    3708:	5c 91       	ld	r21, X
    370a:	19 97       	sbiw	r26, 0x09	; 9
    370c:	da 01       	movw	r26, r20
    370e:	c9 01       	movw	r24, r18
    3710:	91 70       	andi	r25, 0x01	; 1
    3712:	a0 70       	andi	r26, 0x00	; 0
    3714:	b0 70       	andi	r27, 0x00	; 0
    3716:	00 97       	sbiw	r24, 0x00	; 0
    3718:	a1 05       	cpc	r26, r1
    371a:	b1 05       	cpc	r27, r1
    371c:	09 f0       	breq	.+2      	; 0x3720 <f_write+0xc6>
    371e:	41 c1       	rjmp	.+642    	; 0x39a2 <f_write+0x348>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    3720:	ab 81       	ldd	r26, Y+3	; 0x03
    3722:	bc 81       	ldd	r27, Y+4	; 0x04
    3724:	ed 91       	ld	r30, X+
    3726:	fc 91       	ld	r31, X
    3728:	da 01       	movw	r26, r20
    372a:	c9 01       	movw	r24, r18
    372c:	69 e0       	ldi	r22, 0x09	; 9
    372e:	b6 95       	lsr	r27
    3730:	a7 95       	ror	r26
    3732:	97 95       	ror	r25
    3734:	87 95       	ror	r24
    3736:	6a 95       	dec	r22
    3738:	d1 f7       	brne	.-12     	; 0x372e <f_write+0xd4>
    373a:	92 80       	ldd	r9, Z+2	; 0x02
    373c:	9a 94       	dec	r9
    373e:	98 22       	and	r9, r24
			if (!csect) {					/* On the cluster boundary? */
    3740:	09 f0       	breq	.+2      	; 0x3744 <f_write+0xea>
    3742:	4d c0       	rjmp	.+154    	; 0x37de <f_write+0x184>
				if (fp->fptr == 0) {		/* On the top of the file? */
    3744:	21 15       	cp	r18, r1
    3746:	31 05       	cpc	r19, r1
    3748:	41 05       	cpc	r20, r1
    374a:	51 05       	cpc	r21, r1
    374c:	d9 f4       	brne	.+54     	; 0x3784 <f_write+0x12a>
					clst = fp->sclust;		/* Follow from the origin */
    374e:	ab 81       	ldd	r26, Y+3	; 0x03
    3750:	bc 81       	ldd	r27, Y+4	; 0x04
    3752:	1e 96       	adiw	r26, 0x0e	; 14
    3754:	6d 91       	ld	r22, X+
    3756:	7d 91       	ld	r23, X+
    3758:	8d 91       	ld	r24, X+
    375a:	9c 91       	ld	r25, X
    375c:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)			/* When no cluster is allocated, */
    375e:	61 15       	cp	r22, r1
    3760:	71 05       	cpc	r23, r1
    3762:	81 05       	cpc	r24, r1
    3764:	91 05       	cpc	r25, r1
    3766:	f9 f4       	brne	.+62     	; 0x37a6 <f_write+0x14c>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    3768:	cf 01       	movw	r24, r30
    376a:	40 e0       	ldi	r20, 0x00	; 0
    376c:	50 e0       	ldi	r21, 0x00	; 0
    376e:	60 e0       	ldi	r22, 0x00	; 0
    3770:	70 e0       	ldi	r23, 0x00	; 0
    3772:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <create_chain>
    3776:	eb 81       	ldd	r30, Y+3	; 0x03
    3778:	fc 81       	ldd	r31, Y+4	; 0x04
    377a:	66 87       	std	Z+14, r22	; 0x0e
    377c:	77 87       	std	Z+15, r23	; 0x0f
    377e:	80 8b       	std	Z+16, r24	; 0x10
    3780:	91 8b       	std	Z+17, r25	; 0x11
    3782:	0b c0       	rjmp	.+22     	; 0x379a <f_write+0x140>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    3784:	ab 81       	ldd	r26, Y+3	; 0x03
    3786:	bc 81       	ldd	r27, Y+4	; 0x04
    3788:	52 96       	adiw	r26, 0x12	; 18
    378a:	4d 91       	ld	r20, X+
    378c:	5d 91       	ld	r21, X+
    378e:	6d 91       	ld	r22, X+
    3790:	7c 91       	ld	r23, X
    3792:	55 97       	sbiw	r26, 0x15	; 21
    3794:	cf 01       	movw	r24, r30
    3796:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    379a:	61 15       	cp	r22, r1
    379c:	71 05       	cpc	r23, r1
    379e:	81 05       	cpc	r24, r1
    37a0:	91 05       	cpc	r25, r1
    37a2:	09 f4       	brne	.+2      	; 0x37a6 <f_write+0x14c>
    37a4:	61 c1       	rjmp	.+706    	; 0x3a68 <f_write+0x40e>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    37a6:	61 30       	cpi	r22, 0x01	; 1
    37a8:	71 05       	cpc	r23, r1
    37aa:	81 05       	cpc	r24, r1
    37ac:	91 05       	cpc	r25, r1
    37ae:	41 f4       	brne	.+16     	; 0x37c0 <f_write+0x166>
    37b0:	eb 81       	ldd	r30, Y+3	; 0x03
    37b2:	fc 81       	ldd	r31, Y+4	; 0x04
    37b4:	84 81       	ldd	r24, Z+4	; 0x04
    37b6:	80 68       	ori	r24, 0x80	; 128
    37b8:	84 83       	std	Z+4, r24	; 0x04
    37ba:	32 e0       	ldi	r19, 0x02	; 2
    37bc:	83 2e       	mov	r8, r19
    37be:	75 c1       	rjmp	.+746    	; 0x3aaa <f_write+0x450>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    37c0:	6f 3f       	cpi	r22, 0xFF	; 255
    37c2:	ff ef       	ldi	r31, 0xFF	; 255
    37c4:	7f 07       	cpc	r23, r31
    37c6:	ff ef       	ldi	r31, 0xFF	; 255
    37c8:	8f 07       	cpc	r24, r31
    37ca:	ff ef       	ldi	r31, 0xFF	; 255
    37cc:	9f 07       	cpc	r25, r31
    37ce:	09 f4       	brne	.+2      	; 0x37d2 <f_write+0x178>
    37d0:	d1 c0       	rjmp	.+418    	; 0x3974 <f_write+0x31a>
				fp->clust = clst;			/* Update current cluster */
    37d2:	eb 81       	ldd	r30, Y+3	; 0x03
    37d4:	fc 81       	ldd	r31, Y+4	; 0x04
    37d6:	62 8b       	std	Z+18, r22	; 0x12
    37d8:	73 8b       	std	Z+19, r23	; 0x13
    37da:	84 8b       	std	Z+20, r24	; 0x14
    37dc:	95 8b       	std	Z+21, r25	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    37de:	ab 81       	ldd	r26, Y+3	; 0x03
    37e0:	bc 81       	ldd	r27, Y+4	; 0x04
    37e2:	ed 91       	ld	r30, X+
    37e4:	fc 91       	ld	r31, X
    37e6:	11 97       	sbiw	r26, 0x01	; 1
    37e8:	22 a5       	ldd	r18, Z+42	; 0x2a
    37ea:	33 a5       	ldd	r19, Z+43	; 0x2b
    37ec:	44 a5       	ldd	r20, Z+44	; 0x2c
    37ee:	55 a5       	ldd	r21, Z+45	; 0x2d
    37f0:	56 96       	adiw	r26, 0x16	; 22
    37f2:	ed 90       	ld	r14, X+
    37f4:	fd 90       	ld	r15, X+
    37f6:	0d 91       	ld	r16, X+
    37f8:	1c 91       	ld	r17, X
    37fa:	59 97       	sbiw	r26, 0x19	; 25
    37fc:	2e 15       	cp	r18, r14
    37fe:	3f 05       	cpc	r19, r15
    3800:	40 07       	cpc	r20, r16
    3802:	51 07       	cpc	r21, r17
    3804:	51 f4       	brne	.+20     	; 0x381a <f_write+0x1c0>
    3806:	cf 01       	movw	r24, r30
    3808:	40 e0       	ldi	r20, 0x00	; 0
    380a:	50 e0       	ldi	r21, 0x00	; 0
    380c:	60 e0       	ldi	r22, 0x00	; 0
    380e:	70 e0       	ldi	r23, 0x00	; 0
    3810:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    3814:	88 23       	and	r24, r24
    3816:	09 f0       	breq	.+2      	; 0x381a <f_write+0x1c0>
    3818:	d8 c0       	rjmp	.+432    	; 0x39ca <f_write+0x370>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    381a:	ab 81       	ldd	r26, Y+3	; 0x03
    381c:	bc 81       	ldd	r27, Y+4	; 0x04
    381e:	0d 91       	ld	r16, X+
    3820:	1c 91       	ld	r17, X
    3822:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3824:	52 96       	adiw	r26, 0x12	; 18
    3826:	2d 91       	ld	r18, X+
    3828:	3d 91       	ld	r19, X+
    382a:	4d 91       	ld	r20, X+
    382c:	5c 91       	ld	r21, X
    382e:	55 97       	sbiw	r26, 0x15	; 21
    3830:	22 50       	subi	r18, 0x02	; 2
    3832:	30 40       	sbci	r19, 0x00	; 0
    3834:	40 40       	sbci	r20, 0x00	; 0
    3836:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    3838:	f8 01       	movw	r30, r16
    383a:	86 89       	ldd	r24, Z+22	; 0x16
    383c:	97 89       	ldd	r25, Z+23	; 0x17
    383e:	a0 8d       	ldd	r26, Z+24	; 0x18
    3840:	b1 8d       	ldd	r27, Z+25	; 0x19
    3842:	02 97       	sbiw	r24, 0x02	; 2
    3844:	a1 09       	sbc	r26, r1
    3846:	b1 09       	sbc	r27, r1
    3848:	28 17       	cp	r18, r24
    384a:	39 07       	cpc	r19, r25
    384c:	4a 07       	cpc	r20, r26
    384e:	5b 07       	cpc	r21, r27
    3850:	b8 f4       	brcc	.+46     	; 0x3880 <f_write+0x226>
	return clst * fs->csize + fs->database;
    3852:	52 80       	ldd	r5, Z+2	; 0x02
    3854:	65 2d       	mov	r22, r5
    3856:	70 e0       	ldi	r23, 0x00	; 0
    3858:	80 e0       	ldi	r24, 0x00	; 0
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <__mulsi3>
    3860:	9b 01       	movw	r18, r22
    3862:	ac 01       	movw	r20, r24
    3864:	f8 01       	movw	r30, r16
    3866:	86 a1       	ldd	r24, Z+38	; 0x26
    3868:	97 a1       	ldd	r25, Z+39	; 0x27
    386a:	a0 a5       	ldd	r26, Z+40	; 0x28
    386c:	b1 a5       	ldd	r27, Z+41	; 0x29
    386e:	28 0f       	add	r18, r24
    3870:	39 1f       	adc	r19, r25
    3872:	4a 1f       	adc	r20, r26
    3874:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3876:	21 15       	cp	r18, r1
    3878:	31 05       	cpc	r19, r1
    387a:	41 05       	cpc	r20, r1
    387c:	51 05       	cpc	r21, r1
    387e:	49 f4       	brne	.+18     	; 0x3892 <f_write+0x238>
    3880:	ab 81       	ldd	r26, Y+3	; 0x03
    3882:	bc 81       	ldd	r27, Y+4	; 0x04
    3884:	14 96       	adiw	r26, 0x04	; 4
    3886:	8c 91       	ld	r24, X
    3888:	14 97       	sbiw	r26, 0x04	; 4
    388a:	80 68       	ori	r24, 0x80	; 128
    388c:	14 96       	adiw	r26, 0x04	; 4
    388e:	8c 93       	st	X, r24
    3890:	94 cf       	rjmp	.-216    	; 0x37ba <f_write+0x160>
			sect += csect;
    3892:	69 01       	movw	r12, r18
    3894:	7a 01       	movw	r14, r20
    3896:	c9 0c       	add	r12, r9
    3898:	d1 1c       	adc	r13, r1
    389a:	e1 1c       	adc	r14, r1
    389c:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    389e:	53 01       	movw	r10, r6
    38a0:	ab 2c       	mov	r10, r11
    38a2:	bb 24       	eor	r11, r11
    38a4:	a6 94       	lsr	r10
			if (cc) {						/* Write maximum contiguous sectors directly */
    38a6:	a1 14       	cp	r10, r1
    38a8:	b1 04       	cpc	r11, r1
    38aa:	09 f4       	brne	.+2      	; 0x38ae <f_write+0x254>
    38ac:	4b c0       	rjmp	.+150    	; 0x3944 <f_write+0x2ea>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    38ae:	29 2d       	mov	r18, r9
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	c5 01       	movw	r24, r10
    38b4:	82 0f       	add	r24, r18
    38b6:	93 1f       	adc	r25, r19
    38b8:	65 2d       	mov	r22, r5
    38ba:	70 e0       	ldi	r23, 0x00	; 0
    38bc:	68 17       	cp	r22, r24
    38be:	79 07       	cpc	r23, r25
    38c0:	18 f4       	brcc	.+6      	; 0x38c8 <f_write+0x26e>
					cc = fp->fs->csize - csect;
    38c2:	5b 01       	movw	r10, r22
    38c4:	a2 1a       	sub	r10, r18
    38c6:	b3 0a       	sbc	r11, r19
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    38c8:	f8 01       	movw	r30, r16
    38ca:	81 81       	ldd	r24, Z+1	; 0x01
    38cc:	b1 01       	movw	r22, r2
    38ce:	a7 01       	movw	r20, r14
    38d0:	96 01       	movw	r18, r12
    38d2:	0a 2d       	mov	r16, r10
    38d4:	0e 94 27 03 	call	0x64e	; 0x64e <disk_write>
    38d8:	88 23       	and	r24, r24
    38da:	09 f0       	breq	.+2      	; 0x38de <f_write+0x284>
    38dc:	4b c0       	rjmp	.+150    	; 0x3974 <f_write+0x31a>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    38de:	ab 81       	ldd	r26, Y+3	; 0x03
    38e0:	bc 81       	ldd	r27, Y+4	; 0x04
    38e2:	ed 91       	ld	r30, X+
    38e4:	fc 91       	ld	r31, X
    38e6:	22 a5       	ldd	r18, Z+42	; 0x2a
    38e8:	33 a5       	ldd	r19, Z+43	; 0x2b
    38ea:	44 a5       	ldd	r20, Z+44	; 0x2c
    38ec:	55 a5       	ldd	r21, Z+45	; 0x2d
    38ee:	2c 19       	sub	r18, r12
    38f0:	3d 09       	sbc	r19, r13
    38f2:	4e 09       	sbc	r20, r14
    38f4:	5f 09       	sbc	r21, r15
    38f6:	c5 01       	movw	r24, r10
    38f8:	a0 e0       	ldi	r26, 0x00	; 0
    38fa:	b0 e0       	ldi	r27, 0x00	; 0
    38fc:	28 17       	cp	r18, r24
    38fe:	39 07       	cpc	r19, r25
    3900:	4a 07       	cpc	r20, r26
    3902:	5b 07       	cpc	r21, r27
    3904:	d0 f4       	brcc	.+52     	; 0x393a <f_write+0x2e0>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    3906:	df 01       	movw	r26, r30
    3908:	9e 96       	adiw	r26, 0x2e	; 46
	const BYTE *s = (const BYTE*)src;
    390a:	99 e0       	ldi	r25, 0x09	; 9
    390c:	22 0f       	add	r18, r18
    390e:	33 1f       	adc	r19, r19
    3910:	44 1f       	adc	r20, r20
    3912:	55 1f       	adc	r21, r21
    3914:	9a 95       	dec	r25
    3916:	d1 f7       	brne	.-12     	; 0x390c <f_write+0x2b2>
    3918:	f1 01       	movw	r30, r2
    391a:	e2 0f       	add	r30, r18
    391c:	f3 1f       	adc	r31, r19
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    391e:	9f 01       	movw	r18, r30
    3920:	20 50       	subi	r18, 0x00	; 0
    3922:	3e 4f       	sbci	r19, 0xFE	; 254
    3924:	02 c0       	rjmp	.+4      	; 0x392a <f_write+0x2d0>
		*d++ = *s++;
    3926:	81 91       	ld	r24, Z+
    3928:	8d 93       	st	X+, r24
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    392a:	e2 17       	cp	r30, r18
    392c:	f3 07       	cpc	r31, r19
    392e:	d9 f7       	brne	.-10     	; 0x3926 <f_write+0x2cc>
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
    3930:	ab 81       	ldd	r26, Y+3	; 0x03
    3932:	bc 81       	ldd	r27, Y+4	; 0x04
    3934:	ed 91       	ld	r30, X+
    3936:	fc 91       	ld	r31, X
    3938:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    393a:	b5 01       	movw	r22, r10
    393c:	76 2f       	mov	r23, r22
    393e:	66 27       	eor	r22, r22
    3940:	77 0f       	add	r23, r23
    3942:	71 c0       	rjmp	.+226    	; 0x3a26 <f_write+0x3cc>
				continue;
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    3944:	eb 81       	ldd	r30, Y+3	; 0x03
    3946:	fc 81       	ldd	r31, Y+4	; 0x04
    3948:	26 81       	ldd	r18, Z+6	; 0x06
    394a:	37 81       	ldd	r19, Z+7	; 0x07
    394c:	40 85       	ldd	r20, Z+8	; 0x08
    394e:	51 85       	ldd	r21, Z+9	; 0x09
    3950:	82 85       	ldd	r24, Z+10	; 0x0a
    3952:	93 85       	ldd	r25, Z+11	; 0x0b
    3954:	a4 85       	ldd	r26, Z+12	; 0x0c
    3956:	b5 85       	ldd	r27, Z+13	; 0x0d
    3958:	28 17       	cp	r18, r24
    395a:	39 07       	cpc	r19, r25
    395c:	4a 07       	cpc	r20, r26
    395e:	5b 07       	cpc	r21, r27
    3960:	d0 f0       	brcs	.+52     	; 0x3996 <f_write+0x33c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    3962:	c8 01       	movw	r24, r16
    3964:	40 e0       	ldi	r20, 0x00	; 0
    3966:	50 e0       	ldi	r21, 0x00	; 0
    3968:	60 e0       	ldi	r22, 0x00	; 0
    396a:	70 e0       	ldi	r23, 0x00	; 0
    396c:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    3970:	88 23       	and	r24, r24
    3972:	49 f0       	breq	.+18     	; 0x3986 <f_write+0x32c>
    3974:	ab 81       	ldd	r26, Y+3	; 0x03
    3976:	bc 81       	ldd	r27, Y+4	; 0x04
    3978:	14 96       	adiw	r26, 0x04	; 4
    397a:	8c 91       	ld	r24, X
    397c:	14 97       	sbiw	r26, 0x04	; 4
    397e:	80 68       	ori	r24, 0x80	; 128
    3980:	14 96       	adiw	r26, 0x04	; 4
    3982:	8c 93       	st	X, r24
    3984:	27 c0       	rjmp	.+78     	; 0x39d4 <f_write+0x37a>
				fp->fs->winsect = sect;
    3986:	ab 81       	ldd	r26, Y+3	; 0x03
    3988:	bc 81       	ldd	r27, Y+4	; 0x04
    398a:	ed 91       	ld	r30, X+
    398c:	fc 91       	ld	r31, X
    398e:	c2 a6       	std	Z+42, r12	; 0x2a
    3990:	d3 a6       	std	Z+43, r13	; 0x2b
    3992:	e4 a6       	std	Z+44, r14	; 0x2c
    3994:	f5 a6       	std	Z+45, r15	; 0x2d
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    3996:	eb 81       	ldd	r30, Y+3	; 0x03
    3998:	fc 81       	ldd	r31, Y+4	; 0x04
    399a:	c6 8a       	std	Z+22, r12	; 0x16
    399c:	d7 8a       	std	Z+23, r13	; 0x17
    399e:	e0 8e       	std	Z+24, r14	; 0x18
    39a0:	f1 8e       	std	Z+25, r15	; 0x19
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    39a2:	ab 81       	ldd	r26, Y+3	; 0x03
    39a4:	bc 81       	ldd	r27, Y+4	; 0x04
    39a6:	16 96       	adiw	r26, 0x06	; 6
    39a8:	cd 90       	ld	r12, X+
    39aa:	dd 90       	ld	r13, X+
    39ac:	ed 90       	ld	r14, X+
    39ae:	fc 90       	ld	r15, X
    39b0:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    39b2:	56 96       	adiw	r26, 0x16	; 22
    39b4:	4d 91       	ld	r20, X+
    39b6:	5d 91       	ld	r21, X+
    39b8:	6d 91       	ld	r22, X+
    39ba:	7c 91       	ld	r23, X
    39bc:	59 97       	sbiw	r26, 0x19	; 25
    39be:	8d 91       	ld	r24, X+
    39c0:	9c 91       	ld	r25, X
    39c2:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    39c6:	88 23       	and	r24, r24
    39c8:	41 f0       	breq	.+16     	; 0x39da <f_write+0x380>
			ABORT(fp->fs, FR_DISK_ERR);
    39ca:	eb 81       	ldd	r30, Y+3	; 0x03
    39cc:	fc 81       	ldd	r31, Y+4	; 0x04
    39ce:	84 81       	ldd	r24, Z+4	; 0x04
    39d0:	80 68       	ori	r24, 0x80	; 128
    39d2:	84 83       	std	Z+4, r24	; 0x04
    39d4:	88 24       	eor	r8, r8
    39d6:	83 94       	inc	r8
    39d8:	68 c0       	rjmp	.+208    	; 0x3aaa <f_write+0x450>
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    39da:	c6 01       	movw	r24, r12
    39dc:	91 70       	andi	r25, 0x01	; 1
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	32 e0       	ldi	r19, 0x02	; 2
    39e2:	28 1b       	sub	r18, r24
    39e4:	39 0b       	sbc	r19, r25
    39e6:	b3 01       	movw	r22, r6
    39e8:	26 15       	cp	r18, r6
    39ea:	37 05       	cpc	r19, r7
    39ec:	08 f4       	brcc	.+2      	; 0x39f0 <f_write+0x396>
    39ee:	b9 01       	movw	r22, r18
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    39f0:	ab 81       	ldd	r26, Y+3	; 0x03
    39f2:	bc 81       	ldd	r27, Y+4	; 0x04
    39f4:	16 96       	adiw	r26, 0x06	; 6
    39f6:	8d 91       	ld	r24, X+
    39f8:	9c 91       	ld	r25, X
    39fa:	17 97       	sbiw	r26, 0x07	; 7
    39fc:	91 70       	andi	r25, 0x01	; 1
    39fe:	8e 96       	adiw	r24, 0x2e	; 46
    3a00:	ed 91       	ld	r30, X+
    3a02:	fc 91       	ld	r31, X
    3a04:	e8 0f       	add	r30, r24
    3a06:	f9 1f       	adc	r31, r25
    3a08:	d1 01       	movw	r26, r2
    3a0a:	9b 01       	movw	r18, r22
    3a0c:	04 c0       	rjmp	.+8      	; 0x3a16 <f_write+0x3bc>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
    3a0e:	8d 91       	ld	r24, X+
    3a10:	81 93       	st	Z+, r24
    3a12:	21 50       	subi	r18, 0x01	; 1
    3a14:	30 40       	sbci	r19, 0x00	; 0
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    3a16:	21 15       	cp	r18, r1
    3a18:	31 05       	cpc	r19, r1
    3a1a:	c9 f7       	brne	.-14     	; 0x3a0e <f_write+0x3b4>
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    3a1c:	ab 81       	ldd	r26, Y+3	; 0x03
    3a1e:	bc 81       	ldd	r27, Y+4	; 0x04
    3a20:	ed 91       	ld	r30, X+
    3a22:	fc 91       	ld	r31, X
    3a24:	44 82       	std	Z+4, r4	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    3a26:	26 0e       	add	r2, r22
    3a28:	37 1e       	adc	r3, r23
    3a2a:	cb 01       	movw	r24, r22
    3a2c:	a0 e0       	ldi	r26, 0x00	; 0
    3a2e:	b0 e0       	ldi	r27, 0x00	; 0
    3a30:	eb 81       	ldd	r30, Y+3	; 0x03
    3a32:	fc 81       	ldd	r31, Y+4	; 0x04
    3a34:	26 81       	ldd	r18, Z+6	; 0x06
    3a36:	37 81       	ldd	r19, Z+7	; 0x07
    3a38:	40 85       	ldd	r20, Z+8	; 0x08
    3a3a:	51 85       	ldd	r21, Z+9	; 0x09
    3a3c:	28 0f       	add	r18, r24
    3a3e:	39 1f       	adc	r19, r25
    3a40:	4a 1f       	adc	r20, r26
    3a42:	5b 1f       	adc	r21, r27
    3a44:	26 83       	std	Z+6, r18	; 0x06
    3a46:	37 83       	std	Z+7, r19	; 0x07
    3a48:	40 87       	std	Z+8, r20	; 0x08
    3a4a:	51 87       	std	Z+9, r21	; 0x09
    3a4c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a4e:	fa 81       	ldd	r31, Y+2	; 0x02
    3a50:	80 81       	ld	r24, Z
    3a52:	91 81       	ldd	r25, Z+1	; 0x01
    3a54:	86 0f       	add	r24, r22
    3a56:	97 1f       	adc	r25, r23
    3a58:	91 83       	std	Z+1, r25	; 0x01
    3a5a:	80 83       	st	Z, r24
    3a5c:	66 1a       	sub	r6, r22
    3a5e:	77 0a       	sbc	r7, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    3a60:	61 14       	cp	r6, r1
    3a62:	71 04       	cpc	r7, r1
    3a64:	09 f0       	breq	.+2      	; 0x3a68 <f_write+0x40e>
    3a66:	4a ce       	rjmp	.-876    	; 0x36fc <f_write+0xa2>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    3a68:	ab 81       	ldd	r26, Y+3	; 0x03
    3a6a:	bc 81       	ldd	r27, Y+4	; 0x04
    3a6c:	16 96       	adiw	r26, 0x06	; 6
    3a6e:	2d 91       	ld	r18, X+
    3a70:	3d 91       	ld	r19, X+
    3a72:	4d 91       	ld	r20, X+
    3a74:	5c 91       	ld	r21, X
    3a76:	19 97       	sbiw	r26, 0x09	; 9
    3a78:	1a 96       	adiw	r26, 0x0a	; 10
    3a7a:	8d 91       	ld	r24, X+
    3a7c:	9d 91       	ld	r25, X+
    3a7e:	0d 90       	ld	r0, X+
    3a80:	bc 91       	ld	r27, X
    3a82:	a0 2d       	mov	r26, r0
    3a84:	82 17       	cp	r24, r18
    3a86:	93 07       	cpc	r25, r19
    3a88:	a4 07       	cpc	r26, r20
    3a8a:	b5 07       	cpc	r27, r21
    3a8c:	30 f4       	brcc	.+12     	; 0x3a9a <f_write+0x440>
    3a8e:	eb 81       	ldd	r30, Y+3	; 0x03
    3a90:	fc 81       	ldd	r31, Y+4	; 0x04
    3a92:	22 87       	std	Z+10, r18	; 0x0a
    3a94:	33 87       	std	Z+11, r19	; 0x0b
    3a96:	44 87       	std	Z+12, r20	; 0x0c
    3a98:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    3a9a:	ab 81       	ldd	r26, Y+3	; 0x03
    3a9c:	bc 81       	ldd	r27, Y+4	; 0x04
    3a9e:	14 96       	adiw	r26, 0x04	; 4
    3aa0:	8c 91       	ld	r24, X
    3aa2:	14 97       	sbiw	r26, 0x04	; 4
    3aa4:	80 62       	ori	r24, 0x20	; 32
    3aa6:	14 96       	adiw	r26, 0x04	; 4
    3aa8:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    3aaa:	88 2d       	mov	r24, r8
    3aac:	0f 90       	pop	r0
    3aae:	0f 90       	pop	r0
    3ab0:	0f 90       	pop	r0
    3ab2:	0f 90       	pop	r0
    3ab4:	cf 91       	pop	r28
    3ab6:	df 91       	pop	r29
    3ab8:	1f 91       	pop	r17
    3aba:	0f 91       	pop	r16
    3abc:	ff 90       	pop	r15
    3abe:	ef 90       	pop	r14
    3ac0:	df 90       	pop	r13
    3ac2:	cf 90       	pop	r12
    3ac4:	bf 90       	pop	r11
    3ac6:	af 90       	pop	r10
    3ac8:	9f 90       	pop	r9
    3aca:	8f 90       	pop	r8
    3acc:	7f 90       	pop	r7
    3ace:	6f 90       	pop	r6
    3ad0:	5f 90       	pop	r5
    3ad2:	4f 90       	pop	r4
    3ad4:	3f 90       	pop	r3
    3ad6:	2f 90       	pop	r2
    3ad8:	08 95       	ret

00003ada <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    3ada:	0f 93       	push	r16
    3adc:	cf 93       	push	r28
    3ade:	df 93       	push	r29
    3ae0:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    3ae2:	40 e0       	ldi	r20, 0x00	; 0
    3ae4:	50 e0       	ldi	r21, 0x00	; 0
    3ae6:	60 e0       	ldi	r22, 0x00	; 0
    3ae8:	70 e0       	ldi	r23, 0x00	; 0
    3aea:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
	if (res == FR_OK) {
    3aee:	88 23       	and	r24, r24
    3af0:	09 f0       	breq	.+2      	; 0x3af4 <sync+0x1a>
    3af2:	7e c0       	rjmp	.+252    	; 0x3bf0 <sync+0x116>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    3af4:	88 81       	ld	r24, Y
    3af6:	83 30       	cpi	r24, 0x03	; 3
    3af8:	09 f0       	breq	.+2      	; 0x3afc <sync+0x22>
    3afa:	72 c0       	rjmp	.+228    	; 0x3be0 <sync+0x106>
    3afc:	8d 81       	ldd	r24, Y+5	; 0x05
    3afe:	88 23       	and	r24, r24
    3b00:	09 f4       	brne	.+2      	; 0x3b04 <sync+0x2a>
    3b02:	6e c0       	rjmp	.+220    	; 0x3be0 <sync+0x106>
			fs->winsect = 0;
    3b04:	1a a6       	std	Y+42, r1	; 0x2a
    3b06:	1b a6       	std	Y+43, r1	; 0x2b
    3b08:	1c a6       	std	Y+44, r1	; 0x2c
    3b0a:	1d a6       	std	Y+45, r1	; 0x2d
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    3b0c:	be 01       	movw	r22, r28
    3b0e:	62 5d       	subi	r22, 0xD2	; 210
    3b10:	7f 4f       	sbci	r23, 0xFF	; 255
    3b12:	fb 01       	movw	r30, r22
    3b14:	80 e0       	ldi	r24, 0x00	; 0
    3b16:	92 e0       	ldi	r25, 0x02	; 2
    3b18:	01 c0       	rjmp	.+2      	; 0x3b1c <sync+0x42>

	while (cnt--)
		*d++ = (BYTE)val;
    3b1a:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    3b1c:	01 97       	sbiw	r24, 0x01	; 1
    3b1e:	2f ef       	ldi	r18, 0xFF	; 255
    3b20:	8f 3f       	cpi	r24, 0xFF	; 255
    3b22:	92 07       	cpc	r25, r18
    3b24:	d1 f7       	brne	.-12     	; 0x3b1a <sync+0x40>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    3b26:	c4 5d       	subi	r28, 0xD4	; 212
    3b28:	dd 4f       	sbci	r29, 0xFD	; 253
    3b2a:	85 e5       	ldi	r24, 0x55	; 85
    3b2c:	89 93       	st	Y+, r24
    3b2e:	8a ea       	ldi	r24, 0xAA	; 170
    3b30:	88 83       	st	Y, r24
    3b32:	cd 52       	subi	r28, 0x2D	; 45
    3b34:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    3b36:	82 e5       	ldi	r24, 0x52	; 82
    3b38:	8e a7       	std	Y+46, r24	; 0x2e
    3b3a:	8f a7       	std	Y+47, r24	; 0x2f
    3b3c:	21 e6       	ldi	r18, 0x61	; 97
    3b3e:	28 ab       	std	Y+48, r18	; 0x30
    3b40:	91 e4       	ldi	r25, 0x41	; 65
    3b42:	99 ab       	std	Y+49, r25	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    3b44:	ce 5e       	subi	r28, 0xEE	; 238
    3b46:	dd 4f       	sbci	r29, 0xFD	; 253
    3b48:	82 e7       	ldi	r24, 0x72	; 114
    3b4a:	89 93       	st	Y+, r24
    3b4c:	89 93       	st	Y+, r24
    3b4e:	99 93       	st	Y+, r25
    3b50:	28 83       	st	Y, r18
    3b52:	c5 51       	subi	r28, 0x15	; 21
    3b54:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    3b56:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b58:	ca 5e       	subi	r28, 0xEA	; 234
    3b5a:	dd 4f       	sbci	r29, 0xFD	; 253
    3b5c:	88 83       	st	Y, r24
    3b5e:	c6 51       	subi	r28, 0x16	; 22
    3b60:	d2 40       	sbci	r29, 0x02	; 2
    3b62:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b64:	c9 5e       	subi	r28, 0xE9	; 233
    3b66:	dd 4f       	sbci	r29, 0xFD	; 253
    3b68:	88 83       	st	Y, r24
    3b6a:	c7 51       	subi	r28, 0x17	; 23
    3b6c:	d2 40       	sbci	r29, 0x02	; 2
    3b6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b70:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b72:	a8 89       	ldd	r26, Y+16	; 0x10
    3b74:	b9 89       	ldd	r27, Y+17	; 0x11
    3b76:	9d 01       	movw	r18, r26
    3b78:	44 27       	eor	r20, r20
    3b7a:	55 27       	eor	r21, r21
    3b7c:	c8 5e       	subi	r28, 0xE8	; 232
    3b7e:	dd 4f       	sbci	r29, 0xFD	; 253
    3b80:	28 83       	st	Y, r18
    3b82:	21 96       	adiw	r28, 0x01	; 1
    3b84:	8b 2f       	mov	r24, r27
    3b86:	99 27       	eor	r25, r25
    3b88:	aa 27       	eor	r26, r26
    3b8a:	bb 27       	eor	r27, r27
    3b8c:	88 83       	st	Y, r24
    3b8e:	c9 51       	subi	r28, 0x19	; 25
    3b90:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    3b92:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b94:	c6 5e       	subi	r28, 0xE6	; 230
    3b96:	dd 4f       	sbci	r29, 0xFD	; 253
    3b98:	88 83       	st	Y, r24
    3b9a:	ca 51       	subi	r28, 0x1A	; 26
    3b9c:	d2 40       	sbci	r29, 0x02	; 2
    3b9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ba0:	c5 5e       	subi	r28, 0xE5	; 229
    3ba2:	dd 4f       	sbci	r29, 0xFD	; 253
    3ba4:	88 83       	st	Y, r24
    3ba6:	cb 51       	subi	r28, 0x1B	; 27
    3ba8:	d2 40       	sbci	r29, 0x02	; 2
    3baa:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bac:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bae:	ac 85       	ldd	r26, Y+12	; 0x0c
    3bb0:	bd 85       	ldd	r27, Y+13	; 0x0d
    3bb2:	9d 01       	movw	r18, r26
    3bb4:	44 27       	eor	r20, r20
    3bb6:	55 27       	eor	r21, r21
    3bb8:	c4 5e       	subi	r28, 0xE4	; 228
    3bba:	dd 4f       	sbci	r29, 0xFD	; 253
    3bbc:	28 83       	st	Y, r18
    3bbe:	21 96       	adiw	r28, 0x01	; 1
    3bc0:	8b 2f       	mov	r24, r27
    3bc2:	99 27       	eor	r25, r25
    3bc4:	aa 27       	eor	r26, r26
    3bc6:	bb 27       	eor	r27, r27
    3bc8:	88 83       	st	Y, r24
    3bca:	cd 51       	subi	r28, 0x1D	; 29
    3bcc:	d2 40       	sbci	r29, 0x02	; 2
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    3bce:	2a 89       	ldd	r18, Y+18	; 0x12
    3bd0:	3b 89       	ldd	r19, Y+19	; 0x13
    3bd2:	4c 89       	ldd	r20, Y+20	; 0x14
    3bd4:	5d 89       	ldd	r21, Y+21	; 0x15
    3bd6:	89 81       	ldd	r24, Y+1	; 0x01
    3bd8:	01 e0       	ldi	r16, 0x01	; 1
    3bda:	0e 94 27 03 	call	0x64e	; 0x64e <disk_write>
			fs->fsi_flag = 0;
    3bde:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
    3be0:	89 81       	ldd	r24, Y+1	; 0x01
    3be2:	60 e0       	ldi	r22, 0x00	; 0
    3be4:	40 e0       	ldi	r20, 0x00	; 0
    3be6:	50 e0       	ldi	r21, 0x00	; 0
    3be8:	0e 94 97 03 	call	0x72e	; 0x72e <disk_ioctl>
    3bec:	81 11       	cpse	r24, r1
    3bee:	81 e0       	ldi	r24, 0x01	; 1
			res = FR_DISK_ERR;
	}

	return res;
}
    3bf0:	df 91       	pop	r29
    3bf2:	cf 91       	pop	r28
    3bf4:	0f 91       	pop	r16
    3bf6:	08 95       	ret

00003bf8 <f_rename>:

FRESULT f_rename (
	const TCHAR *path_old,	/* Pointer to the old name */
	const TCHAR *path_new	/* Pointer to the new name */
)
{
    3bf8:	af 92       	push	r10
    3bfa:	bf 92       	push	r11
    3bfc:	cf 92       	push	r12
    3bfe:	df 92       	push	r13
    3c00:	ef 92       	push	r14
    3c02:	ff 92       	push	r15
    3c04:	0f 93       	push	r16
    3c06:	1f 93       	push	r17
    3c08:	df 93       	push	r29
    3c0a:	cf 93       	push	r28
    3c0c:	cd b7       	in	r28, 0x3d	; 61
    3c0e:	de b7       	in	r29, 0x3e	; 62
    3c10:	cf 54       	subi	r28, 0x4F	; 79
    3c12:	d0 40       	sbci	r29, 0x00	; 0
    3c14:	0f b6       	in	r0, 0x3f	; 63
    3c16:	f8 94       	cli
    3c18:	de bf       	out	0x3e, r29	; 62
    3c1a:	0f be       	out	0x3f, r0	; 63
    3c1c:	cd bf       	out	0x3d, r28	; 61
    3c1e:	8e 01       	movw	r16, r28
    3c20:	02 5b       	subi	r16, 0xB2	; 178
    3c22:	1f 4f       	sbci	r17, 0xFF	; 255
    3c24:	d8 01       	movw	r26, r16
    3c26:	8d 93       	st	X+, r24
    3c28:	9c 93       	st	X, r25
    3c2a:	6b 01       	movw	r12, r22
	BYTE buf[21], *dir;
	DWORD dw;
	DEF_NAMEBUF;


	res = chk_mounted(&path_old, &djo.fs, 1);
    3c2c:	a2 e2       	ldi	r26, 0x22	; 34
    3c2e:	ea 2e       	mov	r14, r26
    3c30:	f1 2c       	mov	r15, r1
    3c32:	ec 0e       	add	r14, r28
    3c34:	fd 1e       	adc	r15, r29
    3c36:	c8 01       	movw	r24, r16
    3c38:	b7 01       	movw	r22, r14
    3c3a:	41 e0       	ldi	r20, 0x01	; 1
    3c3c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <chk_mounted>
	if (res == FR_OK) {
    3c40:	88 23       	and	r24, r24
    3c42:	09 f0       	breq	.+2      	; 0x3c46 <f_rename+0x4e>
    3c44:	09 c1       	rjmp	.+530    	; 0x3e58 <f_rename+0x260>
		djn.fs = djo.fs;
    3c46:	8a a1       	ldd	r24, Y+34	; 0x22
    3c48:	9b a1       	ldd	r25, Y+35	; 0x23
    3c4a:	99 af       	std	Y+57, r25	; 0x39
    3c4c:	88 af       	std	Y+56, r24	; 0x38
		INIT_BUF(djo);
    3c4e:	ce 01       	movw	r24, r28
    3c50:	01 96       	adiw	r24, 0x01	; 1
    3c52:	9f ab       	std	Y+55, r25	; 0x37
    3c54:	8e ab       	std	Y+54, r24	; 0x36
		res = follow_path(&djo, path_old);		/* Check old object */
    3c56:	f8 01       	movw	r30, r16
    3c58:	60 81       	ld	r22, Z
    3c5a:	71 81       	ldd	r23, Z+1	; 0x01
    3c5c:	c7 01       	movw	r24, r14
    3c5e:	0e 94 ef 13 	call	0x27de	; 0x27de <follow_path>
		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
    3c62:	88 23       	and	r24, r24
    3c64:	09 f0       	breq	.+2      	; 0x3c68 <f_rename+0x70>
    3c66:	f8 c0       	rjmp	.+496    	; 0x3e58 <f_rename+0x260>
			if (!djo.dir) {						/* Is root dir? */
    3c68:	8c a9       	ldd	r24, Y+52	; 0x34
    3c6a:	9d a9       	ldd	r25, Y+53	; 0x35
    3c6c:	00 97       	sbiw	r24, 0x00	; 0
    3c6e:	11 f4       	brne	.+4      	; 0x3c74 <f_rename+0x7c>
    3c70:	84 e0       	ldi	r24, 0x04	; 4
    3c72:	f2 c0       	rjmp	.+484    	; 0x3e58 <f_rename+0x260>
    3c74:	dc 01       	movw	r26, r24
    3c76:	fe 01       	movw	r30, r28
    3c78:	3d 96       	adiw	r30, 0x0d	; 13
    3c7a:	04 c0       	rjmp	.+8      	; 0x3c84 <f_rename+0x8c>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
    3c7c:	1a 96       	adiw	r26, 0x0a	; 10
    3c7e:	8c 91       	ld	r24, X
    3c80:	1a 97       	sbiw	r26, 0x0a	; 10
    3c82:	81 93       	st	Z+, r24
    3c84:	11 96       	adiw	r26, 0x01	; 1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    3c86:	ee 15       	cp	r30, r14
    3c88:	ff 05       	cpc	r31, r15
    3c8a:	c1 f7       	brne	.-16     	; 0x3c7c <f_rename+0x84>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    3c8c:	de 01       	movw	r26, r28
    3c8e:	d8 96       	adiw	r26, 0x38	; 56
	const BYTE *s = (const BYTE*)src;
    3c90:	f7 01       	movw	r30, r14
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    3c92:	9d 01       	movw	r18, r26
    3c94:	02 c0       	rjmp	.+4      	; 0x3c9a <f_rename+0xa2>
		*d++ = *s++;
    3c96:	81 91       	ld	r24, Z+
    3c98:	8d 93       	st	X+, r24
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    3c9a:	e2 17       	cp	r30, r18
    3c9c:	f3 07       	cpc	r31, r19
    3c9e:	d9 f7       	brne	.-10     	; 0x3c96 <f_rename+0x9e>
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
				res = follow_path(&djn, path_new);
    3ca0:	8e 01       	movw	r16, r28
    3ca2:	08 5c       	subi	r16, 0xC8	; 200
    3ca4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ca6:	c8 01       	movw	r24, r16
    3ca8:	b6 01       	movw	r22, r12
    3caa:	0e 94 ef 13 	call	0x27de	; 0x27de <follow_path>
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    3cae:	88 23       	and	r24, r24
    3cb0:	11 f4       	brne	.+4      	; 0x3cb6 <f_rename+0xbe>
    3cb2:	88 e0       	ldi	r24, 0x08	; 8
    3cb4:	d1 c0       	rjmp	.+418    	; 0x3e58 <f_rename+0x260>
				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
    3cb6:	84 30       	cpi	r24, 0x04	; 4
    3cb8:	09 f0       	breq	.+2      	; 0x3cbc <f_rename+0xc4>
    3cba:	ce c0       	rjmp	.+412    	; 0x3e58 <f_rename+0x260>
/* Start critical section that any interruption or error can cause cross-link */
					res = dir_register(&djn);			/* Register the new entry */
    3cbc:	c8 01       	movw	r24, r16
    3cbe:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <dir_register>
					if (res == FR_OK) {
    3cc2:	88 23       	and	r24, r24
    3cc4:	09 f0       	breq	.+2      	; 0x3cc8 <f_rename+0xd0>
    3cc6:	c8 c0       	rjmp	.+400    	; 0x3e58 <f_rename+0x260>
						dir = djn.dir;					/* Copy object information except for name */
    3cc8:	fe 01       	movw	r30, r28
    3cca:	e6 5b       	subi	r30, 0xB6	; 182
    3ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cce:	60 81       	ld	r22, Z
    3cd0:	71 81       	ldd	r23, Z+1	; 0x01
    3cd2:	db 01       	movw	r26, r22
    3cd4:	fe 01       	movw	r30, r28
    3cd6:	3f 96       	adiw	r30, 0x0f	; 15
    3cd8:	04 c0       	rjmp	.+8      	; 0x3ce2 <f_rename+0xea>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
    3cda:	81 91       	ld	r24, Z+
    3cdc:	1c 96       	adiw	r26, 0x0c	; 12
    3cde:	8c 93       	st	X, r24
    3ce0:	1c 97       	sbiw	r26, 0x0c	; 12
    3ce2:	11 96       	adiw	r26, 0x01	; 1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    3ce4:	ee 15       	cp	r30, r14
    3ce6:	ff 05       	cpc	r31, r15
    3ce8:	c1 f7       	brne	.-16     	; 0x3cda <f_rename+0xe2>
/* Start critical section that any interruption or error can cause cross-link */
					res = dir_register(&djn);			/* Register the new entry */
					if (res == FR_OK) {
						dir = djn.dir;					/* Copy object information except for name */
						mem_cpy(dir+13, buf+2, 19);
						dir[DIR_Attr] = buf[0] | AM_ARC;
    3cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cec:	80 62       	ori	r24, 0x20	; 32
    3cee:	db 01       	movw	r26, r22
    3cf0:	1b 96       	adiw	r26, 0x0b	; 11
    3cf2:	8c 93       	st	X, r24
						djo.fs->wflag = 1;
    3cf4:	ea a1       	ldd	r30, Y+34	; 0x22
    3cf6:	fb a1       	ldd	r31, Y+35	; 0x23
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	84 83       	std	Z+4, r24	; 0x04
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
    3cfc:	fe e3       	ldi	r31, 0x3E	; 62
    3cfe:	af 2e       	mov	r10, r31
    3d00:	b1 2c       	mov	r11, r1
    3d02:	ac 0e       	add	r10, r28
    3d04:	bd 1e       	adc	r11, r29
    3d06:	28 a5       	ldd	r18, Y+40	; 0x28
    3d08:	39 a5       	ldd	r19, Y+41	; 0x29
    3d0a:	4a a5       	ldd	r20, Y+42	; 0x2a
    3d0c:	5b a5       	ldd	r21, Y+43	; 0x2b
    3d0e:	f5 01       	movw	r30, r10
    3d10:	80 81       	ld	r24, Z
    3d12:	91 81       	ldd	r25, Z+1	; 0x01
    3d14:	a2 81       	ldd	r26, Z+2	; 0x02
    3d16:	b3 81       	ldd	r27, Z+3	; 0x03
    3d18:	28 17       	cp	r18, r24
    3d1a:	39 07       	cpc	r19, r25
    3d1c:	4a 07       	cpc	r20, r26
    3d1e:	5b 07       	cpc	r21, r27
    3d20:	09 f4       	brne	.+2      	; 0x3d24 <f_rename+0x12c>
    3d22:	8e c0       	rjmp	.+284    	; 0x3e40 <f_rename+0x248>
    3d24:	db 01       	movw	r26, r22
    3d26:	1b 96       	adiw	r26, 0x0b	; 11
    3d28:	8c 91       	ld	r24, X
    3d2a:	1b 97       	sbiw	r26, 0x0b	; 11
    3d2c:	84 ff       	sbrs	r24, 4
    3d2e:	88 c0       	rjmp	.+272    	; 0x3e40 <f_rename+0x248>
							dw = clust2sect(djn.fs, LD_CLUST(dir));
    3d30:	c8 ac       	ldd	r12, Y+56	; 0x38
    3d32:	d9 ac       	ldd	r13, Y+57	; 0x39
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3d34:	55 96       	adiw	r26, 0x15	; 21
    3d36:	9c 91       	ld	r25, X
    3d38:	55 97       	sbiw	r26, 0x15	; 21
    3d3a:	80 e0       	ldi	r24, 0x00	; 0
    3d3c:	54 96       	adiw	r26, 0x14	; 20
    3d3e:	2c 91       	ld	r18, X
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	82 2b       	or	r24, r18
    3d44:	93 2b       	or	r25, r19
    3d46:	a0 e0       	ldi	r26, 0x00	; 0
    3d48:	b0 e0       	ldi	r27, 0x00	; 0
    3d4a:	8c 01       	movw	r16, r24
    3d4c:	ff 24       	eor	r15, r15
    3d4e:	ee 24       	eor	r14, r14
    3d50:	fb 01       	movw	r30, r22
    3d52:	93 8d       	ldd	r25, Z+27	; 0x1b
    3d54:	80 e0       	ldi	r24, 0x00	; 0
    3d56:	22 8d       	ldd	r18, Z+26	; 0x1a
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	82 2b       	or	r24, r18
    3d5c:	93 2b       	or	r25, r19
    3d5e:	a0 e0       	ldi	r26, 0x00	; 0
    3d60:	b0 e0       	ldi	r27, 0x00	; 0
    3d62:	e8 2a       	or	r14, r24
    3d64:	f9 2a       	or	r15, r25
    3d66:	0a 2b       	or	r16, r26
    3d68:	1b 2b       	or	r17, r27
    3d6a:	8e ef       	ldi	r24, 0xFE	; 254
    3d6c:	9f ef       	ldi	r25, 0xFF	; 255
    3d6e:	af ef       	ldi	r26, 0xFF	; 255
    3d70:	bf ef       	ldi	r27, 0xFF	; 255
    3d72:	e8 0e       	add	r14, r24
    3d74:	f9 1e       	adc	r15, r25
    3d76:	0a 1f       	adc	r16, r26
    3d78:	1b 1f       	adc	r17, r27
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    3d7a:	f6 01       	movw	r30, r12
    3d7c:	86 89       	ldd	r24, Z+22	; 0x16
    3d7e:	97 89       	ldd	r25, Z+23	; 0x17
    3d80:	a0 8d       	ldd	r26, Z+24	; 0x18
    3d82:	b1 8d       	ldd	r27, Z+25	; 0x19
    3d84:	02 97       	sbiw	r24, 0x02	; 2
    3d86:	a1 09       	sbc	r26, r1
    3d88:	b1 09       	sbc	r27, r1
    3d8a:	e8 16       	cp	r14, r24
    3d8c:	f9 06       	cpc	r15, r25
    3d8e:	0a 07       	cpc	r16, r26
    3d90:	1b 07       	cpc	r17, r27
    3d92:	08 f0       	brcs	.+2      	; 0x3d96 <f_rename+0x19e>
    3d94:	60 c0       	rjmp	.+192    	; 0x3e56 <f_rename+0x25e>
	return clst * fs->csize + fs->database;
    3d96:	22 81       	ldd	r18, Z+2	; 0x02
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	40 e0       	ldi	r20, 0x00	; 0
    3d9c:	50 e0       	ldi	r21, 0x00	; 0
    3d9e:	c8 01       	movw	r24, r16
    3da0:	b7 01       	movw	r22, r14
    3da2:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <__mulsi3>
    3da6:	ab 01       	movw	r20, r22
    3da8:	bc 01       	movw	r22, r24
    3daa:	f6 01       	movw	r30, r12
    3dac:	86 a1       	ldd	r24, Z+38	; 0x26
    3dae:	97 a1       	ldd	r25, Z+39	; 0x27
    3db0:	a0 a5       	ldd	r26, Z+40	; 0x28
    3db2:	b1 a5       	ldd	r27, Z+41	; 0x29
    3db4:	48 0f       	add	r20, r24
    3db6:	59 1f       	adc	r21, r25
    3db8:	6a 1f       	adc	r22, r26
    3dba:	7b 1f       	adc	r23, r27
						mem_cpy(dir+13, buf+2, 19);
						dir[DIR_Attr] = buf[0] | AM_ARC;
						djo.fs->wflag = 1;
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
							dw = clust2sect(djn.fs, LD_CLUST(dir));
							if (!dw) {
    3dbc:	41 15       	cp	r20, r1
    3dbe:	51 05       	cpc	r21, r1
    3dc0:	61 05       	cpc	r22, r1
    3dc2:	71 05       	cpc	r23, r1
    3dc4:	09 f4       	brne	.+2      	; 0x3dc8 <f_rename+0x1d0>
    3dc6:	47 c0       	rjmp	.+142    	; 0x3e56 <f_rename+0x25e>
								res = FR_INT_ERR;
							} else {
								res = move_window(djn.fs, dw);
    3dc8:	c6 01       	movw	r24, r12
    3dca:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
								dir = djn.fs->win+SZ_DIR;	/* .. entry */
    3dce:	e8 ad       	ldd	r30, Y+56	; 0x38
    3dd0:	f9 ad       	ldd	r31, Y+57	; 0x39
								if (res == FR_OK && dir[1] == '.') {
    3dd2:	88 23       	and	r24, r24
    3dd4:	09 f0       	breq	.+2      	; 0x3dd8 <f_rename+0x1e0>
    3dd6:	40 c0       	rjmp	.+128    	; 0x3e58 <f_rename+0x260>
							dw = clust2sect(djn.fs, LD_CLUST(dir));
							if (!dw) {
								res = FR_INT_ERR;
							} else {
								res = move_window(djn.fs, dw);
								dir = djn.fs->win+SZ_DIR;	/* .. entry */
    3dd8:	bf 01       	movw	r22, r30
    3dda:	62 5b       	subi	r22, 0xB2	; 178
    3ddc:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
    3dde:	db 01       	movw	r26, r22
    3de0:	11 96       	adiw	r26, 0x01	; 1
    3de2:	8c 91       	ld	r24, X
    3de4:	8e 32       	cpi	r24, 0x2E	; 46
    3de6:	61 f5       	brne	.+88     	; 0x3e40 <f_rename+0x248>
									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
    3de8:	80 81       	ld	r24, Z
    3dea:	83 30       	cpi	r24, 0x03	; 3
    3dec:	99 f4       	brne	.+38     	; 0x3e14 <f_rename+0x21c>
    3dee:	d5 01       	movw	r26, r10
    3df0:	2d 91       	ld	r18, X+
    3df2:	3d 91       	ld	r19, X+
    3df4:	4d 91       	ld	r20, X+
    3df6:	5c 91       	ld	r21, X
    3df8:	82 a1       	ldd	r24, Z+34	; 0x22
    3dfa:	93 a1       	ldd	r25, Z+35	; 0x23
    3dfc:	a4 a1       	ldd	r26, Z+36	; 0x24
    3dfe:	b5 a1       	ldd	r27, Z+37	; 0x25
    3e00:	28 17       	cp	r18, r24
    3e02:	39 07       	cpc	r19, r25
    3e04:	4a 07       	cpc	r20, r26
    3e06:	5b 07       	cpc	r21, r27
    3e08:	29 f4       	brne	.+10     	; 0x3e14 <f_rename+0x21c>
    3e0a:	20 e0       	ldi	r18, 0x00	; 0
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	40 e0       	ldi	r20, 0x00	; 0
    3e10:	50 e0       	ldi	r21, 0x00	; 0
    3e12:	06 c0       	rjmp	.+12     	; 0x3e20 <f_rename+0x228>
    3e14:	fe 01       	movw	r30, r28
    3e16:	fe 96       	adiw	r30, 0x3e	; 62
    3e18:	20 81       	ld	r18, Z
    3e1a:	31 81       	ldd	r19, Z+1	; 0x01
    3e1c:	42 81       	ldd	r20, Z+2	; 0x02
    3e1e:	53 81       	ldd	r21, Z+3	; 0x03
									ST_CLUST(dir, dw);
    3e20:	fb 01       	movw	r30, r22
    3e22:	22 8f       	std	Z+26, r18	; 0x1a
    3e24:	83 2f       	mov	r24, r19
    3e26:	99 27       	eor	r25, r25
    3e28:	83 8f       	std	Z+27, r24	; 0x1b
    3e2a:	ca 01       	movw	r24, r20
    3e2c:	aa 27       	eor	r26, r26
    3e2e:	bb 27       	eor	r27, r27
    3e30:	84 8b       	std	Z+20, r24	; 0x14
    3e32:	89 2f       	mov	r24, r25
    3e34:	99 27       	eor	r25, r25
    3e36:	85 8b       	std	Z+21, r24	; 0x15
									djn.fs->wflag = 1;
    3e38:	e8 ad       	ldd	r30, Y+56	; 0x38
    3e3a:	f9 ad       	ldd	r31, Y+57	; 0x39
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	84 83       	std	Z+4, r24	; 0x04
								}
							}
						}
						if (res == FR_OK) {
							res = dir_remove(&djo);		/* Remove old entry */
    3e40:	ce 01       	movw	r24, r28
    3e42:	82 96       	adiw	r24, 0x22	; 34
    3e44:	0e 94 51 12 	call	0x24a2	; 0x24a2 <dir_remove>
							if (res == FR_OK)
    3e48:	88 23       	and	r24, r24
    3e4a:	31 f4       	brne	.+12     	; 0x3e58 <f_rename+0x260>
								res = sync(djo.fs);
    3e4c:	8a a1       	ldd	r24, Y+34	; 0x22
    3e4e:	9b a1       	ldd	r25, Y+35	; 0x23
    3e50:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <sync>
    3e54:	01 c0       	rjmp	.+2      	; 0x3e58 <f_rename+0x260>
    3e56:	82 e0       	ldi	r24, 0x02	; 2
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
    3e58:	c1 5b       	subi	r28, 0xB1	; 177
    3e5a:	df 4f       	sbci	r29, 0xFF	; 255
    3e5c:	0f b6       	in	r0, 0x3f	; 63
    3e5e:	f8 94       	cli
    3e60:	de bf       	out	0x3e, r29	; 62
    3e62:	0f be       	out	0x3f, r0	; 63
    3e64:	cd bf       	out	0x3d, r28	; 61
    3e66:	cf 91       	pop	r28
    3e68:	df 91       	pop	r29
    3e6a:	1f 91       	pop	r17
    3e6c:	0f 91       	pop	r16
    3e6e:	ff 90       	pop	r15
    3e70:	ef 90       	pop	r14
    3e72:	df 90       	pop	r13
    3e74:	cf 90       	pop	r12
    3e76:	bf 90       	pop	r11
    3e78:	af 90       	pop	r10
    3e7a:	08 95       	ret

00003e7c <f_utime>:

FRESULT f_utime (
	const TCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the time stamp to be set */
)
{
    3e7c:	ef 92       	push	r14
    3e7e:	ff 92       	push	r15
    3e80:	0f 93       	push	r16
    3e82:	1f 93       	push	r17
    3e84:	df 93       	push	r29
    3e86:	cf 93       	push	r28
    3e88:	cd b7       	in	r28, 0x3d	; 61
    3e8a:	de b7       	in	r29, 0x3e	; 62
    3e8c:	a4 97       	sbiw	r28, 0x24	; 36
    3e8e:	0f b6       	in	r0, 0x3f	; 63
    3e90:	f8 94       	cli
    3e92:	de bf       	out	0x3e, r29	; 62
    3e94:	0f be       	out	0x3f, r0	; 63
    3e96:	cd bf       	out	0x3d, r28	; 61
    3e98:	9c a3       	std	Y+36, r25	; 0x24
    3e9a:	8b a3       	std	Y+35, r24	; 0x23
    3e9c:	8b 01       	movw	r16, r22
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    3e9e:	bd e0       	ldi	r27, 0x0D	; 13
    3ea0:	eb 2e       	mov	r14, r27
    3ea2:	f1 2c       	mov	r15, r1
    3ea4:	ec 0e       	add	r14, r28
    3ea6:	fd 1e       	adc	r15, r29
    3ea8:	ce 01       	movw	r24, r28
    3eaa:	83 96       	adiw	r24, 0x23	; 35
    3eac:	b7 01       	movw	r22, r14
    3eae:	41 e0       	ldi	r20, 0x01	; 1
    3eb0:	0e 94 0f 07 	call	0xe1e	; 0xe1e <chk_mounted>
	if (res == FR_OK) {
    3eb4:	88 23       	and	r24, r24
    3eb6:	41 f5       	brne	.+80     	; 0x3f08 <f_utime+0x8c>
		INIT_BUF(dj);
    3eb8:	ce 01       	movw	r24, r28
    3eba:	01 96       	adiw	r24, 0x01	; 1
    3ebc:	9a a3       	std	Y+34, r25	; 0x22
    3ebe:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);	/* Follow the file path */
    3ec0:	6b a1       	ldd	r22, Y+35	; 0x23
    3ec2:	7c a1       	ldd	r23, Y+36	; 0x24
    3ec4:	c7 01       	movw	r24, r14
    3ec6:	0e 94 ef 13 	call	0x27de	; 0x27de <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    3eca:	88 23       	and	r24, r24
    3ecc:	e9 f4       	brne	.+58     	; 0x3f08 <f_utime+0x8c>
			dir = dj.dir;
    3ece:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3ed0:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {					/* Root directory */
    3ed2:	30 97       	sbiw	r30, 0x00	; 0
    3ed4:	11 f4       	brne	.+4      	; 0x3eda <f_utime+0x5e>
    3ed6:	86 e0       	ldi	r24, 0x06	; 6
    3ed8:	17 c0       	rjmp	.+46     	; 0x3f08 <f_utime+0x8c>
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    3eda:	d8 01       	movw	r26, r16
    3edc:	16 96       	adiw	r26, 0x06	; 6
    3ede:	8c 91       	ld	r24, X
    3ee0:	16 97       	sbiw	r26, 0x06	; 6
    3ee2:	86 8b       	std	Z+22, r24	; 0x16
    3ee4:	17 96       	adiw	r26, 0x07	; 7
    3ee6:	8c 91       	ld	r24, X
    3ee8:	17 97       	sbiw	r26, 0x07	; 7
    3eea:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    3eec:	14 96       	adiw	r26, 0x04	; 4
    3eee:	8c 91       	ld	r24, X
    3ef0:	14 97       	sbiw	r26, 0x04	; 4
    3ef2:	80 8f       	std	Z+24, r24	; 0x18
    3ef4:	15 96       	adiw	r26, 0x05	; 5
    3ef6:	8c 91       	ld	r24, X
    3ef8:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
    3efa:	ed 85       	ldd	r30, Y+13	; 0x0d
    3efc:	fe 85       	ldd	r31, Y+14	; 0x0e
    3efe:	81 e0       	ldi	r24, 0x01	; 1
    3f00:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    3f02:	cf 01       	movw	r24, r30
    3f04:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3f08:	a4 96       	adiw	r28, 0x24	; 36
    3f0a:	0f b6       	in	r0, 0x3f	; 63
    3f0c:	f8 94       	cli
    3f0e:	de bf       	out	0x3e, r29	; 62
    3f10:	0f be       	out	0x3f, r0	; 63
    3f12:	cd bf       	out	0x3d, r28	; 61
    3f14:	cf 91       	pop	r28
    3f16:	df 91       	pop	r29
    3f18:	1f 91       	pop	r17
    3f1a:	0f 91       	pop	r16
    3f1c:	ff 90       	pop	r15
    3f1e:	ef 90       	pop	r14
    3f20:	08 95       	ret

00003f22 <f_chmod>:
FRESULT f_chmod (
	const TCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    3f22:	ef 92       	push	r14
    3f24:	ff 92       	push	r15
    3f26:	0f 93       	push	r16
    3f28:	1f 93       	push	r17
    3f2a:	df 93       	push	r29
    3f2c:	cf 93       	push	r28
    3f2e:	cd b7       	in	r28, 0x3d	; 61
    3f30:	de b7       	in	r29, 0x3e	; 62
    3f32:	a4 97       	sbiw	r28, 0x24	; 36
    3f34:	0f b6       	in	r0, 0x3f	; 63
    3f36:	f8 94       	cli
    3f38:	de bf       	out	0x3e, r29	; 62
    3f3a:	0f be       	out	0x3f, r0	; 63
    3f3c:	cd bf       	out	0x3d, r28	; 61
    3f3e:	9c a3       	std	Y+36, r25	; 0x24
    3f40:	8b a3       	std	Y+35, r24	; 0x23
    3f42:	e6 2e       	mov	r14, r22
    3f44:	f4 2e       	mov	r15, r20
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    3f46:	8e 01       	movw	r16, r28
    3f48:	03 5f       	subi	r16, 0xF3	; 243
    3f4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f4c:	ce 01       	movw	r24, r28
    3f4e:	83 96       	adiw	r24, 0x23	; 35
    3f50:	b8 01       	movw	r22, r16
    3f52:	41 e0       	ldi	r20, 0x01	; 1
    3f54:	0e 94 0f 07 	call	0xe1e	; 0xe1e <chk_mounted>
	if (res == FR_OK) {
    3f58:	88 23       	and	r24, r24
    3f5a:	09 f5       	brne	.+66     	; 0x3f9e <f_chmod+0x7c>
		INIT_BUF(dj);
    3f5c:	ce 01       	movw	r24, r28
    3f5e:	01 96       	adiw	r24, 0x01	; 1
    3f60:	9a a3       	std	Y+34, r25	; 0x22
    3f62:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);		/* Follow the file path */
    3f64:	6b a1       	ldd	r22, Y+35	; 0x23
    3f66:	7c a1       	ldd	r23, Y+36	; 0x24
    3f68:	c8 01       	movw	r24, r16
    3f6a:	0e 94 ef 13 	call	0x27de	; 0x27de <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    3f6e:	88 23       	and	r24, r24
    3f70:	b1 f4       	brne	.+44     	; 0x3f9e <f_chmod+0x7c>
			dir = dj.dir;
    3f72:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3f74:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    3f76:	30 97       	sbiw	r30, 0x00	; 0
    3f78:	11 f4       	brne	.+4      	; 0x3f7e <f_chmod+0x5c>
    3f7a:	86 e0       	ldi	r24, 0x06	; 6
    3f7c:	10 c0       	rjmp	.+32     	; 0x3f9e <f_chmod+0x7c>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    3f7e:	9f 2d       	mov	r25, r15
    3f80:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    3f82:	89 2f       	mov	r24, r25
    3f84:	80 95       	com	r24
    3f86:	23 85       	ldd	r18, Z+11	; 0x0b
    3f88:	82 23       	and	r24, r18
    3f8a:	9e 21       	and	r25, r14
    3f8c:	89 2b       	or	r24, r25
    3f8e:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    3f90:	ed 85       	ldd	r30, Y+13	; 0x0d
    3f92:	fe 85       	ldd	r31, Y+14	; 0x0e
    3f94:	81 e0       	ldi	r24, 0x01	; 1
    3f96:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    3f98:	cf 01       	movw	r24, r30
    3f9a:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3f9e:	a4 96       	adiw	r28, 0x24	; 36
    3fa0:	0f b6       	in	r0, 0x3f	; 63
    3fa2:	f8 94       	cli
    3fa4:	de bf       	out	0x3e, r29	; 62
    3fa6:	0f be       	out	0x3f, r0	; 63
    3fa8:	cd bf       	out	0x3d, r28	; 61
    3faa:	cf 91       	pop	r28
    3fac:	df 91       	pop	r29
    3fae:	1f 91       	pop	r17
    3fb0:	0f 91       	pop	r16
    3fb2:	ff 90       	pop	r15
    3fb4:	ef 90       	pop	r14
    3fb6:	08 95       	ret

00003fb8 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
    3fb8:	2f 92       	push	r2
    3fba:	3f 92       	push	r3
    3fbc:	4f 92       	push	r4
    3fbe:	5f 92       	push	r5
    3fc0:	6f 92       	push	r6
    3fc2:	7f 92       	push	r7
    3fc4:	8f 92       	push	r8
    3fc6:	9f 92       	push	r9
    3fc8:	af 92       	push	r10
    3fca:	bf 92       	push	r11
    3fcc:	cf 92       	push	r12
    3fce:	df 92       	push	r13
    3fd0:	ef 92       	push	r14
    3fd2:	ff 92       	push	r15
    3fd4:	0f 93       	push	r16
    3fd6:	1f 93       	push	r17
    3fd8:	df 93       	push	r29
    3fda:	cf 93       	push	r28
    3fdc:	cd b7       	in	r28, 0x3d	; 61
    3fde:	de b7       	in	r29, 0x3e	; 62
    3fe0:	a9 97       	sbiw	r28, 0x29	; 41
    3fe2:	0f b6       	in	r0, 0x3f	; 63
    3fe4:	f8 94       	cli
    3fe6:	de bf       	out	0x3e, r29	; 62
    3fe8:	0f be       	out	0x3f, r0	; 63
    3fea:	cd bf       	out	0x3d, r28	; 61
    3fec:	9c a3       	std	Y+36, r25	; 0x24
    3fee:	8b a3       	std	Y+35, r24	; 0x23
	BYTE *dir, n;
	DWORD dsc, dcl, pcl,tim ;//= get_fattime();
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    3ff0:	ad e0       	ldi	r26, 0x0D	; 13
    3ff2:	ea 2e       	mov	r14, r26
    3ff4:	f1 2c       	mov	r15, r1
    3ff6:	ec 0e       	add	r14, r28
    3ff8:	fd 1e       	adc	r15, r29
    3ffa:	ce 01       	movw	r24, r28
    3ffc:	83 96       	adiw	r24, 0x23	; 35
    3ffe:	b7 01       	movw	r22, r14
    4000:	41 e0       	ldi	r20, 0x01	; 1
    4002:	0e 94 0f 07 	call	0xe1e	; 0xe1e <chk_mounted>
    4006:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    4008:	88 23       	and	r24, r24
    400a:	09 f0       	breq	.+2      	; 0x400e <f_mkdir+0x56>
    400c:	44 c1       	rjmp	.+648    	; 0x4296 <f_mkdir+0x2de>
		INIT_BUF(dj);
    400e:	ce 01       	movw	r24, r28
    4010:	01 96       	adiw	r24, 0x01	; 1
    4012:	9a a3       	std	Y+34, r25	; 0x22
    4014:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);			/* Follow the file path */
    4016:	6b a1       	ldd	r22, Y+35	; 0x23
    4018:	7c a1       	ldd	r23, Y+36	; 0x24
    401a:	c7 01       	movw	r24, r14
    401c:	0e 94 ef 13 	call	0x27de	; 0x27de <follow_path>
    4020:	18 2f       	mov	r17, r24
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    4022:	88 23       	and	r24, r24
    4024:	11 f4       	brne	.+4      	; 0x402a <f_mkdir+0x72>
    4026:	18 e0       	ldi	r17, 0x08	; 8
    4028:	36 c1       	rjmp	.+620    	; 0x4296 <f_mkdir+0x2de>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
    402a:	84 30       	cpi	r24, 0x04	; 4
    402c:	09 f0       	breq	.+2      	; 0x4030 <f_mkdir+0x78>
    402e:	33 c1       	rjmp	.+614    	; 0x4296 <f_mkdir+0x2de>
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
    4030:	8d 85       	ldd	r24, Y+13	; 0x0d
    4032:	9e 85       	ldd	r25, Y+14	; 0x0e
    4034:	40 e0       	ldi	r20, 0x00	; 0
    4036:	50 e0       	ldi	r21, 0x00	; 0
    4038:	60 e0       	ldi	r22, 0x00	; 0
    403a:	70 e0       	ldi	r23, 0x00	; 0
    403c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <create_chain>
    4040:	4b 01       	movw	r8, r22
    4042:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    4044:	61 15       	cp	r22, r1
    4046:	71 05       	cpc	r23, r1
    4048:	81 05       	cpc	r24, r1
    404a:	91 05       	cpc	r25, r1
    404c:	11 f4       	brne	.+4      	; 0x4052 <f_mkdir+0x9a>
    404e:	17 e0       	ldi	r17, 0x07	; 7
    4050:	02 c1       	rjmp	.+516    	; 0x4256 <f_mkdir+0x29e>
			if (dcl == 1) res = FR_INT_ERR;
    4052:	61 30       	cpi	r22, 0x01	; 1
    4054:	71 05       	cpc	r23, r1
    4056:	81 05       	cpc	r24, r1
    4058:	91 05       	cpc	r25, r1
    405a:	11 f4       	brne	.+4      	; 0x4060 <f_mkdir+0xa8>
    405c:	12 e0       	ldi	r17, 0x02	; 2
    405e:	fb c0       	rjmp	.+502    	; 0x4256 <f_mkdir+0x29e>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    4060:	6f 3f       	cpi	r22, 0xFF	; 255
    4062:	3f ef       	ldi	r19, 0xFF	; 255
    4064:	73 07       	cpc	r23, r19
    4066:	3f ef       	ldi	r19, 0xFF	; 255
    4068:	83 07       	cpc	r24, r19
    406a:	3f ef       	ldi	r19, 0xFF	; 255
    406c:	93 07       	cpc	r25, r19
    406e:	09 f4       	brne	.+2      	; 0x4072 <f_mkdir+0xba>
    4070:	2c c1       	rjmp	.+600    	; 0x42ca <f_mkdir+0x312>
			if (res == FR_OK)					/* Flush FAT */
				res = move_window(dj.fs, 0);
    4072:	8d 85       	ldd	r24, Y+13	; 0x0d
    4074:	9e 85       	ldd	r25, Y+14	; 0x0e
    4076:	40 e0       	ldi	r20, 0x00	; 0
    4078:	50 e0       	ldi	r21, 0x00	; 0
    407a:	60 e0       	ldi	r22, 0x00	; 0
    407c:	70 e0       	ldi	r23, 0x00	; 0
    407e:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    4082:	18 2f       	mov	r17, r24
			if (res == FR_OK) {					/* Initialize the new directory table */
    4084:	88 23       	and	r24, r24
    4086:	09 f0       	breq	.+2      	; 0x408a <f_mkdir+0xd2>
    4088:	e6 c0       	rjmp	.+460    	; 0x4256 <f_mkdir+0x29e>
				dsc = clust2sect(dj.fs, dcl);
    408a:	0d 85       	ldd	r16, Y+13	; 0x0d
    408c:	1e 85       	ldd	r17, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    408e:	fe ef       	ldi	r31, 0xFE	; 254
    4090:	cf 2e       	mov	r12, r31
    4092:	ff ef       	ldi	r31, 0xFF	; 255
    4094:	df 2e       	mov	r13, r31
    4096:	ff ef       	ldi	r31, 0xFF	; 255
    4098:	ef 2e       	mov	r14, r31
    409a:	ff ef       	ldi	r31, 0xFF	; 255
    409c:	ff 2e       	mov	r15, r31
    409e:	c8 0c       	add	r12, r8
    40a0:	d9 1c       	adc	r13, r9
    40a2:	ea 1c       	adc	r14, r10
    40a4:	fb 1c       	adc	r15, r11
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    40a6:	f8 01       	movw	r30, r16
    40a8:	86 89       	ldd	r24, Z+22	; 0x16
    40aa:	97 89       	ldd	r25, Z+23	; 0x17
    40ac:	a0 8d       	ldd	r26, Z+24	; 0x18
    40ae:	b1 8d       	ldd	r27, Z+25	; 0x19
    40b0:	02 97       	sbiw	r24, 0x02	; 2
    40b2:	a1 09       	sbc	r26, r1
    40b4:	b1 09       	sbc	r27, r1
    40b6:	c8 16       	cp	r12, r24
    40b8:	d9 06       	cpc	r13, r25
    40ba:	ea 06       	cpc	r14, r26
    40bc:	fb 06       	cpc	r15, r27
    40be:	20 f0       	brcs	.+8      	; 0x40c8 <f_mkdir+0x110>
    40c0:	cc 24       	eor	r12, r12
    40c2:	dd 24       	eor	r13, r13
    40c4:	76 01       	movw	r14, r12
    40c6:	14 c0       	rjmp	.+40     	; 0x40f0 <f_mkdir+0x138>
	return clst * fs->csize + fs->database;
    40c8:	f8 01       	movw	r30, r16
    40ca:	22 81       	ldd	r18, Z+2	; 0x02
    40cc:	30 e0       	ldi	r19, 0x00	; 0
    40ce:	40 e0       	ldi	r20, 0x00	; 0
    40d0:	50 e0       	ldi	r21, 0x00	; 0
    40d2:	c7 01       	movw	r24, r14
    40d4:	b6 01       	movw	r22, r12
    40d6:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <__mulsi3>
    40da:	6b 01       	movw	r12, r22
    40dc:	7c 01       	movw	r14, r24
    40de:	f8 01       	movw	r30, r16
    40e0:	86 a1       	ldd	r24, Z+38	; 0x26
    40e2:	97 a1       	ldd	r25, Z+39	; 0x27
    40e4:	a0 a5       	ldd	r26, Z+40	; 0x28
    40e6:	b1 a5       	ldd	r27, Z+41	; 0x29
    40e8:	c8 0e       	add	r12, r24
    40ea:	d9 1e       	adc	r13, r25
    40ec:	ea 1e       	adc	r14, r26
    40ee:	fb 1e       	adc	r15, r27
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK)					/* Flush FAT */
				res = move_window(dj.fs, 0);
			if (res == FR_OK) {					/* Initialize the new directory table */
				dsc = clust2sect(dj.fs, dcl);
				dir = dj.fs->win;
    40f0:	ee e2       	ldi	r30, 0x2E	; 46
    40f2:	6e 2e       	mov	r6, r30
    40f4:	71 2c       	mov	r7, r1
    40f6:	60 0e       	add	r6, r16
    40f8:	71 1e       	adc	r7, r17
    40fa:	f3 01       	movw	r30, r6
    40fc:	80 e0       	ldi	r24, 0x00	; 0
    40fe:	92 e0       	ldi	r25, 0x02	; 2
    4100:	01 c0       	rjmp	.+2      	; 0x4104 <f_mkdir+0x14c>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    4102:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    4104:	01 97       	sbiw	r24, 0x01	; 1
    4106:	2f ef       	ldi	r18, 0xFF	; 255
    4108:	8f 3f       	cpi	r24, 0xFF	; 255
    410a:	92 07       	cpc	r25, r18
    410c:	d1 f7       	brne	.-12     	; 0x4102 <f_mkdir+0x14a>
    410e:	f3 01       	movw	r30, r6
    4110:	8b e0       	ldi	r24, 0x0B	; 11
    4112:	90 e0       	ldi	r25, 0x00	; 0
		*d++ = (BYTE)val;
    4114:	20 e2       	ldi	r18, 0x20	; 32
    4116:	01 c0       	rjmp	.+2      	; 0x411a <f_mkdir+0x162>
    4118:	21 93       	st	Z+, r18
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    411a:	01 97       	sbiw	r24, 0x01	; 1
    411c:	3f ef       	ldi	r19, 0xFF	; 255
    411e:	8f 3f       	cpi	r24, 0xFF	; 255
    4120:	93 07       	cpc	r25, r19
    4122:	d1 f7       	brne	.-12     	; 0x4118 <f_mkdir+0x160>
			if (res == FR_OK) {					/* Initialize the new directory table */
				dsc = clust2sect(dj.fs, dcl);
				dir = dj.fs->win;
				mem_set(dir, 0, SS(dj.fs));
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
				dir[DIR_Name] = '.';
    4124:	8e e2       	ldi	r24, 0x2E	; 46
    4126:	f8 01       	movw	r30, r16
    4128:	86 a7       	std	Z+46, r24	; 0x2e
				dir[DIR_Attr] = AM_DIR;
    412a:	80 e1       	ldi	r24, 0x10	; 16
    412c:	81 af       	std	Z+57, r24	; 0x39
				ST_DWORD(dir+DIR_WrtTime, tim);
    412e:	80 e0       	ldi	r24, 0x00	; 0
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	a0 e0       	ldi	r26, 0x00	; 0
    4134:	b0 e0       	ldi	r27, 0x00	; 0
    4136:	89 a7       	std	Y+41, r24	; 0x29
    4138:	0c 5b       	subi	r16, 0xBC	; 188
    413a:	1f 4f       	sbci	r17, 0xFF	; 255
    413c:	f8 01       	movw	r30, r16
    413e:	81 93       	st	Z+, r24
    4140:	29 2f       	mov	r18, r25
    4142:	33 27       	eor	r19, r19
    4144:	28 a7       	std	Y+40, r18	; 0x28
    4146:	21 93       	st	Z+, r18
    4148:	9d 01       	movw	r18, r26
    414a:	44 27       	eor	r20, r20
    414c:	55 27       	eor	r21, r21
    414e:	2f a3       	std	Y+39, r18	; 0x27
    4150:	21 93       	st	Z+, r18
    4152:	8b 2f       	mov	r24, r27
    4154:	99 27       	eor	r25, r25
    4156:	aa 27       	eor	r26, r26
    4158:	bb 27       	eor	r27, r27
    415a:	8e a3       	std	Y+38, r24	; 0x26
    415c:	81 93       	st	Z+, r24
				ST_CLUST(dir, dcl);
    415e:	8d a2       	std	Y+37, r8	; 0x25
    4160:	81 92       	st	Z+, r8
    4162:	8f 01       	movw	r16, r30
    4164:	89 2d       	mov	r24, r9
    4166:	99 27       	eor	r25, r25
    4168:	28 2e       	mov	r2, r24
    416a:	80 83       	st	Z, r24
    416c:	c5 01       	movw	r24, r10
    416e:	aa 27       	eor	r26, r26
    4170:	bb 27       	eor	r27, r27
    4172:	38 2e       	mov	r3, r24
    4174:	07 50       	subi	r16, 0x07	; 7
    4176:	10 40       	sbci	r17, 0x00	; 0
    4178:	f8 01       	movw	r30, r16
    417a:	81 93       	st	Z+, r24
    417c:	8f 01       	movw	r16, r30
    417e:	89 2f       	mov	r24, r25
    4180:	99 27       	eor	r25, r25
    4182:	48 2e       	mov	r4, r24
    4184:	80 83       	st	Z, r24
    4186:	03 54       	subi	r16, 0x43	; 67
    4188:	10 40       	sbci	r17, 0x00	; 0
    418a:	f3 01       	movw	r30, r6
    418c:	20 e2       	ldi	r18, 0x20	; 32
    418e:	30 e0       	ldi	r19, 0x00	; 0
    4190:	03 c0       	rjmp	.+6      	; 0x4198 <f_mkdir+0x1e0>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
    4192:	80 81       	ld	r24, Z
    4194:	80 a3       	std	Z+32, r24	; 0x20
    4196:	31 96       	adiw	r30, 0x01	; 1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    4198:	21 50       	subi	r18, 0x01	; 1
    419a:	30 40       	sbci	r19, 0x00	; 0
    419c:	8f ef       	ldi	r24, 0xFF	; 255
    419e:	2f 3f       	cpi	r18, 0xFF	; 255
    41a0:	38 07       	cpc	r19, r24
    41a2:	b9 f7       	brne	.-18     	; 0x4192 <f_mkdir+0x1da>
				dir[DIR_Name] = '.';
				dir[DIR_Attr] = AM_DIR;
				ST_DWORD(dir+DIR_WrtTime, tim);
				ST_CLUST(dir, dcl);
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
    41a4:	01 5b       	subi	r16, 0xB1	; 177
    41a6:	1f 4f       	sbci	r17, 0xFF	; 255
    41a8:	8e e2       	ldi	r24, 0x2E	; 46
    41aa:	f8 01       	movw	r30, r16
    41ac:	80 83       	st	Z, r24
    41ae:	0f 54       	subi	r16, 0x4F	; 79
    41b0:	10 40       	sbci	r17, 0x00	; 0
    41b2:	2b 89       	ldd	r18, Y+19	; 0x13
    41b4:	3c 89       	ldd	r19, Y+20	; 0x14
    41b6:	4d 89       	ldd	r20, Y+21	; 0x15
    41b8:	5e 89       	ldd	r21, Y+22	; 0x16
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
    41ba:	6d 85       	ldd	r22, Y+13	; 0x0d
    41bc:	7e 85       	ldd	r23, Y+14	; 0x0e
    41be:	fb 01       	movw	r30, r22
    41c0:	80 81       	ld	r24, Z
    41c2:	83 30       	cpi	r24, 0x03	; 3
    41c4:	69 f4       	brne	.+26     	; 0x41e0 <f_mkdir+0x228>
    41c6:	82 a1       	ldd	r24, Z+34	; 0x22
    41c8:	93 a1       	ldd	r25, Z+35	; 0x23
    41ca:	a4 a1       	ldd	r26, Z+36	; 0x24
    41cc:	b5 a1       	ldd	r27, Z+37	; 0x25
    41ce:	28 17       	cp	r18, r24
    41d0:	39 07       	cpc	r19, r25
    41d2:	4a 07       	cpc	r20, r26
    41d4:	5b 07       	cpc	r21, r27
    41d6:	21 f4       	brne	.+8      	; 0x41e0 <f_mkdir+0x228>
    41d8:	20 e0       	ldi	r18, 0x00	; 0
    41da:	30 e0       	ldi	r19, 0x00	; 0
    41dc:	40 e0       	ldi	r20, 0x00	; 0
    41de:	50 e0       	ldi	r21, 0x00	; 0
					pcl = 0;
				ST_CLUST(dir+SZ_DIR, pcl);
    41e0:	08 59       	subi	r16, 0x98	; 152
    41e2:	1f 4f       	sbci	r17, 0xFF	; 255
    41e4:	f8 01       	movw	r30, r16
    41e6:	21 93       	st	Z+, r18
    41e8:	8f 01       	movw	r16, r30
    41ea:	83 2f       	mov	r24, r19
    41ec:	99 27       	eor	r25, r25
    41ee:	80 83       	st	Z, r24
    41f0:	ca 01       	movw	r24, r20
    41f2:	aa 27       	eor	r26, r26
    41f4:	bb 27       	eor	r27, r27
    41f6:	07 50       	subi	r16, 0x07	; 7
    41f8:	10 40       	sbci	r17, 0x00	; 0
    41fa:	f8 01       	movw	r30, r16
    41fc:	81 93       	st	Z+, r24
    41fe:	89 2f       	mov	r24, r25
    4200:	99 27       	eor	r25, r25
    4202:	80 83       	st	Z, r24
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    4204:	fb 01       	movw	r30, r22
    4206:	02 81       	ldd	r16, Z+2	; 0x02
					dj.fs->winsect = dsc++;
					dj.fs->wflag = 1;
    4208:	55 24       	eor	r5, r5
    420a:	53 94       	inc	r5
    420c:	21 c0       	rjmp	.+66     	; 0x4250 <f_mkdir+0x298>
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
    420e:	ed 85       	ldd	r30, Y+13	; 0x0d
    4210:	fe 85       	ldd	r31, Y+14	; 0x0e
    4212:	c2 a6       	std	Z+42, r12	; 0x2a
    4214:	d3 a6       	std	Z+43, r13	; 0x2b
    4216:	e4 a6       	std	Z+44, r14	; 0x2c
    4218:	f5 a6       	std	Z+45, r15	; 0x2d
					dj.fs->wflag = 1;
    421a:	54 82       	std	Z+4, r5	; 0x04
					res = move_window(dj.fs, 0);
    421c:	cf 01       	movw	r24, r30
    421e:	40 e0       	ldi	r20, 0x00	; 0
    4220:	50 e0       	ldi	r21, 0x00	; 0
    4222:	60 e0       	ldi	r22, 0x00	; 0
    4224:	70 e0       	ldi	r23, 0x00	; 0
    4226:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    422a:	18 2f       	mov	r17, r24
					if (res != FR_OK) break;
    422c:	88 23       	and	r24, r24
    422e:	99 f4       	brne	.+38     	; 0x4256 <f_mkdir+0x29e>
    4230:	f3 01       	movw	r30, r6
    4232:	80 e0       	ldi	r24, 0x00	; 0
    4234:	92 e0       	ldi	r25, 0x02	; 2
    4236:	01 c0       	rjmp	.+2      	; 0x423a <f_mkdir+0x282>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    4238:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    423a:	01 97       	sbiw	r24, 0x01	; 1
    423c:	2f ef       	ldi	r18, 0xFF	; 255
    423e:	8f 3f       	cpi	r24, 0xFF	; 255
    4240:	92 07       	cpc	r25, r18
    4242:	d1 f7       	brne	.-12     	; 0x4238 <f_mkdir+0x280>
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
    4244:	08 94       	sec
    4246:	c1 1c       	adc	r12, r1
    4248:	d1 1c       	adc	r13, r1
    424a:	e1 1c       	adc	r14, r1
    424c:	f1 1c       	adc	r15, r1
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    424e:	01 50       	subi	r16, 0x01	; 1
    4250:	00 23       	and	r16, r16
    4252:	e9 f6       	brne	.-70     	; 0x420e <f_mkdir+0x256>
    4254:	3c c0       	rjmp	.+120    	; 0x42ce <f_mkdir+0x316>
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
			if (res != FR_OK) {
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
    4256:	8d 85       	ldd	r24, Y+13	; 0x0d
    4258:	9e 85       	ldd	r25, Y+14	; 0x0e
    425a:	b5 01       	movw	r22, r10
    425c:	a4 01       	movw	r20, r8
    425e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <remove_chain>
    4262:	19 c0       	rjmp	.+50     	; 0x4296 <f_mkdir+0x2de>
			} else {
				dir = dj.dir;
    4264:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4266:	f8 a1       	ldd	r31, Y+32	; 0x20
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
    4268:	80 e1       	ldi	r24, 0x10	; 16
    426a:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
    426c:	39 a5       	ldd	r19, Y+41	; 0x29
    426e:	36 8b       	std	Z+22, r19	; 0x16
    4270:	88 a5       	ldd	r24, Y+40	; 0x28
    4272:	87 8b       	std	Z+23, r24	; 0x17
    4274:	2f a1       	ldd	r18, Y+39	; 0x27
    4276:	20 8f       	std	Z+24, r18	; 0x18
    4278:	3e a1       	ldd	r19, Y+38	; 0x26
    427a:	31 8f       	std	Z+25, r19	; 0x19
				ST_CLUST(dir, dcl);					/* Table start cluster */
    427c:	8d a1       	ldd	r24, Y+37	; 0x25
    427e:	82 8f       	std	Z+26, r24	; 0x1a
    4280:	23 8e       	std	Z+27, r2	; 0x1b
    4282:	34 8a       	std	Z+20, r3	; 0x14
    4284:	45 8a       	std	Z+21, r4	; 0x15
				dj.fs->wflag = 1;
    4286:	ed 85       	ldd	r30, Y+13	; 0x0d
    4288:	fe 85       	ldd	r31, Y+14	; 0x0e
    428a:	81 e0       	ldi	r24, 0x01	; 1
    428c:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    428e:	cf 01       	movw	r24, r30
    4290:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <sync>
    4294:	18 2f       	mov	r17, r24
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    4296:	81 2f       	mov	r24, r17
    4298:	a9 96       	adiw	r28, 0x29	; 41
    429a:	0f b6       	in	r0, 0x3f	; 63
    429c:	f8 94       	cli
    429e:	de bf       	out	0x3e, r29	; 62
    42a0:	0f be       	out	0x3f, r0	; 63
    42a2:	cd bf       	out	0x3d, r28	; 61
    42a4:	cf 91       	pop	r28
    42a6:	df 91       	pop	r29
    42a8:	1f 91       	pop	r17
    42aa:	0f 91       	pop	r16
    42ac:	ff 90       	pop	r15
    42ae:	ef 90       	pop	r14
    42b0:	df 90       	pop	r13
    42b2:	cf 90       	pop	r12
    42b4:	bf 90       	pop	r11
    42b6:	af 90       	pop	r10
    42b8:	9f 90       	pop	r9
    42ba:	8f 90       	pop	r8
    42bc:	7f 90       	pop	r7
    42be:	6f 90       	pop	r6
    42c0:	5f 90       	pop	r5
    42c2:	4f 90       	pop	r4
    42c4:	3f 90       	pop	r3
    42c6:	2f 90       	pop	r2
    42c8:	08 95       	ret
				dir = dj.dir;
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
				ST_CLUST(dir, dcl);					/* Table start cluster */
				dj.fs->wflag = 1;
				res = sync(dj.fs);
    42ca:	11 e0       	ldi	r17, 0x01	; 1
    42cc:	c4 cf       	rjmp	.-120    	; 0x4256 <f_mkdir+0x29e>
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
    42ce:	ce 01       	movw	r24, r28
    42d0:	0d 96       	adiw	r24, 0x0d	; 13
    42d2:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <dir_register>
    42d6:	18 2f       	mov	r17, r24
			if (res != FR_OK) {
    42d8:	88 23       	and	r24, r24
    42da:	21 f2       	breq	.-120    	; 0x4264 <f_mkdir+0x2ac>
    42dc:	bc cf       	rjmp	.-136    	; 0x4256 <f_mkdir+0x29e>

000042de <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    42de:	cf 92       	push	r12
    42e0:	df 92       	push	r13
    42e2:	ef 92       	push	r14
    42e4:	ff 92       	push	r15
    42e6:	0f 93       	push	r16
    42e8:	1f 93       	push	r17
    42ea:	df 93       	push	r29
    42ec:	cf 93       	push	r28
    42ee:	cd b7       	in	r28, 0x3d	; 61
    42f0:	de b7       	in	r29, 0x3e	; 62
    42f2:	ea 97       	sbiw	r28, 0x3a	; 58
    42f4:	0f b6       	in	r0, 0x3f	; 63
    42f6:	f8 94       	cli
    42f8:	de bf       	out	0x3e, r29	; 62
    42fa:	0f be       	out	0x3f, r0	; 63
    42fc:	cd bf       	out	0x3d, r28	; 61
    42fe:	9a af       	std	Y+58, r25	; 0x3a
    4300:	89 af       	std	Y+57, r24	; 0x39
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    4302:	8e 01       	movw	r16, r28
    4304:	03 5f       	subi	r16, 0xF3	; 243
    4306:	1f 4f       	sbci	r17, 0xFF	; 255
    4308:	ce 01       	movw	r24, r28
    430a:	c9 96       	adiw	r24, 0x39	; 57
    430c:	b8 01       	movw	r22, r16
    430e:	41 e0       	ldi	r20, 0x01	; 1
    4310:	0e 94 0f 07 	call	0xe1e	; 0xe1e <chk_mounted>
    4314:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    4316:	88 23       	and	r24, r24
    4318:	09 f0       	breq	.+2      	; 0x431c <f_unlink+0x3e>
    431a:	76 c0       	rjmp	.+236    	; 0x4408 <f_unlink+0x12a>
		INIT_BUF(dj);
    431c:	ce 01       	movw	r24, r28
    431e:	01 96       	adiw	r24, 0x01	; 1
    4320:	9a a3       	std	Y+34, r25	; 0x22
    4322:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);		/* Follow the file path */
    4324:	69 ad       	ldd	r22, Y+57	; 0x39
    4326:	7a ad       	ldd	r23, Y+58	; 0x3a
    4328:	c8 01       	movw	r24, r16
    432a:	0e 94 ef 13 	call	0x27de	; 0x27de <follow_path>
    432e:	98 2f       	mov	r25, r24
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    4330:	88 23       	and	r24, r24
    4332:	09 f0       	breq	.+2      	; 0x4336 <f_unlink+0x58>
    4334:	69 c0       	rjmp	.+210    	; 0x4408 <f_unlink+0x12a>
			dir = dj.dir;
    4336:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4338:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {
    433a:	30 97       	sbiw	r30, 0x00	; 0
    433c:	11 f4       	brne	.+4      	; 0x4342 <f_unlink+0x64>
    433e:	96 e0       	ldi	r25, 0x06	; 6
    4340:	03 c0       	rjmp	.+6      	; 0x4348 <f_unlink+0x6a>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    4342:	83 85       	ldd	r24, Z+11	; 0x0b
    4344:	80 fd       	sbrc	r24, 0
    4346:	97 e0       	ldi	r25, 0x07	; 7
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = LD_CLUST(dir);
    4348:	45 89       	ldd	r20, Z+21	; 0x15
    434a:	24 89       	ldd	r18, Z+20	; 0x14
    434c:	53 8d       	ldd	r21, Z+27	; 0x1b
    434e:	62 8d       	ldd	r22, Z+26	; 0x1a
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    4350:	99 23       	and	r25, r25
    4352:	09 f0       	breq	.+2      	; 0x4356 <f_unlink+0x78>
    4354:	59 c0       	rjmp	.+178    	; 0x4408 <f_unlink+0x12a>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = LD_CLUST(dir);
    4356:	94 2f       	mov	r25, r20
    4358:	80 e0       	ldi	r24, 0x00	; 0
    435a:	30 e0       	ldi	r19, 0x00	; 0
    435c:	82 2b       	or	r24, r18
    435e:	93 2b       	or	r25, r19
    4360:	a0 e0       	ldi	r26, 0x00	; 0
    4362:	b0 e0       	ldi	r27, 0x00	; 0
    4364:	8c 01       	movw	r16, r24
    4366:	ff 24       	eor	r15, r15
    4368:	ee 24       	eor	r14, r14
    436a:	95 2f       	mov	r25, r21
    436c:	80 e0       	ldi	r24, 0x00	; 0
    436e:	26 2f       	mov	r18, r22
    4370:	30 e0       	ldi	r19, 0x00	; 0
    4372:	82 2b       	or	r24, r18
    4374:	93 2b       	or	r25, r19
    4376:	a0 e0       	ldi	r26, 0x00	; 0
    4378:	b0 e0       	ldi	r27, 0x00	; 0
    437a:	e8 2a       	or	r14, r24
    437c:	f9 2a       	or	r15, r25
    437e:	0a 2b       	or	r16, r26
    4380:	1b 2b       	or	r17, r27
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    4382:	83 85       	ldd	r24, Z+11	; 0x0b
    4384:	84 ff       	sbrs	r24, 4
    4386:	52 c0       	rjmp	.+164    	; 0x442c <f_unlink+0x14e>
				if (dclst < 2) {
    4388:	82 e0       	ldi	r24, 0x02	; 2
    438a:	e8 16       	cp	r14, r24
    438c:	f1 04       	cpc	r15, r1
    438e:	01 05       	cpc	r16, r1
    4390:	11 05       	cpc	r17, r1
    4392:	10 f4       	brcc	.+4      	; 0x4398 <f_unlink+0xba>
    4394:	92 e0       	ldi	r25, 0x02	; 2
    4396:	38 c0       	rjmp	.+112    	; 0x4408 <f_unlink+0x12a>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    4398:	de 01       	movw	r26, r28
    439a:	93 96       	adiw	r26, 0x23	; 35
	const BYTE *s = (const BYTE*)src;
    439c:	fe 01       	movw	r30, r28
    439e:	3d 96       	adiw	r30, 0x0d	; 13
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    43a0:	9d 01       	movw	r18, r26
    43a2:	02 c0       	rjmp	.+4      	; 0x43a8 <f_unlink+0xca>
		*d++ = *s++;
    43a4:	81 91       	ld	r24, Z+
    43a6:	8d 93       	st	X+, r24
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    43a8:	e2 17       	cp	r30, r18
    43aa:	f3 07       	cpc	r31, r19
    43ac:	d9 f7       	brne	.-10     	; 0x43a4 <f_unlink+0xc6>
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
				if (dclst < 2) {
					res = FR_INT_ERR;
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
					sdj.sclust = dclst;
    43ae:	e9 a6       	std	Y+41, r14	; 0x29
    43b0:	fa a6       	std	Y+42, r15	; 0x2a
    43b2:	0b a7       	std	Y+43, r16	; 0x2b
    43b4:	1c a7       	std	Y+44, r17	; 0x2c
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    43b6:	b3 e2       	ldi	r27, 0x23	; 35
    43b8:	cb 2e       	mov	r12, r27
    43ba:	d1 2c       	mov	r13, r1
    43bc:	cc 0e       	add	r12, r28
    43be:	dd 1e       	adc	r13, r29
    43c0:	c6 01       	movw	r24, r12
    43c2:	62 e0       	ldi	r22, 0x02	; 2
    43c4:	70 e0       	ldi	r23, 0x00	; 0
    43c6:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <dir_sdi>
    43ca:	98 2f       	mov	r25, r24
					if (res == FR_OK) {
    43cc:	88 23       	and	r24, r24
    43ce:	e1 f4       	brne	.+56     	; 0x4408 <f_unlink+0x12a>
						res = dir_read(&sdj);
    43d0:	c6 01       	movw	r24, r12
    43d2:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <dir_read>
    43d6:	98 2f       	mov	r25, r24
						if (res == FR_OK			/* Not empty dir */
    43d8:	88 23       	and	r24, r24
    43da:	31 f1       	breq	.+76     	; 0x4428 <f_unlink+0x14a>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    43dc:	84 30       	cpi	r24, 0x04	; 4
    43de:	31 f1       	breq	.+76     	; 0x442c <f_unlink+0x14e>
    43e0:	13 c0       	rjmp	.+38     	; 0x4408 <f_unlink+0x12a>
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
				if (res == FR_OK) {
					if (dclst)				/* Remove the cluster chain if exist */
    43e2:	e1 14       	cp	r14, r1
    43e4:	f1 04       	cpc	r15, r1
    43e6:	01 05       	cpc	r16, r1
    43e8:	11 05       	cpc	r17, r1
    43ea:	49 f0       	breq	.+18     	; 0x43fe <f_unlink+0x120>
						res = remove_chain(dj.fs, dclst);
    43ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    43ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    43f0:	b8 01       	movw	r22, r16
    43f2:	a7 01       	movw	r20, r14
    43f4:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <remove_chain>
    43f8:	98 2f       	mov	r25, r24
					if (res == FR_OK) res = sync(dj.fs);
    43fa:	88 23       	and	r24, r24
    43fc:	29 f4       	brne	.+10     	; 0x4408 <f_unlink+0x12a>
    43fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4400:	9e 85       	ldd	r25, Y+14	; 0x0e
    4402:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <sync>
    4406:	98 2f       	mov	r25, r24
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
    4408:	89 2f       	mov	r24, r25
    440a:	ea 96       	adiw	r28, 0x3a	; 58
    440c:	0f b6       	in	r0, 0x3f	; 63
    440e:	f8 94       	cli
    4410:	de bf       	out	0x3e, r29	; 62
    4412:	0f be       	out	0x3f, r0	; 63
    4414:	cd bf       	out	0x3d, r28	; 61
    4416:	cf 91       	pop	r28
    4418:	df 91       	pop	r29
    441a:	1f 91       	pop	r17
    441c:	0f 91       	pop	r16
    441e:	ff 90       	pop	r15
    4420:	ef 90       	pop	r14
    4422:	df 90       	pop	r13
    4424:	cf 90       	pop	r12
    4426:	08 95       	ret
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
				if (res == FR_OK) {
					if (dclst)				/* Remove the cluster chain if exist */
						res = remove_chain(dj.fs, dclst);
					if (res == FR_OK) res = sync(dj.fs);
    4428:	97 e0       	ldi	r25, 0x07	; 7
    442a:	ee cf       	rjmp	.-36     	; 0x4408 <f_unlink+0x12a>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
    442c:	ce 01       	movw	r24, r28
    442e:	0d 96       	adiw	r24, 0x0d	; 13
    4430:	0e 94 51 12 	call	0x24a2	; 0x24a2 <dir_remove>
    4434:	98 2f       	mov	r25, r24
				if (res == FR_OK) {
    4436:	88 23       	and	r24, r24
    4438:	a1 f2       	breq	.-88     	; 0x43e2 <f_unlink+0x104>
    443a:	e6 cf       	rjmp	.-52     	; 0x4408 <f_unlink+0x12a>

0000443c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    443c:	cf 93       	push	r28
    443e:	df 93       	push	r29
    4440:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    4442:	6a 81       	ldd	r22, Y+2	; 0x02
    4444:	7b 81       	ldd	r23, Y+3	; 0x03
    4446:	88 81       	ld	r24, Y
    4448:	99 81       	ldd	r25, Y+1	; 0x01
    444a:	0e 94 76 06 	call	0xcec	; 0xcec <validate>
    444e:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    4450:	88 23       	and	r24, r24
    4452:	09 f0       	breq	.+2      	; 0x4456 <f_sync+0x1a>
    4454:	4f c0       	rjmp	.+158    	; 0x44f4 <f_sync+0xb8>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    4456:	8c 81       	ldd	r24, Y+4	; 0x04
    4458:	85 ff       	sbrs	r24, 5
    445a:	4c c0       	rjmp	.+152    	; 0x44f4 <f_sync+0xb8>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    445c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    445e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4460:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4462:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4464:	88 81       	ld	r24, Y
    4466:	99 81       	ldd	r25, Y+1	; 0x01
    4468:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <move_window>
    446c:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    446e:	88 23       	and	r24, r24
    4470:	09 f0       	breq	.+2      	; 0x4474 <f_sync+0x38>
    4472:	40 c0       	rjmp	.+128    	; 0x44f4 <f_sync+0xb8>
				dir = fp->dir_ptr;
    4474:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4476:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    4478:	83 85       	ldd	r24, Z+11	; 0x0b
    447a:	80 62       	ori	r24, 0x20	; 32
    447c:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    447e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4480:	84 8f       	std	Z+28, r24	; 0x1c
    4482:	8b 85       	ldd	r24, Y+11	; 0x0b
    4484:	85 8f       	std	Z+29, r24	; 0x1d
    4486:	8a 85       	ldd	r24, Y+10	; 0x0a
    4488:	9b 85       	ldd	r25, Y+11	; 0x0b
    448a:	ac 85       	ldd	r26, Y+12	; 0x0c
    448c:	bd 85       	ldd	r27, Y+13	; 0x0d
    448e:	cd 01       	movw	r24, r26
    4490:	aa 27       	eor	r26, r26
    4492:	bb 27       	eor	r27, r27
    4494:	86 8f       	std	Z+30, r24	; 0x1e
    4496:	8a 85       	ldd	r24, Y+10	; 0x0a
    4498:	9b 85       	ldd	r25, Y+11	; 0x0b
    449a:	ac 85       	ldd	r26, Y+12	; 0x0c
    449c:	bd 85       	ldd	r27, Y+13	; 0x0d
    449e:	8b 2f       	mov	r24, r27
    44a0:	99 27       	eor	r25, r25
    44a2:	aa 27       	eor	r26, r26
    44a4:	bb 27       	eor	r27, r27
    44a6:	87 8f       	std	Z+31, r24	; 0x1f
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    44a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    44aa:	82 8f       	std	Z+26, r24	; 0x1a
    44ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    44ae:	83 8f       	std	Z+27, r24	; 0x1b
    44b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    44b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    44b4:	a8 89       	ldd	r26, Y+16	; 0x10
    44b6:	b9 89       	ldd	r27, Y+17	; 0x11
    44b8:	cd 01       	movw	r24, r26
    44ba:	aa 27       	eor	r26, r26
    44bc:	bb 27       	eor	r27, r27
    44be:	84 8b       	std	Z+20, r24	; 0x14
    44c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    44c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    44c4:	a8 89       	ldd	r26, Y+16	; 0x10
    44c6:	b9 89       	ldd	r27, Y+17	; 0x11
    44c8:	cd 01       	movw	r24, r26
    44ca:	aa 27       	eor	r26, r26
    44cc:	bb 27       	eor	r27, r27
    44ce:	89 2f       	mov	r24, r25
    44d0:	99 27       	eor	r25, r25
    44d2:	85 8b       	std	Z+21, r24	; 0x15
//				tim = get_fattime();						/* Update updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
    44d4:	16 8a       	std	Z+22, r1	; 0x16
    44d6:	17 8a       	std	Z+23, r1	; 0x17
    44d8:	10 8e       	std	Z+24, r1	; 0x18
    44da:	11 8e       	std	Z+25, r1	; 0x19
				fp->flag &= ~FA__WRITTEN;
    44dc:	8c 81       	ldd	r24, Y+4	; 0x04
    44de:	8f 7d       	andi	r24, 0xDF	; 223
    44e0:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    44e2:	e8 81       	ld	r30, Y
    44e4:	f9 81       	ldd	r31, Y+1	; 0x01
    44e6:	81 e0       	ldi	r24, 0x01	; 1
    44e8:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    44ea:	88 81       	ld	r24, Y
    44ec:	99 81       	ldd	r25, Y+1	; 0x01
    44ee:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <sync>
    44f2:	98 2f       	mov	r25, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    44f4:	89 2f       	mov	r24, r25
    44f6:	df 91       	pop	r29
    44f8:	cf 91       	pop	r28
    44fa:	08 95       	ret

000044fc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    44fc:	cf 93       	push	r28
    44fe:	df 93       	push	r29
    4500:	ec 01       	movw	r28, r24
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    4502:	0e 94 1e 22 	call	0x443c	; 0x443c <f_sync>
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    4506:	88 23       	and	r24, r24
    4508:	11 f4       	brne	.+4      	; 0x450e <f_close+0x12>
    450a:	19 82       	std	Y+1, r1	; 0x01
    450c:	18 82       	st	Y, r1
	return res;
#endif
}
    450e:	df 91       	pop	r29
    4510:	cf 91       	pop	r28
    4512:	08 95       	ret

00004514 <fprintf>:
    4514:	a0 e0       	ldi	r26, 0x00	; 0
    4516:	b0 e0       	ldi	r27, 0x00	; 0
    4518:	e0 e9       	ldi	r30, 0x90	; 144
    451a:	f2 e2       	ldi	r31, 0x22	; 34
    451c:	0c 94 6c 25 	jmp	0x4ad8	; 0x4ad8 <__prologue_saves__+0x20>
    4520:	9e 01       	movw	r18, r28
    4522:	27 5f       	subi	r18, 0xF7	; 247
    4524:	3f 4f       	sbci	r19, 0xFF	; 255
    4526:	8d 81       	ldd	r24, Y+5	; 0x05
    4528:	9e 81       	ldd	r25, Y+6	; 0x06
    452a:	6f 81       	ldd	r22, Y+7	; 0x07
    452c:	78 85       	ldd	r23, Y+8	; 0x08
    452e:	a9 01       	movw	r20, r18
    4530:	0e 94 9e 22 	call	0x453c	; 0x453c <vfprintf>
    4534:	20 96       	adiw	r28, 0x00	; 0
    4536:	e2 e0       	ldi	r30, 0x02	; 2
    4538:	0c 94 88 25 	jmp	0x4b10	; 0x4b10 <__epilogue_restores__+0x20>

0000453c <vfprintf>:
    453c:	ab e0       	ldi	r26, 0x0B	; 11
    453e:	b0 e0       	ldi	r27, 0x00	; 0
    4540:	e4 ea       	ldi	r30, 0xA4	; 164
    4542:	f2 e2       	ldi	r31, 0x22	; 34
    4544:	0c 94 5c 25 	jmp	0x4ab8	; 0x4ab8 <__prologue_saves__>
    4548:	3c 01       	movw	r6, r24
    454a:	2b 01       	movw	r4, r22
    454c:	5a 01       	movw	r10, r20
    454e:	fc 01       	movw	r30, r24
    4550:	17 82       	std	Z+7, r1	; 0x07
    4552:	16 82       	std	Z+6, r1	; 0x06
    4554:	83 81       	ldd	r24, Z+3	; 0x03
    4556:	81 fd       	sbrc	r24, 1
    4558:	03 c0       	rjmp	.+6      	; 0x4560 <vfprintf+0x24>
    455a:	6f ef       	ldi	r22, 0xFF	; 255
    455c:	7f ef       	ldi	r23, 0xFF	; 255
    455e:	c6 c1       	rjmp	.+908    	; 0x48ec <vfprintf+0x3b0>
    4560:	9a e0       	ldi	r25, 0x0A	; 10
    4562:	89 2e       	mov	r8, r25
    4564:	1e 01       	movw	r2, r28
    4566:	08 94       	sec
    4568:	21 1c       	adc	r2, r1
    456a:	31 1c       	adc	r3, r1
    456c:	f3 01       	movw	r30, r6
    456e:	23 81       	ldd	r18, Z+3	; 0x03
    4570:	f2 01       	movw	r30, r4
    4572:	23 fd       	sbrc	r18, 3
    4574:	85 91       	lpm	r24, Z+
    4576:	23 ff       	sbrs	r18, 3
    4578:	81 91       	ld	r24, Z+
    457a:	2f 01       	movw	r4, r30
    457c:	88 23       	and	r24, r24
    457e:	09 f4       	brne	.+2      	; 0x4582 <vfprintf+0x46>
    4580:	b2 c1       	rjmp	.+868    	; 0x48e6 <vfprintf+0x3aa>
    4582:	85 32       	cpi	r24, 0x25	; 37
    4584:	39 f4       	brne	.+14     	; 0x4594 <vfprintf+0x58>
    4586:	23 fd       	sbrc	r18, 3
    4588:	85 91       	lpm	r24, Z+
    458a:	23 ff       	sbrs	r18, 3
    458c:	81 91       	ld	r24, Z+
    458e:	2f 01       	movw	r4, r30
    4590:	85 32       	cpi	r24, 0x25	; 37
    4592:	29 f4       	brne	.+10     	; 0x459e <vfprintf+0x62>
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	b3 01       	movw	r22, r6
    4598:	0e 94 91 24 	call	0x4922	; 0x4922 <fputc>
    459c:	e7 cf       	rjmp	.-50     	; 0x456c <vfprintf+0x30>
    459e:	98 2f       	mov	r25, r24
    45a0:	ff 24       	eor	r15, r15
    45a2:	ee 24       	eor	r14, r14
    45a4:	99 24       	eor	r9, r9
    45a6:	ff e1       	ldi	r31, 0x1F	; 31
    45a8:	ff 15       	cp	r31, r15
    45aa:	d0 f0       	brcs	.+52     	; 0x45e0 <vfprintf+0xa4>
    45ac:	9b 32       	cpi	r25, 0x2B	; 43
    45ae:	69 f0       	breq	.+26     	; 0x45ca <vfprintf+0x8e>
    45b0:	9c 32       	cpi	r25, 0x2C	; 44
    45b2:	28 f4       	brcc	.+10     	; 0x45be <vfprintf+0x82>
    45b4:	90 32       	cpi	r25, 0x20	; 32
    45b6:	59 f0       	breq	.+22     	; 0x45ce <vfprintf+0x92>
    45b8:	93 32       	cpi	r25, 0x23	; 35
    45ba:	91 f4       	brne	.+36     	; 0x45e0 <vfprintf+0xa4>
    45bc:	0e c0       	rjmp	.+28     	; 0x45da <vfprintf+0x9e>
    45be:	9d 32       	cpi	r25, 0x2D	; 45
    45c0:	49 f0       	breq	.+18     	; 0x45d4 <vfprintf+0x98>
    45c2:	90 33       	cpi	r25, 0x30	; 48
    45c4:	69 f4       	brne	.+26     	; 0x45e0 <vfprintf+0xa4>
    45c6:	41 e0       	ldi	r20, 0x01	; 1
    45c8:	24 c0       	rjmp	.+72     	; 0x4612 <vfprintf+0xd6>
    45ca:	52 e0       	ldi	r21, 0x02	; 2
    45cc:	f5 2a       	or	r15, r21
    45ce:	84 e0       	ldi	r24, 0x04	; 4
    45d0:	f8 2a       	or	r15, r24
    45d2:	28 c0       	rjmp	.+80     	; 0x4624 <vfprintf+0xe8>
    45d4:	98 e0       	ldi	r25, 0x08	; 8
    45d6:	f9 2a       	or	r15, r25
    45d8:	25 c0       	rjmp	.+74     	; 0x4624 <vfprintf+0xe8>
    45da:	e0 e1       	ldi	r30, 0x10	; 16
    45dc:	fe 2a       	or	r15, r30
    45de:	22 c0       	rjmp	.+68     	; 0x4624 <vfprintf+0xe8>
    45e0:	f7 fc       	sbrc	r15, 7
    45e2:	29 c0       	rjmp	.+82     	; 0x4636 <vfprintf+0xfa>
    45e4:	89 2f       	mov	r24, r25
    45e6:	80 53       	subi	r24, 0x30	; 48
    45e8:	8a 30       	cpi	r24, 0x0A	; 10
    45ea:	70 f4       	brcc	.+28     	; 0x4608 <vfprintf+0xcc>
    45ec:	f6 fe       	sbrs	r15, 6
    45ee:	05 c0       	rjmp	.+10     	; 0x45fa <vfprintf+0xbe>
    45f0:	98 9c       	mul	r9, r8
    45f2:	90 2c       	mov	r9, r0
    45f4:	11 24       	eor	r1, r1
    45f6:	98 0e       	add	r9, r24
    45f8:	15 c0       	rjmp	.+42     	; 0x4624 <vfprintf+0xe8>
    45fa:	e8 9c       	mul	r14, r8
    45fc:	e0 2c       	mov	r14, r0
    45fe:	11 24       	eor	r1, r1
    4600:	e8 0e       	add	r14, r24
    4602:	f0 e2       	ldi	r31, 0x20	; 32
    4604:	ff 2a       	or	r15, r31
    4606:	0e c0       	rjmp	.+28     	; 0x4624 <vfprintf+0xe8>
    4608:	9e 32       	cpi	r25, 0x2E	; 46
    460a:	29 f4       	brne	.+10     	; 0x4616 <vfprintf+0xda>
    460c:	f6 fc       	sbrc	r15, 6
    460e:	6b c1       	rjmp	.+726    	; 0x48e6 <vfprintf+0x3aa>
    4610:	40 e4       	ldi	r20, 0x40	; 64
    4612:	f4 2a       	or	r15, r20
    4614:	07 c0       	rjmp	.+14     	; 0x4624 <vfprintf+0xe8>
    4616:	9c 36       	cpi	r25, 0x6C	; 108
    4618:	19 f4       	brne	.+6      	; 0x4620 <vfprintf+0xe4>
    461a:	50 e8       	ldi	r21, 0x80	; 128
    461c:	f5 2a       	or	r15, r21
    461e:	02 c0       	rjmp	.+4      	; 0x4624 <vfprintf+0xe8>
    4620:	98 36       	cpi	r25, 0x68	; 104
    4622:	49 f4       	brne	.+18     	; 0x4636 <vfprintf+0xfa>
    4624:	f2 01       	movw	r30, r4
    4626:	23 fd       	sbrc	r18, 3
    4628:	95 91       	lpm	r25, Z+
    462a:	23 ff       	sbrs	r18, 3
    462c:	91 91       	ld	r25, Z+
    462e:	2f 01       	movw	r4, r30
    4630:	99 23       	and	r25, r25
    4632:	09 f0       	breq	.+2      	; 0x4636 <vfprintf+0xfa>
    4634:	b8 cf       	rjmp	.-144    	; 0x45a6 <vfprintf+0x6a>
    4636:	89 2f       	mov	r24, r25
    4638:	85 54       	subi	r24, 0x45	; 69
    463a:	83 30       	cpi	r24, 0x03	; 3
    463c:	18 f0       	brcs	.+6      	; 0x4644 <vfprintf+0x108>
    463e:	80 52       	subi	r24, 0x20	; 32
    4640:	83 30       	cpi	r24, 0x03	; 3
    4642:	38 f4       	brcc	.+14     	; 0x4652 <vfprintf+0x116>
    4644:	44 e0       	ldi	r20, 0x04	; 4
    4646:	50 e0       	ldi	r21, 0x00	; 0
    4648:	a4 0e       	add	r10, r20
    464a:	b5 1e       	adc	r11, r21
    464c:	5f e3       	ldi	r21, 0x3F	; 63
    464e:	59 83       	std	Y+1, r21	; 0x01
    4650:	0f c0       	rjmp	.+30     	; 0x4670 <vfprintf+0x134>
    4652:	93 36       	cpi	r25, 0x63	; 99
    4654:	31 f0       	breq	.+12     	; 0x4662 <vfprintf+0x126>
    4656:	93 37       	cpi	r25, 0x73	; 115
    4658:	79 f0       	breq	.+30     	; 0x4678 <vfprintf+0x13c>
    465a:	93 35       	cpi	r25, 0x53	; 83
    465c:	09 f0       	breq	.+2      	; 0x4660 <vfprintf+0x124>
    465e:	56 c0       	rjmp	.+172    	; 0x470c <vfprintf+0x1d0>
    4660:	20 c0       	rjmp	.+64     	; 0x46a2 <vfprintf+0x166>
    4662:	f5 01       	movw	r30, r10
    4664:	80 81       	ld	r24, Z
    4666:	89 83       	std	Y+1, r24	; 0x01
    4668:	42 e0       	ldi	r20, 0x02	; 2
    466a:	50 e0       	ldi	r21, 0x00	; 0
    466c:	a4 0e       	add	r10, r20
    466e:	b5 1e       	adc	r11, r21
    4670:	61 01       	movw	r12, r2
    4672:	01 e0       	ldi	r16, 0x01	; 1
    4674:	10 e0       	ldi	r17, 0x00	; 0
    4676:	12 c0       	rjmp	.+36     	; 0x469c <vfprintf+0x160>
    4678:	f5 01       	movw	r30, r10
    467a:	c0 80       	ld	r12, Z
    467c:	d1 80       	ldd	r13, Z+1	; 0x01
    467e:	f6 fc       	sbrc	r15, 6
    4680:	03 c0       	rjmp	.+6      	; 0x4688 <vfprintf+0x14c>
    4682:	6f ef       	ldi	r22, 0xFF	; 255
    4684:	7f ef       	ldi	r23, 0xFF	; 255
    4686:	02 c0       	rjmp	.+4      	; 0x468c <vfprintf+0x150>
    4688:	69 2d       	mov	r22, r9
    468a:	70 e0       	ldi	r23, 0x00	; 0
    468c:	42 e0       	ldi	r20, 0x02	; 2
    468e:	50 e0       	ldi	r21, 0x00	; 0
    4690:	a4 0e       	add	r10, r20
    4692:	b5 1e       	adc	r11, r21
    4694:	c6 01       	movw	r24, r12
    4696:	0e 94 86 24 	call	0x490c	; 0x490c <strnlen>
    469a:	8c 01       	movw	r16, r24
    469c:	5f e7       	ldi	r21, 0x7F	; 127
    469e:	f5 22       	and	r15, r21
    46a0:	14 c0       	rjmp	.+40     	; 0x46ca <vfprintf+0x18e>
    46a2:	f5 01       	movw	r30, r10
    46a4:	c0 80       	ld	r12, Z
    46a6:	d1 80       	ldd	r13, Z+1	; 0x01
    46a8:	f6 fc       	sbrc	r15, 6
    46aa:	03 c0       	rjmp	.+6      	; 0x46b2 <vfprintf+0x176>
    46ac:	6f ef       	ldi	r22, 0xFF	; 255
    46ae:	7f ef       	ldi	r23, 0xFF	; 255
    46b0:	02 c0       	rjmp	.+4      	; 0x46b6 <vfprintf+0x17a>
    46b2:	69 2d       	mov	r22, r9
    46b4:	70 e0       	ldi	r23, 0x00	; 0
    46b6:	42 e0       	ldi	r20, 0x02	; 2
    46b8:	50 e0       	ldi	r21, 0x00	; 0
    46ba:	a4 0e       	add	r10, r20
    46bc:	b5 1e       	adc	r11, r21
    46be:	c6 01       	movw	r24, r12
    46c0:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <strnlen_P>
    46c4:	8c 01       	movw	r16, r24
    46c6:	50 e8       	ldi	r21, 0x80	; 128
    46c8:	f5 2a       	or	r15, r21
    46ca:	f3 fe       	sbrs	r15, 3
    46cc:	07 c0       	rjmp	.+14     	; 0x46dc <vfprintf+0x1a0>
    46ce:	1a c0       	rjmp	.+52     	; 0x4704 <vfprintf+0x1c8>
    46d0:	80 e2       	ldi	r24, 0x20	; 32
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	b3 01       	movw	r22, r6
    46d6:	0e 94 91 24 	call	0x4922	; 0x4922 <fputc>
    46da:	ea 94       	dec	r14
    46dc:	8e 2d       	mov	r24, r14
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	08 17       	cp	r16, r24
    46e2:	19 07       	cpc	r17, r25
    46e4:	a8 f3       	brcs	.-22     	; 0x46d0 <vfprintf+0x194>
    46e6:	0e c0       	rjmp	.+28     	; 0x4704 <vfprintf+0x1c8>
    46e8:	f6 01       	movw	r30, r12
    46ea:	f7 fc       	sbrc	r15, 7
    46ec:	85 91       	lpm	r24, Z+
    46ee:	f7 fe       	sbrs	r15, 7
    46f0:	81 91       	ld	r24, Z+
    46f2:	6f 01       	movw	r12, r30
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	b3 01       	movw	r22, r6
    46f8:	0e 94 91 24 	call	0x4922	; 0x4922 <fputc>
    46fc:	e1 10       	cpse	r14, r1
    46fe:	ea 94       	dec	r14
    4700:	01 50       	subi	r16, 0x01	; 1
    4702:	10 40       	sbci	r17, 0x00	; 0
    4704:	01 15       	cp	r16, r1
    4706:	11 05       	cpc	r17, r1
    4708:	79 f7       	brne	.-34     	; 0x46e8 <vfprintf+0x1ac>
    470a:	ea c0       	rjmp	.+468    	; 0x48e0 <vfprintf+0x3a4>
    470c:	94 36       	cpi	r25, 0x64	; 100
    470e:	11 f0       	breq	.+4      	; 0x4714 <vfprintf+0x1d8>
    4710:	99 36       	cpi	r25, 0x69	; 105
    4712:	69 f5       	brne	.+90     	; 0x476e <vfprintf+0x232>
    4714:	f7 fe       	sbrs	r15, 7
    4716:	08 c0       	rjmp	.+16     	; 0x4728 <vfprintf+0x1ec>
    4718:	f5 01       	movw	r30, r10
    471a:	20 81       	ld	r18, Z
    471c:	31 81       	ldd	r19, Z+1	; 0x01
    471e:	42 81       	ldd	r20, Z+2	; 0x02
    4720:	53 81       	ldd	r21, Z+3	; 0x03
    4722:	84 e0       	ldi	r24, 0x04	; 4
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	0a c0       	rjmp	.+20     	; 0x473c <vfprintf+0x200>
    4728:	f5 01       	movw	r30, r10
    472a:	80 81       	ld	r24, Z
    472c:	91 81       	ldd	r25, Z+1	; 0x01
    472e:	9c 01       	movw	r18, r24
    4730:	44 27       	eor	r20, r20
    4732:	37 fd       	sbrc	r19, 7
    4734:	40 95       	com	r20
    4736:	54 2f       	mov	r21, r20
    4738:	82 e0       	ldi	r24, 0x02	; 2
    473a:	90 e0       	ldi	r25, 0x00	; 0
    473c:	a8 0e       	add	r10, r24
    473e:	b9 1e       	adc	r11, r25
    4740:	9f e6       	ldi	r25, 0x6F	; 111
    4742:	f9 22       	and	r15, r25
    4744:	57 ff       	sbrs	r21, 7
    4746:	09 c0       	rjmp	.+18     	; 0x475a <vfprintf+0x21e>
    4748:	50 95       	com	r21
    474a:	40 95       	com	r20
    474c:	30 95       	com	r19
    474e:	21 95       	neg	r18
    4750:	3f 4f       	sbci	r19, 0xFF	; 255
    4752:	4f 4f       	sbci	r20, 0xFF	; 255
    4754:	5f 4f       	sbci	r21, 0xFF	; 255
    4756:	e0 e8       	ldi	r30, 0x80	; 128
    4758:	fe 2a       	or	r15, r30
    475a:	ca 01       	movw	r24, r20
    475c:	b9 01       	movw	r22, r18
    475e:	a1 01       	movw	r20, r2
    4760:	2a e0       	ldi	r18, 0x0A	; 10
    4762:	30 e0       	ldi	r19, 0x00	; 0
    4764:	0e 94 bd 24 	call	0x497a	; 0x497a <__ultoa_invert>
    4768:	d8 2e       	mov	r13, r24
    476a:	d2 18       	sub	r13, r2
    476c:	40 c0       	rjmp	.+128    	; 0x47ee <vfprintf+0x2b2>
    476e:	95 37       	cpi	r25, 0x75	; 117
    4770:	29 f4       	brne	.+10     	; 0x477c <vfprintf+0x240>
    4772:	1f 2d       	mov	r17, r15
    4774:	1f 7e       	andi	r17, 0xEF	; 239
    4776:	2a e0       	ldi	r18, 0x0A	; 10
    4778:	30 e0       	ldi	r19, 0x00	; 0
    477a:	1d c0       	rjmp	.+58     	; 0x47b6 <vfprintf+0x27a>
    477c:	1f 2d       	mov	r17, r15
    477e:	19 7f       	andi	r17, 0xF9	; 249
    4780:	9f 36       	cpi	r25, 0x6F	; 111
    4782:	61 f0       	breq	.+24     	; 0x479c <vfprintf+0x260>
    4784:	90 37       	cpi	r25, 0x70	; 112
    4786:	20 f4       	brcc	.+8      	; 0x4790 <vfprintf+0x254>
    4788:	98 35       	cpi	r25, 0x58	; 88
    478a:	09 f0       	breq	.+2      	; 0x478e <vfprintf+0x252>
    478c:	ac c0       	rjmp	.+344    	; 0x48e6 <vfprintf+0x3aa>
    478e:	0f c0       	rjmp	.+30     	; 0x47ae <vfprintf+0x272>
    4790:	90 37       	cpi	r25, 0x70	; 112
    4792:	39 f0       	breq	.+14     	; 0x47a2 <vfprintf+0x266>
    4794:	98 37       	cpi	r25, 0x78	; 120
    4796:	09 f0       	breq	.+2      	; 0x479a <vfprintf+0x25e>
    4798:	a6 c0       	rjmp	.+332    	; 0x48e6 <vfprintf+0x3aa>
    479a:	04 c0       	rjmp	.+8      	; 0x47a4 <vfprintf+0x268>
    479c:	28 e0       	ldi	r18, 0x08	; 8
    479e:	30 e0       	ldi	r19, 0x00	; 0
    47a0:	0a c0       	rjmp	.+20     	; 0x47b6 <vfprintf+0x27a>
    47a2:	10 61       	ori	r17, 0x10	; 16
    47a4:	14 fd       	sbrc	r17, 4
    47a6:	14 60       	ori	r17, 0x04	; 4
    47a8:	20 e1       	ldi	r18, 0x10	; 16
    47aa:	30 e0       	ldi	r19, 0x00	; 0
    47ac:	04 c0       	rjmp	.+8      	; 0x47b6 <vfprintf+0x27a>
    47ae:	14 fd       	sbrc	r17, 4
    47b0:	16 60       	ori	r17, 0x06	; 6
    47b2:	20 e1       	ldi	r18, 0x10	; 16
    47b4:	32 e0       	ldi	r19, 0x02	; 2
    47b6:	17 ff       	sbrs	r17, 7
    47b8:	08 c0       	rjmp	.+16     	; 0x47ca <vfprintf+0x28e>
    47ba:	f5 01       	movw	r30, r10
    47bc:	60 81       	ld	r22, Z
    47be:	71 81       	ldd	r23, Z+1	; 0x01
    47c0:	82 81       	ldd	r24, Z+2	; 0x02
    47c2:	93 81       	ldd	r25, Z+3	; 0x03
    47c4:	44 e0       	ldi	r20, 0x04	; 4
    47c6:	50 e0       	ldi	r21, 0x00	; 0
    47c8:	08 c0       	rjmp	.+16     	; 0x47da <vfprintf+0x29e>
    47ca:	f5 01       	movw	r30, r10
    47cc:	80 81       	ld	r24, Z
    47ce:	91 81       	ldd	r25, Z+1	; 0x01
    47d0:	bc 01       	movw	r22, r24
    47d2:	80 e0       	ldi	r24, 0x00	; 0
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	42 e0       	ldi	r20, 0x02	; 2
    47d8:	50 e0       	ldi	r21, 0x00	; 0
    47da:	a4 0e       	add	r10, r20
    47dc:	b5 1e       	adc	r11, r21
    47de:	a1 01       	movw	r20, r2
    47e0:	0e 94 bd 24 	call	0x497a	; 0x497a <__ultoa_invert>
    47e4:	d8 2e       	mov	r13, r24
    47e6:	d2 18       	sub	r13, r2
    47e8:	8f e7       	ldi	r24, 0x7F	; 127
    47ea:	f8 2e       	mov	r15, r24
    47ec:	f1 22       	and	r15, r17
    47ee:	f6 fe       	sbrs	r15, 6
    47f0:	0b c0       	rjmp	.+22     	; 0x4808 <vfprintf+0x2cc>
    47f2:	5e ef       	ldi	r21, 0xFE	; 254
    47f4:	f5 22       	and	r15, r21
    47f6:	d9 14       	cp	r13, r9
    47f8:	38 f4       	brcc	.+14     	; 0x4808 <vfprintf+0x2cc>
    47fa:	f4 fe       	sbrs	r15, 4
    47fc:	07 c0       	rjmp	.+14     	; 0x480c <vfprintf+0x2d0>
    47fe:	f2 fc       	sbrc	r15, 2
    4800:	05 c0       	rjmp	.+10     	; 0x480c <vfprintf+0x2d0>
    4802:	8f ee       	ldi	r24, 0xEF	; 239
    4804:	f8 22       	and	r15, r24
    4806:	02 c0       	rjmp	.+4      	; 0x480c <vfprintf+0x2d0>
    4808:	1d 2d       	mov	r17, r13
    480a:	01 c0       	rjmp	.+2      	; 0x480e <vfprintf+0x2d2>
    480c:	19 2d       	mov	r17, r9
    480e:	f4 fe       	sbrs	r15, 4
    4810:	0d c0       	rjmp	.+26     	; 0x482c <vfprintf+0x2f0>
    4812:	fe 01       	movw	r30, r28
    4814:	ed 0d       	add	r30, r13
    4816:	f1 1d       	adc	r31, r1
    4818:	80 81       	ld	r24, Z
    481a:	80 33       	cpi	r24, 0x30	; 48
    481c:	19 f4       	brne	.+6      	; 0x4824 <vfprintf+0x2e8>
    481e:	99 ee       	ldi	r25, 0xE9	; 233
    4820:	f9 22       	and	r15, r25
    4822:	08 c0       	rjmp	.+16     	; 0x4834 <vfprintf+0x2f8>
    4824:	1f 5f       	subi	r17, 0xFF	; 255
    4826:	f2 fe       	sbrs	r15, 2
    4828:	05 c0       	rjmp	.+10     	; 0x4834 <vfprintf+0x2f8>
    482a:	03 c0       	rjmp	.+6      	; 0x4832 <vfprintf+0x2f6>
    482c:	8f 2d       	mov	r24, r15
    482e:	86 78       	andi	r24, 0x86	; 134
    4830:	09 f0       	breq	.+2      	; 0x4834 <vfprintf+0x2f8>
    4832:	1f 5f       	subi	r17, 0xFF	; 255
    4834:	0f 2d       	mov	r16, r15
    4836:	f3 fc       	sbrc	r15, 3
    4838:	14 c0       	rjmp	.+40     	; 0x4862 <vfprintf+0x326>
    483a:	f0 fe       	sbrs	r15, 0
    483c:	0f c0       	rjmp	.+30     	; 0x485c <vfprintf+0x320>
    483e:	1e 15       	cp	r17, r14
    4840:	10 f0       	brcs	.+4      	; 0x4846 <vfprintf+0x30a>
    4842:	9d 2c       	mov	r9, r13
    4844:	0b c0       	rjmp	.+22     	; 0x485c <vfprintf+0x320>
    4846:	9d 2c       	mov	r9, r13
    4848:	9e 0c       	add	r9, r14
    484a:	91 1a       	sub	r9, r17
    484c:	1e 2d       	mov	r17, r14
    484e:	06 c0       	rjmp	.+12     	; 0x485c <vfprintf+0x320>
    4850:	80 e2       	ldi	r24, 0x20	; 32
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	b3 01       	movw	r22, r6
    4856:	0e 94 91 24 	call	0x4922	; 0x4922 <fputc>
    485a:	1f 5f       	subi	r17, 0xFF	; 255
    485c:	1e 15       	cp	r17, r14
    485e:	c0 f3       	brcs	.-16     	; 0x4850 <vfprintf+0x314>
    4860:	04 c0       	rjmp	.+8      	; 0x486a <vfprintf+0x32e>
    4862:	1e 15       	cp	r17, r14
    4864:	10 f4       	brcc	.+4      	; 0x486a <vfprintf+0x32e>
    4866:	e1 1a       	sub	r14, r17
    4868:	01 c0       	rjmp	.+2      	; 0x486c <vfprintf+0x330>
    486a:	ee 24       	eor	r14, r14
    486c:	04 ff       	sbrs	r16, 4
    486e:	0f c0       	rjmp	.+30     	; 0x488e <vfprintf+0x352>
    4870:	80 e3       	ldi	r24, 0x30	; 48
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	b3 01       	movw	r22, r6
    4876:	0e 94 91 24 	call	0x4922	; 0x4922 <fputc>
    487a:	02 ff       	sbrs	r16, 2
    487c:	1d c0       	rjmp	.+58     	; 0x48b8 <vfprintf+0x37c>
    487e:	01 fd       	sbrc	r16, 1
    4880:	03 c0       	rjmp	.+6      	; 0x4888 <vfprintf+0x34c>
    4882:	88 e7       	ldi	r24, 0x78	; 120
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	0e c0       	rjmp	.+28     	; 0x48a4 <vfprintf+0x368>
    4888:	88 e5       	ldi	r24, 0x58	; 88
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	0b c0       	rjmp	.+22     	; 0x48a4 <vfprintf+0x368>
    488e:	80 2f       	mov	r24, r16
    4890:	86 78       	andi	r24, 0x86	; 134
    4892:	91 f0       	breq	.+36     	; 0x48b8 <vfprintf+0x37c>
    4894:	01 ff       	sbrs	r16, 1
    4896:	02 c0       	rjmp	.+4      	; 0x489c <vfprintf+0x360>
    4898:	8b e2       	ldi	r24, 0x2B	; 43
    489a:	01 c0       	rjmp	.+2      	; 0x489e <vfprintf+0x362>
    489c:	80 e2       	ldi	r24, 0x20	; 32
    489e:	f7 fc       	sbrc	r15, 7
    48a0:	8d e2       	ldi	r24, 0x2D	; 45
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	b3 01       	movw	r22, r6
    48a6:	0e 94 91 24 	call	0x4922	; 0x4922 <fputc>
    48aa:	06 c0       	rjmp	.+12     	; 0x48b8 <vfprintf+0x37c>
    48ac:	80 e3       	ldi	r24, 0x30	; 48
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	b3 01       	movw	r22, r6
    48b2:	0e 94 91 24 	call	0x4922	; 0x4922 <fputc>
    48b6:	9a 94       	dec	r9
    48b8:	d9 14       	cp	r13, r9
    48ba:	c0 f3       	brcs	.-16     	; 0x48ac <vfprintf+0x370>
    48bc:	da 94       	dec	r13
    48be:	f1 01       	movw	r30, r2
    48c0:	ed 0d       	add	r30, r13
    48c2:	f1 1d       	adc	r31, r1
    48c4:	80 81       	ld	r24, Z
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	b3 01       	movw	r22, r6
    48ca:	0e 94 91 24 	call	0x4922	; 0x4922 <fputc>
    48ce:	dd 20       	and	r13, r13
    48d0:	a9 f7       	brne	.-22     	; 0x48bc <vfprintf+0x380>
    48d2:	06 c0       	rjmp	.+12     	; 0x48e0 <vfprintf+0x3a4>
    48d4:	80 e2       	ldi	r24, 0x20	; 32
    48d6:	90 e0       	ldi	r25, 0x00	; 0
    48d8:	b3 01       	movw	r22, r6
    48da:	0e 94 91 24 	call	0x4922	; 0x4922 <fputc>
    48de:	ea 94       	dec	r14
    48e0:	ee 20       	and	r14, r14
    48e2:	c1 f7       	brne	.-16     	; 0x48d4 <vfprintf+0x398>
    48e4:	43 ce       	rjmp	.-890    	; 0x456c <vfprintf+0x30>
    48e6:	f3 01       	movw	r30, r6
    48e8:	66 81       	ldd	r22, Z+6	; 0x06
    48ea:	77 81       	ldd	r23, Z+7	; 0x07
    48ec:	cb 01       	movw	r24, r22
    48ee:	2b 96       	adiw	r28, 0x0b	; 11
    48f0:	e2 e1       	ldi	r30, 0x12	; 18
    48f2:	0c 94 78 25 	jmp	0x4af0	; 0x4af0 <__epilogue_restores__>

000048f6 <strnlen_P>:
    48f6:	fc 01       	movw	r30, r24
    48f8:	05 90       	lpm	r0, Z+
    48fa:	61 50       	subi	r22, 0x01	; 1
    48fc:	70 40       	sbci	r23, 0x00	; 0
    48fe:	01 10       	cpse	r0, r1
    4900:	d8 f7       	brcc	.-10     	; 0x48f8 <strnlen_P+0x2>
    4902:	80 95       	com	r24
    4904:	90 95       	com	r25
    4906:	8e 0f       	add	r24, r30
    4908:	9f 1f       	adc	r25, r31
    490a:	08 95       	ret

0000490c <strnlen>:
    490c:	fc 01       	movw	r30, r24
    490e:	61 50       	subi	r22, 0x01	; 1
    4910:	70 40       	sbci	r23, 0x00	; 0
    4912:	01 90       	ld	r0, Z+
    4914:	01 10       	cpse	r0, r1
    4916:	d8 f7       	brcc	.-10     	; 0x490e <strnlen+0x2>
    4918:	80 95       	com	r24
    491a:	90 95       	com	r25
    491c:	8e 0f       	add	r24, r30
    491e:	9f 1f       	adc	r25, r31
    4920:	08 95       	ret

00004922 <fputc>:
    4922:	0f 93       	push	r16
    4924:	1f 93       	push	r17
    4926:	cf 93       	push	r28
    4928:	df 93       	push	r29
    492a:	8c 01       	movw	r16, r24
    492c:	eb 01       	movw	r28, r22
    492e:	8b 81       	ldd	r24, Y+3	; 0x03
    4930:	81 ff       	sbrs	r24, 1
    4932:	1b c0       	rjmp	.+54     	; 0x496a <fputc+0x48>
    4934:	82 ff       	sbrs	r24, 2
    4936:	0d c0       	rjmp	.+26     	; 0x4952 <fputc+0x30>
    4938:	2e 81       	ldd	r18, Y+6	; 0x06
    493a:	3f 81       	ldd	r19, Y+7	; 0x07
    493c:	8c 81       	ldd	r24, Y+4	; 0x04
    493e:	9d 81       	ldd	r25, Y+5	; 0x05
    4940:	28 17       	cp	r18, r24
    4942:	39 07       	cpc	r19, r25
    4944:	64 f4       	brge	.+24     	; 0x495e <fputc+0x3c>
    4946:	e8 81       	ld	r30, Y
    4948:	f9 81       	ldd	r31, Y+1	; 0x01
    494a:	01 93       	st	Z+, r16
    494c:	f9 83       	std	Y+1, r31	; 0x01
    494e:	e8 83       	st	Y, r30
    4950:	06 c0       	rjmp	.+12     	; 0x495e <fputc+0x3c>
    4952:	e8 85       	ldd	r30, Y+8	; 0x08
    4954:	f9 85       	ldd	r31, Y+9	; 0x09
    4956:	80 2f       	mov	r24, r16
    4958:	09 95       	icall
    495a:	89 2b       	or	r24, r25
    495c:	31 f4       	brne	.+12     	; 0x496a <fputc+0x48>
    495e:	8e 81       	ldd	r24, Y+6	; 0x06
    4960:	9f 81       	ldd	r25, Y+7	; 0x07
    4962:	01 96       	adiw	r24, 0x01	; 1
    4964:	9f 83       	std	Y+7, r25	; 0x07
    4966:	8e 83       	std	Y+6, r24	; 0x06
    4968:	02 c0       	rjmp	.+4      	; 0x496e <fputc+0x4c>
    496a:	0f ef       	ldi	r16, 0xFF	; 255
    496c:	1f ef       	ldi	r17, 0xFF	; 255
    496e:	c8 01       	movw	r24, r16
    4970:	df 91       	pop	r29
    4972:	cf 91       	pop	r28
    4974:	1f 91       	pop	r17
    4976:	0f 91       	pop	r16
    4978:	08 95       	ret

0000497a <__ultoa_invert>:
    497a:	fa 01       	movw	r30, r20
    497c:	aa 27       	eor	r26, r26
    497e:	28 30       	cpi	r18, 0x08	; 8
    4980:	51 f1       	breq	.+84     	; 0x49d6 <__ultoa_invert+0x5c>
    4982:	20 31       	cpi	r18, 0x10	; 16
    4984:	81 f1       	breq	.+96     	; 0x49e6 <__ultoa_invert+0x6c>
    4986:	e8 94       	clt
    4988:	6f 93       	push	r22
    498a:	6e 7f       	andi	r22, 0xFE	; 254
    498c:	6e 5f       	subi	r22, 0xFE	; 254
    498e:	7f 4f       	sbci	r23, 0xFF	; 255
    4990:	8f 4f       	sbci	r24, 0xFF	; 255
    4992:	9f 4f       	sbci	r25, 0xFF	; 255
    4994:	af 4f       	sbci	r26, 0xFF	; 255
    4996:	b1 e0       	ldi	r27, 0x01	; 1
    4998:	3e d0       	rcall	.+124    	; 0x4a16 <__ultoa_invert+0x9c>
    499a:	b4 e0       	ldi	r27, 0x04	; 4
    499c:	3c d0       	rcall	.+120    	; 0x4a16 <__ultoa_invert+0x9c>
    499e:	67 0f       	add	r22, r23
    49a0:	78 1f       	adc	r23, r24
    49a2:	89 1f       	adc	r24, r25
    49a4:	9a 1f       	adc	r25, r26
    49a6:	a1 1d       	adc	r26, r1
    49a8:	68 0f       	add	r22, r24
    49aa:	79 1f       	adc	r23, r25
    49ac:	8a 1f       	adc	r24, r26
    49ae:	91 1d       	adc	r25, r1
    49b0:	a1 1d       	adc	r26, r1
    49b2:	6a 0f       	add	r22, r26
    49b4:	71 1d       	adc	r23, r1
    49b6:	81 1d       	adc	r24, r1
    49b8:	91 1d       	adc	r25, r1
    49ba:	a1 1d       	adc	r26, r1
    49bc:	20 d0       	rcall	.+64     	; 0x49fe <__ultoa_invert+0x84>
    49be:	09 f4       	brne	.+2      	; 0x49c2 <__ultoa_invert+0x48>
    49c0:	68 94       	set
    49c2:	3f 91       	pop	r19
    49c4:	2a e0       	ldi	r18, 0x0A	; 10
    49c6:	26 9f       	mul	r18, r22
    49c8:	11 24       	eor	r1, r1
    49ca:	30 19       	sub	r19, r0
    49cc:	30 5d       	subi	r19, 0xD0	; 208
    49ce:	31 93       	st	Z+, r19
    49d0:	de f6       	brtc	.-74     	; 0x4988 <__ultoa_invert+0xe>
    49d2:	cf 01       	movw	r24, r30
    49d4:	08 95       	ret
    49d6:	46 2f       	mov	r20, r22
    49d8:	47 70       	andi	r20, 0x07	; 7
    49da:	40 5d       	subi	r20, 0xD0	; 208
    49dc:	41 93       	st	Z+, r20
    49de:	b3 e0       	ldi	r27, 0x03	; 3
    49e0:	0f d0       	rcall	.+30     	; 0x4a00 <__ultoa_invert+0x86>
    49e2:	c9 f7       	brne	.-14     	; 0x49d6 <__ultoa_invert+0x5c>
    49e4:	f6 cf       	rjmp	.-20     	; 0x49d2 <__ultoa_invert+0x58>
    49e6:	46 2f       	mov	r20, r22
    49e8:	4f 70       	andi	r20, 0x0F	; 15
    49ea:	40 5d       	subi	r20, 0xD0	; 208
    49ec:	4a 33       	cpi	r20, 0x3A	; 58
    49ee:	18 f0       	brcs	.+6      	; 0x49f6 <__ultoa_invert+0x7c>
    49f0:	49 5d       	subi	r20, 0xD9	; 217
    49f2:	31 fd       	sbrc	r19, 1
    49f4:	40 52       	subi	r20, 0x20	; 32
    49f6:	41 93       	st	Z+, r20
    49f8:	02 d0       	rcall	.+4      	; 0x49fe <__ultoa_invert+0x84>
    49fa:	a9 f7       	brne	.-22     	; 0x49e6 <__ultoa_invert+0x6c>
    49fc:	ea cf       	rjmp	.-44     	; 0x49d2 <__ultoa_invert+0x58>
    49fe:	b4 e0       	ldi	r27, 0x04	; 4
    4a00:	a6 95       	lsr	r26
    4a02:	97 95       	ror	r25
    4a04:	87 95       	ror	r24
    4a06:	77 95       	ror	r23
    4a08:	67 95       	ror	r22
    4a0a:	ba 95       	dec	r27
    4a0c:	c9 f7       	brne	.-14     	; 0x4a00 <__ultoa_invert+0x86>
    4a0e:	00 97       	sbiw	r24, 0x00	; 0
    4a10:	61 05       	cpc	r22, r1
    4a12:	71 05       	cpc	r23, r1
    4a14:	08 95       	ret
    4a16:	9b 01       	movw	r18, r22
    4a18:	ac 01       	movw	r20, r24
    4a1a:	0a 2e       	mov	r0, r26
    4a1c:	06 94       	lsr	r0
    4a1e:	57 95       	ror	r21
    4a20:	47 95       	ror	r20
    4a22:	37 95       	ror	r19
    4a24:	27 95       	ror	r18
    4a26:	ba 95       	dec	r27
    4a28:	c9 f7       	brne	.-14     	; 0x4a1c <__ultoa_invert+0xa2>
    4a2a:	62 0f       	add	r22, r18
    4a2c:	73 1f       	adc	r23, r19
    4a2e:	84 1f       	adc	r24, r20
    4a30:	95 1f       	adc	r25, r21
    4a32:	a0 1d       	adc	r26, r0
    4a34:	08 95       	ret

00004a36 <__mulsi3>:
    4a36:	62 9f       	mul	r22, r18
    4a38:	d0 01       	movw	r26, r0
    4a3a:	73 9f       	mul	r23, r19
    4a3c:	f0 01       	movw	r30, r0
    4a3e:	82 9f       	mul	r24, r18
    4a40:	e0 0d       	add	r30, r0
    4a42:	f1 1d       	adc	r31, r1
    4a44:	64 9f       	mul	r22, r20
    4a46:	e0 0d       	add	r30, r0
    4a48:	f1 1d       	adc	r31, r1
    4a4a:	92 9f       	mul	r25, r18
    4a4c:	f0 0d       	add	r31, r0
    4a4e:	83 9f       	mul	r24, r19
    4a50:	f0 0d       	add	r31, r0
    4a52:	74 9f       	mul	r23, r20
    4a54:	f0 0d       	add	r31, r0
    4a56:	65 9f       	mul	r22, r21
    4a58:	f0 0d       	add	r31, r0
    4a5a:	99 27       	eor	r25, r25
    4a5c:	72 9f       	mul	r23, r18
    4a5e:	b0 0d       	add	r27, r0
    4a60:	e1 1d       	adc	r30, r1
    4a62:	f9 1f       	adc	r31, r25
    4a64:	63 9f       	mul	r22, r19
    4a66:	b0 0d       	add	r27, r0
    4a68:	e1 1d       	adc	r30, r1
    4a6a:	f9 1f       	adc	r31, r25
    4a6c:	bd 01       	movw	r22, r26
    4a6e:	cf 01       	movw	r24, r30
    4a70:	11 24       	eor	r1, r1
    4a72:	08 95       	ret

00004a74 <__udivmodsi4>:
    4a74:	a1 e2       	ldi	r26, 0x21	; 33
    4a76:	1a 2e       	mov	r1, r26
    4a78:	aa 1b       	sub	r26, r26
    4a7a:	bb 1b       	sub	r27, r27
    4a7c:	fd 01       	movw	r30, r26
    4a7e:	0d c0       	rjmp	.+26     	; 0x4a9a <__udivmodsi4_ep>

00004a80 <__udivmodsi4_loop>:
    4a80:	aa 1f       	adc	r26, r26
    4a82:	bb 1f       	adc	r27, r27
    4a84:	ee 1f       	adc	r30, r30
    4a86:	ff 1f       	adc	r31, r31
    4a88:	a2 17       	cp	r26, r18
    4a8a:	b3 07       	cpc	r27, r19
    4a8c:	e4 07       	cpc	r30, r20
    4a8e:	f5 07       	cpc	r31, r21
    4a90:	20 f0       	brcs	.+8      	; 0x4a9a <__udivmodsi4_ep>
    4a92:	a2 1b       	sub	r26, r18
    4a94:	b3 0b       	sbc	r27, r19
    4a96:	e4 0b       	sbc	r30, r20
    4a98:	f5 0b       	sbc	r31, r21

00004a9a <__udivmodsi4_ep>:
    4a9a:	66 1f       	adc	r22, r22
    4a9c:	77 1f       	adc	r23, r23
    4a9e:	88 1f       	adc	r24, r24
    4aa0:	99 1f       	adc	r25, r25
    4aa2:	1a 94       	dec	r1
    4aa4:	69 f7       	brne	.-38     	; 0x4a80 <__udivmodsi4_loop>
    4aa6:	60 95       	com	r22
    4aa8:	70 95       	com	r23
    4aaa:	80 95       	com	r24
    4aac:	90 95       	com	r25
    4aae:	9b 01       	movw	r18, r22
    4ab0:	ac 01       	movw	r20, r24
    4ab2:	bd 01       	movw	r22, r26
    4ab4:	cf 01       	movw	r24, r30
    4ab6:	08 95       	ret

00004ab8 <__prologue_saves__>:
    4ab8:	2f 92       	push	r2
    4aba:	3f 92       	push	r3
    4abc:	4f 92       	push	r4
    4abe:	5f 92       	push	r5
    4ac0:	6f 92       	push	r6
    4ac2:	7f 92       	push	r7
    4ac4:	8f 92       	push	r8
    4ac6:	9f 92       	push	r9
    4ac8:	af 92       	push	r10
    4aca:	bf 92       	push	r11
    4acc:	cf 92       	push	r12
    4ace:	df 92       	push	r13
    4ad0:	ef 92       	push	r14
    4ad2:	ff 92       	push	r15
    4ad4:	0f 93       	push	r16
    4ad6:	1f 93       	push	r17
    4ad8:	cf 93       	push	r28
    4ada:	df 93       	push	r29
    4adc:	cd b7       	in	r28, 0x3d	; 61
    4ade:	de b7       	in	r29, 0x3e	; 62
    4ae0:	ca 1b       	sub	r28, r26
    4ae2:	db 0b       	sbc	r29, r27
    4ae4:	0f b6       	in	r0, 0x3f	; 63
    4ae6:	f8 94       	cli
    4ae8:	de bf       	out	0x3e, r29	; 62
    4aea:	0f be       	out	0x3f, r0	; 63
    4aec:	cd bf       	out	0x3d, r28	; 61
    4aee:	09 94       	ijmp

00004af0 <__epilogue_restores__>:
    4af0:	2a 88       	ldd	r2, Y+18	; 0x12
    4af2:	39 88       	ldd	r3, Y+17	; 0x11
    4af4:	48 88       	ldd	r4, Y+16	; 0x10
    4af6:	5f 84       	ldd	r5, Y+15	; 0x0f
    4af8:	6e 84       	ldd	r6, Y+14	; 0x0e
    4afa:	7d 84       	ldd	r7, Y+13	; 0x0d
    4afc:	8c 84       	ldd	r8, Y+12	; 0x0c
    4afe:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b00:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b02:	b9 84       	ldd	r11, Y+9	; 0x09
    4b04:	c8 84       	ldd	r12, Y+8	; 0x08
    4b06:	df 80       	ldd	r13, Y+7	; 0x07
    4b08:	ee 80       	ldd	r14, Y+6	; 0x06
    4b0a:	fd 80       	ldd	r15, Y+5	; 0x05
    4b0c:	0c 81       	ldd	r16, Y+4	; 0x04
    4b0e:	1b 81       	ldd	r17, Y+3	; 0x03
    4b10:	aa 81       	ldd	r26, Y+2	; 0x02
    4b12:	b9 81       	ldd	r27, Y+1	; 0x01
    4b14:	ce 0f       	add	r28, r30
    4b16:	d1 1d       	adc	r29, r1
    4b18:	0f b6       	in	r0, 0x3f	; 63
    4b1a:	f8 94       	cli
    4b1c:	de bf       	out	0x3e, r29	; 62
    4b1e:	0f be       	out	0x3f, r0	; 63
    4b20:	cd bf       	out	0x3d, r28	; 61
    4b22:	ed 01       	movw	r28, r26
    4b24:	08 95       	ret

00004b26 <_exit>:
    4b26:	f8 94       	cli

00004b28 <__stop_program>:
    4b28:	ff cf       	rjmp	.-2      	; 0x4b28 <__stop_program>
