
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002d  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000368  00000000  00000000  000001b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000132  00000000  00000000  0000051d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000288  00000000  00000000  0000064f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000008d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000011f  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000016f  00000000  00000000  00000a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000c0  00000000  00000000  00000b96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 40 00 	call	0x80	; 0x80 <main>
  64:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_WriteRead>:
unsigned char SPI_WriteRead(unsigned char dataout)
{
  unsigned char datain;

  // Start transmission (MOSI)
  SPDR = dataout;
  6c:	8f b9       	out	0x0f, r24	; 15

  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
  6e:	77 9b       	sbis	0x0e, 7	; 14
  70:	fe cf       	rjmp	.-4      	; 0x6e <SPI_WriteRead+0x2>

  // Get return Value;
  datain = SPDR;
  72:	8f b1       	in	r24, 0x0f	; 15

  // Latch the Output using rising pulse to the RCK Pin
  SPI_PORT |= (1<<SPI_CS);
  74:	c4 9a       	sbi	0x18, 4	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  76:	92 e0       	ldi	r25, 0x02	; 2
  78:	9a 95       	dec	r25
  7a:	f1 f7       	brne	.-4      	; 0x78 <SPI_WriteRead+0xc>

  _delay_us(1);             // Hold pulse for 1 micro second

  // Disable Latch
  SPI_PORT &= ~(1<<SPI_CS);
  7c:	c4 98       	cbi	0x18, 4	; 24

  // Return Serial In Value (MISO)
  return datain;
}
  7e:	08 95       	ret

00000080 <main>:
int main(void)
{
  unsigned char cnt;

  // Set the PORTD as Output:
  DDRD=0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	81 bb       	out	0x11, r24	; 17
  PORTD=0x00;
  84:	12 ba       	out	0x12, r1	; 18

  // Initial the AVR ATMega168 SPI Peripheral

  // Set MOSI and SCK as output, others as input
  SPI_DDR = (1<<PB3)|(1<<PB5)|(1<<PB2);
  86:	8c e2       	ldi	r24, 0x2C	; 44
  88:	87 bb       	out	0x17, r24	; 23

  // Latch Disable (RCK Low)
  SPI_PORT &= ~(1<<SPI_CS);
  8a:	c4 98       	cbi	0x18, 4	; 24

  // Enable SPI, Master, set clock rate fck/2 (maximum)
  SPCR = (1<<SPE)|(1<<MSTR);
  8c:	80 e5       	ldi	r24, 0x50	; 80
  8e:	8d b9       	out	0x0d, r24	; 13
  SPSR = (1<<SPI2X);
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	8e b9       	out	0x0e, r24	; 14
unsigned char SPI_WriteRead(unsigned char dataout)
{
  unsigned char datain;

  // Start transmission (MOSI)
  SPDR = dataout;
  94:	1f b8       	out	0x0f, r1	; 15

  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
  96:	77 9b       	sbis	0x0e, 7	; 14
  98:	fe cf       	rjmp	.-4      	; 0x96 <main+0x16>

  // Get return Value;
  datain = SPDR;
  9a:	8f b1       	in	r24, 0x0f	; 15

  // Latch the Output using rising pulse to the RCK Pin
  SPI_PORT |= (1<<SPI_CS);
  9c:	c4 9a       	sbi	0x18, 4	; 24
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	8a 95       	dec	r24
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x20>

  _delay_us(1);             // Hold pulse for 1 micro second

  // Disable Latch
  SPI_PORT &= ~(1<<SPI_CS);
  a4:	c4 98       	cbi	0x18, 4	; 24
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	52 e0       	ldi	r21, 0x02	; 2
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  aa:	68 ec       	ldi	r22, 0xC8	; 200
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	12 c0       	rjmp	.+36     	; 0xd4 <main+0x54>
  cnt=SPI_WriteRead(0);

  for(;;) {
    cnt=1;
    while(cnt) {
	  cnt=cnt<<1;
  b0:	22 0f       	add	r18, r18
unsigned char SPI_WriteRead(unsigned char dataout)
{
  unsigned char datain;

  // Start transmission (MOSI)
  SPDR = dataout;
  b2:	2f b9       	out	0x0f, r18	; 15

  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
  b4:	77 9b       	sbis	0x0e, 7	; 14
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <main+0x34>

  // Get return Value;
  datain = SPDR;
  b8:	8f b1       	in	r24, 0x0f	; 15

  // Latch the Output using rising pulse to the RCK Pin
  SPI_PORT |= (1<<SPI_CS);
  ba:	c4 9a       	sbi	0x18, 4	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  bc:	95 2f       	mov	r25, r21
  be:	9a 95       	dec	r25
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x3e>

  _delay_us(1);             // Hold pulse for 1 micro second

  // Disable Latch
  SPI_PORT &= ~(1<<SPI_CS);
  c2:	c4 98       	cbi	0x18, 4	; 24

  for(;;) {
    cnt=1;
    while(cnt) {
	  cnt=cnt<<1;
	  PORTD=SPI_WriteRead(cnt);
  c4:	82 bb       	out	0x12, r24	; 18
  c6:	88 ee       	ldi	r24, 0xE8	; 232
  c8:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ca:	fb 01       	movw	r30, r22
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x4c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d2:	d9 f7       	brne	.-10     	; 0xca <main+0x4a>
  // Reset the 74HC595 register
  cnt=SPI_WriteRead(0);

  for(;;) {
    cnt=1;
    while(cnt) {
  d4:	22 23       	and	r18, r18
  d6:	61 f7       	brne	.-40     	; 0xb0 <main+0x30>
  d8:	40 e8       	ldi	r20, 0x80	; 128
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
	  _delay_ms(100);
	}

	cnt=0x80;
	while(cnt) {
	  cnt=cnt>>1;
  de:	46 95       	lsr	r20
unsigned char SPI_WriteRead(unsigned char dataout)
{
  unsigned char datain;

  // Start transmission (MOSI)
  SPDR = dataout;
  e0:	4f b9       	out	0x0f, r20	; 15

  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
  e2:	77 9b       	sbis	0x0e, 7	; 14
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <main+0x62>

  // Get return Value;
  datain = SPDR;
  e6:	8f b1       	in	r24, 0x0f	; 15

  // Latch the Output using rising pulse to the RCK Pin
  SPI_PORT |= (1<<SPI_CS);
  e8:	c4 9a       	sbi	0x18, 4	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  ea:	95 2f       	mov	r25, r21
  ec:	9a 95       	dec	r25
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x6c>

  _delay_us(1);             // Hold pulse for 1 micro second

  // Disable Latch
  SPI_PORT &= ~(1<<SPI_CS);
  f0:	c4 98       	cbi	0x18, 4	; 24
	}

	cnt=0x80;
	while(cnt) {
	  cnt=cnt>>1;
	  PORTD=SPI_WriteRead(cnt);
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	88 ee       	ldi	r24, 0xE8	; 232
  f6:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f8:	fb 01       	movw	r30, r22
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x7a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 100:	d9 f7       	brne	.-10     	; 0xf8 <main+0x78>
 102:	2f 5f       	subi	r18, 0xFF	; 255
 104:	3f 4f       	sbci	r19, 0xFF	; 255
	  PORTD=SPI_WriteRead(cnt);
	  _delay_ms(100);
	}

	cnt=0x80;
	while(cnt) {
 106:	28 30       	cpi	r18, 0x08	; 8
 108:	31 05       	cpc	r19, r1
 10a:	49 f7       	brne	.-46     	; 0xde <main+0x5e>
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	d0 cf       	rjmp	.-96     	; 0xb0 <main+0x30>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
